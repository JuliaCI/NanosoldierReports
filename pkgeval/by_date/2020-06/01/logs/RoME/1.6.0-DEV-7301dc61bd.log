Julia Version 1.6.0-DEV.137
Commit 7301dc61bd (2020-05-30 15:02 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Neo4j ──────────────────────── v2.0.0
  Installed PositiveFactorizations ─────── v0.2.3
  Installed Unmarshal ──────────────────── v0.4.0
  Installed DiffResults ────────────────── v1.0.2
  Installed KernelDensityEstimate ──────── v0.5.2
  Installed TranscodingStreams ─────────── v0.9.5
  Installed JLD2 ───────────────────────── v0.1.13
  Installed RoME ───────────────────────── v0.6.3
  Installed TransformUtils ─────────────── v0.2.5
  Installed HTTP ───────────────────────── v0.8.15
  Installed Nullables ──────────────────── v1.0.0
  Installed IteratorInterfaceExtensions ── v1.0.0
  Installed Parsers ────────────────────── v1.0.4
  Installed Arpack_jll ─────────────────── v3.5.0+3
  Installed Combinatorics ──────────────── v1.0.2
  Installed MbedTLS_jll ────────────────── v2.16.0+2
  Installed Arpack ─────────────────────── v0.4.0
  Installed StatsBase ──────────────────── v0.33.0
  Installed StaticArrays ───────────────── v0.12.3
  Installed OpenBLAS_jll ───────────────── v0.3.9+4
  Installed FixedPointNumbers ──────────── v0.8.0
  Installed ProgressMeter ──────────────── v1.3.0
  Installed Graphs ─────────────────────── v0.10.3
  Installed QuadGK ─────────────────────── v2.3.1
  Installed SpecialFunctions ───────────── v0.10.3
  Installed DistributedFactorGraphs ────── v0.7.7
  Installed NLSolversBase ──────────────── v7.6.1
  Installed JSON2 ──────────────────────── v0.3.1
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed ApproxManifoldProducts ─────── v0.1.1
  Installed Missings ───────────────────── v0.4.3
  Installed ColorTypes ─────────────────── v0.10.3
  Installed MbedTLS ────────────────────── v1.0.2
  Installed FileIO ─────────────────────── v1.3.0
  Installed Parameters ─────────────────── v0.12.1
  Installed CommonSubexpressions ───────── v0.2.0
  Installed DataStructures ─────────────── v0.17.17
  Installed IniFile ────────────────────── v0.5.0
  Installed CodecZlib ──────────────────── v0.7.0
  Installed Rmath ──────────────────────── v0.6.1
  Installed UnPack ─────────────────────── v1.0.1
  Installed OrderedCollections ─────────── v1.2.0
  Installed MacroTools ─────────────────── v0.5.5
  Installed JSON ───────────────────────── v0.21.0
  Installed Colors ─────────────────────── v0.12.1
  Installed IncrementalInference ───────── v0.11.2
  Installed PooledArrays ───────────────── v0.5.3
  Installed Zlib_jll ───────────────────── v1.2.11+10
  Installed PDMats ─────────────────────── v0.9.12
  Installed DataAPI ────────────────────── v1.3.0
  Installed Requires ───────────────────── v1.0.1
  Installed Distances ──────────────────── v0.8.2
  Installed FiniteDiff ─────────────────── v2.3.2
  Installed InvertedIndices ────────────── v1.0.0
  Installed TableTraits ────────────────── v1.0.0
  Installed DataValueInterfaces ────────── v1.0.0
  Installed FunctionalStateMachine ─────── v0.1.3
  Installed MetaGraphs ─────────────────── v0.6.5
  Installed SimpleTraits ───────────────── v0.9.2
  Installed CategoricalArrays ──────────── v0.8.1
  Installed StatsFuns ──────────────────── v0.9.5
  Installed NaNMath ────────────────────── v0.3.3
  Installed DiffRules ──────────────────── v1.0.1
  Installed Tables ─────────────────────── v1.0.4
  Installed ForwardDiff ────────────────── v0.10.10
  Installed Rmath_jll ──────────────────── v0.2.2+0
  Installed DataFrames ─────────────────── v0.21.2
  Installed LightGraphs ────────────────── v1.3.3
  Installed Compat ─────────────────────── v3.10.0
  Installed CoordinateTransformations ──── v0.6.0
  Installed Inflate ────────────────────── v0.1.2
  Installed FillArrays ─────────────────── v0.8.10
  Installed NLsolve ────────────────────── v4.3.0
  Installed LazyJSON ───────────────────── v0.2.1
  Installed DocStringExtensions ────────── v0.8.1
  Installed Optim ──────────────────────── v0.21.0
  Installed Reexport ───────────────────── v0.2.0
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed ArrayInterface ─────────────── v2.8.7
  Installed LineSearches ───────────────── v7.0.1
  Installed ArnoldiMethod ──────────────── v0.0.4
  Installed Rotations ──────────────────── v1.0.1
  Installed Distributions ──────────────── v0.23.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91fb55c2] + RoME v0.6.3
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [9bbbb610] + ApproxManifoldProducts v0.1.1
  [ec485272] + ArnoldiMethod v0.0.4
  [7d9fca2a] + Arpack v0.4.0
  [68821587] + Arpack_jll v3.5.0+3
  [4fba245c] + ArrayInterface v2.8.7
  [324d7699] + CategoricalArrays v0.8.1
  [944b1d66] + CodecZlib v0.7.0
  [3da002f7] + ColorTypes v0.10.3
  [5ae59095] + Colors v0.12.1
  [861a8166] + Combinatorics v1.0.2
  [bbf7d656] + CommonSubexpressions v0.2.0
  [34da2185] + Compat v3.10.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [150eb455] + CoordinateTransformations v0.6.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.21.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [b4f34e82] + Distances v0.8.2
  [b5cc3c7e] + DistributedFactorGraphs v0.7.7
  [31c24e10] + Distributions v0.23.3
  [ffbed154] + DocStringExtensions v0.8.1
  [5789e2e9] + FileIO v1.3.0
  [1a297f60] + FillArrays v0.8.10
  [6a86dc24] + FiniteDiff v2.3.2
  [53c48c17] + FixedPointNumbers v0.8.0
  [f6369f11] + ForwardDiff v0.10.10
  [3e9e306e] + FunctionalStateMachine v0.1.3
  [86223c79] + Graphs v0.10.3
  [cd3eb016] + HTTP v0.8.15
  [904591bb] + IncrementalInference v0.11.2
  [d25df0c9] + Inflate v0.1.2
  [83e8ac13] + IniFile v0.5.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [033835bb] + JLD2 v0.1.13
  [682c06a0] + JSON v0.21.0
  [2535ab7d] + JSON2 v0.3.1
  [2472808a] + KernelDensityEstimate v0.5.2
  [fc18253b] + LazyJSON v0.2.1
  [093fc24a] + LightGraphs v1.3.3
  [d3d80556] + LineSearches v7.0.1
  [1914dd2f] + MacroTools v0.5.5
  [739be429] + MbedTLS v1.0.2
  [c8ffd9c3] + MbedTLS_jll v2.16.0+2
  [626554b9] + MetaGraphs v0.6.5
  [e1d29d7a] + Missings v0.4.3
  [d41bc354] + NLSolversBase v7.6.1
  [2774e3e8] + NLsolve v4.3.0
  [77ba4419] + NaNMath v0.3.3
  [d2adbeaf] + Neo4j v2.0.0
  [4d1e1d77] + Nullables v1.0.0
  [4536629a] + OpenBLAS_jll v0.3.9+4
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [429524aa] + Optim v0.21.0
  [bac558e1] + OrderedCollections v1.2.0
  [90014a1f] + PDMats v0.9.12
  [d96e819e] + Parameters v0.12.1
  [69de0a69] + Parsers v1.0.4
  [2dfb63ee] + PooledArrays v0.5.3
  [85a6dd25] + PositiveFactorizations v0.2.3
  [92933f4c] + ProgressMeter v1.3.0
  [1fd47b50] + QuadGK v2.3.1
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.1
  [79098fc4] + Rmath v0.6.1
  [f50d1b31] + Rmath_jll v0.2.2+0
  [91fb55c2] + RoME v0.6.3
  [6038ab10] + Rotations v1.0.1
  [699a6c99] + SimpleTraits v0.9.2
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.3
  [2913bbd2] + StatsBase v0.33.0
  [4c63d2b9] + StatsFuns v0.9.5
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [3bb67fe8] + TranscodingStreams v0.9.5
  [9b8138ad] + TransformUtils v0.2.5
  [3a884ed6] + UnPack v1.0.1
  [cbff2730] + Unmarshal v0.4.0
  [83775a58] + Zlib_jll v1.2.11+10
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing RoME
Status `/tmp/jl_jNloDS/Project.toml`
  [9bbbb610] ApproxManifoldProducts v0.1.1
  [150eb455] CoordinateTransformations v0.6.0
  [b5cc3c7e] DistributedFactorGraphs v0.7.7
  [31c24e10] Distributions v0.23.3
  [ffbed154] DocStringExtensions v0.8.1
  [5789e2e9] FileIO v1.3.0
  [86223c79] Graphs v0.10.3
  [904591bb] IncrementalInference v0.11.2
  [033835bb] JLD2 v0.1.13
  [2472808a] KernelDensityEstimate v0.5.2
  [429524aa] Optim v0.21.0
  [92933f4c] ProgressMeter v1.3.0
  [189a3867] Reexport v0.2.0
  [91fb55c2] RoME v0.6.3
  [6038ab10] Rotations v1.0.1
  [9b8138ad] TransformUtils v0.2.5
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_jNloDS/Manifest.toml`
  [9bbbb610] ApproxManifoldProducts v0.1.1
  [ec485272] ArnoldiMethod v0.0.4
  [7d9fca2a] Arpack v0.4.0
  [68821587] Arpack_jll v3.5.0+3
  [4fba245c] ArrayInterface v2.8.7
  [324d7699] CategoricalArrays v0.8.1
  [944b1d66] CodecZlib v0.7.0
  [3da002f7] ColorTypes v0.10.3
  [5ae59095] Colors v0.12.1
  [861a8166] Combinatorics v1.0.2
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v3.10.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [150eb455] CoordinateTransformations v0.6.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.21.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.8.2
  [b5cc3c7e] DistributedFactorGraphs v0.7.7
  [31c24e10] Distributions v0.23.3
  [ffbed154] DocStringExtensions v0.8.1
  [5789e2e9] FileIO v1.3.0
  [1a297f60] FillArrays v0.8.10
  [6a86dc24] FiniteDiff v2.3.2
  [53c48c17] FixedPointNumbers v0.8.0
  [f6369f11] ForwardDiff v0.10.10
  [3e9e306e] FunctionalStateMachine v0.1.3
  [86223c79] Graphs v0.10.3
  [cd3eb016] HTTP v0.8.15
  [904591bb] IncrementalInference v0.11.2
  [d25df0c9] Inflate v0.1.2
  [83e8ac13] IniFile v0.5.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [033835bb] JLD2 v0.1.13
  [682c06a0] JSON v0.21.0
  [2535ab7d] JSON2 v0.3.1
  [2472808a] KernelDensityEstimate v0.5.2
  [fc18253b] LazyJSON v0.2.1
  [093fc24a] LightGraphs v1.3.3
  [d3d80556] LineSearches v7.0.1
  [1914dd2f] MacroTools v0.5.5
  [739be429] MbedTLS v1.0.2
  [c8ffd9c3] MbedTLS_jll v2.16.0+2
  [626554b9] MetaGraphs v0.6.5
  [e1d29d7a] Missings v0.4.3
  [d41bc354] NLSolversBase v7.6.1
  [2774e3e8] NLsolve v4.3.0
  [77ba4419] NaNMath v0.3.3
  [d2adbeaf] Neo4j v2.0.0
  [4d1e1d77] Nullables v1.0.0
  [4536629a] OpenBLAS_jll v0.3.9+4
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [429524aa] Optim v0.21.0
  [bac558e1] OrderedCollections v1.2.0
  [90014a1f] PDMats v0.9.12
  [d96e819e] Parameters v0.12.1
  [69de0a69] Parsers v1.0.4
  [2dfb63ee] PooledArrays v0.5.3
  [85a6dd25] PositiveFactorizations v0.2.3
  [92933f4c] ProgressMeter v1.3.0
  [1fd47b50] QuadGK v2.3.1
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+0
  [91fb55c2] RoME v0.6.3
  [6038ab10] Rotations v1.0.1
  [699a6c99] SimpleTraits v0.9.2
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.3
  [2913bbd2] StatsBase v0.33.0
  [4c63d2b9] StatsFuns v0.9.5
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [3bb67fe8] TranscodingStreams v0.9.5
  [9b8138ad] TransformUtils v0.2.5
  [3a884ed6] UnPack v1.0.1
  [cbff2730] Unmarshal v0.4.0
  [83775a58] Zlib_jll v1.2.11+10
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
[ Info: Multithreaded  convolutions possible, Threads.nthreads()=2.  See `addFactor!(.;threadmodel=MultiThreaded)`.
[ Info: KernelDensityEstimate.FORCE_EVAL_DIRECT = true
[ Info: KernelDensityEstimate.FORCE_EVAL_DIRECT = true
WARNING: ignoring conflicting import of DistributedFactorGraphs.compare into RoME
WARNING: Rotations.Quat is deprecated, use UnitQuaternion instead.
  likely near /home/pkgeval/.julia/packages/RoME/km5rv/src/RobotUtils.jl:10
WARNING: Rotations.Quat is deprecated, use UnitQuaternion instead.
  likely near /home/pkgeval/.julia/packages/RoME/km5rv/src/RobotUtils.jl:13
WARNING: Rotations.Quat is deprecated, use UnitQuaternion instead.
  likely near /home/pkgeval/.julia/packages/RoME/km5rv/src/RobotUtils.jl:24
[ Info: Adding graph visualization tools.
┌ Error: must restore testG2oParser.jl
└ @ Main ~/.julia/packages/RoME/km5rv/test/runtests.jl:8
[TEST] testPoint2Point2WorldBearing.jl
[ Info: try doautoinit! of x0
[ Info: x0 is not initialized, and will do so now...
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1, :x2x1f1]
[ Info: do init of x1
[ Info: [2x0p,d2,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0, :x2]
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
[ Info: Looking at x0x2f1
[ Info:    - Breaking link x0x2f1->x2...
[ Info:      - Original links: [:x0, :x2]
[ Info:      - New links: [:x0]
[ Info: x0x2f1 still has links to other variables, readding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Looking at x0f3
[ Info:    - Breaking link x0f3->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f3 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x2 to tree...
[ Info: Adding x1 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| x0,x2,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x2, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0 0; 1 0 1; 0 1 0; 0 1 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x2, :x1]
State machine iter=9
[ Info: Finished tree based init-inference
Test Summary:                                   | Pass  Total
test Point2Point2WorldBearing factor is working |    6      6
[SUCCESS]



[TEST] testBeehive2D_CliqByCliq.jl
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
STEP 1: Driving around a bit
psym = Symbol("x$(i)") = :x0
nsym = Symbol("x$(i + 1)") = :x1
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
psym = Symbol("x$(i)") = :x1
nsym = Symbol("x$(i + 1)") = :x2
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
psym = Symbol("x$(i)") = :x2
nsym = Symbol("x$(i + 1)") = :x3
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
psym = Symbol("x$(i)") = :x3
nsym = Symbol("x$(i + 1)") = :x4
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
psym = Symbol("x$(i)") = :x4
nsym = Symbol("x$(i + 1)") = :x5
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
psym = Symbol("x$(i)") = :x5
nsym = Symbol("x$(i + 1)") = :x6
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
┌ Error: Note tree init test has been reduced as part of v0.9.0 upgrade and will be restored as a dedidicated effort later.
└ @ Main ~/.julia/packages/RoME/km5rv/test/testBeehive2D_CliqByCliq.jl:18
[ Info: ensure all initialized (using graphinit)
[ Info: x0 is not initialized, and will do so now...
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: x3 is not initialized, and will do so now...
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1]
[ Info: do init of x3
[ Info: x4 is not initialized, and will do so now...
[ Info: try doautoinit! of x4
[ Info: init with useinitfct [:x3x4f1]
[ Info: do init of x4
[ Info: x5 is not initialized, and will do so now...
[ Info: try doautoinit! of x5
[ Info: init with useinitfct [:x4x5f1]
[ Info: do init of x5
[ Info: x6 is not initialized, and will do so now...
[ Info: try doautoinit! of x6
[ Info: init with useinitfct [:x5x6f1]
[ Info: do init of x6
[ Info: l1 is not initialized, and will do so now...
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x0l1f1, :x6l1f1]
[ Info: do init of l1
[ Info: [2x0p,d2,N100],
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x3
[ Info: ===============
[ Info: 
[ Info:  - Removing x3
Si = [:x2, :x4]
[ Info: 
[ Info: Eliminating x5
[ Info: ===============
[ Info: 
[ Info:  - Removing x5
Si = [:x4, :x6]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0, :x2]
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
Si = [:x0, :x6]
[ Info: 
[ Info: Eliminating x4
[ Info: ===============
[ Info: 
[ Info:  - Removing x4
[ Info: Looking at x2x4f1
[ Info:    - Breaking link x2x4f1->x4...
[ Info:      - Original links: [:x2, :x4]
[ Info:      - New links: [:x2]
[ Info: x2x4f1 still has links to other variables, readding it back...
[ Info: Looking at x4x6f1
[ Info:    - Breaking link x4x6f1->x4...
[ Info:      - Original links: [:x4, :x6]
[ Info:      - New links: [:x6]
[ Info: x4x6f1 still has links to other variables, readding it back...
Si = [:x2, :x6]
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
[ Info: Looking at x2f1
[ Info:    - Breaking link x2f1->x2...
[ Info:      - Original links: [:x2]
[ Info:      - New links: Symbol[]
[ Info: x2f1 doesn't have any other links, not adding it back...
[ Info: Looking at x0x2f1
[ Info:    - Breaking link x0x2f1->x2...
[ Info:      - Original links: [:x0, :x2]
[ Info:      - New links: [:x0]
[ Info: x0x2f1 still has links to other variables, readding it back...
[ Info: Looking at x2x6f1
[ Info:    - Breaking link x2x6f1->x2...
[ Info:      - Original links: [:x2, :x6]
[ Info:      - New links: [:x6]
[ Info: x2x6f1 still has links to other variables, readding it back...
Si = [:x0, :x6]
[ Info: 
[ Info: Eliminating x6
[ Info: ===============
[ Info: 
[ Info:  - Removing x6
[ Info: Looking at x0x6f1
[ Info:    - Breaking link x0x6f1->x6...
[ Info:      - Original links: [:x0, :x6]
[ Info:      - New links: [:x0]
[ Info: x0x6f1 still has links to other variables, readding it back...
[ Info: Looking at x6f1
[ Info:    - Breaking link x6f1->x6...
[ Info:      - Original links: [:x6]
[ Info:      - New links: Symbol[]
[ Info: x6f1 doesn't have any other links, not adding it back...
[ Info: Looking at x6f2
[ Info:    - Breaking link x6f2->x6...
[ Info:      - Original links: [:x6]
[ Info:      - New links: Symbol[]
[ Info: x6f2 doesn't have any other links, not adding it back...
[ Info: Looking at x0x6f2
[ Info:    - Breaking link x0x6f2->x6...
[ Info:      - Original links: [:x0, :x6]
[ Info:      - New links: [:x0]
[ Info: x0x6f2 still has links to other variables, readding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f3
[ Info:    - Breaking link x0f3->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f3 doesn't have any other links, not adding it back...
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Looking at x0f4
[ Info:    - Breaking link x0f4->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f4 doesn't have any other links, not adding it back...
[ Info: Looking at x0f5
[ Info:    - Breaking link x0f5->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f5 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x6 to tree...
[ Info: Adding x2 to tree...
[ Info: Adding x4 to tree...
[ Info: Adding l1 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x5 to tree...
[ Info: Adding x3 to tree...
Find potential functions for each clique
[ Info: Get potentials 5| x5,: x4,x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (5, [:x5], [:x4, :x6])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 6| x3,: x2,x4,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (6, [:x3], [:x2, :x4])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 2| x4,: x2,x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=2 adding factor that is not in separator, x3
[ Info: cliq=2 adding factor that is not in separator, x5
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x4], [:x2, :x6])
mat = getCliqMat(cliq) = Bool[1 0 0; 0 0 1; 0 1 0; 1 0 0]
[ Info: Get potentials 3| l1,: x0,x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (3, [:l1], [:x0, :x6])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 4| x1,: x0,x2,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (4, [:x1], [:x0, :x2])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 1| x0,x6,x2,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, l1
[ Info: cliq=1 adding factor that is not in separator, x5
[ Info: cliq=1 adding factor that is not in separator, l1
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, x3
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x6, :x2], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0 0; 0 0 1; 0 1 0; 1 0 0; 0 1 0; 1 0 0; 0 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=1[ Info: prepCliqInitMsgsUp, seps=[:x0, :x6]

State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=1[ Info: prepCliqInitMsgsUp, seps=[:x0, :x2]

State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=1[ Info: prepCliqInitMsgsUp, seps=[:x4, :x6]

State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=[:x2, :x4]

State machine iter=10
State machine iter=9
State machine iter=10
State machine iter=9
State machine iter=10
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=[:x2, :x6]

State machine iter=10
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=Symbol[]

State machine iter=10
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x6, :x2]
State machine iter=11
State machine iter=11
State machine iter=11
State machine iter=9
State machine iter=12
State machine iter=11
State machine iter=11
State machine iter=12
State machine iter=12
State machine iter=12
State machine iter=12
[ Info: Finished tree based init-inference
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x3
[ Info: ===============
[ Info: 
[ Info:  - Removing x3
Si = [:x2, :x4]
[ Info: 
[ Info: Eliminating x5
[ Info: ===============
[ Info: 
[ Info:  - Removing x5
Si = [:x4, :x6]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0, :x2]
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
Si = [:x0, :x6]
[ Info: 
[ Info: Eliminating x4
[ Info: ===============
[ Info: 
[ Info:  - Removing x4
[ Info: Looking at x2x4f1
[ Info:    - Breaking link x2x4f1->x4...
[ Info:      - Original links: [:x2, :x4]
[ Info:      - New links: [:x2]
[ Info: x2x4f1 still has links to other variables, readding it back...
[ Info: Looking at x4x6f1
[ Info:    - Breaking link x4x6f1->x4...
[ Info:      - Original links: [:x4, :x6]
[ Info:      - New links: [:x6]
[ Info: x4x6f1 still has links to other variables, readding it back...
Si = [:x2, :x6]
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
[ Info: Looking at x2f1
[ Info:    - Breaking link x2f1->x2...
[ Info:      - Original links: [:x2]
[ Info:      - New links: Symbol[]
[ Info: x2f1 doesn't have any other links, not adding it back...
[ Info: Looking at x0x2f1
[ Info:    - Breaking link x0x2f1->x2...
[ Info:      - Original links: [:x0, :x2]
[ Info:      - New links: [:x0]
[ Info: x0x2f1 still has links to other variables, readding it back...
[ Info: Looking at x2x6f1
[ Info:    - Breaking link x2x6f1->x2...
[ Info:      - Original links: [:x2, :x6]
[ Info:      - New links: [:x6]
[ Info: x2x6f1 still has links to other variables, readding it back...
Si = [:x0, :x6]
[ Info: 
[ Info: Eliminating x6
[ Info: ===============
[ Info: 
[ Info:  - Removing x6
[ Info: Looking at x0x6f1
[ Info:    - Breaking link x0x6f1->x6...
[ Info:      - Original links: [:x0, :x6]
[ Info:      - New links: [:x0]
[ Info: x0x6f1 still has links to other variables, readding it back...
[ Info: Looking at x6f1
[ Info:    - Breaking link x6f1->x6...
[ Info:      - Original links: [:x6]
[ Info:      - New links: Symbol[]
[ Info: x6f1 doesn't have any other links, not adding it back...
[ Info: Looking at x6f2
[ Info:    - Breaking link x6f2->x6...
[ Info:      - Original links: [:x6]
[ Info:      - New links: Symbol[]
[ Info: x6f2 doesn't have any other links, not adding it back...
[ Info: Looking at x0x6f2
[ Info:    - Breaking link x0x6f2->x6...
[ Info:      - Original links: [:x0, :x6]
[ Info:      - New links: [:x0]
[ Info: x0x6f2 still has links to other variables, readding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f3
[ Info:    - Breaking link x0f3->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f3 doesn't have any other links, not adding it back...
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Looking at x0f4
[ Info:    - Breaking link x0f4->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f4 doesn't have any other links, not adding it back...
[ Info: Looking at x0f5
[ Info:    - Breaking link x0f5->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f5 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x6 to tree...
[ Info: Adding x2 to tree...
[ Info: Adding x4 to tree...
[ Info: Adding l1 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x5 to tree...
[ Info: Adding x3 to tree...
Find potential functions for each clique
[ Info: Get potentials 5| x5,: x4,x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (5, [:x5], [:x4, :x6])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 6| x3,: x2,x4,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (6, [:x3], [:x2, :x4])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 2| x4,: x2,x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=2 adding factor that is not in separator, x3
[ Info: cliq=2 adding factor that is not in separator, x5
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x4], [:x2, :x6])
mat = getCliqMat(cliq) = Bool[1 0 0; 0 0 1; 0 1 0; 1 0 0]
[ Info: Get potentials 3| l1,: x0,x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (3, [:l1], [:x0, :x6])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 4| x1,: x0,x2,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (4, [:x1], [:x0, :x2])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 1| x0,x6,x2,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, l1
[ Info: cliq=1 adding factor that is not in separator, x5
[ Info: cliq=1 adding factor that is not in separator, l1
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, x3
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x6, :x2], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0 0; 0 0 1; 0 1 0; 1 0 0; 0 1 0; 1 0 0; 0 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=1[ Info: prepCliqInitMsgsUp, seps=[:x0, :x6]

State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=1[ Info: prepCliqInitMsgsUp, seps=[:x0, :x2]

State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=1[ Info: prepCliqInitMsgsUp, seps=[:x4, :x6]

State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=[:x2, :x4]

State machine iter=10
State machine iter=9
State machine iter=10
State machine iter=9
State machine iter=10
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=[:x2, :x6]

State machine iter=10
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=Symbol[]

State machine iter=10
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x6, :x2]
State machine iter=11
State machine iter=11
State machine iter=11
State machine iter=9
State machine iter=12
State machine iter=11
State machine iter=11
State machine iter=12
State machine iter=12
State machine iter=12
State machine iter=12
[ Info: Finished tree based init-inference
Test Summary:               | Pass  Total
sanity check on Hex example |   22     22
[SUCCESS]



[TEST] testhigherdimroots.jl
Test Summary:                         | Pass  Total
Increased dimension root finding test |    2      2
Test Summary:                    | Pass  Total
test CommonConvWrapper functions |   55     55
[SUCCESS]



[TEST] testManifoldsPose2Equivalent.jl
Test Summary:                                           |
Testing hand constructed product of SE(2) equivalent... | No tests
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1, :x1f2]
[ Info: do init of x1
[ Info: [2x0p,d3,N100],
[ Info: [2x0p,d3,N100],
Test Summary:                                                    | Pass  Total
Factor graph based test of SE(2) equivalent using only Priors... |    3      3
┌ Warning: not implemented yet
└ @ Main ~/.julia/packages/RoME/km5rv/test/testManifoldsPose2Equivalent.jl:202
Test Summary:                                                                           |
Factor graph based test of SE(2) equivalent using Priors and Conditional Likelihoods... | No tests
[SUCCESS]



[TEST] testDidsonFunctions.jl
zDim = size(measurement[1], 1) = 3
  0.243955 seconds (133.40 k allocations: 6.457 MiB)
  0.200252 seconds (62.34 k allocations: 2.686 MiB)
  0.432009 seconds (640.79 k allocations: 49.055 MiB, 28.21% gc time)
┌ Warning: still need to insert kld(..) test to ensure this is working
└ @ Main ~/.julia/packages/RoME/km5rv/test/testDidsonFunctions.jl:46
Test back projection from 
  0.000071 seconds (17 allocations: 1.625 KiB)
  0.000031 seconds (15 allocations: 1.312 KiB)
  0.544923 seconds (1.37 M allocations: 111.306 MiB, 11.19% gc time)
┌ Warning: Breaks if not set to 100
└ @ Main ~/.julia/packages/RoME/km5rv/test/testDidsonFunctions.jl:103
Adding PriorPose3 to graph...
[ Info: try doautoinit! of x1
Adding LinearRangeBearingElevation to graph...
  0.010923 seconds (57 allocations: 3.672 KiB)
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of l1
[ Info: l1 is not initialized, and will do so now...
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x1l1f1]
[ Info: do init of l1
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
Si = [:x1]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
[ Info: Looking at x1f2
[ Info:    - Breaking link x1f2->x1...
[ Info:      - Original links: [:x1]
[ Info:      - New links: Symbol[]
[ Info: x1f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x1 to tree...
[ Info: Adding l1 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| x1,l1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x1, :l1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x1, :l1]
State machine iter=9
[ Info: Finished tree based init-inference
[SUCCESS]



[TEST] testPoint2Point2.jl
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: ensure all initialized (using graphinit)
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
State machine iter=9
[ Info: Finished tree based init-inference
Test Summary:           | Pass  Total
basic Point2Point2 test |    2      2
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of l1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x0l1f1, :x1l1f1]
[ Info: do init of l1
[ Info: [2x0p,d2,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:l1]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
Si = [:l1]
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
[ Info: Looking at l1f1
[ Info:    - Breaking link l1f1->l1...
[ Info:      - Original links: [:l1]
[ Info:      - New links: Symbol[]
[ Info: l1f1 doesn't have any other links, not adding it back...
[ Info: Looking at l1f2
[ Info:    - Breaking link l1f2->l1...
[ Info:      - Original links: [:l1]
[ Info:      - New links: Symbol[]
[ Info: l1f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding l1 to tree...
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
Find potential functions for each clique
[ Info: Get potentials 2| x1,: l1,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x1], [:l1])
mat = getCliqMat(cliq) = Bool[1 0; 1 1]
[ Info: Get potentials 1| l1,x0,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x1
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:l1, :x0], Symbol[])
mat = getCliqMat(cliq) = Bool[1 1; 0 1; 1 0]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:l1]
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=Symbol[]

State machine iter=10
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:l1, :x0]
State machine iter=11
State machine iter=9
State machine iter=12
[ Info: Finished tree based init-inference
Test Summary:                | Pass  Total
test Point2Point2Range{T}... |    8      8
[SUCCESS]



[TEST] testPoint2Point2Init.jl
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
[ Info: ensure all initialized (using graphinit)
[ Info: x0 is not initialized, and will do so now...
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
[ Info: l1 is not initialized, and will do so now...
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x0l1f1, :x1l1f1]
[ Info: do init of l1
[ Info: [2x0p,d2,N100],
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:l1]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
Si = [:l1]
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
[ Info: Looking at l1f1
[ Info:    - Breaking link l1f1->l1...
[ Info:      - Original links: [:l1]
[ Info:      - New links: Symbol[]
[ Info: l1f1 doesn't have any other links, not adding it back...
[ Info: Looking at l1f2
[ Info:    - Breaking link l1f2->l1...
[ Info:      - Original links: [:l1]
[ Info:      - New links: Symbol[]
[ Info: l1f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding l1 to tree...
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
Find potential functions for each clique
[ Info: Get potentials 2| x1,: l1,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x1], [:l1])
mat = getCliqMat(cliq) = Bool[1 0; 1 1]
[ Info: Get potentials 1| l1,x0,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x1
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:l1, :x0], Symbol[])
mat = getCliqMat(cliq) = Bool[1 1; 0 1; 1 0]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:l1]
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=Symbol[]

State machine iter=10
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:l1, :x0]
State machine iter=11
State machine iter=9
State machine iter=12
[ Info: Finished tree based init-inference
Test Summary:                                                     | Pass  Total
test tree based autoinit on small bimodal point2 trilateration... |   16     16
[SUCCESS]



[TEST] testBasicPose2Stationary.jl
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
Si = [:x1]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
[ Info: Looking at x1f1
[ Info:    - Breaking link x1f1->x1...
[ Info:      - Original links: [:x1]
[ Info:      - New links: Symbol[]
[ Info: x1f1 doesn't have any other links, not adding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x2 to tree...
Find potential functions for each clique
[ Info: Get potentials 2| x2,: x1,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x2], [:x1])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x2
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1; 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:x1]
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=Symbol[]

State machine iter=10
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
State machine iter=11
┌ Warning: PPE 'default' does not exist, adding
└ @ DistributedFactorGraphs ~/.julia/packages/DistributedFactorGraphs/27qHU/src/services/DFGVariable.jl:535
State machine iter=9
State machine iter=12
[ Info: Finished tree based init-inference
Test Summary:                                        | Pass  Total
basic pose2 trivial case without forcing autoinit... |    9      9
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
Si = [:x1]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
[ Info: Looking at x1f1
[ Info:    - Breaking link x1f1->x1...
[ Info:      - Original links: [:x1]
[ Info:      - New links: Symbol[]
[ Info: x1f1 doesn't have any other links, not adding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x2 to tree...
Find potential functions for each clique
[ Info: Get potentials 2| x2,: x1,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x2], [:x1])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x2
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1; 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:x1]
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=Symbol[]

State machine iter=10
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
State machine iter=11
State machine iter=9
State machine iter=12
[ Info: Finished tree based init-inference
Test Summary:                                  | Pass  Total
basic pose2 with forcing bad initialization... |    9      9
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
[ Info: ensure all initialized (using graphinit)
[ Info: x0 is not initialized, and will do so now...
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
State machine iter=9
[ Info: Finished tree based init-inference
Test Summary:                | Pass  Total
test basic banana (split)... |    6      6
[SUCCESS]



[TEST] TestPoseAndPoint2Constraints.jl
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: ensure all initialized (using graphinit)
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
State machine iter=9
[ Info: Finished tree based init-inference
[ Info: try doautoinit! of x2
[ Info: ensure all initialized (using graphinit)
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
Si = [:x1]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
[ Info: Looking at x1f1
[ Info:    - Breaking link x1f1->x1...
[ Info:      - Original links: [:x1]
[ Info:      - New links: Symbol[]
[ Info: x1f1 doesn't have any other links, not adding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x2 to tree...
Find potential functions for each clique
[ Info: Get potentials 2| x2,: x1,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x2], [:x1])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x2
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1; 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:x1]
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=Symbol[]

State machine iter=10
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
State machine iter=11
State machine iter=9
State machine iter=12
[ Info: Finished tree based init-inference
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
Si = [:x1]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
[ Info: Looking at x1f1
[ Info:    - Breaking link x1f1->x1...
[ Info:      - Original links: [:x1]
[ Info:      - New links: Symbol[]
[ Info: x1f1 doesn't have any other links, not adding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x2 to tree...
Find potential functions for each clique
[ Info: Get potentials 2| x2,: x1,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x2], [:x1])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x2
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1; 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:x1]
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=Symbol[]

State machine iter=10
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
State machine iter=11
State machine iter=9
State machine iter=12
[ Info: Finished tree based init-inference
test bearing range evaluations
[ Info: try doautoinit! of l1
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x0l1f1, :l1f1]
[ Info: do init of l1
[ Info: [2x0p,d2,N100],
Test Summary:                       | Pass  Total
test pose and point combinations... |   18     18
[SUCCESS]



[TEST] testDynPoint2D.jl
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
State machine iter=9
[ Info: Finished tree based init-inference
┌ Warning: `getVertKDE(dfg::AbstractDFG, lbl::Symbol)` is deprecated, use `getKDE(dfg, lbl)` instead.
│   caller = top-level scope at show.jl:636
└ @ Core show.jl:636
global x0 = getKDEMax(getVertKDE(fg, :x0)) = [0.12724102210716767, 0.19379230300846173, 9.887366021027862, 9.951248463801369]
┌ Warning: `getVertKDE(dfg::AbstractDFG, lbl::Symbol)` is deprecated, use `getKDE(dfg, lbl)` instead.
│   caller = top-level scope at show.jl:636
└ @ Core show.jl:636
global x1 = getKDEMax(getVertKDE(fg, :x1)) = [19.783350600046113, 19.700273983404404, 9.949525203414073, 9.626898976167325]
Test Summary:     | Pass  Total
test DynPoint2... |    4      4
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
Si = [:x1]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
[ Info: Looking at x1f1
[ Info:    - Breaking link x1f1->x1...
[ Info:      - Original links: [:x1]
[ Info:      - New links: Symbol[]
[ Info: x1f1 doesn't have any other links, not adding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x2 to tree...
Find potential functions for each clique
[ Info: Get potentials 2| x2,: x1,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x2], [:x1])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x2
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1; 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:x1]
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=Symbol[]

State machine iter=10
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
State machine iter=11
State machine iter=9
State machine iter=12
[ Info: Finished tree based init-inference
┌ Warning: `getVertKDE(dfg::AbstractDFG, lbl::Symbol)` is deprecated, use `getKDE(dfg, lbl)` instead.
│   caller = top-level scope at show.jl:636
└ @ Core show.jl:636
global x0 = getKDEMax(getVertKDE(fg, :x0)) = [-0.08838493660246088, -0.08608861893146305, 9.912598701097629, 10.011460297803396]
┌ Warning: `getVertKDE(dfg::AbstractDFG, lbl::Symbol)` is deprecated, use `getKDE(dfg, lbl)` instead.
│   caller = top-level scope at show.jl:636
└ @ Core show.jl:636
global x1 = getKDEMax(getVertKDE(fg, :x1)) = [9.719046515002532, 9.994920737882941, 10.122310982545944, 10.07005313165542]
┌ Warning: `getVertKDE(dfg::AbstractDFG, lbl::Symbol)` is deprecated, use `getKDE(dfg, lbl)` instead.
│   caller = top-level scope at show.jl:636
└ @ Core show.jl:636
global x2 = getKDEMax(getVertKDE(fg, :x2)) = [19.96814256232569, 19.934313805393167, 10.163027290213027, 10.0156935868726]
Test Summary:                  | Pass  Total
test DynPoint2VelocityPrior... |    9      9
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
Test Summary:           | Pass  Total
test VelPoint2VelPoint2 |    9      9
[SUCCESS]



[TEST] testBearingRange2D.jl
Test Summary:                             | Pass  Total
test sampling from BearingRange factor... |    4      4
res = [0.0, 0.0]
res = [1.4997597826618579e-30, 0.0]
res = [1.4997597826618579e-30, 0.0]
res = [0.0, 0.0]
Test Summary:                                 | Pass  Total
test BearingRange factor residual function... |    4      4
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
Test Summary:                                             | Pass  Total
test unimodal bearing range factor, solve for landmark... |    5      5
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
abs.(Statistics.mean(pts, dims = 2)) = [0.0029010473680175374; 0.0515648219117464; 0.009777614740990596]
Statistics.std(pts, dims = 2) = [1.0563899510573642; 0.7123413241342802; 0.1120974749244415]
Test Summary:                                         | Pass  Total
test unimodal bearing range factor, solve for pose... |    3      3
Test Summary:                                         | Pass  Total
Testing Pose2Point2Bearing Initialization and Packing |    2      2
[SUCCESS]



[TEST] testDeltaOdo.jl
Test Summary:                                           | Pass  Total
test odometry accumulation MutablePose2Pose2Gaussian... |    2      2
[SUCCESS]



[TEST] testFixedLagFG.jl
STEP 1: Driving around a bit
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of x3
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1]
[ Info: do init of x3
[ Info: try doautoinit! of x4
[ Info: try doautoinit! of x4
[ Info: init with useinitfct [:x3x4f1]
[ Info: do init of x4
[ Info: try doautoinit! of x5
[ Info: try doautoinit! of x5
[ Info: init with useinitfct [:x4x5f1]
[ Info: do init of x5
[ Info: try doautoinit! of x6
[ Info: try doautoinit! of l1
STEP 2: Solve graph when shorter than fixed length
[ Info: ensure all initialized (using graphinit)
[ Info: x6 is not initialized, and will do so now...
[ Info: try doautoinit! of x6
[ Info: init with useinitfct [:x5x6f1]
[ Info: do init of x6
[ Info: l1 is not initialized, and will do so now...
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x0l1f1]
[ Info: do init of l1
[ Info: Solving over the Bayes (Junction) tree.
[ Info: Quasi fixed-lag is enabled (a feature currently in testing)!
[ Info: [fifoFreeze] QFL - Freezing nodes x0 -> x1.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x6
[ Info: ===============
[ Info: 
[ Info:  - Removing x6
Si = [:x5]
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
Si = [:x0]
[ Info: 
[ Info: Eliminating x3
[ Info: ===============
[ Info: 
[ Info:  - Removing x3
Si = [:x2, :x4]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0, :x2]
[ Info: 
[ Info: Eliminating x4
[ Info: ===============
[ Info: 
[ Info:  - Removing x4
[ Info: Looking at x2x4f1
[ Info:    - Breaking link x2x4f1->x4...
[ Info:      - Original links: [:x2, :x4]
[ Info:      - New links: [:x2]
[ Info: x2x4f1 still has links to other variables, readding it back...
Si = [:x5, :x2]
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
[ Info: Looking at x0x2f1
[ Info:    - Breaking link x0x2f1->x2...
[ Info:      - Original links: [:x0, :x2]
[ Info:      - New links: [:x0]
[ Info: x0x2f1 still has links to other variables, readding it back...
[ Info: Looking at x2f1
[ Info:    - Breaking link x2f1->x2...
[ Info:      - Original links: [:x2]
[ Info:      - New links: Symbol[]
[ Info: x2f1 doesn't have any other links, not adding it back...
[ Info: Looking at x5x2f1
[ Info:    - Breaking link x5x2f1->x2...
[ Info:      - Original links: [:x5, :x2]
[ Info:      - New links: [:x5]
[ Info: x5x2f1 still has links to other variables, readding it back...
Si = [:x0, :x5]
[ Info: 
[ Info: Eliminating x5
[ Info: ===============
[ Info: 
[ Info:  - Removing x5
[ Info: Looking at x5f1
[ Info:    - Breaking link x5f1->x5...
[ Info:      - Original links: [:x5]
[ Info:      - New links: Symbol[]
[ Info: x5f1 doesn't have any other links, not adding it back...
[ Info: Looking at x5f2
[ Info:    - Breaking link x5f2->x5...
[ Info:      - Original links: [:x5]
[ Info:      - New links: Symbol[]
[ Info: x5f2 doesn't have any other links, not adding it back...
[ Info: Looking at x0x5f1
[ Info:    - Breaking link x0x5f1->x5...
[ Info:      - Original links: [:x0, :x5]
[ Info:      - New links: [:x0]
[ Info: x0x5f1 still has links to other variables, readding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f3
[ Info:    - Breaking link x0f3->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f3 doesn't have any other links, not adding it back...
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Looking at x0f4
[ Info:    - Breaking link x0f4->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f4 doesn't have any other links, not adding it back...
[ Info: Looking at x0f5
[ Info:    - Breaking link x0f5->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f5 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x5 to tree...
[ Info: Adding x2 to tree...
[ Info: Adding x4 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x3 to tree...
[ Info: Adding l1 to tree...
[ Info: Adding x6 to tree...
Find potential functions for each clique
[ Info: Get potentials 4| x3,: x2,x4,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (4, [:x3], [:x2, :x4])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 2| x4,: x5,x2,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=2 adding factor that is not in separator, x3
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x4], [:x5, :x2])
mat = getCliqMat(cliq) = Bool[1 1 0; 0 0 1; 1 0 0]
[ Info: Get potentials 3| x1,: x0,x2,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (3, [:x1], [:x0, :x2])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 5| l1,: x0,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (5, [:l1], [:x0])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 6| x6,: x5,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (6, [:x6], [:x5])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 1| x0,x5,x2,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, l1
[ Info: cliq=1 adding factor that is not in separator, x4
[ Info: cliq=1 adding factor that is not in separator, x6
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, x3
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x5, :x2], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0 0; 0 1 0; 0 0 1; 1 0 0; 0 0 1; 1 0 0; 0 1 0]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=1[ Info: prepCliqInitMsgsUp, seps=[:x0, :x2]

State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=1[ Info: prepCliqInitMsgsUp, seps=[:x2, :x4]

State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=1[ Info: prepCliqInitMsgsUp, seps=[:x0]

State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=[:x5]

State machine iter=10
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=[:x5, :x2]

State machine iter=10
State machine iter=9
State machine iter=10
State machine iter=9
State machine iter=10
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=Symbol[]

State machine iter=10
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x5, :x2]
State machine iter=11
State machine iter=11
State machine iter=11
State machine iter=11
State machine iter=9
State machine iter=12
State machine iter=12
State machine iter=11
State machine iter=12
State machine iter=12
State machine iter=12
[ Info: Finished tree based init-inference
STEP 3: Drive a couple more, longer than fixed lag window
[ Info: try doautoinit! of x7
[ Info: try doautoinit! of x7
[ Info: init with useinitfct [:x6x7f1]
[ Info: do init of x7
[ Info: try doautoinit! of x8
[ Info: try doautoinit! of x8
[ Info: init with useinitfct [:x7x8f1]
[ Info: do init of x8
[ Info: try doautoinit! of x9
[ Info: try doautoinit! of x9
[ Info: init with useinitfct [:x8x9f1]
[ Info: do init of x9
[ Info: try doautoinit! of x10
[ Info: try doautoinit! of x10
[ Info: init with useinitfct [:x9x10f1]
[ Info: do init of x10
[ Info: try doautoinit! of x11
[ Info: try doautoinit! of x11
[ Info: init with useinitfct [:x10x11f1]
[ Info: do init of x11
[ Info: try doautoinit! of x12
[ Info: [fifoFreeze] QFL - Freezing nodes x0 -> l1.
STEP 4: Solve graph when shorter than fixed length, and show time to solve
[ Info: ensure all initialized (using graphinit)
[ Info: x12 is not initialized, and will do so now...
[ Info: try doautoinit! of x12
[ Info: init with useinitfct [:x11x12f1]
[ Info: do init of x12
[ Info: Solving over the Bayes (Junction) tree.
[ Info: Quasi fixed-lag is enabled (a feature currently in testing)!
[ Info: [fifoFreeze] QFL - Freezing nodes x0 -> l1.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x12
[ Info: ===============
[ Info: 
[ Info:  - Removing x12
Si = [:x11]
[ Info: 
[ Info: Eliminating x3
[ Info: ===============
[ Info: 
[ Info:  - Removing x3
Si = [:x2, :x4]
[ Info: 
[ Info: Eliminating x8
[ Info: ===============
[ Info: 
[ Info:  - Removing x8
Si = [:x7, :x9]
[ Info: 
[ Info: Eliminating x5
[ Info: ===============
[ Info: 
[ Info:  - Removing x5
Si = [:x4, :x6]
[ Info: 
[ Info: Eliminating x10
[ Info: ===============
[ Info: 
[ Info:  - Removing x10
Si = [:x9, :x11]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0, :x2]
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
Si = [:x0, :x6]
[ Info: 
[ Info: Eliminating x7
[ Info: ===============
[ Info: 
[ Info:  - Removing x7
[ Info: Looking at x7x9f1
[ Info:    - Breaking link x7x9f1->x7...
[ Info:      - Original links: [:x7, :x9]
[ Info:      - New links: [:x9]
[ Info: x7x9f1 still has links to other variables, readding it back...
Si = [:x6, :x9]
[ Info: 
[ Info: Eliminating x4
[ Info: ===============
[ Info: 
[ Info:  - Removing x4
[ Info: Looking at x2x4f1
[ Info:    - Breaking link x2x4f1->x4...
[ Info:      - Original links: [:x2, :x4]
[ Info:      - New links: [:x2]
[ Info: x2x4f1 still has links to other variables, readding it back...
[ Info: Looking at x4x6f1
[ Info:    - Breaking link x4x6f1->x4...
[ Info:      - Original links: [:x4, :x6]
[ Info:      - New links: [:x6]
[ Info: x4x6f1 still has links to other variables, readding it back...
Si = [:x2, :x6]
[ Info: 
[ Info: Eliminating x11
[ Info: ===============
[ Info: 
[ Info:  - Removing x11
[ Info: Looking at x11f1
[ Info:    - Breaking link x11f1->x11...
[ Info:      - Original links: [:x11]
[ Info:      - New links: Symbol[]
[ Info: x11f1 doesn't have any other links, not adding it back...
[ Info: Looking at x9x11f1
[ Info:    - Breaking link x9x11f1->x11...
[ Info:      - Original links: [:x9, :x11]
[ Info:      - New links: [:x9]
[ Info: x9x11f1 still has links to other variables, readding it back...
Si = [:x9]
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
[ Info: Looking at x2x6f1
[ Info:    - Breaking link x2x6f1->x2...
[ Info:      - Original links: [:x2, :x6]
[ Info:      - New links: [:x6]
[ Info: x2x6f1 still has links to other variables, readding it back...
[ Info: Looking at x2f1
[ Info:    - Breaking link x2f1->x2...
[ Info:      - Original links: [:x2]
[ Info:      - New links: Symbol[]
[ Info: x2f1 doesn't have any other links, not adding it back...
[ Info: Looking at x0x2f1
[ Info:    - Breaking link x0x2f1->x2...
[ Info:      - Original links: [:x0, :x2]
[ Info:      - New links: [:x0]
[ Info: x0x2f1 still has links to other variables, readding it back...
Si = [:x6, :x0]
[ Info: 
[ Info: Eliminating x9
[ Info: ===============
[ Info: 
[ Info:  - Removing x9
[ Info: Looking at x9f3
[ Info:    - Breaking link x9f3->x9...
[ Info:      - Original links: [:x9]
[ Info:      - New links: Symbol[]
[ Info: x9f3 doesn't have any other links, not adding it back...
[ Info: Looking at x6x9f1
[ Info:    - Breaking link x6x9f1->x9...
[ Info:      - Original links: [:x6, :x9]
[ Info:      - New links: [:x6]
[ Info: x6x9f1 still has links to other variables, readding it back...
[ Info: Looking at x9f2
[ Info:    - Breaking link x9f2->x9...
[ Info:      - Original links: [:x9]
[ Info:      - New links: Symbol[]
[ Info: x9f2 doesn't have any other links, not adding it back...
[ Info: Looking at x9f1
[ Info:    - Breaking link x9f1->x9...
[ Info:      - Original links: [:x9]
[ Info:      - New links: Symbol[]
[ Info: x9f1 doesn't have any other links, not adding it back...
Si = [:x6]
[ Info: 
[ Info: Eliminating x6
[ Info: ===============
[ Info: 
[ Info:  - Removing x6
[ Info: Looking at x6x0f1
[ Info:    - Breaking link x6x0f1->x6...
[ Info:      - Original links: [:x6, :x0]
[ Info:      - New links: [:x0]
[ Info: x6x0f1 still has links to other variables, readding it back...
[ Info: Looking at x0x6f1
[ Info:    - Breaking link x0x6f1->x6...
[ Info:      - Original links: [:x0, :x6]
[ Info:      - New links: [:x0]
[ Info: x0x6f1 still has links to other variables, readding it back...
[ Info: Looking at x6f2
[ Info:    - Breaking link x6f2->x6...
[ Info:      - Original links: [:x6]
[ Info:      - New links: Symbol[]
[ Info: x6f2 doesn't have any other links, not adding it back...
[ Info: Looking at x6f1
[ Info:    - Breaking link x6f1->x6...
[ Info:      - Original links: [:x6]
[ Info:      - New links: Symbol[]
[ Info: x6f1 doesn't have any other links, not adding it back...
[ Info: Looking at x6f3
[ Info:    - Breaking link x6f3->x6...
[ Info:      - Original links: [:x6]
[ Info:      - New links: Symbol[]
[ Info: x6f3 doesn't have any other links, not adding it back...
[ Info: Looking at x6f4
[ Info:    - Breaking link x6f4->x6...
[ Info:      - Original links: [:x6]
[ Info:      - New links: Symbol[]
[ Info: x6f4 doesn't have any other links, not adding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f4
[ Info:    - Breaking link x0f4->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f4 doesn't have any other links, not adding it back...
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Looking at x0f3
[ Info:    - Breaking link x0f3->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f3 doesn't have any other links, not adding it back...
[ Info: Looking at x0f5
[ Info:    - Breaking link x0f5->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f5 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x6 to tree...
[ Info: Adding x9 to tree...
[ Info: Adding x2 to tree...
[ Info: Adding x11 to tree...
[ Info: Adding x4 to tree...
[ Info: Adding x7 to tree...
[ Info: Adding l1 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x10 to tree...
[ Info: Adding x5 to tree...
[ Info: Adding x8 to tree...
[ Info: Adding x3 to tree...
[ Info: Adding x12 to tree...
Find potential functions for each clique
[ Info: Get potentials 10| x12,: x11,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (10, [:x12], [:x11])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 3| x11,x10,: x9,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=3 adding factor that is not in separator, x12
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (3, [:x11, :x10], [:x9])
mat = getCliqMat(cliq) = Bool[1 1 0; 0 1 1; 1 0 0]
[ Info: Get potentials 8| x8,: x7,x9,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (8, [:x8], [:x7, :x9])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 2| x9,x7,: x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=2 adding factor that is not in separator, x8
[ Info: cliq=2 adding factor that is not in separator, x10
[ Info: cliq=2 adding factor that is not in separator, x8
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x9, :x7], [:x6])
mat = getCliqMat(cliq) = Bool[0 1 1; 1 0 0; 0 1 0; 1 0 0]
[ Info: Get potentials 7| x5,: x4,x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (7, [:x5], [:x4, :x6])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 9| x3,: x2,x4,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (9, [:x3], [:x2, :x4])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 4| x4,: x2,x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=4 adding factor that is not in separator, x3
[ Info: cliq=4 adding factor that is not in separator, x5
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (4, [:x4], [:x2, :x6])
mat = getCliqMat(cliq) = Bool[1 0 0; 0 0 1; 0 1 0; 1 0 0]
[ Info: Get potentials 5| l1,: x0,x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (5, [:l1], [:x0, :x6])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 6| x1,: x0,x2,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (6, [:x1], [:x0, :x2])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 1| x0,x6,x2,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, l1
[ Info: cliq=1 adding factor that is not in separator, x5
[ Info: cliq=1 adding factor that is not in separator, l1
[ Info: cliq=1 adding factor that is not in separator, x7
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, x3
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x6, :x2], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0 0; 0 1 0; 0 0 1; 0 1 0; 1 0 0; 0 1 0; 1 0 0; 0 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=[:x4, :x6]
[ Info: prepCliqInitMsgsUp, seps=[:x2, :x6]
[ Info: prepCliqInitMsgsUp, seps=[:x2, :x4]
[ Info: prepCliqInitMsgsUp, seps=[:x0, :x6]
[ Info: prepCliqInitMsgsUp, seps=[:x0, :x2]
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
┌ Warning: buildSubgraphFromLabels! is deprecated use copyGraph, buildSubgraph or buildCliqueSubgraph!(IIF)
│   caller = buildCliqSubgraphForDown_StateMachine(::CliqStateMachineContainer{BayesTreeNodeData,LightDFG{SolverParams,DistributedFactorGraphs.DFGVariable,DistributedFactorGraphs.DFGFactor},LightDFG{SolverParams,DistributedFactorGraphs.DFGVariable,DistributedFactorGraphs.DFGFactor},BayesTree}) at CliqStateMachine.jl:683
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/CliqStateMachine.jl:683
State machine iter=1┌ Warning: getSubgraphAroundNode is deprecated use buildSubgraph
│   caller = ip:0x0
└ @ Core :-1

┌ Warning: _copyIntoGraph! is deprecated use copyGraph/deepcopyGraph[!]
│   caller = getSubgraphAroundNode(::LightDFG{SolverParams,DistributedFactorGraphs.DFGVariable,DistributedFactorGraphs.DFGFactor}, ::DistributedFactorGraphs.DFGVariable{Pose2}, ::Int64, ::Bool, ::LightDFG{SolverParams,DistributedFactorGraphs.DFGVariable,DistributedFactorGraphs.DFGFactor}; solvable::Int64) at Deprecated.jl:195
└ @ DistributedFactorGraphs ~/.julia/packages/DistributedFactorGraphs/27qHU/src/Deprecated.jl:195
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x6, :x2]
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=1
State machine iter=2
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=1
State machine iter=2
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=1[ Info: prepCliqInitMsgsUp, seps=[:x7, :x9]

State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=6[ Info: prepCliqInitMsgsUp, seps=[:x11]

State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=3
State machine iter=4
┌ Warning: _copyIntoGraph! is deprecated use copyGraph/deepcopyGraph[!]
│   caller = getSubgraphAroundNode(::LightDFG{SolverParams,DistributedFactorGraphs.DFGVariable,DistributedFactorGraphs.DFGFactor}, ::DistributedFactorGraphs.DFGVariable{Point2}, ::Int64, ::Bool, ::LightDFG{SolverParams,DistributedFactorGraphs.DFGVariable,DistributedFactorGraphs.DFGFactor}; solvable::Int64) at Deprecated.jl:195
└ @ DistributedFactorGraphs ~/.julia/packages/DistributedFactorGraphs/27qHU/src/Deprecated.jl:195
State machine iter=6
State machine iter=7
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=5[ Info: prepCliqInitMsgsUp, seps=[:x9]

State machine iter=6
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=9
State machine iter=10
State machine iter=6
State machine iter=7
State machine iter=7
State machine iter=9
State machine iter=10
State machine iter=8
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=7[ Info: prepCliqInitMsgsUp, seps=[:x6]

State machine iter=7
State machine iter=8
State machine iter=9
State machine iter=10
State machine iter=9
State machine iter=10
State machine iter=11
State machine iter=11
State machine iter=11
State machine iter=12
State machine iter=11
State machine iter=12
State machine iter=12
State machine iter=12
[ Info: Finished tree based init-inference
Test Summary:                      | Pass  Total
test basic fixed lag operations... |    6      6
[SUCCESS]



[TEST] testMultimodalRangeBearing.jl
[ Info: try doautoinit! of l1
[ Info: try doautoinit! of l2
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: [0x1p,d3,N100],
[ Info: try doautoinit! of l1
[ Info: allowing init from incomplete set of previously initialized hypotheses, fct=x0l1l2f1
[ Info: init with useinitfct [:l1f1, :x0l1l2f1]
[ Info: do init of l1
[ Info: not all hypotheses initialized, but at least one available -- see #427
[ Info: [2x0p,d2,N100],
[ Info: try doautoinit! of l2
[ Info: init with useinitfct [:l2f1, :x0l1l2f1]
[ Info: do init of l2
[ Info: [2x0p,d2,N100],
[ Info: [1x1p,d3,N100],
Test Summary:                                          |
test standard multimodal range bearing factor setup... | No tests
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating l2
[ Info: ===============
[ Info: 
[ Info:  - Removing l2
Si = [:x0, :l1]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0l1f1
[ Info:    - Breaking link x0l1f1->x0...
[ Info:      - Original links: [:x0, :l1]
[ Info:      - New links: [:l1]
[ Info: x0l1f1 still has links to other variables, readding it back...
Si = [:l1]
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
[ Info: Looking at l1f2
[ Info:    - Breaking link l1f2->l1...
[ Info:      - Original links: [:l1]
[ Info:      - New links: Symbol[]
[ Info: l1f2 doesn't have any other links, not adding it back...
[ Info: Looking at l1f3
[ Info:    - Breaking link l1f3->l1...
[ Info:      - Original links: [:l1]
[ Info:      - New links: Symbol[]
[ Info: l1f3 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding l1 to tree...
[ Info: Adding x0 to tree...
[ Info: Adding l2 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| l1,x0,l2,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:l1, :x0, :l2], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0 0; 1 1 1; 0 1 0; 0 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:l1, :x0, :l2]
State machine iter=9
[ Info: Finished tree based init-inference
Test Summary:                                                             | Pass  Total
test multimodal bearing range factors calculate pose position properly... |    3      3
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of l1
[ Info: try doautoinit! of l2
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of l1
[ Info: allowing init from incomplete set of previously initialized hypotheses, fct=x0l1l2f1
[ Info: init with useinitfct [:l1f1, :x0l1l2f1]
[ Info: do init of l1
[ Info: not all hypotheses initialized, but at least one available -- see #427
[ Info: [2x0p,d2,N100],
[ Info: try doautoinit! of l2
[ Info: init with useinitfct [:l2f1, :x0l1l2f1]
[ Info: do init of l2
[ Info: [1x1p,d2,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating l2
[ Info: ===============
[ Info: 
[ Info:  - Removing l2
Si = [:x0, :l1]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0l1f1
[ Info:    - Breaking link x0l1f1->x0...
[ Info:      - Original links: [:x0, :l1]
[ Info:      - New links: [:l1]
[ Info: x0l1f1 still has links to other variables, readding it back...
Si = [:l1]
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
[ Info: Looking at l1f2
[ Info:    - Breaking link l1f2->l1...
[ Info:      - Original links: [:l1]
[ Info:      - New links: Symbol[]
[ Info: l1f2 doesn't have any other links, not adding it back...
[ Info: Looking at l1f3
[ Info:    - Breaking link l1f3->l1...
[ Info:      - Original links: [:l1]
[ Info:      - New links: Symbol[]
[ Info: l1f3 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding l1 to tree...
[ Info: Adding x0 to tree...
[ Info: Adding l2 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| l1,x0,l2,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:l1, :x0, :l2], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0 0; 1 1 1; 0 1 0; 0 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:l1, :x0, :l2]
State machine iter=9
[ Info: Finished tree based init-inference
Test Summary:                                                | Pass  Total
test multimodal landmark locations are computed correclty... |    5      5
[SUCCESS]



[TEST] testDynPose2D.jl
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: ensure all initialized (using graphinit)
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
State machine iter=9
[ Info: Finished tree based init-inference
Test Summary:                 | Pass  Total
test DynPose2 and velocity... |    5      5
Test Summary:                          | Pass  Total
test distribution compare functions... |    3      3
Test Summary:                       | Pass  Total
test DynPose2 packing converters... |    2      2
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of x3
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1]
[ Info: do init of x3
[ Info: try doautoinit! of x4
[ Info: try doautoinit! of x4
[ Info: init with useinitfct [:x3x4f1]
[ Info: do init of x4
[ Info: try doautoinit! of x5
[ Info: try doautoinit! of x5
[ Info: init with useinitfct [:x4x5f1]
[ Info: do init of x5
[ Info: try doautoinit! of x6
[ Info: try doautoinit! of x6
[ Info: init with useinitfct [:x5x6f1]
[ Info: do init of x6
[ Info: try doautoinit! of x7
[ Info: try doautoinit! of x7
[ Info: init with useinitfct [:x6x7f1]
[ Info: do init of x7
[ Info: try doautoinit! of x8
[ Info: try doautoinit! of x8
[ Info: init with useinitfct [:x7x8f1]
[ Info: do init of x8
[ Info: try doautoinit! of x9
[ Info: try doautoinit! of x9
[ Info: init with useinitfct [:x8x9f1]
[ Info: do init of x9
[ Info: try doautoinit! of x10
[ Info: x10 is not initialized, and will do so now...
[ Info: try doautoinit! of x10
[ Info: init with useinitfct [:x9x10f1]
[ Info: do init of x10
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x10
[ Info: ===============
[ Info: 
[ Info:  - Removing x10
Si = [:x9]
[ Info: 
[ Info: Eliminating x4
[ Info: ===============
[ Info: 
[ Info:  - Removing x4
Si = [:x3, :x5]
[ Info: 
[ Info: Eliminating x8
[ Info: ===============
[ Info: 
[ Info:  - Removing x8
Si = [:x7, :x9]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0, :x2]
[ Info: 
[ Info: Eliminating x6
[ Info: ===============
[ Info: 
[ Info:  - Removing x6
Si = [:x5, :x7]
[ Info: 
[ Info: Eliminating x3
[ Info: ===============
[ Info: 
[ Info:  - Removing x3
[ Info: Looking at x3x5f1
[ Info:    - Breaking link x3x5f1->x3...
[ Info:      - Original links: [:x3, :x5]
[ Info:      - New links: [:x5]
[ Info: x3x5f1 still has links to other variables, readding it back...
Si = [:x2, :x5]
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
[ Info: Looking at x0x2f1
[ Info:    - Breaking link x0x2f1->x2...
[ Info:      - Original links: [:x0, :x2]
[ Info:      - New links: [:x0]
[ Info: x0x2f1 still has links to other variables, readding it back...
[ Info: Looking at x2x5f1
[ Info:    - Breaking link x2x5f1->x2...
[ Info:      - Original links: [:x2, :x5]
[ Info:      - New links: [:x5]
[ Info: x2x5f1 still has links to other variables, readding it back...
Si = [:x0, :x5]
[ Info: 
[ Info: Eliminating x5
[ Info: ===============
[ Info: 
[ Info:  - Removing x5
[ Info: Looking at x5x7f1
[ Info:    - Breaking link x5x7f1->x5...
[ Info:      - Original links: [:x5, :x7]
[ Info:      - New links: [:x7]
[ Info: x5x7f1 still has links to other variables, readding it back...
[ Info: Looking at x5f1
[ Info:    - Breaking link x5f1->x5...
[ Info:      - Original links: [:x5]
[ Info:      - New links: Symbol[]
[ Info: x5f1 doesn't have any other links, not adding it back...
[ Info: Looking at x5f2
[ Info:    - Breaking link x5f2->x5...
[ Info:      - Original links: [:x5]
[ Info:      - New links: Symbol[]
[ Info: x5f2 doesn't have any other links, not adding it back...
[ Info: Looking at x0x5f1
[ Info:    - Breaking link x0x5f1->x5...
[ Info:      - Original links: [:x0, :x5]
[ Info:      - New links: [:x0]
[ Info: x0x5f1 still has links to other variables, readding it back...
Si = [:x7, :x0]
[ Info: 
[ Info: Eliminating x9
[ Info: ===============
[ Info: 
[ Info:  - Removing x9
[ Info: Looking at x9f1
[ Info:    - Breaking link x9f1->x9...
[ Info:      - Original links: [:x9]
[ Info:      - New links: Symbol[]
[ Info: x9f1 doesn't have any other links, not adding it back...
[ Info: Looking at x7x9f1
[ Info:    - Breaking link x7x9f1->x9...
[ Info:      - Original links: [:x7, :x9]
[ Info:      - New links: [:x7]
[ Info: x7x9f1 still has links to other variables, readding it back...
Si = [:x7]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x7x0f1
[ Info:    - Breaking link x7x0f1->x0...
[ Info:      - Original links: [:x7, :x0]
[ Info:      - New links: [:x7]
[ Info: x7x0f1 still has links to other variables, readding it back...
[ Info: Looking at x0f3
[ Info:    - Breaking link x0f3->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f3 doesn't have any other links, not adding it back...
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
Si = [:x7]
[ Info: 
[ Info: Eliminating x7
[ Info: ===============
[ Info: 
[ Info:  - Removing x7
[ Info: Looking at x7f3
[ Info:    - Breaking link x7f3->x7...
[ Info:      - Original links: [:x7]
[ Info:      - New links: Symbol[]
[ Info: x7f3 doesn't have any other links, not adding it back...
[ Info: Looking at x7f1
[ Info:    - Breaking link x7f1->x7...
[ Info:      - Original links: [:x7]
[ Info:      - New links: Symbol[]
[ Info: x7f1 doesn't have any other links, not adding it back...
[ Info: Looking at x7f4
[ Info:    - Breaking link x7f4->x7...
[ Info:      - Original links: [:x7]
[ Info:      - New links: Symbol[]
[ Info: x7f4 doesn't have any other links, not adding it back...
[ Info: Looking at x7f2
[ Info:    - Breaking link x7f2->x7...
[ Info:      - Original links: [:x7]
[ Info:      - New links: Symbol[]
[ Info: x7f2 doesn't have any other links, not adding it back...
[ Info: Looking at x7f5
[ Info:    - Breaking link x7f5->x7...
[ Info:      - Original links: [:x7]
[ Info:      - New links: Symbol[]
[ Info: x7f5 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x7 to tree...
[ Info: Adding x0 to tree...
[ Info: Adding x9 to tree...
[ Info: Adding x5 to tree...
[ Info: Adding x2 to tree...
[ Info: Adding x3 to tree...
[ Info: Adding x6 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x8 to tree...
[ Info: Adding x4 to tree...
[ Info: Adding x10 to tree...
Find potential functions for each clique
[ Info: Get potentials 8| x10,: x9,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (8, [:x10], [:x9])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 2| x9,x8,: x7,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=2 adding factor that is not in separator, x10
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x9, :x8], [:x7])
mat = getCliqMat(cliq) = Bool[1 1 0; 0 1 1; 1 0 0]
[ Info: Get potentials 7| x4,: x3,x5,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (7, [:x4], [:x3, :x5])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 4| x3,: x2,x5,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=4 adding factor that is not in separator, x4
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (4, [:x3], [:x2, :x5])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 0; 0 0 1]
[ Info: Get potentials 6| x1,: x0,x2,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (6, [:x1], [:x0, :x2])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 3| x2,: x0,x5,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=3 adding factor that is not in separator, x1
[ Info: cliq=3 adding factor that is not in separator, x3
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (3, [:x2], [:x0, :x5])
mat = getCliqMat(cliq) = Bool[1 0 0; 0 0 1; 0 1 0; 1 0 0]
[ Info: Get potentials 5| x6,: x5,x7,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (5, [:x6], [:x5, :x7])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 1| x7,x0,x5,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x6
[ Info: cliq=1 adding factor that is not in separator, x8
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, x4
[ Info: cliq=1 adding factor that is not in separator, x6
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x7, :x0, :x5], Symbol[])
mat = getCliqMat(cliq) = Bool[0 1 0; 1 0 0; 0 1 0; 0 0 1; 0 0 1; 1 0 0]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=1[ Info: prepCliqInitMsgsUp, seps=[:x5, :x7]

State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=1[ Info: prepCliqInitMsgsUp, seps=[:x0, :x2]

State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=1[ Info: prepCliqInitMsgsUp, seps=[:x3, :x5]

State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=[:x9]

State machine iter=10
State machine iter=9
State machine iter=10
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=[:x2, :x5]

State machine iter=10
State machine iter=9
State machine iter=10
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:x7]
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=[:x0, :x5]

State machine iter=10
State machine iter=9
State machine iter=10
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=Symbol[]

State machine iter=10
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x7, :x0, :x5]
State machine iter=11
State machine iter=11
State machine iter=11
State machine iter=9
State machine iter=11
State machine iter=12
State machine iter=11
State machine iter=11
State machine iter=12
State machine iter=12
State machine iter=12
State machine iter=11
State machine iter=12
State machine iter=12
State machine iter=12
[ Info: Finished tree based init-inference
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x4
[ Info: ===============
[ Info: 
[ Info:  - Removing x4
Si = [:x3, :x5]
[ Info: 
[ Info: Eliminating x8
[ Info: ===============
[ Info: 
[ Info:  - Removing x8
Si = [:x7, :x9]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0, :x2]
[ Info: 
[ Info: Eliminating x6
[ Info: ===============
[ Info: 
[ Info:  - Removing x6
Si = [:x5, :x7]
[ Info: 
[ Info: Eliminating x3
[ Info: ===============
[ Info: 
[ Info:  - Removing x3
[ Info: Looking at x3x5f1
[ Info:    - Breaking link x3x5f1->x3...
[ Info:      - Original links: [:x3, :x5]
[ Info:      - New links: [:x5]
[ Info: x3x5f1 still has links to other variables, readding it back...
Si = [:x2, :x5]
[ Info: 
[ Info: Eliminating x10
[ Info: ===============
[ Info: 
[ Info:  - Removing x10
Si = [:x9]
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
[ Info: Looking at x0x2f1
[ Info:    - Breaking link x0x2f1->x2...
[ Info:      - Original links: [:x0, :x2]
[ Info:      - New links: [:x0]
[ Info: x0x2f1 still has links to other variables, readding it back...
[ Info: Looking at x2x5f1
[ Info:    - Breaking link x2x5f1->x2...
[ Info:      - Original links: [:x2, :x5]
[ Info:      - New links: [:x5]
[ Info: x2x5f1 still has links to other variables, readding it back...
Si = [:x0, :x5]
[ Info: 
[ Info: Eliminating x5
[ Info: ===============
[ Info: 
[ Info:  - Removing x5
[ Info: Looking at x5x7f1
[ Info:    - Breaking link x5x7f1->x5...
[ Info:      - Original links: [:x5, :x7]
[ Info:      - New links: [:x7]
[ Info: x5x7f1 still has links to other variables, readding it back...
[ Info: Looking at x5f1
[ Info:    - Breaking link x5f1->x5...
[ Info:      - Original links: [:x5]
[ Info:      - New links: Symbol[]
[ Info: x5f1 doesn't have any other links, not adding it back...
[ Info: Looking at x5f2
[ Info:    - Breaking link x5f2->x5...
[ Info:      - Original links: [:x5]
[ Info:      - New links: Symbol[]
[ Info: x5f2 doesn't have any other links, not adding it back...
[ Info: Looking at x0x5f1
[ Info:    - Breaking link x0x5f1->x5...
[ Info:      - Original links: [:x0, :x5]
[ Info:      - New links: [:x0]
[ Info: x0x5f1 still has links to other variables, readding it back...
Si = [:x7, :x0]
[ Info: 
[ Info: Eliminating x9
[ Info: ===============
[ Info: 
[ Info:  - Removing x9
[ Info: Looking at x7x9f1
[ Info:    - Breaking link x7x9f1->x9...
[ Info:      - Original links: [:x7, :x9]
[ Info:      - New links: [:x7]
[ Info: x7x9f1 still has links to other variables, readding it back...
[ Info: Looking at x9f1
[ Info:    - Breaking link x9f1->x9...
[ Info:      - Original links: [:x9]
[ Info:      - New links: Symbol[]
[ Info: x9f1 doesn't have any other links, not adding it back...
Si = [:x7]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Looking at x7x0f1
[ Info:    - Breaking link x7x0f1->x0...
[ Info:      - Original links: [:x7, :x0]
[ Info:      - New links: [:x7]
[ Info: x7x0f1 still has links to other variables, readding it back...
[ Info: Looking at x0f3
[ Info:    - Breaking link x0f3->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f3 doesn't have any other links, not adding it back...
Si = [:x7]
[ Info: 
[ Info: Eliminating x7
[ Info: ===============
[ Info: 
[ Info:  - Removing x7
[ Info: Looking at x7f3
[ Info:    - Breaking link x7f3->x7...
[ Info:      - Original links: [:x7]
[ Info:      - New links: Symbol[]
[ Info: x7f3 doesn't have any other links, not adding it back...
[ Info: Looking at x7f4
[ Info:    - Breaking link x7f4->x7...
[ Info:      - Original links: [:x7]
[ Info:      - New links: Symbol[]
[ Info: x7f4 doesn't have any other links, not adding it back...
[ Info: Looking at x7f2
[ Info:    - Breaking link x7f2->x7...
[ Info:      - Original links: [:x7]
[ Info:      - New links: Symbol[]
[ Info: x7f2 doesn't have any other links, not adding it back...
[ Info: Looking at x7f1
[ Info:    - Breaking link x7f1->x7...
[ Info:      - Original links: [:x7]
[ Info:      - New links: Symbol[]
[ Info: x7f1 doesn't have any other links, not adding it back...
[ Info: Looking at x7f5
[ Info:    - Breaking link x7f5->x7...
[ Info:      - Original links: [:x7]
[ Info:      - New links: Symbol[]
[ Info: x7f5 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x7 to tree...
[ Info: Adding x0 to tree...
[ Info: Adding x9 to tree...
[ Info: Adding x5 to tree...
[ Info: Adding x2 to tree...
[ Info: Adding x10 to tree...
[ Info: Adding x3 to tree...
[ Info: Adding x6 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x8 to tree...
[ Info: Adding x4 to tree...
Find potential functions for each clique
[ Info: Get potentials 4| x10,: x9,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (4, [:x10], [:x9])
mat = getCliqMat(cliq) = Bool[1 1; 1 0]
[ Info: Get potentials 2| x9,x8,: x7,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=2 adding factor that is not in separator, x10
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x9, :x8], [:x7])
mat = getCliqMat(cliq) = Bool[1 1 0; 0 1 1; 1 0 0]
[ Info: Get potentials 8| x4,: x3,x5,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (8, [:x4], [:x3, :x5])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 5| x3,: x2,x5,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=5 adding factor that is not in separator, x4
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (5, [:x3], [:x2, :x5])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 0; 0 0 1]
[ Info: Get potentials 7| x1,: x0,x2,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (7, [:x1], [:x0, :x2])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 3| x2,: x0,x5,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=3 adding factor that is not in separator, x1
[ Info: cliq=3 adding factor that is not in separator, x3
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (3, [:x2], [:x0, :x5])
mat = getCliqMat(cliq) = Bool[1 0 0; 0 0 1; 0 1 0; 1 0 0]
[ Info: Get potentials 6| x6,: x5,x7,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (6, [:x6], [:x5, :x7])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 1| x7,x0,x5,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x6
[ Info: cliq=1 adding factor that is not in separator, x8
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, x4
[ Info: cliq=1 adding factor that is not in separator, x6
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x7, :x0, :x5], Symbol[])
mat = getCliqMat(cliq) = Bool[0 1 0; 1 0 0; 0 1 0; 0 0 1; 0 0 1; 1 0 0]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=1[ Info: prepCliqInitMsgsUp, seps=[:x9]

State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=1[ Info: prepCliqInitMsgsUp, seps=[:x5, :x7]

State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=1[ Info: prepCliqInitMsgsUp, seps=[:x0, :x2]

State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=5[ Info: prepCliqInitMsgsUp, seps=[:x3, :x5]

State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=[:x7]

State machine iter=10
State machine iter=9
State machine iter=10
State machine iter=9
State machine iter=10
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=[:x2, :x5]

State machine iter=10
State machine iter=9
State machine iter=10
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=[:x0, :x5]

State machine iter=10
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=Symbol[]

State machine iter=10
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x7, :x0, :x5]
State machine iter=11
State machine iter=11
State machine iter=11
State machine iter=9
State machine iter=11
State machine iter=12
State machine iter=11
State machine iter=11
State machine iter=12
State machine iter=12
State machine iter=12
State machine iter=11
State machine iter=12
State machine iter=12
State machine iter=12
[ Info: Finished tree based init-inference
(sym, round.(XX, digits = 5)) = (:x2, [0.3698, 0.00627, -0.00025, 0.06488, 0.02442])
(sym, round.(XX, digits = 5)) = (:x3, [0.42649, 0.00994, 0.0018, -0.01283, 0.00712])
(sym, round.(XX, digits = 5)) = (:x4, [0.34356, 0.0307, 0.00162, -0.06599, 0.01406])
(sym, round.(XX, digits = 5)) = (:x5, [0.24892, 0.04874, 0.00147, -0.0016, 0.02437])
(sym, round.(XX, digits = 5)) = (:x6, [2.97575, 0.03746, -0.00411, 0.45922, 0.01118])
(sym, round.(XX, digits = 5)) = (:x7, [3.48684, 0.03544, -0.00104, 0.69988, -0.02604])
(sym, round.(XX, digits = 5)) = (:x8, [5.84307, -0.0055, 0.00261, 0.96238, 0.01574])
(sym, round.(XX, digits = 5)) = (:x9, [7.71246, -0.05925, 0.01548, 0.77227, -0.02679])
Test Summary:                                       | Pass  Total
test many DynPose2 chain stationary and 'pulled'... |   65     65
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1, :x0x1f1]
[ Info: do init of x1
[ Info: [2x0p,d5,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1; 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
State machine iter=9
[ Info: Finished tree based init-inference
Test Summary:                           | Pass  Total
test many DynPose2 sideways velocity... |   10     10
[SUCCESS]



[TEST] threeDimLinearProductTest.jl
[ Info: try doautoinit! of x1
Test Summary:                 |
Adding PriorPose3 to graph... | No tests
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
muX1 = Statistics.mean(getVal(fg, :x1), dims = 2) = [0.19098756357662375; -0.02419778215789708; -0.032141908824909325; 0.009971100052935474; -0.024564311662261473; -0.008346707064729017]
stdX1 = Statistics.std(getVal(fg, :x1), dims = 2) = [0.9322530965680821; 0.9899902292185401; 1.132619353942423; 0.09219275817220694; 0.10735768033744164; 0.11923463406640614]
Test Summary:                      | Pass  Total
Ensure vertex initialized properly |    5      5
Test Summary:                    | Pass  Total
Testing PriorPose3 evaluation... |    2      2
[ Info: try doautoinit! of x2
Test Summary:                 |
Adding Pose3Pose3 to graph... | No tests
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
X1ptsMean = [0.721388796763856; -0.011644213323148307; -0.263483529762714; 0.004429227140234726; -0.04252615489069143; -0.0170827716637065]
Test Summary:                    | Pass  Total
Testing Pose3Pose3 evaluation... |    3      3
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
Si = [:x1]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
[ Info: Looking at x1f2
[ Info:    - Breaking link x1f2->x1...
[ Info:      - Original links: [:x1]
[ Info:      - New links: Symbol[]
[ Info: x1f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x1 to tree...
[ Info: Adding x2 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| x1,x2,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x1, :x2], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x1, :x2]
State machine iter=9
[ Info: Finished tree based init-inference
Test Summary:                                 | Pass  Total
Construct Bayes tree and perform inference... |    1      1
stdX1[4:6] = [0.09464698917033884, 0.0780404056818467, 0.07348134912576834]
muX2[1:3] - [10.0; 0; 0] = [-0.22746864380045828, -0.43304591579297236, -0.07791878673647806]
previous test failure 0.75 .< [1.59, 1.62, 1.52] .< 2.25
previous test failure 0.05 .< [0.15, 0.12, 0.13] .< 0.35
Test Summary:                                       | Pass  Total
Ensure basic parameters on x1,x2 after inference... |    8      8
[SUCCESS]



[TEST] testPose3Pose3NH.jl
Test Summary:                                       | Pass  Total
Test syntax for null hypothesis matrix substitution |    1      1
Test if null hypothesis occurs as expected...
Adding PriorPose3 to graph...
┌ Warning: autoinit deprecated, use graphinit instead
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1008
[ Info: try doautoinit! of x1
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
Ensure vertex initialized properly
Testing PriorPose3 evaluation...
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of x3
Testing Pose3Pose3 evaluation...
[ Info: ensure all initialized (using graphinit)
[ Info: x3 is not initialized, and will do so now...
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1]
[ Info: do init of x3
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x3
[ Info: ===============
[ Info: 
[ Info:  - Removing x3
Si = [:x2]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x2]
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
[ Info: Looking at x2f1
[ Info:    - Breaking link x2f1->x2...
[ Info:      - Original links: [:x2]
[ Info:      - New links: Symbol[]
[ Info: x2f1 doesn't have any other links, not adding it back...
[ Info: Looking at x2f2
[ Info:    - Breaking link x2f2->x2...
[ Info:      - Original links: [:x2]
[ Info:      - New links: Symbol[]
[ Info: x2f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x2 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x3 to tree...
Find potential functions for each clique
[ Info: Get potentials 2| x3,: x2,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x3], [:x2])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 1| x2,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x3
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x2, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 1; 0 1; 1 0]
Bayes Tree
[ Info: Do tree based init-inference on tree
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=1
State machine iter=2
State machine iter=3
State machine iter=4
State machine iter=5
State machine iter=6
State machine iter=7
State machine iter=8
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:x2]
State machine iter=5
State machine iter=6
[ Info: Outgoing msg density on: 
State machine iter=9[ Info: prepCliqInitMsgsUp, seps=Symbol[]

State machine iter=10
State machine iter=7
State machine iter=8
[ Info: transferUpdateSubGraph! -- syms=[:x2, :x1]
State machine iter=11
State machine iter=9
State machine iter=12
[ Info: Finished tree based init-inference
Adding Pose3Pose3NH to graph...
┌ Warning: `getVariableIds(dfg::AbstractDFG, regexFilter::Union{Nothing, Regex} = nothing; tags::Vector{Symbol} = Symbol[], solvable::Int = 0)` is deprecated, use `listVariables(dfg, regexFilter, tags = tags, solvable = solvable)` instead.
│   caller = getVariableIds(::LightDFG{SolverParams,DistributedFactorGraphs.DFGVariable,DistributedFactorGraphs.DFGFactor}) at deprecated.jl:71
└ @ DistributedFactorGraphs ./deprecated.jl:71
┌ Warning: FunctorPairwiseNH will be deprecated in favor of common `nullhypo=` interface.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/ApproxConv.jl:285
┌ Warning: this assembleNullHypothesis method has been updated for e.g. `addFactor!(; nullhypo=0.1)` instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/ApproxConv.jl:237
┌ Warning: FunctorPairwiseNH will be deprecated in favor of common `nullhypo=` interface.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/ApproxConv.jl:285
┌ Warning: this assembleNullHypothesis method has been updated for e.g. `addFactor!(; nullhypo=0.1)` instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/ApproxConv.jl:237
Test Summary:                        | Pass  Total
loading validation data for testing. |    2      2
[SUCCESS]



[TEST] testPartialXYH.jl
test x translation case: Error During Test at /home/pkgeval/.julia/packages/RoME/km5rv/test/testPartialXYH.jl:8
  Got exception outside of a @test
  UndefVarError: Quat not defined
  Stacktrace:
   [1] top-level scope at /home/pkgeval/.julia/packages/RoME/km5rv/test/testPartialXYH.jl:12
   [2] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114
   [3] top-level scope at /home/pkgeval/.julia/packages/RoME/km5rv/test/testPartialXYH.jl:11
   [4] include(::String) at ./client.jl:444
   [5] top-level scope at /home/pkgeval/.julia/packages/RoME/km5rv/test/runtests.jl:44
   [6] include(::String) at ./client.jl:444
   [7] top-level scope at none:6
   [8] eval(::Module, ::Any) at ./boot.jl:331
   [9] exec_options(::Base.JLOptions) at ./client.jl:260
   [10] _start() at ./client.jl:485
  
Test Summary:           | Error  Total
test x translation case |     1      1
ERROR: LoadError: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/RoME/km5rv/test/testPartialXYH.jl:8
in expression starting at /home/pkgeval/.julia/packages/RoME/km5rv/test/runtests.jl:42
ERROR: Package RoME errored during testing
Stacktrace:
 [1] pkgerror(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1557
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
 [5] #test#61 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [7] #test#60 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope at none:16
