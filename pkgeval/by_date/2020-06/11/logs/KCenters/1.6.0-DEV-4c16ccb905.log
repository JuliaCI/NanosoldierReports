Julia Version 1.6.0-DEV.207
Commit 4c16ccb905 (2020-06-10 16:41 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed InvertedIndices ───────────── v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed JSON ──────────────────────── v0.21.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed DataFrames ────────────────── v0.20.2
  Installed Compat ────────────────────── v3.11.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed Tables ────────────────────── v1.0.4
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataStructures ────────────── v0.17.17
  Installed OrderedCollections ────────── v1.2.0
  Installed SimilaritySearch ──────────── v0.3.19
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed MLDataPattern ─────────────── v0.5.3
  Installed Reexport ──────────────────── v0.2.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataUtils ───────────────── v0.5.1
  Installed PooledArrays ──────────────── v0.5.3
  Installed Parsers ───────────────────── v1.0.5
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.11.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.5
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_abs9d6/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_abs9d6/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.11.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.5
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9316620069742203
[ Info: 0.8326150393486023
[ Info: 0.5547140726943811
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3297804680218299
mean(cdnet.distances) = 0.34869553583363694
mean(crand.distances) = 0.3532757070660591
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1884765625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1884765625,"f1":null,"seconds":3.559514880180359e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":5.9375,"distances_sum":531.5943238975482}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5517578125,"f1":0.6943674381174386,"seconds":4.470348358154297e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.8203125,"distances_sum":1511.5742613359162}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5517578125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5517578125,"f1":0.6943674381174386,"seconds":4.470348358154297e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.8203125,"distances_sum":1511.5742613359162}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7939453125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7939453125,"f1":0.879573031135532,"seconds":5.533918738365173e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8671875,"distances_sum":2278.7102937419972}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8801339285714292,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.890625,"distances_sum":2313.444676603278}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.794921875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.794921875,"f1":0.8801339285714292,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.890625,"distances_sum":2313.444676603278}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9365675990675995,"seconds":6.504356861114502e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9140625,"distances_sum":2728.9130257631155}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9334623709623714,"seconds":6.362795829772949e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8828125,"distances_sum":2724.0073294723447}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9463973526473531,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9140625,"distances_sum":2775.3465958418947}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9408169955044962,"seconds":6.5676867961883545e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.921875,"distances_sum":2734.684102466988}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8017578125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.8017578125,"f1":0.8836715367965375,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.84375,"distances_sum":2319.439356159662}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9463973526473531,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9140625,"distances_sum":2775.3465958418947}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9072265625,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9463973526473531,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9140625,"distances_sum":2775.3465958418947}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.169921875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.169921875,"f1":null,"seconds":3.4384429454803467e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":4.7890625,"distances_sum":448.1368639002226}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6513671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6513671875,"f1":0.7775977494727503,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.421875,"distances_sum":1657.5129006506966}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.349609375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.349609375,"f1":null,"seconds":4.131346940994263e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":5.65625,"distances_sum":890.7872748130659}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6513671875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6513671875,"f1":0.7775977494727503,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.421875,"distances_sum":1657.5129006506966}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73046875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.73046875,"f1":0.8342780483405492,"seconds":5.539506673812866e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.9765625,"distances_sum":1904.348090258635}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8947235056610064,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.390625,"distances_sum":2233.3934656751258}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8212890625,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8212890625,"f1":0.8947235056610064,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.390625,"distances_sum":2233.3934656751258}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8963369963369974,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.3984375,"distances_sum":2258.37839626453}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9400755494505499,"seconds":6.319954991340637e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.6796875,"distances_sum":2543.571582500223}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8952937687312694,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.3359375,"distances_sum":2239.564677922749}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9557411338661344,"seconds":5.997717380523682e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7734375,"distances_sum":2648.943547021273}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9557411338661344,"seconds":5.997717380523682e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7734375,"distances_sum":2648.943547021273}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.923828125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9557411338661344,"seconds":5.997717380523682e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7734375,"distances_sum":2648.943547021273}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2001953125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2001953125,"f1":null,"seconds":3.7997961044311523e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":5.625,"distances_sum":508.79335024441133}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2001953125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2001953125,"f1":null,"seconds":3.7997961044311523e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":5.625,"distances_sum":508.79335024441133}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.595703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.595703125,"f1":0.7263450091575098,"seconds":4.688277840614319e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.875,"distances_sum":1282.6398798322473}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.86816672910423,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.8359375,"distances_sum":1857.2123496009785}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7783203125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7783203125,"f1":0.86816672910423,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.8359375,"distances_sum":1857.2123496009785}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9100248709623717,"seconds":6.340444087982178e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5234375,"distances_sum":2113.2220146653535}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8447265625,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8447265625,"f1":0.9100248709623717,"seconds":6.340444087982178e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5234375,"distances_sum":2113.2220146653535}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9319685522810529,"seconds":6.94766640663147e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.53125,"distances_sum":2295.8372077605036}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.909784486346987,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5234375,"distances_sum":2089.2035954118874}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9276962620712627,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5859375,"distances_sum":2256.61155082014}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9532051282051286,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.75,"distances_sum":2429.9740092156508}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9532051282051286,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.75,"distances_sum":2429.9740092156508}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91796875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9532051282051286,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.75,"distances_sum":2429.9740092156508}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.212890625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.212890625,"f1":null,"seconds":3.8016587495803833e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":6.34375,"distances_sum":501.28616980830736}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.212890625,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.212890625,"f1":null,"seconds":3.8016587495803833e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":6.34375,"distances_sum":501.28616980830736}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.568359375,"f1":0.7101041319791326,"seconds":4.5318156480789185e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":7.203125,"distances_sum":1257.3737720667596}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7843649406149416,"seconds":4.667788743972778e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":7.5,"distances_sum":1524.3336778856249}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.662109375,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.662109375,"f1":0.7843649406149416,"seconds":4.667788743972778e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":7.5,"distances_sum":1524.3336778856249}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.7967353826728836,"seconds":3.905966877937317e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":7.6015625,"distances_sum":1637.3937243381783}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.705078125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.705078125,"f1":0.8160700410700419,"seconds":3.634020686149597e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":7.734375,"distances_sum":1663.8506883979662}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9511993215118218,"seconds":4.6156346797943115e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.703125,"distances_sum":2535.9530618360272}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9119162087912095,"seconds":5.213543772697449e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.53125,"distances_sum":2234.068675489453}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9511993215118218,"seconds":4.6156346797943115e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.703125,"distances_sum":2535.9530618360272}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.916015625,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9511993215118218,"seconds":4.6156346797943115e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.703125,"distances_sum":2535.9530618360272}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8790277430902437,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.265625,"distances_sum":1953.8771173650675}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8591523060273067,"seconds":5.584210157394409e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.078125,"distances_sum":1800.6956000296377}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8581855644355653,"seconds":5.321577191352844e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":7.9609375,"distances_sum":1808.7807777186224}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.798828125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.798828125,"f1":0.8790277430902437,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.265625,"distances_sum":1953.8771173650675}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9368990384615391,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.71875,"distances_sum":2336.051688401251}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9087568681318687,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.6328125,"distances_sum":2140.3388735631347}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.903891941391942,"seconds":6.237998604774475e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.6640625,"distances_sum":2126.702223389266}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9596211080586088,"seconds":6.690621376037598e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.875,"distances_sum":2462.0519560333946}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9551771145521151,"seconds":6.008893251419067e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.890625,"distances_sum":2440.2925665980906}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9596211080586088,"seconds":6.690621376037598e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.875,"distances_sum":2462.0519560333946}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9764136904761909,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.9453125,"distances_sum":2589.327394685293}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9672275641025645,"seconds":6.0927122831344604e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.9296875,"distances_sum":2512.340027548392}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9764136904761909,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.9453125,"distances_sum":2589.327394685293}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9764136904761909,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.9453125,"distances_sum":2589.327394685293}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.8437307484182494,"seconds":4.014000296592712e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.734375,"distances_sum":1781.3678370766897}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8027982434232441,"seconds":3.693625330924988e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.4296875,"distances_sum":1620.1457717109781}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7431640625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7431640625,"f1":0.8437307484182494,"seconds":4.014000296592712e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.734375,"distances_sum":1781.3678370766897}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.8995166292041298,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.5859375,"distances_sum":2111.6291950938903}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.830078125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.830078125,"f1":0.8995166292041298,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.5859375,"distances_sum":2111.6291950938903}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9382211538461542,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.6796875,"distances_sum":2375.9532457409223}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9382211538461542,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.6796875,"distances_sum":2375.9532457409223}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8935546875,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9382211538461542,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.6796875,"distances_sum":2375.9532457409223}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.44140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.44140625,"f1":null,"seconds":4.127621650695801e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":6.40625,"distances_sum":1001.374287306644}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2255859375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2255859375,"f1":null,"seconds":3.4868717193603516e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":6.234375,"distances_sum":533.6591484310976}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.44140625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.44140625,"f1":null,"seconds":4.127621650695801e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":6.40625,"distances_sum":1001.374287306644}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8956876456876464,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.515625,"distances_sum":2166.7685837157815}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.822265625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.822265625,"f1":0.8956876456876464,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.515625,"distances_sum":2166.7685837157815}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9028076090576098,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.6015625,"distances_sum":2174.599745658227}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9605483058608061,"seconds":6.4820051193237305e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.859375,"distances_sum":2576.1959591476166}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9605483058608061,"seconds":6.4820051193237305e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.859375,"distances_sum":2576.1959591476166}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9296875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9605483058608061,"seconds":6.4820051193237305e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.859375,"distances_sum":2576.1959591476166}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5830078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5830078125,"f1":0.720775058275059,"seconds":4.6193599700927734e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.0078125,"distances_sum":1348.3258349675605}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.400390625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.400390625,"f1":null,"seconds":4.200264811515808e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":6.046875,"distances_sum":910.4307929364721}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5830078125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5830078125,"f1":0.720775058275059,"seconds":4.6193599700927734e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.0078125,"distances_sum":1348.3258349675605}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9275958416583421,"seconds":6.1746686697006226e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.6015625,"distances_sum":2391.920175155973}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9300538003663008,"seconds":6.165355443954468e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.65625,"distances_sum":2360.3906124938553}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.87890625,"f1":0.9300538003663008,"seconds":6.165355443954468e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.65625,"distances_sum":2360.3906124938553}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9436672702297709,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.7109375,"distances_sum":2492.333639081533}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9652415293040296,"seconds":6.239861249923706e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8828125,"distances_sum":2617.1403625397525}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9488209706959713,"seconds":6.07222318649292e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.7734375,"distances_sum":2522.904853657831}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9712053571428576,"seconds":6.301328539848328e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.890625,"distances_sum":2654.7167734887416}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9615728021978027,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8515625,"distances_sum":2568.667465885242}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9551911630036634,"seconds":6.400048732757568e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.796875,"distances_sum":2549.4992956663837}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9712053571428576,"seconds":6.301328539848328e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.890625,"distances_sum":2654.7167734887416}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9712053571428576,"seconds":6.301328539848328e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.890625,"distances_sum":2654.7167734887416}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.658203125,"f1":0.7787419178044186,"seconds":4.680827260017395e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":7.359375,"distances_sum":1377.6765858650933}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7867942821067828,"seconds":4.803761839866638e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":7.46875,"distances_sum":1432.0067770629403}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6669921875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6669921875,"f1":0.7867942821067828,"seconds":4.803761839866638e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":7.46875,"distances_sum":1432.0067770629403}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7923300657675665,"seconds":0.00012331083416938782,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":7.515625,"distances_sum":1452.9832342307977}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9089202464202472,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.265625,"distances_sum":2063.812086717347}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9123886530136536,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.4609375,"distances_sum":2055.095548343689}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9002580752580761,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.203125,"distances_sum":1978.2201866088508}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8515625,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8515625,"f1":0.9123886530136536,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.4609375,"distances_sum":2055.095548343689}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9309065934065939,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.515625,"distances_sum":2198.350957335706}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9378605769230774,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.625,"distances_sum":2213.3503912246633}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.9165464743589748,"seconds":5.584210157394409e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.5390625,"distances_sum":2093.0040818025045}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9326210248085256,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.6015625,"distances_sum":2197.8229680950444}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9462282509157516,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.7109375,"distances_sum":2265.1911306175152}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9370077838827844,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.6484375,"distances_sum":2225.3438359313714}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9052734375,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9052734375,"f1":0.9462282509157516,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.7109375,"distances_sum":2265.1911306175152}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9052734375,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9052734375,"f1":0.9462282509157516,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.7109375,"distances_sum":2265.1911306175152}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1806640625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1806640625,"f1":null,"seconds":3.034248948097229e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":5.1953125,"distances_sum":412.4528088623073}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5546875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5546875,"f1":0.6963284978909985,"seconds":4.4833868741989136e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.6015625,"distances_sum":1202.277065496889}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3857421875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3857421875,"f1":null,"seconds":3.7048012018203735e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.25,"distances_sum":819.1184098859918}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5546875,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.5546875,"f1":0.6963284978909985,"seconds":4.4833868741989136e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.6015625,"distances_sum":1202.277065496889}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9265973609723615,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.703125,"distances_sum":2265.629206173742}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.8728750416250425,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.78125,"distances_sum":1925.4678008623684}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.8008427336552345,"seconds":4.813075065612793e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5546875,"distances_sum":1569.6181994001481}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8759765625,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8759765625,"f1":0.9265973609723615,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.703125,"distances_sum":2265.629206173742}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9676911630036634,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.921875,"distances_sum":2513.139412372562}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9631353021978025,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8828125,"distances_sum":2501.651022395738}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9553800366300368,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.859375,"distances_sum":2423.1970022327996}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9399439102564107,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8125,"distances_sum":2343.4779615509533}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9333650724275727,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.6875,"distances_sum":2349.5714001512683}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9676911630036634,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.921875,"distances_sum":2513.139412372562}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9676911630036634,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.921875,"distances_sum":2513.139412372562}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.505859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.505859375,"f1":null,"seconds":4.090368747711182e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":6.453125,"distances_sum":1232.1210519673102}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6337890625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6337890625,"f1":0.7596675893550902,"seconds":4.583969712257385e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.171875,"distances_sum":1550.59672414956}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7060546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7060546875,"f1":0.8151983433233442,"seconds":4.936009645462036e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.5625,"distances_sum":1818.460583478367}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7060546875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7060546875,"f1":0.8151983433233442,"seconds":4.936009645462036e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.5625,"distances_sum":1818.460583478367}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9531879578754583,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.6484375,"distances_sum":2620.5804890590634}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9035750707625715,"seconds":5.247071385383606e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.28125,"distances_sum":2248.279100938543}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9334394771894776,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.53125,"distances_sum":2499.000018294598}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.909744422244423,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.3828125,"distances_sum":2288.1604157402335}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.9181349900099905,"seconds":5.038455128669739e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.328125,"distances_sum":2371.296554750878}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9531879578754583,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.6484375,"distances_sum":2620.5804890590634}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9745364010989015,"seconds":5.679205060005188e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.90625,"distances_sum":2717.8905128418924}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9724358974358978,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8671875,"distances_sum":2700.1575317690813}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9586169039294044,"seconds":5.6140124797821045e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.6875,"distances_sum":2668.113724440762}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9745364010989015,"seconds":5.679205060005188e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.90625,"distances_sum":2717.8905128418924}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9745364010989015,"seconds":5.679205060005188e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.90625,"distances_sum":2717.8905128418924}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.7999030483405491,"seconds":4.589557647705078e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.96875,"distances_sum":1648.782411889508}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6943359375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6943359375,"f1":0.8093479437229446,"seconds":4.608184099197388e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.9296875,"distances_sum":1693.2291881554163}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.146484375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.146484375,"f1":null,"seconds":2.332031726837158e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":4.4609375,"distances_sum":365.2790810627418}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6943359375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6943359375,"f1":0.8093479437229446,"seconds":4.608184099197388e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.9296875,"distances_sum":1693.2291881554163}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9038726898101905,"seconds":3.919005393981934e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.46875,"distances_sum":2222.8999872508307}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8585086788211795,"seconds":3.7364661693573e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.34375,"distances_sum":1964.413932756525}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9288347069597075,"seconds":4.036352038383484e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.71875,"distances_sum":2449.824324516039}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.939706647519148,"seconds":4.105269908905029e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7578125,"distances_sum":2514.978706808271}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9306662087912093,"seconds":4.0121376514434814e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7578125,"distances_sum":2469.2603555510377}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7421875,"f1":0.8408256673881682,"seconds":4.025176167488098e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.3046875,"distances_sum":1865.329361331134}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8623610764235772,"seconds":5.284324288368225e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.328125,"distances_sum":1970.1008638271087}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8955078125,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.8955078125,"f1":0.939706647519148,"seconds":4.105269908905029e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7578125,"distances_sum":2514.978706808271}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9520890567765574,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.796875,"distances_sum":2599.0868551496255}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9494448260073266,"seconds":5.735084414482117e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.703125,"distances_sum":2601.1885884411286}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9725847069597076,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8984375,"distances_sum":2729.59015112004}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9417296245421248,"seconds":5.81890344619751e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8359375,"distances_sum":2476.226175806523}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9694253663003668,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.84375,"distances_sum":2717.5951426677834}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9416786338661345,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7109375,"distances_sum":2537.3977114334025}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9587454212454217,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.875,"distances_sum":2628.5002519607106}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9509729853479858,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7421875,"distances_sum":2592.773713171228}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9553056318681323,"seconds":5.9586018323898315e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.84375,"distances_sum":2607.517418645637}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9725847069597076,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8984375,"distances_sum":2729.59015112004}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9725847069597076,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8984375,"distances_sum":2729.59015112004}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.330078125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.330078125,"f1":null,"seconds":3.516674041748047e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.078125,"distances_sum":819.6421115223653}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.330078125,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.330078125,"f1":null,"seconds":3.516674041748047e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.078125,"distances_sum":819.6421115223653}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.9026614010989021,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.71875,"distances_sum":2253.052844425051}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.83203125,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.83203125,"f1":0.9026614010989021,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.71875,"distances_sum":2253.052844425051}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9266369047619055,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.59375,"distances_sum":2482.934667924477}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9512190934065939,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7734375,"distances_sum":2638.71958013907}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9664663461538466,"seconds":5.578622221946716e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.890625,"distances_sum":2716.4704431935943}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9664663461538466,"seconds":5.578622221946716e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.890625,"distances_sum":2716.4704431935943}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9664663461538466,"seconds":5.578622221946716e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.890625,"distances_sum":2716.4704431935943}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8506753663003672,"seconds":5.334615707397461e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.625,"distances_sum":1907.872155320339}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.38671875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.38671875,"f1":null,"seconds":4.362314939498901e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.7109375,"distances_sum":911.061580067115}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7529296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7529296875,"f1":0.8506753663003672,"seconds":5.334615707397461e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.625,"distances_sum":1907.872155320339}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9530906593406602,"seconds":6.275251507759094e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.796875,"distances_sum":2641.5112248833557}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9530906593406602,"seconds":6.275251507759094e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.796875,"distances_sum":2641.5112248833557}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9681547619047624,"seconds":6.165355443954468e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8828125,"distances_sum":2724.9589846618687}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9793154761904765,"seconds":6.146728992462158e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9765625,"distances_sum":2802.259404487797}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9793154761904765,"seconds":6.146728992462158e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9765625,"distances_sum":2802.259404487797}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9793154761904765,"seconds":6.146728992462158e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9765625,"distances_sum":2802.259404487797}}, n: 9
mean(cfft.distances) = 0.7279063312757844
mean(cdnet.distances) = 0.3974138502923257
mean(crand.distances) = 0.3399015720215603
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8866666666666667
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9155555555555556
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8822222222222221
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.931111111111111
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.88
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9377777777777778
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9044444444444445
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9044444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9199999999999999
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8777777777777778
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8888888888888888
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9133333333333334
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9222222222222222
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9333333333333332
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8377777777777778
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8777777777777778
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8955555555555555
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9222222222222222
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9155555555555556
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8911111111111111
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8444444444444444
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8488888888888889
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8733333333333332
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8844444444444445
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9044444444444445
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9466666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5639274463057518] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 7, 16]]
** centroid: 1, normalized-entropy: 0.8865408928220899, [(2, 7), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
finished with 13 centroids; started with 12
acc = 0.9266666666666666
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.2295703132827025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2295703132827025, 0.20016321024225392] ***
*** starting iteration: 2; err: [Inf, 0.2295703132827025, 0.20016321024225392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2295703132827025, 0.20016321024225392, 0.19649031437379685] ***
*** starting iteration: 3; err: [Inf, 0.2295703132827025, 0.20016321024225392, 0.19649031437379685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2295703132827025, 0.20016321024225392, 0.19649031437379685, 0.1949943726009748] ***
*** starting iteration: 4; err: [Inf, 0.2295703132827025, 0.20016321024225392, 0.19649031437379685, 0.1949943726009748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2295703132827025, 0.20016321024225392, 0.19649031437379685, 0.1949943726009748, 0.19386744322730703] ***
*** starting iteration: 5; err: [Inf, 0.2295703132827025, 0.20016321024225392, 0.19649031437379685, 0.1949943726009748, 0.19386744322730703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2295703132827025, 0.20016321024225392, 0.19649031437379685, 0.1949943726009748, 0.19386744322730703, 0.19277534918585518] ***
*** starting iteration: 6; err: [Inf, 0.2295703132827025, 0.20016321024225392, 0.19649031437379685, 0.1949943726009748, 0.19386744322730703, 0.19277534918585518] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2295703132827025, 0.20016321024225392, 0.19649031437379685, 0.1949943726009748, 0.19386744322730703, 0.19277534918585518, 0.19226702496370263] ***
*** finished computation of 7 references, err: [Inf, 0.2295703132827025, 0.20016321024225392, 0.19649031437379685, 0.1949943726009748, 0.19386744322730703, 0.19277534918585518, 0.19226702496370263] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 83, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 11, 0]]
** centroid: 2, normalized-entropy: 0.5396084773004918, [(1, 78), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [7, 100, 0]]
** centroid: 4, normalized-entropy: 0.34859686086959846, [(1, 7), (2, 100)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 50, 21]]
** centroid: 5, normalized-entropy: 0.8760643678555242, [(2, 50), (3, 21)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [93, 26, 0]]
** centroid: 6, normalized-entropy: 0.7573958968817643, [(1, 93), (2, 26)]
*** center 7: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35404430772247797] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35404430772247797, 0.23733970794446385] ***
*** starting iteration: 2; err: [Inf, 0.35404430772247797, 0.23733970794446385] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35404430772247797, 0.23733970794446385, 0.23312081350153452] ***
*** starting iteration: 3; err: [Inf, 0.35404430772247797, 0.23733970794446385, 0.23312081350153452] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35404430772247797, 0.23733970794446385, 0.23312081350153452, 0.23220057398159136] ***
*** finished computation of 3 references, err: [Inf, 0.35404430772247797, 0.23733970794446385, 0.23312081350153452, 0.23220057398159136] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [215, 15, 0]]
** centroid: 1, normalized-entropy: 0.3478169135710632, [(1, 215), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [160, 49, 0]]
** centroid: 2, normalized-entropy: 0.785687947661633, [(1, 160), (2, 49)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 206, 21]]
** centroid: 3, normalized-entropy: 0.44479617681471695, [(2, 206), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22030045929667855] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22030045929667855, 0.19918988736882537] ***
*** starting iteration: 2; err: [Inf, 0.22030045929667855, 0.19918988736882537] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22030045929667855, 0.19918988736882537, 0.19578053554829986] ***
*** starting iteration: 3; err: [Inf, 0.22030045929667855, 0.19918988736882537, 0.19578053554829986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22030045929667855, 0.19918988736882537, 0.19578053554829986, 0.19451880177226047] ***
*** starting iteration: 4; err: [Inf, 0.22030045929667855, 0.19918988736882537, 0.19578053554829986, 0.19451880177226047] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22030045929667855, 0.19918988736882537, 0.19578053554829986, 0.19451880177226047, 0.19369492912699918] ***
*** finished computation of 7 references, err: [Inf, 0.22030045929667855, 0.19918988736882537, 0.19578053554829986, 0.19451880177226047, 0.19369492912699918] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 47, 0]]
** centroid: 1, normalized-entropy: 0.9965322634876737, [(1, 54), (2, 47)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 124, 21]]
** centroid: 2, normalized-entropy: 0.5967435150747519, [(2, 124), (3, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 7, 0]]
** centroid: 4, normalized-entropy: 0.4172806906708316, [(1, 76), (2, 7)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [60, 15, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 60), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [100, 15, 0]]
** centroid: 6, normalized-entropy: 0.5586293734521991, [(1, 100), (2, 15)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [22, 43, 0]]
** centroid: 7, normalized-entropy: 0.9233388889944429, [(1, 22), (2, 43)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30664335569922535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30664335569922535, 0.24788369663126733] ***
*** starting iteration: 2; err: [Inf, 0.30664335569922535, 0.24788369663126733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30664335569922535, 0.24788369663126733, 0.22289238384515717] ***
*** starting iteration: 3; err: [Inf, 0.30664335569922535, 0.24788369663126733, 0.22289238384515717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30664335569922535, 0.24788369663126733, 0.22289238384515717, 0.2023673968379507] ***
*** starting iteration: 4; err: [Inf, 0.30664335569922535, 0.24788369663126733, 0.22289238384515717, 0.2023673968379507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30664335569922535, 0.24788369663126733, 0.22289238384515717, 0.2023673968379507, 0.1945335271557433] ***
*** starting iteration: 5; err: [Inf, 0.30664335569922535, 0.24788369663126733, 0.22289238384515717, 0.2023673968379507, 0.1945335271557433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30664335569922535, 0.24788369663126733, 0.22289238384515717, 0.2023673968379507, 0.1945335271557433, 0.19238951392024978] ***
*** starting iteration: 6; err: [Inf, 0.30664335569922535, 0.24788369663126733, 0.22289238384515717, 0.2023673968379507, 0.1945335271557433, 0.19238951392024978] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30664335569922535, 0.24788369663126733, 0.22289238384515717, 0.2023673968379507, 0.1945335271557433, 0.19238951392024978, 0.19132078103050926] ***
*** starting iteration: 7; err: [Inf, 0.30664335569922535, 0.24788369663126733, 0.22289238384515717, 0.2023673968379507, 0.1945335271557433, 0.19238951392024978, 0.19132078103050926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30664335569922535, 0.24788369663126733, 0.22289238384515717, 0.2023673968379507, 0.1945335271557433, 0.19238951392024978, 0.19132078103050926, 0.1904728901370064] ***
*** finished computation of 7 references, err: [Inf, 0.30664335569922535, 0.24788369663126733, 0.22289238384515717, 0.2023673968379507, 0.1945335271557433, 0.19238951392024978, 0.19132078103050926, 0.1904728901370064] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [32, 64, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 32), (2, 64)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [104, 3, 0]]
** centroid: 2, normalized-entropy: 0.18445186314098744, [(1, 104), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 33, 0]]
** centroid: 3, normalized-entropy: 0.9777945702913884, [(1, 47), (2, 33)]
*** center 4: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 62, 0]]
** centroid: 5, normalized-entropy: 0.8944518845341284, [(1, 28), (2, 62)]
*** center 6: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 85, 18]]
** centroid: 7, normalized-entropy: 0.6684725699243225, [(2, 85), (3, 18)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3154200641746009] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3154200641746009, 0.25923608491538436] ***
*** starting iteration: 2; err: [Inf, 0.3154200641746009, 0.25923608491538436] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3154200641746009, 0.25923608491538436, 0.24322347376249484] ***
*** starting iteration: 3; err: [Inf, 0.3154200641746009, 0.25923608491538436, 0.24322347376249484] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3154200641746009, 0.25923608491538436, 0.24322347376249484, 0.23941961677001045] ***
*** finished computation of 3 references, err: [Inf, 0.3154200641746009, 0.25923608491538436, 0.24322347376249484, 0.23941961677001045] ***
*** center 1: selecting labels [1] (freq >= 2) [from [210, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [111, 105, 0]]
** centroid: 2, normalized-entropy: 0.9994433330902989, [(1, 111), (2, 105)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [54, 165, 21]]
** centroid: 3, normalized-entropy: 0.7340026090871344, [(1, 54), (2, 165), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2840064693636064] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2840064693636064, 0.23689705724904742] ***
*** starting iteration: 2; err: [Inf, 0.2840064693636064, 0.23689705724904742] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2840064693636064, 0.23689705724904742, 0.233740308842827] ***
*** starting iteration: 3; err: [Inf, 0.2840064693636064, 0.23689705724904742, 0.233740308842827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2840064693636064, 0.23689705724904742, 0.233740308842827, 0.23263667254517417] ***
*** finished computation of 3 references, err: [Inf, 0.2840064693636064, 0.23689705724904742, 0.233740308842827, 0.23263667254517417] ***
*** center 1: selecting labels [1] (freq >= 2) [from [197, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [60, 174, 21]]
** centroid: 2, normalized-entropy: 0.73444146586979, [(1, 60), (2, 174), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [138, 77, 0]]
** centroid: 3, normalized-entropy: 0.9411280185713452, [(1, 138), (2, 77)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29973908707868124] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29973908707868124, 0.2356670248884892] ***
*** starting iteration: 2; err: [Inf, 0.29973908707868124, 0.2356670248884892] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29973908707868124, 0.2356670248884892, 0.23346117363594796] ***
*** starting iteration: 3; err: [Inf, 0.29973908707868124, 0.2356670248884892, 0.23346117363594796] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29973908707868124, 0.2356670248884892, 0.23346117363594796, 0.2333795828158329] ***
*** finished computation of 3 references, err: [Inf, 0.29973908707868124, 0.2356670248884892, 0.23346117363594796, 0.2333795828158329] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [121, 96, 0]]
** centroid: 1, normalized-entropy: 0.9904044500506686, [(1, 121), (2, 96)]
*** center 2: selecting labels [1] (freq >= 2) [from [224, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [57, 151, 18]]
** centroid: 3, normalized-entropy: 0.744910142169236, [(1, 57), (2, 151), (3, 18)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36228227452584755] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36228227452584755, 0.24578326559057823] ***
*** starting iteration: 2; err: [Inf, 0.36228227452584755, 0.24578326559057823] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36228227452584755, 0.24578326559057823, 0.2407298019594952] ***
*** starting iteration: 3; err: [Inf, 0.36228227452584755, 0.24578326559057823, 0.2407298019594952] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36228227452584755, 0.24578326559057823, 0.2407298019594952, 0.23848863575305487] ***
*** starting iteration: 4; err: [Inf, 0.36228227452584755, 0.24578326559057823, 0.2407298019594952, 0.23848863575305487] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36228227452584755, 0.24578326559057823, 0.2407298019594952, 0.23848863575305487, 0.2379073331932406] ***
*** finished computation of 3 references, err: [Inf, 0.36228227452584755, 0.24578326559057823, 0.2407298019594952, 0.23848863575305487, 0.2379073331932406] ***
*** center 1: selecting labels [1] (freq >= 2) [from [195, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [75, 168, 21]]
** centroid: 2, normalized-entropy: 0.7705245217099784, [(1, 75), (2, 168), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [105, 102, 0]]
** centroid: 3, normalized-entropy: 0.9998484829291058, [(1, 105), (2, 102)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37022225142106124] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37022225142106124, 0.25249762471061554] ***
*** starting iteration: 2; err: [Inf, 0.37022225142106124, 0.25249762471061554] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37022225142106124, 0.25249762471061554, 0.2344312034631106] ***
*** starting iteration: 3; err: [Inf, 0.37022225142106124, 0.25249762471061554, 0.2344312034631106] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37022225142106124, 0.25249762471061554, 0.2344312034631106, 0.2321629517780117] ***
*** starting iteration: 4; err: [Inf, 0.37022225142106124, 0.25249762471061554, 0.2344312034631106, 0.2321629517780117] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37022225142106124, 0.25249762471061554, 0.2344312034631106, 0.2321629517780117, 0.23169465769414624] ***
*** finished computation of 3 references, err: [Inf, 0.37022225142106124, 0.25249762471061554, 0.2344312034631106, 0.2321629517780117, 0.23169465769414624] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [27, 192, 21]]
** centroid: 1, normalized-entropy: 0.5802458898091367, [(1, 27), (2, 192), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [222, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [146, 59, 0]]
** centroid: 3, normalized-entropy: 0.8658687555599284, [(1, 146), (2, 59)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3909269064089571] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3909269064089571, 0.2516877449636321] ***
*** starting iteration: 2; err: [Inf, 0.3909269064089571, 0.2516877449636321] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3909269064089571, 0.2516877449636321, 0.23705792943269818] ***
*** starting iteration: 3; err: [Inf, 0.3909269064089571, 0.2516877449636321, 0.23705792943269818] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3909269064089571, 0.2516877449636321, 0.23705792943269818, 0.23327767259456675] ***
*** starting iteration: 4; err: [Inf, 0.3909269064089571, 0.2516877449636321, 0.23705792943269818, 0.23327767259456675] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3909269064089571, 0.2516877449636321, 0.23705792943269818, 0.23327767259456675, 0.23215677991308373] ***
*** starting iteration: 5; err: [Inf, 0.3909269064089571, 0.2516877449636321, 0.23705792943269818, 0.23327767259456675, 0.23215677991308373] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3909269064089571, 0.2516877449636321, 0.23705792943269818, 0.23327767259456675, 0.23215677991308373, 0.2319236226509726] ***
*** finished computation of 3 references, err: [Inf, 0.3909269064089571, 0.2516877449636321, 0.23705792943269818, 0.23327767259456675, 0.23215677991308373, 0.2319236226509726] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [48, 170, 18]]
** centroid: 1, normalized-entropy: 0.6885968679102146, [(1, 48), (2, 170), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [224, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [130, 77, 0]]
** centroid: 3, normalized-entropy: 0.9521807771746562, [(1, 130), (2, 77)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3733309150423514] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3733309150423514, 0.23327816200039087] ***
*** starting iteration: 2; err: [Inf, 0.3733309150423514, 0.23327816200039087] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3733309150423514, 0.23327816200039087, 0.23190846988956432] ***
*** starting iteration: 3; err: [Inf, 0.3733309150423514, 0.23327816200039087, 0.23190846988956432] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3733309150423514, 0.23327816200039087, 0.23190846988956432, 0.23137787788215539] ***
*** finished computation of 3 references, err: [Inf, 0.3733309150423514, 0.23327816200039087, 0.23190846988956432, 0.23137787788215539] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [223, 13, 0]]
** centroid: 1, normalized-entropy: 0.30761595606496767, [(1, 223), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [172, 50, 0]]
** centroid: 2, normalized-entropy: 0.7695944821271463, [(1, 172), (2, 50)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 188, 21]]
** centroid: 3, normalized-entropy: 0.4705104718237067, [(2, 188), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31866562414517824] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31866562414517824, 0.25587916663028243] ***
*** starting iteration: 2; err: [Inf, 0.31866562414517824, 0.25587916663028243] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31866562414517824, 0.25587916663028243, 0.23948352924105468] ***
*** starting iteration: 3; err: [Inf, 0.31866562414517824, 0.25587916663028243, 0.23948352924105468] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31866562414517824, 0.25587916663028243, 0.23948352924105468, 0.23442595767910065] ***
*** finished computation of 3 references, err: [Inf, 0.31866562414517824, 0.25587916663028243, 0.23948352924105468, 0.23442595767910065] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [259, 11, 0]]
** centroid: 1, normalized-entropy: 0.24567821069591328, [(1, 259), (2, 11)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 192, 18]]
** centroid: 2, normalized-entropy: 0.4220005168831531, [(2, 192), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [143, 44, 0]]
** centroid: 3, normalized-entropy: 0.787126586201269, [(1, 143), (2, 44)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3343583816052736] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3343583816052736, 0.27326202671275707] ***
*** starting iteration: 2; err: [Inf, 0.3343583816052736, 0.27326202671275707] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3343583816052736, 0.27326202671275707, 0.26339503838862477] ***
*** starting iteration: 3; err: [Inf, 0.3343583816052736, 0.27326202671275707, 0.26339503838862477] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3343583816052736, 0.27326202671275707, 0.26339503838862477, 0.23901243475419623] ***
*** finished computation of 3 references, err: [Inf, 0.3343583816052736, 0.27326202671275707, 0.26339503838862477, 0.23901243475419623] ***
*** center 1: selecting labels [1] (freq >= 1) [from [222, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [28, 196, 21]]
** centroid: 2, normalized-entropy: 0.5798078640195465, [(1, 28), (2, 196), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [125, 74, 0]]
** centroid: 3, normalized-entropy: 0.9520890193411206, [(1, 125), (2, 74)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3004403552745582] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3004403552745582, 0.24462594511057215] ***
*** starting iteration: 2; err: [Inf, 0.3004403552745582, 0.24462594511057215] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3004403552745582, 0.24462594511057215, 0.2378205100389971] ***
*** starting iteration: 3; err: [Inf, 0.3004403552745582, 0.24462594511057215, 0.2378205100389971] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3004403552745582, 0.24462594511057215, 0.2378205100389971, 0.236281575026295] ***
*** finished computation of 3 references, err: [Inf, 0.3004403552745582, 0.24462594511057215, 0.2378205100389971, 0.236281575026295] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [255, 7, 0]]
** centroid: 1, normalized-entropy: 0.17765349446335854, [(1, 255), (2, 7)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [7, 180, 21]]
** centroid: 2, normalized-entropy: 0.42850975495347143, [(1, 7), (2, 180), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [133, 64, 0]]
** centroid: 3, normalized-entropy: 0.9096022564022735, [(1, 133), (2, 64)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3254337974655061] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3254337974655061, 0.2351531171389315] ***
*** starting iteration: 2; err: [Inf, 0.3254337974655061, 0.2351531171389315] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3254337974655061, 0.2351531171389315, 0.23368944456546695] ***
*** starting iteration: 3; err: [Inf, 0.3254337974655061, 0.2351531171389315, 0.23368944456546695] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3254337974655061, 0.2351531171389315, 0.23368944456546695, 0.23342206107656369] ***
*** finished computation of 3 references, err: [Inf, 0.3254337974655061, 0.2351531171389315, 0.23368944456546695, 0.23342206107656369] ***
*** center 1: selecting labels [1] (freq >= 1) [from [201, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [118, 101, 0]]
** centroid: 2, normalized-entropy: 0.9956489793151984, [(1, 118), (2, 101)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [83, 146, 18]]
** centroid: 3, normalized-entropy: 0.7901830590608033, [(1, 83), (2, 146), (3, 18)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3083188622230636] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3083188622230636, 0.24501575574603257] ***
*** starting iteration: 2; err: [Inf, 0.3083188622230636, 0.24501575574603257] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3083188622230636, 0.24501575574603257, 0.23905905522685778] ***
*** starting iteration: 3; err: [Inf, 0.3083188622230636, 0.24501575574603257, 0.23905905522685778] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3083188622230636, 0.24501575574603257, 0.23905905522685778, 0.2383234665236875] ***
*** finished computation of 3 references, err: [Inf, 0.3083188622230636, 0.24501575574603257, 0.23905905522685778, 0.2383234665236875] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [91, 128, 7]]
** centroid: 1, normalized-entropy: 0.7244515463056048, [(1, 91), (2, 128), (3, 7)]
*** center 2: selecting labels [1] (freq >= 1) [from [176, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [108, 142, 14]]
** centroid: 3, normalized-entropy: 0.7782067715739062, [(1, 108), (2, 142), (3, 14)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3520341820091936] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3520341820091936, 0.27675438515640893] ***
*** starting iteration: 2; err: [Inf, 0.3520341820091936, 0.27675438515640893] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3520341820091936, 0.27675438515640893, 0.27280677411554455] ***
*** starting iteration: 3; err: [Inf, 0.3520341820091936, 0.27675438515640893, 0.27280677411554455] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3520341820091936, 0.27675438515640893, 0.27280677411554455, 0.26426602470251487] ***
*** starting iteration: 4; err: [Inf, 0.3520341820091936, 0.27675438515640893, 0.27280677411554455, 0.26426602470251487] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3520341820091936, 0.27675438515640893, 0.27280677411554455, 0.26426602470251487, 0.23959645928572054] ***
*** starting iteration: 5; err: [Inf, 0.3520341820091936, 0.27675438515640893, 0.27280677411554455, 0.26426602470251487, 0.23959645928572054] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3520341820091936, 0.27675438515640893, 0.27280677411554455, 0.26426602470251487, 0.23959645928572054, 0.2332238786570404] ***
*** starting iteration: 6; err: [Inf, 0.3520341820091936, 0.27675438515640893, 0.27280677411554455, 0.26426602470251487, 0.23959645928572054, 0.2332238786570404] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3520341820091936, 0.27675438515640893, 0.27280677411554455, 0.26426602470251487, 0.23959645928572054, 0.2332238786570404, 0.23250952953573267] ***
*** finished computation of 3 references, err: [Inf, 0.3520341820091936, 0.27675438515640893, 0.27280677411554455, 0.26426602470251487, 0.23959645928572054, 0.2332238786570404, 0.23250952953573267] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [184, 37, 0]]
** centroid: 1, normalized-entropy: 0.6517705483382119, [(1, 184), (2, 37)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [211, 31, 0]]
** centroid: 2, normalized-entropy: 0.5522020205836475, [(1, 211), (2, 31)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 183, 21]]
** centroid: 3, normalized-entropy: 0.4782501641071144, [(2, 183), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.284101751176403] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.284101751176403, 0.2342057761120452] ***
*** starting iteration: 2; err: [Inf, 0.284101751176403, 0.2342057761120452] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.284101751176403, 0.2342057761120452, 0.23361803810538045] ***
*** finished computation of 3 references, err: [Inf, 0.284101751176403, 0.2342057761120452, 0.23361803810538045] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [68, 171, 18]]
** centroid: 1, normalized-entropy: 0.7364609934396742, [(1, 68), (2, 171), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [213, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [121, 76, 0]]
** centroid: 3, normalized-entropy: 0.9620267294465366, [(1, 121), (2, 76)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2924407038560792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2924407038560792, 0.21049416038926477] ***
*** starting iteration: 2; err: [Inf, 0.2924407038560792, 0.21049416038926477] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2924407038560792, 0.21049416038926477, 0.1997407523383087] ***
*** starting iteration: 3; err: [Inf, 0.2924407038560792, 0.21049416038926477, 0.1997407523383087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2924407038560792, 0.21049416038926477, 0.1997407523383087, 0.19544346092266027] ***
*** finished computation of 7 references, err: [Inf, 0.2924407038560792, 0.21049416038926477, 0.1997407523383087, 0.19544346092266027] ***
*** center 1: selecting labels [1] (freq >= 2) [from [135, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [99, 30, 0]]
** centroid: 2, normalized-entropy: 0.7824441294066888, [(1, 99), (2, 30)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 42, 0]]
** centroid: 3, normalized-entropy: 0.9870044298101771, [(1, 55), (2, 42)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 61, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [82, 3, 0]]
** centroid: 5, normalized-entropy: 0.22028326695127437, [(1, 82), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 87, 0]]
** centroid: 6, normalized-entropy: 0.26014536394771426, [(1, 4), (2, 87)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 47, 21]]
** centroid: 7, normalized-entropy: 0.8918107543797084, [(2, 47), (3, 21)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31061922292528055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31061922292528055, 0.23560173026316783] ***
*** starting iteration: 2; err: [Inf, 0.31061922292528055, 0.23560173026316783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31061922292528055, 0.23560173026316783, 0.21746860691129805] ***
*** starting iteration: 3; err: [Inf, 0.31061922292528055, 0.23560173026316783, 0.21746860691129805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31061922292528055, 0.23560173026316783, 0.21746860691129805, 0.2098944064821752] ***
*** finished computation of 7 references, err: [Inf, 0.31061922292528055, 0.23560173026316783, 0.21746860691129805, 0.2098944064821752] ***
*** center 1: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [32, 7, 0]]
** centroid: 2, normalized-entropy: 0.6789538995185759, [(1, 32), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [13, 108, 0]]
** centroid: 3, normalized-entropy: 0.4921395466176624, [(1, 13), (2, 108)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 61, 21]]
** centroid: 4, normalized-entropy: 0.8208002549877175, [(2, 61), (3, 21)]
*** center 5: selecting labels [1] (freq >= 2) [from [137, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [78, 3, 0]]
** centroid: 6, normalized-entropy: 0.22853814395352806, [(1, 78), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 72, 0]]
** centroid: 7, normalized-entropy: 0.3912435636292556, [(1, 6), (2, 72)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3320264834729114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3320264834729114, 0.23893406263984057] ***
*** starting iteration: 2; err: [Inf, 0.3320264834729114, 0.23893406263984057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3320264834729114, 0.23893406263984057, 0.21931022593983332] ***
*** starting iteration: 3; err: [Inf, 0.3320264834729114, 0.23893406263984057, 0.21931022593983332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3320264834729114, 0.23893406263984057, 0.21931022593983332, 0.20500679544942535] ***
*** finished computation of 7 references, err: [Inf, 0.3320264834729114, 0.23893406263984057, 0.21931022593983332, 0.20500679544942535] ***
*** center 1: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [72, 10, 0]]
** centroid: 2, normalized-entropy: 0.5349436990971067, [(1, 72), (2, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 69, 0]]
** centroid: 5, normalized-entropy: 0.9527431707334316, [(1, 41), (2, 69)]
*** center 6: selecting labels [1, 2, 3] (freq >= 2) [from [10, 142, 18]]
** centroid: 6, normalized-entropy: 0.504945838436536, [(1, 10), (2, 142), (3, 18)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [56, 26, 0]]
** centroid: 7, normalized-entropy: 0.9011701959974223, [(1, 56), (2, 26)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.43592339104975575] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43592339104975575, 0.29412935704395576] ***
*** starting iteration: 2; err: [Inf, 0.43592339104975575, 0.29412935704395576] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43592339104975575, 0.29412935704395576, 0.2931335566043798] ***
*** finished computation of 3 references, err: [Inf, 0.43592339104975575, 0.29412935704395576, 0.2931335566043798] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [236, 19, 0]]
** centroid: 1, normalized-entropy: 0.3825323293889652, [(1, 236), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [139, 43, 0]]
** centroid: 2, normalized-entropy: 0.7887715986560714, [(1, 139), (2, 43)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 208, 21]]
** centroid: 3, normalized-entropy: 0.4421289966047993, [(2, 208), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38824747326313286] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38824747326313286, 0.30403369922341705] ***
*** starting iteration: 2; err: [Inf, 0.38824747326313286, 0.30403369922341705] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38824747326313286, 0.30403369922341705, 0.2977955574630529] ***
*** starting iteration: 3; err: [Inf, 0.38824747326313286, 0.30403369922341705, 0.2977955574630529] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38824747326313286, 0.30403369922341705, 0.2977955574630529, 0.2970304262839716] ***
*** finished computation of 3 references, err: [Inf, 0.38824747326313286, 0.30403369922341705, 0.2977955574630529, 0.2970304262839716] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [252, 16, 0]]
** centroid: 1, normalized-entropy: 0.32625881462949274, [(1, 252), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [143, 47, 0]]
** centroid: 2, normalized-entropy: 0.8070804652353762, [(1, 143), (2, 47)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 188, 21]]
** centroid: 3, normalized-entropy: 0.4705104718237067, [(2, 188), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.390449947952621] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.390449947952621, 0.31886569458455116] ***
*** starting iteration: 2; err: [Inf, 0.390449947952621, 0.31886569458455116] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.390449947952621, 0.31886569458455116, 0.3021749587620663] ***
*** starting iteration: 3; err: [Inf, 0.390449947952621, 0.31886569458455116, 0.3021749587620663] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.390449947952621, 0.31886569458455116, 0.3021749587620663, 0.29714452172873884] ***
*** starting iteration: 4; err: [Inf, 0.390449947952621, 0.31886569458455116, 0.3021749587620663, 0.29714452172873884] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.390449947952621, 0.31886569458455116, 0.3021749587620663, 0.29714452172873884, 0.2957168521563421] ***
*** starting iteration: 5; err: [Inf, 0.390449947952621, 0.31886569458455116, 0.3021749587620663, 0.29714452172873884, 0.2957168521563421] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.390449947952621, 0.31886569458455116, 0.3021749587620663, 0.29714452172873884, 0.2957168521563421, 0.2952779303912235] ***
*** finished computation of 3 references, err: [Inf, 0.390449947952621, 0.31886569458455116, 0.3021749587620663, 0.29714452172873884, 0.2957168521563421, 0.2952779303912235] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [244, 10, 0]]
** centroid: 1, normalized-entropy: 0.2393965319917804, [(1, 244), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [155, 42, 0]]
** centroid: 2, normalized-entropy: 0.7475512378613777, [(1, 155), (2, 42)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [3, 195, 18]]
** centroid: 3, normalized-entropy: 0.32660181441123987, [(1, 3), (2, 195), (3, 18)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2964989858450139] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2964989858450139, 0.18467074810239198] ***
*** starting iteration: 2; err: [Inf, 0.2964989858450139, 0.18467074810239198] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2964989858450139, 0.18467074810239198, 0.16568896451100773] ***
*** starting iteration: 3; err: [Inf, 0.2964989858450139, 0.18467074810239198, 0.16568896451100773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2964989858450139, 0.18467074810239198, 0.16568896451100773, 0.15829803652013652] ***
*** starting iteration: 4; err: [Inf, 0.2964989858450139, 0.18467074810239198, 0.16568896451100773, 0.15829803652013652] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2964989858450139, 0.18467074810239198, 0.16568896451100773, 0.15829803652013652, 0.15463788872976247] ***
*** starting iteration: 5; err: [Inf, 0.2964989858450139, 0.18467074810239198, 0.16568896451100773, 0.15829803652013652, 0.15463788872976247] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2964989858450139, 0.18467074810239198, 0.16568896451100773, 0.15829803652013652, 0.15463788872976247, 0.1522183658316726] ***
*** starting iteration: 6; err: [Inf, 0.2964989858450139, 0.18467074810239198, 0.16568896451100773, 0.15829803652013652, 0.15463788872976247, 0.1522183658316726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2964989858450139, 0.18467074810239198, 0.16568896451100773, 0.15829803652013652, 0.15463788872976247, 0.1522183658316726, 0.1505858585876119] ***
*** starting iteration: 7; err: [Inf, 0.2964989858450139, 0.18467074810239198, 0.16568896451100773, 0.15829803652013652, 0.15463788872976247, 0.1522183658316726, 0.1505858585876119] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2964989858450139, 0.18467074810239198, 0.16568896451100773, 0.15829803652013652, 0.15463788872976247, 0.1522183658316726, 0.1505858585876119, 0.14970871283289594] ***
*** finished computation of 7 references, err: [Inf, 0.2964989858450139, 0.18467074810239198, 0.16568896451100773, 0.15829803652013652, 0.15463788872976247, 0.1522183658316726, 0.1505858585876119, 0.14970871283289594] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 64, 21]]
** centroid: 1, normalized-entropy: 0.806583102274714, [(2, 64), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [51, 27, 0]]
** centroid: 2, normalized-entropy: 0.9305861291319927, [(1, 51), (2, 27)]
*** center 3: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [102, 14, 0]]
** centroid: 5, normalized-entropy: 0.5313400141801669, [(1, 102), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [14, 82, 0]]
** centroid: 6, normalized-entropy: 0.5993142373098089, [(1, 14), (2, 82)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 83, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20614174368087554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20614174368087554, 0.16131930993702345] ***
*** starting iteration: 2; err: [Inf, 0.20614174368087554, 0.16131930993702345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20614174368087554, 0.16131930993702345, 0.15189479118439256] ***
*** starting iteration: 3; err: [Inf, 0.20614174368087554, 0.16131930993702345, 0.15189479118439256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20614174368087554, 0.16131930993702345, 0.15189479118439256, 0.1497177745549307] ***
*** starting iteration: 4; err: [Inf, 0.20614174368087554, 0.16131930993702345, 0.15189479118439256, 0.1497177745549307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20614174368087554, 0.16131930993702345, 0.15189479118439256, 0.1497177745549307, 0.14933178345135217] ***
*** finished computation of 7 references, err: [Inf, 0.20614174368087554, 0.16131930993702345, 0.15189479118439256, 0.1497177745549307, 0.14933178345135217] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [130, 4, 0]]
** centroid: 1, normalized-entropy: 0.19364280468389852, [(1, 130), (2, 4)]
*** center 2: selecting labels [1] (freq >= 1) [from [136, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 49, 0]]
** centroid: 3, normalized-entropy: 0.999686892486842, [(1, 47), (2, 49)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 72, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 44, 21]]
** centroid: 6, normalized-entropy: 0.9076961653608385, [(2, 44), (3, 21)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [82, 7, 0]]
** centroid: 7, normalized-entropy: 0.3974104103699249, [(1, 82), (2, 7)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2332662903917381] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2332662903917381, 0.1699763283467219] ***
*** starting iteration: 2; err: [Inf, 0.2332662903917381, 0.1699763283467219] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2332662903917381, 0.1699763283467219, 0.15886017610214237] ***
*** starting iteration: 3; err: [Inf, 0.2332662903917381, 0.1699763283467219, 0.15886017610214237] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2332662903917381, 0.1699763283467219, 0.15886017610214237, 0.1563928497388311] ***
*** starting iteration: 4; err: [Inf, 0.2332662903917381, 0.1699763283467219, 0.15886017610214237, 0.1563928497388311] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2332662903917381, 0.1699763283467219, 0.15886017610214237, 0.1563928497388311, 0.15520866965174093] ***
*** starting iteration: 5; err: [Inf, 0.2332662903917381, 0.1699763283467219, 0.15886017610214237, 0.1563928497388311, 0.15520866965174093] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2332662903917381, 0.1699763283467219, 0.15886017610214237, 0.1563928497388311, 0.15520866965174093, 0.15394675924625623] ***
*** starting iteration: 6; err: [Inf, 0.2332662903917381, 0.1699763283467219, 0.15886017610214237, 0.1563928497388311, 0.15520866965174093, 0.15394675924625623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2332662903917381, 0.1699763283467219, 0.15886017610214237, 0.1563928497388311, 0.15520866965174093, 0.15394675924625623, 0.15257631192707094] ***
*** starting iteration: 7; err: [Inf, 0.2332662903917381, 0.1699763283467219, 0.15886017610214237, 0.1563928497388311, 0.15520866965174093, 0.15394675924625623, 0.15257631192707094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2332662903917381, 0.1699763283467219, 0.15886017610214237, 0.1563928497388311, 0.15520866965174093, 0.15394675924625623, 0.15257631192707094, 0.15100391659288034] ***
*** starting iteration: 8; err: [Inf, 0.2332662903917381, 0.1699763283467219, 0.15886017610214237, 0.1563928497388311, 0.15520866965174093, 0.15394675924625623, 0.15257631192707094, 0.15100391659288034] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2332662903917381, 0.1699763283467219, 0.15886017610214237, 0.1563928497388311, 0.15520866965174093, 0.15394675924625623, 0.15257631192707094, 0.15100391659288034, 0.15019229684873991] ***
*** finished computation of 7 references, err: [Inf, 0.2332662903917381, 0.1699763283467219, 0.15886017610214237, 0.1563928497388311, 0.15520866965174093, 0.15394675924625623, 0.15257631192707094, 0.15100391659288034, 0.15019229684873991] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [59, 31, 0]]
** centroid: 1, normalized-entropy: 0.9290083681703216, [(1, 59), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [86, 25, 0]]
** centroid: 2, normalized-entropy: 0.7695944821271463, [(1, 86), (2, 25)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 104, 18]]
** centroid: 3, normalized-entropy: 0.603652249754401, [(2, 104), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [5, 82, 0]]
** centroid: 6, normalized-entropy: 0.3173238998358585, [(1, 5), (2, 82)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [72, 5, 0]]
** centroid: 7, normalized-entropy: 0.34673146824966367, [(1, 72), (2, 5)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29423287709442164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29423287709442164, 0.24203910424818728] ***
*** finished computation of 7 references, err: [Inf, 0.29423287709442164, 0.24203910424818728] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 1, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 7, 14]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 7), (3, 14)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 81, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [201, 19, 0]]
** centroid: 4, normalized-entropy: 0.42421420133196514, [(1, 201), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [125, 12, 0]]
** centroid: 5, normalized-entropy: 0.4283781735341417, [(1, 125), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [49, 26, 0]]
** centroid: 6, normalized-entropy: 0.9310558233850329, [(1, 49), (2, 26)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 123, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22767478356003829] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22767478356003829, 0.1977712182456214] ***
*** finished computation of 7 references, err: [Inf, 0.22767478356003829, 0.1977712182456214] ***
*** center 1: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 88, 21]]
** centroid: 2, normalized-entropy: 0.70700406497476, [(2, 88), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [41, 54, 0]]
** centroid: 3, normalized-entropy: 0.9864497419502243, [(1, 41), (2, 54)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [5, 70, 0]]
** centroid: 4, normalized-entropy: 0.3533593350214213, [(1, 5), (2, 70)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [86, 2, 0]]
** centroid: 5, normalized-entropy: 0.1564910629057016, [(1, 86), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [87, 37, 0]]
** centroid: 6, normalized-entropy: 0.8793103533940488, [(1, 87), (2, 37)]
*** center 7: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24973270099476047] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24973270099476047, 0.20432894884062738] ***
*** finished computation of 7 references, err: [Inf, 0.24973270099476047, 0.20432894884062738] ***
*** center 1: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 6, 0]]
** centroid: 2, normalized-entropy: 0.44886448872302936, [(1, 58), (2, 6)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [101, 23, 0]]
** centroid: 3, normalized-entropy: 0.6919278850058869, [(1, 101), (2, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 147, 18]]
** centroid: 5, normalized-entropy: 0.4971677614160751, [(2, 147), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [59, 55, 0]]
** centroid: 6, normalized-entropy: 0.9991117320927689, [(1, 59), (2, 55)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [71, 16, 0]]
** centroid: 7, normalized-entropy: 0.6885521684368613, [(1, 71), (2, 16)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 12)
[0.9210048371725019, 0.9169828511145877, 0.9160028291764819, 0.9159938381495268, 0.914015812219405, 0.913011814209419, 0.9100118082154011, 0.9019648390905877, 0.8799787811763861, 0.877985770201339, 0.8609897322472172, 0.791989594384804]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.6, 1) => 0.9210048371725019
finished with 13
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.4228087521323168] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4228087521323168, 0.3168954917372347] ***
*** starting iteration: 2; err: [Inf, 0.4228087521323168, 0.3168954917372347] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4228087521323168, 0.3168954917372347, 0.3015091013115783] ***
*** starting iteration: 3; err: [Inf, 0.4228087521323168, 0.3168954917372347, 0.3015091013115783] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4228087521323168, 0.3168954917372347, 0.3015091013115783, 0.29760049076543915] ***
*** starting iteration: 4; err: [Inf, 0.4228087521323168, 0.3168954917372347, 0.3015091013115783, 0.29760049076543915] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4228087521323168, 0.3168954917372347, 0.3015091013115783, 0.29760049076543915, 0.2954963243191687] ***
*** starting iteration: 5; err: [Inf, 0.4228087521323168, 0.3168954917372347, 0.3015091013115783, 0.29760049076543915, 0.2954963243191687] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4228087521323168, 0.3168954917372347, 0.3015091013115783, 0.29760049076543915, 0.2954963243191687, 0.29458430627718923] ***
*** finished computation of 3 references, err: [Inf, 0.4228087521323168, 0.3168954917372347, 0.3015091013115783, 0.29760049076543915, 0.2954963243191687, 0.29458430627718923] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [4, 208, 21]]
** centroid: 1, normalized-entropy: 0.35317239202604395, [(1, 4), (2, 208), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [146, 58, 0]]
** centroid: 2, normalized-entropy: 0.8612621884720756, [(1, 146), (2, 58)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [225, 4, 0]]
** centroid: 3, normalized-entropy: 0.12697336004526982, [(1, 225), (2, 4)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4303744171216883] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4303744171216883, 0.3030454951297978] ***
*** starting iteration: 2; err: [Inf, 0.4303744171216883, 0.3030454951297978] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4303744171216883, 0.3030454951297978, 0.29638229409090316] ***
*** starting iteration: 3; err: [Inf, 0.4303744171216883, 0.3030454951297978, 0.29638229409090316] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4303744171216883, 0.3030454951297978, 0.29638229409090316, 0.29405109039640454] ***
*** starting iteration: 4; err: [Inf, 0.4303744171216883, 0.3030454951297978, 0.29638229409090316, 0.29405109039640454] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4303744171216883, 0.3030454951297978, 0.29638229409090316, 0.29405109039640454, 0.2932979975780961] ***
*** finished computation of 3 references, err: [Inf, 0.4303744171216883, 0.3030454951297978, 0.29638229409090316, 0.29405109039640454, 0.2932979975780961] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [228, 15, 0]]
** centroid: 1, normalized-entropy: 0.33426813256179383, [(1, 228), (2, 15)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 190, 21]]
** centroid: 2, normalized-entropy: 0.46749145666342173, [(2, 190), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [167, 46, 0]]
** centroid: 3, normalized-entropy: 0.7527262079169682, [(1, 167), (2, 46)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3569636367306091] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3569636367306091, 0.33794088518551396] ***
*** starting iteration: 2; err: [Inf, 0.3569636367306091, 0.33794088518551396] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3569636367306091, 0.33794088518551396, 0.3329085132352885] ***
*** starting iteration: 3; err: [Inf, 0.3569636367306091, 0.33794088518551396, 0.3329085132352885] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3569636367306091, 0.33794088518551396, 0.3329085132352885, 0.3261948420625666] ***
*** starting iteration: 4; err: [Inf, 0.3569636367306091, 0.33794088518551396, 0.3329085132352885, 0.3261948420625666] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3569636367306091, 0.33794088518551396, 0.3329085132352885, 0.3261948420625666, 0.3216667330057278] ***
*** starting iteration: 5; err: [Inf, 0.3569636367306091, 0.33794088518551396, 0.3329085132352885, 0.3261948420625666, 0.3216667330057278] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3569636367306091, 0.33794088518551396, 0.3329085132352885, 0.3261948420625666, 0.3216667330057278, 0.31775381159445065] ***
*** starting iteration: 6; err: [Inf, 0.3569636367306091, 0.33794088518551396, 0.3329085132352885, 0.3261948420625666, 0.3216667330057278, 0.31775381159445065] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3569636367306091, 0.33794088518551396, 0.3329085132352885, 0.3261948420625666, 0.3216667330057278, 0.31775381159445065, 0.3137527638054948] ***
*** starting iteration: 7; err: [Inf, 0.3569636367306091, 0.33794088518551396, 0.3329085132352885, 0.3261948420625666, 0.3216667330057278, 0.31775381159445065, 0.3137527638054948] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3569636367306091, 0.33794088518551396, 0.3329085132352885, 0.3261948420625666, 0.3216667330057278, 0.31775381159445065, 0.3137527638054948, 0.29979717138612916] ***
*** starting iteration: 8; err: [Inf, 0.3569636367306091, 0.33794088518551396, 0.3329085132352885, 0.3261948420625666, 0.3216667330057278, 0.31775381159445065, 0.3137527638054948, 0.29979717138612916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3569636367306091, 0.33794088518551396, 0.3329085132352885, 0.3261948420625666, 0.3216667330057278, 0.31775381159445065, 0.3137527638054948, 0.29979717138612916, 0.2962213896684114] ***
*** starting iteration: 9; err: [Inf, 0.3569636367306091, 0.33794088518551396, 0.3329085132352885, 0.3261948420625666, 0.3216667330057278, 0.31775381159445065, 0.3137527638054948, 0.29979717138612916, 0.2962213896684114] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3569636367306091, 0.33794088518551396, 0.3329085132352885, 0.3261948420625666, 0.3216667330057278, 0.31775381159445065, 0.3137527638054948, 0.29979717138612916, 0.2962213896684114, 0.2962669200477549] ***
*** finished computation of 3 references, err: [Inf, 0.3569636367306091, 0.33794088518551396, 0.3329085132352885, 0.3261948420625666, 0.3216667330057278, 0.31775381159445065, 0.3137527638054948, 0.29979717138612916, 0.2962213896684114, 0.2962669200477549] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [62, 170, 18]]
** centroid: 1, normalized-entropy: 0.7258992957153065, [(1, 62), (2, 170), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [212, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [128, 77, 0]]
** centroid: 3, normalized-entropy: 0.9548822281224831, [(1, 128), (2, 77)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9210048371725019, 0.9169828511145877, 0.9160028291764819, 0.9159938381495268, 0.914015812219405, 0.913011814209419, 0.9100118082154011, 0.9019648390905877, 0.8799787811763861, 0.877985770201339, 0.8609897322472172, 0.8569827312342283, 0.791989594384804]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.6, 1) => 0.9210048371725019
finished with 13
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9210048371725019, 0.9169828511145877, 0.9160028291764819, 0.9159938381495268, 0.914015812219405, 0.913011814209419, 0.9100118082154011, 0.9019648390905877, 0.8799787811763861, 0.877985770201339, 0.8609897322472172, 0.8569827312342283, 0.791989594384804]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.6, 1) => 0.9210048371725019
finished with 14
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.19564361943214484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19564361943214484, 0.17516704840171668] ***
*** starting iteration: 2; err: [Inf, 0.19564361943214484, 0.17516704840171668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19564361943214484, 0.17516704840171668, 0.16398723103670967] ***
*** starting iteration: 3; err: [Inf, 0.19564361943214484, 0.17516704840171668, 0.16398723103670967] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19564361943214484, 0.17516704840171668, 0.16398723103670967, 0.15958802656035637] ***
*** finished computation of 7 references, err: [Inf, 0.19564361943214484, 0.17516704840171668, 0.16398723103670967, 0.15958802656035637] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [103, 25, 0]]
** centroid: 1, normalized-entropy: 0.7124534449668779, [(1, 103), (2, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [137, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [130, 9, 0]]
** centroid: 3, normalized-entropy: 0.3460120028912779, [(1, 130), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [5, 103, 0]]
** centroid: 4, normalized-entropy: 0.2704505135124657, [(1, 5), (2, 103)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 28, 21]]
** centroid: 5, normalized-entropy: 0.9852281360342514, [(2, 28), (3, 21)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 61, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 44, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24187707610992432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24187707610992432, 0.1534996724434789] ***
*** starting iteration: 2; err: [Inf, 0.24187707610992432, 0.1534996724434789] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24187707610992432, 0.1534996724434789, 0.1491675638416405] ***
*** starting iteration: 3; err: [Inf, 0.24187707610992432, 0.1534996724434789, 0.1491675638416405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24187707610992432, 0.1534996724434789, 0.1491675638416405, 0.1480293070438082] ***
*** finished computation of 7 references, err: [Inf, 0.24187707610992432, 0.1534996724434789, 0.1491675638416405, 0.1480293070438082] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 124, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [76, 24, 0]]
** centroid: 2, normalized-entropy: 0.7950402793845225, [(1, 76), (2, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 39, 0]]
** centroid: 3, normalized-entropy: 0.9744894033980525, [(1, 57), (2, 39)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [104, 8, 0]]
** centroid: 4, normalized-entropy: 0.3712323266408756, [(1, 104), (2, 8)]
*** center 5: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 55, 21]]
** centroid: 6, normalized-entropy: 0.8503821170987139, [(2, 55), (3, 21)]
*** center 7: selecting labels [1] (freq >= 2) [from [85, 1, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2388786251699996] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2388786251699996, 0.1650120004659171] ***
*** starting iteration: 2; err: [Inf, 0.2388786251699996, 0.1650120004659171] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2388786251699996, 0.1650120004659171, 0.15840039606697612] ***
*** starting iteration: 3; err: [Inf, 0.2388786251699996, 0.1650120004659171, 0.15840039606697612] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2388786251699996, 0.1650120004659171, 0.15840039606697612, 0.1563065561655814] ***
*** finished computation of 7 references, err: [Inf, 0.2388786251699996, 0.1650120004659171, 0.15840039606697612, 0.1563065561655814] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 76, 18]]
** centroid: 1, normalized-entropy: 0.7045767128725937, [(2, 76), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [12, 76, 0]]
** centroid: 2, normalized-entropy: 0.5746356978376794, [(1, 12), (2, 76)]
*** center 3: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 83, 0]]
** centroid: 5, normalized-entropy: 0.8694928443329235, [(1, 34), (2, 83)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [111, 12, 0]]
** centroid: 6, normalized-entropy: 0.4612160405139095, [(1, 111), (2, 12)]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9210048371725019, 0.9169828511145877, 0.9160028291764819, 0.9159938381495268, 0.914015812219405, 0.913011814209419, 0.9100118082154011, 0.9019648390905877, 0.8989648330965697, 0.8799787811763861, 0.877985770201339, 0.8609897322472172, 0.8569827312342283, 0.791989594384804]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.6, 1) => 0.9210048371725019
finished with 15
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.3851161869396379] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3851161869396379, 0.30188769700544615] ***
*** starting iteration: 2; err: [Inf, 0.3851161869396379, 0.30188769700544615] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3851161869396379, 0.30188769700544615, 0.295668444938321] ***
*** starting iteration: 3; err: [Inf, 0.3851161869396379, 0.30188769700544615, 0.295668444938321] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3851161869396379, 0.30188769700544615, 0.295668444938321, 0.2937241113469608] ***
*** finished computation of 3 references, err: [Inf, 0.3851161869396379, 0.30188769700544615, 0.295668444938321, 0.2937241113469608] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [237, 16, 0]]
** centroid: 1, normalized-entropy: 0.34017875260384617, [(1, 237), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [158, 47, 0]]
** centroid: 2, normalized-entropy: 0.7767335910135865, [(1, 158), (2, 47)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 188, 21]]
** centroid: 3, normalized-entropy: 0.4705104718237067, [(2, 188), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3800217523400367] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3800217523400367, 0.3034691727907584] ***
*** starting iteration: 2; err: [Inf, 0.3800217523400367, 0.3034691727907584] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3800217523400367, 0.3034691727907584, 0.2984165823906548] ***
*** starting iteration: 3; err: [Inf, 0.3800217523400367, 0.3034691727907584, 0.2984165823906548] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3800217523400367, 0.3034691727907584, 0.2984165823906548, 0.2973236908434188] ***
*** finished computation of 3 references, err: [Inf, 0.3800217523400367, 0.3034691727907584, 0.2984165823906548, 0.2973236908434188] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [70, 190, 21]]
** centroid: 1, normalized-entropy: 0.7324460216132668, [(1, 70), (2, 190), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [184, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [121, 80, 0]]
** centroid: 3, normalized-entropy: 0.9697745802276108, [(1, 121), (2, 80)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4503676643165043] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4503676643165043, 0.3013568893870872] ***
*** starting iteration: 2; err: [Inf, 0.4503676643165043, 0.3013568893870872] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4503676643165043, 0.3013568893870872, 0.29801596433337574] ***
*** starting iteration: 3; err: [Inf, 0.4503676643165043, 0.3013568893870872, 0.29801596433337574] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4503676643165043, 0.3013568893870872, 0.29801596433337574, 0.2965245443484236] ***
*** finished computation of 3 references, err: [Inf, 0.4503676643165043, 0.3013568893870872, 0.29801596433337574, 0.2965245443484236] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [80, 155, 18]]
** centroid: 1, normalized-entropy: 0.7757822322803665, [(1, 80), (2, 155), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [105, 92, 0]]
** centroid: 2, normalized-entropy: 0.9968564929985687, [(1, 105), (2, 92)]
*** center 3: selecting labels [1] (freq >= 1) [from [217, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 15)
[0.9210048371725019, 0.9169828511145877, 0.9160028291764819, 0.9159938381495268, 0.9150018281754809, 0.914015812219405, 0.913011814209419, 0.9100118082154011, 0.9019648390905877, 0.8989648330965697, 0.8799787811763861, 0.877985770201339, 0.8609897322472172, 0.8569827312342283, 0.791989594384804]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.6, 1) => 0.9210048371725019
finished with 16
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.34438930939905366] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34438930939905366, 0.30515651321374215] ***
*** starting iteration: 2; err: [Inf, 0.34438930939905366, 0.30515651321374215] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34438930939905366, 0.30515651321374215, 0.30048284128688657] ***
*** starting iteration: 3; err: [Inf, 0.34438930939905366, 0.30515651321374215, 0.30048284128688657] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34438930939905366, 0.30515651321374215, 0.30048284128688657, 0.2991011426777106] ***
*** starting iteration: 4; err: [Inf, 0.34438930939905366, 0.30515651321374215, 0.30048284128688657, 0.2991011426777106] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34438930939905366, 0.30515651321374215, 0.30048284128688657, 0.2991011426777106, 0.29853315662603835] ***
*** finished computation of 3 references, err: [Inf, 0.34438930939905366, 0.30515651321374215, 0.30048284128688657, 0.2991011426777106, 0.29853315662603835] ***
*** center 1: selecting labels [1] (freq >= 1) [from [195, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [70, 173, 21]]
** centroid: 2, normalized-entropy: 0.7557794884285031, [(1, 70), (2, 173), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [110, 97, 0]]
** centroid: 3, normalized-entropy: 0.9971530725724463, [(1, 110), (2, 97)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31794470262810076] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31794470262810076, 0.29889139583518637] ***
*** starting iteration: 2; err: [Inf, 0.31794470262810076, 0.29889139583518637] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31794470262810076, 0.29889139583518637, 0.2963432468183484] ***
*** starting iteration: 3; err: [Inf, 0.31794470262810076, 0.29889139583518637, 0.2963432468183484] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31794470262810076, 0.29889139583518637, 0.2963432468183484, 0.2958325327526236] ***
*** finished computation of 3 references, err: [Inf, 0.31794470262810076, 0.29889139583518637, 0.2963432468183484, 0.2958325327526236] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [167, 45, 0]]
** centroid: 1, normalized-entropy: 0.7457883499499818, [(1, 167), (2, 45)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [228, 14, 0]]
** centroid: 2, normalized-entropy: 0.3188554185210095, [(1, 228), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 192, 21]]
** centroid: 3, normalized-entropy: 0.4645149440905521, [(2, 192), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.336462949398616] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.336462949398616, 0.30052145708748873] ***
*** starting iteration: 2; err: [Inf, 0.336462949398616, 0.30052145708748873] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.336462949398616, 0.30052145708748873, 0.2968405165236214] ***
*** starting iteration: 3; err: [Inf, 0.336462949398616, 0.30052145708748873, 0.2968405165236214] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.336462949398616, 0.30052145708748873, 0.2968405165236214, 0.2961676628950207] ***
*** finished computation of 3 references, err: [Inf, 0.336462949398616, 0.30052145708748873, 0.2968405165236214, 0.2961676628950207] ***
*** center 1: selecting labels [1] (freq >= 1) [from [212, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [70, 169, 18]]
** centroid: 2, normalized-entropy: 0.7428484018775826, [(1, 70), (2, 169), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [120, 78, 0]]
** centroid: 3, normalized-entropy: 0.9672947789468944, [(1, 120), (2, 78)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 16)
[0.9210048371725019, 0.9169828511145877, 0.9160028291764819, 0.9159938381495268, 0.9150018281754809, 0.914015812219405, 0.913011814209419, 0.9100118082154011, 0.9019648390905877, 0.8989648330965697, 0.8959828091564619, 0.8799787811763861, 0.877985770201339, 0.8609897322472172, 0.8569827312342283, 0.791989594384804]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.6, 1) => 0.9210048371725019
finished with 17
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.36688430540855677] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36688430540855677, 0.23297045904601263] ***
*** starting iteration: 2; err: [Inf, 0.36688430540855677, 0.23297045904601263] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36688430540855677, 0.23297045904601263, 0.23150006046231048] ***
*** starting iteration: 3; err: [Inf, 0.36688430540855677, 0.23297045904601263, 0.23150006046231048] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36688430540855677, 0.23297045904601263, 0.23150006046231048, 0.23121758548171445] ***
*** finished computation of 3 references, err: [Inf, 0.36688430540855677, 0.23297045904601263, 0.23150006046231048, 0.23121758548171445] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [234, 10, 0]]
** centroid: 1, normalized-entropy: 0.2467839550571885, [(1, 234), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [160, 52, 0]]
** centroid: 2, normalized-entropy: 0.8037159237834126, [(1, 160), (2, 52)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 189, 21]]
** centroid: 3, normalized-entropy: 0.46899559358928133, [(2, 189), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30341740237554543] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30341740237554543, 0.2459718232663969] ***
*** starting iteration: 2; err: [Inf, 0.30341740237554543, 0.2459718232663969] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30341740237554543, 0.2459718232663969, 0.23620913386856718] ***
*** starting iteration: 3; err: [Inf, 0.30341740237554543, 0.2459718232663969, 0.23620913386856718] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30341740237554543, 0.2459718232663969, 0.23620913386856718, 0.2332374001629427] ***
*** starting iteration: 4; err: [Inf, 0.30341740237554543, 0.2459718232663969, 0.23620913386856718, 0.2332374001629427] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30341740237554543, 0.2459718232663969, 0.23620913386856718, 0.2332374001629427, 0.23277842581227376] ***
*** finished computation of 3 references, err: [Inf, 0.30341740237554543, 0.2459718232663969, 0.23620913386856718, 0.2332374001629427, 0.23277842581227376] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [52, 195, 21]]
** centroid: 1, normalized-entropy: 0.6818301542000345, [(1, 52), (2, 195), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [195, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [128, 75, 0]]
** centroid: 3, normalized-entropy: 0.9502551202039395, [(1, 128), (2, 75)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3724340749503081] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3724340749503081, 0.23541007416582538] ***
*** starting iteration: 2; err: [Inf, 0.3724340749503081, 0.23541007416582538] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3724340749503081, 0.23541007416582538, 0.23261974873356353] ***
*** starting iteration: 3; err: [Inf, 0.3724340749503081, 0.23541007416582538, 0.23261974873356353] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3724340749503081, 0.23541007416582538, 0.23261974873356353, 0.23190330865484352] ***
*** finished computation of 3 references, err: [Inf, 0.3724340749503081, 0.23541007416582538, 0.23261974873356353, 0.23190330865484352] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [51, 175, 18]]
** centroid: 1, normalized-entropy: 0.6898483097658012, [(1, 51), (2, 175), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [220, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [131, 72, 0]]
** centroid: 3, normalized-entropy: 0.9381782161740805, [(1, 131), (2, 72)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 17)
[0.9210048371725019, 0.9169828511145877, 0.9160028291764819, 0.9159938381495268, 0.9150018281754809, 0.914015812219405, 0.9139948331565098, 0.913011814209419, 0.9100118082154011, 0.9019648390905877, 0.8989648330965697, 0.8959828091564619, 0.8799787811763861, 0.877985770201339, 0.8609897322472172, 0.8569827312342283, 0.791989594384804]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.6, 1) => 0.9210048371725019
finished with 17
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9210048371725019, 0.9169828511145877, 0.9160028291764819, 0.9159938381495268, 0.9150018281754809, 0.914015812219405, 0.9139948331565098, 0.913011814209419, 0.9100118082154011, 0.9019648390905877, 0.8989648330965697, 0.8959828091564619, 0.8799787811763861, 0.877985770201339, 0.8609897322472172, 0.8569827312342283, 0.791989594384804]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.6, 1) => 0.9210048371725019
finished with 18
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.31557616837428987] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31557616837428987, 0.1888683395160994] ***
*** finished computation of 7 references, err: [Inf, 0.31557616837428987, 0.1888683395160994] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [3, 91, 0]]
** centroid: 1, normalized-entropy: 0.2039058755048202, [(1, 3), (2, 91)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [86, 10, 0]]
** centroid: 2, normalized-entropy: 0.4820661480830933, [(1, 86), (2, 10)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [215, 5, 0]]
** centroid: 3, normalized-entropy: 0.1564910629057016, [(1, 215), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [26, 17, 0]]
** centroid: 4, normalized-entropy: 0.9681647320759545, [(1, 26), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [45, 88, 0]]
** centroid: 5, normalized-entropy: 0.9232270086221106, [(1, 45), (2, 88)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 44, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 15, 21]]
** centroid: 7, normalized-entropy: 0.9798687566511527, [(2, 15), (3, 21)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20047262302464408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20047262302464408, 0.17365427620672638] ***
*** finished computation of 7 references, err: [Inf, 0.20047262302464408, 0.17365427620672638] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [159, 13, 0]]
** centroid: 1, normalized-entropy: 0.38641529989950085, [(1, 159), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [4, 148, 0]]
** centroid: 2, normalized-entropy: 0.17556502585750275, [(1, 4), (2, 148)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 38, 21]]
** centroid: 3, normalized-entropy: 0.9392547207311595, [(2, 38), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [64, 14, 0]]
** centroid: 4, normalized-entropy: 0.6789538995185759, [(1, 64), (2, 14)]
*** center 5: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [137, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [10, 38, 0]]
** centroid: 7, normalized-entropy: 0.7382848661434506, [(1, 10), (2, 38)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2213186819310198] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2213186819310198, 0.16821520639837592] ***
*** finished computation of 7 references, err: [Inf, 0.2213186819310198, 0.16821520639837592] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [54, 68, 0]]
** centroid: 1, normalized-entropy: 0.9904799742690307, [(1, 54), (2, 68)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 58, 18]]
** centroid: 2, normalized-entropy: 0.7897492536625221, [(2, 58), (3, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [152, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [51, 62, 0]]
** centroid: 4, normalized-entropy: 0.9931536200741918, [(1, 51), (2, 62)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [90, 7, 0]]
** centroid: 5, normalized-entropy: 0.37395136668121054, [(1, 90), (2, 7)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 52, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.23125837722141296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23125837722141296, 0.18337703529652208] ***
*** finished computation of 7 references, err: [Inf, 0.23125837722141296, 0.18337703529652208] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 99, 30]]
** centroid: 1, normalized-entropy: 0.7824441294066888, [(2, 99), (3, 30)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [21, 182, 0]]
** centroid: 2, normalized-entropy: 0.47983202361612853, [(1, 21), (2, 182)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [11, 39, 0]]
** centroid: 3, normalized-entropy: 0.7601675029619658, [(1, 11), (2, 39)]
*** center 4: selecting labels [1] (freq >= 1) [from [195, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [27, 58, 0]]
** centroid: 5, normalized-entropy: 0.9018043446575508, [(1, 27), (2, 58)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [270, 6, 0]]
** centroid: 6, normalized-entropy: 0.1510969705171136, [(1, 270), (2, 6)]
*** center 7: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21615666774101555] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21615666774101555, 0.17053568422887475] ***
*** finished computation of 7 references, err: [Inf, 0.21615666774101555, 0.17053568422887475] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 70, 15]]
** centroid: 1, normalized-entropy: 0.6722948170756378, [(2, 70), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [129, 5, 0]]
** centroid: 2, normalized-entropy: 0.2298357843082457, [(1, 129), (2, 5)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 36, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 31, 0]]
** centroid: 4, normalized-entropy: 0.9395876193289702, [(1, 56), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [41, 19, 0]]
** centroid: 5, normalized-entropy: 0.9007196798623592, [(1, 41), (2, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 26, 2]]
** centroid: 7, normalized-entropy: 0.3712323266408756, [(2, 26), (3, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20645715604908765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20645715604908765, 0.17049024374503643] ***
*** finished computation of 7 references, err: [Inf, 0.20645715604908765, 0.17049024374503643] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [125, 6, 0]]
** centroid: 1, normalized-entropy: 0.2682870428573907, [(1, 125), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [3, 29, 0]]
** centroid: 2, normalized-entropy: 0.44886448872302936, [(1, 3), (2, 29)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 108, 11]]
** centroid: 3, normalized-entropy: 0.444552233571264, [(2, 108), (3, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [68, 43, 0]]
** centroid: 4, normalized-entropy: 0.9630928243932294, [(1, 68), (2, 43)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 6, 0]]
** centroid: 5, normalized-entropy: 0.5830194167347007, [(1, 37), (2, 6)]
*** center 6: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [30, 2, 0]]
** centroid: 7, normalized-entropy: 0.3372900666170139, [(1, 30), (2, 2)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20848817952163518] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20848817952163518, 0.15775234536640345] ***
*** finished computation of 7 references, err: [Inf, 0.20848817952163518, 0.15775234536640345] ***
*** center 1: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [33, 59, 0]]
** centroid: 2, normalized-entropy: 0.9415951533268216, [(1, 33), (2, 59)]
*** center 3: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 96, 10]]
** centroid: 4, normalized-entropy: 0.4507913883546652, [(2, 96), (3, 10)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [52, 11, 0]]
** centroid: 5, normalized-entropy: 0.6681273338436138, [(1, 52), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [55, 8, 0]]
** centroid: 6, normalized-entropy: 0.5491087450260074, [(1, 55), (2, 8)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [30, 15, 0]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(1, 30), (2, 15)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2539086292050779] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2539086292050779, 0.16383334574475886] ***
*** finished computation of 7 references, err: [Inf, 0.2539086292050779, 0.16383334574475886] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [87, 11, 0]]
** centroid: 1, normalized-entropy: 0.5066503344840895, [(1, 87), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [38, 30, 0]]
** centroid: 2, normalized-entropy: 0.9899927915575186, [(1, 38), (2, 30)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 80, 12]]
** centroid: 3, normalized-entropy: 0.5586293734521991, [(2, 80), (3, 12)]
*** center 4: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [66, 1, 0]]
** centroid: 5, normalized-entropy: 0.11190990870168394, [(1, 66), (2, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 49, 0]]
** centroid: 6, normalized-entropy: 0.23868451135100152, [(1, 2), (2, 49)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 18, 0]]
** centroid: 7, normalized-entropy: 0.2974722489192896, [(1, 1), (2, 18)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2155604149457067] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2155604149457067, 0.1643722068113275] ***
*** finished computation of 7 references, err: [Inf, 0.2155604149457067, 0.1643722068113275] ***
*** center 1: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 57, 16]]
** centroid: 2, normalized-entropy: 0.7586638628883696, [(2, 57), (3, 16)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 53, 1]]
** centroid: 3, normalized-entropy: 0.13303964861069897, [(2, 53), (3, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [68, 7, 0]]
** centroid: 4, normalized-entropy: 0.44749925503686355, [(1, 68), (2, 7)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [11, 63, 0]]
** centroid: 5, normalized-entropy: 0.6064481901491525, [(1, 11), (2, 63)]
*** center 6: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [101, 13, 0]]
** centroid: 7, normalized-entropy: 0.5119682940439919, [(1, 101), (2, 13)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21011514221131802] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21011514221131802, 0.16202282589115202] ***
*** finished computation of 7 references, err: [Inf, 0.21011514221131802, 0.16202282589115202] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [68, 24, 0]]
** centroid: 1, normalized-entropy: 0.828055725379504, [(1, 68), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [79, 2, 0]]
** centroid: 2, normalized-entropy: 0.16702680404522793, [(1, 79), (2, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [96, 29, 0]]
** centroid: 4, normalized-entropy: 0.7814814932386424, [(1, 96), (2, 29)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 16, 7]]
** centroid: 5, normalized-entropy: 0.8865408928220899, [(2, 16), (3, 7)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 51, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 70, 3]]
** centroid: 7, normalized-entropy: 0.24729443986205674, [(2, 70), (3, 3)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.269611564675346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.269611564675346, 0.19143467818573118] ***
*** finished computation of 7 references, err: [Inf, 0.269611564675346, 0.19143467818573118] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [59, 23, 0]]
** centroid: 1, normalized-entropy: 0.8561146277685725, [(1, 59), (2, 23)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 50, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [55, 58, 0]]
** centroid: 3, normalized-entropy: 0.9994915114306262, [(1, 55), (2, 58)]
*** center 4: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 20, 4]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(2, 20), (3, 4)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 29, 13]]
** centroid: 6, normalized-entropy: 0.8926230133850988, [(2, 29), (3, 13)]
*** center 7: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.269273507617414] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.269273507617414, 0.19240951766166836] ***
*** finished computation of 7 references, err: [Inf, 0.269273507617414, 0.19240951766166836] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [23, 110, 3]]
** centroid: 1, normalized-entropy: 0.5063608638968372, [(1, 23), (2, 110), (3, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [158, 2, 0]]
** centroid: 2, normalized-entropy: 0.09694460606247329, [(1, 158), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [7, 38, 0]]
** centroid: 3, normalized-entropy: 0.6235702082127973, [(1, 7), (2, 38)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [16, 3, 0]]
** centroid: 4, normalized-entropy: 0.6292492238560344, [(1, 16), (2, 3)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 38, 8]]
** centroid: 5, normalized-entropy: 0.6665783579949205, [(2, 38), (3, 8)]
*** center 6: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19528634135518222] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19528634135518222, 0.1582287269430235] ***
*** finished computation of 7 references, err: [Inf, 0.19528634135518222, 0.1582287269430235] ***
*** center 1: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 69, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [49, 37, 0]]
** centroid: 4, normalized-entropy: 0.985909442028652, [(1, 49), (2, 37)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [61, 6, 0]]
** centroid: 5, normalized-entropy: 0.43497348007474274, [(1, 61), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [77, 14, 0]]
** centroid: 6, normalized-entropy: 0.6193821946787638, [(1, 77), (2, 14)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 63, 11]]
** centroid: 7, normalized-entropy: 0.6064481901491525, [(2, 63), (3, 11)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1923801915431395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1923801915431395, 0.16804915205016732] ***
*** finished computation of 7 references, err: [Inf, 0.1923801915431395, 0.16804915205016732] ***
*** center 1: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 89, 1]]
** centroid: 2, normalized-entropy: 0.08807225904068142, [(2, 89), (3, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [49, 22, 0]]
** centroid: 3, normalized-entropy: 0.893010810044601, [(1, 49), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [78, 11, 0]]
** centroid: 4, normalized-entropy: 0.5396084773004918, [(1, 78), (2, 11)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 57, 13]]
** centroid: 5, normalized-entropy: 0.6924194863274741, [(2, 57), (3, 13)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [19, 15, 0]]
** centroid: 6, normalized-entropy: 0.9899927915575186, [(1, 19), (2, 15)]
*** center 7: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18687957852799444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18687957852799444, 0.16645312207750976] ***
*** finished computation of 7 references, err: [Inf, 0.18687957852799444, 0.16645312207750976] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 65, 15]]
** centroid: 1, normalized-entropy: 0.6962122601251459, [(2, 65), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [52, 68, 0]]
** centroid: 2, normalized-entropy: 0.9871377743721862, [(1, 52), (2, 68)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [17, 63, 0]]
** centroid: 3, normalized-entropy: 0.7462343013654809, [(1, 17), (2, 63)]
*** center 4: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [58, 2, 0]]
** centroid: 5, normalized-entropy: 0.2108423003185322, [(1, 58), (2, 2)]
*** center 6: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [26, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21922217719256878] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21922217719256878, 0.18109290185850113] ***
*** finished computation of 7 references, err: [Inf, 0.21922217719256878, 0.18109290185850113] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [85, 2, 0]]
** centroid: 1, normalized-entropy: 0.15790637433488164, [(1, 85), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [38, 9, 0]]
** centroid: 2, normalized-entropy: 0.7045767128725937, [(1, 38), (2, 9)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [19, 71, 0]]
** centroid: 3, normalized-entropy: 0.7436012269934466, [(1, 19), (2, 71)]
*** center 4: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [35, 106, 9]]
** centroid: 5, normalized-entropy: 0.6860688279603416, [(1, 35), (2, 106), (3, 9)]
*** center 6: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21308816467411817] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21308816467411817, 0.16554428749717773] ***
*** finished computation of 7 references, err: [Inf, 0.21308816467411817, 0.16554428749717773] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [33, 44, 0]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(1, 33), (2, 44)]
*** center 2: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [39, 41, 0]]
** centroid: 3, normalized-entropy: 0.9995491108252483, [(1, 39), (2, 41)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [83, 21, 0]]
** centroid: 4, normalized-entropy: 0.7257576154473545, [(1, 83), (2, 21)]
*** center 5: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 79, 16]]
** centroid: 7, normalized-entropy: 0.6540800387941991, [(2, 79), (3, 16)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2508351050717756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2508351050717756, 0.17812866292707621] ***
*** finished computation of 7 references, err: [Inf, 0.2508351050717756, 0.17812866292707621] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 85, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [116, 39, 0]]
** centroid: 2, normalized-entropy: 0.8138245215940695, [(1, 116), (2, 39)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [72, 35, 0]]
** centroid: 3, normalized-entropy: 0.9119388957757234, [(1, 72), (2, 35)]
*** center 4: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 36, 2]]
** centroid: 6, normalized-entropy: 0.2974722489192896, [(2, 36), (3, 2)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 7, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20181297749001534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20181297749001534, 0.16467304437793792] ***
*** finished computation of 7 references, err: [Inf, 0.20181297749001534, 0.16467304437793792] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [39, 31, 0]]
** centroid: 1, normalized-entropy: 0.9905577004075262, [(1, 39), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [96, 23, 0]]
** centroid: 2, normalized-entropy: 0.7082772165975041, [(1, 96), (2, 23)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 53, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 71, 14]]
** centroid: 5, normalized-entropy: 0.6454495903301855, [(2, 71), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [61, 8, 0]]
** centroid: 7, normalized-entropy: 0.5175827525559071, [(1, 61), (2, 8)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3078679570085369] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3078679570085369, 0.18437118335068226] ***
*** finished computation of 7 references, err: [Inf, 0.3078679570085369, 0.18437118335068226] ***
*** center 1: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 41, 12]]
** centroid: 4, normalized-entropy: 0.7717094696953635, [(2, 41), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [33, 99, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 33), (2, 99)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [59, 28, 0]]
** centroid: 6, normalized-entropy: 0.9063701886077911, [(1, 59), (2, 28)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [31, 19, 0]]
** centroid: 7, normalized-entropy: 0.9580420222262997, [(1, 31), (2, 19)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24059900302812456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24059900302812456, 0.17406204803660513] ***
*** finished computation of 7 references, err: [Inf, 0.24059900302812456, 0.17406204803660513] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [30, 2, 0]]
** centroid: 1, normalized-entropy: 0.3372900666170139, [(1, 30), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 57, 0]]
** centroid: 2, normalized-entropy: 0.9999454550766408, [(1, 58), (2, 57)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [71, 14, 0]]
** centroid: 3, normalized-entropy: 0.6454495903301855, [(1, 71), (2, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 104, 16]]
** centroid: 5, normalized-entropy: 0.5665095065529052, [(2, 104), (3, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [7, 14, 0]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(1, 7), (2, 14)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21521137139573693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21521137139573693, 0.16736411531269552] ***
*** finished computation of 7 references, err: [Inf, 0.21521137139573693, 0.16736411531269552] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 95, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 46, 0]]
** centroid: 2, normalized-entropy: 0.9823817086382354, [(1, 63), (2, 46)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [94, 25, 0]]
** centroid: 3, normalized-entropy: 0.7416433363998257, [(1, 94), (2, 25)]
*** center 4: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 30, 13]]
** centroid: 7, normalized-entropy: 0.8841151220488478, [(2, 30), (3, 13)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20145943115931003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20145943115931003, 0.17205991022009404] ***
*** finished computation of 7 references, err: [Inf, 0.20145943115931003, 0.17205991022009404] ***
*** center 1: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [27, 102, 12]]
** centroid: 2, normalized-entropy: 0.6921784596876417, [(1, 27), (2, 102), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [21, 20, 0]]
** centroid: 3, normalized-entropy: 0.9995708393473225, [(1, 21), (2, 20)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 61, 5]]
** centroid: 4, normalized-entropy: 0.38705142139219795, [(2, 61), (3, 5)]
*** center 5: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [48, 4, 0]]
** centroid: 7, normalized-entropy: 0.3912435636292556, [(1, 48), (2, 4)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2656950929351151] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2656950929351151, 0.1857257687076926] ***
*** finished computation of 7 references, err: [Inf, 0.2656950929351151, 0.1857257687076926] ***
*** center 1: selecting labels [1] (freq >= 1) [from [128, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 28, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 41, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [4, 52, 0]]
** centroid: 4, normalized-entropy: 0.3712323266408756, [(1, 4), (2, 52)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [112, 43, 0]]
** centroid: 5, normalized-entropy: 0.8519106264184835, [(1, 112), (2, 43)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [41, 21, 0]]
** centroid: 6, normalized-entropy: 0.9235785996175947, [(1, 41), (2, 21)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 18, 12]]
** centroid: 7, normalized-entropy: 0.9709505944546688, [(2, 18), (3, 12)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24160012690536678] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24160012690536678, 0.18843218423239888] ***
*** finished computation of 7 references, err: [Inf, 0.24160012690536678, 0.18843218423239888] ***
*** center 1: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [19, 106, 14]]
** centroid: 4, normalized-entropy: 0.6461794131405094, [(1, 19), (2, 106), (3, 14)]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [63, 64, 2]]
** centroid: 5, normalized-entropy: 0.6939233490267324, [(1, 63), (2, 64), (3, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 24, 0]]
** centroid: 6, normalized-entropy: 0.8453509366224364, [(1, 9), (2, 24)]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21964705248363317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21964705248363317, 0.16621058433689176] ***
*** finished computation of 7 references, err: [Inf, 0.21964705248363317, 0.16621058433689176] ***
*** center 1: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 117, 16]]
** centroid: 2, normalized-entropy: 0.5302247498526306, [(2, 117), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [66, 3, 0]]
** centroid: 3, normalized-entropy: 0.2580186686648155, [(1, 66), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [26, 24, 0]]
** centroid: 4, normalized-entropy: 0.998845535995202, [(1, 26), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [51, 47, 0]]
** centroid: 5, normalized-entropy: 0.9987979209581141, [(1, 51), (2, 47)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [50, 1, 0]]
** centroid: 6, normalized-entropy: 0.13923299905509884, [(1, 50), (2, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23992705748975277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23992705748975277, 0.17721614064788446] ***
*** finished computation of 7 references, err: [Inf, 0.23992705748975277, 0.17721614064788446] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [45, 68, 1]]
** centroid: 1, normalized-entropy: 0.6523404049838027, [(1, 45), (2, 68), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [28, 7, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 28), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [10, 59, 0]]
** centroid: 4, normalized-entropy: 0.5969995167604553, [(1, 10), (2, 59)]
*** center 5: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [42, 7, 0]]
** centroid: 6, normalized-entropy: 0.5916727785823274, [(1, 42), (2, 7)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 56, 14]]
** centroid: 7, normalized-entropy: 0.7219280948873623, [(2, 56), (3, 14)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30253017844073476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30253017844073476, 0.18058230204507708] ***
*** finished computation of 7 references, err: [Inf, 0.30253017844073476, 0.18058230204507708] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [102, 22, 0]]
** centroid: 1, normalized-entropy: 0.674398887071447, [(1, 102), (2, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 126, 5]]
** centroid: 3, normalized-entropy: 0.23382826233572301, [(2, 126), (3, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [78, 29, 0]]
** centroid: 4, normalized-entropy: 0.8429359403268015, [(1, 78), (2, 29)]
*** center 5: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 24, 8]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 24), (3, 8)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22986105691548436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22986105691548436, 0.18038933450356126] ***
*** finished computation of 7 references, err: [Inf, 0.22986105691548436, 0.18038933450356126] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [24, 21, 0]]
** centroid: 1, normalized-entropy: 0.9967916319816367, [(1, 24), (2, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [65, 65, 0]]
** centroid: 3, normalized-entropy: 1.0, [(1, 65), (2, 65)]
*** center 4: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 6: selecting labels [1, 2, 3] (freq >= 1) [from [1, 93, 18]]
** centroid: 6, normalized-entropy: 0.4462889037223537, [(1, 1), (2, 93), (3, 18)]
*** center 7: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2514566154517233] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2514566154517233, 0.17931276732496917] ***
*** finished computation of 7 references, err: [Inf, 0.2514566154517233, 0.17931276732496917] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [66, 24, 0]]
** centroid: 1, normalized-entropy: 0.8366407419411671, [(1, 66), (2, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 92, 15]]
** centroid: 3, normalized-entropy: 0.5847281182574745, [(2, 92), (3, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [75, 46, 0]]
** centroid: 4, normalized-entropy: 0.9581586772265479, [(1, 75), (2, 46)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [36, 39, 0]]
** centroid: 5, normalized-entropy: 0.998845535995202, [(1, 36), (2, 39)]
*** center 6: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.32264906019344924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32264906019344924, 0.2213092486076057] ***
*** finished computation of 7 references, err: [Inf, 0.32264906019344924, 0.2213092486076057] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 78, 15]]
** centroid: 1, normalized-entropy: 0.6373874992221911, [(2, 78), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [21, 27, 0]]
** centroid: 2, normalized-entropy: 0.9886994082884974, [(1, 21), (2, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [176, 40, 0]]
** centroid: 3, normalized-entropy: 0.6912898694057888, [(1, 176), (2, 40)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 42, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [10, 19, 0]]
** centroid: 5, normalized-entropy: 0.9293636260137188, [(1, 10), (2, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21585624869074674] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21585624869074674, 0.1655339490007609] ***
*** finished computation of 7 references, err: [Inf, 0.21585624869074674, 0.1655339490007609] ***
*** center 1: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [29, 39, 0]]
** centroid: 4, normalized-entropy: 0.9843432030984676, [(1, 29), (2, 39)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 54, 0]]
** centroid: 5, normalized-entropy: 0.978070970973496, [(1, 38), (2, 54)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 78, 16]]
** centroid: 6, normalized-entropy: 0.6581912658132184, [(2, 78), (3, 16)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [75, 15, 0]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(1, 75), (2, 15)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21525008280575275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21525008280575275, 0.17496963191963733] ***
*** finished computation of 7 references, err: [Inf, 0.21525008280575275, 0.17496963191963733] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [108, 26, 0]]
** centroid: 1, normalized-entropy: 0.709825885194168, [(1, 108), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [112, 2, 0]]
** centroid: 2, normalized-entropy: 0.1274185117923586, [(1, 112), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [15, 27, 0]]
** centroid: 3, normalized-entropy: 0.940285958670631, [(1, 15), (2, 27)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 89, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [6, 24, 0]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(1, 6), (2, 24)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 31, 16]]
** centroid: 7, normalized-entropy: 0.9252253278054431, [(2, 31), (3, 16)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19066588451014832] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19066588451014832, 0.1586262611746788] ***
*** finished computation of 7 references, err: [Inf, 0.19066588451014832, 0.1586262611746788] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [41, 53, 0]]
** centroid: 1, normalized-entropy: 0.988212082728797, [(1, 41), (2, 53)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 63, 12]]
** centroid: 2, normalized-entropy: 0.634309554640566, [(2, 63), (3, 12)]
*** center 3: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [89, 11, 0]]
** centroid: 5, normalized-entropy: 0.49991595816452816, [(1, 89), (2, 11)]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 57, 1]]
** centroid: 7, normalized-entropy: 0.12565805017256745, [(2, 57), (3, 1)]
finished with 8 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 384,3 => 30,1 => 586), Dict(2 => 365,3 => 32,1 => 603))
[ Info: ===== scores for single classifier: {"micro_f1":0.918,"precision":0.918,"recall":0.918,"macro_recall":0.6336203306148103,"macro_f1":0.6176607163138003,"accuracy":0.918,"class_f1":{"2":0.8951406649616368,"3":0.0,"1":0.957841483979764},"class_precision":{"2":0.8393285371702638,"3":0.0,"1":0.9742710120068611},"class_recall":{"2":0.958904109589041,"3":0.0,"1":0.9419568822553898}}
[ Info: ===== scores for 1: {"micro_f1":0.963,"precision":0.963,"recall":0.963,"macro_recall":0.8528898505948188,"macro_f1":0.8991794188936165,"accuracy":0.963,"class_f1":{"2":0.9486823855755896,"3":0.7692307692307693,"1":0.9796251018744906},"class_precision":{"2":0.9606741573033708,"3":1.0,"1":0.9631410256410257},"class_recall":{"2":0.936986301369863,"3":0.625,"1":0.9966832504145937}}
[ Info: ===== scores for 5: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.7892979452054795,"macro_f1":0.8404681362526797,"accuracy":0.967,"class_f1":{"2":0.9551020408163265,"3":0.5777777777777777,"1":0.9885245901639345},"class_precision":{"2":0.9486486486486486,"3":1.0,"1":0.9773095623987034},"class_recall":{"2":0.9616438356164384,"3":0.40625,"1":1.0}}
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ===== scores for 7: {"micro_f1":0.955,"precision":0.955,"recall":0.955,"macro_recall":0.6551549709595099,"macro_f1":0.64313262951507,"accuracy":0.955,"class_f1":{"2":0.9400798934753661,"3":0.0,"1":0.9893179950698439},"class_precision":{"2":0.9145077720207254,"3":0.0,"1":0.9804560260586319},"class_recall":{"2":0.9671232876712329,"3":0.0,"1":0.9983416252072969}}
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ===== scores for 9: {"micro_f1":0.9500000000000001,"precision":0.95,"recall":0.95,"macro_recall":0.6520305625601067,"macro_f1":0.6396199948435363,"accuracy":0.95,"class_f1":{"2":0.9336870026525198,"3":0.0,"1":0.9851729818780889},"class_precision":{"2":0.9048843187660668,"3":0.0,"1":0.9787234042553191},"class_recall":{"2":0.9643835616438357,"3":0.0,"1":0.9917081260364843}}
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ===== scores for 11: {"micro_f1":0.9500000000000001,"precision":0.95,"recall":0.95,"macro_recall":0.6520305625601067,"macro_f1":0.6396199948435363,"accuracy":0.95,"class_f1":{"2":0.9336870026525198,"3":0.0,"1":0.9851729818780889},"class_precision":{"2":0.9048843187660668,"3":0.0,"1":0.9787234042553191},"class_recall":{"2":0.9643835616438357,"3":0.0,"1":0.9917081260364843}}
(score = 0.967, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.963, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.975, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.95, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.95, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.955, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.955, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.975,"k":3,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.975,"precision":0.975,"recall":0.975,"macro_recall":0.8631278538812786,"macro_f1":0.908090912445828,"accuracy":0.975,"class_f1":{"2":0.9657064471879286,"3":0.7692307692307693,"1":0.989335520918786},"class_precision":{"2":0.967032967032967,"3":1.0,"1":0.9788961038961039},"class_recall":{"2":0.9643835616438357,"3":0.625,"1":1.0}}
Test Summary: | Pass  Total
AKNC          |    8      8
[73, 2, 3, 7, 6, 9, 3, 1, 1, 1, 2, 6, 4, 7, 39, 6, 4, 5, 2, 6, 13, 7, 39, 14, 1, 1, 4, 3, 11, 61, 4, 11, 2, 4, 8, 24, 60, 69, 63, 1, 24, 10, 5, 7, 22, 13, 74, 21, 28, 4, 2, 22, 4, 2, 6, 8, 6, 3, 10, 7, 3, 4, 27, 2, 2, 4, 3, 13, 17, 118, 7, 4, 50, 25, 72, 5, 27, 10, 16, 5, 2, 8, 29, 13, 8, 2, 24, 5, 64, 62, 28, 14, 16, 6, 22, 34, 23, 32, 11, 5, 16, 3, 1322, 2, 31, 16, 39, 40, 19, 38, 8, 64, 122, 67, 6, 5, 21, 16, 6, 6, 16, 1, 39, 6, 51, 58, 7, 15, 17, 12, 117, 11, 27, 29, 5, 14, 103, 6, 8, 11, 16, 7, 45, 7, 51, 48, 5, 105, 4, 49, 16, 22, 3, 1, 119, 2, 17, 15, 10, 22, 25, 100, 7, 89, 102, 14, 33, 2, 30, 7, 7, 6, 76, 5, 20, 20, 9, 8, 12, 89, 37, 11, 13, 7, 20, 42, 9, 53, 13, 20, 67, 86, 11, 25, 54, 13, 20, 67, 26, 48, 33, 12, 2, 26, 15, 160, 40, 7, 8, 11, 31, 39, 49, 18, 6, 22, 34, 14, 33, 3, 5, 2, 2, 7, 1, 27, 37, 4, 16, 4, 30, 24, 2, 3, 5, 16, 297, 16, 76, 7, 18, 106, 9, 1, 22, 13, 22, 20, 22, 39, 35, 6, 22, 183, 85, 45, 118, 105, 9, 65, 166, 139, 6, 27, 26, 26, 5, 15, 24, 43, 49, 13, 38, 98, 4, 11, 2, 255, 3, 85, 6, 14, 13, 65, 58, 17, 16, 47, 12, 98, 3, 214, 182, 13, 4, 27, 54, 48, 21, 10]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6439999999999999, speedup = 0.31967571928040417, eval_ratio = 0.085352)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.39151475694444443,"recall":0.38541666666666663,"f1":null,"seconds":0.00016610883176326752,"exhaustive_search_seconds":0.000371687114238739,"evaluations":499.6953125,"distances_sum":1769.7738924889095}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5512152777777779,"recall":0.5512152777777779,"f1":null,"seconds":0.00023546814918518066,"exhaustive_search_seconds":0.000371687114238739,"evaluations":649.8671875,"distances_sum":1689.1787948231542}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6571180555555555,"recall":0.6571180555555555,"f1":0.6571180555555555,"seconds":0.00045961514115333557,"exhaustive_search_seconds":0.000371687114238739,"evaluations":830.21875,"distances_sum":1631.9818039847182}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7161458333333331,"recall":0.7161458333333331,"f1":0.7161458333333331,"seconds":0.0003562048077583313,"exhaustive_search_seconds":0.000371687114238739,"evaluations":931.15625,"distances_sum":1606.9463915076656}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7812499999999993,"recall":0.7812499999999993,"f1":0.7812499999999993,"seconds":0.0004677101969718933,"exhaustive_search_seconds":0.000371687114238739,"evaluations":1080.4765625,"distances_sum":1587.9228272326313}
KCenters.DeloneInvIndex> reached performance {"precision":0.8289930555555549,"recall":0.8289930555555549,"f1":0.8289930555555549,"seconds":0.0006719157099723816,"exhaustive_search_seconds":0.000371687114238739,"evaluations":1212.1640625,"distances_sum":1575.8102270244858}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8319999999999997, speedup = 0.44889528344683377, eval_ratio = 0.12493499999999999)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
