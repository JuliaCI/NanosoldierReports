Julia Version 1.6.0-DEV.212
Commit abc7f755ce (2020-06-11 14:44 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed PooledArrays ──────────────── v0.5.3
  Installed TableTraits ───────────────── v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Tables ────────────────────── v1.0.4
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed StatsBase ─────────────────── v0.32.2
  Installed DataFrames ────────────────── v0.20.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed Missings ──────────────────── v0.4.3
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed DataValueInterfaces ───────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.5
  Installed CategoricalArrays ─────────── v0.7.7
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataStructures ────────────── v0.17.17
  Installed LearnBase ─────────────────── v0.2.2
  Installed InvertedIndices ───────────── v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed Compat ────────────────────── v3.11.0
  Installed OrderedCollections ────────── v1.2.0
  Installed JSON ──────────────────────── v0.21.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed MLDataPattern ─────────────── v0.5.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.11.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.5
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_AEBTZW/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_AEBTZW/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.11.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.5
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9360659371813138
[ Info: 0.8321307849884033
[ Info: 0.5561528046429157
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33568480861683686
mean(cdnet.distances) = 0.3343396840244532
mean(crand.distances) = 0.33225891542931396
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8457556332556342,"seconds":6.143003702163696e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.1015625,"distances_sum":2089.131724215251}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3505859375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3505859375,"f1":null,"seconds":4.949048161506653e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":5.5859375,"distances_sum":961.2673605389463}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.74609375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.74609375,"f1":0.8457556332556342,"seconds":6.143003702163696e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.1015625,"distances_sum":2089.131724215251}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.943778617216118,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.703125,"distances_sum":2732.400257986764}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9063108766233772,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.7890625,"distances_sum":2436.2153374987056}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.907420704295705,"seconds":5.392357707023621e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.8125,"distances_sum":2449.6635918486973}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.900390625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.943778617216118,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.703125,"distances_sum":2732.400257986764}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.952913232600733,"seconds":6.761401891708374e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.8671875,"distances_sum":2772.136230456824}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9619448260073266,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.921875,"distances_sum":2817.4434168589733}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9462511446886451,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.828125,"distances_sum":2736.951017611518}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9619448260073266,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.921875,"distances_sum":2817.4434168589733}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9619448260073266,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.921875,"distances_sum":2817.4434168589733}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8485498876123885,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.21875,"distances_sum":1968.932555338786}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.13671875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.13671875,"f1":null,"seconds":3.9245933294296265e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":4.171875,"distances_sum":384.00899244213434}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3447265625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3447265625,"f1":null,"seconds":3.725290298461914e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":5.2109375,"distances_sum":948.4642635285653}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7529296875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7529296875,"f1":0.8485498876123885,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.21875,"distances_sum":1968.932555338786}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9579097985347991,"seconds":9.669922292232513e-5,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.859375,"distances_sum":2551.199499711754}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9307978479853486,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.625,"distances_sum":2450.0807434196386}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8582447066822074,"seconds":5.0049275159835815e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.21875,"distances_sum":1997.074432801682}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9579097985347991,"seconds":9.669922292232513e-5,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.859375,"distances_sum":2551.199499711754}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9796703296703301,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9296875,"distances_sum":2715.768997901109}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9796703296703301,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9296875,"distances_sum":2715.768997901109}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9796703296703301,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.9296875,"distances_sum":2715.768997901109}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.181640625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.181640625,"f1":null,"seconds":2.9671937227249146e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":5.21875,"distances_sum":471.3555134588159}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.72265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.72265625,"f1":0.8281328046953055,"seconds":5.768612027168274e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.09375,"distances_sum":1764.0277524825383}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.72265625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.72265625,"f1":0.8281328046953055,"seconds":5.768612027168274e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.09375,"distances_sum":1764.0277524825383}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8788784132534141,"seconds":5.3104013204574585e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.40625,"distances_sum":2026.6346294058637}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9269725066600071,"seconds":5.751848220825195e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.8203125,"distances_sum":2267.024391128773}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.876953125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.876953125,"f1":0.9269725066600071,"seconds":5.751848220825195e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.8203125,"distances_sum":2267.024391128773}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9534855769230774,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.8203125,"distances_sum":2446.2742269480755}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9445741758241765,"seconds":6.185844540596008e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.7890625,"distances_sum":2409.1819525362657}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9528216575091579,"seconds":5.923211574554443e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.8671875,"distances_sum":2437.3104090843894}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9323462995338001,"seconds":5.81890344619751e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.7265625,"distances_sum":2330.2347831993447}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9448775183150188,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.796875,"distances_sum":2396.564967637366}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9452838827838831,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.8046875,"distances_sum":2399.0054620963742}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9528216575091579,"seconds":5.923211574554443e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.8671875,"distances_sum":2437.3104090843894}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9189453125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9528216575091579,"seconds":5.923211574554443e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.8671875,"distances_sum":2437.3104090843894}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2236328125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2236328125,"f1":null,"seconds":3.6619603633880615e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":6.5,"distances_sum":545.7353208175482}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2236328125,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.2236328125,"f1":null,"seconds":3.6619603633880615e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":6.5,"distances_sum":545.7353208175482}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.228515625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.228515625,"f1":null,"seconds":3.509223461151123e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":6.4921875,"distances_sum":577.0106672591468}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.8025504009879018,"seconds":5.019828677177429e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.8984375,"distances_sum":1631.5879380666274}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6123046875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.6123046875,"f1":0.7447026931401939,"seconds":4.513189196586609e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.328125,"distances_sum":1454.1454650015146}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6884765625,"state":{"ssize":7,"bsize":4},"perf":{"precision":1.0,"recall":0.6884765625,"f1":0.8025504009879018,"seconds":5.019828677177429e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.8984375,"distances_sum":1631.5879380666274}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6962890625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6962890625,"f1":0.8104577713952722,"seconds":4.937872290611267e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.8515625,"distances_sum":1672.8124746959365}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.9121227730602738,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.625,"distances_sum":2179.144931743646}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9071428571428578,"seconds":5.898997187614441e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.609375,"distances_sum":2154.119365494976}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.87536473942724,"seconds":5.370005965232849e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.4375,"distances_sum":1998.216227605693}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8597761613386622,"seconds":5.368143320083618e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.390625,"distances_sum":1859.9262080883077}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8486328125,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.8486328125,"f1":0.9121227730602738,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.625,"distances_sum":2179.144931743646}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8486328125,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.8486328125,"f1":0.9121227730602738,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.625,"distances_sum":2179.144931743646}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3154296875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3154296875,"f1":null,"seconds":3.509223461151123e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":5.09375,"distances_sum":848.2059761836902}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.15234375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.15234375,"f1":null,"seconds":2.7641654014587402e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":4.2734375,"distances_sum":406.6986054618699}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3056640625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3056640625,"f1":null,"seconds":3.980472683906555e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":5.0390625,"distances_sum":822.5464013407872}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3154296875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3154296875,"f1":null,"seconds":3.509223461151123e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":5.09375,"distances_sum":848.2059761836902}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4423828125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.4423828125,"f1":0.5976481851481853,"seconds":4.583969712257385e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.1171875,"distances_sum":1154.5962486766875}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6396484375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6396484375,"f1":0.7652831543456549,"seconds":4.8074871301651e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.34375,"distances_sum":1678.588135969488}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.46484375, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.46484375,"f1":null,"seconds":4.325062036514282e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.1484375,"distances_sum":1258.7798324670644}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.62890625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.62890625,"f1":0.7570948149073157,"seconds":4.857778549194336e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.3828125,"distances_sum":1635.9881581047764}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6396484375,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6396484375,"f1":0.7652831543456549,"seconds":4.8074871301651e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.34375,"distances_sum":1678.588135969488}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8376429126429134,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.0234375,"distances_sum":1972.269257655481}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8940023518148525,"seconds":5.943700671195984e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.5078125,"distances_sum":2236.7330033315457}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8972074800199809,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.5390625,"distances_sum":2255.299586583495}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7392578125,"f1":0.8383552211677221,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.1484375,"distances_sum":1975.9802309488737}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8836403180153186,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.4765625,"distances_sum":2180.583722213436}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.826171875,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.826171875,"f1":0.8972074800199809,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.5390625,"distances_sum":2255.299586583495}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.826171875,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.826171875,"f1":0.8972074800199809,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.5390625,"distances_sum":2255.299586583495}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.35546875, conf: {"ssize":2,"bsize":2}, perf: {"precision":1.0,"recall":0.35546875,"f1":0.5017947330447327,"seconds":3.7439167499542236e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":5.1875,"distances_sum":829.2565185246001}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6953125,"f1":0.8047887876012884,"seconds":4.9658119678497314e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.59375,"distances_sum":1569.942694747362}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.193359375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.193359375,"f1":null,"seconds":3.207474946975708e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":4.7734375,"distances_sum":531.5095989915444}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6953125,"f1":0.8047887876012884,"seconds":4.9658119678497314e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.59375,"distances_sum":1569.942694747362}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8550871003996013,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.0546875,"distances_sum":1789.316691313873}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9257726648351655,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.4921875,"distances_sum":2224.9471175765175}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8504563145188151,"seconds":5.584210157394409e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.1328125,"distances_sum":1725.1766906778373}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8651281010656019,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.203125,"distances_sum":1783.5925692357998}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8701171875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8701171875,"f1":0.9257726648351655,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.4921875,"distances_sum":2224.9471175765175}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.956235951548452,"seconds":6.064772605895996e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7578125,"distances_sum":2427.904917556751}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9400984432234438,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.65625,"distances_sum":2346.874005260639}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9344379578754589,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.703125,"distances_sum":2297.3749672750446}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":8,"bsize":8},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.956235951548452,"seconds":6.064772605895996e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7578125,"distances_sum":2427.904917556751}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9228515625,"state":{"ssize":8,"bsize":8},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.956235951548452,"seconds":6.064772605895996e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7578125,"distances_sum":2427.904917556751}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.23828125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.23828125,"f1":null,"seconds":3.475695848464966e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":5.5390625,"distances_sum":610.4499652484667}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.23828125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.23828125,"f1":null,"seconds":3.475695848464966e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":5.5390625,"distances_sum":610.4499652484667}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1943359375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1943359375,"f1":null,"seconds":3.974884748458862e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":6.3203125,"distances_sum":511.81664608491997}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1943359375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.1943359375,"f1":null,"seconds":3.974884748458862e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":6.3203125,"distances_sum":511.81664608491997}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1943359375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.1943359375,"f1":null,"seconds":3.974884748458862e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":6.3203125,"distances_sum":511.81664608491997}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.712890625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.712890625,"f1":0.8209221334221344,"seconds":4.7441571950912476e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.578125,"distances_sum":1604.5033177191967}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7001953125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.7001953125,"f1":0.8113277347652356,"seconds":4.610046744346619e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.625,"distances_sum":1546.0033251353966}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2080078125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2080078125,"f1":null,"seconds":3.257766366004944e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":6.6328125,"distances_sum":451.35373680195863}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.712890625,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.712890625,"f1":0.8209221334221344,"seconds":4.7441571950912476e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.578125,"distances_sum":1604.5033177191967}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8772670038295047,"seconds":4.7888606786727905e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.7734375,"distances_sum":1882.1871873171815}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.951774267399268,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.78125,"distances_sum":2413.0966964484373}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.951774267399268,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.78125,"distances_sum":2413.0966964484373}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9537087912087916,"seconds":5.6996941566467285e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8125,"distances_sum":2405.224832938627}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9537087912087916,"seconds":5.6996941566467285e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8125,"distances_sum":2405.224832938627}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9537087912087916,"seconds":5.6996941566467285e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8125,"distances_sum":2405.224832938627}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8575688200688208,"seconds":5.014240741729736e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.1953125,"distances_sum":1858.5742174185825}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8575688200688208,"seconds":5.014240741729736e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.1953125,"distances_sum":1858.5742174185825}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9526473526473535,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.796875,"distances_sum":2389.5611772365733}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9526473526473535,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.796875,"distances_sum":2389.5611772365733}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9651785714285721,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.90625,"distances_sum":2443.006047702884}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9618303571428576,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.890625,"distances_sum":2433.931288831146}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9651785714285721,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.90625,"distances_sum":2443.006047702884}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9651785714285721,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.90625,"distances_sum":2443.006047702884}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.580078125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.580078125,"f1":0.7139964202464207,"seconds":4.606321454048157e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.328125,"distances_sum":1282.727293686173}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.580078125,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.580078125,"f1":0.7139964202464207,"seconds":4.606321454048157e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.328125,"distances_sum":1282.727293686173}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8897753288378297,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.40625,"distances_sum":1984.8543277767867}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.72265625, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.72265625,"f1":0.8301693098568107,"seconds":5.044043064117432e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.796875,"distances_sum":1609.8527467086326}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.693359375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.693359375,"f1":0.8036890193140199,"seconds":4.367902874946594e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.625,"distances_sum":1549.516833841117}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":6,"bsize":4}, perf: {"precision":null,"recall":0.6884765625,"f1":null,"seconds":4.7869980335235596e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.7109375,"distances_sum":1531.0966122747213}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8125,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.8125,"f1":0.8897753288378297,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.40625,"distances_sum":1984.8543277767867}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9518830128205132,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7890625,"distances_sum":2400.4357942659403}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.94753891941392,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.71875,"distances_sum":2354.078025807285}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.9027649433899441,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.4296875,"distances_sum":2070.0470612060617}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8951980311355319,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.4765625,"distances_sum":2000.4401917640448}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9304658882783889,"seconds":5.76116144657135e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.640625,"distances_sum":2252.7728288810085}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8936110764235771,"seconds":5.414709448814392e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.4140625,"distances_sum":2034.900171088495}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9360436438561444,"seconds":5.492940545082092e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.703125,"distances_sum":2269.758910007705}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9302431943056948,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6328125,"distances_sum":2256.100227905149}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9405219780219786,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.71875,"distances_sum":2323.265990120977}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":8,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9518830128205132,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7890625,"distances_sum":2400.4357942659403}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9140625,"state":{"ssize":8,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9518830128205132,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7890625,"distances_sum":2400.4357942659403}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8469478438228446,"seconds":5.055218935012817e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.125,"distances_sum":1702.037263130717}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5537109375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5537109375,"f1":null,"seconds":4.291534423828125e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.2890625,"distances_sum":1168.4172049122465}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.533203125, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.533203125,"f1":null,"seconds":4.215165972709656e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.1953125,"distances_sum":1070.7146488136314}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6953125,"f1":0.8120171495171504,"seconds":4.7907233238220215e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.7578125,"distances_sum":1505.6765342924816}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8469478438228446,"seconds":5.055218935012817e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.125,"distances_sum":1702.037263130717}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9585424991674997,"seconds":5.966052412986755e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.859375,"distances_sum":2372.7941195585654}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9613896520146527,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8515625,"distances_sum":2368.739397475354}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9275011446886454,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.65625,"distances_sum":2150.7113483035264}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9546359890109894,"seconds":5.321577191352844e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.78125,"distances_sum":2364.66243673708}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9601419413919419,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8125,"distances_sum":2386.7181356191013}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9349587912087916,"seconds":5.4836273193359375e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7578125,"distances_sum":2210.319080181922}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9239042207792214,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.6640625,"distances_sum":2165.1110509356336}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8928404928404935,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.4609375,"distances_sum":1926.5031537512075}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9091861263736272,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.59375,"distances_sum":2015.7087437981465}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9613896520146527,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8515625,"distances_sum":2368.739397475354}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9679716117216123,"seconds":6.15045428276062e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.90625,"distances_sum":2422.676873479903}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9694081959706964,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9296875,"distances_sum":2423.2703211678936}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9775390625, conf: {"ssize":2,"bsize":13}, perf: {"precision":1.0,"recall":0.9775390625,"f1":0.9877060439560441,"seconds":5.7462602853775024e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.96875,"distances_sum":2563.1498049275965}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9775390625,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.9775390625,"f1":0.9877060439560441,"seconds":5.7462602853775024e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.96875,"distances_sum":2563.1498049275965}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9775390625,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.9775390625,"f1":0.9877060439560441,"seconds":5.7462602853775024e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.96875,"distances_sum":2563.1498049275965}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6962890625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6962890625,"f1":0.8104976620601629,"seconds":4.887580871582031e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.5390625,"distances_sum":1511.3277049566614}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6962890625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6962890625,"f1":0.8104976620601629,"seconds":4.887580871582031e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.5390625,"distances_sum":1511.3277049566614}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.8762050449550459,"seconds":5.073845386505127e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.8984375,"distances_sum":1836.1037265474324}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7900390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7900390625,"f1":0.8762050449550459,"seconds":5.073845386505127e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.8984375,"distances_sum":1836.1037265474324}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9512706043956048,"seconds":5.953013896942139e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.8046875,"distances_sum":2348.5909479972684}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9034746503496508,"seconds":5.535781383514404e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.5078125,"distances_sum":2043.8675330325761}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7998046875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7998046875,"f1":0.8815856018981028,"seconds":5.345791578292847e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.8984375,"distances_sum":1900.6960779177512}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9376201923076928,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.7265625,"distances_sum":2248.978879572032}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9512706043956048,"seconds":5.953013896942139e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.8046875,"distances_sum":2348.5909479972684}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9140625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9512706043956048,"seconds":5.953013896942139e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.8046875,"distances_sum":2348.5909479972684}}, n: 9
mean(cfft.distances) = 0.3397851210051014
mean(cdnet.distances) = 1.2676601645712677
mean(crand.distances) = 0.3459135447145697
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8822222222222221
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8644444444444445
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8755555555555555
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8933333333333332
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9444444444444443
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8777777777777778
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9022222222222224
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9022222222222224
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8822222222222221
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9133333333333334
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9266666666666667
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.928888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8733333333333334
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.88
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8777777777777778
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.88
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9266666666666667
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8711111111111111
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8822222222222221
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8444444444444444
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.851111111111111
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8888888888888888
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8644444444444445
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5970669626196226] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 3: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 5: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 28, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 8: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 9, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 11]]
** centroid: 12, normalized-entropy: 0.4138168503036336, [(2, 1), (3, 11)]
finished with 14 centroids; started with 12
acc = 0.98
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.5030802410870634] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5030802410870634, 0.3588234284506725] ***
*** starting iteration: 2; err: [Inf, 0.5030802410870634, 0.3588234284506725] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5030802410870634, 0.3588234284506725, 0.34635221858595583] ***
*** starting iteration: 3; err: [Inf, 0.5030802410870634, 0.3588234284506725, 0.34635221858595583] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5030802410870634, 0.3588234284506725, 0.34635221858595583, 0.33562476891051] ***
*** finished computation of 3 references, err: [Inf, 0.5030802410870634, 0.3588234284506725, 0.34635221858595583, 0.33562476891051] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [224, 50, 0]]
** centroid: 1, normalized-entropy: 0.6854761996406745, [(1, 224), (2, 50)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 153, 26]]
** centroid: 2, normalized-entropy: 0.5978282208193174, [(2, 153), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [163, 50, 0]]
** centroid: 3, normalized-entropy: 0.7861861524868624, [(1, 163), (2, 50)]
finished with 5 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3318053701420551] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3318053701420551, 0.30783039513651445] ***
*** starting iteration: 2; err: [Inf, 0.3318053701420551, 0.30783039513651445] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3318053701420551, 0.30783039513651445, 0.30134376615489733] ***
*** starting iteration: 3; err: [Inf, 0.3318053701420551, 0.30783039513651445, 0.30134376615489733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3318053701420551, 0.30783039513651445, 0.30134376615489733, 0.29965303281693534] ***
*** finished computation of 3 references, err: [Inf, 0.3318053701420551, 0.30783039513651445, 0.30134376615489733, 0.29965303281693534] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [128, 87, 0]]
** centroid: 1, normalized-entropy: 0.9736064117343936, [(1, 128), (2, 87)]
*** center 2: selecting labels [1] (freq >= 1) [from [215, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [59, 151, 27]]
** centroid: 3, normalized-entropy: 0.8017736360292139, [(1, 59), (2, 151), (3, 27)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.567589565805778] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.567589565805778, 0.3349299926067824] ***
*** starting iteration: 2; err: [Inf, 0.567589565805778, 0.3349299926067824] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.567589565805778, 0.3349299926067824, 0.3029716042620221] ***
*** starting iteration: 3; err: [Inf, 0.567589565805778, 0.3349299926067824, 0.3029716042620221] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.567589565805778, 0.3349299926067824, 0.3029716042620221, 0.2956181249066048] ***
*** finished computation of 3 references, err: [Inf, 0.567589565805778, 0.3349299926067824, 0.3029716042620221, 0.2956181249066048] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [222, 15, 0]]
** centroid: 1, normalized-entropy: 0.340373285759646, [(1, 222), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [173, 34, 0]]
** centroid: 2, normalized-entropy: 0.6443834793173693, [(1, 173), (2, 34)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 196, 27]]
** centroid: 3, normalized-entropy: 0.5324465725436479, [(2, 196), (3, 27)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23123438337558078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23123438337558078, 0.196748416502213] ***
*** finished computation of 7 references, err: [Inf, 0.23123438337558078, 0.196748416502213] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [1, 115, 4]]
** centroid: 1, normalized-entropy: 0.17663675323092892, [(1, 1), (2, 115), (3, 4)]
*** center 2: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [62, 17, 0]]
** centroid: 3, normalized-entropy: 0.751286576718343, [(1, 62), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [57, 19, 0]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(1, 57), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [116, 2, 0]]
** centroid: 5, normalized-entropy: 0.12394986771100755, [(1, 116), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [90, 6, 0]]
** centroid: 6, normalized-entropy: 0.3372900666170139, [(1, 90), (2, 6)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 79, 23]]
** centroid: 7, normalized-entropy: 0.7700664782920602, [(2, 79), (3, 23)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24062723250196746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24062723250196746, 0.19564621925432196] ***
*** finished computation of 7 references, err: [Inf, 0.24062723250196746, 0.19564621925432196] ***
*** center 1: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [77, 6, 0]]
** centroid: 2, normalized-entropy: 0.3744088453489206, [(1, 77), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 55, 27]]
** centroid: 3, normalized-entropy: 0.9141770436147919, [(2, 55), (3, 27)]
*** center 4: selecting labels [1] (freq >= 1) [from [140, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [54, 42, 0]]
** centroid: 5, normalized-entropy: 0.9886994082884974, [(1, 54), (2, 42)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [38, 59, 0]]
** centroid: 6, normalized-entropy: 0.9659212398860464, [(1, 38), (2, 59)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 83, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.36564233506450783] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36564233506450783, 0.23947892631278248] ***
*** starting iteration: 2; err: [Inf, 0.36564233506450783, 0.23947892631278248] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36564233506450783, 0.23947892631278248, 0.23753100987272086] ***
*** starting iteration: 3; err: [Inf, 0.36564233506450783, 0.23947892631278248, 0.23753100987272086] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36564233506450783, 0.23947892631278248, 0.23753100987272086, 0.23732208914868813] ***
*** finished computation of 3 references, err: [Inf, 0.36564233506450783, 0.23947892631278248, 0.23753100987272086, 0.23732208914868813] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [202, 28, 0]]
** centroid: 1, normalized-entropy: 0.5343393668857862, [(1, 202), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [185, 38, 0]]
** centroid: 2, normalized-entropy: 0.6586271837482239, [(1, 185), (2, 38)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 187, 26]]
** centroid: 3, normalized-entropy: 0.5352697297532726, [(2, 187), (3, 26)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3245525831074595] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3245525831074595, 0.23733244704939926] ***
*** starting iteration: 2; err: [Inf, 0.3245525831074595, 0.23733244704939926] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3245525831074595, 0.23733244704939926, 0.23332294006098894] ***
*** starting iteration: 3; err: [Inf, 0.3245525831074595, 0.23733244704939926, 0.23332294006098894] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3245525831074595, 0.23733244704939926, 0.23332294006098894, 0.23240803232810264] ***
*** finished computation of 3 references, err: [Inf, 0.3245525831074595, 0.23733244704939926, 0.23332294006098894, 0.23240803232810264] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [260, 17, 0]]
** centroid: 1, normalized-entropy: 0.3328667159096434, [(1, 260), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [142, 58, 0]]
** centroid: 2, normalized-entropy: 0.8687212463394044, [(1, 142), (2, 58)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 163, 27]]
** centroid: 3, normalized-entropy: 0.589725862551583, [(2, 163), (3, 27)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31669306055526775] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31669306055526775, 0.24736887727050053] ***
*** starting iteration: 2; err: [Inf, 0.31669306055526775, 0.24736887727050053] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31669306055526775, 0.24736887727050053, 0.24048062208537263] ***
*** starting iteration: 3; err: [Inf, 0.31669306055526775, 0.24736887727050053, 0.24048062208537263] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31669306055526775, 0.24736887727050053, 0.24048062208537263, 0.23880192497116828] ***
*** finished computation of 3 references, err: [Inf, 0.31669306055526775, 0.24736887727050053, 0.24048062208537263, 0.23880192497116828] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [241, 34, 0]]
** centroid: 1, normalized-entropy: 0.5397239297431772, [(1, 241), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [154, 37, 0]]
** centroid: 2, normalized-entropy: 0.7091832688981259, [(1, 154), (2, 37)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 174, 27]]
** centroid: 3, normalized-entropy: 0.569190343735683, [(2, 174), (3, 27)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.42711945023533104] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42711945023533104, 0.2983437568626112] ***
*** starting iteration: 2; err: [Inf, 0.42711945023533104, 0.2983437568626112] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42711945023533104, 0.2983437568626112, 0.29706216794816226] ***
*** starting iteration: 3; err: [Inf, 0.42711945023533104, 0.2983437568626112, 0.29706216794816226] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42711945023533104, 0.2983437568626112, 0.29706216794816226, 0.297021105751261] ***
*** finished computation of 3 references, err: [Inf, 0.42711945023533104, 0.2983437568626112, 0.29706216794816226, 0.297021105751261] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [251, 19, 0]]
** centroid: 1, normalized-entropy: 0.36730428298760165, [(1, 251), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [136, 49, 0]]
** centroid: 2, normalized-entropy: 0.8339991428314941, [(1, 136), (2, 49)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 185, 26]]
** centroid: 3, normalized-entropy: 0.5385541514219426, [(2, 185), (3, 26)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3880385594914431] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3880385594914431, 0.3200040979539861] ***
*** starting iteration: 2; err: [Inf, 0.3880385594914431, 0.3200040979539861] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3880385594914431, 0.3200040979539861, 0.3062354684493196] ***
*** starting iteration: 3; err: [Inf, 0.3880385594914431, 0.3200040979539861, 0.3062354684493196] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3880385594914431, 0.3200040979539861, 0.3062354684493196, 0.30213612240545085] ***
*** starting iteration: 4; err: [Inf, 0.3880385594914431, 0.3200040979539861, 0.3062354684493196, 0.30213612240545085] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3880385594914431, 0.3200040979539861, 0.3062354684493196, 0.30213612240545085, 0.3014288714415264] ***
*** finished computation of 3 references, err: [Inf, 0.3880385594914431, 0.3200040979539861, 0.3062354684493196, 0.30213612240545085, 0.3014288714415264] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [241, 12, 0]]
** centroid: 1, normalized-entropy: 0.275381400622869, [(1, 241), (2, 12)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 174, 27]]
** centroid: 2, normalized-entropy: 0.38575603812213666, [(1, 1), (2, 174), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [160, 52, 0]]
** centroid: 3, normalized-entropy: 0.8037159237834126, [(1, 160), (2, 52)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3840730689351504] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3840730689351504, 0.30143533848404797] ***
*** starting iteration: 2; err: [Inf, 0.3840730689351504, 0.30143533848404797] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3840730689351504, 0.30143533848404797, 0.2917208352672129] ***
*** starting iteration: 3; err: [Inf, 0.3840730689351504, 0.30143533848404797, 0.2917208352672129] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3840730689351504, 0.30143533848404797, 0.2917208352672129, 0.29039001730556924] ***
*** starting iteration: 4; err: [Inf, 0.3840730689351504, 0.30143533848404797, 0.2917208352672129, 0.29039001730556924] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3840730689351504, 0.30143533848404797, 0.2917208352672129, 0.29039001730556924, 0.2901298437167009] ***
*** finished computation of 3 references, err: [Inf, 0.3840730689351504, 0.30143533848404797, 0.2917208352672129, 0.29039001730556924, 0.2901298437167009] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [59, 171, 27]]
** centroid: 1, normalized-entropy: 0.7697215988310318, [(1, 59), (2, 171), (3, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [209, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [127, 74, 0]]
** centroid: 3, normalized-entropy: 0.9492481873152105, [(1, 127), (2, 74)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23999127152854124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23999127152854124, 0.16306132884617816] ***
*** finished computation of 7 references, err: [Inf, 0.23999127152854124, 0.16306132884617816] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [70, 8, 0]]
** centroid: 1, normalized-entropy: 0.4770713062193298, [(1, 70), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [164, 18, 0]]
** centroid: 2, normalized-entropy: 0.4655024490815131, [(1, 164), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 87, 25]]
** centroid: 3, normalized-entropy: 0.765993414171823, [(2, 87), (3, 25)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [6, 71, 0]]
** centroid: 4, normalized-entropy: 0.39481484603049416, [(1, 6), (2, 71)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [36, 19, 0]]
** centroid: 5, normalized-entropy: 0.9299429352091801, [(1, 36), (2, 19)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 50, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2048924053129719] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2048924053129719, 0.1598557538794133] ***
*** finished computation of 7 references, err: [Inf, 0.2048924053129719, 0.1598557538794133] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 61, 5]]
** centroid: 1, normalized-entropy: 0.38705142139219795, [(2, 61), (3, 5)]
*** center 2: selecting labels [1] (freq >= 2) [from [138, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 35, 22]]
** centroid: 3, normalized-entropy: 0.9621461334087003, [(2, 35), (3, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 62, 0]]
** centroid: 4, normalized-entropy: 0.9992954443621548, [(1, 66), (2, 62)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 42, 0]]
** centroid: 5, normalized-entropy: 0.9999001572094882, [(1, 43), (2, 42)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [75, 38, 0]]
** centroid: 6, normalized-entropy: 0.9212174819014947, [(1, 75), (2, 38)]
*** center 7: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24576278572491575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24576278572491575, 0.1708813370449812] ***
*** finished computation of 7 references, err: [Inf, 0.24576278572491575, 0.1708813370449812] ***
*** center 1: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [39, 42, 0]]
** centroid: 2, normalized-entropy: 0.9990102708804813, [(1, 39), (2, 42)]
*** center 3: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 125, 0]]
** centroid: 4, normalized-entropy: 0.9300306737927182, [(1, 66), (2, 125)]
*** center 5: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 78, 27]]
** centroid: 6, normalized-entropy: 0.8224042259549892, [(2, 78), (3, 27)]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.17214956323409247] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17214956323409247, 0.15375664774831888] ***
*** starting iteration: 2; err: [Inf, 0.17214956323409247, 0.15375664774831888] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17214956323409247, 0.15375664774831888, 0.15078223976949873] ***
*** starting iteration: 3; err: [Inf, 0.17214956323409247, 0.15375664774831888, 0.15078223976949873] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17214956323409247, 0.15375664774831888, 0.15078223976949873, 0.14995455418786108] ***
*** finished computation of 7 references, err: [Inf, 0.17214956323409247, 0.15375664774831888, 0.15078223976949873, 0.14995455418786108] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 73, 26]]
** centroid: 1, normalized-entropy: 0.8306836355350677, [(2, 73), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [14, 91, 0]]
** centroid: 3, normalized-entropy: 0.5665095065529052, [(1, 14), (2, 91)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [21, 68, 0]]
** centroid: 4, normalized-entropy: 0.7882487221644084, [(1, 21), (2, 68)]
*** center 5: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [85, 21, 0]]
** centroid: 7, normalized-entropy: 0.7181384220154764, [(1, 85), (2, 21)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21957551111010598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21957551111010598, 0.16433191130348276] ***
*** starting iteration: 2; err: [Inf, 0.21957551111010598, 0.16433191130348276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21957551111010598, 0.16433191130348276, 0.1548546543065598] ***
*** starting iteration: 3; err: [Inf, 0.21957551111010598, 0.16433191130348276, 0.1548546543065598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21957551111010598, 0.16433191130348276, 0.1548546543065598, 0.15051596078217433] ***
*** starting iteration: 4; err: [Inf, 0.21957551111010598, 0.16433191130348276, 0.1548546543065598, 0.15051596078217433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21957551111010598, 0.16433191130348276, 0.1548546543065598, 0.15051596078217433, 0.14875067245198423] ***
*** starting iteration: 5; err: [Inf, 0.21957551111010598, 0.16433191130348276, 0.1548546543065598, 0.15051596078217433, 0.14875067245198423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21957551111010598, 0.16433191130348276, 0.1548546543065598, 0.15051596078217433, 0.14875067245198423, 0.14777460624498764] ***
*** finished computation of 7 references, err: [Inf, 0.21957551111010598, 0.16433191130348276, 0.1548546543065598, 0.15051596078217433, 0.14875067245198423, 0.14777460624498764] ***
*** center 1: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [20, 68, 0]]
** centroid: 2, normalized-entropy: 0.7732266742876346, [(1, 20), (2, 68)]
*** center 3: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [11, 56, 0]]
** centroid: 4, normalized-entropy: 0.6442142137378306, [(1, 11), (2, 56)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [90, 42, 0]]
** centroid: 5, normalized-entropy: 0.9023932827949788, [(1, 90), (2, 42)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 72, 27]]
** centroid: 6, normalized-entropy: 0.8453509366224364, [(2, 72), (3, 27)]
*** center 7: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18230413463500061] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18230413463500061, 0.15494073546670287] ***
*** starting iteration: 2; err: [Inf, 0.18230413463500061, 0.15494073546670287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18230413463500061, 0.15494073546670287, 0.15351846676621436] ***
*** starting iteration: 3; err: [Inf, 0.18230413463500061, 0.15494073546670287, 0.15351846676621436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18230413463500061, 0.15494073546670287, 0.15351846676621436, 0.1528795493579563] ***
*** finished computation of 7 references, err: [Inf, 0.18230413463500061, 0.15494073546670287, 0.15351846676621436, 0.1528795493579563] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [84, 19, 0]]
** centroid: 1, normalized-entropy: 0.6897501750585195, [(1, 84), (2, 19)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 57, 27]]
** centroid: 2, normalized-entropy: 0.9059282160429994, [(2, 57), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [89, 47, 0]]
** centroid: 3, normalized-entropy: 0.930066139891087, [(1, 89), (2, 47)]
*** center 4: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [58, 11, 0]]
** centroid: 5, normalized-entropy: 0.6329208984823799, [(1, 58), (2, 11)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 111, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1898094038744723] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1898094038744723, 0.15763848730923702] ***
*** finished computation of 7 references, err: [Inf, 0.1898094038744723, 0.15763848730923702] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 136, 24]]
** centroid: 1, normalized-entropy: 0.6098403047164005, [(2, 136), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [57, 23, 0]]
** centroid: 4, normalized-entropy: 0.8654698974285927, [(1, 57), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [116, 7, 0]]
** centroid: 5, normalized-entropy: 0.3150569452644301, [(1, 116), (2, 7)]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [1, 2, 3] (freq >= 1) [from [4, 87, 2]]
** centroid: 7, normalized-entropy: 0.25512414790924887, [(1, 4), (2, 87), (3, 2)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18439362947780197] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18439362947780197, 0.1516868161397806] ***
*** finished computation of 7 references, err: [Inf, 0.18439362947780197, 0.1516868161397806] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [144, 5, 0]]
** centroid: 1, normalized-entropy: 0.21192797897135776, [(1, 144), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 8, 0]]
** centroid: 2, normalized-entropy: 0.5079353563991225, [(1, 63), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 43, 27]]
** centroid: 3, normalized-entropy: 0.9619780596506257, [(2, 43), (3, 27)]
*** center 4: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [10, 100, 0]]
** centroid: 5, normalized-entropy: 0.43949698692151346, [(1, 10), (2, 100)]
*** center 6: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [9, 82, 0]]
** centroid: 7, normalized-entropy: 0.4655024490815131, [(1, 9), (2, 82)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1970933165311858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1970933165311858, 0.15240505254705963] ***
*** finished computation of 7 references, err: [Inf, 0.1970933165311858, 0.15240505254705963] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 88, 27]]
** centroid: 1, normalized-entropy: 0.7862557466096292, [(2, 88), (3, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [84, 11, 0]]
** centroid: 3, normalized-entropy: 0.5171354891896202, [(1, 84), (2, 11)]
*** center 4: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [84, 24, 0]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(1, 84), (2, 24)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [43, 47, 0]]
** centroid: 7, normalized-entropy: 0.9985746465403509, [(1, 43), (2, 47)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2130360830583618] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2130360830583618, 0.18962551366157449] ***
*** finished computation of 7 references, err: [Inf, 0.2130360830583618, 0.18962551366157449] ***
*** center 1: selecting labels [1] (freq >= 1) [from [118, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 56, 26]]
** centroid: 2, normalized-entropy: 0.9011701959974223, [(2, 56), (3, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [55, 48, 0]]
** centroid: 4, normalized-entropy: 0.9966657283631041, [(1, 55), (2, 48)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [19, 89, 0]]
** centroid: 5, normalized-entropy: 0.6710828900205286, [(1, 19), (2, 89)]
*** center 6: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [8, 60, 0]]
** centroid: 7, normalized-entropy: 0.5225593745369407, [(1, 8), (2, 60)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 9)
[0.9300318282354211, 0.9189728650806495, 0.907017796239353, 0.8850137562712413, 0.872980765196334, 0.8680596764429099, 0.8680027332721943, 0.8619997242751735, 0.7749875624127122]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.9, 2) => 0.9300318282354211
finished with 10
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.20598845074101277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20598845074101277, 0.1518797515381848] ***
*** finished computation of 7 references, err: [Inf, 0.20598845074101277, 0.1518797515381848] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [74, 47, 0]]
** centroid: 1, normalized-entropy: 0.9637787324366504, [(1, 74), (2, 47)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [61, 36, 0]]
** centroid: 2, normalized-entropy: 0.9515388458648668, [(1, 61), (2, 36)]
*** center 3: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 85, 27]]
** centroid: 4, normalized-entropy: 0.7968174923244049, [(2, 85), (3, 27)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 70, 0]]
** centroid: 5, normalized-entropy: 0.8069896049203007, [(1, 23), (2, 70)]
*** center 6: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20766677262507255] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20766677262507255, 0.15241088708681144] ***
*** finished computation of 7 references, err: [Inf, 0.20766677262507255, 0.15241088708681144] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 96, 27]]
** centroid: 1, normalized-entropy: 0.7592757847892834, [(2, 96), (3, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [89, 4, 0]]
** centroid: 3, normalized-entropy: 0.2559300438391133, [(1, 89), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [59, 34, 0]]
** centroid: 4, normalized-entropy: 0.9472268055719005, [(1, 59), (2, 34)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [55, 39, 0]]
** centroid: 5, normalized-entropy: 0.978998737002276, [(1, 55), (2, 39)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 72, 0]]
** centroid: 6, normalized-entropy: 0.1792560669283214, [(1, 2), (2, 72)]
*** center 7: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19604615541874199] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19604615541874199, 0.15221136450829045] ***
*** finished computation of 7 references, err: [Inf, 0.19604615541874199, 0.15221136450829045] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [7, 115, 0]]
** centroid: 1, normalized-entropy: 0.3169435645054571, [(1, 7), (2, 115)]
*** center 2: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [54, 33, 0]]
** centroid: 3, normalized-entropy: 0.9575534837147484, [(1, 54), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [57, 19, 0]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(1, 57), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [87, 13, 0]]
** centroid: 5, normalized-entropy: 0.557438185027989, [(1, 87), (2, 13)]
*** center 6: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 73, 26]]
** centroid: 7, normalized-entropy: 0.8306836355350677, [(2, 73), (3, 26)]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 10)
[0.933031834229439, 0.9300318282354211, 0.9189728650806495, 0.907017796239353, 0.8850137562712413, 0.872980765196334, 0.8680596764429099, 0.8680027332721943, 0.8619997242751735, 0.7749875624127122]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 1) => 0.933031834229439
finished with 12
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.23795253328275287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23795253328275287, 0.19146971761582718] ***
*** starting iteration: 2; err: [Inf, 0.23795253328275287, 0.19146971761582718] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23795253328275287, 0.19146971761582718, 0.18753069385081933] ***
*** starting iteration: 3; err: [Inf, 0.23795253328275287, 0.19146971761582718, 0.18753069385081933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23795253328275287, 0.19146971761582718, 0.18753069385081933, 0.18727712292849705] ***
*** finished computation of 7 references, err: [Inf, 0.23795253328275287, 0.19146971761582718, 0.18753069385081933, 0.18727712292849705] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [4, 86, 0]]
** centroid: 1, normalized-entropy: 0.2623112196143368, [(1, 4), (2, 86)]
*** center 2: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [76, 50, 0]]
** centroid: 3, normalized-entropy: 0.9690632527820694, [(1, 76), (2, 50)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [50, 38, 0]]
** centroid: 4, normalized-entropy: 0.9865446300055647, [(1, 50), (2, 38)]
*** center 5: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 64, 27]]
** centroid: 6, normalized-entropy: 0.8772236230732716, [(2, 64), (3, 27)]
*** center 7: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23955729519305108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23955729519305108, 0.19303259243066465] ***
*** starting iteration: 2; err: [Inf, 0.23955729519305108, 0.19303259243066465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23955729519305108, 0.19303259243066465, 0.19023221008781646] ***
*** starting iteration: 3; err: [Inf, 0.23955729519305108, 0.19303259243066465, 0.19023221008781646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23955729519305108, 0.19303259243066465, 0.19023221008781646, 0.18956567314047892] ***
*** finished computation of 7 references, err: [Inf, 0.23955729519305108, 0.19303259243066465, 0.19023221008781646, 0.18956567314047892] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [106, 11, 0]]
** centroid: 1, normalized-entropy: 0.4497380872012732, [(1, 106), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 10, 0]]
** centroid: 2, normalized-entropy: 0.576291461217437, [(1, 63), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 88, 26]]
** centroid: 3, normalized-entropy: 0.7746319868686841, [(2, 88), (3, 26)]
*** center 4: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [78, 1, 0]]
** centroid: 5, normalized-entropy: 0.09794058271817412, [(1, 78), (2, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [50, 36, 0]]
** centroid: 6, normalized-entropy: 0.9807983646944296, [(1, 50), (2, 36)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 107, 0]]
** centroid: 7, normalized-entropy: 0.07584150637714687, [(1, 1), (2, 107)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2627720187656928] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2627720187656928, 0.19175979229056092] ***
*** starting iteration: 2; err: [Inf, 0.2627720187656928, 0.19175979229056092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2627720187656928, 0.19175979229056092, 0.18672425986296948] ***
*** starting iteration: 3; err: [Inf, 0.2627720187656928, 0.19175979229056092, 0.18672425986296948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2627720187656928, 0.19175979229056092, 0.18672425986296948, 0.18552927785543263] ***
*** starting iteration: 4; err: [Inf, 0.2627720187656928, 0.19175979229056092, 0.18672425986296948, 0.18552927785543263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2627720187656928, 0.19175979229056092, 0.18672425986296948, 0.18552927785543263, 0.184615938982897] ***
*** finished computation of 7 references, err: [Inf, 0.2627720187656928, 0.19175979229056092, 0.18672425986296948, 0.18552927785543263, 0.184615938982897] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [91, 28, 0]]
** centroid: 1, normalized-entropy: 0.787126586201269, [(1, 91), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [76, 16, 0]]
** centroid: 2, normalized-entropy: 0.6665783579949205, [(1, 76), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 71, 27]]
** centroid: 3, normalized-entropy: 0.8492607824494318, [(2, 71), (3, 27)]
*** center 4: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [41, 52, 0]]
** centroid: 5, normalized-entropy: 0.989884644089986, [(1, 41), (2, 52)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 78, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19245972373038978] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19245972373038978, 0.1546829007894595] ***
*** starting iteration: 2; err: [Inf, 0.19245972373038978, 0.1546829007894595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19245972373038978, 0.1546829007894595, 0.1498181360812897] ***
*** starting iteration: 3; err: [Inf, 0.19245972373038978, 0.1546829007894595, 0.1498181360812897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19245972373038978, 0.1546829007894595, 0.1498181360812897, 0.1488030188991031] ***
*** starting iteration: 4; err: [Inf, 0.19245972373038978, 0.1546829007894595, 0.1498181360812897, 0.1488030188991031] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19245972373038978, 0.1546829007894595, 0.1498181360812897, 0.1488030188991031, 0.14822652854700782] ***
*** finished computation of 7 references, err: [Inf, 0.19245972373038978, 0.1546829007894595, 0.1498181360812897, 0.1488030188991031, 0.14822652854700782] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [7, 107, 0]]
** centroid: 1, normalized-entropy: 0.3329913124162683, [(1, 7), (2, 107)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 34, 0]]
** centroid: 2, normalized-entropy: 0.9472268055719005, [(1, 59), (2, 34)]
*** center 3: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 92, 26]]
** centroid: 4, normalized-entropy: 0.7607859931846075, [(2, 92), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [104, 10, 0]]
** centroid: 5, normalized-entropy: 0.4288109647301171, [(1, 104), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [56, 10, 0]]
** centroid: 6, normalized-entropy: 0.6136190195993708, [(1, 56), (2, 10)]
*** center 7: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1900677123585942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1900677123585942, 0.15437036317338917] ***
*** starting iteration: 2; err: [Inf, 0.1900677123585942, 0.15437036317338917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1900677123585942, 0.15437036317338917, 0.14992958461625622] ***
*** starting iteration: 3; err: [Inf, 0.1900677123585942, 0.15437036317338917, 0.14992958461625622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1900677123585942, 0.15437036317338917, 0.14992958461625622, 0.14868244775214876] ***
*** starting iteration: 4; err: [Inf, 0.1900677123585942, 0.15437036317338917, 0.14992958461625622, 0.14868244775214876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1900677123585942, 0.15437036317338917, 0.14992958461625622, 0.14868244775214876, 0.14793716766557347] ***
*** finished computation of 7 references, err: [Inf, 0.1900677123585942, 0.15437036317338917, 0.14992958461625622, 0.14868244775214876, 0.14793716766557347] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [58, 58, 0]]
** centroid: 1, normalized-entropy: 1.0, [(1, 58), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [82, 4, 0]]
** centroid: 2, normalized-entropy: 0.2713895875081112, [(1, 82), (2, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 82, 27]]
** centroid: 4, normalized-entropy: 0.8076226097576925, [(2, 82), (3, 27)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [83, 3, 0]]
** centroid: 5, normalized-entropy: 0.21832103023746746, [(1, 83), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [92, 3, 0]]
** centroid: 6, normalized-entropy: 0.2022494245476988, [(1, 92), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 88, 0]]
** centroid: 7, normalized-entropy: 0.20905980566852464, [(1, 3), (2, 88)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2082575977189296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2082575977189296, 0.15279621981828567] ***
*** starting iteration: 2; err: [Inf, 0.2082575977189296, 0.15279621981828567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2082575977189296, 0.15279621981828567, 0.14845886541463468] ***
*** starting iteration: 3; err: [Inf, 0.2082575977189296, 0.15279621981828567, 0.14845886541463468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2082575977189296, 0.15279621981828567, 0.14845886541463468, 0.14795528472201533] ***
*** finished computation of 7 references, err: [Inf, 0.2082575977189296, 0.15279621981828567, 0.14845886541463468, 0.14795528472201533] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [10, 92, 0]]
** centroid: 1, normalized-entropy: 0.462749058578174, [(1, 10), (2, 92)]
*** center 2: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [67, 42, 0]]
** centroid: 3, normalized-entropy: 0.9617136136083148, [(1, 67), (2, 42)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [54, 35, 0]]
** centroid: 4, normalized-entropy: 0.9668701645630143, [(1, 54), (2, 35)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 76, 27]]
** centroid: 5, normalized-entropy: 0.829952434172285, [(2, 76), (3, 27)]
*** center 6: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9430208651765538, 0.933031834229439, 0.9300318282354211, 0.9280088471705238, 0.9189728650806495, 0.907017796239353, 0.8850137562712413, 0.872980765196334, 0.8680596764429099, 0.8680027332721943, 0.8619997242751735, 0.7749875624127122]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9430208651765538
finished with 13
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.315822246360189] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.315822246360189, 0.23953387959171896] ***
*** starting iteration: 2; err: [Inf, 0.315822246360189, 0.23953387959171896] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.315822246360189, 0.23953387959171896, 0.2338716804156027] ***
*** starting iteration: 3; err: [Inf, 0.315822246360189, 0.23953387959171896, 0.2338716804156027] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.315822246360189, 0.23953387959171896, 0.2338716804156027, 0.23255617443941298] ***
*** starting iteration: 4; err: [Inf, 0.315822246360189, 0.23953387959171896, 0.2338716804156027, 0.23255617443941298] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.315822246360189, 0.23953387959171896, 0.2338716804156027, 0.23255617443941298, 0.23234271263421655] ***
*** finished computation of 3 references, err: [Inf, 0.315822246360189, 0.23953387959171896, 0.2338716804156027, 0.23255617443941298, 0.23234271263421655] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [259, 13, 0]]
** centroid: 1, normalized-entropy: 0.27695158078470816, [(1, 259), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [143, 58, 0]]
** centroid: 2, normalized-entropy: 0.8668502042301284, [(1, 143), (2, 58)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 167, 27]]
** centroid: 3, normalized-entropy: 0.5820748040346516, [(2, 167), (3, 27)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.306628233383129] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.306628233383129, 0.25039836223135287] ***
*** starting iteration: 2; err: [Inf, 0.306628233383129, 0.25039836223135287] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.306628233383129, 0.25039836223135287, 0.23351547920118565] ***
*** starting iteration: 3; err: [Inf, 0.306628233383129, 0.25039836223135287, 0.23351547920118565] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.306628233383129, 0.25039836223135287, 0.23351547920118565, 0.23026407085361889] ***
*** starting iteration: 4; err: [Inf, 0.306628233383129, 0.25039836223135287, 0.23351547920118565, 0.23026407085361889] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.306628233383129, 0.25039836223135287, 0.23351547920118565, 0.23026407085361889, 0.22926727814719952] ***
*** finished computation of 3 references, err: [Inf, 0.306628233383129, 0.25039836223135287, 0.23351547920118565, 0.23026407085361889, 0.22926727814719952] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [252, 3, 0]]
** centroid: 1, normalized-entropy: 0.0922772477445739, [(1, 252), (2, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [4, 188, 27]]
** centroid: 2, normalized-entropy: 0.4207169222019386, [(1, 4), (2, 188), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [139, 54, 0]]
** centroid: 3, normalized-entropy: 0.8551682588981592, [(1, 139), (2, 54)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3678112228487705] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3678112228487705, 0.23656862301894607] ***
*** starting iteration: 2; err: [Inf, 0.3678112228487705, 0.23656862301894607] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3678112228487705, 0.23656862301894607, 0.236383477644016] ***
*** finished computation of 3 references, err: [Inf, 0.3678112228487705, 0.23656862301894607, 0.236383477644016] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [61, 182, 26]]
** centroid: 1, normalized-entropy: 0.7524677943111369, [(1, 61), (2, 182), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [194, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [132, 71, 0]]
** centroid: 3, normalized-entropy: 0.9338478913716379, [(1, 132), (2, 71)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9430208651765538, 0.933031834229439, 0.9300318282354211, 0.9280088471705238, 0.9189728650806495, 0.907017796239353, 0.8850137562712413, 0.872980765196334, 0.8680596764429099, 0.8680027332721943, 0.8619997242751735, 0.8460316604029178, 0.7749875624127122]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9430208651765538
finished with 13
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9430208651765538, 0.933031834229439, 0.9300318282354211, 0.9280088471705238, 0.9189728650806495, 0.907017796239353, 0.8850137562712413, 0.872980765196334, 0.8680596764429099, 0.8680027332721943, 0.8619997242751735, 0.8460316604029178, 0.7749875624127122]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9430208651765538
finished with 13
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9430208651765538, 0.933031834229439, 0.9300318282354211, 0.9280088471705238, 0.9189728650806495, 0.907017796239353, 0.8850137562712413, 0.872980765196334, 0.8680596764429099, 0.8680027332721943, 0.8619997242751735, 0.8460316604029178, 0.7749875624127122]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9430208651765538
finished with 15
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.20242774030529298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20242774030529298, 0.18871018602498793] ***
*** starting iteration: 2; err: [Inf, 0.20242774030529298, 0.18871018602498793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20242774030529298, 0.18871018602498793, 0.18762148234310808] ***
*** starting iteration: 3; err: [Inf, 0.20242774030529298, 0.18871018602498793, 0.18762148234310808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20242774030529298, 0.18871018602498793, 0.18762148234310808, 0.18698165004558345] ***
*** finished computation of 7 references, err: [Inf, 0.20242774030529298, 0.18871018602498793, 0.18762148234310808, 0.18698165004558345] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [126, 6, 0]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(1, 126), (2, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [31, 58, 0]]
** centroid: 4, normalized-entropy: 0.9325538428833382, [(1, 31), (2, 58)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [52, 32, 0]]
** centroid: 5, normalized-entropy: 0.9587118829771317, [(1, 52), (2, 32)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 82, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 75, 26]]
** centroid: 7, normalized-entropy: 0.8228368841492258, [(2, 75), (3, 26)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22896491940869115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22896491940869115, 0.1988264509494873] ***
*** starting iteration: 2; err: [Inf, 0.22896491940869115, 0.1988264509494873] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22896491940869115, 0.1988264509494873, 0.19212599520919205] ***
*** starting iteration: 3; err: [Inf, 0.22896491940869115, 0.1988264509494873, 0.19212599520919205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22896491940869115, 0.1988264509494873, 0.19212599520919205, 0.19059719363258204] ***
*** finished computation of 7 references, err: [Inf, 0.22896491940869115, 0.1988264509494873, 0.19212599520919205, 0.19059719363258204] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [75, 45, 0]]
** centroid: 1, normalized-entropy: 0.954434002924965, [(1, 75), (2, 45)]
*** center 2: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [44, 49, 0]]
** centroid: 3, normalized-entropy: 0.9979139338855983, [(1, 44), (2, 49)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [46, 39, 0]]
** centroid: 4, normalized-entropy: 0.9951022712641691, [(1, 46), (2, 39)]
*** center 5: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 104, 27]]
** centroid: 6, normalized-entropy: 0.7339749614986165, [(2, 104), (3, 27)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [86, 1, 0]]
** centroid: 7, normalized-entropy: 0.09054385326964301, [(1, 86), (2, 1)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2610999286618793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2610999286618793, 0.21212291975144013] ***
*** starting iteration: 2; err: [Inf, 0.2610999286618793, 0.21212291975144013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2610999286618793, 0.21212291975144013, 0.19786828633249812] ***
*** starting iteration: 3; err: [Inf, 0.2610999286618793, 0.21212291975144013, 0.19786828633249812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2610999286618793, 0.21212291975144013, 0.19786828633249812, 0.19174499873133347] ***
*** finished computation of 7 references, err: [Inf, 0.2610999286618793, 0.21212291975144013, 0.19786828633249812, 0.19174499873133347] ***
*** center 1: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [52, 36, 0]]
** centroid: 2, normalized-entropy: 0.976020648236615, [(1, 52), (2, 36)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [80, 14, 0]]
** centroid: 3, normalized-entropy: 0.607171654871303, [(1, 80), (2, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [124, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 48, 0]]
** centroid: 5, normalized-entropy: 0.9878853530449176, [(1, 37), (2, 48)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 69, 27]]
** centroid: 6, normalized-entropy: 0.8571484374283717, [(2, 69), (3, 27)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [19, 78, 0]]
** centroid: 7, normalized-entropy: 0.7136036068604937, [(1, 19), (2, 78)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2931472563195985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2931472563195985, 0.17714026881879694] ***
*** starting iteration: 2; err: [Inf, 0.2931472563195985, 0.17714026881879694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2931472563195985, 0.17714026881879694, 0.1597230997630157] ***
*** starting iteration: 3; err: [Inf, 0.2931472563195985, 0.17714026881879694, 0.1597230997630157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2931472563195985, 0.17714026881879694, 0.1597230997630157, 0.15356078942155316] ***
*** finished computation of 7 references, err: [Inf, 0.2931472563195985, 0.17714026881879694, 0.1597230997630157, 0.15356078942155316] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 32, 25]]
** centroid: 1, normalized-entropy: 0.9890934397021431, [(2, 32), (3, 25)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 58, 1]]
** centroid: 2, normalized-entropy: 0.12394986771100755, [(2, 58), (3, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [99, 28, 0]]
** centroid: 3, normalized-entropy: 0.7610292284611874, [(1, 99), (2, 28)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [117, 8, 0]]
** centroid: 4, normalized-entropy: 0.3431229071320204, [(1, 117), (2, 8)]
*** center 5: selecting labels [1] (freq >= 1) [from [147, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 61, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [24, 66, 0]]
** centroid: 7, normalized-entropy: 0.8366407419411671, [(1, 24), (2, 66)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19143903360323705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19143903360323705, 0.15942178055960993] ***
*** starting iteration: 2; err: [Inf, 0.19143903360323705, 0.15942178055960993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19143903360323705, 0.15942178055960993, 0.15472834978344804] ***
*** starting iteration: 3; err: [Inf, 0.19143903360323705, 0.15942178055960993, 0.15472834978344804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19143903360323705, 0.15942178055960993, 0.15472834978344804, 0.1538846239072691] ***
*** finished computation of 7 references, err: [Inf, 0.19143903360323705, 0.15942178055960993, 0.15472834978344804, 0.1538846239072691] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [3, 95, 0]]
** centroid: 1, normalized-entropy: 0.19745300438456026, [(1, 3), (2, 95)]
*** center 2: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [54, 7, 0]]
** centroid: 3, normalized-entropy: 0.5140912790181233, [(1, 54), (2, 7)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 98, 27]]
** centroid: 4, normalized-entropy: 0.7527960664084546, [(2, 98), (3, 27)]
*** center 5: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [110, 38, 0]]
** centroid: 7, normalized-entropy: 0.8218127305034848, [(1, 110), (2, 38)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1842846070853309] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1842846070853309, 0.16242412345782703] ***
*** starting iteration: 2; err: [Inf, 0.1842846070853309, 0.16242412345782703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1842846070853309, 0.16242412345782703, 0.1522403678792561] ***
*** starting iteration: 3; err: [Inf, 0.1842846070853309, 0.16242412345782703, 0.1522403678792561] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1842846070853309, 0.16242412345782703, 0.1522403678792561, 0.14930602268914858] ***
*** finished computation of 7 references, err: [Inf, 0.1842846070853309, 0.16242412345782703, 0.1522403678792561, 0.14930602268914858] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 78, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 101, 27]]
** centroid: 2, normalized-entropy: 0.7432709194035553, [(2, 101), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [62, 40, 0]]
** centroid: 3, normalized-entropy: 0.9661773513883509, [(1, 62), (2, 40)]
*** center 4: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [97, 4, 0]]
** centroid: 5, normalized-entropy: 0.24047340659188013, [(1, 97), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [77, 20, 0]]
** centroid: 6, normalized-entropy: 0.7341280428958428, [(1, 77), (2, 20)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [52, 2, 0]]
** centroid: 7, normalized-entropy: 0.22853814395352806, [(1, 52), (2, 2)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9520058981136826, 0.9430208651765538, 0.933031834229439, 0.9300318282354211, 0.9280088471705238, 0.9189728650806495, 0.9180018341694988, 0.907017796239353, 0.8850137562712413, 0.872980765196334, 0.8680596764429099, 0.8680027332721943, 0.8619997242751735, 0.8460316604029178, 0.7749875624127122]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.9520058981136826
finished with 15
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9520058981136826, 0.9430208651765538, 0.933031834229439, 0.9300318282354211, 0.9280088471705238, 0.9189728650806495, 0.9180018341694988, 0.907017796239353, 0.8850137562712413, 0.872980765196334, 0.8680596764429099, 0.8680027332721943, 0.8619997242751735, 0.8460316604029178, 0.7749875624127122]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.9520058981136826
finished with 15
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.26500607589352876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26500607589352876, 0.21232088997215032] ***
*** starting iteration: 2; err: [Inf, 0.26500607589352876, 0.21232088997215032] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26500607589352876, 0.21232088997215032, 0.199958039611578] ***
*** starting iteration: 3; err: [Inf, 0.26500607589352876, 0.21232088997215032, 0.199958039611578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26500607589352876, 0.21232088997215032, 0.199958039611578, 0.19328540945984424] ***
*** finished computation of 7 references, err: [Inf, 0.26500607589352876, 0.21232088997215032, 0.199958039611578, 0.19328540945984424] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [69, 65, 0]]
** centroid: 1, normalized-entropy: 0.9993571354984947, [(1, 69), (2, 65)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 107, 40]]
** centroid: 2, normalized-entropy: 0.8444744445614174, [(2, 107), (3, 40)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [86, 32, 0]]
** centroid: 3, normalized-entropy: 0.8431619569518377, [(1, 86), (2, 32)]
*** center 4: selecting labels [1] (freq >= 1) [from [164, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [166, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [31, 105, 0]]
** centroid: 6, normalized-entropy: 0.7744050105375746, [(1, 31), (2, 105)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [76, 59, 0]]
** centroid: 7, normalized-entropy: 0.988530923465193, [(1, 76), (2, 59)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2584419403113425] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2584419403113425, 0.21694186739064752] ***
*** starting iteration: 2; err: [Inf, 0.2584419403113425, 0.21694186739064752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2584419403113425, 0.21694186739064752, 0.2009755567163229] ***
*** starting iteration: 3; err: [Inf, 0.2584419403113425, 0.21694186739064752, 0.2009755567163229] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2584419403113425, 0.21694186739064752, 0.2009755567163229, 0.19385027490183712] ***
*** finished computation of 7 references, err: [Inf, 0.2584419403113425, 0.21694186739064752, 0.2009755567163229, 0.19385027490183712] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 70, 21]]
** centroid: 1, normalized-entropy: 0.7793498372920851, [(2, 70), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [69, 24, 0]]
** centroid: 2, normalized-entropy: 0.8238116333123173, [(1, 69), (2, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [2, 73, 0]]
** centroid: 3, normalized-entropy: 0.1773894531859976, [(1, 2), (2, 73)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [81, 6, 0]]
** centroid: 4, normalized-entropy: 0.36205125173399805, [(1, 81), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [54, 2, 0]]
** centroid: 5, normalized-entropy: 0.2222848306856879, [(1, 54), (2, 2)]
*** center 6: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23391784715838732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23391784715838732, 0.1985860476535745] ***
*** starting iteration: 2; err: [Inf, 0.23391784715838732, 0.1985860476535745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23391784715838732, 0.1985860476535745, 0.19279978445451706] ***
*** starting iteration: 3; err: [Inf, 0.23391784715838732, 0.1985860476535745, 0.19279978445451706] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23391784715838732, 0.1985860476535745, 0.19279978445451706, 0.1897907889522612] ***
*** finished computation of 7 references, err: [Inf, 0.23391784715838732, 0.1985860476535745, 0.19279978445451706, 0.1897907889522612] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 28, 24]]
** centroid: 1, normalized-entropy: 0.9957274520849256, [(2, 28), (3, 24)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 61, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [12, 64, 0]]
** centroid: 3, normalized-entropy: 0.6292492238560344, [(1, 12), (2, 64)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [35, 19, 0]]
** centroid: 4, normalized-entropy: 0.9357110512652843, [(1, 35), (2, 19)]
*** center 5: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [78, 7, 0]]
** centroid: 6, normalized-entropy: 0.4104161417181887, [(1, 78), (2, 7)]
*** center 7: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24856488314829767] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24856488314829767, 0.20926432212814688] ***
*** starting iteration: 2; err: [Inf, 0.24856488314829767, 0.20926432212814688] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24856488314829767, 0.20926432212814688, 0.19908987796865404] ***
*** starting iteration: 3; err: [Inf, 0.24856488314829767, 0.20926432212814688, 0.19908987796865404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24856488314829767, 0.20926432212814688, 0.19908987796865404, 0.19381992994807662] ***
*** finished computation of 7 references, err: [Inf, 0.24856488314829767, 0.20926432212814688, 0.19908987796865404, 0.19381992994807662] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 55, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [62, 7, 0]]
** centroid: 3, normalized-entropy: 0.47357292491745173, [(1, 62), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [80, 2, 0]]
** centroid: 4, normalized-entropy: 0.16542703399626665, [(1, 80), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [40, 22, 0]]
** centroid: 5, normalized-entropy: 0.9383153522334071, [(1, 40), (2, 22)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 41, 18]]
** centroid: 6, normalized-entropy: 0.8874179270685693, [(2, 41), (3, 18)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [13, 55, 0]]
** centroid: 7, normalized-entropy: 0.7039260680195971, [(1, 13), (2, 55)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27226592931337656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27226592931337656, 0.216135675188154] ***
*** starting iteration: 2; err: [Inf, 0.27226592931337656, 0.216135675188154] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27226592931337656, 0.216135675188154, 0.20241264483891427] ***
*** starting iteration: 3; err: [Inf, 0.27226592931337656, 0.216135675188154, 0.20241264483891427] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27226592931337656, 0.216135675188154, 0.20241264483891427, 0.19156550254672766] ***
*** finished computation of 7 references, err: [Inf, 0.27226592931337656, 0.216135675188154, 0.20241264483891427, 0.19156550254672766] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [30, 48, 0]]
** centroid: 1, normalized-entropy: 0.961236604722876, [(1, 30), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [71, 6, 0]]
** centroid: 2, normalized-entropy: 0.39481484603049416, [(1, 71), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 36, 20]]
** centroid: 3, normalized-entropy: 0.940285958670631, [(2, 36), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [21, 39, 0]]
** centroid: 5, normalized-entropy: 0.9340680553754911, [(1, 21), (2, 39)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 51, 0]]
** centroid: 6, normalized-entropy: 0.3095434291503252, [(1, 3), (2, 51)]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2573849959266372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2573849959266372, 0.2011244555003941] ***
*** starting iteration: 2; err: [Inf, 0.2573849959266372, 0.2011244555003941] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2573849959266372, 0.2011244555003941, 0.19148744982481003] ***
*** starting iteration: 3; err: [Inf, 0.2573849959266372, 0.2011244555003941, 0.19148744982481003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2573849959266372, 0.2011244555003941, 0.19148744982481003, 0.18956073606200516] ***
*** finished computation of 7 references, err: [Inf, 0.2573849959266372, 0.2011244555003941, 0.19148744982481003, 0.18956073606200516] ***
*** center 1: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 17, 0]]
** centroid: 2, normalized-entropy: 0.8230660790114689, [(1, 49), (2, 17)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 57, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [6, 71, 0]]
** centroid: 4, normalized-entropy: 0.39481484603049416, [(1, 6), (2, 71)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 21, 0]]
** centroid: 5, normalized-entropy: 0.912999213585247, [(1, 43), (2, 21)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 27, 22]]
** centroid: 6, normalized-entropy: 0.9924760039430819, [(2, 27), (3, 22)]
*** center 7: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21799492481164634] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21799492481164634, 0.1999694768730551] ***
*** starting iteration: 2; err: [Inf, 0.21799492481164634, 0.1999694768730551] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21799492481164634, 0.1999694768730551, 0.19232376493420453] ***
*** starting iteration: 3; err: [Inf, 0.21799492481164634, 0.1999694768730551, 0.19232376493420453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21799492481164634, 0.1999694768730551, 0.19232376493420453, 0.1905130676822737] ***
*** finished computation of 7 references, err: [Inf, 0.21799492481164634, 0.1999694768730551, 0.19232376493420453, 0.1905130676822737] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [73, 23, 0]]
** centroid: 1, normalized-entropy: 0.7943466904341503, [(1, 73), (2, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [3, 66, 0]]
** centroid: 2, normalized-entropy: 0.2580186686648155, [(1, 3), (2, 66)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [27, 27, 0]]
** centroid: 3, normalized-entropy: 1.0, [(1, 27), (2, 27)]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [47, 15, 0]]
** centroid: 5, normalized-entropy: 0.7982441335646697, [(1, 47), (2, 15)]
*** center 6: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 49, 21]]
** centroid: 7, normalized-entropy: 0.8812908992306927, [(2, 49), (3, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2528037204714492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2528037204714492, 0.2033145368695259] ***
*** starting iteration: 2; err: [Inf, 0.2528037204714492, 0.2033145368695259] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2528037204714492, 0.2033145368695259, 0.197966814333573] ***
*** starting iteration: 3; err: [Inf, 0.2528037204714492, 0.2033145368695259, 0.197966814333573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2528037204714492, 0.2033145368695259, 0.197966814333573, 0.19601639253739267] ***
*** finished computation of 7 references, err: [Inf, 0.2528037204714492, 0.2033145368695259, 0.197966814333573, 0.19601639253739267] ***
*** center 1: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [17, 38, 0]]
** centroid: 3, normalized-entropy: 0.8921212805771683, [(1, 17), (2, 38)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 82, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [34, 10, 0]]
** centroid: 5, normalized-entropy: 0.7732266742876346, [(1, 34), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [87, 19, 0]]
** centroid: 6, normalized-entropy: 0.6784232197116191, [(1, 87), (2, 19)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 41, 16]]
** centroid: 7, normalized-entropy: 0.8564052389131375, [(2, 41), (3, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27155104801733976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27155104801733976, 0.2354057828458026] ***
*** starting iteration: 2; err: [Inf, 0.27155104801733976, 0.2354057828458026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27155104801733976, 0.2354057828458026, 0.21416200965829194] ***
*** starting iteration: 3; err: [Inf, 0.27155104801733976, 0.2354057828458026, 0.21416200965829194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27155104801733976, 0.2354057828458026, 0.21416200965829194, 0.20402410360984505] ***
*** finished computation of 7 references, err: [Inf, 0.27155104801733976, 0.2354057828458026, 0.21416200965829194, 0.20402410360984505] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 67, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [8, 23, 0]]
** centroid: 2, normalized-entropy: 0.8238116333123173, [(1, 8), (2, 23)]
*** center 3: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 76, 22]]
** centroid: 4, normalized-entropy: 0.7682814090975241, [(2, 76), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 4, 0]]
** centroid: 5, normalized-entropy: 0.32275695889739825, [(1, 64), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [93, 24, 0]]
** centroid: 6, normalized-entropy: 0.7320666900931937, [(1, 93), (2, 24)]
*** center 7: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24675320786051452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24675320786051452, 0.1925471327989362] ***
*** starting iteration: 2; err: [Inf, 0.24675320786051452, 0.1925471327989362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24675320786051452, 0.1925471327989362, 0.18903717243857682] ***
*** starting iteration: 3; err: [Inf, 0.24675320786051452, 0.1925471327989362, 0.18903717243857682] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24675320786051452, 0.1925471327989362, 0.18903717243857682, 0.1888139515845105] ***
*** finished computation of 7 references, err: [Inf, 0.24675320786051452, 0.1925471327989362, 0.18903717243857682, 0.1888139515845105] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [45, 29, 0]]
** centroid: 1, normalized-entropy: 0.966009606256856, [(1, 45), (2, 29)]
*** center 2: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [14, 50, 0]]
** centroid: 4, normalized-entropy: 0.7578784625383954, [(1, 14), (2, 50)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [13, 50, 0]]
** centroid: 5, normalized-entropy: 0.7344461802527668, [(1, 13), (2, 50)]
*** center 6: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 53, 20]]
** centroid: 7, normalized-entropy: 0.847107490529376, [(2, 53), (3, 20)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2498594335820526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2498594335820526, 0.2314926336016506] ***
*** starting iteration: 2; err: [Inf, 0.2498594335820526, 0.2314926336016506] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2498594335820526, 0.2314926336016506, 0.20318290346488357] ***
*** starting iteration: 3; err: [Inf, 0.2498594335820526, 0.2314926336016506, 0.20318290346488357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2498594335820526, 0.2314926336016506, 0.20318290346488357, 0.19055326370708645] ***
*** finished computation of 7 references, err: [Inf, 0.2498594335820526, 0.2314926336016506, 0.20318290346488357, 0.19055326370708645] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 66, 13]]
** centroid: 1, normalized-entropy: 0.6451006442088483, [(2, 66), (3, 13)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 64, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [86, 13, 0]]
** centroid: 3, normalized-entropy: 0.5610284863400681, [(1, 86), (2, 13)]
*** center 4: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [35, 10, 0]]
** centroid: 6, normalized-entropy: 0.7642045065086204, [(1, 35), (2, 10)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [16, 45, 0]]
** centroid: 7, normalized-entropy: 0.8301899714180444, [(1, 16), (2, 45)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3304665844170377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3304665844170377, 0.22247360243089498] ***
*** starting iteration: 2; err: [Inf, 0.3304665844170377, 0.22247360243089498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3304665844170377, 0.22247360243089498, 0.20316826985403896] ***
*** starting iteration: 3; err: [Inf, 0.3304665844170377, 0.22247360243089498, 0.20316826985403896] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3304665844170377, 0.22247360243089498, 0.20316826985403896, 0.19501258530374616] ***
*** finished computation of 7 references, err: [Inf, 0.3304665844170377, 0.22247360243089498, 0.20316826985403896, 0.19501258530374616] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [57, 43, 0]]
** centroid: 1, normalized-entropy: 0.9858150371789197, [(1, 57), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [11, 78, 0]]
** centroid: 2, normalized-entropy: 0.5396084773004918, [(1, 11), (2, 78)]
*** center 3: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 71, 24]]
** centroid: 6, normalized-entropy: 0.8154224977821039, [(2, 71), (3, 24)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [64, 4, 0]]
** centroid: 7, normalized-entropy: 0.32275695889739825, [(1, 64), (2, 4)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22915741224680095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22915741224680095, 0.19183801077958196] ***
*** starting iteration: 2; err: [Inf, 0.22915741224680095, 0.19183801077958196] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22915741224680095, 0.19183801077958196, 0.18895544271171094] ***
*** starting iteration: 3; err: [Inf, 0.22915741224680095, 0.19183801077958196, 0.18895544271171094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22915741224680095, 0.19183801077958196, 0.18895544271171094, 0.18747759617120027] ***
*** finished computation of 7 references, err: [Inf, 0.22915741224680095, 0.19183801077958196, 0.18895544271171094, 0.18747759617120027] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 29, 29]]
** centroid: 1, normalized-entropy: 1.0, [(2, 29), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [36, 24, 0]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(1, 36), (2, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [5, 66, 0]]
** centroid: 5, normalized-entropy: 0.3674984948272913, [(1, 5), (2, 66)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 61, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [57, 9, 0]]
** centroid: 7, normalized-entropy: 0.5746356978376794, [(1, 57), (2, 9)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2633248515818268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2633248515818268, 0.2103622967149131] ***
*** starting iteration: 2; err: [Inf, 0.2633248515818268, 0.2103622967149131] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2633248515818268, 0.2103622967149131, 0.2009491294361651] ***
*** starting iteration: 3; err: [Inf, 0.2633248515818268, 0.2103622967149131, 0.2009491294361651] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2633248515818268, 0.2103622967149131, 0.2009491294361651, 0.1976240453887731] ***
*** finished computation of 7 references, err: [Inf, 0.2633248515818268, 0.2103622967149131, 0.2009491294361651, 0.1976240453887731] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [54, 7, 0]]
** centroid: 1, normalized-entropy: 0.5140912790181233, [(1, 54), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [57, 48, 0]]
** centroid: 2, normalized-entropy: 0.9946937953613056, [(1, 57), (2, 48)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 76, 22]]
** centroid: 3, normalized-entropy: 0.7682814090975241, [(2, 76), (3, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [30, 42, 0]]
** centroid: 5, normalized-entropy: 0.9798687566511527, [(1, 30), (2, 42)]
*** center 6: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2651123227411881] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2651123227411881, 0.20224107415787876] ***
*** starting iteration: 2; err: [Inf, 0.2651123227411881, 0.20224107415787876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2651123227411881, 0.20224107415787876, 0.1915679958248511] ***
*** starting iteration: 3; err: [Inf, 0.2651123227411881, 0.20224107415787876, 0.1915679958248511] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2651123227411881, 0.20224107415787876, 0.1915679958248511, 0.1889036019826308] ***
*** finished computation of 7 references, err: [Inf, 0.2651123227411881, 0.20224107415787876, 0.1915679958248511, 0.1889036019826308] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 46, 22]]
** centroid: 1, normalized-entropy: 0.9081783472997053, [(2, 46), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [64, 31, 0]]
** centroid: 2, normalized-entropy: 0.9111178649415465, [(1, 64), (2, 31)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [58, 5, 0]]
** centroid: 3, normalized-entropy: 0.39993804743902767, [(1, 58), (2, 5)]
*** center 4: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 54, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [25, 46, 0]]
** centroid: 7, normalized-entropy: 0.935940714955517, [(1, 25), (2, 46)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23711827838048338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23711827838048338, 0.19688421051576735] ***
*** starting iteration: 2; err: [Inf, 0.23711827838048338, 0.19688421051576735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23711827838048338, 0.19688421051576735, 0.18855806885287166] ***
*** starting iteration: 3; err: [Inf, 0.23711827838048338, 0.19688421051576735, 0.18855806885287166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23711827838048338, 0.19688421051576735, 0.18855806885287166, 0.18487886467389764] ***
*** finished computation of 7 references, err: [Inf, 0.23711827838048338, 0.19688421051576735, 0.18855806885287166, 0.18487886467389764] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [23, 44, 0]]
** centroid: 1, normalized-entropy: 0.9279262619599757, [(1, 23), (2, 44)]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [29, 44, 0]]
** centroid: 3, normalized-entropy: 0.9693253797191861, [(1, 29), (2, 44)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [59, 21, 0]]
** centroid: 4, normalized-entropy: 0.8304955225035798, [(1, 59), (2, 21)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 67, 26]]
** centroid: 5, normalized-entropy: 0.8548640967818041, [(2, 67), (3, 26)]
*** center 6: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [74, 3, 0]]
** centroid: 7, normalized-entropy: 0.23750814382859295, [(1, 74), (2, 3)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2687847981341183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2687847981341183, 0.22868372710607945] ***
*** starting iteration: 2; err: [Inf, 0.2687847981341183, 0.22868372710607945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2687847981341183, 0.22868372710607945, 0.22011938257201108] ***
*** starting iteration: 3; err: [Inf, 0.2687847981341183, 0.22868372710607945, 0.22011938257201108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2687847981341183, 0.22868372710607945, 0.22011938257201108, 0.207436814378947] ***
*** finished computation of 7 references, err: [Inf, 0.2687847981341183, 0.22868372710607945, 0.22011938257201108, 0.207436814378947] ***
*** center 1: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [27, 47, 0]]
** centroid: 2, normalized-entropy: 0.9466474387740499, [(1, 27), (2, 47)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [4, 51, 0]]
** centroid: 3, normalized-entropy: 0.37601985096927276, [(1, 4), (2, 51)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [52, 10, 0]]
** centroid: 4, normalized-entropy: 0.6373874992221911, [(1, 52), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 19, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 38), (2, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 50, 17]]
** centroid: 7, normalized-entropy: 0.8171387756817725, [(2, 50), (3, 17)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2442979740574956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2442979740574956, 0.193302882428281] ***
*** starting iteration: 2; err: [Inf, 0.2442979740574956, 0.193302882428281] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2442979740574956, 0.193302882428281, 0.18813314964435995] ***
*** starting iteration: 3; err: [Inf, 0.2442979740574956, 0.193302882428281, 0.18813314964435995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2442979740574956, 0.193302882428281, 0.18813314964435995, 0.18777527968958022] ***
*** finished computation of 7 references, err: [Inf, 0.2442979740574956, 0.193302882428281, 0.18813314964435995, 0.18777527968958022] ***
*** center 1: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 65, 13]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(2, 65), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [16, 55, 0]]
** centroid: 3, normalized-entropy: 0.7698205808588191, [(1, 16), (2, 55)]
*** center 4: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [22, 37, 0]]
** centroid: 6, normalized-entropy: 0.9528588097297789, [(1, 22), (2, 37)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [14, 44, 0]]
** centroid: 7, normalized-entropy: 0.7973265101474423, [(1, 14), (2, 44)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2549987685196102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2549987685196102, 0.19416137392353267] ***
*** starting iteration: 2; err: [Inf, 0.2549987685196102, 0.19416137392353267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2549987685196102, 0.19416137392353267, 0.18913386018294842] ***
*** starting iteration: 3; err: [Inf, 0.2549987685196102, 0.19416137392353267, 0.18913386018294842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2549987685196102, 0.19416137392353267, 0.18913386018294842, 0.1877951587345451] ***
*** finished computation of 7 references, err: [Inf, 0.2549987685196102, 0.19416137392353267, 0.18913386018294842, 0.1877951587345451] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 67, 3]]
** centroid: 1, normalized-entropy: 0.25524211319019174, [(2, 67), (3, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [25, 37, 0]]
** centroid: 2, normalized-entropy: 0.9728063221185002, [(1, 25), (2, 37)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [80, 11, 0]]
** centroid: 3, normalized-entropy: 0.5318826028800231, [(1, 80), (2, 11)]
*** center 4: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 38, 16]]
** centroid: 6, normalized-entropy: 0.876716288999464, [(2, 38), (3, 16)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [61, 23, 0]]
** centroid: 7, normalized-entropy: 0.8468781063424823, [(1, 61), (2, 23)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27440152389742434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27440152389742434, 0.2137103236373514] ***
*** starting iteration: 2; err: [Inf, 0.27440152389742434, 0.2137103236373514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27440152389742434, 0.2137103236373514, 0.20423902604170144] ***
*** starting iteration: 3; err: [Inf, 0.27440152389742434, 0.2137103236373514, 0.20423902604170144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27440152389742434, 0.2137103236373514, 0.20423902604170144, 0.2003297565113753] ***
*** finished computation of 7 references, err: [Inf, 0.27440152389742434, 0.2137103236373514, 0.20423902604170144, 0.2003297565113753] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 36, 23]]
** centroid: 1, normalized-entropy: 0.9646900825612559, [(2, 36), (3, 23)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 32, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [26, 27, 0]]
** centroid: 3, normalized-entropy: 0.9997431860710851, [(1, 26), (2, 27)]
*** center 4: selecting labels [1] (freq >= 1) [from [135, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [1, 45, 0]]
** centroid: 5, normalized-entropy: 0.1510969705171136, [(1, 1), (2, 45)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [70, 3, 0]]
** centroid: 6, normalized-entropy: 0.24729443986205674, [(1, 70), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [80, 22, 0]]
** centroid: 7, normalized-entropy: 0.7522121733341471, [(1, 80), (2, 22)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24589068735856562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24589068735856562, 0.21047454231604934] ***
*** starting iteration: 2; err: [Inf, 0.24589068735856562, 0.21047454231604934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24589068735856562, 0.21047454231604934, 0.2022142022959888] ***
*** starting iteration: 3; err: [Inf, 0.24589068735856562, 0.21047454231604934, 0.2022142022959888] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24589068735856562, 0.21047454231604934, 0.2022142022959888, 0.1984447476938367] ***
*** finished computation of 7 references, err: [Inf, 0.24589068735856562, 0.21047454231604934, 0.2022142022959888, 0.1984447476938367] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [82, 4, 0]]
** centroid: 1, normalized-entropy: 0.2713895875081112, [(1, 82), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [41, 38, 0]]
** centroid: 2, normalized-entropy: 0.9989595114657399, [(1, 41), (2, 38)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [34, 26, 0]]
** centroid: 3, normalized-entropy: 0.9871377743721862, [(1, 34), (2, 26)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 109, 20]]
** centroid: 4, normalized-entropy: 0.6223074624121516, [(2, 109), (3, 20)]
*** center 5: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [34, 16, 0]]
** centroid: 6, normalized-entropy: 0.9043814577244941, [(1, 34), (2, 16)]
*** center 7: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2322356572477147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2322356572477147, 0.19751504107005893] ***
*** starting iteration: 2; err: [Inf, 0.2322356572477147, 0.19751504107005893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2322356572477147, 0.19751504107005893, 0.1935787775251083] ***
*** starting iteration: 3; err: [Inf, 0.2322356572477147, 0.19751504107005893, 0.1935787775251083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2322356572477147, 0.19751504107005893, 0.1935787775251083, 0.1916274858675897] ***
*** finished computation of 7 references, err: [Inf, 0.2322356572477147, 0.19751504107005893, 0.1935787775251083, 0.1916274858675897] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [43, 17, 0]]
** centroid: 1, normalized-entropy: 0.8599530497177523, [(1, 43), (2, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [64, 2, 0]]
** centroid: 3, normalized-entropy: 0.19590927087360496, [(1, 64), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [3, 68, 0]]
** centroid: 4, normalized-entropy: 0.25253077151613923, [(1, 3), (2, 68)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [54, 21, 0]]
** centroid: 5, normalized-entropy: 0.8554508105601307, [(1, 54), (2, 21)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [67, 4, 0]]
** centroid: 6, normalized-entropy: 0.3127333763966432, [(1, 67), (2, 4)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 65, 18]]
** centroid: 7, normalized-entropy: 0.7544062039636575, [(2, 65), (3, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28529171155951916] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28529171155951916, 0.20520894116535782] ***
*** starting iteration: 2; err: [Inf, 0.28529171155951916, 0.20520894116535782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28529171155951916, 0.20520894116535782, 0.19401386727765202] ***
*** starting iteration: 3; err: [Inf, 0.28529171155951916, 0.20520894116535782, 0.19401386727765202] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28529171155951916, 0.20520894116535782, 0.19401386727765202, 0.1901885501735378] ***
*** finished computation of 7 references, err: [Inf, 0.28529171155951916, 0.20520894116535782, 0.19401386727765202, 0.1901885501735378] ***
*** center 1: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 51, 20]]
** centroid: 2, normalized-entropy: 0.8577435372751958, [(2, 51), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [17, 39, 0]]
** centroid: 3, normalized-entropy: 0.8856128713989709, [(1, 17), (2, 39)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [22, 50, 0]]
** centroid: 4, normalized-entropy: 0.887976319515135, [(1, 22), (2, 50)]
*** center 5: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [30, 42, 0]]
** centroid: 6, normalized-entropy: 0.9798687566511527, [(1, 30), (2, 42)]
*** center 7: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3078655255138874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3078655255138874, 0.23686111115664243] ***
*** starting iteration: 2; err: [Inf, 0.3078655255138874, 0.23686111115664243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3078655255138874, 0.23686111115664243, 0.22527284203656017] ***
*** starting iteration: 3; err: [Inf, 0.3078655255138874, 0.23686111115664243, 0.22527284203656017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3078655255138874, 0.23686111115664243, 0.22527284203656017, 0.21102900846768172] ***
*** finished computation of 7 references, err: [Inf, 0.3078655255138874, 0.23686111115664243, 0.22527284203656017, 0.21102900846768172] ***
*** center 1: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 4, 0]]
** centroid: 2, normalized-entropy: 0.3451173149449528, [(1, 58), (2, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 58, 18]]
** centroid: 4, normalized-entropy: 0.7897492536625221, [(2, 58), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [31, 18, 0]]
** centroid: 5, normalized-entropy: 0.9486131982385807, [(1, 31), (2, 18)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 83, 2]]
** centroid: 6, normalized-entropy: 0.16082302082246946, [(2, 83), (3, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [77, 26, 0]]
** centroid: 7, normalized-entropy: 0.8151025048028707, [(1, 77), (2, 26)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22986188479699193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22986188479699193, 0.19784490271471442] ***
*** starting iteration: 2; err: [Inf, 0.22986188479699193, 0.19784490271471442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22986188479699193, 0.19784490271471442, 0.19481881517730654] ***
*** starting iteration: 3; err: [Inf, 0.22986188479699193, 0.19784490271471442, 0.19481881517730654] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22986188479699193, 0.19784490271471442, 0.19481881517730654, 0.19311230704188348] ***
*** finished computation of 7 references, err: [Inf, 0.22986188479699193, 0.19784490271471442, 0.19481881517730654, 0.19311230704188348] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [49, 8, 0]]
** centroid: 1, normalized-entropy: 0.5851569902762294, [(1, 49), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [60, 13, 0]]
** centroid: 2, normalized-entropy: 0.6758635715876156, [(1, 60), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [44, 19, 0]]
** centroid: 3, normalized-entropy: 0.8832225588099292, [(1, 44), (2, 19)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [71, 3, 0]]
** centroid: 4, normalized-entropy: 0.2447650820208971, [(1, 71), (2, 3)]
*** center 5: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 81, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 59, 21]]
** centroid: 7, normalized-entropy: 0.8304955225035798, [(2, 59), (3, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2764215107411146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2764215107411146, 0.21205450680479407] ***
*** starting iteration: 2; err: [Inf, 0.2764215107411146, 0.21205450680479407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2764215107411146, 0.21205450680479407, 0.198003519911319] ***
*** starting iteration: 3; err: [Inf, 0.2764215107411146, 0.21205450680479407, 0.198003519911319] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2764215107411146, 0.21205450680479407, 0.198003519911319, 0.19371150689199568] ***
*** finished computation of 7 references, err: [Inf, 0.2764215107411146, 0.21205450680479407, 0.198003519911319, 0.19371150689199568] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [62, 2, 0]]
** centroid: 1, normalized-entropy: 0.2006223243127146, [(1, 62), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [15, 51, 0]]
** centroid: 2, normalized-entropy: 0.7732266742876346, [(1, 15), (2, 51)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 23, 24]]
** centroid: 3, normalized-entropy: 0.9996734260048917, [(2, 23), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [88, 2, 0]]
** centroid: 4, normalized-entropy: 0.1537421803287618, [(1, 88), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [4, 63, 0]]
** centroid: 5, normalized-entropy: 0.32625881462949274, [(1, 4), (2, 63)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 37, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2335314219687134] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2335314219687134, 0.2084344029566273] ***
*** starting iteration: 2; err: [Inf, 0.2335314219687134, 0.2084344029566273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2335314219687134, 0.2084344029566273, 0.1986770922318101] ***
*** starting iteration: 3; err: [Inf, 0.2335314219687134, 0.2084344029566273, 0.1986770922318101] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2335314219687134, 0.2084344029566273, 0.1986770922318101, 0.19392030004132538] ***
*** finished computation of 7 references, err: [Inf, 0.2335314219687134, 0.2084344029566273, 0.1986770922318101, 0.19392030004132538] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [47, 5, 0]]
** centroid: 1, normalized-entropy: 0.45668363153944286, [(1, 47), (2, 5)]
*** center 2: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 70, 15]]
** centroid: 3, normalized-entropy: 0.6722948170756378, [(2, 70), (3, 15)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 80, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [81, 9, 0]]
** centroid: 5, normalized-entropy: 0.46899559358928133, [(1, 81), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [69, 28, 0]]
** centroid: 6, normalized-entropy: 0.8669837150190186, [(1, 69), (2, 28)]
*** center 7: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25089107715710995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25089107715710995, 0.19594690746534615] ***
*** starting iteration: 2; err: [Inf, 0.25089107715710995, 0.19594690746534615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25089107715710995, 0.19594690746534615, 0.19235317450389267] ***
*** starting iteration: 3; err: [Inf, 0.25089107715710995, 0.19594690746534615, 0.19235317450389267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25089107715710995, 0.19594690746534615, 0.19235317450389267, 0.1902892609294504] ***
*** finished computation of 7 references, err: [Inf, 0.25089107715710995, 0.19594690746534615, 0.19235317450389267, 0.1902892609294504] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 58, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [30, 33, 0]]
** centroid: 2, normalized-entropy: 0.998363672593813, [(1, 30), (2, 33)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 8, 0]]
** centroid: 3, normalized-entropy: 0.5983474220910422, [(1, 47), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [76, 17, 0]]
** centroid: 4, normalized-entropy: 0.6861549474202007, [(1, 76), (2, 17)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 77, 17]]
** centroid: 5, normalized-entropy: 0.6819353204567525, [(2, 77), (3, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2302473979424685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2302473979424685, 0.19750243117660285] ***
*** starting iteration: 2; err: [Inf, 0.2302473979424685, 0.19750243117660285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2302473979424685, 0.19750243117660285, 0.19027011175826192] ***
*** starting iteration: 3; err: [Inf, 0.2302473979424685, 0.19750243117660285, 0.19027011175826192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2302473979424685, 0.19750243117660285, 0.19027011175826192, 0.1876026526540518] ***
*** finished computation of 7 references, err: [Inf, 0.2302473979424685, 0.19750243117660285, 0.19027011175826192, 0.1876026526540518] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 50, 20]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(2, 50), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 76, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [6, 48, 0]]
** centroid: 4, normalized-entropy: 0.5032583347756457, [(1, 6), (2, 48)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 2, 0]]
** centroid: 5, normalized-entropy: 0.21639693245126485, [(1, 56), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [105, 8, 0]]
** centroid: 6, normalized-entropy: 0.36888887962808253, [(1, 105), (2, 8)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [61, 4, 0]]
** centroid: 7, normalized-entropy: 0.33352200393097675, [(1, 61), (2, 4)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3314133836980909] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3314133836980909, 0.23704723563231528] ***
*** starting iteration: 2; err: [Inf, 0.3314133836980909, 0.23704723563231528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3314133836980909, 0.23704723563231528, 0.21955710128694772] ***
*** starting iteration: 3; err: [Inf, 0.3314133836980909, 0.23704723563231528, 0.21955710128694772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3314133836980909, 0.23704723563231528, 0.21955710128694772, 0.20820644987374545] ***
*** finished computation of 7 references, err: [Inf, 0.3314133836980909, 0.23704723563231528, 0.21955710128694772, 0.20820644987374545] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [79, 33, 0]]
** centroid: 1, normalized-entropy: 0.8746434484431391, [(1, 79), (2, 33)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 80, 20]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 80), (3, 20)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 33, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [26, 29, 0]]
** centroid: 6, normalized-entropy: 0.9978527766088781, [(1, 26), (2, 29)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [40, 6, 0]]
** centroid: 7, normalized-entropy: 0.5586293734521991, [(1, 40), (2, 6)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21875836780294777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21875836780294777, 0.1947622202783823] ***
*** starting iteration: 2; err: [Inf, 0.21875836780294777, 0.1947622202783823] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21875836780294777, 0.1947622202783823, 0.18978617864474653] ***
*** starting iteration: 3; err: [Inf, 0.21875836780294777, 0.1947622202783823, 0.18978617864474653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21875836780294777, 0.1947622202783823, 0.18978617864474653, 0.1887232957147062] ***
*** finished computation of 7 references, err: [Inf, 0.21875836780294777, 0.1947622202783823, 0.18978617864474653, 0.1887232957147062] ***
*** center 1: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [51, 26, 0]]
** centroid: 2, normalized-entropy: 0.9225641366401655, [(1, 51), (2, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [14, 49, 0]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(1, 14), (2, 49)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 94, 17]]
** centroid: 4, normalized-entropy: 0.6176751423955683, [(2, 94), (3, 17)]
*** center 5: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [61, 5, 0]]
** centroid: 6, normalized-entropy: 0.38705142139219795, [(1, 61), (2, 5)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [53, 20, 0]]
** centroid: 7, normalized-entropy: 0.847107490529376, [(1, 53), (2, 20)]
finished with 12 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 368,3 => 40,1 => 592), Dict(2 => 378,3 => 34,1 => 588))
[ Info: ===== scores for single classifier: {"micro_f1":0.941,"precision":0.941,"recall":0.941,"macro_recall":0.9552154195011338,"macro_f1":0.892092352887671,"accuracy":0.941,"class_f1":{"2":0.920592193808883,"3":0.7906976744186047,"1":0.9649871904355252},"class_precision":{"2":0.936986301369863,"3":0.6538461538461539,"1":0.9691252144082333},"class_recall":{"2":0.9047619047619048,"3":1.0,"1":0.9608843537414966}}
[ Info: ===== scores for 1: {"micro_f1":0.9810000000000001,"precision":0.981,"recall":0.981,"macro_recall":0.9870244394053916,"macro_f1":0.9688746085061987,"accuracy":0.981,"class_f1":{"2":0.9750328515111695,"3":0.9444444444444444,"1":0.987146529562982},"class_precision":{"2":0.9686684073107049,"3":0.8947368421052632,"1":0.9948186528497409},"class_recall":{"2":0.9814814814814815,"3":1.0,"1":0.9795918367346939}}
[ Info: ===== scores for 5: {"micro_f1":0.975,"precision":0.975,"recall":0.975,"macro_recall":0.9737561691343203,"macro_f1":0.9558640846844177,"accuracy":0.975,"class_f1":{"2":0.9672346002621232,"3":0.9166666666666667,"1":0.9836909871244635},"class_precision":{"2":0.9584415584415584,"3":0.868421052631579,"1":0.9930675909878682},"class_recall":{"2":0.9761904761904762,"3":0.9705882352941176,"1":0.9744897959183674}}
[ Info: ===== scores for 7: {"micro_f1":0.977,"precision":0.977,"recall":0.977,"macro_recall":0.9847568657092466,"macro_f1":0.958070336638508,"accuracy":0.977,"class_f1":{"2":0.9699346405228758,"3":0.9189189189189189,"1":0.9853574504737296},"class_precision":{"2":0.958656330749354,"3":0.85,"1":0.9982547993019197},"class_recall":{"2":0.9814814814814815,"3":1.0,"1":0.9727891156462585}}
[ Info: ===== scores for 9: {"micro_f1":0.975,"precision":0.975,"recall":0.975,"macro_recall":0.9833081380700429,"macro_f1":0.9528232289084215,"accuracy":0.975,"class_f1":{"2":0.9673202614379084,"3":0.9066666666666667,"1":0.9844827586206897},"class_precision":{"2":0.9560723514211886,"3":0.8292682926829268,"1":0.9982517482517482},"class_recall":{"2":0.9788359788359788,"3":1.0,"1":0.9710884353741497}}
[ Info: ===== scores for 11: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9784580498866213,"macro_f1":0.9398273311211054,"accuracy":0.967,"class_f1":{"2":0.9571984435797665,"3":0.8831168831168831,"1":0.9791666666666666},"class_precision":{"2":0.9389312977099237,"3":0.7906976744186046,"1":1.0},"class_recall":{"2":0.9761904761904762,"3":1.0,"1":0.9591836734693877}}
(score = 0.981, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.981, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.975, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.975, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.981,"k":1,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.9810000000000001,"precision":0.981,"recall":0.981,"macro_recall":0.9870244394053916,"macro_f1":0.9688746085061987,"accuracy":0.981,"class_f1":{"2":0.9750328515111695,"3":0.9444444444444444,"1":0.987146529562982},"class_precision":{"2":0.9686684073107049,"3":0.8947368421052632,"1":0.9948186528497409},"class_recall":{"2":0.9814814814814815,"3":1.0,"1":0.9795918367346939}}
Test Summary: | Pass  Total
AKNC          |    8      8
[293, 4, 1, 2, 3, 1, 2, 3, 2, 2, 2, 7, 1, 1, 9, 7, 9, 3, 2, 30, 2, 2, 13, 4, 3, 10, 60, 5, 86, 1, 2, 4, 3, 9, 7, 26, 2, 17, 3, 10, 3, 2, 3, 30, 8, 22, 11, 5, 10, 18, 15, 21, 51, 21, 61, 7, 5, 4, 4, 13, 42, 17, 19, 122, 7, 42, 5, 57, 10, 14, 18, 7, 5, 6, 4, 5, 8, 53, 77, 8, 12, 9, 18, 1, 13, 10, 2, 18, 12, 8, 12, 2, 21, 9, 3, 2, 32, 73, 7, 142, 6, 30, 35, 27, 16, 2, 58, 36, 12, 64, 23, 6, 29, 8, 31, 7, 1, 75, 19, 7, 64, 34, 4, 3, 17, 15, 28, 27, 20, 25, 1, 41, 10, 237, 2, 21, 14, 123, 4, 47, 67, 55, 2, 12, 35, 13, 21, 10, 21, 20, 29, 12, 9, 18, 2, 51, 5, 15, 5, 157, 35, 5, 28, 6, 12, 510, 16, 38, 1, 28, 6, 136, 16, 33, 8, 7, 20, 1, 32, 44, 69, 37, 18, 37, 4, 14, 7, 624, 8, 25, 19, 18, 18, 67, 43, 36, 11, 1, 305, 171, 20, 32, 72, 60, 12, 19, 22, 34, 18, 7, 7, 41, 44, 45, 15, 53, 74, 30, 9, 3, 9, 5, 13, 3, 33, 20, 8, 8, 118, 12, 42, 10, 154, 52, 5, 28, 31, 13, 4, 6, 3, 11, 173, 9, 15, 49, 22, 10, 26, 38, 28, 1, 10, 35, 12, 6, 36, 12, 32, 35, 4, 46, 20, 49, 59, 14, 3, 15, 20, 6, 4, 6, 10, 17, 17, 27, 143, 11, 2, 9, 47, 67, 16, 67, 83, 370, 10, 22, 133, 8, 5, 19, 301, 158, 7, 30, 8, 26, 30, 156]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6509999999999999, speedup = 0.2837182831039214, eval_ratio = 0.070713)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.41246589781746024,"recall":0.38194444444444436,"f1":null,"seconds":0.00014334730803966522,"exhaustive_search_seconds":0.0003571249544620514,"evaluations":430.265625,"distances_sum":1708.2053389287503}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.552083333333333,"recall":0.552083333333333,"f1":null,"seconds":0.00022367946803569794,"exhaustive_search_seconds":0.0003571249544620514,"evaluations":536.0390625,"distances_sum":1695.0706052896182}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6571180555555554,"recall":0.6571180555555554,"f1":null,"seconds":0.00034806132316589355,"exhaustive_search_seconds":0.0003571249544620514,"evaluations":669.15625,"distances_sum":1631.4205712003543}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7309027777777776,"recall":0.7309027777777776,"f1":null,"seconds":0.0004381965845823288,"exhaustive_search_seconds":0.0003571249544620514,"evaluations":751.8359375,"distances_sum":1607.0545022975286}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7890624999999996,"recall":0.7890624999999996,"f1":0.7890624999999996,"seconds":0.0008144937455654144,"exhaustive_search_seconds":0.0003571249544620514,"evaluations":854.7890625,"distances_sum":1587.2012286832776}
KCenters.DeloneInvIndex> reached performance {"precision":0.8229166666666662,"recall":0.8229166666666662,"f1":0.8229166666666662,"seconds":0.0005942210555076599,"exhaustive_search_seconds":0.0003571249544620514,"evaluations":955.265625,"distances_sum":1576.985682500331}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8079999999999999, speedup = 0.5369096401225387, eval_ratio = 0.09980399999999999)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
