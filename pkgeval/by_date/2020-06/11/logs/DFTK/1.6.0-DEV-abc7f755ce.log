Julia Version 1.6.0-DEV.212
Commit abc7f755ce (2020-06-11 14:44 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed AxisAlgorithms ─────────────── v1.0.0
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed WoodburyMatrices ───────────── v0.5.2
  Installed Ratios ─────────────────────── v0.4.0
  Installed Primes ─────────────────────── v0.4.0
  Installed CFTime ─────────────────────── v0.1.0
  Installed DFTK ───────────────────────── v0.1.3
  Installed IniFile ────────────────────── v0.5.0
  Installed Measures ───────────────────── v0.3.1
  Installed PlotUtils ──────────────────── v1.0.5
  Installed EzXML ──────────────────────── v1.1.0
  Installed NLSolversBase ──────────────── v7.6.1
  Installed Unitful ────────────────────── v1.2.1
  Installed ColorSchemes ───────────────── v3.9.0
  Installed StaticArrays ───────────────── v0.12.3
  Installed MbedTLS_jll ────────────────── v2.16.0+2
  Installed ExprTools ──────────────────── v0.1.1
  Installed CondaBinDeps ───────────────── v0.2.0
  Installed Parameters ─────────────────── v0.12.1
  Installed FFMPEG_jll ─────────────────── v4.1.0+3
  Installed ConstructionBase ───────────── v1.0.0
  Installed GenericLinearAlgebra ───────── v0.2.3
  Installed Libxc_jll ──────────────────── v5.0.0+1
  Installed LineSearches ───────────────── v7.0.1
  Installed PyCall ─────────────────────── v1.91.4
  Installed StatsBase ──────────────────── v0.33.0
  Installed Optim ──────────────────────── v0.21.0
  Installed XML2_jll ───────────────────── v2.9.9+4
  Installed PositiveFactorizations ─────── v0.2.3
  Installed Mocking ────────────────────── v0.7.1
  Installed x265_jll ───────────────────── v3.0.0+1
  Installed LinearMaps ─────────────────── v2.6.1
  Installed ArrayInterface ─────────────── v2.8.7
  Installed FreeType2_jll ──────────────── v2.10.1+2
  Installed PeriodicTable ──────────────── v1.0.0
  Installed FixedPointNumbers ──────────── v0.8.0
  Installed IterativeSolvers ───────────── v0.8.4
  Installed LAME_jll ───────────────────── v3.100.0+1
  Installed Missings ───────────────────── v0.4.3
  Installed LibVPX_jll ─────────────────── v1.8.1+1
  Installed AbstractFFTs ───────────────── v0.5.0
  Installed Colors ─────────────────────── v0.12.2
  Installed Requires ───────────────────── v1.0.1
  Installed DataAPI ────────────────────── v1.3.0
  Installed Plots ──────────────────────── v1.4.0
  Installed FFTW_jll ───────────────────── v3.3.9+5
  Installed Bzip2_jll ──────────────────── v1.0.6+2
  Installed FFTW ───────────────────────── v1.2.2
  Installed FiniteDiff ─────────────────── v2.3.2
  Installed libass_jll ─────────────────── v0.14.0+2
  Installed libfdk_aac_jll ─────────────── v0.1.6+2
  Installed RecipesPipeline ────────────── v0.1.10
  Installed VersionParsing ─────────────── v1.2.0
  Installed URIParser ──────────────────── v0.4.1
  Installed ColorTypes ─────────────────── v0.10.3
  Installed Contour ────────────────────── v0.5.3
  Installed OpenSSL_jll ────────────────── v1.1.1+2
  Installed Parsers ────────────────────── v1.0.5
  Installed DiffRules ──────────────────── v1.0.1
  Installed TimeZones ──────────────────── v1.2.0
  Installed ForwardDiff ────────────────── v0.10.10
  Installed MbedTLS ────────────────────── v1.0.2
  Installed Opus_jll ───────────────────── v1.3.1+1
  Installed Roots ──────────────────────── v1.0.1
  Installed Showoff ────────────────────── v0.3.1
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed FillArrays ─────────────────── v0.8.10
  Installed Intervals ──────────────────── v1.2.0
  Installed NCDatasets ─────────────────── v0.10.2
  Installed MacroTools ─────────────────── v0.5.5
  Installed SpecialFunctions ───────────── v0.10.3
  Installed DataStructures ─────────────── v0.17.17
  Installed OrderedCollections ─────────── v1.2.0
  Installed IntelOpenMP_jll ────────────── v2018.0.3+0
  Installed ProgressMeter ──────────────── v1.3.0
  Installed UnPack ─────────────────────── v1.0.1
  Installed Ogg_jll ────────────────────── v1.3.4+0
  Installed NaNMath ────────────────────── v0.3.3
  Installed OffsetArrays ───────────────── v1.0.4
  Installed Polynomials ────────────────── v1.1.1
  Installed Compat ─────────────────────── v3.11.0
  Installed Zlib_jll ───────────────────── v1.2.11+10
  Installed MKL_jll ────────────────────── v2020.1.216+0
  Installed RecipesBase ────────────────── v1.0.1
  Installed Libxc ──────────────────────── v0.3.2
  Installed DiffResults ────────────────── v1.0.2
  Installed x264_jll ───────────────────── v2019.5.25+2
  Installed libvorbis_jll ──────────────── v1.3.6+4
  Installed FFMPEG ─────────────────────── v0.3.0
  Installed FriBidi_jll ────────────────── v1.0.5+3
  Installed TimerOutputs ───────────────── v0.5.6
  Installed Reexport ───────────────────── v0.2.0
  Installed Conda ──────────────────────── v1.4.1
  Installed JSON ───────────────────────── v0.21.0
  Installed GR ─────────────────────────── v0.50.1
  Installed HTTP ───────────────────────── v0.8.15
  Installed IterTools ──────────────────── v1.3.0
  Installed BinDeps ────────────────────── v1.0.1
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed Libiconv_jll ───────────────── v1.16.0+2
  Installed Distances ──────────────────── v0.8.2
  Installed CommonSubexpressions ───────── v0.2.0
  Installed PlotThemes ─────────────────── v2.0.0
  Installed NLsolve ────────────────────── v4.3.0
  Installed GeometryTypes ──────────────── v0.8.3
  Installed Interpolations ─────────────── v0.12.10
Updating `~/.julia/environments/v1.6/Project.toml`
  [acf6eb54] + DFTK v0.1.3
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [4fba245c] + ArrayInterface v2.8.7
  [13072b0f] + AxisAlgorithms v1.0.0
  [9e28174c] + BinDeps v1.0.1
  [6e34b625] + Bzip2_jll v1.0.6+2
  [179af706] + CFTime v0.1.0
  [35d6a980] + ColorSchemes v3.9.0
  [3da002f7] + ColorTypes v0.10.3
  [5ae59095] + Colors v0.12.2
  [bbf7d656] + CommonSubexpressions v0.2.0
  [34da2185] + Compat v3.11.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [8f4d0f93] + Conda v1.4.1
  [a9693cdc] + CondaBinDeps v0.2.0
  [187b0558] + ConstructionBase v1.0.0
  [d38c429a] + Contour v0.5.3
  [acf6eb54] + DFTK v0.1.3
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.17.17
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [b4f34e82] + Distances v0.8.2
  [e2ba6199] + ExprTools v0.1.1
  [8f5d6c58] + EzXML v1.1.0
  [c87230d0] + FFMPEG v0.3.0
  [b22a6f82] + FFMPEG_jll v4.1.0+3
  [7a1cc6ca] + FFTW v1.2.2
  [f5851436] + FFTW_jll v3.3.9+5
  [1a297f60] + FillArrays v0.8.10
  [6a86dc24] + FiniteDiff v2.3.2
  [53c48c17] + FixedPointNumbers v0.8.0
  [f6369f11] + ForwardDiff v0.10.10
  [d7e528f0] + FreeType2_jll v2.10.1+2
  [559328eb] + FriBidi_jll v1.0.5+3
  [28b8d3ca] + GR v0.50.1
  [14197337] + GenericLinearAlgebra v0.2.3
  [4d00f742] + GeometryTypes v0.8.3
  [cd3eb016] + HTTP v0.8.15
  [83e8ac13] + IniFile v0.5.0
  [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+0
  [a98d9a8b] + Interpolations v0.12.10
  [d8418881] + Intervals v1.2.0
  [c8e1da08] + IterTools v1.3.0
  [42fd0dbc] + IterativeSolvers v0.8.4
  [682c06a0] + JSON v0.21.0
  [c1c5ebd0] + LAME_jll v3.100.0+1
  [dd192d2f] + LibVPX_jll v1.8.1+1
  [94ce4f54] + Libiconv_jll v1.16.0+2
  [66e17ffc] + Libxc v0.3.2
  [a56a6d9d] + Libxc_jll v5.0.0+1
  [d3d80556] + LineSearches v7.0.1
  [7a12625a] + LinearMaps v2.6.1
  [856f044c] + MKL_jll v2020.1.216+0
  [1914dd2f] + MacroTools v0.5.5
  [739be429] + MbedTLS v1.0.2
  [c8ffd9c3] + MbedTLS_jll v2.16.0+2
  [442fdcdd] + Measures v0.3.1
  [e1d29d7a] + Missings v0.4.3
  [78c3b35d] + Mocking v0.7.1
  [85f8d34a] + NCDatasets v0.10.2
  [d41bc354] + NLSolversBase v7.6.1
  [2774e3e8] + NLsolve v4.3.0
  [77ba4419] + NaNMath v0.3.3
  [6fe1bfb0] + OffsetArrays v1.0.4
  [e7412a2a] + Ogg_jll v1.3.4+0
  [458c3c95] + OpenSSL_jll v1.1.1+2
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [429524aa] + Optim v0.21.0
  [91d4177d] + Opus_jll v1.3.1+1
  [bac558e1] + OrderedCollections v1.2.0
  [d96e819e] + Parameters v0.12.1
  [69de0a69] + Parsers v1.0.5
  [7b2266bf] + PeriodicTable v1.0.0
  [ccf2f8ad] + PlotThemes v2.0.0
  [995b91a9] + PlotUtils v1.0.5
  [91a5bcdd] + Plots v1.4.0
  [f27b6e38] + Polynomials v1.1.1
  [85a6dd25] + PositiveFactorizations v0.2.3
  [27ebfcd6] + Primes v0.4.0
  [92933f4c] + ProgressMeter v1.3.0
  [438e738f] + PyCall v1.91.4
  [c84ed2f1] + Ratios v0.4.0
  [3cdcf5f2] + RecipesBase v1.0.1
  [01d81517] + RecipesPipeline v0.1.10
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.1
  [f2b01f46] + Roots v1.0.1
  [992d4aef] + Showoff v0.3.1
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.3
  [2913bbd2] + StatsBase v0.33.0
  [f269a46b] + TimeZones v1.2.0
  [a759f4b9] + TimerOutputs v0.5.6
  [30578b45] + URIParser v0.4.1
  [3a884ed6] + UnPack v1.0.1
  [1986cc42] + Unitful v1.2.1
  [81def892] + VersionParsing v1.2.0
  [efce3f68] + WoodburyMatrices v0.5.2
  [02c8fc9c] + XML2_jll v2.9.9+4
  [83775a58] + Zlib_jll v1.2.11+10
  [0ac62f75] + libass_jll v0.14.0+2
  [f638f0a6] + libfdk_aac_jll v0.1.6+2
  [f27f6e37] + libvorbis_jll v1.3.6+4
  [1270edf5] + x264_jll v2019.5.25+2
  [dfaa095f] + x265_jll v3.0.0+1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building Conda ─────→ `~/.julia/packages/Conda/3rPhK/deps/build.log`
   Building PyCall ────→ `~/.julia/packages/PyCall/zqDXB/deps/build.log`
   Building GR ────────→ `~/.julia/packages/GR/Atztx/deps/build.log`
   Building Plots ─────→ `~/.julia/packages/Plots/sbXPh/deps/build.log`
   Building TimeZones ─→ `~/.julia/packages/TimeZones/OjMoF/deps/build.log`
   Building NCDatasets → `~/.julia/packages/NCDatasets/KjkFI/deps/build.log`
   Building FFTW ──────→ `~/.julia/packages/FFTW/kcXL6/deps/build.log`
   Building DFTK ──────→ `~/.julia/packages/DFTK/2Obx8/deps/build.log`
    Testing DFTK
Status `/tmp/jl_q4OjiD/Project.toml`
  [621f4979] AbstractFFTs v0.5.0
  [8f4d0f93] Conda v1.4.1
  [acf6eb54] DFTK v0.1.3
  [497a8b3b] DoubleFloats v1.1.11
  [7a1cc6ca] FFTW v1.2.2
  [f6369f11] ForwardDiff v0.10.10
  [14197337] GenericLinearAlgebra v0.2.3
  [a98d9a8b] Interpolations v0.12.10
  [d1acc4aa] IntervalArithmetic v0.16.1
  [c8e1da08] IterTools v1.3.0
  [42fd0dbc] IterativeSolvers v0.8.4
  [682c06a0] JSON v0.21.0
  [0b1a1467] KrylovKit v0.4.2
  [66e17ffc] Libxc v0.3.2
  [d3d80556] LineSearches v7.0.1
  [7a12625a] LinearMaps v2.6.1
  [85f8d34a] NCDatasets v0.10.2
  [2774e3e8] NLsolve v4.3.0
  [429524aa] Optim v0.21.0
  [bac558e1] OrderedCollections v1.2.0
  [7b2266bf] PeriodicTable v1.0.0
  [91a5bcdd] Plots v1.4.0
  [f27b6e38] Polynomials v1.1.1
  [27ebfcd6] Primes v0.4.0
  [92933f4c] ProgressMeter v1.3.0
  [438e738f] PyCall v1.91.4
  [ae029012] Requires v1.0.1
  [f2b01f46] Roots v1.0.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.3
  [a759f4b9] TimerOutputs v0.5.6
  [37e2e46d] LinearAlgebra
  [d6f4376e] Markdown
  [de0858da] Printf
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_q4OjiD/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [4fba245c] ArrayInterface v2.8.7
  [13072b0f] AxisAlgorithms v1.0.0
  [9e28174c] BinDeps v1.0.1
  [6e34b625] Bzip2_jll v1.0.6+2
  [179af706] CFTime v0.1.0
  [96374032] CRlibm v0.8.0
  [35d6a980] ColorSchemes v3.9.0
  [3da002f7] ColorTypes v0.10.3
  [5ae59095] Colors v0.12.2
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v3.11.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [8f4d0f93] Conda v1.4.1
  [a9693cdc] CondaBinDeps v0.2.0
  [187b0558] ConstructionBase v1.0.0
  [d38c429a] Contour v0.5.3
  [acf6eb54] DFTK v0.1.3
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.17.17
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.8.2
  [497a8b3b] DoubleFloats v1.1.11
  [90fa49ef] ErrorfreeArithmetic v0.5.0
  [e2ba6199] ExprTools v0.1.1
  [8f5d6c58] EzXML v1.1.0
  [c87230d0] FFMPEG v0.3.0
  [b22a6f82] FFMPEG_jll v4.1.0+3
  [7a1cc6ca] FFTW v1.2.2
  [f5851436] FFTW_jll v3.3.9+5
  [fa42c844] FastRounding v0.3.1
  [1a297f60] FillArrays v0.8.10
  [6a86dc24] FiniteDiff v2.3.2
  [53c48c17] FixedPointNumbers v0.8.0
  [f6369f11] ForwardDiff v0.10.10
  [d7e528f0] FreeType2_jll v2.10.1+2
  [559328eb] FriBidi_jll v1.0.5+3
  [28b8d3ca] GR v0.50.1
  [14197337] GenericLinearAlgebra v0.2.3
  [01680d73] GenericSVD v0.3.0
  [c145ed77] GenericSchur v0.4.0
  [4d00f742] GeometryTypes v0.8.3
  [cd3eb016] HTTP v0.8.15
  [83e8ac13] IniFile v0.5.0
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [a98d9a8b] Interpolations v0.12.10
  [d1acc4aa] IntervalArithmetic v0.16.1
  [d8418881] Intervals v1.2.0
  [c8e1da08] IterTools v1.3.0
  [42fd0dbc] IterativeSolvers v0.8.4
  [682c06a0] JSON v0.21.0
  [0b1a1467] KrylovKit v0.4.2
  [c1c5ebd0] LAME_jll v3.100.0+1
  [dd192d2f] LibVPX_jll v1.8.1+1
  [94ce4f54] Libiconv_jll v1.16.0+2
  [66e17ffc] Libxc v0.3.2
  [a56a6d9d] Libxc_jll v5.0.0+1
  [d3d80556] LineSearches v7.0.1
  [7a12625a] LinearMaps v2.6.1
  [856f044c] MKL_jll v2020.1.216+0
  [1914dd2f] MacroTools v0.5.5
  [739be429] MbedTLS v1.0.2
  [c8ffd9c3] MbedTLS_jll v2.16.0+2
  [442fdcdd] Measures v0.3.1
  [e1d29d7a] Missings v0.4.3
  [78c3b35d] Mocking v0.7.1
  [85f8d34a] NCDatasets v0.10.2
  [d41bc354] NLSolversBase v7.6.1
  [2774e3e8] NLsolve v4.3.0
  [77ba4419] NaNMath v0.3.3
  [6fe1bfb0] OffsetArrays v1.0.4
  [e7412a2a] Ogg_jll v1.3.4+0
  [458c3c95] OpenSSL_jll v1.1.1+2
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [429524aa] Optim v0.21.0
  [91d4177d] Opus_jll v1.3.1+1
  [bac558e1] OrderedCollections v1.2.0
  [d96e819e] Parameters v0.12.1
  [69de0a69] Parsers v1.0.5
  [7b2266bf] PeriodicTable v1.0.0
  [ccf2f8ad] PlotThemes v2.0.0
  [995b91a9] PlotUtils v1.0.5
  [91a5bcdd] Plots v1.4.0
  [f27b6e38] Polynomials v1.1.1
  [85a6dd25] PositiveFactorizations v0.2.3
  [27ebfcd6] Primes v0.4.0
  [92933f4c] ProgressMeter v1.3.0
  [438e738f] PyCall v1.91.4
  [be4d8f0f] Quadmath v0.5.4
  [c84ed2f1] Ratios v0.4.0
  [3cdcf5f2] RecipesBase v1.0.1
  [01d81517] RecipesPipeline v0.1.10
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [f2b01f46] Roots v1.0.1
  [3cc68bcd] SetRounding v0.2.0
  [992d4aef] Showoff v0.3.1
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.3
  [2913bbd2] StatsBase v0.33.0
  [f269a46b] TimeZones v1.2.0
  [a759f4b9] TimerOutputs v0.5.6
  [30578b45] URIParser v0.4.1
  [3a884ed6] UnPack v1.0.1
  [1986cc42] Unitful v1.2.1
  [81def892] VersionParsing v1.2.0
  [efce3f68] WoodburyMatrices v0.5.2
  [02c8fc9c] XML2_jll v2.9.9+4
  [83775a58] Zlib_jll v1.2.11+10
  [0ac62f75] libass_jll v0.14.0+2
  [f638f0a6] libfdk_aac_jll v0.1.6+2
  [f27f6e37] libvorbis_jll v1.3.6+4
  [1270edf5] x264_jll v2019.5.25+2
  [dfaa095f] x265_jll v3.0.0+1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
   Running fast tests (TAGS = all).
Hydrogen anion all electron: Error During Test at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/hydrogen_all_electron.jl:5
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package spglib could not be found by pyimport. Usually this means
  that you did not install spglib in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the spglib module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the spglib module, you can use `pyimport_conda("spglib", PKG)`,
  where PKG is the Anaconda package the contains the module spglib,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'spglib'",)
  
  Stacktrace:
   [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] spglib_get_symmetry(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Pair{ElementCoulomb,Array{Array{Float64,1},1}},1}; tol_symmetry::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/external/spglib.jl:37
   [3] symmetry_operations(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Pair{ElementCoulomb,Array{Array{Float64,1},1}},1}; tol_symmetry::Float64, kcoords::Nothing) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:51
   [4] symmetry_operations at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:49 [inlined]
   [5] Model(::Array{Float64,2}; n_electrons::Int64, atoms::Array{Pair{ElementCoulomb,Array{Array{Float64,1},1}},1}, terms::Array{Any,1}, temperature::Float64, smearing::Nothing, spin_polarization::Symbol, symmetry::Symbol) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:129
   [6] model_atomic(::Array{Float64,2}, ::Array{Pair{ElementCoulomb,Array{Array{Float64,1},1}},1}; extra_terms::Array{Any,1}, kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:n_electrons,),Tuple{Int64}}}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:154
   [7] model_DFT(::Array{Float64,2}, ::Array{Pair{ElementCoulomb,Array{Array{Float64,1},1}},1}, ::Array{Any,1}; extra_terms::Array{Any,1}, kwargs::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol},NamedTuple{(:n_electrons,),Tuple{Int64}}}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:162
   [8] (::var"#energy_forces#4"{var"#energy_forces#3#5"})(; Ecut::Int64, tol::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/hydrogen_all_electron.jl:9
   [9] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/hydrogen_all_electron.jl:17
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [11] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/hydrogen_all_electron.jl:6
   [12] include(::String) at ./client.jl:444
   [13] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:38
   [14] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [15] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:37
   [16] include(::String) at ./client.jl:444
   [17] top-level scope at none:6
   [18] eval(::Module, ::Any) at ./boot.jl:331
   [19] exec_options(::Base.JLOptions) at ./client.jl:260
   [20] _start() at ./client.jl:485
  
SCF of silicon without exchange-correlation (small): Error During Test at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_redHF.jl:4
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package spglib could not be found by pyimport. Usually this means
  that you did not install spglib in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the spglib module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the spglib module, you can use `pyimport_conda("spglib", PKG)`,
  where PKG is the Anaconda package the contains the module spglib,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'spglib'",)
  
  Stacktrace:
   [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] spglib_get_symmetry(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; tol_symmetry::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/external/spglib.jl:37
   [3] symmetry_operations(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; tol_symmetry::Float64, kcoords::Nothing) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:51
   [4] symmetry_operations at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:49 [inlined]
   [5] Model(::Array{Float64,2}; n_electrons::Nothing, atoms::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}, terms::Array{Any,1}, temperature::Float64, smearing::Nothing, spin_polarization::Symbol, symmetry::Symbol) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:129
   [6] model_atomic(::Array{Float64,2}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; extra_terms::Array{Any,1}, kwargs::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol},NamedTuple{(:temperature,),Tuple{Float64}}}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:154
   [7] model_DFT(::Array{Float64,2}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}, ::Array{Any,1}; extra_terms::Array{Any,1}, kwargs::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol},NamedTuple{(:temperature,),Tuple{Float64}}}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:162
   [8] run_silicon_redHF(::Type{T} where T; Ecut::Int64, test_tol::Float64, n_ignored::Int64, grid_size::Int64, scf_tol::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_runners.jl:34
   [9] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_redHF.jl:5
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [11] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_redHF.jl:5
   [12] include(::String) at ./client.jl:444
   [13] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:39
   [14] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [15] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:37
   [16] include(::String) at ./client.jl:444
   [17] top-level scope at none:6
   [18] eval(::Module, ::Any) at ./boot.jl:331
   [19] exec_options(::Base.JLOptions) at ./client.jl:260
   [20] _start() at ./client.jl:485
  
Silicon LDA (small, Double32): Error During Test at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_redHF.jl:15
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package spglib could not be found by pyimport. Usually this means
  that you did not install spglib in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the spglib module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the spglib module, you can use `pyimport_conda("spglib", PKG)`,
  where PKG is the Anaconda package the contains the module spglib,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'spglib'",)
  
  Stacktrace:
   [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] spglib_get_symmetry(::StaticArrays.SArray{Tuple{3,3},Double32,2,9}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; tol_symmetry::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/external/spglib.jl:37
   [3] symmetry_operations(::StaticArrays.SArray{Tuple{3,3},Double32,2,9}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; tol_symmetry::Float64, kcoords::Nothing) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:51
   [4] symmetry_operations at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:49 [inlined]
   [5] Model(::Array{Double32,2}; n_electrons::Nothing, atoms::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}, terms::Array{Any,1}, temperature::Float64, smearing::Nothing, spin_polarization::Symbol, symmetry::Symbol) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:129
   [6] model_atomic(::Array{Double32,2}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; extra_terms::Array{Any,1}, kwargs::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol},NamedTuple{(:temperature,),Tuple{Float64}}}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:154
   [7] model_DFT(::Array{Double32,2}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}, ::Array{Any,1}; extra_terms::Array{Any,1}, kwargs::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol},NamedTuple{(:temperature,),Tuple{Float64}}}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:162
   [8] run_silicon_redHF(::Type{T} where T; Ecut::Int64, test_tol::Float64, n_ignored::Int64, grid_size::Int64, scf_tol::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_runners.jl:34
   [9] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_redHF.jl:16
   [10] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [11] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_redHF.jl:16
   [12] include(::String) at ./client.jl:444
   [13] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:39
   [14] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [15] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:37
   [16] include(::String) at ./client.jl:444
   [17] top-level scope at none:6
   [18] eval(::Module, ::Any) at ./boot.jl:331
   [19] exec_options(::Base.JLOptions) at ./client.jl:260
   [20] _start() at ./client.jl:485
  
Silicon LDA (small, Float64): Error During Test at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_lda.jl:3
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package spglib could not be found by pyimport. Usually this means
  that you did not install spglib in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the spglib module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the spglib module, you can use `pyimport_conda("spglib", PKG)`,
  where PKG is the Anaconda package the contains the module spglib,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'spglib'",)
  
  Stacktrace:
   [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] spglib_get_symmetry(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; tol_symmetry::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/external/spglib.jl:37
   [3] symmetry_operations(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; tol_symmetry::Float64, kcoords::Nothing) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:51
   [4] symmetry_operations at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:49 [inlined]
   [5] Model(::Array{Float64,2}; n_electrons::Nothing, atoms::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}, terms::Array{Any,1}, temperature::Float64, smearing::Nothing, spin_polarization::Symbol, symmetry::Symbol) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:129
   [6] model_atomic(::Array{Float64,2}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; extra_terms::Array{Any,1}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:154
   [7] model_DFT(::Array{Float64,2}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}, ::Array{Symbol,1}; extra_terms::Array{Any,1}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:162
   [8] model_DFT(::Array{Float64,2}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}, ::Array{Symbol,1}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:162
   [9] run_silicon_lda(::Type{T} where T; Ecut::Int64, test_tol::Float64, n_ignored::Int64, grid_size::Int64, scf_tol::Float64, n_noconv_check::Int64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_runners.jl:72
   [10] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_lda.jl:4
   [11] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [12] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_lda.jl:4
   [13] include(::String) at ./client.jl:444
   [14] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:40
   [15] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [16] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:37
   [17] include(::String) at ./client.jl:444
   [18] top-level scope at none:6
   [19] eval(::Module, ::Any) at ./boot.jl:331
   [20] exec_options(::Base.JLOptions) at ./client.jl:260
   [21] _start() at ./client.jl:485
  
Silicon LDA (small, Float32): Error During Test at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_lda.jl:14
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package spglib could not be found by pyimport. Usually this means
  that you did not install spglib in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the spglib module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the spglib module, you can use `pyimport_conda("spglib", PKG)`,
  where PKG is the Anaconda package the contains the module spglib,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'spglib'",)
  
  Stacktrace:
   [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] spglib_get_symmetry(::StaticArrays.SArray{Tuple{3,3},Float32,2,9}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; tol_symmetry::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/external/spglib.jl:37
   [3] symmetry_operations(::StaticArrays.SArray{Tuple{3,3},Float32,2,9}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; tol_symmetry::Float64, kcoords::Nothing) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:51
   [4] symmetry_operations at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:49 [inlined]
   [5] Model(::Array{Float32,2}; n_electrons::Nothing, atoms::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}, terms::Array{Any,1}, temperature::Float32, smearing::Nothing, spin_polarization::Symbol, symmetry::Symbol) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:129
   [6] model_atomic(::Array{Float32,2}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; extra_terms::Array{Any,1}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:154
   [7] model_DFT(::Array{Float32,2}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}, ::Array{Symbol,1}; extra_terms::Array{Any,1}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:162
   [8] model_DFT(::Array{Float32,2}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}, ::Array{Symbol,1}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:162
   [9] run_silicon_lda(::Type{T} where T; Ecut::Int64, test_tol::Float64, n_ignored::Int64, grid_size::Int64, scf_tol::Float64, n_noconv_check::Int64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_runners.jl:72
   [10] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_lda.jl:15
   [11] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [12] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_lda.jl:15
   [13] include(::String) at ./client.jl:444
   [14] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:40
   [15] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [16] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:37
   [17] include(::String) at ./client.jl:444
   [18] top-level scope at none:6
   [19] eval(::Module, ::Any) at ./boot.jl:331
   [20] exec_options(::Base.JLOptions) at ./client.jl:260
   [21] _start() at ./client.jl:485
  
Silicon PBE (small, Float64): Error During Test at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_pbe.jl:3
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package spglib could not be found by pyimport. Usually this means
  that you did not install spglib in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the spglib module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the spglib module, you can use `pyimport_conda("spglib", PKG)`,
  where PKG is the Anaconda package the contains the module spglib,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'spglib'",)
  
  Stacktrace:
   [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] spglib_get_symmetry(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; tol_symmetry::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/external/spglib.jl:37
   [3] symmetry_operations(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; tol_symmetry::Float64, kcoords::Nothing) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:51
   [4] symmetry_operations at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:49 [inlined]
   [5] Model(::Array{Float64,2}; n_electrons::Nothing, atoms::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}, terms::Array{Any,1}, temperature::Float64, smearing::Nothing, spin_polarization::Symbol, symmetry::Symbol) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:129
   [6] model_atomic(::Array{Float64,2}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; extra_terms::Array{Any,1}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:154
   [7] model_DFT(::Array{Float64,2}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}, ::Array{Symbol,1}; extra_terms::Array{Any,1}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:162
   [8] model_DFT(::Array{Float64,2}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}, ::Array{Symbol,1}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:162
   [9] run_silicon_pbe(::Type{T} where T; Ecut::Int64, test_tol::Float64, n_ignored::Int64, grid_size::Int64, scf_tol::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_runners.jl:116
   [10] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_pbe.jl:4
   [11] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [12] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/silicon_pbe.jl:4
   [13] include(::String) at ./client.jl:444
   [14] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:41
   [15] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [16] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:37
   [17] include(::String) at ./client.jl:444
   [18] top-level scope at none:6
   [19] eval(::Module, ::Any) at ./boot.jl:331
   [20] exec_options(::Base.JLOptions) at ./client.jl:260
   [21] _start() at ./client.jl:485
  
Compare different SCF algorithms: Error During Test at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/scf_compare.jl:6
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package spglib could not be found by pyimport. Usually this means
  that you did not install spglib in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the spglib module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the spglib module, you can use `pyimport_conda("spglib", PKG)`,
  where PKG is the Anaconda package the contains the module spglib,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'spglib'",)
  
  Stacktrace:
   [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] spglib_get_symmetry(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; tol_symmetry::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/external/spglib.jl:37
   [3] symmetry_operations(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; tol_symmetry::Float64, kcoords::Nothing) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:51
   [4] symmetry_operations at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:49 [inlined]
   [5] Model(::Array{Float64,2}; n_electrons::Nothing, atoms::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}, terms::Array{Any,1}, temperature::Float64, smearing::Nothing, spin_polarization::Symbol, symmetry::Symbol) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:129
   [6] model_atomic(::Array{Float64,2}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; extra_terms::Array{Any,1}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:154
   [7] model_DFT(::Array{Float64,2}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}, ::Array{Symbol,1}; extra_terms::Array{Any,1}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:162
   [8] model_DFT(::Array{Float64,2}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}, ::Array{Symbol,1}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:162
   [9] macro expansion at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/scf_compare.jl:13 [inlined]
   [10] macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
   [11] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/scf_compare.jl:7
   [12] include(::String) at ./client.jl:444
   [13] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:42
   [14] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [15] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:37
   [16] include(::String) at ./client.jl:444
   [17] top-level scope at none:6
   [18] eval(::Module, ::Any) at ./boot.jl:331
   [19] exec_options(::Base.JLOptions) at ./client.jl:260
   [20] _start() at ./client.jl:485
  
Test determine_grid_size on Silicon: Error During Test at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/determine_grid_size.jl:7
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package spglib could not be found by pyimport. Usually this means
  that you did not install spglib in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the spglib module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the spglib module, you can use `pyimport_conda("spglib", PKG)`,
  where PKG is the Anaconda package the contains the module spglib,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'spglib'",)
  
  Stacktrace:
   [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] spglib_get_symmetry(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Any,1}; tol_symmetry::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/external/spglib.jl:37
   [3] symmetry_operations(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Any,1}; tol_symmetry::Float64, kcoords::Nothing) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:51
   [4] symmetry_operations at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:49 [inlined]
   [5] Model(::Array{Float64,2}; n_electrons::Int64, atoms::Array{Any,1}, terms::Array{Any,1}, temperature::Float64, smearing::Nothing, spin_polarization::Symbol, symmetry::Symbol) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:129
   [6] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/determine_grid_size.jl:16
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [8] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/determine_grid_size.jl:8
   [9] include(::String) at ./client.jl:444
   [10] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:46
   [11] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [12] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:37
   [13] include(::String) at ./client.jl:444
   [14] top-level scope at none:6
   [15] eval(::Module, ::Any) at ./boot.jl:331
   [16] exec_options(::Base.JLOptions) at ./client.jl:260
   [17] _start() at ./client.jl:485
  
FFT and IFFT are an identity: Error During Test at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/fourier_transforms.jl:6
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package spglib could not be found by pyimport. Usually this means
  that you did not install spglib in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the spglib module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the spglib module, you can use `pyimport_conda("spglib", PKG)`,
  where PKG is the Anaconda package the contains the module spglib,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'spglib'",)
  
  Stacktrace:
   [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] spglib_get_symmetry(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Any,1}; tol_symmetry::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/external/spglib.jl:37
   [3] symmetry_operations(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Any,1}; tol_symmetry::Float64, kcoords::Nothing) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:51
   [4] symmetry_operations at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:49 [inlined]
   [5] Model(::Array{Float64,2}; n_electrons::Int64, atoms::Array{Any,1}, terms::Array{Any,1}, temperature::Float64, smearing::Nothing, spin_polarization::Symbol, symmetry::Symbol) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:129
   [6] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/fourier_transforms.jl:9
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [8] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/fourier_transforms.jl:7
   [9] include(::String) at ./client.jl:444
   [10] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:47
   [11] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [12] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:37
   [13] include(::String) at ./client.jl:444
   [14] top-level scope at none:6
   [15] eval(::Module, ::Any) at ./boot.jl:331
   [16] exec_options(::Base.JLOptions) at ./client.jl:260
   [17] _start() at ./client.jl:485
  
PlaneWaveBasis: Check struct construction: Error During Test at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/PlaneWaveBasis.jl:18
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package spglib could not be found by pyimport. Usually this means
  that you did not install spglib in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the spglib module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the spglib module, you can use `pyimport_conda("spglib", PKG)`,
  where PKG is the Anaconda package the contains the module spglib,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'spglib'",)
  
  Stacktrace:
   [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] spglib_get_symmetry(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Any,1}; tol_symmetry::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/external/spglib.jl:37
   [3] symmetry_operations(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Any,1}; tol_symmetry::Float64, kcoords::Nothing) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:51
   [4] symmetry_operations at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:49 [inlined]
   [5] Model(::Array{Float64,2}; n_electrons::Int64, atoms::Array{Any,1}, terms::Array{Any,1}, temperature::Float64, smearing::Nothing, spin_polarization::Symbol, symmetry::Symbol) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:129
   [6] macro expansion at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/PlaneWaveBasis.jl:21 [inlined]
   [7] macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/PlaneWaveBasis.jl:19
   [9] include(::String) at ./client.jl:444
   [10] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:48
   [11] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [12] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:37
   [13] include(::String) at ./client.jl:444
   [14] top-level scope at none:6
   [15] eval(::Module, ::Any) at ./boot.jl:331
   [16] exec_options(::Base.JLOptions) at ./client.jl:260
   [17] _start() at ./client.jl:485
  
PlaneWaveBasis: Energy cutoff is respected: Error During Test at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/PlaneWaveBasis.jl:49
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package spglib could not be found by pyimport. Usually this means
  that you did not install spglib in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the spglib module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the spglib module, you can use `pyimport_conda("spglib", PKG)`,
  where PKG is the Anaconda package the contains the module spglib,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'spglib'",)
  
  Stacktrace:
   [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] spglib_get_symmetry(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Any,1}; tol_symmetry::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/external/spglib.jl:37
   [3] symmetry_operations(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Any,1}; tol_symmetry::Float64, kcoords::Nothing) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:51
   [4] symmetry_operations at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:49 [inlined]
   [5] Model(::Array{Float64,2}; n_electrons::Int64, atoms::Array{Any,1}, terms::Array{Any,1}, temperature::Float64, smearing::Nothing, spin_polarization::Symbol, symmetry::Symbol) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:129
   [6] test_pw_cutoffs(::NamedTuple{(:lattice, :atnum, :n_electrons, :Tsmear, :psp, :positions, :kcoords, :ksymops),Tuple{Array{Float64,2},Int64,Int64,Nothing,String,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Array{Array{Tuple{StaticArrays.SArray{Tuple{3,3},Int64,2,9},StaticArrays.SArray{Tuple{3},Float64,1,3}},1},1}}}, ::Float64, ::Array{Int64,1}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/PlaneWaveBasis.jl:8
   [7] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/PlaneWaveBasis.jl:50
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [9] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/PlaneWaveBasis.jl:50
   [10] include(::String) at ./client.jl:444
   [11] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:48
   [12] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [13] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:37
   [14] include(::String) at ./client.jl:444
   [15] top-level scope at none:6
   [16] eval(::Module, ::Any) at ./boot.jl:331
   [17] exec_options(::Base.JLOptions) at ./client.jl:260
   [18] _start() at ./client.jl:485
  
PlaneWaveBasis: Check cubic basis and cubic index: Error During Test at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/PlaneWaveBasis.jl:55
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package spglib could not be found by pyimport. Usually this means
  that you did not install spglib in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the spglib module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the spglib module, you can use `pyimport_conda("spglib", PKG)`,
  where PKG is the Anaconda package the contains the module spglib,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'spglib'",)
  
  Stacktrace:
   [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] spglib_get_symmetry(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Any,1}; tol_symmetry::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/external/spglib.jl:37
   [3] symmetry_operations(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Any,1}; tol_symmetry::Float64, kcoords::Nothing) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:51
   [4] symmetry_operations at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:49 [inlined]
   [5] Model(::Array{Float64,2}; n_electrons::Int64, atoms::Array{Any,1}, terms::Array{Any,1}, temperature::Float64, smearing::Nothing, spin_polarization::Symbol, symmetry::Symbol) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:129
   [6] macro expansion at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/PlaneWaveBasis.jl:58 [inlined]
   [7] macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/PlaneWaveBasis.jl:56
   [9] include(::String) at ./client.jl:444
   [10] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:48
   [11] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [12] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:37
   [13] include(::String) at ./client.jl:444
   [14] top-level scope at none:6
   [15] eval(::Module, ::Any) at ./boot.jl:331
   [16] exec_options(::Base.JLOptions) at ./client.jl:260
   [17] _start() at ./client.jl:485
  
PlaneWaveBasis: Check index for kpoints: Error During Test at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/PlaneWaveBasis.jl:69
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package spglib could not be found by pyimport. Usually this means
  that you did not install spglib in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the spglib module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the spglib module, you can use `pyimport_conda("spglib", PKG)`,
  where PKG is the Anaconda package the contains the module spglib,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'spglib'",)
  
  Stacktrace:
   [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] spglib_get_symmetry(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Any,1}; tol_symmetry::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/external/spglib.jl:37
   [3] symmetry_operations(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Any,1}; tol_symmetry::Float64, kcoords::Nothing) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:51
   [4] symmetry_operations at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:49 [inlined]
   [5] Model(::Array{Float64,2}; n_electrons::Int64, atoms::Array{Any,1}, terms::Array{Any,1}, temperature::Float64, smearing::Nothing, spin_polarization::Symbol, symmetry::Symbol) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:129
   [6] macro expansion at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/PlaneWaveBasis.jl:72 [inlined]
   [7] macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
   [8] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/PlaneWaveBasis.jl:70
   [9] include(::String) at ./client.jl:444
   [10] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:48
   [11] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [12] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:37
   [13] include(::String) at ./client.jl:444
   [14] top-level scope at none:6
   [15] eval(::Module, ::Any) at ./boot.jl:331
   [16] exec_options(::Base.JLOptions) at ./client.jl:260
   [17] _start() at ./client.jl:485
  
bzmesh_uniform agrees with spglib: Error During Test at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/bzmesh.jl:9
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package spglib could not be found by pyimport. Usually this means
  that you did not install spglib in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the spglib module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the spglib module, you can use `pyimport_conda("spglib", PKG)`,
  where PKG is the Anaconda package the contains the module spglib,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'spglib'",)
  
  Stacktrace:
   [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] pyimport_conda(::String, ::String, ::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:694
   [3] pyimport_conda(::String, ::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:693
   [4] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/bzmesh.jl:10
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [6] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/bzmesh.jl:10
   [7] include(::String) at ./client.jl:444
   [8] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:53
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [10] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:37
   [11] include(::String) at ./client.jl:444
   [12] top-level scope at none:6
   [13] eval(::Module, ::Any) at ./boot.jl:331
   [14] exec_options(::Base.JLOptions) at ./client.jl:260
   [15] _start() at ./client.jl:485
  
bzmesh_ir_wedge is correct reduction: Error During Test at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/bzmesh.jl:36
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package spglib could not be found by pyimport. Usually this means
  that you did not install spglib in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the spglib module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the spglib module, you can use `pyimport_conda("spglib", PKG)`,
  where PKG is the Anaconda package the contains the module spglib,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'spglib'",)
  
  Stacktrace:
   [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] spglib_get_symmetry(::Array{Float64,2}, ::Array{Pair{ElementCoulomb,Array{Array{Float64,1},1}},1}; tol_symmetry::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/external/spglib.jl:37
   [3] symmetry_operations(::Array{Float64,2}, ::Array{Pair{ElementCoulomb,Array{Array{Float64,1},1}},1}; tol_symmetry::Float64, kcoords::Nothing) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:51
   [4] symmetry_operations(::Array{Float64,2}, ::Array{Pair{ElementCoulomb,Array{Array{Float64,1},1}},1}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:49
   [5] (::var"#test_reduction#46"{var"#test_reduction#41#47"})(::NamedTuple{(:lattice, :atnum, :n_electrons, :Tsmear, :psp, :positions, :kcoords, :ksymops),Tuple{Array{Float64,2},Int64,Int64,Nothing,String,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Array{Array{Tuple{StaticArrays.SArray{Tuple{3,3},Int64,2,9},StaticArrays.SArray{Tuple{3},Float64,1,3}},1},1}}}, ::Array{Int64,1}; supercell::Array{Int64,1}, kshift::Array{Int64,1}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/bzmesh.jl:49
   [6] (::var"#test_reduction#46"{var"#test_reduction#41#47"})(::NamedTuple{(:lattice, :atnum, :n_electrons, :Tsmear, :psp, :positions, :kcoords, :ksymops),Tuple{Array{Float64,2},Int64,Int64,Nothing,String,Array{Array{Float64,1},1},Array{Array{Float64,1},1},Array{Array{Tuple{StaticArrays.SArray{Tuple{3,3},Int64,2,9},StaticArrays.SArray{Tuple{3},Float64,1,3}},1},1}}}, ::Array{Int64,1}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/bzmesh.jl:38
   [7] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/bzmesh.jl:63
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [9] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/bzmesh.jl:37
   [10] include(::String) at ./client.jl:444
   [11] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:53
   [12] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [13] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:37
   [14] include(::String) at ./client.jl:444
   [15] top-level scope at none:6
   [16] eval(::Module, ::Any) at ./boot.jl:331
   [17] exec_options(::Base.JLOptions) at ./client.jl:260
   [18] _start() at ./client.jl:485
  
standardize_atoms: Error During Test at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/bzmesh.jl:81
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package spglib could not be found by pyimport. Usually this means
  that you did not install spglib in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the spglib module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the spglib module, you can use `pyimport_conda("spglib", PKG)`,
  where PKG is the Anaconda package the contains the module spglib,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'spglib'",)
  
  Stacktrace:
   [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] spglib_standardize_cell(::Array{Float64,2}, ::Array{Pair{ElementCoulomb,Array{Array{Float64,1},1}},1}; correct_symmetry::Bool, primitive::Bool, tol_symmetry::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/external/spglib.jl:93
   [3] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/bzmesh.jl:84
   [4] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [5] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/bzmesh.jl:83
   [6] include(::String) at ./client.jl:444
   [7] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:53
   [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [9] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:37
   [10] include(::String) at ./client.jl:444
   [11] top-level scope at none:6
   [12] eval(::Module, ::Any) at ./boot.jl:331
   [13] exec_options(::Base.JLOptions) at ./client.jl:260
   [14] _start() at ./client.jl:485
  
Symmetrization and not symmetrization yields the same density and energy: Error During Test at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/bzmesh_symmetry.jl:5
  Got exception outside of a @test
  PyError (PyImport_ImportModule
  
  The Python package spglib could not be found by pyimport. Usually this means
  that you did not install spglib in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Python version at:
  
  /usr/bin/python3
  
  and you should use whatever mechanism you usually use (apt-get, pip, conda,
  etcetera) to install the Python package containing the spglib module.
  
  One alternative is to re-configure PyCall to use a different Python
  version on your system: set ENV["PYTHON"] to the path/name of the python
  executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  Another alternative is to configure PyCall to use a Julia-specific Python
  distribution via the Conda.jl package (which installs a private Anaconda
  Python distribution), which has the advantage that packages can be installed
  and kept up-to-date via Julia.  As explained in the PyCall documentation,
  set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
  To install the spglib module, you can use `pyimport_conda("spglib", PKG)`,
  where PKG is the Anaconda package the contains the module spglib,
  or alternatively you can use the Conda package directly (via
  `using Conda` followed by `Conda.add` etcetera).
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'spglib'",)
  
  Stacktrace:
   [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
   [2] spglib_get_symmetry(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; tol_symmetry::Float64) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/external/spglib.jl:37
   [3] symmetry_operations(::StaticArrays.SArray{Tuple{3,3},Float64,2,9}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; tol_symmetry::Float64, kcoords::Nothing) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:51
   [4] symmetry_operations at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/symmetry.jl:49 [inlined]
   [5] Model(::Array{Float64,2}; n_electrons::Nothing, atoms::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}, terms::Array{Any,1}, temperature::Float64, smearing::Nothing, spin_polarization::Symbol, symmetry::Symbol) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:129
   [6] model_atomic(::Array{Float64,2}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}; extra_terms::Array{Any,1}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:154
   [7] model_DFT(::Array{Float64,2}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}, ::Symbol; extra_terms::Array{Any,1}, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:162
   [8] model_DFT(::Array{Float64,2}, ::Array{Pair{ElementPsp,Array{Array{Float64,1},1}},1}, ::Symbol) at /home/pkgeval/.julia/packages/DFTK/2Obx8/src/Model.jl:162
   [9] macro expansion at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/bzmesh_symmetry.jl:16 [inlined]
   [10] macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
   [11] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/bzmesh_symmetry.jl:6
   [12] include(::String) at ./client.jl:444
   [13] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:54
   [14] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [15] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:37
   [16] include(::String) at ./client.jl:444
   [17] top-level scope at none:6
   [18] eval(::Module, ::Any) at ./boot.jl:331
   [19] exec_options(::Base.JLOptions) at ./client.jl:260
   [20] _start() at ./client.jl:485
  
DFTK.jl: Error During Test at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:34
  Got exception outside of a @test
  LoadError: PyError ($(Expr(:escape, :(ccall(#= /home/pkgeval/.julia/packages/PyCall/zqDXB/src/pyeval.jl:38 =# @pysym(:PyEval_EvalCode), PyPtr, (PyPtr, PyPtr, PyPtr), o, globals, locals))))) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'pymatgen'",)
    File "/home/pkgeval/.julia/packages/PyCall/zqDXB/src/pyeval.jl", line 2, in <module>
      const Py_file_input = 257
  
  Stacktrace:
   [1] pyerr_check at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/exception.jl:60 [inlined]
   [2] pyerr_check at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/exception.jl:64 [inlined]
   [3] _handle_error(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/exception.jl:81
   [4] macro expansion at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/exception.jl:95 [inlined]
   [5] #120 at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/pyeval.jl:38 [inlined]
   [6] disable_sigint at ./c.jl:446 [inlined]
   [7] pyeval_(::String, ::PyDict{String,PyObject,true}, ::PyDict{String,PyObject,true}, ::Int64, ::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/pyeval.jl:37
   [8] top-level scope at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/pyeval.jl:230
   [9] include(::String) at ./client.jl:444
   [10] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:55
   [11] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [12] top-level scope at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:37
   [13] include(::String) at ./client.jl:444
   [14] top-level scope at none:6
   [15] eval(::Module, ::Any) at ./boot.jl:331
   [16] exec_options(::Base.JLOptions) at ./client.jl:260
   [17] _start() at ./client.jl:485
  in expression starting at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/external_pymatgen.jl:6
  
Test Summary:                                                              | Pass  Error  Total
DFTK.jl                                                                    |  914     18    932
  Hydrogen anion all electron                                              |           1      1
  SCF of silicon without exchange-correlation (small)                      |           1      1
  Silicon LDA (small, Double32)                                            |           1      1
  Silicon LDA (small, Float64)                                             |           1      1
  Silicon LDA (small, Float32)                                             |           1      1
  Silicon PBE (small, Float64)                                             |           1      1
  Compare different SCF algorithms                                         |           1      1
  Test determine_grid_size on Silicon                                      |    6      1      7
  Test determine_grid_size on skewed lattice                               |    2             2
  FFT and IFFT are an identity                                             |           1      1
  PlaneWaveBasis: Check struct construction                                |           1      1
  PlaneWaveBasis: Energy cutoff is respected                               |           1      1
  PlaneWaveBasis: Check cubic basis and cubic index                        |           1      1
  PlaneWaveBasis: Check index for kpoints                                  |           1      1
  Interpolation of density                                                 |    3             3
  Check reading all HGH pseudos                                            |  474           474
  Check load_psp routine selectively                                       |    5             5
  Check reading 'C-lda-q4'                                                 |   10            10
  Check reading 'Ni-lda-q18'                                               |   11            11
  Check evaluating 'Si-lda-q4'                                             |   11            11
  Check qcut routines                                                      |    7             7
  Agreement of polynomial implementation and eval functions                |  180           180
  Numerical integration to obtain fourier-space projectors                 |  170           170
  Check constructing ElementCoulomb                                        |   12            12
  Check constructing ElementPsp                                            |   14            14
  Check constructing ElementCohenBergstresser                              |    9             9
  bzmesh_uniform agrees with spglib                                        |           1      1
  bzmesh_ir_wedge is correct reduction                                     |           1      1
  standardize_atoms                                                        |           1      1
  Symmetrization and not symmetrization yields the same density and energy |           1      1
ERROR: LoadError: Some tests did not pass: 914 passed, 0 failed, 18 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/DFTK/2Obx8/test/runtests.jl:34
ERROR: Package DFTK errored during testing
Stacktrace:
 [1] pkgerror(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1561
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
 [5] #test#61 at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [7] #test#60 at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope at none:16
