Julia Version 1.6.0-DEV.207
Commit 4c16ccb905 (2020-06-10 16:41 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Requires ──────────────────── v1.0.1
  Installed TimeAxes ──────────────────── v0.1.1
  Installed UnPack ────────────────────── v1.0.1
  Installed TableTraits ───────────────── v1.0.0
  Installed IntervalSets ──────────────── v0.5.1
  Installed MatrixFactorizations ──────── v0.4.1
  Installed FillArrays ────────────────── v0.8.10
  Installed NamedDims ─────────────────── v0.2.21
  Installed DataValueInterfaces ───────── v1.0.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed LazyArrays ────────────────── v0.16.12
  Installed Tables ────────────────────── v1.0.4
  Installed Parameters ────────────────── v0.12.1
  Installed EllipsisNotation ──────────── v0.4.0
  Installed StaticArrays ──────────────── v0.12.3
  Installed ArrayInterface ────────────── v2.8.7
  Installed Crayons ───────────────────── v4.0.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed MacroTools ────────────────── v0.5.5
  Installed OrderedCollections ────────── v1.2.0
  Installed ArrayLayouts ──────────────── v0.3.4
  Installed StaticRanges ──────────────── v0.6.13
  Installed PrettyTables ──────────────── v0.9.0
  Installed AxisIndices ───────────────── v0.3.2
  Installed MappedArrays ──────────────── v0.2.2
  Installed ChainedFixes ──────────────── v0.2.0
  Installed Reexport ──────────────────── v0.2.0
  Installed Formatting ────────────────── v0.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [9a9fc9a6] + TimeAxes v0.1.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [4fba245c] + ArrayInterface v2.8.7
  [4c555306] + ArrayLayouts v0.3.4
  [f52c9ee2] + AxisIndices v0.3.2
  [9706b775] + ChainedFixes v0.2.0
  [a8cc5b0e] + Crayons v4.0.2
  [9a962f9c] + DataAPI v1.3.0
  [e2d170a0] + DataValueInterfaces v1.0.0
  [da5c29d0] + EllipsisNotation v0.4.0
  [1a297f60] + FillArrays v0.8.10
  [59287772] + Formatting v0.4.1
  [8197267c] + IntervalSets v0.5.1
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [5078a376] + LazyArrays v0.16.12
  [1914dd2f] + MacroTools v0.5.5
  [dbb5928d] + MappedArrays v0.2.2
  [a3b82374] + MatrixFactorizations v0.4.1
  [356022a1] + NamedDims v0.2.21
  [bac558e1] + OrderedCollections v1.2.0
  [d96e819e] + Parameters v0.12.1
  [08abe8d2] + PrettyTables v0.9.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.1
  [90137ffa] + StaticArrays v0.12.3
  [d8176aec] + StaticRanges v0.6.13
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [9a9fc9a6] + TimeAxes v0.1.1
  [3a884ed6] + UnPack v1.0.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing TimeAxes
Status `/tmp/jl_bxLO6B/Project.toml`
  [f52c9ee2] AxisIndices v0.3.2
  [e30172f5] Documenter v0.24.11
  [9a9fc9a6] TimeAxes v0.1.1
  [ade2ca70] Dates
  [8dfed614] Test
Status `/tmp/jl_bxLO6B/Manifest.toml`
  [4fba245c] ArrayInterface v2.8.7
  [4c555306] ArrayLayouts v0.3.4
  [f52c9ee2] AxisIndices v0.3.2
  [9706b775] ChainedFixes v0.2.0
  [a8cc5b0e] Crayons v4.0.2
  [9a962f9c] DataAPI v1.3.0
  [e2d170a0] DataValueInterfaces v1.0.0
  [ffbed154] DocStringExtensions v0.8.1
  [e30172f5] Documenter v0.24.11
  [da5c29d0] EllipsisNotation v0.4.0
  [1a297f60] FillArrays v0.8.10
  [59287772] Formatting v0.4.1
  [8197267c] IntervalSets v0.5.1
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5078a376] LazyArrays v0.16.12
  [1914dd2f] MacroTools v0.5.5
  [dbb5928d] MappedArrays v0.2.2
  [a3b82374] MatrixFactorizations v0.4.1
  [356022a1] NamedDims v0.2.21
  [bac558e1] OrderedCollections v1.2.0
  [d96e819e] Parameters v0.12.1
  [69de0a69] Parsers v1.0.5
  [08abe8d2] PrettyTables v0.9.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [90137ffa] StaticArrays v0.12.3
  [d8176aec] StaticRanges v0.6.13
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [9a9fc9a6] TimeAxes v0.1.1
  [3a884ed6] UnPack v1.0.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
[ Info: SetupBuildDirectory: setting up build directory.
[ Info: Doctest: running doctests.
┌ Error: doctest failure in ~/.julia/packages/TimeAxes/f7zNR/src/TimeAxes.jl
│ 
│ ```jldoctest README
│ julia> using AxisIndices, TimeAxes, Dates
│ 
│ julia> t = TimeAxis(Second(1):Second(1):Second(10))
│ TimeAxis(1 second:1 second:10 seconds => Base.OneTo(10))
│ 
│ julia> t2 = t[Second(1)..Second(3)]  # index by time interval
│ TimeAxis(1 second:1 second:3 seconds => 1:3)
│ 
│ julia> t[:ts1] = Second(1);
│ 
│ julia> t[:ts2] = Second(3);
│ 
│ julia> t2 = t[:ts1..:ts2]  # index by interval between two time stamps
│ TimeAxis(1 second:1 second:3 seconds => 1:3)
│ 
│ julia> t[>(:ts2)] == t[>(Second(3))]  # all time points above :ts2 and 3 seconds returns the same thing
│ true
│ 
│ julia> x = AxisIndicesArray(ones(10, 2), t)
│ AxisIndicesArray{Float64,2,Array{Float64,2}...}
│  • dim_1 - TimeAxis(1 second:1 second:10 seconds => Base.OneTo(10))
│  • dim_2 - SimpleAxis(Base.OneTo(2))
│                  1     2
│     1 second   1.0   1.0
│    2 seconds   1.0   1.0
│    3 seconds   1.0   1.0
│    4 seconds   1.0   1.0
│    5 seconds   1.0   1.0
│    6 seconds   1.0   1.0
│    7 seconds   1.0   1.0
│    8 seconds   1.0   1.0
│    9 seconds   1.0   1.0
│   10 seconds   1.0   1.0
│ 
│ julia> x[:ts1..:ts2,:]
│ AxisIndicesArray{Float64,2,Array{Float64,2}...}
│  • dim_1 - TimeAxis(1 second:1 second:3 seconds => Base.OneTo(3))
│  • dim_2 - SimpleAxis(Base.OneTo(2))
│                 1     2
│    1 second   1.0   1.0
│   2 seconds   1.0   1.0
│   3 seconds   1.0   1.0
│ 
│ ```
│ 
│ Subexpression:
│ 
│ t = TimeAxis(Second(1):Second(1):Second(10))
│ 
│ Evaluated output:
│ 
│ TimeAxis(Second(1):Second(1):Second(10) => Base.OneTo(10))
│ 
│ Expected output:
│ 
│ TimeAxis(1 second:1 second:10 seconds => Base.OneTo(10))
│ 
│   diff =
│    Warning: Diff output requires color.
│    TimeAxis(1 second:1 second:10 seconds TimeAxis(Second(1):Second(1):Second(10) => Base.OneTo(10))
└ @ Documenter.DocTests ~/.julia/packages/Documenter/PLD7m/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/TimeAxes/f7zNR/src/TimeAxes.jl
│ 
│ ```jldoctest README
│ julia> using AxisIndices, TimeAxes, Dates
│ 
│ julia> t = TimeAxis(Second(1):Second(1):Second(10))
│ TimeAxis(1 second:1 second:10 seconds => Base.OneTo(10))
│ 
│ julia> t2 = t[Second(1)..Second(3)]  # index by time interval
│ TimeAxis(1 second:1 second:3 seconds => 1:3)
│ 
│ julia> t[:ts1] = Second(1);
│ 
│ julia> t[:ts2] = Second(3);
│ 
│ julia> t2 = t[:ts1..:ts2]  # index by interval between two time stamps
│ TimeAxis(1 second:1 second:3 seconds => 1:3)
│ 
│ julia> t[>(:ts2)] == t[>(Second(3))]  # all time points above :ts2 and 3 seconds returns the same thing
│ true
│ 
│ julia> x = AxisIndicesArray(ones(10, 2), t)
│ AxisIndicesArray{Float64,2,Array{Float64,2}...}
│  • dim_1 - TimeAxis(1 second:1 second:10 seconds => Base.OneTo(10))
│  • dim_2 - SimpleAxis(Base.OneTo(2))
│                  1     2
│     1 second   1.0   1.0
│    2 seconds   1.0   1.0
│    3 seconds   1.0   1.0
│    4 seconds   1.0   1.0
│    5 seconds   1.0   1.0
│    6 seconds   1.0   1.0
│    7 seconds   1.0   1.0
│    8 seconds   1.0   1.0
│    9 seconds   1.0   1.0
│   10 seconds   1.0   1.0
│ 
│ julia> x[:ts1..:ts2,:]
│ AxisIndicesArray{Float64,2,Array{Float64,2}...}
│  • dim_1 - TimeAxis(1 second:1 second:3 seconds => Base.OneTo(3))
│  • dim_2 - SimpleAxis(Base.OneTo(2))
│                 1     2
│    1 second   1.0   1.0
│   2 seconds   1.0   1.0
│   3 seconds   1.0   1.0
│ 
│ ```
│ 
│ Subexpression:
│ 
│ t2 = t[Second(1)..Second(3)]  # index by time interval
│ 
│ Evaluated output:
│ 
│ TimeAxis(Second(1):Second(1):Second(3) => 1:3)
│ 
│ Expected output:
│ 
│ TimeAxis(1 second:1 second:3 seconds => 1:3)
│ 
│   diff =
│    Warning: Diff output requires color.
│    TimeAxis(1 second:1 second:3 seconds TimeAxis(Second(1):Second(1):Second(3) => 1:3)
└ @ Documenter.DocTests ~/.julia/packages/Documenter/PLD7m/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/TimeAxes/f7zNR/src/TimeAxes.jl
│ 
│ ```jldoctest README
│ julia> using AxisIndices, TimeAxes, Dates
│ 
│ julia> t = TimeAxis(Second(1):Second(1):Second(10))
│ TimeAxis(1 second:1 second:10 seconds => Base.OneTo(10))
│ 
│ julia> t2 = t[Second(1)..Second(3)]  # index by time interval
│ TimeAxis(1 second:1 second:3 seconds => 1:3)
│ 
│ julia> t[:ts1] = Second(1);
│ 
│ julia> t[:ts2] = Second(3);
│ 
│ julia> t2 = t[:ts1..:ts2]  # index by interval between two time stamps
│ TimeAxis(1 second:1 second:3 seconds => 1:3)
│ 
│ julia> t[>(:ts2)] == t[>(Second(3))]  # all time points above :ts2 and 3 seconds returns the same thing
│ true
│ 
│ julia> x = AxisIndicesArray(ones(10, 2), t)
│ AxisIndicesArray{Float64,2,Array{Float64,2}...}
│  • dim_1 - TimeAxis(1 second:1 second:10 seconds => Base.OneTo(10))
│  • dim_2 - SimpleAxis(Base.OneTo(2))
│                  1     2
│     1 second   1.0   1.0
│    2 seconds   1.0   1.0
│    3 seconds   1.0   1.0
│    4 seconds   1.0   1.0
│    5 seconds   1.0   1.0
│    6 seconds   1.0   1.0
│    7 seconds   1.0   1.0
│    8 seconds   1.0   1.0
│    9 seconds   1.0   1.0
│   10 seconds   1.0   1.0
│ 
│ julia> x[:ts1..:ts2,:]
│ AxisIndicesArray{Float64,2,Array{Float64,2}...}
│  • dim_1 - TimeAxis(1 second:1 second:3 seconds => Base.OneTo(3))
│  • dim_2 - SimpleAxis(Base.OneTo(2))
│                 1     2
│    1 second   1.0   1.0
│   2 seconds   1.0   1.0
│   3 seconds   1.0   1.0
│ 
│ ```
│ 
│ Subexpression:
│ 
│ t2 = t[:ts1..:ts2]  # index by interval between two time stamps
│ 
│ Evaluated output:
│ 
│ TimeAxis(Second(1):Second(1):Second(3) => 1:3)
│ 
│ Expected output:
│ 
│ TimeAxis(1 second:1 second:3 seconds => 1:3)
│ 
│   diff =
│    Warning: Diff output requires color.
│    TimeAxis(1 second:1 second:3 seconds TimeAxis(Second(1):Second(1):Second(3) => 1:3)
└ @ Documenter.DocTests ~/.julia/packages/Documenter/PLD7m/src/DocTests.jl:369
┌ Error: Doctesting failed
│   exception =
│    MethodError: no method matching _refunction(::TimeAxis{Second,Int64,StepRange{Second,Second},Base.OneTo{Int64},Symbol,Dict{Symbol,Second}}, ::Int64)
│    Closest candidates are:
│      _refunction(::Any, !Matched::IntervalSets.Interval{L,R,T}) where {L, R, T} at /home/pkgeval/.julia/packages/TimeAxes/f7zNR/src/timestamps.jl:8
│      _refunction(::Any, !Matched::Base.Fix2{F,T}) where {F, T} at /home/pkgeval/.julia/packages/TimeAxes/f7zNR/src/timestamps.jl:16
│    Stacktrace:
│     [1] _to_index at /home/pkgeval/.julia/packages/TimeAxes/f7zNR/src/timestamps.jl:27 [inlined]
│     [2] to_index(::TimeAxes.TimeStamp, ::TimeAxis{Second,Int64,StepRange{Second,Second},Base.OneTo{Int64},Symbol,Dict{Symbol,Second}}, ::Int64) at /home/pkgeval/.julia/packages/TimeAxes/f7zNR/src/timestamps.jl:25
│     [3] to_index at /home/pkgeval/.julia/packages/AxisIndices/cCOV0/src/AxisIndicesStyles/AxisIndicesStyles.jl:101 [inlined]
│     [4] to_indices at /home/pkgeval/.julia/packages/AxisIndices/cCOV0/src/Indexing/to_indices.jl:4 [inlined]
│     [5] to_indices(::AxisIndicesArray{Float64,2,Array{Float64,2},Tuple{TimeAxis{Second,Int64,StepRange{Second,Second},Base.OneTo{Int64},Symbol,Dict{Symbol,Second}},SimpleAxis{Int64,Base.OneTo{Int64}}}}, ::Tuple{Int64,Int64}) at /home/pkgeval/.julia/packages/AxisIndices/cCOV0/src/Indexing/to_indices.jl:93
│     [6] getindex at /home/pkgeval/.julia/packages/AxisIndices/cCOV0/src/Indexing/getindex.jl:104 [inlined]
│     [7] _pt_text(::IOContext{Base.GenericIOBuffer{Array{UInt8,1}}}, ::PrettyTables.PrintInfo{AxisIndicesArray{Float64,2,Array{Float64,2},Tuple{TimeAxis{Second,Int64,StepRange{Second,Second},Base.OneTo{Int64},Symbol,Dict{Symbol,Second}},SimpleAxis{Int64,Base.OneTo{Int64}}}},Base.OneTo{Int64},StepRange{Second,Second},Tuple{},Tuple{}}; border_crayon::Crayons.Crayon, header_crayon::Crayons.Crayon, subheader_crayon::Crayons.Crayon, rownum_header_crayon::Crayons.Crayon, text_crayon::Crayons.Crayon, autowrap::Bool, body_hlines::Array{Int64,1}, body_hlines_format::Nothing, crop::Symbol, columns_width::Int64, highlighters::Tuple{}, hlines::Nothing, linebreaks::Bool, noheader::Bool, nosubheader::Bool, row_name_crayon::Crayons.Crayon, row_name_header_crayon::Crayons.Crayon, same_column_size::Bool, screen_size::Nothing, show_row_number::Bool, sortkeys::Bool, tf::PrettyTables.TextFormat, vlines::Nothing, formatter::Nothing) at /home/pkgeval/.julia/packages/PrettyTables/BRTPU/src/backends/text/print.jl:246
│     [8] _pretty_table(::IOContext{Base.GenericIOBuffer{Array{UInt8,1}}}, ::AxisIndicesArray{Float64,2,Array{Float64,2},Tuple{TimeAxis{Second,Int64,StepRange{Second,Second},Base.OneTo{Int64},Symbol,Dict{Symbol,Second}},SimpleAxis{Int64,Base.OneTo{Int64}}}}, ::Base.OneTo{Int64}; alignment::Symbol, backend::Nothing, cell_alignment::Nothing, filters_row::Nothing, filters_col::Nothing, formatters::Nothing, row_names::StepRange{Second,Second}, row_name_alignment::Symbol, row_name_column_title::String, kwargs::Base.Iterators.Pairs{Symbol,Any,NTuple{13,Symbol},NamedTuple{(:border_crayon, :header_crayon, :subheader_crayon, :rownum_header_crayon, :text_crayon, :body_hlines, :body_hlines_format, :crop, :row_name_crayon, :row_name_header_crayon, :tf, :hlines, :vlines),Tuple{Crayons.Crayon,Crayons.Crayon,Crayons.Crayon,Crayons.Crayon,Crayons.Crayon,Array{Int64,1},Nothing,Symbol,Crayons.Crayon,Crayons.Crayon,PrettyTables.TextFormat,Nothing,Nothing}}}) at /home/pkgeval/.julia/packages/PrettyTables/BRTPU/src/print.jl:892
│     [9] #_pretty_table_VecOrMat#81 at /home/pkgeval/.julia/packages/PrettyTables/BRTPU/src/print.jl:666 [inlined]
│     [10] #pretty_table#76 at /home/pkgeval/.julia/packages/PrettyTables/BRTPU/src/print.jl:570 [inlined]
│     [11] #pretty_array_text#1 at /home/pkgeval/.julia/packages/AxisIndices/cCOV0/src/PrettyArrays/text.jl:35 [inlined]
│     [12] pretty_array_text(::IOContext{Base.GenericIOBuffer{Array{UInt8,1}}}, ::AxisIndicesArray{Float64,2,Array{Float64,2},Tuple{TimeAxis{Second,Int64,StepRange{Second,Second},Base.OneTo{Int64},Symbol,Dict{Symbol,Second}},SimpleAxis{Int64,Base.OneTo{Int64}}}}, ::TimeAxis{Second,Int64,StepRange{Second,Second},Base.OneTo{Int64},Symbol,Dict{Symbol,Second}}, ::SimpleAxis{Int64,Base.OneTo{Int64}}) at /home/pkgeval/.julia/packages/AxisIndices/cCOV0/src/PrettyArrays/text.jl:35
│     [13] pretty_array(::IOContext{Base.GenericIOBuffer{Array{UInt8,1}}}, ::AxisIndicesArray{Float64,2,Array{Float64,2},Tuple{TimeAxis{Second,Int64,StepRange{Second,Second},Base.OneTo{Int64},Symbol,Dict{Symbol,Second}},SimpleAxis{Int64,Base.OneTo{Int64}}}}, ::Tuple{TimeAxis{Second,Int64,StepRange{Second,Second},Base.OneTo{Int64},Symbol,Dict{Symbol,Second}},SimpleAxis{Int64,Base.OneTo{Int64}}}, ::Tuple{Symbol,Symbol}, ::Symbol; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/AxisIndices/cCOV0/src/PrettyArrays/pretty_array.jl:115
│     [14] pretty_array at /home/pkgeval/.julia/packages/AxisIndices/cCOV0/src/PrettyArrays/pretty_array.jl:114 [inlined] (repeats 2 times)
│     [15] show_array(::IOContext{Base.GenericIOBuffer{Array{UInt8,1}}}, ::AxisIndicesArray{Float64,2,Array{Float64,2},Tuple{TimeAxis{Second,Int64,StepRange{Second,Second},Base.OneTo{Int64},Symbol,Dict{Symbol,Second}},SimpleAxis{Int64,Base.OneTo{Int64}}}}, ::Tuple{TimeAxis{Second,Int64,StepRange{Second,Second},Base.OneTo{Int64},Symbol,Dict{Symbol,Second}},SimpleAxis{Int64,Base.OneTo{Int64}}}, ::Tuple{Symbol,Symbol}; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/AxisIndices/cCOV0/src/PrettyArrays/PrettyArrays.jl:27
│     [16] show_array at /home/pkgeval/.julia/packages/AxisIndices/cCOV0/src/PrettyArrays/PrettyArrays.jl:24 [inlined] (repeats 2 times)
│     [17] #show#2 at /home/pkgeval/.julia/packages/AxisIndices/cCOV0/src/AxisCore/show.jl:34 [inlined]
│     [18] show(::IOContext{Base.GenericIOBuffer{Array{UInt8,1}}}, ::MIME{Symbol("text/plain")}, ::AxisIndicesArray{Float64,2,Array{Float64,2},Tuple{TimeAxis{Second,Int64,StepRange{Second,Second},Base.OneTo{Int64},Symbol,Dict{Symbol,Second}},SimpleAxis{Int64,Base.OneTo{Int64}}}}) at /home/pkgeval/.julia/packages/AxisIndices/cCOV0/src/AxisCore/show.jl:33
│     [19] #invokelatest#1 at ./essentials.jl:710 [inlined]
│     [20] invokelatest at ./essentials.jl:709 [inlined]
│     [21] result_to_string at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/DocTests.jl:322 [inlined]
│     [22] checkresult(::Module, ::Documenter.DocTests.Result, ::Dict{Symbol,Any}, ::Documenter.Documents.Document) at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/DocTests.jl:302
│     [23] eval_repl(::Documenter.DocTests.MutableMD2CodeBlock, ::Module, ::Dict{Symbol,Any}, ::Documenter.Documents.Document, ::String) at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/DocTests.jl:231
│     [24] doctest(::Documenter.DocTests.DocTestContext, ::Documenter.Utilities.Markdown2.CodeBlock) at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/DocTests.jl:169
│     [25] (::Documenter.DocTests.var"#1#2"{Documenter.DocTests.DocTestContext})(::Documenter.Utilities.Markdown2.CodeBlock) at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/DocTests.jl:111
│     [26] walk(::Documenter.DocTests.var"#1#2"{Documenter.DocTests.DocTestContext}, ::Documenter.Utilities.Markdown2.CodeBlock) at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/Utilities/Markdown2.jl:297
│     [27] walk(::Function, ::Array{Documenter.Utilities.Markdown2.MarkdownBlockNode,1}) at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/Utilities/Markdown2.jl:306
│     [28] walk(::Documenter.DocTests.var"#1#2"{Documenter.DocTests.DocTestContext}, ::Documenter.Utilities.Markdown2.MD) at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/Utilities/Markdown2.jl:299
│     [29] doctest at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/DocTests.jl:108 [inlined]
│     [30] doctest(::Base.Docs.DocStr, ::Module, ::Documenter.Documents.Document) at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/DocTests.jl:88
│     [31] doctest(::Documenter.Documents.DocumentBlueprint, ::Documenter.Documents.Document) at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/DocTests.jl:56
│     [32] runner(::Type{Documenter.Builder.Doctest}, ::Documenter.Documents.Document) at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/Builder.jl:201
│     [33] dispatch(::Type{Documenter.Builder.DocumentPipeline}, ::Documenter.Documents.Document) at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/Utilities/Selectors.jl:167
│     [34] #2 at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/Documenter.jl:240 [inlined]
│     [35] cd(::Documenter.var"#2#3"{Documenter.Documents.Document}, ::String) at ./file.jl:104
│     [36] makedocs(; debug::Bool, format::Documenter.Writers.HTMLWriter.HTML, kwargs::Base.Iterators.Pairs{Symbol,Any,NTuple{5,Symbol},NamedTuple{(:root, :source, :sitename, :doctest, :modules),Tuple{String,String,String,Symbol,Array{Module,1}}}}) at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/Documenter.jl:239
│     [37] (::Documenter.var"#all_doctests#30"{Bool,Array{Module,1}})() at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/Documenter.jl:728
│     [38] macro expansion at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/Documenter.jl:744 [inlined]
│     [39] macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
│     [40] doctest(::String, ::Array{Module,1}; fix::Bool, testset::String) at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/Documenter.jl:744
│     [41] doctest(::Module; manual::Bool, testset::Nothing, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/Documenter.jl:687
│     [42] doctest(::Module) at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/Documenter.jl:674
│     [43] top-level scope at /home/pkgeval/.julia/packages/TimeAxes/f7zNR/test/runtests.jl:50
│     [44] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
│     [45] top-level scope at /home/pkgeval/.julia/packages/TimeAxes/f7zNR/test/runtests.jl:50
│     [46] include(::String) at ./client.jl:444
│     [47] top-level scope at none:6
│     [48] eval(::Module, ::Any) at ./boot.jl:331
│     [49] exec_options(::Base.JLOptions) at ./client.jl:260
└ @ Documenter ~/.julia/packages/Documenter/PLD7m/src/Documenter.jl:737
Doctests: TimeAxes: Test Failed at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/Documenter.jl:744
  Expression: all_doctests()
Stacktrace:
 [1] macro expansion at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/Documenter.jl:744 [inlined]
 [2] macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115 [inlined]
 [3] doctest(::String, ::Array{Module,1}; fix::Bool, testset::String) at /home/pkgeval/.julia/packages/Documenter/PLD7m/src/Documenter.jl:744
Test Summary:        | Fail  Total
docs                 |    1      1
  Doctests: TimeAxes |    1      1
ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/TimeAxes/f7zNR/test/runtests.jl:48
ERROR: Package TimeAxes errored during testing
Stacktrace:
 [1] pkgerror(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1561
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
 [5] #test#61 at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [7] #test#60 at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope at none:16
