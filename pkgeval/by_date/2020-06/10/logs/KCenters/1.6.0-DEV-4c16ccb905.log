Julia Version 1.6.0-DEV.207
Commit 4c16ccb905 (2020-06-10 16:41 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed InvertedIndices ───────────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed TableTraits ───────────────── v1.0.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed JSON ──────────────────────── v0.21.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed DataFrames ────────────────── v0.20.2
  Installed Compat ────────────────────── v3.11.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed Missings ──────────────────── v0.4.3
  Installed DataAPI ───────────────────── v1.3.0
  Installed Tables ────────────────────── v1.0.4
  Installed OrderedCollections ────────── v1.2.0
  Installed DataStructures ────────────── v0.17.17
  Installed SimilaritySearch ──────────── v0.3.19
  Installed Reexport ──────────────────── v0.2.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed Parsers ───────────────────── v1.0.5
  Installed CategoricalArrays ─────────── v0.7.7
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed MLDataUtils ───────────────── v0.5.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.11.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.5
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_jYbP3w/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_jYbP3w/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.11.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.5
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9323044313987097
[ Info: 0.8307796732584636
[ Info: 0.5553847705821197
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32783655367791653
mean(cdnet.distances) = 0.4004397445668777
mean(crand.distances) = 0.35290017671883106
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5771484375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5771484375,"f1":0.7196177086802092,"seconds":4.624947905540466e-6,"exhaustive_search_seconds":1.9073486328125e-6,"evaluations":8.0390625,"distances_sum":1569.5324598278496}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3837890625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3837890625,"f1":null,"seconds":3.423541784286499e-6,"exhaustive_search_seconds":1.9073486328125e-6,"evaluations":6.2421875,"distances_sum":1017.7620693028348}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5771484375,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.5771484375,"f1":0.7196177086802092,"seconds":4.624947905540466e-6,"exhaustive_search_seconds":1.9073486328125e-6,"evaluations":8.0390625,"distances_sum":1569.5324598278496}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8653617216117226,"seconds":6.6999346017837524e-6,"exhaustive_search_seconds":1.9073486328125e-6,"evaluations":8.5390625,"distances_sum":2266.0258956349185}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.894194347319348,"seconds":1.2364238500595093e-5,"exhaustive_search_seconds":1.9073486328125e-6,"evaluations":8.7890625,"distances_sum":2427.73669040266}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7900483197358206,"seconds":6.433576345443726e-6,"exhaustive_search_seconds":1.9073486328125e-6,"evaluations":8.328125,"distances_sum":1853.8317097578488}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8639371045621055,"seconds":6.601214408874512e-6,"exhaustive_search_seconds":1.9073486328125e-6,"evaluations":8.5234375,"distances_sum":2264.5065019079693}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7255859375, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7255859375,"f1":0.8314227439227448,"seconds":6.418675184249878e-6,"exhaustive_search_seconds":1.9073486328125e-6,"evaluations":8.46875,"distances_sum":2048.4290753462856}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.82421875,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.82421875,"f1":0.894194347319348,"seconds":1.2364238500595093e-5,"exhaustive_search_seconds":1.9073486328125e-6,"evaluations":8.7890625,"distances_sum":2427.73669040266}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9458619505494508,"seconds":7.418915629386902e-6,"exhaustive_search_seconds":1.9073486328125e-6,"evaluations":8.7734375,"distances_sum":2822.277476007471}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9436984890109895,"seconds":8.512288331985474e-6,"exhaustive_search_seconds":1.9073486328125e-6,"evaluations":8.921875,"distances_sum":2726.108116674251}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9658711080586087,"seconds":9.752810001373291e-6,"exhaustive_search_seconds":1.9073486328125e-6,"evaluations":8.859375,"distances_sum":2966.4068569593}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8964493839493849,"seconds":6.962567567825317e-6,"exhaustive_search_seconds":1.9073486328125e-6,"evaluations":8.7734375,"distances_sum":2440.0470384921455}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9658711080586087,"seconds":9.752810001373291e-6,"exhaustive_search_seconds":1.9073486328125e-6,"evaluations":8.859375,"distances_sum":2966.4068569593}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9658711080586087,"seconds":9.752810001373291e-6,"exhaustive_search_seconds":1.9073486328125e-6,"evaluations":8.859375,"distances_sum":2966.4068569593}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6748046875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6748046875,"f1":0.7957511238761248,"seconds":6.444752216339111e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.4921875,"distances_sum":1734.080961135794}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2412109375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2412109375,"f1":null,"seconds":4.077330231666565e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":7.1796875,"distances_sum":625.8160576256968}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6748046875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6748046875,"f1":0.7957511238761248,"seconds":6.444752216339111e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.4921875,"distances_sum":1734.080961135794}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6748046875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6748046875,"f1":0.7957511238761248,"seconds":6.444752216339111e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.4921875,"distances_sum":1734.080961135794}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.6748046875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6748046875,"f1":0.7957511238761248,"seconds":6.444752216339111e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.4921875,"distances_sum":1734.080961135794}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.529296875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.529296875,"f1":0.6737783050283055,"seconds":4.775822162628174e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.5,"distances_sum":1343.3861257686272}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2314453125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2314453125,"f1":null,"seconds":3.991648554801941e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.7734375,"distances_sum":599.2650105573837}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.529296875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.529296875,"f1":0.6737783050283055,"seconds":4.775822162628174e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.5,"distances_sum":1343.3861257686272}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9329212454212462,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.7890625,"distances_sum":2667.802207519743}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.9329212454212462,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.7890625,"distances_sum":2667.802207519743}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9590144230769233,"seconds":6.319954991340637e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.859375,"distances_sum":2869.7161475646253}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9590144230769233,"seconds":6.319954991340637e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.859375,"distances_sum":2869.7161475646253}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.927734375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9590144230769233,"seconds":6.319954991340637e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.859375,"distances_sum":2869.7161475646253}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7421875,"f1":0.8395347707847716,"seconds":6.301328539848328e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.359375,"distances_sum":1952.277006568003}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.20703125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.20703125,"f1":null,"seconds":3.827735781669617e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":6.1796875,"distances_sum":517.8635499912505}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5830078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5830078125,"f1":0.7241465132090139,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.421875,"distances_sum":1432.5190613115346}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7421875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7421875,"f1":0.8395347707847716,"seconds":6.301328539848328e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.359375,"distances_sum":1952.277006568003}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9545444139194147,"seconds":7.59027898311615e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8984375,"distances_sum":2659.587263179171}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9586169039294046,"seconds":7.206574082374573e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8203125,"distances_sum":2717.561594129972}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9064508408258416,"seconds":6.9122761487960815e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.4921875,"distances_sum":2312.044137096897}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8596757409257418,"seconds":5.9157609939575195e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.484375,"distances_sum":1990.8584772500142}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8578598484848492,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.4296875,"distances_sum":2062.4186514874045}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":8,"bsize":8},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9586169039294046,"seconds":7.206574082374573e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8203125,"distances_sum":2717.561594129972}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9676568223443227,"seconds":7.113441824913025e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9375,"distances_sum":2748.2339733119106}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9786687271062272,"seconds":7.394701242446899e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9609375,"distances_sum":2843.492684705485}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.974089972527473,"seconds":7.340684533119202e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.921875,"distances_sum":2812.1701154361203}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":12,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9716918498168501,"seconds":6.627291440963745e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.953125,"distances_sum":2771.4842823543863}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9786687271062272,"seconds":7.394701242446899e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9609375,"distances_sum":2843.492684705485}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9786687271062272,"seconds":7.394701242446899e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9609375,"distances_sum":2843.492684705485}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4423828125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4423828125,"f1":null,"seconds":4.45730984210968e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":6.6953125,"distances_sum":1050.332479461116}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7886462495837503,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.421875,"distances_sum":1692.3137804235757}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5361328125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5361328125,"f1":null,"seconds":5.070120096206665e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.2890625,"distances_sum":1308.3999189397005}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.666015625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.666015625,"f1":0.7886462495837503,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.421875,"distances_sum":1692.3137804235757}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.7982938936063945,"seconds":6.450340151786804e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.4140625,"distances_sum":1763.4660745634253}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.93174793956044,"seconds":1.039355993270874e-5,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.84375,"distances_sum":2494.824236737942}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9110176282051292,"seconds":6.370246410369873e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.7265625,"distances_sum":2344.8955678121674}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9335622710622717,"seconds":6.658956408500671e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8984375,"distances_sum":2489.623804588064}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8581860847485856,"seconds":9.175390005111694e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.640625,"distances_sum":2012.6458989044986}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9335622710622717,"seconds":6.658956408500671e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8984375,"distances_sum":2489.623804588064}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9566449175824182,"seconds":9.300187230110168e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.890625,"distances_sum":2684.6541085670765}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9668555402930409,"seconds":6.942078471183777e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.96875,"distances_sum":2750.870288353021}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9746852106227111,"seconds":7.040798664093018e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.9921875,"distances_sum":2803.5566878187174}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9757268772893777,"seconds":7.834285497665405e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.96875,"distances_sum":2815.4530137299043}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9739239926739931,"seconds":6.670132279396057e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.953125,"distances_sum":2803.1745845372616}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9619104853479858,"seconds":6.94766640663147e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.96875,"distances_sum":2692.267430951415}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9757268772893777,"seconds":7.834285497665405e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.96875,"distances_sum":2815.4530137299043}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9757268772893777,"seconds":7.834285497665405e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.96875,"distances_sum":2815.4530137299043}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4326171875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4326171875,"f1":null,"seconds":4.867091774940491e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":6.75,"distances_sum":1034.2882937798272}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5419921875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5419921875,"f1":0.6876559204684211,"seconds":5.260109901428223e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":7.890625,"distances_sum":1318.0171843726714}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1943359375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1943359375,"f1":null,"seconds":4.0531158447265625e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":6.421875,"distances_sum":509.8895994607631}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5419921875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5419921875,"f1":0.6876559204684211,"seconds":5.260109901428223e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":7.890625,"distances_sum":1318.0171843726714}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9126893939393947,"seconds":6.4801424741744995e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.65625,"distances_sum":2416.167969820617}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6953125,"f1":0.8101632742257748,"seconds":6.146728992462158e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.4453125,"distances_sum":1820.4298550027615}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.7988853160728168,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.203125,"distances_sum":1838.3698431732587}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.56640625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.56640625,"f1":0.7132589632589639,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.0234375,"distances_sum":1385.079861461134}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9101565101565106,"seconds":6.405636668205261e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.6328125,"distances_sum":2390.8681708590134}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8515625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8515625,"f1":0.9126893939393947,"seconds":6.4801424741744995e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.65625,"distances_sum":2416.167969820617}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9650698260073265,"seconds":6.8712979555130005e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.890625,"distances_sum":2782.6796012997083}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9443369130869137,"seconds":6.910413503646851e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.7109375,"distances_sum":2654.435158029002}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9493964368964372,"seconds":7.165595889091492e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.8515625,"distances_sum":2701.1672747408948}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9670959249084252,"seconds":7.329508662223816e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.90625,"distances_sum":2800.0716583492726}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9520177738927746,"seconds":6.161630153656006e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.828125,"distances_sum":2712.827578741008}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9670959249084252,"seconds":7.329508662223816e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.90625,"distances_sum":2800.0716583492726}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9670959249084252,"seconds":7.329508662223816e-6,"exhaustive_search_seconds":1.7173588275909424e-6,"evaluations":8.90625,"distances_sum":2800.0716583492726}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8554814976689985,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.1328125,"distances_sum":2123.814841064726}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.8554814976689985,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.1328125,"distances_sum":2123.814841064726}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.8554814976689985,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.1328125,"distances_sum":2123.814841064726}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7626953125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.8554814976689985,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.1328125,"distances_sum":2123.814841064726}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6328125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6328125,"f1":0.7606355450105459,"seconds":5.191192030906677e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":7.96875,"distances_sum":1037.6396192754685}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2197265625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2197265625,"f1":null,"seconds":3.956258296966553e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":6.28125,"distances_sum":367.1710389259537}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8480717199467208,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.1953125,"distances_sum":1292.8510361416759}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7470703125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7470703125,"f1":0.8480717199467208,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.1953125,"distances_sum":1292.8510361416759}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.818359375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.818359375,"f1":0.895753205128206,"seconds":6.44288957118988e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.609375,"distances_sum":1452.287184391862}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.818359375,"state":{"ssize":8,"bsize":6},"perf":{"precision":1.0,"recall":0.818359375,"f1":0.895753205128206,"seconds":6.44288957118988e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.609375,"distances_sum":1452.287184391862}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":11,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9459706959706965,"seconds":4.857778549194336e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8515625,"distances_sum":1731.2544940201542}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9354567307692314,"seconds":4.9211084842681885e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.890625,"distances_sum":1666.8593400517755}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9544299450549455,"seconds":5.206093192100525e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8984375,"distances_sum":1777.5374933268852}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9654819139194144,"seconds":4.839152097702026e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.953125,"distances_sum":1831.9826998473518}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":12,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9447973901098906,"seconds":7.506459951400757e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.9453125,"distances_sum":1703.2774785243498}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9654819139194144,"seconds":4.839152097702026e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.953125,"distances_sum":1831.9826998473518}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9654819139194144,"seconds":4.839152097702026e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.953125,"distances_sum":1831.9826998473518}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.8003203393828402,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.2109375,"distances_sum":1244.889082302193}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6787109375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6787109375,"f1":0.8003203393828402,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.2109375,"distances_sum":1244.889082302193}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6787109375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6787109375,"f1":0.8003203393828402,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.2109375,"distances_sum":1244.889082302193}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.6787109375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6787109375,"f1":0.8003203393828402,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.2109375,"distances_sum":1244.889082302193}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2177734375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2177734375,"f1":null,"seconds":3.0454248189926147e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":5.7890625,"distances_sum":355.6616922544929}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8550829378954387,"seconds":5.02169132232666e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.375,"distances_sum":1350.018973107767}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5654296875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5654296875,"f1":0.7111839549339556,"seconds":5.140900611877441e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":7.296875,"distances_sum":914.7406222167933}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7578125,"f1":0.8550829378954387,"seconds":5.02169132232666e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.375,"distances_sum":1350.018973107767}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9367507492507501,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.7734375,"distances_sum":1841.861182925481}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9513793498168502,"seconds":5.563721060752869e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.8203125,"distances_sum":1856.8457329821633}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9225019771894778,"seconds":5.45009970664978e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.6328125,"distances_sum":1713.5888002156703}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9513793498168502,"seconds":5.563721060752869e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.8203125,"distances_sum":1856.8457329821633}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9705586080586084,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.9375,"distances_sum":1983.6099649949977}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9703697344322347,"seconds":6.398186087608337e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.921875,"distances_sum":1968.685215823376}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.960159111721612,"seconds":6.560236215591431e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.875,"distances_sum":1931.9104074270647}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9705586080586084,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.9375,"distances_sum":1983.6099649949977}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9705586080586084,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.0151416063308716e-6,"evaluations":8.9375,"distances_sum":1983.6099649949977}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4248046875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4248046875,"f1":null,"seconds":7.208436727523804e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.4765625,"distances_sum":766.1345081826834}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5361328125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5361328125,"f1":null,"seconds":4.258006811141968e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.6953125,"distances_sum":944.2155203440265}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5361328125,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5361328125,"f1":null,"seconds":4.258006811141968e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.6953125,"distances_sum":944.2155203440265}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7806828588078595,"seconds":5.250796675682068e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.3671875,"distances_sum":1256.879839014987}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9151785714285721,"seconds":5.718320608139038e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.7734375,"distances_sum":1738.2524032135582}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9284684065934076,"seconds":3.958120942115784e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8359375,"distances_sum":1800.3640791505336}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7986164876789884,"seconds":3.8929283618927e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.5390625,"distances_sum":1254.4711286718532}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8749217796092805,"seconds":5.580484867095947e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.796875,"distances_sum":1539.4968530635701}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8433179667554677,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.71875,"distances_sum":1404.5032060486074}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8740234375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8740234375,"f1":0.9284684065934076,"seconds":3.958120942115784e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8359375,"distances_sum":1800.3640791505336}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9666494963369967,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.9296875,"distances_sum":2038.826879530973}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.967633928571429,"seconds":6.528571248054504e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.890625,"distances_sum":2063.3794757488777}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9789434523809527,"seconds":6.379559636116028e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.953125,"distances_sum":2137.592489981099}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9592319139194145,"seconds":6.0908496379852295e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.859375,"distances_sum":2016.3902548535955}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9650354853479857,"seconds":4.040077328681946e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.953125,"distances_sum":2031.018220308399}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9789434523809527,"seconds":6.379559636116028e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.953125,"distances_sum":2137.592489981099}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9789434523809527,"seconds":6.379559636116028e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.953125,"distances_sum":2137.592489981099}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.533203125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.533203125,"f1":0.6783230658230661,"seconds":3.121793270111084e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":7.5859375,"distances_sum":927.1070425853445}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.533203125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.533203125,"f1":0.6783230658230661,"seconds":3.121793270111084e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":7.5859375,"distances_sum":927.1070425853445}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8514114357864366,"seconds":4.045665264129639e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.5703125,"distances_sum":1450.3404448145527}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.917279075091576,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.6953125,"distances_sum":1745.5865577044794}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8564453125,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8564453125,"f1":0.917279075091576,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.6953125,"distances_sum":1745.5865577044794}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9658310439560442,"seconds":6.606802344322205e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.9453125,"distances_sum":2029.484328654667}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9658310439560442,"seconds":6.606802344322205e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.9453125,"distances_sum":2029.484328654667}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9658310439560442,"seconds":6.606802344322205e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.9453125,"distances_sum":2029.484328654667}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8494453463203473,"seconds":4.639849066734314e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.3359375,"distances_sum":1485.912972381679}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8524683649683658,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.359375,"distances_sum":1520.9434224536597}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7578125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7578125,"f1":0.8524683649683658,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.359375,"distances_sum":1520.9434224536597}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9529075091575098,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8671875,"distances_sum":2076.614731865101}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8618683399933409,"seconds":5.163252353668213e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.4453125,"distances_sum":1554.6639788650511}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9529075091575098,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8671875,"distances_sum":2076.614731865101}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9652358058608063,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.859375,"distances_sum":2172.7249083527126}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9613896520146525,"seconds":5.619600415229797e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9296875,"distances_sum":2128.26794848479}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9727506868131872,"seconds":6.796792149543762e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.921875,"distances_sum":2211.2256615658307}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9727506868131872,"seconds":6.796792149543762e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.921875,"distances_sum":2211.2256615658307}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9727506868131872,"seconds":6.796792149543762e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.921875,"distances_sum":2211.2256615658307}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.34375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.34375,"f1":null,"seconds":3.11434268951416e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":5.3359375,"distances_sum":816.6065157398781}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4990234375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.4990234375,"f1":0.6499075577200583,"seconds":4.027038812637329e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.6171875,"distances_sum":1124.0635122200226}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4990234375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.4990234375,"f1":0.6499075577200583,"seconds":4.027038812637329e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.6171875,"distances_sum":1124.0635122200226}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8682208416583427,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.09375,"distances_sum":1828.9673827648346}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9070054945054952,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.5,"distances_sum":2092.8120692339216}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8388671875,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.8388671875,"f1":0.9070054945054952,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.5,"distances_sum":2092.8120692339216}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9421989468864475,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.6875,"distances_sum":2318.6356764511734}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9104941933066942,"seconds":6.640329957008362e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.5859375,"distances_sum":2121.515906985615}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9371768856143862,"seconds":6.239861249923706e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.65625,"distances_sum":2301.2464628757944}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9350191475191482,"seconds":5.95487654209137e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.640625,"distances_sum":2236.607515675789}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8994140625,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.9421989468864475,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.6875,"distances_sum":2318.6356764511734}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8994140625,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.9421989468864475,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.6875,"distances_sum":2318.6356764511734}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8661864177489189,"seconds":4.913657903671265e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.4375,"distances_sum":1739.3327822195704}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1923828125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1923828125,"f1":null,"seconds":3.073364496231079e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":4.890625,"distances_sum":414.57741149921543}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.359375,"f1":null,"seconds":3.5651028156280518e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":5.6953125,"distances_sum":758.8264808155424}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.8661864177489189,"seconds":4.913657903671265e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.4375,"distances_sum":1739.3327822195704}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9522550366300371,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.7734375,"distances_sum":2243.3701662895182}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.953817536630037,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.7734375,"distances_sum":2248.072948046227}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9049799159174167,"seconds":5.943700671195984e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.625,"distances_sum":1937.1573096054267}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9038664460539467,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.6484375,"distances_sum":1915.3105589520721}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.953817536630037,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.7734375,"distances_sum":2248.072948046227}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":2,"bsize":13}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9824404761904764,"seconds":5.083158612251282e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.9375,"distances_sum":2436.099728368799}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.975784111721612,"seconds":4.915520548820496e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.90625,"distances_sum":2396.5341819527866}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9770318223443225,"seconds":4.913657903671265e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.8984375,"distances_sum":2396.213160346982}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9538003663003669,"seconds":3.917142748832703e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.84375,"distances_sum":2261.16266940264}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9677734375,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9824404761904764,"seconds":5.083158612251282e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.9375,"distances_sum":2436.099728368799}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9677734375,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9824404761904764,"seconds":5.083158612251282e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.9375,"distances_sum":2436.099728368799}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3525390625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3525390625,"f1":null,"seconds":2.158805727958679e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":6.28125,"distances_sum":743.9062354524959}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2109375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2109375,"f1":null,"seconds":1.8272548913955688e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":5.40625,"distances_sum":479.0899801723803}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3525390625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3525390625,"f1":null,"seconds":2.158805727958679e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":6.28125,"distances_sum":743.9062354524959}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5556640625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5556640625,"f1":0.7026783979908985,"seconds":2.780929207801819e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.1015625,"distances_sum":1146.5417849621167}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.914927260239761,"seconds":3.5688281059265137e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.8671875,"distances_sum":1967.6458416051341}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8544921875,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8544921875,"f1":0.914927260239761,"seconds":3.5688281059265137e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.8671875,"distances_sum":1967.6458416051341}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9618532509157514,"seconds":3.6563724279403687e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.875,"distances_sum":2319.4366934687437}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9264880952380956,"seconds":3.896653652191162e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.8515625,"distances_sum":2086.6463781946354}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9375286172161178,"seconds":3.553926944732666e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.8828125,"distances_sum":2133.981458730067}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9618532509157514,"seconds":3.6563724279403687e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.875,"distances_sum":2319.4366934687437}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9618532509157514,"seconds":3.6563724279403687e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.875,"distances_sum":2319.4366934687437}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41015625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.41015625,"f1":null,"seconds":2.8312206268310547e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":6.6640625,"distances_sum":841.8326594976577}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.646484375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.646484375,"f1":0.7735835345210352,"seconds":3.6228448152542114e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.1953125,"distances_sum":1319.7638619183695}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.646484375,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.646484375,"f1":0.7735835345210352,"seconds":3.6228448152542114e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.1953125,"distances_sum":1319.7638619183695}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9523866758241761,"seconds":4.839152097702026e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.8515625,"distances_sum":2169.9548820469263}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.8004400113775123,"seconds":5.2638351917266846e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.125,"distances_sum":1440.9853560705196}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8611066017316026,"seconds":6.105750799179077e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.6875,"distances_sum":1674.7097779924684}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9523866758241761,"seconds":4.839152097702026e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.8515625,"distances_sum":2169.9548820469263}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9745535714285719,"seconds":6.882473826408386e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.921875,"distances_sum":2307.9309709733993}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.974479166666667,"seconds":7.5232237577438354e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.953125,"distances_sum":2309.101472797365}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9745535714285719,"seconds":6.882473826408386e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.921875,"distances_sum":2307.9309709733993}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9745535714285719,"seconds":6.882473826408386e-6,"exhaustive_search_seconds":8.66129994392395e-7,"evaluations":8.921875,"distances_sum":2307.9309709733993}}, n: 9
mean(cfft.distances) = 0.3278365526555836
mean(cdnet.distances) = 0.46997915239935556
mean(crand.distances) = 0.3432916157638932
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8711111111111111
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.86
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9022222222222221
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8888888888888888
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9333333333333332
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.888888888888889
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8822222222222221
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8688888888888888
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9466666666666667
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9066666666666667
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9244444444444445
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8955555555555555
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8711111111111111
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8777777777777779
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8466666666666667
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9377777777777778
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9199999999999999
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9066666666666667
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222224
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9066666666666667
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9155555555555557
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9066666666666667
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8533333333333334
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9133333333333334
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9066666666666666
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9155555555555556
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 7, 15]]
** centroid: 1, normalized-entropy: 0.9023932827949788, [(2, 7), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 7, 15]]
** centroid: 1, normalized-entropy: 0.9023932827949788, [(2, 7), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 7, 15]]
** centroid: 1, normalized-entropy: 0.9023932827949788, [(2, 7), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 7, 15]]
** centroid: 1, normalized-entropy: 0.9023932827949788, [(2, 7), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 7, 15]]
** centroid: 1, normalized-entropy: 0.9023932827949788, [(2, 7), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 7, 15]]
** centroid: 1, normalized-entropy: 0.9023932827949788, [(2, 7), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.94
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 7, 15]]
** centroid: 1, normalized-entropy: 0.9023932827949788, [(2, 7), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.553913703362147] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 33, 2]]
** centroid: 1, normalized-entropy: 0.3159971329784246, [(2, 33), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 8, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 12]]
** centroid: 11, normalized-entropy: 0.3912435636292556, [(2, 1), (3, 12)]
*** center 12: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
finished with 14 centroids; started with 12
acc = 0.9666666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.1851300795658909] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1851300795658909, 0.14955412751312244] ***
*** finished computation of 7 references, err: [Inf, 0.1851300795658909, 0.14955412751312244] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [124, 6, 0]]
** centroid: 1, normalized-entropy: 0.269828447703074, [(1, 124), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [70, 9, 0]]
** centroid: 2, normalized-entropy: 0.511639783631173, [(1, 70), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 44, 31]]
** centroid: 3, normalized-entropy: 0.9782176659354249, [(2, 44), (3, 31)]
*** center 4: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [35, 81, 0]]
** centroid: 5, normalized-entropy: 0.8833882724833615, [(1, 35), (2, 81)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 97, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1864903814995709] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1864903814995709, 0.1510124480529134] ***
*** finished computation of 7 references, err: [Inf, 0.1864903814995709, 0.1510124480529134] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 130, 24]]
** centroid: 1, normalized-entropy: 0.6242741010130388, [(2, 130), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [72, 21, 0]]
** centroid: 4, normalized-entropy: 0.7706290693639406, [(1, 72), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [95, 20, 0]]
** centroid: 5, normalized-entropy: 0.6665783579949205, [(1, 95), (2, 20)]
*** center 6: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [15, 74, 0]]
** centroid: 7, normalized-entropy: 0.6543524423071835, [(1, 15), (2, 74)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3175663794348906] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3175663794348906, 0.2961739543252051] ***
*** starting iteration: 2; err: [Inf, 0.3175663794348906, 0.2961739543252051] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3175663794348906, 0.2961739543252051, 0.28962702478223423] ***
*** starting iteration: 3; err: [Inf, 0.3175663794348906, 0.2961739543252051, 0.28962702478223423] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3175663794348906, 0.2961739543252051, 0.28962702478223423, 0.28758941769778906] ***
*** starting iteration: 4; err: [Inf, 0.3175663794348906, 0.2961739543252051, 0.28962702478223423, 0.28758941769778906] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3175663794348906, 0.2961739543252051, 0.28962702478223423, 0.28758941769778906, 0.28606415361126847] ***
*** starting iteration: 5; err: [Inf, 0.3175663794348906, 0.2961739543252051, 0.28962702478223423, 0.28758941769778906, 0.28606415361126847] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3175663794348906, 0.2961739543252051, 0.28962702478223423, 0.28758941769778906, 0.28606415361126847, 0.2854791113483795] ***
*** finished computation of 3 references, err: [Inf, 0.3175663794348906, 0.2961739543252051, 0.28962702478223423, 0.28758941769778906, 0.28606415361126847, 0.2854791113483795] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [173, 38, 0]]
** centroid: 1, normalized-entropy: 0.6802843598351017, [(1, 173), (2, 38)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 183, 21]]
** centroid: 2, normalized-entropy: 0.4782501641071144, [(2, 183), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [228, 23, 0]]
** centroid: 3, normalized-entropy: 0.44189874032976645, [(1, 228), (2, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30947225142376444] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30947225142376444, 0.29348730230271103] ***
*** starting iteration: 2; err: [Inf, 0.30947225142376444, 0.29348730230271103] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30947225142376444, 0.29348730230271103, 0.2916571556030587] ***
*** starting iteration: 3; err: [Inf, 0.30947225142376444, 0.29348730230271103, 0.2916571556030587] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30947225142376444, 0.29348730230271103, 0.2916571556030587, 0.2915399234945784] ***
*** finished computation of 3 references, err: [Inf, 0.30947225142376444, 0.29348730230271103, 0.2916571556030587, 0.2915399234945784] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [68, 161, 31]]
** centroid: 1, normalized-entropy: 0.8202340507452779, [(1, 68), (2, 161), (3, 31)]
*** center 2: selecting labels [1] (freq >= 1) [from [213, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [118, 76, 0]]
** centroid: 3, normalized-entropy: 0.9659212398860464, [(1, 118), (2, 76)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3253950768246733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3253950768246733, 0.29857550700777385] ***
*** starting iteration: 2; err: [Inf, 0.3253950768246733, 0.29857550700777385] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3253950768246733, 0.29857550700777385, 0.2934739353439618] ***
*** starting iteration: 3; err: [Inf, 0.3253950768246733, 0.29857550700777385, 0.2934739353439618] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3253950768246733, 0.29857550700777385, 0.2934739353439618, 0.29184902682788727] ***
*** starting iteration: 4; err: [Inf, 0.3253950768246733, 0.29857550700777385, 0.2934739353439618, 0.29184902682788727] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3253950768246733, 0.29857550700777385, 0.2934739353439618, 0.29184902682788727, 0.29139673686970297] ***
*** finished computation of 3 references, err: [Inf, 0.3253950768246733, 0.29857550700777385, 0.2934739353439618, 0.29184902682788727, 0.29139673686970297] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [172, 35, 0]]
** centroid: 1, normalized-entropy: 0.6556007574904621, [(1, 172), (2, 35)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [226, 22, 0]]
** centroid: 2, normalized-entropy: 0.4321481607261778, [(1, 226), (2, 22)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 188, 24]]
** centroid: 3, normalized-entropy: 0.5095157180881823, [(2, 188), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.23893962143263123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23893962143263123, 0.18758547431076164] ***
*** starting iteration: 2; err: [Inf, 0.23893962143263123, 0.18758547431076164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23893962143263123, 0.18758547431076164, 0.1855458835532816] ***
*** starting iteration: 3; err: [Inf, 0.23893962143263123, 0.18758547431076164, 0.1855458835532816] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23893962143263123, 0.18758547431076164, 0.1855458835532816, 0.18530735135422433] ***
*** finished computation of 7 references, err: [Inf, 0.23893962143263123, 0.18758547431076164, 0.1855458835532816, 0.18530735135422433] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 88, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [72, 21, 0]]
** centroid: 3, normalized-entropy: 0.7706290693639406, [(1, 72), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [86, 18, 0]]
** centroid: 4, normalized-entropy: 0.6646953053493416, [(1, 86), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 27, 0]]
** centroid: 5, normalized-entropy: 0.8453509366224364, [(1, 72), (2, 27)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [94, 2, 0]]
** centroid: 6, normalized-entropy: 0.14609425012013613, [(1, 94), (2, 2)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 88, 21]]
** centroid: 7, normalized-entropy: 0.70700406497476, [(2, 88), (3, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2295991426216497] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2295991426216497, 0.19020741851930542] ***
*** starting iteration: 2; err: [Inf, 0.2295991426216497, 0.19020741851930542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2295991426216497, 0.19020741851930542, 0.18633238542015138] ***
*** starting iteration: 3; err: [Inf, 0.2295991426216497, 0.19020741851930542, 0.18633238542015138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2295991426216497, 0.19020741851930542, 0.18633238542015138, 0.1853187519099111] ***
*** finished computation of 7 references, err: [Inf, 0.2295991426216497, 0.19020741851930542, 0.18633238542015138, 0.1853187519099111] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 79, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 40, 0]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(1, 60), (2, 40)]
*** center 4: selecting labels [1] (freq >= 2) [from [100, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 25, 0]]
** centroid: 5, normalized-entropy: 0.8652817028791377, [(1, 62), (2, 25)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 92, 31]]
** centroid: 6, normalized-entropy: 0.8144837282722616, [(2, 92), (3, 31)]
*** center 7: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23726762877428148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23726762877428148, 0.18440179981715765] ***
*** starting iteration: 2; err: [Inf, 0.23726762877428148, 0.18440179981715765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23726762877428148, 0.18440179981715765, 0.18362690733167633] ***
*** finished computation of 7 references, err: [Inf, 0.23726762877428148, 0.18440179981715765, 0.18362690733167633] ***
*** center 1: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 84, 24]]
** centroid: 2, normalized-entropy: 0.7642045065086204, [(2, 84), (3, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [87, 32, 0]]
** centroid: 4, normalized-entropy: 0.8398926865109739, [(1, 87), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [35, 73, 0]]
** centroid: 5, normalized-entropy: 0.9087569615031438, [(1, 35), (2, 73)]
*** center 6: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 56, 0]]
** centroid: 7, normalized-entropy: 0.5032583347756457, [(1, 7), (2, 56)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22909314105113796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22909314105113796, 0.19285168466312033] ***
*** finished computation of 7 references, err: [Inf, 0.22909314105113796, 0.19285168466312033] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 143, 21]]
** centroid: 1, normalized-entropy: 0.5520625714615981, [(2, 143), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 30, 0]]
** centroid: 3, normalized-entropy: 0.9438767571287909, [(1, 53), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [50, 22, 0]]
** centroid: 4, normalized-entropy: 0.887976319515135, [(1, 50), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [63, 31, 0]]
** centroid: 5, normalized-entropy: 0.9147088431405322, [(1, 63), (2, 31)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [84, 18, 0]]
** centroid: 6, normalized-entropy: 0.6722948170756378, [(1, 84), (2, 18)]
*** center 7: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2511802994641943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2511802994641943, 0.1912179346750679] ***
*** finished computation of 7 references, err: [Inf, 0.2511802994641943, 0.1912179346750679] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [68, 34, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 68), (2, 34)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 77, 31]]
** centroid: 2, normalized-entropy: 0.864862972019945, [(2, 77), (3, 31)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 36, 0]]
** centroid: 3, normalized-entropy: 0.9852281360342514, [(1, 48), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [88, 7, 0]]
** centroid: 4, normalized-entropy: 0.3795243778626806, [(1, 88), (2, 7)]
*** center 5: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 79, 0]]
** centroid: 6, normalized-entropy: 0.16702680404522793, [(1, 2), (2, 79)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [94, 4, 0]]
** centroid: 7, normalized-entropy: 0.2460225782203316, [(1, 94), (2, 4)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23914370569714655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23914370569714655, 0.1921315742335443] ***
*** finished computation of 7 references, err: [Inf, 0.23914370569714655, 0.1921315742335443] ***
*** center 1: selecting labels [1] (freq >= 1) [from [118, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [81, 11, 0]]
** centroid: 2, normalized-entropy: 0.5281098034628294, [(1, 81), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 49, 22]]
** centroid: 3, normalized-entropy: 0.893010810044601, [(2, 49), (3, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [59, 60, 0]]
** centroid: 5, normalized-entropy: 0.999949060376349, [(1, 59), (2, 60)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [11, 58, 0]]
** centroid: 6, normalized-entropy: 0.6329208984823799, [(1, 11), (2, 58)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 67, 2]]
** centroid: 7, normalized-entropy: 0.18927843126120178, [(2, 67), (3, 2)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35668532330788916] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35668532330788916, 0.22610864079873394] ***
*** finished computation of 7 references, err: [Inf, 0.35668532330788916, 0.22610864079873394] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [75, 30, 0]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(1, 75), (2, 30)]
*** center 2: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [67, 13, 0]]
** centroid: 3, normalized-entropy: 0.6402569436810504, [(1, 67), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [102, 24, 0]]
** centroid: 4, normalized-entropy: 0.7024665512903904, [(1, 102), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 44, 0]]
** centroid: 5, normalized-entropy: 0.999101248968496, [(1, 41), (2, 44)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 55, 16]]
** centroid: 6, normalized-entropy: 0.7698205808588191, [(2, 55), (3, 16)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 78, 5]]
** centroid: 7, normalized-entropy: 0.32840071392894665, [(2, 78), (3, 5)]
finished with 13 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27134649778228964] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27134649778228964, 0.21347726662566457] ***
*** finished computation of 7 references, err: [Inf, 0.27134649778228964, 0.21347726662566457] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [32, 56, 0]]
** centroid: 1, normalized-entropy: 0.9456603046006401, [(1, 32), (2, 56)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 77, 31]]
** centroid: 2, normalized-entropy: 0.864862972019945, [(2, 77), (3, 31)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 13, 0]]
** centroid: 3, normalized-entropy: 0.7473944462440388, [(1, 48), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [61, 23, 0]]
** centroid: 4, normalized-entropy: 0.8468781063424823, [(1, 61), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [4, 68, 0]]
** centroid: 5, normalized-entropy: 0.3095434291503252, [(1, 4), (2, 68)]
*** center 6: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [139, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.34054311120190073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34054311120190073, 0.2210134625563334] ***
*** finished computation of 7 references, err: [Inf, 0.34054311120190073, 0.2210134625563334] ***
*** center 1: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [82, 12, 0]]
** centroid: 2, normalized-entropy: 0.5509844433017146, [(1, 82), (2, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [102, 29, 0]]
** centroid: 3, normalized-entropy: 0.7626685455085028, [(1, 102), (2, 29)]
*** center 4: selecting labels [1, 2, 3] (freq >= 2) [from [32, 40, 3]]
** centroid: 4, normalized-entropy: 0.7531567503861853, [(1, 32), (2, 40), (3, 3)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 76, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [88, 3, 0]]
** centroid: 6, normalized-entropy: 0.20905980566852464, [(1, 88), (2, 3)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 85, 21]]
** centroid: 7, normalized-entropy: 0.7181384220154764, [(2, 85), (3, 21)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4410303002349227] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4410303002349227, 0.29732486635534644] ***
*** starting iteration: 2; err: [Inf, 0.4410303002349227, 0.29732486635534644] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4410303002349227, 0.29732486635534644, 0.2864774881020278] ***
*** starting iteration: 3; err: [Inf, 0.4410303002349227, 0.29732486635534644, 0.2864774881020278] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4410303002349227, 0.29732486635534644, 0.2864774881020278, 0.28507078527794544] ***
*** starting iteration: 4; err: [Inf, 0.4410303002349227, 0.29732486635534644, 0.2864774881020278, 0.28507078527794544] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4410303002349227, 0.29732486635534644, 0.2864774881020278, 0.28507078527794544, 0.28461480427494235] ***
*** finished computation of 3 references, err: [Inf, 0.4410303002349227, 0.29732486635534644, 0.2864774881020278, 0.28507078527794544, 0.28461480427494235] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [215, 32, 0]]
** centroid: 1, normalized-entropy: 0.5562155608893984, [(1, 215), (2, 32)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 182, 21]]
** centroid: 2, normalized-entropy: 0.47983202361612853, [(2, 182), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [186, 30, 0]]
** centroid: 3, normalized-entropy: 0.581321498763703, [(1, 186), (2, 30)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3402226373233527] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3402226373233527, 0.2957816478605012] ***
*** starting iteration: 2; err: [Inf, 0.3402226373233527, 0.2957816478605012] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3402226373233527, 0.2957816478605012, 0.2916184421209828] ***
*** starting iteration: 3; err: [Inf, 0.3402226373233527, 0.2957816478605012, 0.2916184421209828] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3402226373233527, 0.2957816478605012, 0.2916184421209828, 0.2913057629292694] ***
*** finished computation of 3 references, err: [Inf, 0.3402226373233527, 0.2957816478605012, 0.2916184421209828, 0.2913057629292694] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [121, 79, 0]]
** centroid: 1, normalized-entropy: 0.9679505356936395, [(1, 121), (2, 79)]
*** center 2: selecting labels [1] (freq >= 1) [from [210, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [68, 158, 31]]
** centroid: 3, normalized-entropy: 0.8246781960920094, [(1, 68), (2, 158), (3, 31)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3546179881629379] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3546179881629379, 0.33438513761405825] ***
*** starting iteration: 2; err: [Inf, 0.3546179881629379, 0.33438513761405825] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3546179881629379, 0.33438513761405825, 0.33038796661798653] ***
*** starting iteration: 3; err: [Inf, 0.3546179881629379, 0.33438513761405825, 0.33038796661798653] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3546179881629379, 0.33438513761405825, 0.33038796661798653, 0.32921836772623625] ***
*** starting iteration: 4; err: [Inf, 0.3546179881629379, 0.33438513761405825, 0.33038796661798653, 0.32921836772623625] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3546179881629379, 0.33438513761405825, 0.33038796661798653, 0.32921836772623625, 0.3285290791952949] ***
*** finished computation of 3 references, err: [Inf, 0.3546179881629379, 0.33438513761405825, 0.33038796661798653, 0.32921836772623625, 0.3285290791952949] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [82, 101, 23]]
** centroid: 1, normalized-entropy: 0.8746602434665414, [(1, 82), (2, 101), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [233, 5, 0]]
** centroid: 2, normalized-entropy: 0.1470656112958254, [(1, 233), (2, 5)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [83, 139, 1]]
** centroid: 3, normalized-entropy: 0.6251002901996441, [(1, 83), (2, 139), (3, 1)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3041937769692693] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3041937769692693, 0.24551592639706157] ***
*** finished computation of 3 references, err: [Inf, 0.3041937769692693, 0.24551592639706157] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [136, 203, 21]]
** centroid: 1, normalized-entropy: 0.7796719883826141, [(1, 136), (2, 203), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [111, 41, 0]]
** centroid: 2, normalized-entropy: 0.8410867676922489, [(1, 111), (2, 41)]
*** center 3: selecting labels [1] (freq >= 2) [from [154, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31170700463107504] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31170700463107504, 0.2416896149557994] ***
*** finished computation of 3 references, err: [Inf, 0.31170700463107504, 0.2416896149557994] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [271, 52, 0]]
** centroid: 1, normalized-entropy: 0.6366743932380861, [(1, 271), (2, 52)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [128, 47, 0]]
** centroid: 2, normalized-entropy: 0.8394072488103348, [(1, 128), (2, 47)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 138, 31]]
** centroid: 3, normalized-entropy: 0.6875275980728326, [(2, 138), (3, 31)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2993578623862996] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2993578623862996, 0.24352467483861828] ***
*** finished computation of 3 references, err: [Inf, 0.2993578623862996, 0.24352467483861828] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [280, 60, 0]]
** centroid: 1, normalized-entropy: 0.6722948170756378, [(1, 280), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [118, 31, 0]]
** centroid: 2, normalized-entropy: 0.7377459335716219, [(1, 118), (2, 31)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 154, 24]]
** centroid: 3, normalized-entropy: 0.5705411428522262, [(2, 154), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.19249340302419957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19249340302419957, 0.14739345809774804] ***
*** starting iteration: 2; err: [Inf, 0.19249340302419957, 0.14739345809774804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19249340302419957, 0.14739345809774804, 0.14478233716431055] ***
*** starting iteration: 3; err: [Inf, 0.19249340302419957, 0.14739345809774804, 0.14478233716431055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19249340302419957, 0.14739345809774804, 0.14478233716431055, 0.14459274132392025] ***
*** finished computation of 7 references, err: [Inf, 0.19249340302419957, 0.14739345809774804, 0.14478233716431055, 0.14459274132392025] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [11, 107, 0]]
** centroid: 1, normalized-entropy: 0.44712851249800223, [(1, 11), (2, 107)]
*** center 2: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [72, 32, 0]]
** centroid: 3, normalized-entropy: 0.8904916402194913, [(1, 72), (2, 32)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [65, 22, 0]]
** centroid: 4, normalized-entropy: 0.8158009273789572, [(1, 65), (2, 22)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 81, 21]]
** centroid: 5, normalized-entropy: 0.7335379291086666, [(2, 81), (3, 21)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [98, 2, 0]]
** centroid: 6, normalized-entropy: 0.14144054254182067, [(1, 98), (2, 2)]
*** center 7: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19384257238765976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19384257238765976, 0.14845032924074103] ***
*** starting iteration: 2; err: [Inf, 0.19384257238765976, 0.14845032924074103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19384257238765976, 0.14845032924074103, 0.1451151528642855] ***
*** starting iteration: 3; err: [Inf, 0.19384257238765976, 0.14845032924074103, 0.1451151528642855] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19384257238765976, 0.14845032924074103, 0.1451151528642855, 0.14476168484216195] ***
*** finished computation of 7 references, err: [Inf, 0.19384257238765976, 0.14845032924074103, 0.1451151528642855, 0.14476168484216195] ***
*** center 1: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 57, 31]]
** centroid: 2, normalized-entropy: 0.9360814319397586, [(2, 57), (3, 31)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [77, 18, 0]]
** centroid: 3, normalized-entropy: 0.7003691487575897, [(1, 77), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [5, 85, 0]]
** centroid: 4, normalized-entropy: 0.3095434291503252, [(1, 5), (2, 85)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 71, 0]]
** centroid: 5, normalized-entropy: 0.8592759806609698, [(1, 28), (2, 71)]
*** center 6: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [90, 6, 0]]
** centroid: 7, normalized-entropy: 0.3372900666170139, [(1, 90), (2, 6)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19091686275417635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19091686275417635, 0.14987846430093665] ***
*** starting iteration: 2; err: [Inf, 0.19091686275417635, 0.14987846430093665] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19091686275417635, 0.14987846430093665, 0.1462631369508088] ***
*** starting iteration: 3; err: [Inf, 0.19091686275417635, 0.14987846430093665, 0.1462631369508088] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19091686275417635, 0.14987846430093665, 0.1462631369508088, 0.1453340696087149] ***
*** finished computation of 7 references, err: [Inf, 0.19091686275417635, 0.14987846430093665, 0.1462631369508088, 0.1453340696087149] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [76, 59, 0]]
** centroid: 1, normalized-entropy: 0.988530923465193, [(1, 76), (2, 59)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [80, 9, 0]]
** centroid: 2, normalized-entropy: 0.4725472219330293, [(1, 80), (2, 9)]
*** center 3: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 79, 24]]
** centroid: 4, normalized-entropy: 0.7832211182191516, [(2, 79), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [90, 5, 0]]
** centroid: 5, normalized-entropy: 0.2974722489192896, [(1, 90), (2, 5)]
*** center 6: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 93, 0]]
** centroid: 7, normalized-entropy: 0.0849955598367127, [(1, 1), (2, 93)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.35495439227167014] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35495439227167014, 0.23072400130471354] ***
*** starting iteration: 2; err: [Inf, 0.35495439227167014, 0.23072400130471354] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35495439227167014, 0.23072400130471354, 0.22838858867276673] ***
*** starting iteration: 3; err: [Inf, 0.35495439227167014, 0.23072400130471354, 0.22838858867276673] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35495439227167014, 0.23072400130471354, 0.22838858867276673, 0.2275464254188108] ***
*** finished computation of 3 references, err: [Inf, 0.35495439227167014, 0.23072400130471354, 0.22838858867276673, 0.2275464254188108] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [230, 23, 0]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(1, 230), (2, 23)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 180, 21]]
** centroid: 2, normalized-entropy: 0.4830306801456181, [(2, 180), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [171, 41, 0]]
** centroid: 3, normalized-entropy: 0.7085222836441899, [(1, 171), (2, 41)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39527879774883234] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39527879774883234, 0.23314894513664083] ***
*** starting iteration: 2; err: [Inf, 0.39527879774883234, 0.23314894513664083] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39527879774883234, 0.23314894513664083, 0.2320602088300944] ***
*** starting iteration: 3; err: [Inf, 0.39527879774883234, 0.23314894513664083, 0.2320602088300944] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39527879774883234, 0.23314894513664083, 0.2320602088300944, 0.2316726640179597] ***
*** finished computation of 3 references, err: [Inf, 0.39527879774883234, 0.23314894513664083, 0.2320602088300944, 0.2316726640179597] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [59, 167, 31]]
** centroid: 1, normalized-entropy: 0.7947035696367514, [(1, 59), (2, 167), (3, 31)]
*** center 2: selecting labels [1] (freq >= 1) [from [218, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [122, 70, 0]]
** centroid: 3, normalized-entropy: 0.9464220508835531, [(1, 122), (2, 70)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3299465604305178] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3299465604305178, 0.23647469804640384] ***
*** starting iteration: 2; err: [Inf, 0.3299465604305178, 0.23647469804640384] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3299465604305178, 0.23647469804640384, 0.23258576479585452] ***
*** starting iteration: 3; err: [Inf, 0.3299465604305178, 0.23647469804640384, 0.23258576479585452] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3299465604305178, 0.23647469804640384, 0.23258576479585452, 0.23185708084474618] ***
*** finished computation of 3 references, err: [Inf, 0.3299465604305178, 0.23647469804640384, 0.23258576479585452, 0.23185708084474618] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [242, 15, 0]]
** centroid: 1, normalized-entropy: 0.32092313925387933, [(1, 242), (2, 15)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 186, 24]]
** centroid: 2, normalized-entropy: 0.5127091420308771, [(2, 186), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [156, 44, 0]]
** centroid: 3, normalized-entropy: 0.7601675029619658, [(1, 156), (2, 44)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18724520854629553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18724520854629553, 0.1486667590782147] ***
*** starting iteration: 2; err: [Inf, 0.18724520854629553, 0.1486667590782147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18724520854629553, 0.1486667590782147, 0.1454319888641974] ***
*** starting iteration: 3; err: [Inf, 0.18724520854629553, 0.1486667590782147, 0.1454319888641974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18724520854629553, 0.1486667590782147, 0.1454319888641974, 0.14432283337074178] ***
*** finished computation of 7 references, err: [Inf, 0.18724520854629553, 0.1486667590782147, 0.1454319888641974, 0.14432283337074178] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 109, 21]]
** centroid: 1, normalized-entropy: 0.6379773724204627, [(2, 109), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [93, 9, 0]]
** centroid: 3, normalized-entropy: 0.43055186701043935, [(1, 93), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [94, 3, 0]]
** centroid: 4, normalized-entropy: 0.19902377455969078, [(1, 94), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 20, 0]]
** centroid: 5, normalized-entropy: 0.7778108790853029, [(1, 67), (2, 20)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 79, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [67, 24, 0]]
** centroid: 7, normalized-entropy: 0.8323322690121193, [(1, 67), (2, 24)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19740724938920234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19740724938920234, 0.15031253855910734] ***
*** starting iteration: 2; err: [Inf, 0.19740724938920234, 0.15031253855910734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19740724938920234, 0.15031253855910734, 0.1468986063131663] ***
*** starting iteration: 3; err: [Inf, 0.19740724938920234, 0.15031253855910734, 0.1468986063131663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19740724938920234, 0.15031253855910734, 0.1468986063131663, 0.1458929941425382] ***
*** finished computation of 7 references, err: [Inf, 0.19740724938920234, 0.15031253855910734, 0.1468986063131663, 0.1458929941425382] ***
*** center 1: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 58, 31]]
** centroid: 3, normalized-entropy: 0.9325538428833382, [(2, 58), (3, 31)]
*** center 4: selecting labels [1] (freq >= 2) [from [138, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 23, 0]]
** centroid: 5, normalized-entropy: 0.8844839729019952, [(1, 53), (2, 23)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 74, 0]]
** centroid: 6, normalized-entropy: 0.340373285759646, [(1, 5), (2, 74)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 82, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19108071862517492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19108071862517492, 0.15063879303801722] ***
*** starting iteration: 2; err: [Inf, 0.19108071862517492, 0.15063879303801722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19108071862517492, 0.15063879303801722, 0.1438192056486386] ***
*** starting iteration: 3; err: [Inf, 0.19108071862517492, 0.15063879303801722, 0.1438192056486386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19108071862517492, 0.15063879303801722, 0.1438192056486386, 0.142023296540846] ***
*** finished computation of 7 references, err: [Inf, 0.19108071862517492, 0.15063879303801722, 0.1438192056486386, 0.142023296540846] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [94, 10, 0]]
** centroid: 2, normalized-entropy: 0.45668363153944286, [(1, 94), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 65, 24]]
** centroid: 3, normalized-entropy: 0.8409805336163159, [(2, 65), (3, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 85, 0]]
** centroid: 5, normalized-entropy: 0.7732266742876346, [(1, 25), (2, 85)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 79, 0]]
** centroid: 6, normalized-entropy: 0.5357150195407704, [(1, 11), (2, 79)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [71, 6, 0]]
** centroid: 7, normalized-entropy: 0.39481484603049416, [(1, 71), (2, 6)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20085336938052922] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20085336938052922, 0.1494575628277345] ***
*** finished computation of 7 references, err: [Inf, 0.20085336938052922, 0.1494575628277345] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [116, 7, 0]]
** centroid: 1, normalized-entropy: 0.3150569452644301, [(1, 116), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [96, 4, 0]]
** centroid: 2, normalized-entropy: 0.24229218908241482, [(1, 96), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 49, 21]]
** centroid: 3, normalized-entropy: 0.8812908992306927, [(2, 49), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [79, 6, 0]]
** centroid: 4, normalized-entropy: 0.3681150054280774, [(1, 79), (2, 6)]
*** center 5: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [20, 91, 0]]
** centroid: 6, normalized-entropy: 0.680471054135434, [(1, 20), (2, 91)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 87, 0]]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9409888930847013, 0.9340088591585598, 0.9339878800956646, 0.9020397643152135, 0.8959768151384918, 0.891981802161443, 0.8900037762313211, 0.8760167352981725, 0.8740357123590656, 0.8559577541613469, 0.8469996943050836, 0.7649925374476272]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9409888930847013
finished with 13
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.1815061697277713] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1815061697277713, 0.15064959420456184] ***
*** finished computation of 7 references, err: [Inf, 0.1815061697277713, 0.15064959420456184] ***
*** center 1: selecting labels [1] (freq >= 2) [from [134, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [1, 71, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [5, 101, 0]]
** centroid: 3, normalized-entropy: 0.27425064105029284, [(1, 5), (2, 101)]
*** center 4: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 25, 0]]
** centroid: 5, normalized-entropy: 0.8652817028791377, [(1, 62), (2, 25)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [86, 17, 0]]
** centroid: 6, normalized-entropy: 0.646251622274129, [(1, 86), (2, 17)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 30, 21]]
** centroid: 7, normalized-entropy: 0.9774178175281716, [(2, 30), (3, 21)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28643205704382513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28643205704382513, 0.19577431879697488] ***
*** finished computation of 7 references, err: [Inf, 0.28643205704382513, 0.19577431879697488] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [16, 2, 0]]
** centroid: 1, normalized-entropy: 0.5032583347756457, [(1, 16), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [171, 28, 0]]
** centroid: 2, normalized-entropy: 0.5860782996235411, [(1, 171), (2, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [36, 31, 0]]
** centroid: 3, normalized-entropy: 0.995978956518722, [(1, 36), (2, 31)]
*** center 4: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 134, 31]]
** centroid: 5, normalized-entropy: 0.6970128982256057, [(2, 134), (3, 31)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [105, 42, 0]]
** centroid: 6, normalized-entropy: 0.8631205685666311, [(1, 105), (2, 42)]
*** center 7: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24868312777708407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24868312777708407, 0.17653187571618442] ***
*** finished computation of 7 references, err: [Inf, 0.24868312777708407, 0.17653187571618442] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [57, 14, 0]]
** centroid: 1, normalized-entropy: 0.7162583911075451, [(1, 57), (2, 14)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 86, 23]]
** centroid: 2, normalized-entropy: 0.7434073165779199, [(2, 86), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [160, 41, 0]]
** centroid: 3, normalized-entropy: 0.7298172266450014, [(1, 160), (2, 41)]
*** center 4: selecting labels [1] (freq >= 2) [from [149, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 37, 1]]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 61, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [31, 6, 0]]
** centroid: 7, normalized-entropy: 0.6394571324851642, [(1, 31), (2, 6)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9409888930847013, 0.9340088591585598, 0.9339878800956646, 0.9269658880437324, 0.9020397643152135, 0.8959768151384918, 0.891981802161443, 0.8900037762313211, 0.8760167352981725, 0.8740357123590656, 0.8559577541613469, 0.8469996943050836, 0.7649925374476272]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9409888930847013
finished with 14
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.22426094463991483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22426094463991483, 0.18845609208705766] ***
*** starting iteration: 2; err: [Inf, 0.22426094463991483, 0.18845609208705766] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22426094463991483, 0.18845609208705766, 0.18603344861909502] ***
*** starting iteration: 3; err: [Inf, 0.22426094463991483, 0.18845609208705766, 0.18603344861909502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22426094463991483, 0.18845609208705766, 0.18603344861909502, 0.18502849120244586] ***
*** finished computation of 7 references, err: [Inf, 0.22426094463991483, 0.18845609208705766, 0.18603344861909502, 0.18502849120244586] ***
*** center 1: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 61, 31]]
** centroid: 2, normalized-entropy: 0.9218764863469129, [(2, 61), (3, 31)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [69, 2, 0]]
** centroid: 3, normalized-entropy: 0.18512476010054582, [(1, 69), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [93, 19, 0]]
** centroid: 4, normalized-entropy: 0.6568871346605055, [(1, 93), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [15, 79, 0]]
** centroid: 5, normalized-entropy: 0.6332905746550958, [(1, 15), (2, 79)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [21, 76, 0]]
** centroid: 6, normalized-entropy: 0.7537153483720096, [(1, 21), (2, 76)]
*** center 7: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23923776344628306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23923776344628306, 0.19567492737381667] ***
*** starting iteration: 2; err: [Inf, 0.23923776344628306, 0.19567492737381667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23923776344628306, 0.19567492737381667, 0.19070990183376693] ***
*** starting iteration: 3; err: [Inf, 0.23923776344628306, 0.19567492737381667, 0.19070990183376693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23923776344628306, 0.19567492737381667, 0.19070990183376693, 0.18891908300134377] ***
*** finished computation of 7 references, err: [Inf, 0.23923776344628306, 0.19567492737381667, 0.19070990183376693, 0.18891908300134377] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [33, 66, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 33), (2, 66)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [75, 14, 0]]
** centroid: 2, normalized-entropy: 0.6278191534832795, [(1, 75), (2, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 61, 21]]
** centroid: 4, normalized-entropy: 0.8208002549877175, [(2, 61), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [95, 5, 0]]
** centroid: 5, normalized-entropy: 0.2863969571159561, [(1, 95), (2, 5)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 98, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23828998647596702] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23828998647596702, 0.19035000766374763] ***
*** starting iteration: 2; err: [Inf, 0.23828998647596702, 0.19035000766374763] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23828998647596702, 0.19035000766374763, 0.1864910090336579] ***
*** starting iteration: 3; err: [Inf, 0.23828998647596702, 0.19035000766374763, 0.1864910090336579] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23828998647596702, 0.19035000766374763, 0.1864910090336579, 0.1861521052573619] ***
*** finished computation of 7 references, err: [Inf, 0.23828998647596702, 0.19035000766374763, 0.1864910090336579, 0.1861521052573619] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [77, 13, 0]]
** centroid: 1, normalized-entropy: 0.5957610966703235, [(1, 77), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [71, 10, 0]]
** centroid: 2, normalized-entropy: 0.5392163432092415, [(1, 71), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 107, 24]]
** centroid: 3, normalized-entropy: 0.6870408064059199, [(2, 107), (3, 24)]
*** center 4: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [13, 86, 0]]
** centroid: 5, normalized-entropy: 0.5610284863400681, [(1, 13), (2, 86)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [69, 29, 0]]
** centroid: 6, normalized-entropy: 0.8762441668050731, [(1, 69), (2, 29)]
*** center 7: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9409888930847013, 0.9340088591585598, 0.9339878800956646, 0.9269658880437324, 0.9129608650566734, 0.9020397643152135, 0.8959768151384918, 0.891981802161443, 0.8900037762313211, 0.8760167352981725, 0.8740357123590656, 0.8559577541613469, 0.8469996943050836, 0.7649925374476272]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9409888930847013
finished with 14
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9409888930847013, 0.9340088591585598, 0.9339878800956646, 0.9269658880437324, 0.9129608650566734, 0.9020397643152135, 0.8959768151384918, 0.891981802161443, 0.8900037762313211, 0.8760167352981725, 0.8740357123590656, 0.8559577541613469, 0.8469996943050836, 0.7649925374476272]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9409888930847013
finished with 15
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.3073083439495068] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3073083439495068, 0.242909451265604] ***
*** starting iteration: 2; err: [Inf, 0.3073083439495068, 0.242909451265604] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3073083439495068, 0.242909451265604, 0.22794831430402449] ***
*** starting iteration: 3; err: [Inf, 0.3073083439495068, 0.242909451265604, 0.22794831430402449] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3073083439495068, 0.242909451265604, 0.22794831430402449, 0.22621422096829605] ***
*** starting iteration: 4; err: [Inf, 0.3073083439495068, 0.242909451265604, 0.22794831430402449, 0.22621422096829605] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3073083439495068, 0.242909451265604, 0.22794831430402449, 0.22621422096829605, 0.22589626966824605] ***
*** finished computation of 3 references, err: [Inf, 0.3073083439495068, 0.242909451265604, 0.22794831430402449, 0.22621422096829605, 0.22589626966824605] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [209, 27, 0]]
** centroid: 1, normalized-entropy: 0.5130666885003236, [(1, 209), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [192, 28, 0]]
** centroid: 2, normalized-entropy: 0.54991090463341, [(1, 192), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 189, 21]]
** centroid: 3, normalized-entropy: 0.46899559358928133, [(2, 189), (3, 21)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28134801119253194] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28134801119253194, 0.24704385994664063] ***
*** starting iteration: 2; err: [Inf, 0.28134801119253194, 0.24704385994664063] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28134801119253194, 0.24704385994664063, 0.2386593377298635] ***
*** starting iteration: 3; err: [Inf, 0.28134801119253194, 0.24704385994664063, 0.2386593377298635] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28134801119253194, 0.24704385994664063, 0.2386593377298635, 0.23708755463641695] ***
*** starting iteration: 4; err: [Inf, 0.28134801119253194, 0.24704385994664063, 0.2386593377298635, 0.23708755463641695] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28134801119253194, 0.24704385994664063, 0.2386593377298635, 0.23708755463641695, 0.23673954951776557] ***
*** finished computation of 3 references, err: [Inf, 0.28134801119253194, 0.24704385994664063, 0.2386593377298635, 0.23708755463641695, 0.23673954951776557] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 158, 31]]
** centroid: 1, normalized-entropy: 0.6438432504963351, [(2, 158), (3, 31)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [173, 44, 0]]
** centroid: 2, normalized-entropy: 0.7274236997200811, [(1, 173), (2, 44)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [226, 35, 0]]
** centroid: 3, normalized-entropy: 0.5685751494476382, [(1, 226), (2, 35)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.28524910170596085] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28524910170596085, 0.23794939971739787] ***
*** starting iteration: 2; err: [Inf, 0.28524910170596085, 0.23794939971739787] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28524910170596085, 0.23794939971739787, 0.2331249894116303] ***
*** starting iteration: 3; err: [Inf, 0.28524910170596085, 0.23794939971739787, 0.2331249894116303] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28524910170596085, 0.23794939971739787, 0.2331249894116303, 0.23210342616510243] ***
*** starting iteration: 4; err: [Inf, 0.28524910170596085, 0.23794939971739787, 0.2331249894116303, 0.23210342616510243] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28524910170596085, 0.23794939971739787, 0.2331249894116303, 0.23210342616510243, 0.2320044534357692] ***
*** finished computation of 3 references, err: [Inf, 0.28524910170596085, 0.23794939971739787, 0.2331249894116303, 0.23210342616510243, 0.2320044534357692] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [1, 198, 24]]
** centroid: 1, normalized-entropy: 0.33654010030024933, [(1, 1), (2, 198), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [241, 5, 0]]
** centroid: 2, normalized-entropy: 0.1432625927138025, [(1, 241), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [156, 42, 0]]
** centroid: 3, normalized-entropy: 0.7455178428108284, [(1, 156), (2, 42)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9409888930847013, 0.9340088591585598, 0.9339878800956646, 0.9269658880437324, 0.9129608650566734, 0.9020397643152135, 0.8959768151384918, 0.891981802161443, 0.8900037762313211, 0.8760167352981725, 0.8740357123590656, 0.8640197083310855, 0.8559577541613469, 0.8469996943050836, 0.7649925374476272]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9409888930847013
finished with 15
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9409888930847013, 0.9340088591585598, 0.9339878800956646, 0.9269658880437324, 0.9129608650566734, 0.9020397643152135, 0.8959768151384918, 0.891981802161443, 0.8900037762313211, 0.8760167352981725, 0.8740357123590656, 0.8640197083310855, 0.8559577541613469, 0.8469996943050836, 0.7649925374476272]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9409888930847013
finished with 16
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.2926282409128283] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2926282409128283, 0.2609878107443922] ***
*** starting iteration: 2; err: [Inf, 0.2926282409128283, 0.2609878107443922] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2926282409128283, 0.2609878107443922, 0.23955602551056715] ***
*** starting iteration: 3; err: [Inf, 0.2926282409128283, 0.2609878107443922, 0.23955602551056715] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2926282409128283, 0.2609878107443922, 0.23955602551056715, 0.23765466614785763] ***
*** starting iteration: 4; err: [Inf, 0.2926282409128283, 0.2609878107443922, 0.23955602551056715, 0.23765466614785763] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2926282409128283, 0.2609878107443922, 0.23955602551056715, 0.23765466614785763, 0.23717804200522177] ***
*** finished computation of 3 references, err: [Inf, 0.2926282409128283, 0.2609878107443922, 0.23955602551056715, 0.23765466614785763, 0.23717804200522177] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [100, 145, 20]]
** centroid: 1, normalized-entropy: 0.8125872069688523, [(1, 100), (2, 145), (3, 20)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [111, 99, 1]]
** centroid: 2, normalized-entropy: 0.6538509299578804, [(1, 111), (2, 99), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [190, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2927833907459786] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2927833907459786, 0.23598173877986697] ***
*** starting iteration: 2; err: [Inf, 0.2927833907459786, 0.23598173877986697] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2927833907459786, 0.23598173877986697, 0.23167434162313658] ***
*** starting iteration: 3; err: [Inf, 0.2927833907459786, 0.23598173877986697, 0.23167434162313658] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2927833907459786, 0.23598173877986697, 0.23167434162313658, 0.23171096085954732] ***
*** finished computation of 3 references, err: [Inf, 0.2927833907459786, 0.23598173877986697, 0.23167434162313658, 0.23171096085954732] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [124, 72, 0]]
** centroid: 1, normalized-entropy: 0.9486131982385807, [(1, 124), (2, 72)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [60, 165, 31]]
** centroid: 2, normalized-entropy: 0.7999087940351018, [(1, 60), (2, 165), (3, 31)]
*** center 3: selecting labels [1] (freq >= 1) [from [215, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31583087048681824] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31583087048681824, 0.24102280911957397] ***
*** starting iteration: 2; err: [Inf, 0.31583087048681824, 0.24102280911957397] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31583087048681824, 0.24102280911957397, 0.23881720599608086] ***
*** starting iteration: 3; err: [Inf, 0.31583087048681824, 0.24102280911957397, 0.23881720599608086] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31583087048681824, 0.24102280911957397, 0.23881720599608086, 0.23870215571668374] ***
*** finished computation of 3 references, err: [Inf, 0.31583087048681824, 0.24102280911957397, 0.23881720599608086, 0.23870215571668374] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [103, 86, 3]]
** centroid: 1, normalized-entropy: 0.6907024263731613, [(1, 103), (2, 86), (3, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [100, 159, 21]]
** centroid: 2, normalized-entropy: 0.8040446424176235, [(1, 100), (2, 159), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [195, 0, 0]]
finished with 7 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 16)
[0.9409888930847013, 0.9340088591585598, 0.9339878800956646, 0.9269658880437324, 0.9129608650566734, 0.9020397643152135, 0.895991800183417, 0.8959768151384918, 0.891981802161443, 0.8900037762313211, 0.8760167352981725, 0.8740357123590656, 0.8640197083310855, 0.8559577541613469, 0.8469996943050836, 0.7649925374476272]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9409888930847013
finished with 18
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.18548723694088087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18548723694088087, 0.153270354940886] ***
*** starting iteration: 2; err: [Inf, 0.18548723694088087, 0.153270354940886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18548723694088087, 0.153270354940886, 0.1507302779010735] ***
*** starting iteration: 3; err: [Inf, 0.18548723694088087, 0.153270354940886, 0.1507302779010735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18548723694088087, 0.153270354940886, 0.1507302779010735, 0.14934760062010013] ***
*** finished computation of 7 references, err: [Inf, 0.18548723694088087, 0.153270354940886, 0.1507302779010735, 0.14934760062010013] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [91, 2, 0]]
** centroid: 1, normalized-entropy: 0.14981136747274781, [(1, 91), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [82, 42, 0]]
** centroid: 2, normalized-entropy: 0.9235785996175947, [(1, 82), (2, 42)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [36, 41, 0]]
** centroid: 3, normalized-entropy: 0.9969562518473082, [(1, 36), (2, 41)]
*** center 4: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 68, 1]]
*** center 6: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 91, 20]]
** centroid: 7, normalized-entropy: 0.680471054135434, [(2, 91), (3, 20)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.16281206876519827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16281206876519827, 0.15021893983382895] ***
*** starting iteration: 2; err: [Inf, 0.16281206876519827, 0.15021893983382895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16281206876519827, 0.15021893983382895, 0.14756877671625615] ***
*** starting iteration: 3; err: [Inf, 0.16281206876519827, 0.15021893983382895, 0.14756877671625615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16281206876519827, 0.15021893983382895, 0.14756877671625615, 0.14633423551034624] ***
*** finished computation of 7 references, err: [Inf, 0.16281206876519827, 0.15021893983382895, 0.14756877671625615, 0.14633423551034624] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 79, 31]]
** centroid: 1, normalized-entropy: 0.8579163978157118, [(2, 79), (3, 31)]
*** center 2: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [140, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [93, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 32, 0]]
** centroid: 5, normalized-entropy: 0.9844268978000115, [(1, 43), (2, 32)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [24, 47, 0]]
** centroid: 6, normalized-entropy: 0.9229192878686723, [(1, 24), (2, 47)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [21, 78, 0]]
** centroid: 7, normalized-entropy: 0.7455178428108284, [(1, 21), (2, 78)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1663057389648176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1663057389648176, 0.15373786508880286] ***
*** starting iteration: 2; err: [Inf, 0.1663057389648176, 0.15373786508880286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1663057389648176, 0.15373786508880286, 0.14963378068171385] ***
*** starting iteration: 3; err: [Inf, 0.1663057389648176, 0.15373786508880286, 0.14963378068171385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1663057389648176, 0.15373786508880286, 0.14963378068171385, 0.14694051421421958] ***
*** finished computation of 7 references, err: [Inf, 0.1663057389648176, 0.15373786508880286, 0.14963378068171385, 0.14694051421421958] ***
*** center 1: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [79, 33, 0]]
** centroid: 2, normalized-entropy: 0.8746434484431391, [(1, 79), (2, 33)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [29, 74, 0]]
** centroid: 3, normalized-entropy: 0.857558799850773, [(1, 29), (2, 74)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [77, 34, 0]]
** centroid: 5, normalized-entropy: 0.8888636119715568, [(1, 77), (2, 34)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 104, 24]]
** centroid: 6, normalized-entropy: 0.6962122601251459, [(2, 104), (3, 24)]
*** center 7: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22177155809784616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22177155809784616, 0.1899049205246854] ***
*** starting iteration: 2; err: [Inf, 0.22177155809784616, 0.1899049205246854] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22177155809784616, 0.1899049205246854, 0.18788497102154592] ***
*** starting iteration: 3; err: [Inf, 0.22177155809784616, 0.1899049205246854, 0.18788497102154592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22177155809784616, 0.1899049205246854, 0.18788497102154592, 0.18754657304722694] ***
*** finished computation of 7 references, err: [Inf, 0.22177155809784616, 0.1899049205246854, 0.18788497102154592, 0.18754657304722694] ***
*** center 1: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [88, 13, 0]]
** centroid: 2, normalized-entropy: 0.5538976334852961, [(1, 88), (2, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 66, 21]]
** centroid: 4, normalized-entropy: 0.7973265101474423, [(2, 66), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [94, 23, 0]]
** centroid: 5, normalized-entropy: 0.7150375653354627, [(1, 94), (2, 23)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 112, 0]]
** centroid: 6, normalized-entropy: 0.25469470466982796, [(1, 5), (2, 112)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [38, 30, 0]]
** centroid: 7, normalized-entropy: 0.9899927915575186, [(1, 38), (2, 30)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23484901936164174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23484901936164174, 0.19447893800627233] ***
*** starting iteration: 2; err: [Inf, 0.23484901936164174, 0.19447893800627233] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23484901936164174, 0.19447893800627233, 0.189529538423038] ***
*** starting iteration: 3; err: [Inf, 0.23484901936164174, 0.19447893800627233, 0.189529538423038] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23484901936164174, 0.19447893800627233, 0.189529538423038, 0.18594797159163937] ***
*** finished computation of 7 references, err: [Inf, 0.23484901936164174, 0.19447893800627233, 0.189529538423038, 0.18594797159163937] ***
*** center 1: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [6, 74, 0]]
** centroid: 2, normalized-entropy: 0.3843115441264972, [(1, 6), (2, 74)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [56, 9, 0]]
** centroid: 3, normalized-entropy: 0.5801954953637372, [(1, 56), (2, 9)]
*** center 4: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [91, 24, 0]]
** centroid: 5, normalized-entropy: 0.7389821181149047, [(1, 91), (2, 24)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 64, 31]]
** centroid: 6, normalized-entropy: 0.9111178649415465, [(2, 64), (3, 31)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [34, 66, 0]]
** centroid: 7, normalized-entropy: 0.9248187049730301, [(1, 34), (2, 66)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25080693958011613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25080693958011613, 0.20454711309177565] ***
*** starting iteration: 2; err: [Inf, 0.25080693958011613, 0.20454711309177565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25080693958011613, 0.20454711309177565, 0.20055141558415485] ***
*** starting iteration: 3; err: [Inf, 0.25080693958011613, 0.20454711309177565, 0.20055141558415485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25080693958011613, 0.20454711309177565, 0.20055141558415485, 0.19812538390183287] ***
*** finished computation of 7 references, err: [Inf, 0.25080693958011613, 0.20454711309177565, 0.20055141558415485, 0.19812538390183287] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 85, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 78, 24]]
** centroid: 3, normalized-entropy: 0.787126586201269, [(2, 78), (3, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 36, 0]]
** centroid: 5, normalized-entropy: 0.9892452969285004, [(1, 46), (2, 36)]
*** center 6: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [37, 46, 0]]
** centroid: 7, normalized-entropy: 0.9915017866855546, [(1, 37), (2, 46)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 18)
[0.9430028831226437, 0.9409888930847013, 0.9340088591585598, 0.9339878800956646, 0.9269658880437324, 0.9179868491245737, 0.9129608650566734, 0.9020397643152135, 0.895991800183417, 0.8959768151384918, 0.891981802161443, 0.8900037762313211, 0.8760167352981725, 0.8740357123590656, 0.8640197083310855, 0.8559577541613469, 0.8469996943050836, 0.7649925374476272]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 2) => 0.9430028831226437
finished with 18
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.2021685306513682] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2021685306513682, 0.16158672357816248] ***
*** starting iteration: 2; err: [Inf, 0.2021685306513682, 0.16158672357816248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2021685306513682, 0.16158672357816248, 0.15333023557043635] ***
*** starting iteration: 3; err: [Inf, 0.2021685306513682, 0.16158672357816248, 0.15333023557043635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2021685306513682, 0.16158672357816248, 0.15333023557043635, 0.14972380078211428] ***
*** finished computation of 7 references, err: [Inf, 0.2021685306513682, 0.16158672357816248, 0.15333023557043635, 0.14972380078211428] ***
*** center 1: selecting labels [1] (freq >= 2) [from [198, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [168, 37, 0]]
** centroid: 2, normalized-entropy: 0.6811430187488468, [(1, 168), (2, 37)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 152, 24]]
** centroid: 3, normalized-entropy: 0.5746356978376794, [(2, 152), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [83, 26, 0]]
** centroid: 4, normalized-entropy: 0.7925906965800167, [(1, 83), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 64, 0]]
** centroid: 5, normalized-entropy: 0.9975844702713692, [(1, 57), (2, 64)]
*** center 6: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 84, 14]]
** centroid: 7, normalized-entropy: 0.5916727785823274, [(2, 84), (3, 14)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24545989268459378] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24545989268459378, 0.18061896952427925] ***
*** starting iteration: 2; err: [Inf, 0.24545989268459378, 0.18061896952427925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24545989268459378, 0.18061896952427925, 0.16473419382423163] ***
*** starting iteration: 3; err: [Inf, 0.24545989268459378, 0.18061896952427925, 0.16473419382423163] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24545989268459378, 0.18061896952427925, 0.16473419382423163, 0.15749985792301596] ***
*** finished computation of 7 references, err: [Inf, 0.24545989268459378, 0.18061896952427925, 0.16473419382423163, 0.15749985792301596] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 43, 20]]
** centroid: 1, normalized-entropy: 0.9015982354056711, [(2, 43), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 51, 1]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 2, 0]]
** centroid: 4, normalized-entropy: 0.21357981533827744, [(1, 57), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [104, 26, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 104), (2, 26)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 30, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [31, 33, 0]]
** centroid: 7, normalized-entropy: 0.9992954443621548, [(1, 31), (2, 33)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17977738991938533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17977738991938533, 0.15466919827181846] ***
*** starting iteration: 2; err: [Inf, 0.17977738991938533, 0.15466919827181846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17977738991938533, 0.15466919827181846, 0.15080248234421015] ***
*** starting iteration: 3; err: [Inf, 0.17977738991938533, 0.15466919827181846, 0.15080248234421015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17977738991938533, 0.15466919827181846, 0.15080248234421015, 0.14962035785801708] ***
*** finished computation of 7 references, err: [Inf, 0.17977738991938533, 0.15466919827181846, 0.15080248234421015, 0.14962035785801708] ***
*** center 1: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 19, 0]]
** centroid: 2, normalized-entropy: 0.8009591077369054, [(1, 59), (2, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [23, 26, 0]]
** centroid: 4, normalized-entropy: 0.9972943816462351, [(1, 23), (2, 26)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 60, 25]]
** centroid: 5, normalized-entropy: 0.8739810481273581, [(2, 60), (3, 25)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [14, 69, 0]]
** centroid: 6, normalized-entropy: 0.6546640527143932, [(1, 14), (2, 69)]
*** center 7: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21691633940301835] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21691633940301835, 0.16105355859547854] ***
*** starting iteration: 2; err: [Inf, 0.21691633940301835, 0.16105355859547854] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21691633940301835, 0.16105355859547854, 0.1522749296016991] ***
*** starting iteration: 3; err: [Inf, 0.21691633940301835, 0.16105355859547854, 0.1522749296016991] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21691633940301835, 0.16105355859547854, 0.1522749296016991, 0.14915280510112644] ***
*** finished computation of 7 references, err: [Inf, 0.21691633940301835, 0.16105355859547854, 0.1522749296016991, 0.14915280510112644] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [73, 22, 0]]
** centroid: 1, normalized-entropy: 0.7807536250860868, [(1, 73), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [2, 68, 0]]
** centroid: 2, normalized-entropy: 0.18717625687320805, [(1, 2), (2, 68)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 88, 15]]
** centroid: 3, normalized-entropy: 0.5987981837442868, [(2, 88), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [39, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [47, 12, 0]]
** centroid: 6, normalized-entropy: 0.7286561673702678, [(1, 47), (2, 12)]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20152939650788904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20152939650788904, 0.17066098747588693] ***
*** starting iteration: 2; err: [Inf, 0.20152939650788904, 0.17066098747588693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20152939650788904, 0.17066098747588693, 0.153458131397143] ***
*** starting iteration: 3; err: [Inf, 0.20152939650788904, 0.17066098747588693, 0.153458131397143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20152939650788904, 0.17066098747588693, 0.153458131397143, 0.14796107468288391] ***
*** finished computation of 7 references, err: [Inf, 0.20152939650788904, 0.17066098747588693, 0.153458131397143, 0.14796107468288391] ***
*** center 1: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [24, 37, 0]]
** centroid: 2, normalized-entropy: 0.9669852958320848, [(1, 24), (2, 37)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 22, 0]]
** centroid: 3, normalized-entropy: 0.9132401614300725, [(1, 45), (2, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [59, 17, 0]]
** centroid: 5, normalized-entropy: 0.7668379316856329, [(1, 59), (2, 17)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 57, 14]]
** centroid: 6, normalized-entropy: 0.7162583911075451, [(2, 57), (3, 14)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 54, 1]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18988551917113364] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18988551917113364, 0.16049707623105497] ***
*** starting iteration: 2; err: [Inf, 0.18988551917113364, 0.16049707623105497] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18988551917113364, 0.16049707623105497, 0.15386617753095924] ***
*** starting iteration: 3; err: [Inf, 0.18988551917113364, 0.16049707623105497, 0.15386617753095924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18988551917113364, 0.16049707623105497, 0.15386617753095924, 0.14975685735978186] ***
*** finished computation of 7 references, err: [Inf, 0.18988551917113364, 0.16049707623105497, 0.15386617753095924, 0.14975685735978186] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 45, 20]]
** centroid: 1, normalized-entropy: 0.8904916402194913, [(2, 45), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 63, 1]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 38, 0]]
** centroid: 6, normalized-entropy: 0.45371633918694493, [(1, 4), (2, 38)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [83, 37, 0]]
** centroid: 7, normalized-entropy: 0.8912402011913028, [(1, 83), (2, 37)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.16435139521583914] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16435139521583914, 0.14689935000799598] ***
*** starting iteration: 2; err: [Inf, 0.16435139521583914, 0.14689935000799598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16435139521583914, 0.14689935000799598, 0.14369431706145405] ***
*** starting iteration: 3; err: [Inf, 0.16435139521583914, 0.14689935000799598, 0.14369431706145405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16435139521583914, 0.14689935000799598, 0.14369431706145405, 0.14208056980371475] ***
*** finished computation of 7 references, err: [Inf, 0.16435139521583914, 0.14689935000799598, 0.14369431706145405, 0.14208056980371475] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [43, 18, 0]]
** centroid: 1, normalized-entropy: 0.8751957887407251, [(1, 43), (2, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 95, 16]]
** centroid: 3, normalized-entropy: 0.5949898952560516, [(2, 95), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [40, 26, 0]]
** centroid: 5, normalized-entropy: 0.9672947789468944, [(1, 40), (2, 26)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [56, 23, 0]]
** centroid: 7, normalized-entropy: 0.8701883352082787, [(1, 56), (2, 23)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19841942147933878] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19841942147933878, 0.16004311570618301] ***
*** starting iteration: 2; err: [Inf, 0.19841942147933878, 0.16004311570618301] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19841942147933878, 0.16004311570618301, 0.15252931537944822] ***
*** starting iteration: 3; err: [Inf, 0.19841942147933878, 0.16004311570618301, 0.15252931537944822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19841942147933878, 0.16004311570618301, 0.15252931537944822, 0.1491442719111219] ***
*** finished computation of 7 references, err: [Inf, 0.19841942147933878, 0.16004311570618301, 0.15252931537944822, 0.1491442719111219] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 36, 25]]
** centroid: 1, normalized-entropy: 0.9764143081154868, [(2, 36), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [36, 35, 0]]
** centroid: 2, normalized-entropy: 0.9998568991526107, [(1, 36), (2, 35)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 21, 0]]
** centroid: 3, normalized-entropy: 0.8554508105601307, [(1, 54), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [9, 91, 0]]
** centroid: 4, normalized-entropy: 0.4364698170641031, [(1, 9), (2, 91)]
*** center 5: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23754116506874562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23754116506874562, 0.1592153893802315] ***
*** starting iteration: 2; err: [Inf, 0.23754116506874562, 0.1592153893802315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23754116506874562, 0.1592153893802315, 0.15141184433549643] ***
*** starting iteration: 3; err: [Inf, 0.23754116506874562, 0.1592153893802315, 0.15141184433549643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23754116506874562, 0.1592153893802315, 0.15141184433549643, 0.14999892012961208] ***
*** finished computation of 7 references, err: [Inf, 0.23754116506874562, 0.1592153893802315, 0.15141184433549643, 0.14999892012961208] ***
*** center 1: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 20, 0]]
** centroid: 4, normalized-entropy: 0.7382848661434506, [(1, 76), (2, 20)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 107, 20]]
** centroid: 5, normalized-entropy: 0.628247447066103, [(2, 107), (3, 20)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [37, 20, 0]]
** centroid: 6, normalized-entropy: 0.9348490242345946, [(1, 37), (2, 20)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [46, 35, 0]]
** centroid: 7, normalized-entropy: 0.9866554896538049, [(1, 46), (2, 35)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1882656218688935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1882656218688935, 0.16279960945434868] ***
*** starting iteration: 2; err: [Inf, 0.1882656218688935, 0.16279960945434868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1882656218688935, 0.16279960945434868, 0.15341134056076408] ***
*** starting iteration: 3; err: [Inf, 0.1882656218688935, 0.16279960945434868, 0.15341134056076408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1882656218688935, 0.16279960945434868, 0.15341134056076408, 0.14919774210546166] ***
*** finished computation of 7 references, err: [Inf, 0.1882656218688935, 0.16279960945434868, 0.15341134056076408, 0.14919774210546166] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [20, 49, 0]]
** centroid: 1, normalized-entropy: 0.868533960265235, [(1, 20), (2, 49)]
*** center 2: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [21, 69, 0]]
** centroid: 4, normalized-entropy: 0.7837769474847011, [(1, 21), (2, 69)]
*** center 5: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 65, 22]]
** centroid: 6, normalized-entropy: 0.8158009273789572, [(2, 65), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [28, 2, 0]]
** centroid: 7, normalized-entropy: 0.3533593350214213, [(1, 28), (2, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18869168762641494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18869168762641494, 0.15228529609413818] ***
*** starting iteration: 2; err: [Inf, 0.18869168762641494, 0.15228529609413818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18869168762641494, 0.15228529609413818, 0.1479008368002251] ***
*** starting iteration: 3; err: [Inf, 0.18869168762641494, 0.15228529609413818, 0.1479008368002251] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18869168762641494, 0.15228529609413818, 0.1479008368002251, 0.14564867330063133] ***
*** finished computation of 7 references, err: [Inf, 0.18869168762641494, 0.15228529609413818, 0.1479008368002251, 0.14564867330063133] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [67, 2, 0]]
** centroid: 1, normalized-entropy: 0.18927843126120178, [(1, 67), (2, 2)]
*** center 2: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 70, 13]]
** centroid: 4, normalized-entropy: 0.6261776539736496, [(2, 70), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 10, 0]]
** centroid: 5, normalized-entropy: 0.552495114325111, [(1, 68), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 64, 0]]
** centroid: 6, normalized-entropy: 0.19590927087360496, [(1, 2), (2, 64)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [64, 25, 0]]
** centroid: 7, normalized-entropy: 0.8566727035015875, [(1, 64), (2, 25)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2121471024394268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2121471024394268, 0.15046115559106693] ***
*** starting iteration: 2; err: [Inf, 0.2121471024394268, 0.15046115559106693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2121471024394268, 0.15046115559106693, 0.14564113584253938] ***
*** starting iteration: 3; err: [Inf, 0.2121471024394268, 0.15046115559106693, 0.14564113584253938] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2121471024394268, 0.15046115559106693, 0.14564113584253938, 0.1430943331932649] ***
*** finished computation of 7 references, err: [Inf, 0.2121471024394268, 0.15046115559106693, 0.14564113584253938, 0.1430943331932649] ***
*** center 1: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 6, 0]]
** centroid: 2, normalized-entropy: 0.42622865699814483, [(1, 63), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 57, 19]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(2, 57), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [76, 7, 0]]
** centroid: 5, normalized-entropy: 0.4172806906708316, [(1, 76), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 63, 0]]
** centroid: 6, normalized-entropy: 0.6064481901491525, [(1, 11), (2, 63)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 59, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22008846425358206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22008846425358206, 0.15950635663699358] ***
*** starting iteration: 2; err: [Inf, 0.22008846425358206, 0.15950635663699358] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22008846425358206, 0.15950635663699358, 0.14890061499364673] ***
*** starting iteration: 3; err: [Inf, 0.22008846425358206, 0.15950635663699358, 0.14890061499364673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22008846425358206, 0.15950635663699358, 0.14890061499364673, 0.14677206222061068] ***
*** finished computation of 7 references, err: [Inf, 0.22008846425358206, 0.15950635663699358, 0.14890061499364673, 0.14677206222061068] ***
*** center 1: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [55, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 22, 0]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(1, 66), (2, 22)]
*** center 5: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 96, 19]]
** centroid: 6, normalized-entropy: 0.646646374208209, [(2, 96), (3, 19)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 62, 0]]
** centroid: 7, normalized-entropy: 0.2006223243127146, [(1, 2), (2, 62)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18955349719244988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18955349719244988, 0.16254466271586715] ***
*** starting iteration: 2; err: [Inf, 0.18955349719244988, 0.16254466271586715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18955349719244988, 0.16254466271586715, 0.15717111468873918] ***
*** starting iteration: 3; err: [Inf, 0.18955349719244988, 0.16254466271586715, 0.15717111468873918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18955349719244988, 0.16254466271586715, 0.15717111468873918, 0.1538124315943569] ***
*** finished computation of 7 references, err: [Inf, 0.18955349719244988, 0.16254466271586715, 0.15717111468873918, 0.1538124315943569] ***
*** center 1: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 9, 0]]
** centroid: 2, normalized-entropy: 0.569190343735683, [(1, 58), (2, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 15, 0]]
** centroid: 3, normalized-entropy: 0.7612401496918493, [(1, 53), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [65, 16, 0]]
** centroid: 4, normalized-entropy: 0.7169622516889513, [(1, 65), (2, 16)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 70, 3]]
** centroid: 5, normalized-entropy: 0.24729443986205674, [(2, 70), (3, 3)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 60, 8]]
** centroid: 6, normalized-entropy: 0.5225593745369407, [(2, 60), (3, 8)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [19, 24, 0]]
** centroid: 7, normalized-entropy: 0.9902246902198684, [(1, 19), (2, 24)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20061374974250792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20061374974250792, 0.16056018472649158] ***
*** starting iteration: 2; err: [Inf, 0.20061374974250792, 0.16056018472649158] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20061374974250792, 0.16056018472649158, 0.1535014573726803] ***
*** starting iteration: 3; err: [Inf, 0.20061374974250792, 0.16056018472649158, 0.1535014573726803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20061374974250792, 0.16056018472649158, 0.1535014573726803, 0.1499440004248172] ***
*** finished computation of 7 references, err: [Inf, 0.20061374974250792, 0.16056018472649158, 0.1535014573726803, 0.1499440004248172] ***
*** center 1: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 55, 17]]
** centroid: 2, normalized-entropy: 0.7885131605379784, [(2, 55), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [84, 12, 0]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(1, 84), (2, 12)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 59, 3]]
** centroid: 4, normalized-entropy: 0.2795055456366802, [(2, 59), (3, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [31, 32, 0]]
** centroid: 5, normalized-entropy: 0.9998182469603427, [(1, 31), (2, 32)]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [65, 15, 0]]
** centroid: 7, normalized-entropy: 0.6962122601251459, [(1, 65), (2, 15)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2603502873536199] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2603502873536199, 0.19339954330958425] ***
*** starting iteration: 2; err: [Inf, 0.2603502873536199, 0.19339954330958425] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2603502873536199, 0.19339954330958425, 0.166530545566231] ***
*** starting iteration: 3; err: [Inf, 0.2603502873536199, 0.19339954330958425, 0.166530545566231] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2603502873536199, 0.19339954330958425, 0.166530545566231, 0.15836343973129988] ***
*** finished computation of 7 references, err: [Inf, 0.2603502873536199, 0.19339954330958425, 0.166530545566231, 0.15836343973129988] ***
*** center 1: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [101, 14, 0]]
** centroid: 3, normalized-entropy: 0.5343393668857862, [(1, 101), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [15, 12, 0]]
** centroid: 4, normalized-entropy: 0.9910760598382222, [(1, 15), (2, 12)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 60, 2]]
** centroid: 5, normalized-entropy: 0.2055925081850832, [(2, 60), (3, 2)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 74, 18]]
** centroid: 6, normalized-entropy: 0.7131467486384921, [(2, 74), (3, 18)]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20993656429019755] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20993656429019755, 0.1617322655953467] ***
*** starting iteration: 2; err: [Inf, 0.20993656429019755, 0.1617322655953467] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20993656429019755, 0.1617322655953467, 0.15101662239059807] ***
*** starting iteration: 3; err: [Inf, 0.20993656429019755, 0.1617322655953467, 0.15101662239059807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20993656429019755, 0.1617322655953467, 0.15101662239059807, 0.14554261654056608] ***
*** finished computation of 7 references, err: [Inf, 0.20993656429019755, 0.1617322655953467, 0.15101662239059807, 0.14554261654056608] ***
*** center 1: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 11, 0]]
** centroid: 2, normalized-entropy: 0.5822463050121238, [(1, 68), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [35, 33, 0]]
** centroid: 4, normalized-entropy: 0.9993759069576513, [(1, 35), (2, 33)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 56, 20]]
** centroid: 5, normalized-entropy: 0.8314743880097292, [(2, 56), (3, 20)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [62, 16, 0]]
** centroid: 6, normalized-entropy: 0.7320666900931937, [(1, 62), (2, 16)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 61, 2]]
** centroid: 7, normalized-entropy: 0.20307392998664567, [(2, 61), (3, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21915879324637352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21915879324637352, 0.15691657964792102] ***
*** starting iteration: 2; err: [Inf, 0.21915879324637352, 0.15691657964792102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21915879324637352, 0.15691657964792102, 0.14836511000618338] ***
*** starting iteration: 3; err: [Inf, 0.21915879324637352, 0.15691657964792102, 0.14836511000618338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21915879324637352, 0.15691657964792102, 0.14836511000618338, 0.14427867450285703] ***
*** finished computation of 7 references, err: [Inf, 0.21915879324637352, 0.15691657964792102, 0.14836511000618338, 0.14427867450285703] ***
*** center 1: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 18, 0]]
** centroid: 2, normalized-entropy: 0.828055725379504, [(1, 51), (2, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 80, 14]]
** centroid: 4, normalized-entropy: 0.607171654871303, [(2, 80), (3, 14)]
*** center 5: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [18, 65, 0]]
** centroid: 6, normalized-entropy: 0.7544062039636575, [(1, 18), (2, 65)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [62, 19, 0]]
** centroid: 7, normalized-entropy: 0.785889583138768, [(1, 62), (2, 19)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2566727952267975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2566727952267975, 0.16852421734854578] ***
*** starting iteration: 2; err: [Inf, 0.2566727952267975, 0.16852421734854578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2566727952267975, 0.16852421734854578, 0.15268619422148913] ***
*** starting iteration: 3; err: [Inf, 0.2566727952267975, 0.16852421734854578, 0.15268619422148913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2566727952267975, 0.16852421734854578, 0.15268619422148913, 0.14898772193491458] ***
*** finished computation of 7 references, err: [Inf, 0.2566727952267975, 0.16852421734854578, 0.15268619422148913, 0.14898772193491458] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 64, 5]]
** centroid: 1, normalized-entropy: 0.3750514064240124, [(2, 64), (3, 5)]
*** center 2: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 12, 0]]
** centroid: 3, normalized-entropy: 0.6051865766334207, [(1, 69), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 11, 0]]
** centroid: 4, normalized-entropy: 0.6014353864290773, [(1, 64), (2, 11)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [69, 29, 0]]
** centroid: 6, normalized-entropy: 0.8762441668050731, [(1, 69), (2, 29)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 18, 20]]
** centroid: 7, normalized-entropy: 0.9980008838722993, [(2, 18), (3, 20)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1856484846174717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1856484846174717, 0.16370181631669403] ***
*** starting iteration: 2; err: [Inf, 0.1856484846174717, 0.16370181631669403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1856484846174717, 0.16370181631669403, 0.15645078359916806] ***
*** starting iteration: 3; err: [Inf, 0.1856484846174717, 0.16370181631669403, 0.15645078359916806] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1856484846174717, 0.16370181631669403, 0.15645078359916806, 0.15246154327131808] ***
*** finished computation of 7 references, err: [Inf, 0.1856484846174717, 0.16370181631669403, 0.15645078359916806, 0.15246154327131808] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 26, 0]]
** centroid: 1, normalized-entropy: 0.8756633923230399, [(1, 62), (2, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 52, 18]]
** centroid: 3, normalized-entropy: 0.8224042259549892, [(2, 52), (3, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [30, 55, 0]]
** centroid: 4, normalized-entropy: 0.9366673818775627, [(1, 30), (2, 55)]
*** center 5: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [15, 58, 0]]
** centroid: 7, normalized-entropy: 0.7327525499549903, [(1, 15), (2, 58)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24629376303777098] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24629376303777098, 0.17541954140551388] ***
*** starting iteration: 2; err: [Inf, 0.24629376303777098, 0.17541954140551388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24629376303777098, 0.17541954140551388, 0.16172658481821417] ***
*** starting iteration: 3; err: [Inf, 0.24629376303777098, 0.17541954140551388, 0.16172658481821417] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24629376303777098, 0.17541954140551388, 0.16172658481821417, 0.15427977965213358] ***
*** finished computation of 7 references, err: [Inf, 0.24629376303777098, 0.17541954140551388, 0.16172658481821417, 0.15427977965213358] ***
*** center 1: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [17, 39, 0]]
** centroid: 2, normalized-entropy: 0.8856128713989709, [(1, 17), (2, 39)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [80, 31, 0]]
** centroid: 3, normalized-entropy: 0.8544669184854021, [(1, 80), (2, 31)]
*** center 4: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 97, 18]]
** centroid: 5, normalized-entropy: 0.6259231316564361, [(2, 97), (3, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [50, 14, 0]]
** centroid: 7, normalized-entropy: 0.7578784625383954, [(1, 50), (2, 14)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28198075951007195] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28198075951007195, 0.19201930256187916] ***
*** starting iteration: 2; err: [Inf, 0.28198075951007195, 0.19201930256187916] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28198075951007195, 0.19201930256187916, 0.17473744639661162] ***
*** starting iteration: 3; err: [Inf, 0.28198075951007195, 0.19201930256187916, 0.17473744639661162] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28198075951007195, 0.19201930256187916, 0.17473744639661162, 0.16237378408946096] ***
*** finished computation of 7 references, err: [Inf, 0.28198075951007195, 0.19201930256187916, 0.17473744639661162, 0.16237378408946096] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 43, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 29, 17]]
** centroid: 2, normalized-entropy: 0.9503376699710269, [(2, 29), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [35, 49, 0]]
** centroid: 4, normalized-entropy: 0.9798687566511527, [(1, 35), (2, 49)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 19, 0]]
** centroid: 5, normalized-entropy: 0.877437311089633, [(1, 45), (2, 19)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 59, 0]]
** centroid: 6, normalized-entropy: 0.3411538931451763, [(1, 4), (2, 59)]
*** center 7: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2614899966660887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2614899966660887, 0.16304501866176724] ***
*** starting iteration: 2; err: [Inf, 0.2614899966660887, 0.16304501866176724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2614899966660887, 0.16304501866176724, 0.15452044010348617] ***
*** starting iteration: 3; err: [Inf, 0.2614899966660887, 0.16304501866176724, 0.15452044010348617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2614899966660887, 0.16304501866176724, 0.15452044010348617, 0.14994154466222973] ***
*** finished computation of 7 references, err: [Inf, 0.2614899966660887, 0.16304501866176724, 0.15452044010348617, 0.14994154466222973] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [34, 33, 0]]
** centroid: 1, normalized-entropy: 0.9998393017810486, [(1, 34), (2, 33)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 44, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [86, 8, 0]]
** centroid: 3, normalized-entropy: 0.4199210973757179, [(1, 86), (2, 8)]
*** center 4: selecting labels [1] (freq >= 2) [from [118, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 5, 0]]
** centroid: 5, normalized-entropy: 0.3602750564216625, [(1, 68), (2, 5)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 48, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 45, 11]]
** centroid: 7, normalized-entropy: 0.7147274731317893, [(2, 45), (3, 11)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21905642479658127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21905642479658127, 0.15529952451959253] ***
*** starting iteration: 2; err: [Inf, 0.21905642479658127, 0.15529952451959253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21905642479658127, 0.15529952451959253, 0.1499951809812337] ***
*** starting iteration: 3; err: [Inf, 0.21905642479658127, 0.15529952451959253, 0.1499951809812337] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21905642479658127, 0.15529952451959253, 0.1499951809812337, 0.14636126602906735] ***
*** finished computation of 7 references, err: [Inf, 0.21905642479658127, 0.15529952451959253, 0.1499951809812337, 0.14636126602906735] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [55, 16, 0]]
** centroid: 1, normalized-entropy: 0.7698205808588191, [(1, 55), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 4, 0]]
** centroid: 2, normalized-entropy: 0.3372900666170139, [(1, 60), (2, 4)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 68, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [10, 59, 0]]
** centroid: 4, normalized-entropy: 0.5969995167604553, [(1, 10), (2, 59)]
*** center 5: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 39, 17]]
** centroid: 6, normalized-entropy: 0.8856128713989709, [(2, 39), (3, 17)]
*** center 7: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.16234312674030663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16234312674030663, 0.14823058592388405] ***
*** starting iteration: 2; err: [Inf, 0.16234312674030663, 0.14823058592388405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16234312674030663, 0.14823058592388405, 0.1454593937303871] ***
*** starting iteration: 3; err: [Inf, 0.16234312674030663, 0.14823058592388405, 0.1454593937303871] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16234312674030663, 0.14823058592388405, 0.1454593937303871, 0.14396273490972816] ***
*** finished computation of 7 references, err: [Inf, 0.16234312674030663, 0.14823058592388405, 0.1454593937303871, 0.14396273490972816] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [56, 14, 0]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(1, 56), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 19, 0]]
** centroid: 2, normalized-entropy: 0.8271595195340525, [(1, 54), (2, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 7, 0]]
** centroid: 4, normalized-entropy: 0.49291577961610966, [(1, 58), (2, 7)]
*** center 5: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 65, 0]]
** centroid: 6, normalized-entropy: 0.3712323266408756, [(1, 5), (2, 65)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 73, 14]]
** centroid: 7, normalized-entropy: 0.6365048555378351, [(2, 73), (3, 14)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21034079025592656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21034079025592656, 0.15321457364968954] ***
*** starting iteration: 2; err: [Inf, 0.21034079025592656, 0.15321457364968954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21034079025592656, 0.15321457364968954, 0.1480167209277861] ***
*** starting iteration: 3; err: [Inf, 0.21034079025592656, 0.15321457364968954, 0.1480167209277861] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21034079025592656, 0.15321457364968954, 0.1480167209277861, 0.14657489082263783] ***
*** finished computation of 7 references, err: [Inf, 0.21034079025592656, 0.15321457364968954, 0.1480167209277861, 0.14657489082263783] ***
*** center 1: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 15, 0]]
** centroid: 2, normalized-entropy: 0.7918583525674836, [(1, 48), (2, 15)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 22, 0]]
** centroid: 4, normalized-entropy: 0.7892712724536985, [(1, 71), (2, 22)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 27, 20]]
** centroid: 5, normalized-entropy: 0.9839393951635759, [(2, 27), (3, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [17, 56, 0]]
** centroid: 7, normalized-entropy: 0.7829924501610913, [(1, 17), (2, 56)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21092314449511468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21092314449511468, 0.15640517026931047] ***
*** starting iteration: 2; err: [Inf, 0.21092314449511468, 0.15640517026931047] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21092314449511468, 0.15640517026931047, 0.1493503339746967] ***
*** starting iteration: 3; err: [Inf, 0.21092314449511468, 0.15640517026931047, 0.1493503339746967] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21092314449511468, 0.15640517026931047, 0.1493503339746967, 0.14514752775803208] ***
*** finished computation of 7 references, err: [Inf, 0.21092314449511468, 0.15640517026931047, 0.1493503339746967, 0.14514752775803208] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [2, 55, 0]]
** centroid: 1, normalized-entropy: 0.2192973081321754, [(1, 2), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 16, 0]]
** centroid: 2, normalized-entropy: 0.6931274153282881, [(1, 70), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [12, 49, 0]]
** centroid: 6, normalized-entropy: 0.7153220528038851, [(1, 12), (2, 49)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 62, 16]]
** centroid: 7, normalized-entropy: 0.7320666900931937, [(2, 62), (3, 16)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2112142381221056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2112142381221056, 0.15728998354636134] ***
*** starting iteration: 2; err: [Inf, 0.2112142381221056, 0.15728998354636134] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2112142381221056, 0.15728998354636134, 0.14679569869162515] ***
*** starting iteration: 3; err: [Inf, 0.2112142381221056, 0.15728998354636134, 0.14679569869162515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2112142381221056, 0.15728998354636134, 0.14679569869162515, 0.14391272678691894] ***
*** finished computation of 7 references, err: [Inf, 0.2112142381221056, 0.15728998354636134, 0.14679569869162515, 0.14391272678691894] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 28, 0]]
** centroid: 1, normalized-entropy: 0.999142103991909, [(1, 30), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 9, 0]]
** centroid: 2, normalized-entropy: 0.6226343162547099, [(1, 49), (2, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [90, 8, 0]]
** centroid: 4, normalized-entropy: 0.4079059801389762, [(1, 90), (2, 8)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 62, 19]]
** centroid: 5, normalized-entropy: 0.785889583138768, [(2, 62), (3, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [16, 63, 0]]
** centroid: 7, normalized-entropy: 0.7269625813353975, [(1, 16), (2, 63)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2540634817350656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2540634817350656, 0.1757483419487253] ***
*** starting iteration: 2; err: [Inf, 0.2540634817350656, 0.1757483419487253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2540634817350656, 0.1757483419487253, 0.16235200913064182] ***
*** starting iteration: 3; err: [Inf, 0.2540634817350656, 0.1757483419487253, 0.16235200913064182] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2540634817350656, 0.1757483419487253, 0.16235200913064182, 0.1548073440324515] ***
*** finished computation of 7 references, err: [Inf, 0.2540634817350656, 0.1757483419487253, 0.16235200913064182, 0.1548073440324515] ***
*** center 1: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 76, 16]]
** centroid: 4, normalized-entropy: 0.6665783579949205, [(2, 76), (3, 16)]
*** center 5: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [17, 11, 0]]
** centroid: 6, normalized-entropy: 0.9666186325481027, [(1, 17), (2, 11)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [99, 21, 0]]
** centroid: 7, normalized-entropy: 0.6690158350565576, [(1, 99), (2, 21)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20021353727858512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20021353727858512, 0.15914846355095505] ***
*** starting iteration: 2; err: [Inf, 0.20021353727858512, 0.15914846355095505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20021353727858512, 0.15914846355095505, 0.1543709429651499] ***
*** starting iteration: 3; err: [Inf, 0.20021353727858512, 0.15914846355095505, 0.1543709429651499] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20021353727858512, 0.15914846355095505, 0.1543709429651499, 0.15232595779933036] ***
*** finished computation of 7 references, err: [Inf, 0.20021353727858512, 0.15914846355095505, 0.1543709429651499, 0.15232595779933036] ***
*** center 1: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [10, 56, 0]]
** centroid: 2, normalized-entropy: 0.6136190195993708, [(1, 10), (2, 56)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 30, 20]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 30), (3, 20)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 47, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [90, 13, 0]]
** centroid: 5, normalized-entropy: 0.5469617407220055, [(1, 90), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [15, 30, 0]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(1, 15), (2, 30)]
*** center 7: selecting labels [1] (freq >= 2) [from [122, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19086034844443203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19086034844443203, 0.1568309504389763] ***
*** starting iteration: 2; err: [Inf, 0.19086034844443203, 0.1568309504389763] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19086034844443203, 0.1568309504389763, 0.14914609543513507] ***
*** starting iteration: 3; err: [Inf, 0.19086034844443203, 0.1568309504389763, 0.14914609543513507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19086034844443203, 0.1568309504389763, 0.14914609543513507, 0.14509000221081078] ***
*** finished computation of 7 references, err: [Inf, 0.19086034844443203, 0.1568309504389763, 0.14914609543513507, 0.14509000221081078] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [83, 8, 0]]
** centroid: 1, normalized-entropy: 0.4294619720471057, [(1, 83), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [36, 2, 0]]
** centroid: 2, normalized-entropy: 0.2974722489192896, [(1, 36), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [11, 66, 0]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(1, 11), (2, 66)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [16, 62, 0]]
** centroid: 4, normalized-entropy: 0.7320666900931937, [(1, 16), (2, 62)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 59, 21]]
** centroid: 5, normalized-entropy: 0.8304955225035798, [(2, 59), (3, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 363,3 => 38,1 => 599), Dict(2 => 389,3 => 42,1 => 569))
[ Info: ===== scores for single classifier: {"micro_f1":0.935,"precision":0.935,"recall":0.935,"macro_recall":0.9559578508575758,"macro_f1":0.8906105780613234,"accuracy":0.935,"class_f1":{"2":0.918648310387985,"3":0.7924528301886793,"1":0.960730593607306},"class_precision":{"2":0.8951219512195122,"3":0.65625,"1":1.0},"class_recall":{"2":0.9434447300771208,"3":1.0,"1":0.9244288224956063}}
[ Info: ===== scores for 1: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9511687166888869,"macro_f1":0.949790992607987,"accuracy":0.971,"class_f1":{"2":0.9632446134347274,"3":0.9047619047619048,"1":0.981366459627329},"class_precision":{"2":0.95,"3":0.9047619047619048,"1":0.9910394265232975},"class_recall":{"2":0.9768637532133676,"3":0.9047619047619048,"1":0.9718804920913884}}
[ Info: ===== scores for 5: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9532033206250817,"macro_f1":0.9535568397797768,"accuracy":0.961,"class_f1":{"2":0.9514321295143213,"3":0.9397590361445782,"1":0.9694793536804309},"class_precision":{"2":0.9227053140096618,"3":0.9512195121951219,"1":0.9908256880733946},"class_recall":{"2":0.9820051413881749,"3":0.9285714285714286,"1":0.9490333919156415}}
[ Info: ===== scores for 7: {"micro_f1":0.958,"precision":0.958,"recall":0.958,"macro_recall":0.971329306364388,"macro_f1":0.9462114797982039,"accuracy":0.958,"class_f1":{"2":0.9468354430379747,"3":0.923076923076923,"1":0.968722073279714},"class_precision":{"2":0.9326683291770573,"3":0.8571428571428571,"1":0.9854545454545455},"class_recall":{"2":0.961439588688946,"3":1.0,"1":0.9525483304042179}}
[ Info: ===== scores for 9: {"micro_f1":0.958,"precision":0.958,"recall":0.958,"macro_recall":0.9710582314166829,"macro_f1":0.9401452324812807,"accuracy":0.958,"class_f1":{"2":0.9467005076142131,"3":0.9032258064516129,"1":0.9705093833780161},"class_precision":{"2":0.9348370927318296,"3":0.8235294117647058,"1":0.9872727272727273},"class_recall":{"2":0.9588688946015425,"3":1.0,"1":0.9543057996485061}}
[ Info: ===== scores for 11: {"micro_f1":0.96,"precision":0.96,"recall":0.96,"macro_recall":0.9725009525272469,"macro_f1":0.9358289019040655,"accuracy":0.96,"class_f1":{"2":0.9492385786802029,"3":0.8842105263157896,"1":0.9740376007162042},"class_precision":{"2":0.9373433583959899,"3":0.7924528301886793,"1":0.9927007299270073},"class_recall":{"2":0.961439588688946,"3":1.0,"1":0.9560632688927944}}
(score = 0.975, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.955, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.955, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.955, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.955, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.975,"k":1,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.975,"precision":0.975,"recall":0.975,"macro_recall":0.9535120090146045,"macro_f1":0.9526279416461714,"accuracy":0.975,"class_f1":{"2":0.9681528662420381,"3":0.9047619047619048,"1":0.9849690539345711},"class_precision":{"2":0.9595959595959596,"3":0.9047619047619048,"1":0.9911032028469751},"class_recall":{"2":0.9768637532133676,"3":0.9047619047619048,"1":0.9789103690685413}}
Test Summary: | Pass  Total
AKNC          |    8      8
[137, 1, 1, 2, 2, 2, 7, 3, 12, 3, 1, 2, 22, 3, 5, 4, 1, 2, 3, 3, 10, 2, 18, 14, 3, 3, 1, 20, 16, 23, 2, 1, 3, 31, 50, 1, 22, 10, 13, 4, 4, 3, 39, 26, 1, 3, 13, 21, 23, 21, 65, 39, 7, 2, 29, 22, 3, 58, 9, 37, 17, 6, 10, 24, 21, 14, 4, 7, 31, 22, 17, 32, 4, 10, 13, 29, 2, 39, 3, 8, 5, 15, 71, 5, 7, 61, 3, 7, 28, 36, 51, 3, 6, 64, 14, 45, 175, 5, 3, 16, 21, 2, 4, 228, 10, 11, 13, 82, 13, 30, 6, 17, 9, 24, 3, 31, 11, 1, 5, 29, 1, 17, 4, 4, 16, 129, 18, 9, 29, 17, 11, 1, 6, 46, 22, 1050, 6, 8, 296, 21, 37, 9, 13, 56, 2, 41, 8, 30, 8, 25, 10, 9, 8, 36, 14, 10, 99, 3, 34, 13, 56, 81, 54, 26, 34, 148, 7, 4, 31, 25, 6, 58, 22, 35, 62, 33, 47, 15, 16, 18, 18, 9, 24, 35, 19, 5, 64, 7, 6, 40, 15, 398, 4, 30, 73, 3, 60, 2, 26, 93, 176, 7, 34, 16, 14, 25, 4, 38, 21, 135, 16, 5, 5, 10, 1, 32, 34, 19, 6, 2, 12, 9, 17, 31, 4, 7, 27, 36, 16, 45, 92, 12, 84, 91, 13, 32, 16, 130, 15, 5, 17, 47, 3, 50, 33, 2, 10, 6, 93, 19, 8, 21, 13, 18, 36, 8, 4, 5, 70, 4, 153, 45, 10, 111, 7, 87, 5, 11, 20, 2, 15, 12, 3, 25, 188, 41, 44, 12, 64, 6, 31, 24, 174, 3, 35, 3, 21, 45, 111, 57, 78, 11, 68, 12, 103, 7, 191, 23, 76, 49]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6459999999999998, speedup = 0.2464717338526799, eval_ratio = 0.077356)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3828125,"recall":0.3697916666666667,"f1":null,"seconds":0.00015645846724510193,"exhaustive_search_seconds":0.0003886949270963669,"evaluations":477.78125,"distances_sum":1717.3878815751991}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5885416666666663,"recall":0.5885416666666663,"f1":null,"seconds":0.00030818022787570953,"exhaustive_search_seconds":0.0003886949270963669,"evaluations":666.6015625,"distances_sum":1621.7536839246322}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6779513888888885,"recall":0.6779513888888885,"f1":0.6779513888888885,"seconds":0.000376380980014801,"exhaustive_search_seconds":0.0003886949270963669,"evaluations":782.390625,"distances_sum":1584.959330446586}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.731770833333333,"recall":0.731770833333333,"f1":0.731770833333333,"seconds":0.00043307431042194366,"exhaustive_search_seconds":0.0003886949270963669,"evaluations":887.109375,"distances_sum":1565.4695733332567}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.794270833333333,"recall":0.794270833333333,"f1":0.794270833333333,"seconds":0.0005043651908636093,"exhaustive_search_seconds":0.0003886949270963669,"evaluations":1001.6484375,"distances_sum":1545.3697887410872}
KCenters.DeloneInvIndex> reached performance {"precision":0.824652777777777,"recall":0.824652777777777,"f1":0.824652777777777,"seconds":0.0008152127265930176,"exhaustive_search_seconds":0.0003886949270963669,"evaluations":1096.5390625,"distances_sum":1537.498538281657}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8419999999999996, speedup = 0.5428125516405633, eval_ratio = 0.114299)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
