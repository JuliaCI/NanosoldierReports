Julia Version 1.6.0-DEV.220
Commit 1e76111203 (2020-06-12 16:23 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed LearnBase ─────────────────── v0.2.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed Reexport ──────────────────── v0.2.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed DataAPI ───────────────────── v1.3.0
  Installed KCenters ──────────────────── v0.2.2
  Installed DataStructures ────────────── v0.17.17
  Installed MLDataUtils ───────────────── v0.5.1
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed InvertedIndices ───────────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed Compat ────────────────────── v3.12.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed Parsers ───────────────────── v1.0.5
  Installed SimilaritySearch ──────────── v0.3.19
  Installed CategoricalArrays ─────────── v0.7.7
  Installed JSON ──────────────────────── v0.21.0
  Installed OrderedCollections ────────── v1.2.0
  Installed Tables ────────────────────── v1.0.4
  Installed Missings ──────────────────── v0.4.3
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed DataFrames ────────────────── v0.20.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.12.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.5
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_TjGIod/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_TjGIod/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.12.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.5
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9367083616058032
[ Info: 0.8302954188982645
[ Info: 0.5559340282777945
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32481760886808236
mean(cdnet.distances) = 0.34687066790958243
mean(crand.distances) = 0.35204048176606495
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5576171875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5576171875,"f1":0.7006340881340889,"seconds":4.813075065612793e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":7.4296875,"distances_sum":1384.231732838083}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.705078125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.705078125,"f1":0.8191662504162514,"seconds":6.81169331073761e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.046875,"distances_sum":1875.2313099956116}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8650453712953722,"seconds":6.297603249549866e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.3203125,"distances_sum":2159.4091498573616}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7763671875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7763671875,"f1":0.8650453712953722,"seconds":6.297603249549866e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.3203125,"distances_sum":2159.4091498573616}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9398008241758249,"seconds":6.3907355070114136e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.8046875,"distances_sum":2639.4344293444915}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8679606851481859,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.421875,"distances_sum":2150.2874086525635}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8734978563103571,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.4375,"distances_sum":2188.7850551637493}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9320226648351652,"seconds":6.362795829772949e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.734375,"distances_sum":2595.2165525505848}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9274355852480858,"seconds":6.3050538301467896e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.6484375,"distances_sum":2571.545104794576}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8955078125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8955078125,"f1":0.9398008241758249,"seconds":6.3907355070114136e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.8046875,"distances_sum":2639.4344293444915}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9449461996337004,"seconds":6.6533684730529785e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.78125,"distances_sum":2686.068342969871}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9655334249084253,"seconds":6.722286343574524e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.875,"distances_sum":2826.58935107809}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9671932234432237,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.921875,"distances_sum":2845.2195067239986}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9635817307692313,"seconds":6.3944607973098755e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.9140625,"distances_sum":2776.226152666416}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9469608516483523,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.8203125,"distances_sum":2687.78131798847}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9671932234432237,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.921875,"distances_sum":2845.2195067239986}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9671932234432237,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.921875,"distances_sum":2845.2195067239986}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7884790556665564,"seconds":4.641711711883545e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.4921875,"distances_sum":1594.4684786232006}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.799740190365191,"seconds":4.669651389122009e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.7890625,"distances_sum":1632.2824891971716}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5380859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5380859375,"f1":0.6816135253635258,"seconds":4.103407263755798e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.859375,"distances_sum":1266.8879123162387}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6826171875,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6826171875,"f1":0.799740190365191,"seconds":4.669651389122009e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.7890625,"distances_sum":1632.2824891971716}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9380551739926744,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.71875,"distances_sum":2325.0634755283036}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9191225441225448,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6875,"distances_sum":2179.3519385678037}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9385473901098906,"seconds":5.48921525478363e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.796875,"distances_sum":2349.0044018067297}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9454529845154849,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.828125,"distances_sum":2392.76951011653}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9454529845154849,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.828125,"distances_sum":2392.76951011653}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9591346153846161,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.859375,"distances_sum":2469.534947865079}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9727678571428577,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.921875,"distances_sum":2555.6284809377166}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9558264652014656,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.84375,"distances_sum":2446.8306822750687}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.962522893772894,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.875,"distances_sum":2487.7174444978805}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9652186355311361,"seconds":5.6438148021698e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.859375,"distances_sum":2530.911887875184}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9727678571428577,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.921875,"distances_sum":2555.6284809377166}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9727678571428577,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.921875,"distances_sum":2555.6284809377166}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8709254287379296,"seconds":5.140900611877441e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.15625,"distances_sum":1880.913978224347}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5703125,"f1":0.7104220432345437,"seconds":4.174187779426575e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":6.984375,"distances_sum":1303.2258756722272}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7841796875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7841796875,"f1":0.8709254287379296,"seconds":5.140900611877441e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.15625,"distances_sum":1880.913978224347}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9102251914751922,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.28125,"distances_sum":2133.2107056324694}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9246056027306035,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.59375,"distances_sum":2234.9691362911885}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.873046875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.873046875,"f1":0.9246056027306035,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.59375,"distances_sum":2234.9691362911885}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9723958333333339,"seconds":5.95487654209137e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.9140625,"distances_sum":2532.0924123368013}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.950326236263737,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.7109375,"distances_sum":2419.260697553797}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9589514652014658,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.796875,"distances_sum":2454.820661890811}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9720066391941397,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.875,"distances_sum":2531.5584011601036}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9723958333333339,"seconds":5.95487654209137e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.9140625,"distances_sum":2532.0924123368013}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9723958333333339,"seconds":5.95487654209137e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.9140625,"distances_sum":2532.0924123368013}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8642779095904103,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.2578125,"distances_sum":1980.910520411742}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7822265625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7822265625,"f1":0.8642779095904103,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.2578125,"distances_sum":1980.910520411742}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9089259698634706,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.5546875,"distances_sum":2182.8210772969064}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9360982767232773,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6328125,"distances_sum":2374.167340537922}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9360982767232773,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6328125,"distances_sum":2374.167340537922}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.968269230769231,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8984375,"distances_sum":2553.4575055257624}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9631581959706964,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.875,"distances_sum":2523.259230884404}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9388335622710628,"seconds":5.597248673439026e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6484375,"distances_sum":2376.723150893931}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.968269230769231,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8984375,"distances_sum":2553.4575055257624}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.968269230769231,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8984375,"distances_sum":2553.4575055257624}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6943359375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6943359375,"f1":0.8077680999556006,"seconds":4.699453711509705e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.015625,"distances_sum":1603.2421975680534}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3935546875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3935546875,"f1":null,"seconds":4.02890145778656e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":6.1796875,"distances_sum":901.6667497130715}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6220703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.6220703125,"f1":0.756452228327229,"seconds":4.12575900554657e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.546875,"distances_sum":1419.3334902194495}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6943359375,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6943359375,"f1":0.8077680999556006,"seconds":4.699453711509705e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.015625,"distances_sum":1603.2421975680534}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8728167665667674,"seconds":4.116445779800415e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.3359375,"distances_sum":1902.9703325678986}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9132955586080592,"seconds":4.4889748096466064e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.6171875,"distances_sum":2142.604590889507}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8649303821178829,"seconds":4.14624810218811e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.375,"distances_sum":1875.2760792942856}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8515625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8515625,"f1":0.9132955586080592,"seconds":4.4889748096466064e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.6171875,"distances_sum":2142.604590889507}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9577781593406598,"seconds":4.8317015171051025e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.875,"distances_sum":2416.0027244682083}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9647722069597074,"seconds":4.591420292854309e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.921875,"distances_sum":2468.639372822403}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.960943223443224,"seconds":4.6603381633758545e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.9140625,"distances_sum":2432.1531946082982}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9572261072261077,"seconds":4.766508936882019e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.84375,"distances_sum":2433.3142802078746}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9647722069597074,"seconds":4.591420292854309e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.921875,"distances_sum":2468.639372822403}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9647722069597074,"seconds":4.591420292854309e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.921875,"distances_sum":2468.639372822403}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4140625,"f1":null,"seconds":3.0063092708587646e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.4453125,"distances_sum":956.5550236354211}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.572265625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.572265625,"f1":0.7092149170274177,"seconds":3.557652235031128e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.3515625,"distances_sum":1379.7564689838011}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5625,"f1":null,"seconds":3.5651028156280518e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.046875,"distances_sum":1339.74008696403}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8714202464202473,"seconds":4.934147000312805e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.5859375,"distances_sum":1966.355757561963}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7822265625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7822265625,"f1":0.8714202464202473,"seconds":4.934147000312805e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.5859375,"distances_sum":1966.355757561963}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9310585248085254,"seconds":4.7460198402404785e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.859375,"distances_sum":2324.6721225475876}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9174278846153853,"seconds":4.639849066734314e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.78125,"distances_sum":2204.0775749991617}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9071402555777565,"seconds":4.682689905166626e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7421875,"distances_sum":2160.932299682262}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8798828125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9310585248085254,"seconds":4.7460198402404785e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.859375,"distances_sum":2324.6721225475876}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9682520604395607,"seconds":4.991888999938965e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.953125,"distances_sum":2605.71244686488}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9573577464202468,"seconds":4.829838871955872e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.875,"distances_sum":2557.2301943168536}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.977529761904762,"seconds":5.204230546951294e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.984375,"distances_sum":2677.1920201659773}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9652014652014654,"seconds":4.868954420089722e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.953125,"distances_sum":2602.3174260968626}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9427140567765574,"seconds":4.880130290985107e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8828125,"distances_sum":2420.483814092075}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.977529761904762,"seconds":5.204230546951294e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.984375,"distances_sum":2677.1920201659773}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.977529761904762,"seconds":5.204230546951294e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.984375,"distances_sum":2677.1920201659773}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7158203125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.7158203125,"f1":0.8230092823842831,"seconds":7.703900337219238e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":7.859375,"distances_sum":1704.3045922442602}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7158203125,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.7158203125,"f1":0.8230092823842831,"seconds":7.703900337219238e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":7.859375,"distances_sum":1704.3045922442602}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7158203125,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.7158203125,"f1":0.8230092823842831,"seconds":7.703900337219238e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":7.859375,"distances_sum":1704.3045922442602}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7158203125,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.7158203125,"f1":0.8230092823842831,"seconds":7.703900337219238e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":7.859375,"distances_sum":1704.3045922442602}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3310546875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3310546875,"f1":null,"seconds":3.3192336559295654e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":5.5625,"distances_sum":592.1084940829153}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.357421875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.357421875,"f1":null,"seconds":3.341585397720337e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":5.90625,"distances_sum":633.2323814341697}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.357421875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.357421875,"f1":null,"seconds":3.341585397720337e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":5.90625,"distances_sum":633.2323814341697}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6474609375, conf: {"ssize":1,"bsize":4}, perf: {"precision":0.9585751488095235,"recall":0.6474609375,"f1":0.762771863553114,"seconds":4.656612873077393e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.8125,"distances_sum":1270.5228972419363}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":4,"bsize":5}, perf: {"precision":0.9760881696428572,"recall":0.76171875,"f1":0.8472024720071599,"seconds":4.896894097328186e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.1796875,"distances_sum":1528.7043395519863}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.50390625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.50390625,"f1":0.6500822094572097,"seconds":3.868713974952698e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":6.859375,"distances_sum":906.7303122336767}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":4,"bsize":5},"perf":{"precision":0.9760881696428572,"recall":0.76171875,"f1":0.8472024720071599,"seconds":4.896894097328186e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.1796875,"distances_sum":1528.7043395519863}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":6,"bsize":6}, perf: {"precision":0.9723865327380952,"recall":0.822265625,"f1":0.8847637388653017,"seconds":5.2247196435928345e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.359375,"distances_sum":1706.06531944255}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9726283482142858,"recall":0.783203125,"f1":0.8616381665209792,"seconds":4.999339580535889e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.3671875,"distances_sum":1584.4034959418568}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.822265625,"state":{"ssize":6,"bsize":6},"perf":{"precision":0.9723865327380952,"recall":0.822265625,"f1":0.8847637388653017,"seconds":5.2247196435928345e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.359375,"distances_sum":1706.06531944255}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.822265625,"state":{"ssize":6,"bsize":6},"perf":{"precision":0.9723865327380952,"recall":0.822265625,"f1":0.8847637388653017,"seconds":5.2247196435928345e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.359375,"distances_sum":1706.06531944255}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.736328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.736328125,"f1":0.8379316863691872,"seconds":4.995614290237427e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.1171875,"distances_sum":1461.8873637378338}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2421875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2421875,"f1":null,"seconds":2.9597431421279907e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":5.671875,"distances_sum":480.4390968502375}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.7902415293040301,"seconds":4.4014304876327515e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.296875,"distances_sum":1298.128989367416}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.736328125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.736328125,"f1":0.8379316863691872,"seconds":4.995614290237427e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.1171875,"distances_sum":1461.8873637378338}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9040386696636705,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.4140625,"distances_sum":1742.5281297818317}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9614983974358978,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8515625,"distances_sum":2053.2332125228754}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.943005952380953,"seconds":5.3960829973220825e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.6875,"distances_sum":1927.0287468502884}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9533539377289383,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7734375,"distances_sum":2023.5308525463454}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9614983974358978,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8515625,"distances_sum":2053.2332125228754}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":4,"bsize":13}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9769917582417588,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9296875,"distances_sum":2134.3831471433386}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9628376831501837,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8828125,"distances_sum":2051.009468174753}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":6,"bsize":13}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9806375915750918,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9140625,"distances_sum":2163.673703752805}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9747596153846159,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9296875,"distances_sum":2131.047501621493}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9720238095238097,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9296875,"distances_sum":2108.8649085435336}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":6,"bsize":13},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9806375915750918,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9140625,"distances_sum":2163.673703752805}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":6,"bsize":13},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9806375915750918,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9140625,"distances_sum":2163.673703752805}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7773506007881015,"seconds":4.198402166366577e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":7.1640625,"distances_sum":1348.6386566889682}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.556640625,"f1":0.6975682303807309,"seconds":3.9674341678619385e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":6.6875,"distances_sum":1153.84154002963}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.732421875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.732421875,"f1":0.8354494463869472,"seconds":4.945322871208191e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":7.875,"distances_sum":1549.3017240391816}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8561017107892115,"seconds":4.751607775688171e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.0,"distances_sum":1601.7583696429278}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.8561017107892115,"seconds":4.751607775688171e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.0,"distances_sum":1601.7583696429278}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9443910256410262,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.6796875,"distances_sum":2110.376805976484}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.957057005494506,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.84375,"distances_sum":2178.5222941793018}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8923030094905104,"seconds":5.228444933891296e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.2578125,"distances_sum":1825.186325721848}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9451923076923084,"seconds":5.289912223815918e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.7109375,"distances_sum":2107.5718806471355}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9053774350649358,"seconds":5.187466740608215e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.25,"distances_sum":1861.6602870484069}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9461252289377297,"seconds":5.234032869338989e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.734375,"distances_sum":2137.966896960273}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.957057005494506,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.84375,"distances_sum":2178.5222941793018}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9718578296703299,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.828125,"distances_sum":2274.977957230817}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9673420329670335,"seconds":5.392357707023621e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.90625,"distances_sum":2222.8497123024194}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9702209249084252,"seconds":5.379319190979004e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.8828125,"distances_sum":2239.314202398812}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9568853021978025,"seconds":5.260109901428223e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.7265625,"distances_sum":2186.817884465669}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9718578296703299,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.828125,"distances_sum":2274.977957230817}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9718578296703299,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.2908130884170532e-6,"evaluations":8.828125,"distances_sum":2274.977957230817}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7860602938727946,"seconds":4.3138861656188965e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.3125,"distances_sum":1393.8817981748327}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7373046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7373046875,"f1":0.8393205752580762,"seconds":4.967674612998962e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.0234375,"distances_sum":1573.2412707258075}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7373046875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7373046875,"f1":0.8393205752580762,"seconds":4.967674612998962e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.0234375,"distances_sum":1573.2412707258075}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8881555944055951,"seconds":5.165114998817444e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.265625,"distances_sum":1812.8046622486397}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.917946116383617,"seconds":5.23589551448822e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.546875,"distances_sum":1980.571280143079}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9292925824175832,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.6171875,"distances_sum":2030.065599771895}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9256238553113559,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.6640625,"distances_sum":2023.2887950699283}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9574233058608065,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.828125,"distances_sum":2199.333488972642}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":8,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9574233058608065,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.828125,"distances_sum":2199.333488972642}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9725103021978027,"seconds":5.37186861038208e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8203125,"distances_sum":2295.2591323955025}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.958897352647353,"seconds":5.356967449188232e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8046875,"distances_sum":2230.047072550451}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9767113095238097,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9296875,"distances_sum":2298.5981464164183}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9654590201465205,"seconds":5.3513795137405396e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8515625,"distances_sum":2262.4447793579016}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9588401182151189,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8671875,"distances_sum":2195.9385923656014}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9767113095238097,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9296875,"distances_sum":2298.5981464164183}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9767113095238097,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9296875,"distances_sum":2298.5981464164183}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6513671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6513671875,"f1":0.7747760919635927,"seconds":4.647299647331238e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.5234375,"distances_sum":1457.9728484806772}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.37890625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.37890625,"f1":null,"seconds":3.471970558166504e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":5.5703125,"distances_sum":795.3348476819526}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6513671875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6513671875,"f1":0.7747760919635927,"seconds":4.647299647331238e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.5234375,"distances_sum":1457.9728484806772}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9475160256410261,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.71875,"distances_sum":2228.0334245022864}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8134765625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8134765625,"f1":0.8893720862470872,"seconds":5.029141902923584e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.328125,"distances_sum":1929.5541998159265}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.81640625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.81640625,"f1":0.8907222985347993,"seconds":5.150213837623596e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.265625,"distances_sum":1966.6859171778062}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9475160256410261,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.71875,"distances_sum":2228.0334245022864}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9708733974358981,"seconds":6.340444087982178e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.875,"distances_sum":2370.6315210174057}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9508814102564105,"seconds":5.898997187614441e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.671875,"distances_sum":2281.4891915791163}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9601419413919418,"seconds":5.291774868965149e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.7421875,"distances_sum":2329.562610197064}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9708733974358981,"seconds":6.340444087982178e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.875,"distances_sum":2370.6315210174057}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9708733974358981,"seconds":6.340444087982178e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.875,"distances_sum":2370.6315210174057}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7872740107115116,"seconds":4.336237907409668e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.3828125,"distances_sum":1489.2311637657106}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7902226245976255,"seconds":4.906207323074341e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.4609375,"distances_sum":1516.5291506063272}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.181640625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.181640625,"f1":null,"seconds":2.767890691757202e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":4.9296875,"distances_sum":387.2114396995201}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.673828125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.673828125,"f1":0.7902226245976255,"seconds":4.906207323074341e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.4609375,"distances_sum":1516.5291506063272}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9391826923076931,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.6484375,"distances_sum":2241.6624050433775}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.89453125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.9391826923076931,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.6484375,"distances_sum":2241.6624050433775}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9419700091575097,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.5390625,"distances_sum":2193.3751947654223}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9634157509157512,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.7890625,"distances_sum":2361.512234587124}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9634157509157512,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.7890625,"distances_sum":2361.512234587124}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9345703125,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9634157509157512,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.7890625,"distances_sum":2361.512234587124}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7255859375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.7255859375,"f1":0.8306308275058283,"seconds":4.41819429397583e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.515625,"distances_sum":1552.3332016993595}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.390625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.390625,"f1":null,"seconds":3.594905138015747e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.5390625,"distances_sum":782.8378233611786}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7255859375,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.7255859375,"f1":0.8306308275058283,"seconds":4.41819429397583e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.515625,"distances_sum":1552.3332016993595}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9121253746253755,"seconds":5.120411515235901e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.2734375,"distances_sum":1949.9722447736385}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.952421016483517,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.84375,"distances_sum":2241.618612200613}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9488381410256416,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7421875,"distances_sum":2230.8950653567263}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9492273351648359,"seconds":5.379319190979004e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.78125,"distances_sum":2226.8934057069373}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.952421016483517,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.84375,"distances_sum":2241.618612200613}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9552312271062274,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.90625,"distances_sum":2235.3386959911913}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9616472069597074,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8515625,"distances_sum":2304.077321435161}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9784798534798538,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8984375,"distances_sum":2407.7328568820585}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9742044413919416,"seconds":5.492940545082092e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8671875,"distances_sum":2394.0858524992136}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9633012820512824,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9296875,"distances_sum":2287.279253477773}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9784798534798538,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8984375,"distances_sum":2407.7328568820585}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9784798534798538,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8984375,"distances_sum":2407.7328568820585}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1962890625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1962890625,"f1":null,"seconds":2.9206275939941406e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":5.5390625,"distances_sum":413.09292585140605}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.8862215909090918,"seconds":5.120411515235901e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.265625,"distances_sum":1878.7972901987912}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8095703125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.8095703125,"f1":0.8862215909090918,"seconds":5.120411515235901e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.265625,"distances_sum":1878.7972901987912}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9322000915750921,"seconds":5.3104013204574585e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.734375,"distances_sum":2146.3005644355644}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9567593864468869,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8515625,"distances_sum":2281.605619427541}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9567593864468869,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8515625,"distances_sum":2281.605619427541}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9642857142857146,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9453125,"distances_sum":2307.3584248632706}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9743131868131871,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9140625,"distances_sum":2393.500046744238}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9706673534798538,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9375,"distances_sum":2364.645991291855}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9743131868131871,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9140625,"distances_sum":2393.500046744238}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9743131868131871,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9140625,"distances_sum":2393.500046744238}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2236328125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2236328125,"f1":null,"seconds":3.0584633350372314e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":5.8671875,"distances_sum":499.47374910567135}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2236328125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2236328125,"f1":null,"seconds":3.0584633350372314e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":5.8671875,"distances_sum":499.47374910567135}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5419921875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5419921875,"f1":0.682996170496171,"seconds":4.036352038383484e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.375,"distances_sum":1078.9545016551037}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5537109375, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.5537109375,"f1":null,"seconds":4.105269908905029e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.28125,"distances_sum":1129.3813326274328}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5537109375,"state":{"ssize":2,"bsize":3},"perf":{"precision":null,"recall":0.5537109375,"f1":null,"seconds":4.105269908905029e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.28125,"distances_sum":1129.3813326274328}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8973963536463544,"seconds":5.27501106262207e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.6484375,"distances_sum":1853.0669945154348}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8399506743256752,"seconds":5.012378096580505e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.2734375,"distances_sum":1632.610251089727}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9314248251748257,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.78125,"distances_sum":2088.548437472338}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.8968609515484522,"seconds":5.170702934265137e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.5,"distances_sum":1929.0831513092696}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8553175990676,"seconds":4.984438419342041e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.453125,"distances_sum":1664.8715572209214}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.9314248251748257,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.78125,"distances_sum":2088.548437472338}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9745192307692312,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.9140625,"distances_sum":2340.3205950009683}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9662946428571434,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8984375,"distances_sum":2295.930799621918}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9716346153846158,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.9296875,"distances_sum":2319.7275225660874}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9453754578754586,"seconds":6.671436131000519e-5,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.859375,"distances_sum":2148.712795664359}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9745192307692312,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.9140625,"distances_sum":2340.3205950009683}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9745192307692312,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.9140625,"distances_sum":2340.3205950009683}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8553181193806203,"seconds":5.025416612625122e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.40625,"distances_sum":1803.031191733644}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.384765625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.384765625,"f1":null,"seconds":3.3155083656311035e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.0703125,"distances_sum":853.2791042177868}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7607421875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7607421875,"f1":0.8553181193806203,"seconds":5.025416612625122e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.40625,"distances_sum":1803.031191733644}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9126290376290384,"seconds":5.358830094337463e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8359375,"distances_sum":2077.739036878136}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9318395146520153,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.890625,"distances_sum":2214.5144141396418}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9114729020979029,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8125,"distances_sum":2070.2828845526733}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8798828125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9318395146520153,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.890625,"distances_sum":2214.5144141396418}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9698660714285717,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9765625,"distances_sum":2488.1270022892477}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9319081959706966,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.875,"distances_sum":2241.6149348376343}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9422161172161181,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7734375,"distances_sum":2335.587758238977}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9406879578754583,"seconds":5.37186861038208e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.875,"distances_sum":2291.1657407702974}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9537488553113558,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.84375,"distances_sum":2403.309668186484}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9557921245421249,"seconds":5.3513795137405396e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8984375,"distances_sum":2405.5029512666897}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9698660714285717,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9765625,"distances_sum":2488.1270022892477}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9698660714285717,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9765625,"distances_sum":2488.1270022892477}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5380859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5380859375,"f1":null,"seconds":3.887340426445007e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.734375,"distances_sum":1180.3495006884264}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5380859375,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5380859375,"f1":null,"seconds":3.887340426445007e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.734375,"distances_sum":1180.3495006884264}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5390625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5390625,"f1":0.6802848193473199,"seconds":3.848224878311157e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.75,"distances_sum":1193.7075410173138}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.544921875, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.544921875,"f1":null,"seconds":3.93204391002655e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.7734375,"distances_sum":1206.239159800856}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9249084249084256,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.5234375,"distances_sum":2231.233729544527}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8701171875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8701171875,"f1":0.9249084249084256,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.5234375,"distances_sum":2231.233729544527}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9621508699633703,"seconds":5.504116415977478e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.7734375,"distances_sum":2469.0551290953485}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9361492673992676,"seconds":6.156042218208313e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.5703125,"distances_sum":2315.5759833369425}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9621508699633703,"seconds":5.504116415977478e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.7734375,"distances_sum":2469.0551290953485}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9621508699633703,"seconds":5.504116415977478e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.7734375,"distances_sum":2469.0551290953485}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7767858877233885,"seconds":4.30084764957428e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.5234375,"distances_sum":1464.4904987962116}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7854003635253642,"seconds":4.513189196586609e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.546875,"distances_sum":1473.842740675785}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.162109375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.162109375,"f1":null,"seconds":2.60770320892334e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":4.375,"distances_sum":390.56767910565105}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.19140625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.19140625,"f1":null,"seconds":2.6151537895202637e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":4.6875,"distances_sum":451.57442117325076}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.66796875,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.66796875,"f1":0.7854003635253642,"seconds":4.513189196586609e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.546875,"distances_sum":1473.842740675785}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9436870421245427,"seconds":5.247071385383606e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.65625,"distances_sum":2313.8720996614447}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8927718115218123,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.3125,"distances_sum":1989.6820862623815}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8954384157509164,"seconds":5.168840289115906e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.234375,"distances_sum":1994.9261475410076}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.927134844322345,"seconds":5.282461643218994e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.625,"distances_sum":2187.377023112886}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.946245421245422,"seconds":6.724148988723755e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.734375,"distances_sum":2315.8797383334886}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.7966972263847272,"seconds":5.690380930900574e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.6796875,"distances_sum":1524.1302626571621}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8590206668331678,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.1953125,"distances_sum":1832.9517746391803}, best_list's length: 16, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.946245421245422,"seconds":6.724148988723755e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.734375,"distances_sum":2315.8797383334886}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.952850274725275,"seconds":6.789341568946838e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7890625,"distances_sum":2355.370711992623}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9475847069597074,"seconds":6.90855085849762e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.671875,"distances_sum":2343.002977065875}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9617044413919421,"seconds":6.776303052902222e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.859375,"distances_sum":2367.757994363047}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9623740842490847,"seconds":6.945803761482239e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.828125,"distances_sum":2403.4920074264596}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.971875,"seconds":3.933906555175781e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8984375,"distances_sum":2443.8273349761903}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":8,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9769173534798536,"seconds":4.319474101066589e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9375,"distances_sum":2491.104923779922}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9646806318681322,"seconds":3.511086106300354e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8671875,"distances_sum":2381.1970002776247}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":8,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9769173534798536,"seconds":4.319474101066589e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9375,"distances_sum":2491.104923779922}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":8,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9769173534798536,"seconds":4.319474101066589e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9375,"distances_sum":2491.104923779922}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4697265625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4697265625,"f1":null,"seconds":2.3674219846725464e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":6.140625,"distances_sum":992.2670727564762}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4697265625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4697265625,"f1":null,"seconds":2.3674219846725464e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":6.140625,"distances_sum":992.2670727564762}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9098588911088918,"seconds":3.4440308809280396e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.4453125,"distances_sum":1987.7897346050745}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.576171875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.576171875,"f1":0.7168600496725503,"seconds":2.54996120929718e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":6.8515625,"distances_sum":1228.6406839239305}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8637170121545129,"seconds":3.2223761081695557e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.1796875,"distances_sum":1783.829728384961}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.84375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.84375,"f1":0.9098588911088918,"seconds":3.4440308809280396e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.4453125,"distances_sum":1987.7897346050745}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9433696511821519,"seconds":3.471970558166504e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.6953125,"distances_sum":2256.5846525325314}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9689961080586083,"seconds":3.468245267868042e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.8828125,"distances_sum":2381.879197852652}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9689961080586083,"seconds":3.468245267868042e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.8828125,"distances_sum":2381.879197852652}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9689961080586083,"seconds":3.468245267868042e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.8828125,"distances_sum":2381.879197852652}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.18359375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.18359375,"f1":null,"seconds":1.600012183189392e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":4.8828125,"distances_sum":426.0840784662083}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5361328125, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5361328125,"f1":null,"seconds":2.6188790798187256e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":7.0390625,"distances_sum":1174.0728728135705}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5361328125,"state":{"ssize":3,"bsize":3},"perf":{"precision":null,"recall":0.5361328125,"f1":null,"seconds":2.6188790798187256e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":7.0390625,"distances_sum":1174.0728728135705}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8555382117882125,"seconds":3.0994415283203125e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":8.171875,"distances_sum":1791.9660134247358}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8598479645354655,"seconds":3.0640512704849243e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":8.1953125,"distances_sum":1816.6376109316627}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9300595238095245,"seconds":3.466382622718811e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":8.640625,"distances_sum":2188.2500081707294}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87890625,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.87890625,"f1":0.9300595238095245,"seconds":3.466382622718811e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":8.640625,"distances_sum":2188.2500081707294}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9496737637362642,"seconds":3.4477561712265015e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":8.765625,"distances_sum":2302.3019317528115}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.957703754578755,"seconds":3.520399332046509e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":8.8359375,"distances_sum":2334.8128667118604}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9376977189477198,"seconds":3.471970558166504e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":8.7265625,"distances_sum":2226.5270107835245}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.957703754578755,"seconds":3.520399332046509e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":8.8359375,"distances_sum":2334.8128667118604}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.957703754578755,"seconds":3.520399332046509e-6,"exhaustive_search_seconds":8.363276720046997e-7,"evaluations":8.8359375,"distances_sum":2334.8128667118604}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8694971694971705,"seconds":3.203749656677246e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.1484375,"distances_sum":1798.2685648720756}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":5,"bsize":4}, perf: {"precision":null,"recall":0.666015625,"f1":null,"seconds":4.276633262634277e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":7.6328125,"distances_sum":1501.5942712829979}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.783203125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.783203125,"f1":0.8694971694971705,"seconds":3.203749656677246e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.1484375,"distances_sum":1798.2685648720756}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9419585622710629,"seconds":6.778165698051453e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.6484375,"distances_sum":2258.7900471570897}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9439674908424915,"seconds":4.684552550315857e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.6953125,"distances_sum":2247.2544535308466}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9197718947718955,"seconds":5.735084414482117e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.3984375,"distances_sum":2123.3532406804993}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.8877122877122884,"seconds":4.844740033149719e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.2109375,"distances_sum":1869.8708436535508}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8796885406260415,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.1328125,"distances_sum":1894.7183384040407}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9163893398268405,"seconds":5.1781535148620605e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.484375,"distances_sum":2086.806603137663}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9439674908424915,"seconds":4.684552550315857e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.6953125,"distances_sum":2247.2544535308466}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":2,"bsize":13}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9769001831501836,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.9140625,"distances_sum":2440.2325374170314}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9663690476190478,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.8359375,"distances_sum":2377.022933264206}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9790750915750915,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.8828125,"distances_sum":2465.650146033697}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9505437271062275,"seconds":5.6158751249313354e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.75,"distances_sum":2279.467392807467}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9678800366300369,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.8671875,"distances_sum":2379.9043886779386}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9790750915750915,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.8828125,"distances_sum":2465.650146033697}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9790750915750915,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.8828125,"distances_sum":2465.650146033697}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.318359375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.318359375,"f1":null,"seconds":3.4086406230926514e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":4.8671875,"distances_sum":729.494631587036}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.19921875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.19921875,"f1":null,"seconds":2.209097146987915e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":4.65625,"distances_sum":467.46876294295413}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6552734375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6552734375,"f1":0.7776019119769126,"seconds":4.695728421211243e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":7.8359375,"distances_sum":1425.1122283314023}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6552734375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6552734375,"f1":0.7776019119769126,"seconds":4.695728421211243e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":7.8359375,"distances_sum":1425.1122283314023}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8498371420246429,"seconds":4.101544618606567e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.2109375,"distances_sum":1694.452891291554}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8895182942057949,"seconds":6.251037120819092e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.359375,"distances_sum":1885.790114154238}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9061527014652023,"seconds":4.407018423080444e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.453125,"distances_sum":1974.8310647177127}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8645099691974699,"seconds":4.1816383600234985e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.25,"distances_sum":1809.5065191023136}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.83984375,"state":{"ssize":9,"bsize":6},"perf":{"precision":1.0,"recall":0.83984375,"f1":0.9061527014652023,"seconds":4.407018423080444e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.453125,"distances_sum":1974.8310647177127}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9477022977022983,"seconds":4.084780812263489e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.8125,"distances_sum":2258.1541559008674}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9554372710622716,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.734375,"distances_sum":2351.6139380760383}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.962414148351649,"seconds":6.433576345443726e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.8515625,"distances_sum":2368.7981077216727}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9539091117216121,"seconds":6.85080885887146e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.7109375,"distances_sum":2351.8051118395097}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9252950174825179,"seconds":3.8817524909973145e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.6953125,"distances_sum":2151.7192571208493}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.962414148351649,"seconds":6.433576345443726e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.8515625,"distances_sum":2368.7981077216727}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.962414148351649,"seconds":6.433576345443726e-6,"exhaustive_search_seconds":1.0691583156585693e-6,"evaluations":8.8515625,"distances_sum":2368.7981077216727}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4033203125, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4033203125,"f1":null,"seconds":2.4810433387756348e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":6.2421875,"distances_sum":863.0985787918829}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7942730880230888,"seconds":3.4123659133911133e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":7.9296875,"distances_sum":1513.1916192400083}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6767578125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6767578125,"f1":0.7942730880230888,"seconds":3.4123659133911133e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":7.9296875,"distances_sum":1513.1916192400083}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8767232767232774,"seconds":3.7606805562973022e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.5859375,"distances_sum":1842.2393683512123}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6953125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6953125,"f1":0.8105150058275066,"seconds":3.3061951398849487e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":7.953125,"distances_sum":1561.851301171297}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.79296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.79296875,"f1":0.8767232767232774,"seconds":3.7606805562973022e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.5859375,"distances_sum":1842.2393683512123}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.796875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.796875,"f1":0.8781541375291384,"seconds":3.8370490074157715e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.546875,"distances_sum":1870.8025120156146}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9119453463203471,"seconds":3.883615136146545e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.625,"distances_sum":2027.8809425791364}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9451121794871798,"seconds":4.239380359649658e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.9375,"distances_sum":2242.5781508471973}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.9196402555777565,"seconds":3.891065716743469e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.6875,"distances_sum":2059.111400227206}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9355425824175833,"seconds":4.133209586143494e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.84375,"distances_sum":2204.557770763509}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9451121794871798,"seconds":4.239380359649658e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.9375,"distances_sum":2242.5781508471973}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9013671875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9451121794871798,"seconds":4.239380359649658e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.9375,"distances_sum":2242.5781508471973}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5625,"f1":0.7032708610833616,"seconds":2.5872141122817993e-6,"exhaustive_search_seconds":8.67992639541626e-7,"evaluations":7.265625,"distances_sum":1242.3698608661994}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4287109375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4287109375,"f1":null,"seconds":2.2724270820617676e-6,"exhaustive_search_seconds":8.67992639541626e-7,"evaluations":6.203125,"distances_sum":901.3516188538359}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8685819388944399,"seconds":3.2298266887664795e-6,"exhaustive_search_seconds":8.67992639541626e-7,"evaluations":8.1015625,"distances_sum":1865.2152889929737}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7802734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8685819388944399,"seconds":3.2298266887664795e-6,"exhaustive_search_seconds":8.67992639541626e-7,"evaluations":8.1015625,"distances_sum":1865.2152889929737}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8709769397269405,"seconds":3.0882656574249268e-6,"exhaustive_search_seconds":8.67992639541626e-7,"evaluations":8.1484375,"distances_sum":1851.872028357571}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7822265625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7822265625,"f1":0.8709769397269405,"seconds":3.0882656574249268e-6,"exhaustive_search_seconds":8.67992639541626e-7,"evaluations":8.1484375,"distances_sum":1851.872028357571}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7822265625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7822265625,"f1":0.8709769397269405,"seconds":3.0882656574249268e-6,"exhaustive_search_seconds":8.67992639541626e-7,"evaluations":8.1484375,"distances_sum":1851.872028357571}}, n: 9
mean(cfft.distances) = 0.35543717588078766
mean(cdnet.distances) = 0.9586681618216918
mean(crand.distances) = 0.33900532453707777
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8666666666666667
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9022222222222224
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8644444444444445
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8777777777777778
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8666666666666667
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9022222222222221
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9155555555555556
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.92
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9311111111111111
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9311111111111111
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8622222222222223
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8933333333333332
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9133333333333334
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8644444444444445
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9199999999999999
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8911111111111111
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8733333333333334
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.88
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8822222222222224
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9111111111111111
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.6559449668725331] ***
*** center 1: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 4: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 5, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 9, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.1883724005599653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1883724005599653, 0.15469754731695892] ***
*** finished computation of 7 references, err: [Inf, 0.1883724005599653, 0.15469754731695892] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [8, 130, 0]]
** centroid: 1, normalized-entropy: 0.3193373865339728, [(1, 8), (2, 130)]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 26, 0]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(1, 65), (2, 26)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [44, 26, 0]]
** centroid: 4, normalized-entropy: 0.9517626756348312, [(1, 44), (2, 26)]
*** center 5: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 58, 21]]
** centroid: 6, normalized-entropy: 0.8354065254460503, [(2, 58), (3, 21)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [127, 2, 0]]
** centroid: 7, normalized-entropy: 0.11539039325220708, [(1, 127), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18243872839957476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18243872839957476, 0.1545187113289204] ***
*** finished computation of 7 references, err: [Inf, 0.18243872839957476, 0.1545187113289204] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [130, 5, 0]]
** centroid: 1, normalized-entropy: 0.22853814395352806, [(1, 130), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 14, 0]]
** centroid: 2, normalized-entropy: 0.7394809367166378, [(1, 53), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 54, 16]]
** centroid: 3, normalized-entropy: 0.775512658133148, [(2, 54), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 112, 0]]
** centroid: 5, normalized-entropy: 0.6585513284599941, [(1, 23), (2, 112)]
*** center 6: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 81, 0]]
** centroid: 7, normalized-entropy: 0.43609466429612137, [(1, 8), (2, 81)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18615737859427794] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18615737859427794, 0.15523463874675522] ***
*** finished computation of 7 references, err: [Inf, 0.18615737859427794, 0.15523463874675522] ***
*** center 1: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 64, 27]]
** centroid: 2, normalized-entropy: 0.8772236230732716, [(2, 64), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 10, 0]]
** centroid: 3, normalized-entropy: 0.5969995167604553, [(1, 59), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [44, 42, 0]]
** centroid: 4, normalized-entropy: 0.9996098363678071, [(1, 44), (2, 42)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 104, 0]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(1, 13), (2, 104)]
*** center 6: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [91, 24, 0]]
** centroid: 7, normalized-entropy: 0.7389821181149047, [(1, 91), (2, 24)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4837658580241574] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4837658580241574, 0.2938993614259268] ***
*** starting iteration: 2; err: [Inf, 0.4837658580241574, 0.2938993614259268] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4837658580241574, 0.2938993614259268, 0.2912352508243017] ***
*** starting iteration: 3; err: [Inf, 0.4837658580241574, 0.2938993614259268, 0.2912352508243017] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4837658580241574, 0.2938993614259268, 0.2912352508243017, 0.2909608742266938] ***
*** finished computation of 3 references, err: [Inf, 0.4837658580241574, 0.2938993614259268, 0.2912352508243017, 0.2909608742266938] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [246, 4, 0]]
** centroid: 1, normalized-entropy: 0.11835001140827515, [(1, 246), (2, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [6, 210, 16]]
** centroid: 2, normalized-entropy: 0.3359979883652442, [(1, 6), (2, 210), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [132, 52, 0]]
** centroid: 3, normalized-entropy: 0.8589810370425965, [(1, 132), (2, 52)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3578200454536038] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3578200454536038, 0.30816450324105] ***
*** starting iteration: 2; err: [Inf, 0.3578200454536038, 0.30816450324105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3578200454536038, 0.30816450324105, 0.3004968569375228] ***
*** starting iteration: 3; err: [Inf, 0.3578200454536038, 0.30816450324105, 0.3004968569375228] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3578200454536038, 0.30816450324105, 0.3004968569375228, 0.29918276876172073] ***
*** starting iteration: 4; err: [Inf, 0.3578200454536038, 0.30816450324105, 0.3004968569375228, 0.29918276876172073] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3578200454536038, 0.30816450324105, 0.3004968569375228, 0.29918276876172073, 0.2992490492872838] ***
*** finished computation of 3 references, err: [Inf, 0.3578200454536038, 0.30816450324105, 0.3004968569375228, 0.29918276876172073, 0.2992490492872838] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [80, 169, 21]]
** centroid: 1, normalized-entropy: 0.7758068183097758, [(1, 80), (2, 169), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [111, 73, 0]]
** centroid: 2, normalized-entropy: 0.9690111193010181, [(1, 111), (2, 73)]
*** center 3: selecting labels [1] (freq >= 2) [from [213, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4021892876181377] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4021892876181377, 0.3017576878535739] ***
*** starting iteration: 2; err: [Inf, 0.4021892876181377, 0.3017576878535739] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4021892876181377, 0.3017576878535739, 0.2987666181197901] ***
*** starting iteration: 3; err: [Inf, 0.4021892876181377, 0.3017576878535739, 0.2987666181197901] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4021892876181377, 0.3017576878535739, 0.2987666181197901, 0.29855681095632547] ***
*** finished computation of 3 references, err: [Inf, 0.4021892876181377, 0.3017576878535739, 0.2987666181197901, 0.29855681095632547] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [79, 159, 27]]
** centroid: 1, normalized-entropy: 0.8192107012667554, [(1, 79), (2, 159), (3, 27)]
*** center 2: selecting labels [1] (freq >= 2) [from [219, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [98, 85, 0]]
** centroid: 3, normalized-entropy: 0.9963567000600257, [(1, 98), (2, 85)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3007282803419631] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3007282803419631, 0.24428496552860593] ***
*** starting iteration: 2; err: [Inf, 0.3007282803419631, 0.24428496552860593] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3007282803419631, 0.24428496552860593, 0.23666802080146768] ***
*** starting iteration: 3; err: [Inf, 0.3007282803419631, 0.24428496552860593, 0.23666802080146768] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3007282803419631, 0.24428496552860593, 0.23666802080146768, 0.2354042352898768] ***
*** finished computation of 3 references, err: [Inf, 0.3007282803419631, 0.24428496552860593, 0.23666802080146768, 0.2354042352898768] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [215, 56, 0]]
** centroid: 1, normalized-entropy: 0.7350149516971934, [(1, 215), (2, 56)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 186, 16]]
** centroid: 2, normalized-entropy: 0.39938208242459744, [(2, 186), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [169, 24, 0]]
** centroid: 3, normalized-entropy: 0.5417434375323452, [(1, 169), (2, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32125933909428483] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32125933909428483, 0.26629035887091995] ***
*** starting iteration: 2; err: [Inf, 0.32125933909428483, 0.26629035887091995] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32125933909428483, 0.26629035887091995, 0.25403292244300246] ***
*** starting iteration: 3; err: [Inf, 0.32125933909428483, 0.26629035887091995, 0.25403292244300246] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32125933909428483, 0.26629035887091995, 0.25403292244300246, 0.23696157853838162] ***
*** finished computation of 3 references, err: [Inf, 0.32125933909428483, 0.26629035887091995, 0.25403292244300246, 0.23696157853838162] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [155, 58, 0]]
** centroid: 1, normalized-entropy: 0.8447463313295659, [(1, 155), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [249, 17, 0]]
** centroid: 2, normalized-entropy: 0.3427736032222124, [(1, 249), (2, 17)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 167, 21]]
** centroid: 3, normalized-entropy: 0.5050288372014635, [(2, 167), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.28815075793237926] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28815075793237926, 0.2407517285376642] ***
*** starting iteration: 2; err: [Inf, 0.28815075793237926, 0.2407517285376642] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28815075793237926, 0.2407517285376642, 0.23716614979585965] ***
*** starting iteration: 3; err: [Inf, 0.28815075793237926, 0.2407517285376642, 0.23716614979585965] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28815075793237926, 0.2407517285376642, 0.23716614979585965, 0.23640151935415915] ***
*** finished computation of 3 references, err: [Inf, 0.28815075793237926, 0.2407517285376642, 0.23716614979585965, 0.23640151935415915] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [122, 71, 0]]
** centroid: 1, normalized-entropy: 0.9490269819960363, [(1, 122), (2, 71)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [258, 5, 0]]
** centroid: 2, normalized-entropy: 0.1358533148678295, [(1, 258), (2, 5)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [16, 168, 27]]
** centroid: 3, normalized-entropy: 0.5826700241298763, [(1, 16), (2, 168), (3, 27)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.1993809480852148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1993809480852148, 0.1536156125429615] ***
*** starting iteration: 2; err: [Inf, 0.1993809480852148, 0.1536156125429615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1993809480852148, 0.1536156125429615, 0.14863567838064945] ***
*** starting iteration: 3; err: [Inf, 0.1993809480852148, 0.1536156125429615, 0.14863567838064945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1993809480852148, 0.1536156125429615, 0.14863567838064945, 0.1475442748736344] ***
*** finished computation of 7 references, err: [Inf, 0.1993809480852148, 0.1536156125429615, 0.14863567838064945, 0.1475442748736344] ***
*** center 1: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 76, 16]]
** centroid: 2, normalized-entropy: 0.6665783579949205, [(2, 76), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 42, 0]]
** centroid: 3, normalized-entropy: 0.9967916319816367, [(1, 48), (2, 42)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [103, 1, 0]]
** centroid: 4, normalized-entropy: 0.07823246525771242, [(1, 103), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 66, 0]]
** centroid: 5, normalized-entropy: 0.9420365814945866, [(1, 37), (2, 66)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 81, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19954015564793412] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19954015564793412, 0.15567305171373544] ***
*** starting iteration: 2; err: [Inf, 0.19954015564793412, 0.15567305171373544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19954015564793412, 0.15567305171373544, 0.14936137876041916] ***
*** starting iteration: 3; err: [Inf, 0.19954015564793412, 0.15567305171373544, 0.14936137876041916] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19954015564793412, 0.15567305171373544, 0.14936137876041916, 0.1473525902703181] ***
*** finished computation of 7 references, err: [Inf, 0.19954015564793412, 0.15567305171373544, 0.14936137876041916, 0.1473525902703181] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [110, 2, 0]]
** centroid: 1, normalized-entropy: 0.12923377484588472, [(1, 110), (2, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 62, 21]]
** centroid: 3, normalized-entropy: 0.8160172973428256, [(2, 62), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [118, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [83, 21, 0]]
** centroid: 5, normalized-entropy: 0.7257576154473545, [(1, 83), (2, 21)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 82, 0]]
** centroid: 6, normalized-entropy: 0.1623261801753929, [(1, 2), (2, 82)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 75, 0]]
** centroid: 7, normalized-entropy: 0.10106696361212422, [(1, 1), (2, 75)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1903071537449107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1903071537449107, 0.1511873670950018] ***
*** starting iteration: 2; err: [Inf, 0.1903071537449107, 0.1511873670950018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1903071537449107, 0.1511873670950018, 0.1481273530338747] ***
*** starting iteration: 3; err: [Inf, 0.1903071537449107, 0.1511873670950018, 0.1481273530338747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1903071537449107, 0.1511873670950018, 0.1481273530338747, 0.14767211323011964] ***
*** finished computation of 7 references, err: [Inf, 0.1903071537449107, 0.1511873670950018, 0.1481273530338747, 0.14767211323011964] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 66, 27]]
** centroid: 1, normalized-entropy: 0.8691375806126381, [(2, 66), (3, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [87, 3, 0]]
** centroid: 3, normalized-entropy: 0.2108423003185322, [(1, 87), (2, 3)]
*** center 4: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [103, 10, 0]]
** centroid: 5, normalized-entropy: 0.43142820800151405, [(1, 103), (2, 10)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 81, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [17, 84, 0]]
** centroid: 7, normalized-entropy: 0.653839880626333, [(1, 17), (2, 84)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1899127198730011] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1899127198730011, 0.15220422777710846] ***
*** finished computation of 7 references, err: [Inf, 0.1899127198730011, 0.15220422777710846] ***
*** center 1: selecting labels [1] (freq >= 2) [from [117, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 28, 0]]
** centroid: 2, normalized-entropy: 0.9675594819018211, [(1, 43), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 68, 16]]
** centroid: 3, normalized-entropy: 0.7024665512903904, [(2, 68), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 94, 0]]
** centroid: 5, normalized-entropy: 0.8351164948421137, [(1, 34), (2, 94)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 75, 0]]
** centroid: 6, normalized-entropy: 0.17378132267943294, [(1, 2), (2, 75)]
*** center 7: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2130061384106147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2130061384106147, 0.1536376904235452] ***
*** finished computation of 7 references, err: [Inf, 0.2130061384106147, 0.1536376904235452] ***
*** center 1: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 21]]
** centroid: 2, normalized-entropy: 0.8918107543797084, [(2, 47), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [103, 2, 0]]
** centroid: 3, normalized-entropy: 0.1360592862387751, [(1, 103), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [85, 2, 0]]
** centroid: 4, normalized-entropy: 0.15790637433488164, [(1, 85), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [110, 26, 0]]
** centroid: 5, normalized-entropy: 0.7039260680195971, [(1, 110), (2, 26)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 83, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 82, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1959040365106813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1959040365106813, 0.15622623030283395] ***
*** finished computation of 7 references, err: [Inf, 0.1959040365106813, 0.15622623030283395] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 75, 0]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(1, 30), (2, 75)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 29, 0]]
** centroid: 2, normalized-entropy: 0.9556222693531471, [(1, 48), (2, 29)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 105, 27]]
** centroid: 4, normalized-entropy: 0.7309263775906009, [(2, 105), (3, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [85, 35, 0]]
** centroid: 5, normalized-entropy: 0.8708644692353648, [(1, 85), (2, 35)]
*** center 6: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29801496098589925] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29801496098589925, 0.24220889973294762] ***
*** starting iteration: 2; err: [Inf, 0.29801496098589925, 0.24220889973294762] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29801496098589925, 0.24220889973294762, 0.23347143944095564] ***
*** starting iteration: 3; err: [Inf, 0.29801496098589925, 0.24220889973294762, 0.23347143944095564] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29801496098589925, 0.24220889973294762, 0.23347143944095564, 0.2317196090479155] ***
*** finished computation of 3 references, err: [Inf, 0.29801496098589925, 0.24220889973294762, 0.23347143944095564, 0.2317196090479155] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [115, 92, 0]]
** centroid: 1, normalized-entropy: 0.9910760598382222, [(1, 115), (2, 92)]
*** center 2: selecting labels [1] (freq >= 2) [from [197, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [72, 174, 16]]
** centroid: 3, normalized-entropy: 0.7259305756544733, [(1, 72), (2, 174), (3, 16)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27013083551961486] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27013083551961486, 0.24248776548560233] ***
*** starting iteration: 2; err: [Inf, 0.27013083551961486, 0.24248776548560233] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27013083551961486, 0.24248776548560233, 0.23442048628324422] ***
*** starting iteration: 3; err: [Inf, 0.27013083551961486, 0.24248776548560233, 0.23442048628324422] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27013083551961486, 0.24248776548560233, 0.23442048628324422, 0.23275371576900938] ***
*** finished computation of 3 references, err: [Inf, 0.27013083551961486, 0.24248776548560233, 0.23442048628324422, 0.23275371576900938] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [130, 57, 0]]
** centroid: 1, normalized-entropy: 0.8870947459780679, [(1, 130), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [270, 8, 0]]
** centroid: 2, normalized-entropy: 0.18822088853744873, [(1, 270), (2, 8)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [4, 177, 21]]
** centroid: 3, normalized-entropy: 0.39028274856415185, [(1, 4), (2, 177), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2622354050499221] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2622354050499221, 0.234944610927684] ***
*** starting iteration: 2; err: [Inf, 0.2622354050499221, 0.234944610927684] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2622354050499221, 0.234944610927684, 0.23435599309136754] ***
*** finished computation of 3 references, err: [Inf, 0.2622354050499221, 0.234944610927684, 0.23435599309136754] ***
*** center 1: selecting labels [1] (freq >= 2) [from [218, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [73, 147, 27]]
** centroid: 2, normalized-entropy: 0.8292912995485486, [(1, 73), (2, 147), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [105, 97, 0]]
** centroid: 3, normalized-entropy: 0.998868289449348, [(1, 105), (2, 97)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.19647194576021787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19647194576021787, 0.15499092089487715] ***
*** finished computation of 7 references, err: [Inf, 0.19647194576021787, 0.15499092089487715] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 120, 1]]
** centroid: 1, normalized-entropy: 0.06905438212565047, [(2, 120), (3, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 68, 15]]
** centroid: 2, normalized-entropy: 0.6816559115981193, [(2, 68), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [69, 59, 0]]
** centroid: 3, normalized-entropy: 0.9955927544527945, [(1, 69), (2, 59)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [86, 4, 0]]
** centroid: 4, normalized-entropy: 0.2623112196143368, [(1, 86), (2, 4)]
*** center 5: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [57, 15, 0]]
** centroid: 7, normalized-entropy: 0.7382848661434506, [(1, 57), (2, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22038952723170618] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22038952723170618, 0.17960299171348182] ***
*** finished computation of 7 references, err: [Inf, 0.22038952723170618, 0.17960299171348182] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [125, 94, 0]]
** centroid: 1, normalized-entropy: 0.9854976183205397, [(1, 125), (2, 94)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 7, 0]]
** centroid: 3, normalized-entropy: 0.4830306801456181, [(1, 60), (2, 7)]
*** center 4: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 131, 21]]
** centroid: 6, normalized-entropy: 0.5793940984451648, [(2, 131), (3, 21)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [43, 10, 0]]
** centroid: 7, normalized-entropy: 0.6987003526563345, [(1, 43), (2, 10)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2282481322475504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2282481322475504, 0.15562340379113154] ***
*** finished computation of 7 references, err: [Inf, 0.2282481322475504, 0.15562340379113154] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [107, 7, 0]]
** centroid: 1, normalized-entropy: 0.3329913124162683, [(1, 107), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [71, 29, 0]]
** centroid: 2, normalized-entropy: 0.8687212463394044, [(1, 71), (2, 29)]
*** center 3: selecting labels [1] (freq >= 1) [from [118, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [100, 34, 0]]
** centroid: 5, normalized-entropy: 0.8171387756817725, [(1, 100), (2, 34)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 69, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 28, 27]]
** centroid: 7, normalized-entropy: 0.9997615248696311, [(2, 28), (3, 27)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3353306340842365] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3353306340842365, 0.26214276186495394] ***
*** starting iteration: 2; err: [Inf, 0.3353306340842365, 0.26214276186495394] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3353306340842365, 0.26214276186495394, 0.2459566203482986] ***
*** starting iteration: 3; err: [Inf, 0.3353306340842365, 0.26214276186495394, 0.2459566203482986] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3353306340842365, 0.26214276186495394, 0.2459566203482986, 0.23307626969222953] ***
*** starting iteration: 4; err: [Inf, 0.3353306340842365, 0.26214276186495394, 0.2459566203482986, 0.23307626969222953] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3353306340842365, 0.26214276186495394, 0.2459566203482986, 0.23307626969222953, 0.23211225388884857] ***
*** finished computation of 3 references, err: [Inf, 0.3353306340842365, 0.26214276186495394, 0.2459566203482986, 0.23307626969222953, 0.23211225388884857] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [77, 146, 10]]
** centroid: 1, normalized-entropy: 0.7226694892536423, [(1, 77), (2, 146), (3, 10)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [94, 120, 6]]
** centroid: 2, normalized-entropy: 0.721069937347176, [(1, 94), (2, 120), (3, 6)]
*** center 3: selecting labels [1] (freq >= 1) [from [213, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2883715939190032] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2883715939190032, 0.2401210160484758] ***
*** starting iteration: 2; err: [Inf, 0.2883715939190032, 0.2401210160484758] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2883715939190032, 0.2401210160484758, 0.23329744411344783] ***
*** starting iteration: 3; err: [Inf, 0.2883715939190032, 0.2401210160484758, 0.23329744411344783] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2883715939190032, 0.2401210160484758, 0.23329744411344783, 0.23248099253235058] ***
*** finished computation of 3 references, err: [Inf, 0.2883715939190032, 0.2401210160484758, 0.23329744411344783, 0.23248099253235058] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [273, 7, 0]]
** centroid: 1, normalized-entropy: 0.1686609314966701, [(1, 273), (2, 7)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [5, 183, 21]]
** centroid: 2, normalized-entropy: 0.3973247877659052, [(1, 5), (2, 183), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [126, 52, 0]]
** centroid: 3, normalized-entropy: 0.8714630056611941, [(1, 126), (2, 52)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3393508489840598] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3393508489840598, 0.23555756569246591] ***
*** starting iteration: 2; err: [Inf, 0.3393508489840598, 0.23555756569246591] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3393508489840598, 0.23555756569246591, 0.23549108162963542] ***
*** finished computation of 3 references, err: [Inf, 0.3393508489840598, 0.23555756569246591, 0.23549108162963542] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [264, 1, 0]]
** centroid: 1, normalized-entropy: 0.03581063431610241, [(1, 264), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [120, 54, 0]]
** centroid: 2, normalized-entropy: 0.8935711016541908, [(1, 120), (2, 54)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [12, 189, 27]]
** centroid: 3, normalized-entropy: 0.5125850213137473, [(1, 12), (2, 189), (3, 27)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3297255111916981] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3297255111916981, 0.27037426469254644] ***
*** starting iteration: 2; err: [Inf, 0.3297255111916981, 0.27037426469254644] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3297255111916981, 0.27037426469254644, 0.265442332146583] ***
*** starting iteration: 3; err: [Inf, 0.3297255111916981, 0.27037426469254644, 0.265442332146583] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3297255111916981, 0.27037426469254644, 0.265442332146583, 0.2510783111889128] ***
*** starting iteration: 4; err: [Inf, 0.3297255111916981, 0.27037426469254644, 0.265442332146583, 0.2510783111889128] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3297255111916981, 0.27037426469254644, 0.265442332146583, 0.2510783111889128, 0.2324576235751065] ***
*** starting iteration: 5; err: [Inf, 0.3297255111916981, 0.27037426469254644, 0.265442332146583, 0.2510783111889128, 0.2324576235751065] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3297255111916981, 0.27037426469254644, 0.265442332146583, 0.2510783111889128, 0.2324576235751065, 0.23043185552895382] ***
*** starting iteration: 6; err: [Inf, 0.3297255111916981, 0.27037426469254644, 0.265442332146583, 0.2510783111889128, 0.2324576235751065, 0.23043185552895382] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3297255111916981, 0.27037426469254644, 0.265442332146583, 0.2510783111889128, 0.2324576235751065, 0.23043185552895382, 0.23030276187099852] ***
*** finished computation of 3 references, err: [Inf, 0.3297255111916981, 0.27037426469254644, 0.265442332146583, 0.2510783111889128, 0.2324576235751065, 0.23043185552895382, 0.23030276187099852] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [126, 71, 0]]
** centroid: 1, normalized-entropy: 0.9430197593253007, [(1, 126), (2, 71)]
*** center 2: selecting labels [1] (freq >= 2) [from [228, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [30, 195, 16]]
** centroid: 3, normalized-entropy: 0.55597791938377, [(1, 30), (2, 195), (3, 16)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2934142030325943] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2934142030325943, 0.24246047245899865] ***
*** starting iteration: 2; err: [Inf, 0.2934142030325943, 0.24246047245899865] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2934142030325943, 0.24246047245899865, 0.23420190130886825] ***
*** starting iteration: 3; err: [Inf, 0.2934142030325943, 0.24246047245899865, 0.23420190130886825] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2934142030325943, 0.24246047245899865, 0.23420190130886825, 0.23433736023371635] ***
*** finished computation of 3 references, err: [Inf, 0.2934142030325943, 0.24246047245899865, 0.23420190130886825, 0.23433736023371635] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [145, 87, 0]]
** centroid: 1, normalized-entropy: 0.954434002924965, [(1, 145), (2, 87)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [70, 155, 21]]
** centroid: 2, normalized-entropy: 0.7816624839814031, [(1, 70), (2, 155), (3, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [189, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3332608792458897] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3332608792458897, 0.24960416209265435] ***
*** starting iteration: 2; err: [Inf, 0.3332608792458897, 0.24960416209265435] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3332608792458897, 0.24960416209265435, 0.2366423657194696] ***
*** starting iteration: 3; err: [Inf, 0.3332608792458897, 0.24960416209265435, 0.2366423657194696] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3332608792458897, 0.24960416209265435, 0.2366423657194696, 0.23487651620948244] ***
*** starting iteration: 4; err: [Inf, 0.3332608792458897, 0.24960416209265435, 0.2366423657194696, 0.23487651620948244] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3332608792458897, 0.24960416209265435, 0.2366423657194696, 0.23487651620948244, 0.23449434655839982] ***
*** finished computation of 3 references, err: [Inf, 0.3332608792458897, 0.24960416209265435, 0.2366423657194696, 0.23487651620948244, 0.23449434655839982] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [145, 81, 0]]
** centroid: 1, normalized-entropy: 0.9413529965487271, [(1, 145), (2, 81)]
*** center 2: selecting labels [1] (freq >= 2) [from [218, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [33, 163, 27]]
** centroid: 3, normalized-entropy: 0.6985807579877613, [(1, 33), (2, 163), (3, 27)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.44761370929299266] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44761370929299266, 0.3111064975155523] ***
*** finished computation of 3 references, err: [Inf, 0.44761370929299266, 0.3111064975155523] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [99, 139, 16]]
** centroid: 1, normalized-entropy: 0.7931005491471141, [(1, 99), (2, 139), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [80, 127, 0]]
** centroid: 2, normalized-entropy: 0.962485977735779, [(1, 80), (2, 127)]
*** center 3: selecting labels [1] (freq >= 2) [from [205, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.44652181070973757] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44652181070973757, 0.35900536471645517] ***
*** finished computation of 3 references, err: [Inf, 0.44652181070973757, 0.35900536471645517] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [27, 63, 20]]
** centroid: 1, normalized-entropy: 0.886516006075464, [(1, 27), (2, 63), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [85, 132, 1]]
** centroid: 2, normalized-entropy: 0.9658910788637398, [(1, 85), (2, 132)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [292, 47, 0]]
** centroid: 3, normalized-entropy: 0.5806740672017895, [(1, 292), (2, 47)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.40353814906523056] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40353814906523056, 0.3289137950342992] ***
*** finished computation of 3 references, err: [Inf, 0.40353814906523056, 0.3289137950342992] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [167, 55, 0]]
** centroid: 1, normalized-entropy: 0.807688834426579, [(1, 167), (2, 55)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [96, 189, 27]]
** centroid: 2, normalized-entropy: 0.7992652727967534, [(1, 96), (2, 189), (3, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [133, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.21557195439470467] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21557195439470467, 0.19630255905614868] ***
*** starting iteration: 2; err: [Inf, 0.21557195439470467, 0.19630255905614868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21557195439470467, 0.19630255905614868, 0.19367132288845698] ***
*** starting iteration: 3; err: [Inf, 0.21557195439470467, 0.19630255905614868, 0.19367132288845698] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21557195439470467, 0.19630255905614868, 0.19367132288845698, 0.1927896945432455] ***
*** finished computation of 7 references, err: [Inf, 0.21557195439470467, 0.19630255905614868, 0.19367132288845698, 0.1927896945432455] ***
*** center 1: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 67, 16]]
** centroid: 2, normalized-entropy: 0.7072324944713736, [(2, 67), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [87, 8, 0]]
** centroid: 3, normalized-entropy: 0.4168441963431652, [(1, 87), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [20, 89, 0]]
** centroid: 4, normalized-entropy: 0.6876445334580582, [(1, 20), (2, 89)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [11, 91, 0]]
** centroid: 5, normalized-entropy: 0.493375733509813, [(1, 11), (2, 91)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [53, 11, 0]]
** centroid: 6, normalized-entropy: 0.6619760641115651, [(1, 53), (2, 11)]
*** center 7: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21598297408942518] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21598297408942518, 0.1892689595590981] ***
*** starting iteration: 2; err: [Inf, 0.21598297408942518, 0.1892689595590981] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21598297408942518, 0.1892689595590981, 0.1876682536481046] ***
*** starting iteration: 3; err: [Inf, 0.21598297408942518, 0.1892689595590981, 0.1876682536481046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21598297408942518, 0.1892689595590981, 0.1876682536481046, 0.18763325090214297] ***
*** finished computation of 7 references, err: [Inf, 0.21598297408942518, 0.1892689595590981, 0.1876682536481046, 0.18763325090214297] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [137, 3, 0]]
** centroid: 1, normalized-entropy: 0.14938813931814066, [(1, 137), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [79, 8, 0]]
** centroid: 2, normalized-entropy: 0.4429586785384856, [(1, 79), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 64, 21]]
** centroid: 3, normalized-entropy: 0.806583102274714, [(2, 64), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [16, 82, 0]]
** centroid: 5, normalized-entropy: 0.6420642892306891, [(1, 16), (2, 82)]
*** center 6: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 85, 0]]
** centroid: 7, normalized-entropy: 0.15790637433488164, [(1, 2), (2, 85)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23725041792263044] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23725041792263044, 0.1922281047732833] ***
*** starting iteration: 2; err: [Inf, 0.23725041792263044, 0.1922281047732833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23725041792263044, 0.1922281047732833, 0.18837332628901932] ***
*** starting iteration: 3; err: [Inf, 0.23725041792263044, 0.1922281047732833, 0.18837332628901932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23725041792263044, 0.1922281047732833, 0.18837332628901932, 0.1877963602336227] ***
*** finished computation of 7 references, err: [Inf, 0.23725041792263044, 0.1922281047732833, 0.18837332628901932, 0.1877963602336227] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 98, 27]]
** centroid: 1, normalized-entropy: 0.7527960664084546, [(2, 98), (3, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [51, 8, 0]]
** centroid: 3, normalized-entropy: 0.572580465623769, [(1, 51), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [68, 25, 0]]
** centroid: 4, normalized-entropy: 0.8397622740178036, [(1, 68), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [77, 18, 0]]
** centroid: 5, normalized-entropy: 0.7003691487575897, [(1, 77), (2, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [109, 4, 0]]
** centroid: 6, normalized-entropy: 0.22077992347107292, [(1, 109), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 91, 0]]
** centroid: 7, normalized-entropy: 0.08650421412134586, [(1, 1), (2, 91)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9579819340298382, 0.9539869210527893, 0.9529829230428032, 0.9299868731006455, 0.9250148351944759, 0.9250058441675207, 0.9199918481355608, 0.898997800195405, 0.886994779210348, 0.8809797821773869, 0.8759597921274569, 0.8520286753819688]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 1) => 0.9579819340298382
finished with 12
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9579819340298382, 0.9539869210527893, 0.9529829230428032, 0.9299868731006455, 0.9250148351944759, 0.9250058441675207, 0.9199918481355608, 0.898997800195405, 0.886994779210348, 0.8809797821773869, 0.8759597921274569, 0.8520286753819688]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 1) => 0.9579819340298382
finished with 13
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.38058932529141504] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38058932529141504, 0.3359218156748303] ***
*** starting iteration: 2; err: [Inf, 0.38058932529141504, 0.3359218156748303] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38058932529141504, 0.3359218156748303, 0.33150456212363105] ***
*** starting iteration: 3; err: [Inf, 0.38058932529141504, 0.3359218156748303, 0.33150456212363105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38058932529141504, 0.3359218156748303, 0.33150456212363105, 0.3297632913029677] ***
*** finished computation of 3 references, err: [Inf, 0.38058932529141504, 0.3359218156748303, 0.33150456212363105, 0.3297632913029677] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [229, 19, 0]]
** centroid: 1, normalized-entropy: 0.3901306239770838, [(1, 229), (2, 19)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [44, 110, 16]]
** centroid: 2, normalized-entropy: 0.7772753923584734, [(1, 44), (2, 110), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [111, 137, 0]]
** centroid: 3, normalized-entropy: 0.9920569695382707, [(1, 111), (2, 137)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37184620952733544] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37184620952733544, 0.300760254073983] ***
*** starting iteration: 2; err: [Inf, 0.37184620952733544, 0.300760254073983] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37184620952733544, 0.300760254073983, 0.2935170074017241] ***
*** starting iteration: 3; err: [Inf, 0.37184620952733544, 0.300760254073983, 0.2935170074017241] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37184620952733544, 0.300760254073983, 0.2935170074017241, 0.29278749169159063] ***
*** finished computation of 3 references, err: [Inf, 0.37184620952733544, 0.300760254073983, 0.2935170074017241, 0.29278749169159063] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [189, 43, 0]]
** centroid: 1, normalized-entropy: 0.6916309837914819, [(1, 189), (2, 43)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 194, 21]]
** centroid: 2, normalized-entropy: 0.4615800251119872, [(2, 194), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [215, 5, 0]]
** centroid: 3, normalized-entropy: 0.1564910629057016, [(1, 215), (2, 5)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3759704690281374] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3759704690281374, 0.31173630229740595] ***
*** starting iteration: 2; err: [Inf, 0.3759704690281374, 0.31173630229740595] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3759704690281374, 0.31173630229740595, 0.30001098013341965] ***
*** starting iteration: 3; err: [Inf, 0.3759704690281374, 0.31173630229740595, 0.30001098013341965] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3759704690281374, 0.31173630229740595, 0.30001098013341965, 0.2967772302559872] ***
*** finished computation of 3 references, err: [Inf, 0.3759704690281374, 0.31173630229740595, 0.30001098013341965, 0.2967772302559872] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 194, 27]]
** centroid: 1, normalized-entropy: 0.5355719985646603, [(2, 194), (3, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [205, 13, 0]]
** centroid: 2, normalized-entropy: 0.32598644984825376, [(1, 205), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [191, 37, 0]]
** centroid: 3, normalized-entropy: 0.6397379059055348, [(1, 191), (2, 37)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9579819340298382, 0.9539869210527893, 0.9529829230428032, 0.9299868731006455, 0.9250148351944759, 0.9250058441675207, 0.9199918481355608, 0.9089748431065795, 0.898997800195405, 0.886994779210348, 0.8809797821773869, 0.8759597921274569, 0.8520286753819688]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 1) => 0.9579819340298382
finished with 14
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.22886880562184142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22886880562184142, 0.1918962241884885] ***
*** finished computation of 7 references, err: [Inf, 0.22886880562184142, 0.1918962241884885] ***
*** center 1: selecting labels [1] (freq >= 2) [from [118, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 55, 21]]
** centroid: 2, normalized-entropy: 0.8503821170987139, [(2, 55), (3, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [82, 5, 0]]
** centroid: 4, normalized-entropy: 0.3173238998358585, [(1, 82), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 101, 0]]
** centroid: 5, normalized-entropy: 0.27425064105029284, [(1, 5), (2, 101)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [37, 81, 0]]
** centroid: 7, normalized-entropy: 0.8972394496845044, [(1, 37), (2, 81)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2479710222998246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2479710222998246, 0.19229204000449968] ***
*** finished computation of 7 references, err: [Inf, 0.2479710222998246, 0.19229204000449968] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [14, 119, 0]]
** centroid: 1, normalized-entropy: 0.48546076074591343, [(1, 14), (2, 119)]
*** center 2: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 45, 0]]
** centroid: 3, normalized-entropy: 0.998693408098057, [(1, 49), (2, 45)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [69, 18, 0]]
** centroid: 4, normalized-entropy: 0.7355085815538399, [(1, 69), (2, 18)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 59, 27]]
** centroid: 5, normalized-entropy: 0.8976844934141643, [(2, 59), (3, 27)]
*** center 6: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [101, 3, 0]]
** centroid: 7, normalized-entropy: 0.18857195602479668, [(1, 101), (2, 3)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2508614552361113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2508614552361113, 0.19461336056212405] ***
*** finished computation of 7 references, err: [Inf, 0.2508614552361113, 0.19461336056212405] ***
*** center 1: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [82, 5, 0]]
** centroid: 2, normalized-entropy: 0.3173238998358585, [(1, 82), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 65, 15]]
** centroid: 3, normalized-entropy: 0.6962122601251459, [(2, 65), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 57, 0]]
** centroid: 5, normalized-entropy: 0.9994730201859837, [(1, 54), (2, 57)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [42, 61, 0]]
** centroid: 6, normalized-entropy: 0.9753130577847331, [(1, 42), (2, 61)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 78, 1]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9579819340298382, 0.9539869210527893, 0.9529829230428032, 0.9299868731006455, 0.9280088471705238, 0.9250148351944759, 0.9250058441675207, 0.9199918481355608, 0.9089748431065795, 0.898997800195405, 0.886994779210348, 0.8809797821773869, 0.8759597921274569, 0.8520286753819688]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 1) => 0.9579819340298382
finished with 14
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9579819340298382, 0.9539869210527893, 0.9529829230428032, 0.9299868731006455, 0.9280088471705238, 0.9250148351944759, 0.9250058441675207, 0.9199918481355608, 0.9089748431065795, 0.898997800195405, 0.886994779210348, 0.8809797821773869, 0.8759597921274569, 0.8520286753819688]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 1) => 0.9579819340298382
finished with 14
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9579819340298382, 0.9539869210527893, 0.9529829230428032, 0.9299868731006455, 0.9280088471705238, 0.9250148351944759, 0.9250058441675207, 0.9199918481355608, 0.9089748431065795, 0.898997800195405, 0.886994779210348, 0.8809797821773869, 0.8759597921274569, 0.8520286753819688]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 1) => 0.9579819340298382
finished with 15
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.4498712970335428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4498712970335428, 0.24192866298171492] ***
*** finished computation of 7 references, err: [Inf, 0.4498712970335428, 0.24192866298171492] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 204, 16]]
** centroid: 1, normalized-entropy: 0.37601985096927276, [(2, 204), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [55, 11, 0]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(1, 55), (2, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [55, 21, 0]]
** centroid: 4, normalized-entropy: 0.8503821170987139, [(1, 55), (2, 21)]
*** center 5: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [140, 30, 0]]
** centroid: 6, normalized-entropy: 0.6722948170756378, [(1, 140), (2, 30)]
*** center 7: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25466222529379146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25466222529379146, 0.21058477004333728] ***
*** finished computation of 7 references, err: [Inf, 0.25466222529379146, 0.21058477004333728] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [27, 76, 0]]
** centroid: 1, normalized-entropy: 0.829952434172285, [(1, 27), (2, 76)]
*** center 2: selecting labels [1] (freq >= 1) [from [157, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [132, 18, 0]]
** centroid: 3, normalized-entropy: 0.5293608652873645, [(1, 132), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [36, 23, 0]]
** centroid: 4, normalized-entropy: 0.9646900825612559, [(1, 36), (2, 23)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 38, 21]]
** centroid: 5, normalized-entropy: 0.9392547207311595, [(2, 38), (3, 21)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 87, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23818040458901577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23818040458901577, 0.20005051323632966] ***
*** finished computation of 7 references, err: [Inf, 0.23818040458901577, 0.20005051323632966] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [87, 1, 0]]
** centroid: 1, normalized-entropy: 0.08970338978685011, [(1, 87), (2, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 64, 11]]
** centroid: 2, normalized-entropy: 0.6014353864290773, [(2, 64), (3, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [137, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [45, 63, 0]]
** centroid: 4, normalized-entropy: 0.9798687566511527, [(1, 45), (2, 63)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [83, 30, 0]]
** centroid: 5, normalized-entropy: 0.8349135582554505, [(1, 83), (2, 30)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [44, 39, 0]]
** centroid: 6, normalized-entropy: 0.9973806632063373, [(1, 44), (2, 39)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 47, 16]]
** centroid: 7, normalized-entropy: 0.8175072881213616, [(2, 47), (3, 16)]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9579819340298382, 0.9539869210527893, 0.9529829230428032, 0.9299868731006455, 0.9280088471705238, 0.9250148351944759, 0.9250058441675207, 0.9199918481355608, 0.9089748431065795, 0.9080427733122344, 0.898997800195405, 0.886994779210348, 0.8809797821773869, 0.8759597921274569, 0.8520286753819688]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 1) => 0.9579819340298382
finished with 16
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.31379559970805715] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31379559970805715, 0.25906821806263036] ***
*** starting iteration: 2; err: [Inf, 0.31379559970805715, 0.25906821806263036] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31379559970805715, 0.25906821806263036, 0.2400619699368379] ***
*** starting iteration: 3; err: [Inf, 0.31379559970805715, 0.25906821806263036, 0.2400619699368379] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31379559970805715, 0.25906821806263036, 0.2400619699368379, 0.23479137191481922] ***
*** starting iteration: 4; err: [Inf, 0.31379559970805715, 0.25906821806263036, 0.2400619699368379, 0.23479137191481922] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31379559970805715, 0.25906821806263036, 0.2400619699368379, 0.23479137191481922, 0.23322802768794001] ***
*** starting iteration: 5; err: [Inf, 0.31379559970805715, 0.25906821806263036, 0.2400619699368379, 0.23479137191481922, 0.23322802768794001] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31379559970805715, 0.25906821806263036, 0.2400619699368379, 0.23479137191481922, 0.23322802768794001, 0.23274811283326421] ***
*** finished computation of 3 references, err: [Inf, 0.31379559970805715, 0.25906821806263036, 0.2400619699368379, 0.23479137191481922, 0.23322802768794001, 0.23274811283326421] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [233, 4, 0]]
** centroid: 1, normalized-entropy: 0.12353071006092863, [(1, 233), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 167, 21]]
** centroid: 2, normalized-entropy: 0.5050288372014635, [(2, 167), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [170, 71, 0]]
** centroid: 3, normalized-entropy: 0.8745967859053072, [(1, 170), (2, 71)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.386745675077391] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.386745675077391, 0.234954001023846] ***
*** starting iteration: 2; err: [Inf, 0.386745675077391, 0.234954001023846] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.386745675077391, 0.234954001023846, 0.23409484785658935] ***
*** finished computation of 3 references, err: [Inf, 0.386745675077391, 0.234954001023846, 0.23409484785658935] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [69, 170, 27]]
** centroid: 1, normalized-entropy: 0.7904138963753065, [(1, 69), (2, 170), (3, 27)]
*** center 2: selecting labels [1] (freq >= 2) [from [200, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [127, 74, 0]]
** centroid: 3, normalized-entropy: 0.9492481873152105, [(1, 127), (2, 74)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3952133789932629] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3952133789932629, 0.23085865854389137] ***
*** starting iteration: 2; err: [Inf, 0.3952133789932629, 0.23085865854389137] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3952133789932629, 0.23085865854389137, 0.2299379561985801] ***
*** finished computation of 3 references, err: [Inf, 0.3952133789932629, 0.23085865854389137, 0.2299379561985801] ***
*** center 1: selecting labels [1] (freq >= 2) [from [241, 1, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [17, 207, 16]]
** centroid: 2, normalized-entropy: 0.4511544026129527, [(1, 17), (2, 207), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [126, 58, 0]]
** centroid: 3, normalized-entropy: 0.8991045208483789, [(1, 126), (2, 58)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 16)
[0.9579819340298382, 0.9539869210527893, 0.9529829230428032, 0.9299868731006455, 0.9280088471705238, 0.9250148351944759, 0.9250058441675207, 0.9199918481355608, 0.9159998321674969, 0.9089748431065795, 0.9080427733122344, 0.898997800195405, 0.886994779210348, 0.8809797821773869, 0.8759597921274569, 0.8520286753819688]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 1) => 0.9579819340298382
finished with 16
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.19066026563942431] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19066026563942431, 0.15233547258889302] ***
*** starting iteration: 2; err: [Inf, 0.19066026563942431, 0.15233547258889302] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19066026563942431, 0.15233547258889302, 0.1493101962034707] ***
*** starting iteration: 3; err: [Inf, 0.19066026563942431, 0.15233547258889302, 0.1493101962034707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19066026563942431, 0.15233547258889302, 0.1493101962034707, 0.148670938863419] ***
*** finished computation of 7 references, err: [Inf, 0.19066026563942431, 0.15233547258889302, 0.1493101962034707, 0.148670938863419] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [99, 96, 0]]
** centroid: 1, normalized-entropy: 0.9998292601233937, [(1, 99), (2, 96)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [115, 8, 0]]
** centroid: 2, normalized-entropy: 0.3471376284400274, [(1, 115), (2, 8)]
*** center 3: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 117, 32]]
** centroid: 4, normalized-entropy: 0.7504928681718371, [(2, 117), (3, 32)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [126, 17, 0]]
** centroid: 5, normalized-entropy: 0.526136101378073, [(1, 126), (2, 17)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 138, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [141, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19019938006810844] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19019938006810844, 0.15044115494564175] ***
*** starting iteration: 2; err: [Inf, 0.19019938006810844, 0.15044115494564175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19019938006810844, 0.15044115494564175, 0.14739339342340826] ***
*** starting iteration: 3; err: [Inf, 0.19019938006810844, 0.15044115494564175, 0.14739339342340826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19019938006810844, 0.15044115494564175, 0.14739339342340826, 0.14715570809133352] ***
*** finished computation of 7 references, err: [Inf, 0.19019938006810844, 0.15044115494564175, 0.14739339342340826, 0.14715570809133352] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [85, 7, 0]]
** centroid: 1, normalized-entropy: 0.3882389775123619, [(1, 85), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 51, 15]]
** centroid: 2, normalized-entropy: 0.7732266742876346, [(2, 51), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [42, 10, 0]]
** centroid: 3, normalized-entropy: 0.7062740891876008, [(1, 42), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [43, 50, 0]]
** centroid: 4, normalized-entropy: 0.9959094138937685, [(1, 43), (2, 50)]
*** center 5: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 85, 0]]
** centroid: 6, normalized-entropy: 0.21450983370697788, [(1, 3), (2, 85)]
*** center 7: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19933390319533645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19933390319533645, 0.14889058172423392] ***
*** starting iteration: 2; err: [Inf, 0.19933390319533645, 0.14889058172423392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19933390319533645, 0.14889058172423392, 0.14474912231229245] ***
*** starting iteration: 3; err: [Inf, 0.19933390319533645, 0.14889058172423392, 0.14474912231229245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19933390319533645, 0.14889058172423392, 0.14474912231229245, 0.14430139563791453] ***
*** finished computation of 7 references, err: [Inf, 0.19933390319533645, 0.14889058172423392, 0.14474912231229245, 0.14430139563791453] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [7, 73, 0]]
** centroid: 1, normalized-entropy: 0.4280696292293062, [(1, 7), (2, 73)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [36, 40, 0]]
** centroid: 2, normalized-entropy: 0.9980008838722993, [(1, 36), (2, 40)]
*** center 3: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 63, 14]]
** centroid: 4, normalized-entropy: 0.6840384356390419, [(2, 63), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 11, 0]]
** centroid: 5, normalized-entropy: 0.6442142137378306, [(1, 56), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [81, 6, 0]]
** centroid: 6, normalized-entropy: 0.36205125173399805, [(1, 81), (2, 6)]
*** center 7: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19933722706325352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19933722706325352, 0.14979883936978877] ***
*** starting iteration: 2; err: [Inf, 0.19933722706325352, 0.14979883936978877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19933722706325352, 0.14979883936978877, 0.1462051220862195] ***
*** starting iteration: 3; err: [Inf, 0.19933722706325352, 0.14979883936978877, 0.1462051220862195] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19933722706325352, 0.14979883936978877, 0.1462051220862195, 0.14568811238650234] ***
*** finished computation of 7 references, err: [Inf, 0.19933722706325352, 0.14979883936978877, 0.1462051220862195, 0.14568811238650234] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [46, 37, 0]]
** centroid: 1, normalized-entropy: 0.9915017866855546, [(1, 46), (2, 37)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [32, 22, 0]]
** centroid: 2, normalized-entropy: 0.975119064940866, [(1, 32), (2, 22)]
*** center 3: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 78, 12]]
** centroid: 4, normalized-entropy: 0.5665095065529052, [(2, 78), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [29, 41, 0]]
** centroid: 5, normalized-entropy: 0.9786961448300948, [(1, 29), (2, 41)]
*** center 6: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19065992183610797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19065992183610797, 0.1533583255005069] ***
*** starting iteration: 2; err: [Inf, 0.19065992183610797, 0.1533583255005069] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19065992183610797, 0.1533583255005069, 0.1511074863243848] ***
*** starting iteration: 3; err: [Inf, 0.19065992183610797, 0.1533583255005069, 0.1511074863243848] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19065992183610797, 0.1533583255005069, 0.1511074863243848, 0.15037369749695062] ***
*** finished computation of 7 references, err: [Inf, 0.19065992183610797, 0.1533583255005069, 0.1511074863243848, 0.15037369749695062] ***
*** center 1: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 58, 16]]
** centroid: 2, normalized-entropy: 0.7531979910695015, [(2, 58), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [31, 35, 0]]
** centroid: 3, normalized-entropy: 0.9973487979180449, [(1, 31), (2, 35)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [35, 27, 0]]
** centroid: 4, normalized-entropy: 0.9879565014919159, [(1, 35), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [27, 53, 0]]
** centroid: 5, normalized-entropy: 0.9224062617590724, [(1, 27), (2, 53)]
*** center 6: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1833053815998137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1833053815998137, 0.15239526253193617] ***
*** starting iteration: 2; err: [Inf, 0.1833053815998137, 0.15239526253193617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1833053815998137, 0.15239526253193617, 0.1487408887934871] ***
*** starting iteration: 3; err: [Inf, 0.1833053815998137, 0.15239526253193617, 0.1487408887934871] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1833053815998137, 0.15239526253193617, 0.1487408887934871, 0.14793635481223463] ***
*** finished computation of 7 references, err: [Inf, 0.1833053815998137, 0.15239526253193617, 0.1487408887934871, 0.14793635481223463] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 68, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [30, 32, 0]]
** centroid: 3, normalized-entropy: 0.9992492479956566, [(1, 30), (2, 32)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [79, 3, 0]]
** centroid: 4, normalized-entropy: 0.22641094842107634, [(1, 79), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [47, 35, 0]]
** centroid: 5, normalized-entropy: 0.9844961311800012, [(1, 47), (2, 35)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 58, 13]]
** centroid: 6, normalized-entropy: 0.6868088934028034, [(2, 58), (3, 13)]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1959169221073389] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1959169221073389, 0.15412385310605167] ***
*** starting iteration: 2; err: [Inf, 0.1959169221073389, 0.15412385310605167] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1959169221073389, 0.15412385310605167, 0.14825489121768623] ***
*** starting iteration: 3; err: [Inf, 0.1959169221073389, 0.15412385310605167, 0.14825489121768623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1959169221073389, 0.15412385310605167, 0.14825489121768623, 0.14739236262068153] ***
*** finished computation of 7 references, err: [Inf, 0.1959169221073389, 0.15412385310605167, 0.14825489121768623, 0.14739236262068153] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [6, 76, 0]]
** centroid: 1, normalized-entropy: 0.3776463213737003, [(1, 6), (2, 76)]
*** center 2: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [35, 39, 0]]
** centroid: 3, normalized-entropy: 0.9978913098356861, [(1, 35), (2, 39)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [43, 15, 0]]
** centroid: 4, normalized-entropy: 0.8246578332945033, [(1, 43), (2, 15)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 54, 19]]
** centroid: 5, normalized-entropy: 0.8271595195340525, [(2, 54), (3, 19)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [78, 3, 0]]
** centroid: 6, normalized-entropy: 0.22853814395352806, [(1, 78), (2, 3)]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19057387361116707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19057387361116707, 0.14659026597999036] ***
*** starting iteration: 2; err: [Inf, 0.19057387361116707, 0.14659026597999036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19057387361116707, 0.14659026597999036, 0.14259023769712076] ***
*** starting iteration: 3; err: [Inf, 0.19057387361116707, 0.14659026597999036, 0.14259023769712076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19057387361116707, 0.14659026597999036, 0.14259023769712076, 0.14219771311432122] ***
*** finished computation of 7 references, err: [Inf, 0.19057387361116707, 0.14659026597999036, 0.14259023769712076, 0.14219771311432122] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 46, 16]]
** centroid: 1, normalized-entropy: 0.8238116333123173, [(2, 46), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [69, 1, 0]]
** centroid: 3, normalized-entropy: 0.10802319526362848, [(1, 69), (2, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [75, 4, 0]]
** centroid: 5, normalized-entropy: 0.2890794597316462, [(1, 75), (2, 4)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 64, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [13, 75, 0]]
** centroid: 7, normalized-entropy: 0.6041234581483739, [(1, 13), (2, 75)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19290004505589603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19290004505589603, 0.153320683600381] ***
*** starting iteration: 2; err: [Inf, 0.19290004505589603, 0.153320683600381] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19290004505589603, 0.153320683600381, 0.14938190144207328] ***
*** starting iteration: 3; err: [Inf, 0.19290004505589603, 0.153320683600381, 0.14938190144207328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19290004505589603, 0.153320683600381, 0.14938190144207328, 0.14803209704020992] ***
*** finished computation of 7 references, err: [Inf, 0.19290004505589603, 0.153320683600381, 0.14938190144207328, 0.14803209704020992] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [87, 4, 0]]
** centroid: 1, normalized-entropy: 0.26014536394771426, [(1, 87), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 42, 19]]
** centroid: 2, normalized-entropy: 0.8948692308065576, [(2, 42), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [73, 1, 0]]
** centroid: 3, normalized-entropy: 0.10327508457163559, [(1, 73), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [50, 4, 0]]
** centroid: 4, normalized-entropy: 0.38094658570539014, [(1, 50), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [4, 63, 0]]
** centroid: 5, normalized-entropy: 0.32625881462949274, [(1, 4), (2, 63)]
*** center 6: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 82, 0]]
** centroid: 7, normalized-entropy: 0.09408443883267342, [(1, 1), (2, 82)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.187526312074624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.187526312074624, 0.1527619171217084] ***
*** starting iteration: 2; err: [Inf, 0.187526312074624, 0.1527619171217084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.187526312074624, 0.1527619171217084, 0.15025552594475447] ***
*** starting iteration: 3; err: [Inf, 0.187526312074624, 0.1527619171217084, 0.15025552594475447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.187526312074624, 0.1527619171217084, 0.15025552594475447, 0.14955287315230817] ***
*** finished computation of 7 references, err: [Inf, 0.187526312074624, 0.1527619171217084, 0.15025552594475447, 0.14955287315230817] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [54, 48, 0]]
** centroid: 1, normalized-entropy: 0.9975025463691153, [(1, 54), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [33, 2, 0]]
** centroid: 2, normalized-entropy: 0.3159971329784246, [(1, 33), (2, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 68, 14]]
** centroid: 4, normalized-entropy: 0.6593758812786991, [(2, 68), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [95, 1, 0]]
** centroid: 5, normalized-entropy: 0.08354288831032243, [(1, 95), (2, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 69, 0]]
** centroid: 6, normalized-entropy: 0.10802319526362848, [(1, 1), (2, 69)]
*** center 7: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20278525151405483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20278525151405483, 0.15331625072471797] ***
*** starting iteration: 2; err: [Inf, 0.20278525151405483, 0.15331625072471797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20278525151405483, 0.15331625072471797, 0.14912074256688357] ***
*** starting iteration: 3; err: [Inf, 0.20278525151405483, 0.15331625072471797, 0.14912074256688357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20278525151405483, 0.15331625072471797, 0.14912074256688357, 0.14868850296363234] ***
*** finished computation of 7 references, err: [Inf, 0.20278525151405483, 0.15331625072471797, 0.14912074256688357, 0.14868850296363234] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 88, 20]]
** centroid: 1, normalized-entropy: 0.6912898694057888, [(2, 88), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [35, 5, 0]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(1, 35), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 14, 0]]
** centroid: 4, normalized-entropy: 0.6690158350565576, [(1, 66), (2, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 18, 0]]
** centroid: 5, normalized-entropy: 0.8337649072106652, [(1, 50), (2, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 61, 0]]
** centroid: 6, normalized-entropy: 0.2729708579140699, [(1, 3), (2, 61)]
*** center 7: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19454546363279224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19454546363279224, 0.15268081442266704] ***
*** starting iteration: 2; err: [Inf, 0.19454546363279224, 0.15268081442266704] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19454546363279224, 0.15268081442266704, 0.14875764553807677] ***
*** starting iteration: 3; err: [Inf, 0.19454546363279224, 0.15268081442266704, 0.14875764553807677] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19454546363279224, 0.15268081442266704, 0.14875764553807677, 0.14760417099203915] ***
*** finished computation of 7 references, err: [Inf, 0.19454546363279224, 0.15268081442266704, 0.14875764553807677, 0.14760417099203915] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [35, 48, 0]]
** centroid: 1, normalized-entropy: 0.9822309298084991, [(1, 35), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 12, 0]]
** centroid: 2, normalized-entropy: 0.6609623351442084, [(1, 58), (2, 12)]
*** center 3: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 71, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 11, 0]]
** centroid: 5, normalized-entropy: 0.6220403090607189, [(1, 60), (2, 11)]
*** center 6: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 47, 23]]
** centroid: 7, normalized-entropy: 0.9134601452569628, [(2, 47), (3, 23)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19392196262255312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19392196262255312, 0.1522663138071075] ***
*** starting iteration: 2; err: [Inf, 0.19392196262255312, 0.1522663138071075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19392196262255312, 0.1522663138071075, 0.14719361949712037] ***
*** starting iteration: 3; err: [Inf, 0.19392196262255312, 0.1522663138071075, 0.14719361949712037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19392196262255312, 0.1522663138071075, 0.14719361949712037, 0.1463385185804218] ***
*** finished computation of 7 references, err: [Inf, 0.19392196262255312, 0.1522663138071075, 0.14719361949712037, 0.1463385185804218] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [77, 4, 0]]
** centroid: 1, normalized-entropy: 0.2837689703721877, [(1, 77), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 41, 16]]
** centroid: 2, normalized-entropy: 0.8564052389131375, [(2, 41), (3, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [72, 3, 0]]
** centroid: 4, normalized-entropy: 0.24229218908241482, [(1, 72), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [14, 70, 0]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(1, 14), (2, 70)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 66, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19155592437833546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19155592437833546, 0.15200143220927567] ***
*** starting iteration: 2; err: [Inf, 0.19155592437833546, 0.15200143220927567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19155592437833546, 0.15200143220927567, 0.15005275008454919] ***
*** starting iteration: 3; err: [Inf, 0.19155592437833546, 0.15200143220927567, 0.15005275008454919] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19155592437833546, 0.15200143220927567, 0.15005275008454919, 0.1493283301498741] ***
*** finished computation of 7 references, err: [Inf, 0.19155592437833546, 0.15200143220927567, 0.15005275008454919, 0.1493283301498741] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [54, 10, 0]]
** centroid: 1, normalized-entropy: 0.625262405223423, [(1, 54), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [41, 27, 0]]
** centroid: 2, normalized-entropy: 0.9692040949598235, [(1, 41), (2, 27)]
*** center 3: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 59, 12]]
** centroid: 4, normalized-entropy: 0.6554444445609846, [(2, 59), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [87, 22, 0]]
** centroid: 5, normalized-entropy: 0.725582675704817, [(1, 87), (2, 22)]
*** center 6: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 82, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19225227336212994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19225227336212994, 0.15490853850916028] ***
*** starting iteration: 2; err: [Inf, 0.19225227336212994, 0.15490853850916028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19225227336212994, 0.15490853850916028, 0.150008754350245] ***
*** starting iteration: 3; err: [Inf, 0.19225227336212994, 0.15490853850916028, 0.150008754350245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19225227336212994, 0.15490853850916028, 0.150008754350245, 0.14912215073022525] ***
*** finished computation of 7 references, err: [Inf, 0.19225227336212994, 0.15490853850916028, 0.150008754350245, 0.14912215073022525] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [57, 34, 0]]
** centroid: 1, normalized-entropy: 0.9534158774525225, [(1, 57), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [62, 1, 0]]
** centroid: 2, normalized-entropy: 0.11759466565886466, [(1, 62), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 55, 14]]
** centroid: 4, normalized-entropy: 0.7276874545656657, [(2, 55), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [54, 16, 0]]
** centroid: 5, normalized-entropy: 0.775512658133148, [(1, 54), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [69, 1, 0]]
** centroid: 6, normalized-entropy: 0.10802319526362848, [(1, 69), (2, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 65, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2053771923817694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2053771923817694, 0.15410924053005876] ***
*** starting iteration: 2; err: [Inf, 0.2053771923817694, 0.15410924053005876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2053771923817694, 0.15410924053005876, 0.14916296268440782] ***
*** starting iteration: 3; err: [Inf, 0.2053771923817694, 0.15410924053005876, 0.14916296268440782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2053771923817694, 0.15410924053005876, 0.14916296268440782, 0.14744941250700502] ***
*** finished computation of 7 references, err: [Inf, 0.2053771923817694, 0.15410924053005876, 0.14916296268440782, 0.14744941250700502] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 64, 21]]
** centroid: 1, normalized-entropy: 0.806583102274714, [(2, 64), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [53, 28, 0]]
** centroid: 4, normalized-entropy: 0.9301497323974339, [(1, 53), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 20, 0]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(1, 50), (2, 20)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 66, 0]]
** centroid: 6, normalized-entropy: 0.1914332548141934, [(1, 2), (2, 66)]
*** center 7: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20346798506565392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20346798506565392, 0.1549845359483734] ***
*** starting iteration: 2; err: [Inf, 0.20346798506565392, 0.1549845359483734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20346798506565392, 0.1549845359483734, 0.15020379398018122] ***
*** starting iteration: 3; err: [Inf, 0.20346798506565392, 0.1549845359483734, 0.15020379398018122] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20346798506565392, 0.1549845359483734, 0.15020379398018122, 0.14962463822355493] ***
*** finished computation of 7 references, err: [Inf, 0.20346798506565392, 0.1549845359483734, 0.15020379398018122, 0.14962463822355493] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [26, 47, 0]]
** centroid: 1, normalized-entropy: 0.9394532068181357, [(1, 26), (2, 47)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [46, 6, 0]]
** centroid: 2, normalized-entropy: 0.5159469300074472, [(1, 46), (2, 6)]
*** center 3: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 59, 13]]
** centroid: 4, normalized-entropy: 0.6812908868842175, [(2, 59), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [53, 16, 0]]
** centroid: 5, normalized-entropy: 0.7812812090702043, [(1, 53), (2, 16)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 66, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [74, 2, 0]]
** centroid: 7, normalized-entropy: 0.17556502585750275, [(1, 74), (2, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17917504207231105] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17917504207231105, 0.15057628503255546] ***
*** starting iteration: 2; err: [Inf, 0.17917504207231105, 0.15057628503255546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17917504207231105, 0.15057628503255546, 0.14666039364458994] ***
*** starting iteration: 3; err: [Inf, 0.17917504207231105, 0.15057628503255546, 0.14666039364458994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17917504207231105, 0.15057628503255546, 0.14666039364458994, 0.1455077509190887] ***
*** finished computation of 7 references, err: [Inf, 0.17917504207231105, 0.15057628503255546, 0.14666039364458994, 0.1455077509190887] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [81, 4, 0]]
** centroid: 1, normalized-entropy: 0.2737691686829417, [(1, 81), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [42, 15, 0]]
** centroid: 2, normalized-entropy: 0.8314743880097292, [(1, 42), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 38, 17]]
** centroid: 3, normalized-entropy: 0.8921212805771683, [(2, 38), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [19, 50, 0]]
** centroid: 5, normalized-entropy: 0.849054424254048, [(1, 19), (2, 50)]
*** center 6: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 76, 0]]
** centroid: 7, normalized-entropy: 0.1000009430103234, [(1, 1), (2, 76)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18855522087961435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18855522087961435, 0.15058036583289505] ***
*** starting iteration: 2; err: [Inf, 0.18855522087961435, 0.15058036583289505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18855522087961435, 0.15058036583289505, 0.1478929183539003] ***
*** starting iteration: 3; err: [Inf, 0.18855522087961435, 0.15058036583289505, 0.1478929183539003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18855522087961435, 0.15058036583289505, 0.1478929183539003, 0.1471335648400709] ***
*** finished computation of 7 references, err: [Inf, 0.18855522087961435, 0.15058036583289505, 0.1478929183539003, 0.1471335648400709] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [3, 72, 0]]
** centroid: 1, normalized-entropy: 0.24229218908241482, [(1, 3), (2, 72)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [28, 43, 0]]
** centroid: 2, normalized-entropy: 0.9675594819018211, [(1, 28), (2, 43)]
*** center 3: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 65, 18]]
** centroid: 4, normalized-entropy: 0.7544062039636575, [(2, 65), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [44, 9, 0]]
** centroid: 5, normalized-entropy: 0.6572729784684466, [(1, 44), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [97, 12, 0]]
** centroid: 6, normalized-entropy: 0.5001926210998139, [(1, 97), (2, 12)]
*** center 7: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1877349258721806] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1877349258721806, 0.15186548491474242] ***
*** starting iteration: 2; err: [Inf, 0.1877349258721806, 0.15186548491474242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1877349258721806, 0.15186548491474242, 0.14823496393673122] ***
*** starting iteration: 3; err: [Inf, 0.1877349258721806, 0.15186548491474242, 0.14823496393673122] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1877349258721806, 0.15186548491474242, 0.14823496393673122, 0.14717048040032388] ***
*** finished computation of 7 references, err: [Inf, 0.1877349258721806, 0.15186548491474242, 0.14823496393673122, 0.14717048040032388] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [46, 51, 0]]
** centroid: 1, normalized-entropy: 0.998082507968892, [(1, 46), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [41, 19, 0]]
** centroid: 2, normalized-entropy: 0.9007196798623592, [(1, 41), (2, 19)]
*** center 3: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 55, 17]]
** centroid: 4, normalized-entropy: 0.7885131605379784, [(2, 55), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [11, 62, 0]]
** centroid: 5, normalized-entropy: 0.6115516951951333, [(1, 11), (2, 62)]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18370299405790866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18370299405790866, 0.15318944032117723] ***
*** starting iteration: 2; err: [Inf, 0.18370299405790866, 0.15318944032117723] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18370299405790866, 0.15318944032117723, 0.15001158795133232] ***
*** starting iteration: 3; err: [Inf, 0.18370299405790866, 0.15318944032117723, 0.15001158795133232] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18370299405790866, 0.15318944032117723, 0.15001158795133232, 0.14937671793997287] ***
*** finished computation of 7 references, err: [Inf, 0.18370299405790866, 0.15318944032117723, 0.15001158795133232, 0.14937671793997287] ***
*** center 1: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [34, 17, 0]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(1, 34), (2, 17)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 44, 21]]
** centroid: 3, normalized-entropy: 0.9076961653608385, [(2, 44), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [16, 69, 0]]
** centroid: 5, normalized-entropy: 0.6977652006354232, [(1, 16), (2, 69)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 60, 0]]
** centroid: 6, normalized-entropy: 0.2055925081850832, [(1, 2), (2, 60)]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17981118273548782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17981118273548782, 0.15438557338621467] ***
*** starting iteration: 2; err: [Inf, 0.17981118273548782, 0.15438557338621467] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17981118273548782, 0.15438557338621467, 0.15004530691355467] ***
*** starting iteration: 3; err: [Inf, 0.17981118273548782, 0.15438557338621467, 0.15004530691355467] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17981118273548782, 0.15438557338621467, 0.15004530691355467, 0.14914250529557466] ***
*** finished computation of 7 references, err: [Inf, 0.17981118273548782, 0.15438557338621467, 0.15004530691355467, 0.14914250529557466] ***
*** center 1: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [38, 18, 0]]
** centroid: 2, normalized-entropy: 0.9059282160429994, [(1, 38), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 33, 16]]
** centroid: 3, normalized-entropy: 0.9113423759758414, [(2, 33), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 64, 0]]
** centroid: 6, normalized-entropy: 0.11467550533614682, [(1, 1), (2, 64)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [7, 59, 0]]
** centroid: 7, normalized-entropy: 0.48791799258948565, [(1, 7), (2, 59)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18898805737309157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18898805737309157, 0.15757656994834543] ***
*** starting iteration: 2; err: [Inf, 0.18898805737309157, 0.15757656994834543] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18898805737309157, 0.15757656994834543, 0.15188066533580422] ***
*** starting iteration: 3; err: [Inf, 0.18898805737309157, 0.15757656994834543, 0.15188066533580422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18898805737309157, 0.15757656994834543, 0.15188066533580422, 0.1493280860837549] ***
*** finished computation of 7 references, err: [Inf, 0.18898805737309157, 0.15757656994834543, 0.15188066533580422, 0.1493280860837549] ***
*** center 1: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 56, 13]]
** centroid: 2, normalized-entropy: 0.698124573139618, [(2, 56), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [64, 6, 0]]
** centroid: 3, normalized-entropy: 0.4220005168831531, [(1, 64), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [43, 30, 0]]
** centroid: 4, normalized-entropy: 0.9770012394218561, [(1, 43), (2, 30)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 20, 0]]
** centroid: 5, normalized-entropy: 0.7918583525674836, [(1, 64), (2, 20)]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19468037168867885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19468037168867885, 0.15153179180948065] ***
*** starting iteration: 2; err: [Inf, 0.19468037168867885, 0.15153179180948065] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19468037168867885, 0.15153179180948065, 0.14865596775989978] ***
*** starting iteration: 3; err: [Inf, 0.19468037168867885, 0.15153179180948065, 0.14865596775989978] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19468037168867885, 0.15153179180948065, 0.14865596775989978, 0.14824543662555517] ***
*** finished computation of 7 references, err: [Inf, 0.19468037168867885, 0.15153179180948065, 0.14865596775989978, 0.14824543662555517] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [77, 3, 0]]
** centroid: 1, normalized-entropy: 0.2307099556914763, [(1, 77), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [60, 3, 0]]
** centroid: 2, normalized-entropy: 0.2761954276479391, [(1, 60), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 35, 16]]
** centroid: 3, normalized-entropy: 0.8974271930876951, [(2, 35), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [32, 65, 0]]
** centroid: 5, normalized-entropy: 0.9148210087144519, [(1, 32), (2, 65)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 69, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [44, 3, 0]]
** centroid: 7, normalized-entropy: 0.3424637724817958, [(1, 44), (2, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19751825761049985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19751825761049985, 0.1502131142085418] ***
*** starting iteration: 2; err: [Inf, 0.19751825761049985, 0.1502131142085418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19751825761049985, 0.1502131142085418, 0.1467544141774997] ***
*** starting iteration: 3; err: [Inf, 0.19751825761049985, 0.1502131142085418, 0.1467544141774997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19751825761049985, 0.1502131142085418, 0.1467544141774997, 0.14593560918793083] ***
*** finished computation of 7 references, err: [Inf, 0.19751825761049985, 0.1502131142085418, 0.1467544141774997, 0.14593560918793083] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [46, 28, 0]]
** centroid: 1, normalized-entropy: 0.9568886656798214, [(1, 46), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [38, 25, 0]]
** centroid: 2, normalized-entropy: 0.9690632527820694, [(1, 38), (2, 25)]
*** center 3: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 85, 15]]
** centroid: 4, normalized-entropy: 0.6098403047164005, [(2, 85), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [24, 43, 0]]
** centroid: 5, normalized-entropy: 0.9411864371816836, [(1, 24), (2, 43)]
*** center 6: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18452072650194168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18452072650194168, 0.1529719824763015] ***
*** starting iteration: 2; err: [Inf, 0.18452072650194168, 0.1529719824763015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18452072650194168, 0.1529719824763015, 0.1493673762595281] ***
*** starting iteration: 3; err: [Inf, 0.18452072650194168, 0.1529719824763015, 0.1493673762595281] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18452072650194168, 0.1529719824763015, 0.1493673762595281, 0.14813660046830773] ***
*** finished computation of 7 references, err: [Inf, 0.18452072650194168, 0.1529719824763015, 0.1493673762595281, 0.14813660046830773] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [95, 3, 0]]
** centroid: 1, normalized-entropy: 0.19745300438456026, [(1, 95), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 7, 0]]
** centroid: 2, normalized-entropy: 0.5373760853377334, [(1, 50), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 49, 20]]
** centroid: 3, normalized-entropy: 0.868533960265235, [(2, 49), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [12, 64, 0]]
** centroid: 5, normalized-entropy: 0.6292492238560344, [(1, 12), (2, 64)]
*** center 6: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [4, 59, 0]]
** centroid: 7, normalized-entropy: 0.3411538931451763, [(1, 4), (2, 59)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1828448178526014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1828448178526014, 0.15377309236675502] ***
*** starting iteration: 2; err: [Inf, 0.1828448178526014, 0.15377309236675502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1828448178526014, 0.15377309236675502, 0.1499724015807733] ***
*** starting iteration: 3; err: [Inf, 0.1828448178526014, 0.15377309236675502, 0.1499724015807733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1828448178526014, 0.15377309236675502, 0.1499724015807733, 0.14878426385764032] ***
*** finished computation of 7 references, err: [Inf, 0.1828448178526014, 0.15377309236675502, 0.1499724015807733, 0.14878426385764032] ***
*** center 1: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [43, 13, 0]]
** centroid: 2, normalized-entropy: 0.7817281222714539, [(1, 43), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 37, 19]]
** centroid: 3, normalized-entropy: 0.9241335419915458, [(2, 37), (3, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [14, 69, 0]]
** centroid: 5, normalized-entropy: 0.6546640527143932, [(1, 14), (2, 69)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [5, 60, 0]]
** centroid: 6, normalized-entropy: 0.3912435636292556, [(1, 5), (2, 60)]
*** center 7: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18640447067201604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18640447067201604, 0.15381386451236903] ***
*** starting iteration: 2; err: [Inf, 0.18640447067201604, 0.15381386451236903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18640447067201604, 0.15381386451236903, 0.14806628323346377] ***
*** starting iteration: 3; err: [Inf, 0.18640447067201604, 0.15381386451236903, 0.14806628323346377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18640447067201604, 0.15381386451236903, 0.14806628323346377, 0.14722299436759204] ***
*** finished computation of 7 references, err: [Inf, 0.18640447067201604, 0.15381386451236903, 0.14806628323346377, 0.14722299436759204] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [79, 3, 0]]
** centroid: 1, normalized-entropy: 0.22641094842107634, [(1, 79), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 37, 17]]
** centroid: 2, normalized-entropy: 0.8986533756907481, [(2, 37), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [79, 2, 0]]
** centroid: 3, normalized-entropy: 0.16702680404522793, [(1, 79), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [74, 1, 0]]
** centroid: 4, normalized-entropy: 0.10215803640865054, [(1, 74), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [2, 80, 0]]
** centroid: 5, normalized-entropy: 0.16542703399626665, [(1, 2), (2, 80)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 63, 0]]
** centroid: 6, normalized-entropy: 0.19823496409776642, [(1, 2), (2, 63)]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18934704319620504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18934704319620504, 0.15166669788677245] ***
*** starting iteration: 2; err: [Inf, 0.18934704319620504, 0.15166669788677245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18934704319620504, 0.15166669788677245, 0.14819523494597525] ***
*** starting iteration: 3; err: [Inf, 0.18934704319620504, 0.15166669788677245, 0.14819523494597525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18934704319620504, 0.15166669788677245, 0.14819523494597525, 0.1470142266722396] ***
*** finished computation of 7 references, err: [Inf, 0.18934704319620504, 0.15166669788677245, 0.14819523494597525, 0.1470142266722396] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [1, 78, 0]]
** centroid: 1, normalized-entropy: 0.09794058271817412, [(1, 1), (2, 78)]
*** center 2: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [49, 25, 0]]
** centroid: 3, normalized-entropy: 0.9227346209530939, [(1, 49), (2, 25)]
*** center 4: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 58, 18]]
** centroid: 5, normalized-entropy: 0.7897492536625221, [(2, 58), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [82, 24, 0]]
** centroid: 6, normalized-entropy: 0.7717094696953635, [(1, 82), (2, 24)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [45, 6, 0]]
** centroid: 7, normalized-entropy: 0.5225593745369407, [(1, 45), (2, 6)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20390593467280269] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20390593467280269, 0.15286894502863288] ***
*** starting iteration: 2; err: [Inf, 0.20390593467280269, 0.15286894502863288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20390593467280269, 0.15286894502863288, 0.14846228366252034] ***
*** starting iteration: 3; err: [Inf, 0.20390593467280269, 0.15286894502863288, 0.14846228366252034] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20390593467280269, 0.15286894502863288, 0.14846228366252034, 0.14796025807689875] ***
*** finished computation of 7 references, err: [Inf, 0.20390593467280269, 0.15286894502863288, 0.14846228366252034, 0.14796025807689875] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [93, 3, 0]]
** centroid: 1, normalized-entropy: 0.2006223243127146, [(1, 93), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [46, 26, 0]]
** centroid: 2, normalized-entropy: 0.943601631299382, [(1, 46), (2, 26)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 52, 16]]
** centroid: 3, normalized-entropy: 0.787126586201269, [(2, 52), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [21, 44, 0]]
** centroid: 5, normalized-entropy: 0.9076961653608385, [(1, 21), (2, 44)]
*** center 6: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 61, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21236565912142397] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21236565912142397, 0.153739904246293] ***
*** starting iteration: 2; err: [Inf, 0.21236565912142397, 0.153739904246293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21236565912142397, 0.153739904246293, 0.1477506561623886] ***
*** starting iteration: 3; err: [Inf, 0.21236565912142397, 0.153739904246293, 0.1477506561623886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21236565912142397, 0.153739904246293, 0.1477506561623886, 0.14721446018153803] ***
*** finished computation of 7 references, err: [Inf, 0.21236565912142397, 0.153739904246293, 0.1477506561623886, 0.14721446018153803] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [41, 33, 0]]
** centroid: 1, normalized-entropy: 0.9915528503834039, [(1, 41), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [69, 2, 0]]
** centroid: 2, normalized-entropy: 0.18512476010054582, [(1, 69), (2, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 58, 16]]
** centroid: 4, normalized-entropy: 0.7531979910695015, [(2, 58), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 39, 0]]
** centroid: 5, normalized-entropy: 0.9998783322990061, [(1, 38), (2, 39)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 63, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 376,3 => 32,1 => 592), Dict(2 => 378,3 => 33,1 => 589))
[ Info: ===== scores for single classifier: {"micro_f1":0.923,"precision":0.923,"recall":0.923,"macro_recall":0.9523165739917295,"macro_f1":0.904341280004861,"accuracy":0.923,"class_f1":{"2":0.9045848822800495,"3":0.868421052631579,"1":0.9400179051029544},"class_precision":{"2":0.8508158508158508,"3":0.7674418604651163,"1":0.9943181818181818},"class_recall":{"2":0.9656084656084656,"3":1.0,"1":0.8913412563667232}}
[ Info: ===== scores for 1: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9824291912577142,"macro_f1":0.9799853408013596,"accuracy":0.979,"class_f1":{"2":0.97165991902834,"3":0.9850746268656716,"1":0.983221476510067},"class_precision":{"2":0.9917355371900827,"3":0.9705882352941176,"1":0.9718076285240465},"class_recall":{"2":0.9523809523809523,"3":1.0,"1":0.9949066213921901}}
[ Info: ===== scores for 5: {"micro_f1":0.957,"precision":0.957,"recall":0.957,"macro_recall":0.9712423232513782,"macro_f1":0.9643861078399977,"accuracy":0.957,"class_f1":{"2":0.9442282749675744,"3":0.9850746268656716,"1":0.9638554216867469},"class_precision":{"2":0.926208651399491,"3":0.9705882352941176,"1":0.9773123909249564},"class_recall":{"2":0.9629629629629629,"3":1.0,"1":0.9507640067911715}}
[ Info: ===== scores for 7: {"micro_f1":0.958,"precision":0.958,"recall":0.958,"macro_recall":0.97244006072529,"macro_f1":0.9605941183558615,"accuracy":0.958,"class_f1":{"2":0.9457364341085271,"3":0.9705882352941176,"1":0.9654576856649395},"class_precision":{"2":0.9242424242424242,"3":0.9428571428571428,"1":0.9824253075571178},"class_recall":{"2":0.9682539682539683,"3":1.0,"1":0.9490662139219015}}
[ Info: ===== scores for 9: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9779152181529093,"macro_f1":0.9708698011595502,"accuracy":0.966,"class_f1":{"2":0.9559585492227979,"3":0.9850746268656716,"1":0.971576227390181},"class_precision":{"2":0.9365482233502538,"3":0.9705882352941176,"1":0.986013986013986},"class_recall":{"2":0.9761904761904762,"3":1.0,"1":0.9575551782682513}}
[ Info: ===== scores for 11: {"micro_f1":0.964,"precision":0.964,"recall":0.964,"macro_recall":0.9767833562400625,"macro_f1":0.96490521340078,"accuracy":0.964,"class_f1":{"2":0.9534883720930233,"3":0.9705882352941176,"1":0.9706390328151986},"class_precision":{"2":0.9318181818181818,"3":0.9428571428571428,"1":0.9876977152899824},"class_recall":{"2":0.9761904761904762,"3":1.0,"1":0.9541595925297114}}
(score = 0.975, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.959, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.959, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.963, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.959, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.959, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.957, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.957, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.979,"k":1,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9824291912577142,"macro_f1":0.9799853408013596,"accuracy":0.979,"class_f1":{"2":0.97165991902834,"3":0.9850746268656716,"1":0.983221476510067},"class_precision":{"2":0.9917355371900827,"3":0.9705882352941176,"1":0.9718076285240465},"class_recall":{"2":0.9523809523809523,"3":1.0,"1":0.9949066213921901}}
Test Summary: | Pass  Total
AKNC          |    8      8
[550, 1, 4, 2, 3, 5, 4, 2, 1, 3, 5, 4, 1, 9, 3, 3, 11, 5, 5, 7, 8, 4, 23, 3, 11, 1, 1, 4, 4, 9, 9, 12, 12, 12, 1, 50, 7, 3, 10, 4, 12, 7, 14, 28, 7, 2, 6, 4, 5, 5, 3, 6, 36, 21, 3, 20, 7, 10, 2, 57, 8, 39, 10, 20, 2, 5, 1, 11, 14, 28, 6, 10, 13, 85, 11, 53, 3, 19, 17, 43, 4, 64, 8, 75, 36, 1, 37, 5, 7, 11, 8, 22, 36, 8, 25, 23, 30, 4, 32, 6, 3, 18, 1, 18, 26, 19, 5, 4, 15, 5, 11, 4, 12, 46, 12, 39, 22, 48, 9, 7, 6, 1, 6, 14, 17, 7, 124, 6, 22, 9, 14, 37, 11, 9, 15, 148, 3, 5, 8, 5, 6, 4, 17, 18, 13, 9, 12, 118, 5, 15, 65, 3, 375, 172, 65, 31, 24, 34, 16, 72, 10, 46, 8, 7, 3, 32, 5, 14, 10, 1, 103, 16, 143, 60, 9, 3, 93, 7, 35, 8, 7, 38, 6, 71, 43, 3, 5, 18, 12, 11, 8, 23, 8, 43, 24, 1, 27, 7, 5, 5, 5, 9, 40, 109, 104, 38, 250, 33, 12, 9, 3, 879, 5, 25, 10, 10, 6, 5, 22, 121, 10, 8, 2, 297, 22, 31, 57, 34, 15, 48, 11, 40, 21, 8, 12, 153, 22, 44, 44, 2, 138, 93, 7, 6, 21, 98, 62, 51, 22, 6, 145, 36, 106, 17, 8, 39, 32, 4, 6, 115, 101, 57, 16, 15, 41, 34, 2, 6, 41, 34, 26, 264, 34, 7, 11, 90, 35, 10, 12, 54, 7, 42, 13, 3, 7, 159, 19, 27, 54, 60, 31, 17, 87, 8, 9, 4, 36, 94, 52, 39]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6719999999999999, speedup = 0.32801594790577476, eval_ratio = 0.073517)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":null,"recall":0.3654513888888889,"f1":null,"seconds":0.0001828353852033615,"exhaustive_search_seconds":0.0003677587956190109,"evaluations":485.015625,"distances_sum":1699.4504731708055}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5618055555555554,"recall":0.5590277777777777,"f1":null,"seconds":0.00047856196761131287,"exhaustive_search_seconds":0.0003677587956190109,"evaluations":652.4765625,"distances_sum":1660.4620393153812}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6631944444444444,"recall":0.6631944444444444,"f1":0.6631944444444444,"seconds":0.0004224814474582672,"exhaustive_search_seconds":0.0003677587956190109,"evaluations":783.2578125,"distances_sum":1619.621360981404}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.745659722222222,"recall":0.745659722222222,"f1":0.745659722222222,"seconds":0.0004779808223247528,"exhaustive_search_seconds":0.0003677587956190109,"evaluations":906.5,"distances_sum":1582.6972063905848}
KCenters.DeloneInvIndex> reached performance {"precision":0.8038194444444443,"recall":0.8038194444444443,"f1":0.8038194444444443,"seconds":0.0005270726978778839,"exhaustive_search_seconds":0.0003677587956190109,"evaluations":1005.203125,"distances_sum":1565.5884990148063}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7959999999999999, speedup = 0.7210895159783218, eval_ratio = 0.09792200000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
