Julia Version 1.6.0-DEV.180
Commit d825de85f8 (2020-06-05 17:56 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed MappedArrays ──────────────── v0.2.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Missings ──────────────────── v0.4.3
  Installed Reexport ──────────────────── v0.2.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.5
  Installed StatsBase ─────────────────── v0.32.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed OrderedCollections ────────── v1.2.0
  Installed JSON ──────────────────────── v0.21.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Tables ────────────────────── v1.0.4
  Installed DataStructures ────────────── v0.17.17
  Installed MLDataUtils ───────────────── v0.5.1
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed InvertedIndices ───────────── v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Compat ────────────────────── v3.10.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataPattern ─────────────── v0.5.3
  Installed DataFrames ────────────────── v0.20.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.5
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_u6SPjx/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_u6SPjx/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.5
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9360659371813138
[ Info: 0.8302954188982645
[ Info: 0.5533601232866446
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33106788565715156
mean(cdnet.distances) = 0.3949623671670755
mean(crand.distances) = 0.33518966225286323
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4501953125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4501953125,"f1":null,"seconds":3.883615136146545e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.0625,"distances_sum":1150.4227222539416}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7930151445776454,"seconds":5.101785063743591e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.9609375,"distances_sum":1979.1464319121521}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6728515625,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6728515625,"f1":0.7930151445776454,"seconds":5.101785063743591e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.9609375,"distances_sum":1979.1464319121521}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9507497710622714,"seconds":6.210058927536011e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.84375,"distances_sum":2976.589581124476}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9299278846153852,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.75,"distances_sum":2772.6429840178544}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8633564352314361,"seconds":5.189329385757446e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.125,"distances_sum":2322.2601217356946}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7954233266733275,"seconds":5.07943332195282e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.046875,"distances_sum":1960.370297895395}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8429664085914095,"seconds":4.9620866775512695e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.0078125,"distances_sum":2195.21327865025}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9507497710622714,"seconds":6.210058927536011e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.84375,"distances_sum":2976.589581124476}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9560668498168501,"seconds":6.3534826040267944e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.921875,"distances_sum":2946.5412410531526}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.955288461538462,"seconds":6.563961505889893e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.859375,"distances_sum":2991.7136810367506}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.955288461538462,"seconds":6.563961505889893e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.859375,"distances_sum":2991.7136810367506}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9228515625,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.955288461538462,"seconds":6.563961505889893e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.859375,"distances_sum":2991.7136810367506}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1982421875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1982421875,"f1":null,"seconds":3.7103891372680664e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":5.8125,"distances_sum":488.483762663217}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8688873626373635,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.125,"distances_sum":2156.0072819971824}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6591796875,"f1":0.7826928280053287,"seconds":5.124136805534363e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.78125,"distances_sum":1732.0621686373715}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8471471237096244,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.046875,"distances_sum":2029.09587280041}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7802734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8688873626373635,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.125,"distances_sum":2156.0072819971824}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9501207126207132,"seconds":6.295740604400635e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.7734375,"distances_sum":2769.564588334084}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9697573260073263,"seconds":6.416812539100647e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.921875,"distances_sum":2888.199037050821}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9402014652014659,"seconds":6.0033053159713745e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.6796875,"distances_sum":2648.763407947134}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9697573260073263,"seconds":6.416812539100647e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.921875,"distances_sum":2888.199037050821}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.97265625, conf: {"ssize":3,"bsize":13}, perf: {"precision":1.0,"recall":0.97265625,"f1":0.9850274725274726,"seconds":6.776303052902222e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.96875,"distances_sum":3013.6288396513864}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9771405677655682,"seconds":6.809830665588379e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.9375,"distances_sum":2943.540538133284}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9734775641025646,"seconds":6.36465847492218e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.9296875,"distances_sum":2927.8354295984177}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9805460164835167,"seconds":6.893649697303772e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.984375,"distances_sum":2971.5033132778844}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.97265625,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.97265625,"f1":0.9850274725274726,"seconds":6.776303052902222e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.96875,"distances_sum":3013.6288396513864}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.97265625,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.97265625,"f1":0.9850274725274726,"seconds":6.776303052902222e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.96875,"distances_sum":3013.6288396513864}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7856325965700972,"seconds":5.2675604820251465e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.0,"distances_sum":1760.6243885110466}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8582396769896778,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.1640625,"distances_sum":2133.3433838835585}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.544921875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.544921875,"f1":0.6903927669552674,"seconds":5.057081580162048e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.0078125,"distances_sum":1345.4764311772828}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8582396769896778,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.1640625,"distances_sum":2133.3433838835585}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9342490842490849,"seconds":6.51925802230835e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7734375,"distances_sum":2646.1809687770656}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9222756410256417,"seconds":6.362795829772949e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7109375,"distances_sum":2552.6963726438253}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9267227564102571,"seconds":6.372109055519104e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.671875,"distances_sum":2604.066805046554}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8757076257076267,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.328125,"distances_sum":2257.3499425410077}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9342490842490849,"seconds":6.51925802230835e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7734375,"distances_sum":2646.1809687770656}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9602163461538465,"seconds":6.77257776260376e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.828125,"distances_sum":2888.0351491062897}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9567937271062276,"seconds":6.619840860366821e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8515625,"distances_sum":2849.925101337873}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9501945970695975,"seconds":6.509944796562195e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.765625,"distances_sum":2853.3875633368484}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9503205128205133,"seconds":6.759539246559143e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.796875,"distances_sum":2808.2637084974435}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9662030677655682,"seconds":6.241723895072937e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9296875,"distances_sum":2923.841338476762}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9573946886446889,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8515625,"distances_sum":2847.7913805002217}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9679315476190481,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8828125,"distances_sum":2967.6298373329746}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":10,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9679315476190481,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8828125,"distances_sum":2967.6298373329746}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":10,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9679315476190481,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8828125,"distances_sum":2967.6298373329746}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3310546875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3310546875,"f1":null,"seconds":3.4123659133911133e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":5.2109375,"distances_sum":863.3191788437953}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5185546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5185546875,"f1":0.663621621434122,"seconds":4.110857844352722e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":6.8046875,"distances_sum":1399.6117244226427}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5185546875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5185546875,"f1":0.663621621434122,"seconds":4.110857844352722e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":6.8046875,"distances_sum":1399.6117244226427}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9028903388278396,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.5078125,"distances_sum":2449.185423942012}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.9162233599733607,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.6875,"distances_sum":2581.6457864974805}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8583984375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8583984375,"f1":0.9162233599733607,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.6875,"distances_sum":2581.6457864974805}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9380151098901105,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.7109375,"distances_sum":2764.8909933788996}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9297993672993677,"seconds":5.472451448440552e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.6484375,"distances_sum":2741.153129442637}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9547847985347989,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.78125,"distances_sum":2886.794955857504}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9547847985347989,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.78125,"distances_sum":2886.794955857504}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9547847985347989,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.78125,"distances_sum":2886.794955857504}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3544921875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3544921875,"f1":null,"seconds":3.4980475902557373e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.5703125,"distances_sum":967.3811501009201}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3544921875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3544921875,"f1":null,"seconds":3.4980475902557373e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.5703125,"distances_sum":967.3811501009201}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6337890625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6337890625,"f1":0.7638309607059613,"seconds":4.781410098075867e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.640625,"distances_sum":1771.2487552280113}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9135229353979359,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.6875,"distances_sum":2521.030529293009}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.634765625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.634765625,"f1":0.7606296481296488,"seconds":4.6156346797943115e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.65625,"distances_sum":1744.315737699343}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.365234375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.365234375,"f1":null,"seconds":3.421679139137268e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.546875,"distances_sum":954.4973199025261}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8564453125,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8564453125,"f1":0.9135229353979359,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.6875,"distances_sum":2521.030529293009}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9656478937728943,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.859375,"distances_sum":2920.743615035829}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9336689352314356,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.7734375,"distances_sum":2702.33920503719}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9558436355311362,"seconds":5.748122930526733e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8203125,"distances_sum":2845.604956086081}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9656478937728943,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.859375,"distances_sum":2920.743615035829}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9656478937728943,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.859375,"distances_sum":2920.743615035829}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2373046875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2373046875,"f1":null,"seconds":3.648921847343445e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":6.71875,"distances_sum":449.7218088203069}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6494140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":0.984375,"recall":0.6494140625,"f1":0.772402597402598,"seconds":5.071982741355896e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.1328125,"distances_sum":1238.0191895690716}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6494140625,"state":{"ssize":1,"bsize":4},"perf":{"precision":0.984375,"recall":0.6494140625,"f1":0.772402597402598,"seconds":5.071982741355896e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.1328125,"distances_sum":1238.0191895690716}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":3,"bsize":6}, perf: {"precision":0.9824683779761904,"recall":0.8212890625,"f1":0.8891175881410257,"seconds":5.243346095085144e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.578125,"distances_sum":1710.925674351752}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8212890625,"state":{"ssize":3,"bsize":6},"perf":{"precision":0.9824683779761904,"recall":0.8212890625,"f1":0.8891175881410257,"seconds":5.243346095085144e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.578125,"distances_sum":1710.925674351752}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":7,"bsize":8}, perf: {"precision":0.9802827380952381,"recall":0.8955078125,"f1":0.9323546245421248,"seconds":5.898997187614441e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.8984375,"distances_sum":1980.2487995785134}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":6,"bsize":7}, perf: {"precision":0.9821614583333333,"recall":0.8603515625,"f1":0.9124756753663005,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.8671875,"distances_sum":1837.2183139232545}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8955078125,"state":{"ssize":7,"bsize":8},"perf":{"precision":0.9802827380952381,"recall":0.8955078125,"f1":0.9323546245421248,"seconds":5.898997187614441e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.8984375,"distances_sum":1980.2487995785134}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8955078125,"state":{"ssize":7,"bsize":8},"perf":{"precision":0.9802827380952381,"recall":0.8955078125,"f1":0.9323546245421248,"seconds":5.898997187614441e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.8984375,"distances_sum":1980.2487995785134}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6142578125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6142578125,"f1":0.7460697288822294,"seconds":4.699453711509705e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.3046875,"distances_sum":1235.125787083006}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.62890625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.62890625,"f1":0.7585237678987685,"seconds":4.5280903577804565e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.359375,"distances_sum":1267.3057903460683}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.62890625,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.62890625,"f1":0.7585237678987685,"seconds":4.5280903577804565e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.359375,"distances_sum":1267.3057903460683}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9095695970695975,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5234375,"distances_sum":1784.2864006773696}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9370879120879126,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.75,"distances_sum":1953.845426697446}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9370879120879126,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.75,"distances_sum":1953.845426697446}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9649069680319685,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8828125,"distances_sum":2092.8774498128546}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9649069680319685,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8828125,"distances_sum":2092.8774498128546}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9649069680319685,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8828125,"distances_sum":2092.8774498128546}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.7995155885780892,"seconds":5.15766441822052e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.9140625,"distances_sum":1421.7179911306434}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6845703125,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6845703125,"f1":0.7995155885780892,"seconds":5.15766441822052e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.9140625,"distances_sum":1421.7179911306434}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9401728479853486,"seconds":5.681067705154419e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8125,"distances_sum":2149.3470734508073}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9135218947718954,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.578125,"distances_sum":1990.709181965254}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.8741940351315359,"seconds":5.345791578292847e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.3203125,"distances_sum":1774.2558275869446}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9019350441225447,"seconds":5.494803190231323e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.53125,"distances_sum":1930.4303814655875}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8574128996004005,"seconds":4.289858043193817e-5,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.1484375,"distances_sum":1707.3310429948408}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.89453125,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.9401728479853486,"seconds":5.681067705154419e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8125,"distances_sum":2149.3470734508073}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":9,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9697573260073264,"seconds":6.6366046667099e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.90625,"distances_sum":2344.163666169113}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9612408424908429,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.765625,"distances_sum":2310.1881779758533}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9719894688644692,"seconds":6.536021828651428e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9296875,"distances_sum":2341.069828609807}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9470467032967039,"seconds":6.277114152908325e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.78125,"distances_sum":2219.221361168391}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9757268772893776,"seconds":6.357207894325256e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9140625,"distances_sum":2388.6029810463197}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9406879578754586,"seconds":6.102025508880615e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.7109375,"distances_sum":2181.468651540975}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9522409881784886,"seconds":6.2212347984313965e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.796875,"distances_sum":2259.9356229785094}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.943292124542125,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8671875,"distances_sum":2169.0659304803016}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9757268772893776,"seconds":6.357207894325256e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9140625,"distances_sum":2388.6029810463197}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9757268772893776,"seconds":6.357207894325256e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9140625,"distances_sum":2388.6029810463197}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.37890625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.37890625,"f1":null,"seconds":4.215165972709656e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":6.1640625,"distances_sum":765.6994011116573}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8709087787212794,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":7.8984375,"distances_sum":1832.7268819256394}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4169921875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4169921875,"f1":null,"seconds":4.410743713378906e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":6.2421875,"distances_sum":866.2564536970176}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8709087787212794,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":7.8984375,"distances_sum":1832.7268819256394}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9571829212454217,"seconds":6.109476089477539e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.765625,"distances_sum":2380.652139654359}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9636389652014654,"seconds":6.271526217460632e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.84375,"distances_sum":2406.4840968194867}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8960451007326015,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.2265625,"distances_sum":2009.6108050480407}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8965326340326347,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.28125,"distances_sum":2029.176528726991}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8980082417582425,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.375,"distances_sum":2005.6607677740612}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9636389652014654,"seconds":6.271526217460632e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.84375,"distances_sum":2406.4840968194867}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":6,"bsize":13}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9793898809523813,"seconds":6.943941116333008e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.953125,"distances_sum":2508.995946488038}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9699061355311358,"seconds":6.236135959625244e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.8515625,"distances_sum":2460.4291586776644}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":7,"bsize":13}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9767685439560443,"seconds":6.599351763725281e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.953125,"distances_sum":2495.8057176621824}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9759672619047621,"seconds":6.621703505516052e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.9375,"distances_sum":2484.13515929767}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9654418498168504,"seconds":6.15045428276062e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.8125,"distances_sum":2450.0804515411814}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":6,"bsize":13},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9793898809523813,"seconds":6.943941116333008e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.953125,"distances_sum":2508.995946488038}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":6,"bsize":13},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9793898809523813,"seconds":6.943941116333008e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.953125,"distances_sum":2508.995946488038}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.8739874708624717,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.40625,"distances_sum":1956.0513762921084}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2333984375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2333984375,"f1":null,"seconds":3.956258296966553e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":6.4921875,"distances_sum":514.4412805531533}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.800558816183817,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.046875,"distances_sum":1590.0746854866827}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7900390625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7900390625,"f1":0.8739874708624717,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.40625,"distances_sum":1956.0513762921084}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.918464348151849,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.609375,"distances_sum":2208.52200144224}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7939453125, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.7939453125,"f1":0.8759802697302705,"seconds":5.681067705154419e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.4296875,"distances_sum":1967.5141019566722}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8839545870795877,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.3984375,"distances_sum":1968.4307082174541}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.8880614177489184,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.4609375,"distances_sum":2049.610054307573}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8603515625,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.8603515625,"f1":0.918464348151849,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.609375,"distances_sum":2208.52200144224}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9770833333333336,"seconds":6.198883056640625e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.9609375,"distances_sum":2602.295921921715}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9609260531135535,"seconds":6.230548024177551e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.9140625,"distances_sum":2522.902056315729}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9550683691308695,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.828125,"distances_sum":2491.4124212177967}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":11,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9417868589743595,"seconds":6.232410669326782e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.875,"distances_sum":2353.951779604392}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9770833333333336,"seconds":6.198883056640625e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.9609375,"distances_sum":2602.295921921715}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9770833333333336,"seconds":6.198883056640625e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.9609375,"distances_sum":2602.295921921715}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5693359375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5693359375,"f1":0.707998078310579,"seconds":4.33996319770813e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.28125,"distances_sum":1357.585650044698}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.375,"f1":null,"seconds":3.8333237171173096e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":5.984375,"distances_sum":874.5071724473496}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5693359375,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.5693359375,"f1":0.707998078310579,"seconds":4.33996319770813e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.28125,"distances_sum":1357.585650044698}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.86535755910756,"seconds":5.140900611877441e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.1484375,"distances_sum":1974.6215929527223}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9355457042957046,"seconds":5.466863512992859e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.765625,"distances_sum":2446.8173633956526}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9253865925740931,"seconds":5.535781383514404e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.6875,"distances_sum":2346.144161031665}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.9355457042957046,"seconds":5.466863512992859e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.765625,"distances_sum":2446.8173633956526}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9667239010989016,"seconds":5.640089511871338e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.84375,"distances_sum":2652.991021326785}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9369193306693311,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.7578125,"distances_sum":2459.9720476664897}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9489125457875462,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.765625,"distances_sum":2537.141577588903}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9365301365301371,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.75,"distances_sum":2454.5794761501184}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9667239010989016,"seconds":5.640089511871338e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.84375,"distances_sum":2652.991021326785}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9667239010989016,"seconds":5.640089511871338e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.84375,"distances_sum":2652.991021326785}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5693359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5693359375,"f1":0.7096479908979916,"seconds":4.302710294723511e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.59375,"distances_sum":1297.1360349962554}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3876953125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3876953125,"f1":null,"seconds":3.809109330177307e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.53125,"distances_sum":813.201966853482}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5693359375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5693359375,"f1":0.7096479908979916,"seconds":4.302710294723511e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.59375,"distances_sum":1297.1360349962554}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8617746836496846,"seconds":4.949048161506653e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.0703125,"distances_sum":1912.0764195714657}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9037977647352654,"seconds":5.1818788051605225e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.5234375,"distances_sum":2172.4482848991543}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.859127331002332,"seconds":4.915520548820496e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.09375,"distances_sum":1870.4856448446917}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9035719488844498,"seconds":5.282461643218994e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.640625,"distances_sum":2130.5079923082285}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8369140625,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.8369140625,"f1":0.9037977647352654,"seconds":5.1818788051605225e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.5234375,"distances_sum":2172.4482848991543}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.93660141941392,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.78125,"distances_sum":2379.086302154387}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9563301282051286,"seconds":5.479902029037476e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8515625,"distances_sum":2502.472890483378}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9344951923076928,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.7890625,"distances_sum":2360.480364248627}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9089348151848159,"seconds":5.085021257400513e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.5625,"distances_sum":2201.6464262442487}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9445798992673998,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.7578125,"distances_sum":2452.1876941524592}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9563301282051286,"seconds":5.479902029037476e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8515625,"distances_sum":2502.472890483378}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9228515625,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9563301282051286,"seconds":5.479902029037476e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8515625,"distances_sum":2502.472890483378}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.220703125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.220703125,"f1":null,"seconds":3.255903720855713e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":6.0703125,"distances_sum":534.3756000567822}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5615234375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5615234375,"f1":null,"seconds":4.148110747337341e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.28125,"distances_sum":1291.7114958147195}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.8044356684981693,"seconds":4.643574357032776e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.984375,"distances_sum":1652.3859534565017}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6884765625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6884765625,"f1":0.8044356684981693,"seconds":4.643574357032776e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.984375,"distances_sum":1652.3859534565017}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9543784340659345,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7890625,"distances_sum":2587.498595132501}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9226476648351658,"seconds":5.356967449188232e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6875,"distances_sum":2297.3455250797447}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8646067474192481,"seconds":4.809349775314331e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.28125,"distances_sum":1976.6165932823378}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9543784340659345,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7890625,"distances_sum":2587.498595132501}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.974313186813187,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.953125,"distances_sum":2680.151502235599}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9590831043956048,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8671875,"distances_sum":2590.7795842116657}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.974313186813187,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.953125,"distances_sum":2680.151502235599}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.974313186813187,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.953125,"distances_sum":2680.151502235599}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6953125,"f1":0.8063653360528368,"seconds":4.796311259269714e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.9609375,"distances_sum":1704.4027902250955}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7119140625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.7119140625,"f1":0.8205568736818746,"seconds":4.474073648452759e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.0,"distances_sum":1728.3071068441923}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7119140625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.7119140625,"f1":0.8205568736818746,"seconds":4.474073648452759e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.0,"distances_sum":1728.3071068441923}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9447229853479859,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.75,"distances_sum":2501.2974575249136}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8644641816516826,"seconds":4.822388291358948e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.1171875,"distances_sum":1955.7789855734648}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9497653388278393,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.734375,"distances_sum":2519.018330822356}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9497653388278393,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.734375,"distances_sum":2519.018330822356}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9575950091575096,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8359375,"distances_sum":2569.0911147540314}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9672447344322349,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.9140625,"distances_sum":2630.109311730922}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9553456959706965,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.703125,"distances_sum":2601.641238125186}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9672447344322349,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.9140625,"distances_sum":2630.109311730922}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9672447344322349,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.9140625,"distances_sum":2630.109311730922}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.203125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.203125,"f1":null,"seconds":3.3192336559295654e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":5.8984375,"distances_sum":438.965574409214}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8622479950604958,"seconds":4.986301064491272e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":7.7421875,"distances_sum":1946.9070017532506}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7734375,"f1":0.8622479950604958,"seconds":4.986301064491272e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":7.7421875,"distances_sum":1946.9070017532506}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9462683150183157,"seconds":5.679205060005188e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.921875,"distances_sum":2438.4319787619443}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9462683150183157,"seconds":5.679205060005188e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.921875,"distances_sum":2438.4319787619443}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9688244047619052,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.890625,"distances_sum":2624.6466096253916}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.958968635531136,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.78125,"distances_sum":2569.528270221164}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9525755494505498,"seconds":5.6996941566467285e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.7734375,"distances_sum":2515.301954792895}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9688244047619052,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.890625,"distances_sum":2624.6466096253916}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9688244047619052,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.890625,"distances_sum":2624.6466096253916}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8578504828504837,"seconds":5.027279257774353e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.5546875,"distances_sum":1586.0223971571397}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.8578504828504837,"seconds":5.027279257774353e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.5546875,"distances_sum":1586.0223971571397}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9365441849816853,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8671875,"distances_sum":2001.162403684449}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9491472069597074,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.7734375,"distances_sum":2112.7065420524327}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9514365842490847,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8046875,"distances_sum":2117.4924677524546}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8668159965034973,"seconds":5.202367901802063e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.671875,"distances_sum":1660.7265227592525}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9514365842490847,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8046875,"distances_sum":2117.4924677524546}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9649381868131872,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.828125,"distances_sum":2213.660503347314}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96875, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.96875,"f1":0.9831101190476192,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9609375,"distances_sum":2307.501417784985}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9769917582417587,"seconds":5.76116144657135e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.921875,"distances_sum":2270.584014588222}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9568681318681322,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.78125,"distances_sum":2158.1497822842102}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9673420329670334,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.90625,"distances_sum":2204.028260787271}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9629521520146525,"seconds":5.500391125679016e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.828125,"distances_sum":2204.367441910904}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96875,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.96875,"f1":0.9831101190476192,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9609375,"distances_sum":2307.501417784985}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96875,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.96875,"f1":0.9831101190476192,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9609375,"distances_sum":2307.501417784985}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2431640625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2431640625,"f1":null,"seconds":3.6284327507019043e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.0546875,"distances_sum":455.1930108781743}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.576171875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.576171875,"f1":0.7154633560883568,"seconds":4.509463906288147e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.5234375,"distances_sum":1154.9238094273492}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41015625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.41015625,"f1":null,"seconds":3.7979334592819214e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.234375,"distances_sum":781.4964012671808}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.576171875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.576171875,"f1":0.7154633560883568,"seconds":4.509463906288147e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.5234375,"distances_sum":1154.9238094273492}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8975446428571436,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.78125,"distances_sum":1840.4016714055513}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.583984375, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.583984375,"f1":null,"seconds":4.37907874584198e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.59375,"distances_sum":1158.4161480286973}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.7978342837717846,"seconds":4.667788743972778e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.0234375,"distances_sum":1424.5738403679215}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8576355935730944,"seconds":5.1390379667282104e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.5625,"distances_sum":1633.2417746122965}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8506098068598077,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.5703125,"distances_sum":1622.8983985236346}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8271484375,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.8271484375,"f1":0.8975446428571436,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.78125,"distances_sum":1840.4016714055513}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9550480769230774,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8203125,"distances_sum":2221.728670841354}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9685153388278391,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.921875,"distances_sum":2288.623801394848}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9405734890109895,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8125,"distances_sum":2086.959852167737}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9602938727938733,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.859375,"distances_sum":2234.722091002423}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9685153388278391,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.921875,"distances_sum":2288.623801394848}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9685153388278391,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.921875,"distances_sum":2288.623801394848}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.228515625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.228515625,"f1":null,"seconds":3.606081008911133e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.609375,"distances_sum":432.45258750629625}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.228515625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.228515625,"f1":null,"seconds":3.606081008911133e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.609375,"distances_sum":432.45258750629625}}, n: 9
mean(cfft.distances) = 0.33128719180334454
mean(cdnet.distances) = 0.3503689504939614
mean(crand.distances) = 0.60823579783347
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8422222222222223
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9022222222222224
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.888888888888889
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8555555555555555
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8822222222222221
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9244444444444445
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8711111111111111
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8755555555555555
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9044444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8444444444444444
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8777777777777778
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9355555555555556
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.92
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9333333333333332
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9355555555555556
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8755555555555555
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8755555555555555
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8666666666666667
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9133333333333334
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222224
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8266666666666667
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9111111111111111
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8777777777777778
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8711111111111111
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 8, normalized-entropy: 0.2974722489192896, [(2, 18), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 8, normalized-entropy: 0.2974722489192896, [(2, 18), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 8, normalized-entropy: 0.2974722489192896, [(2, 18), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 8, normalized-entropy: 0.2974722489192896, [(2, 18), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 8, normalized-entropy: 0.2974722489192896, [(2, 18), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 8, normalized-entropy: 0.2974722489192896, [(2, 18), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 3, 3]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 8, normalized-entropy: 0.2974722489192896, [(2, 18), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 3, 3]
acc = 0.96
*** finished computation of 12 references, err: [Inf, 0.5871898356080055] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 23]]
** centroid: 4, normalized-entropy: 0.24988229283318547, [(2, 1), (3, 23)]
*** center 5: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 13]]
** centroid: 11, normalized-entropy: 0.6962122601251459, [(2, 3), (3, 13)]
*** center 12: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
finished with 14 centroids; started with 12
acc = 0.9733333333333334
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.35971390616075993] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35971390616075993, 0.32562809589237823] ***
*** finished computation of 3 references, err: [Inf, 0.35971390616075993, 0.32562809589237823] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [59, 161, 25]]
** centroid: 1, normalized-entropy: 0.7752100820913468, [(1, 59), (2, 161), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [179, 28, 0]]
** centroid: 2, normalized-entropy: 0.5717045326301715, [(1, 179), (2, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [164, 50, 0]]
** centroid: 3, normalized-entropy: 0.7843112002044088, [(1, 164), (2, 50)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3589240283098396] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3589240283098396, 0.23934820849817615] ***
*** finished computation of 3 references, err: [Inf, 0.3589240283098396, 0.23934820849817615] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [101, 163, 25]]
** centroid: 1, normalized-entropy: 0.8211584987607007, [(1, 101), (2, 163), (3, 25)]
*** center 2: selecting labels [1] (freq >= 1) [from [180, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [121, 76, 0]]
** centroid: 3, normalized-entropy: 0.9620267294465366, [(1, 121), (2, 76)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.47389398823384715] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47389398823384715, 0.3480753965125694] ***
*** finished computation of 3 references, err: [Inf, 0.47389398823384715, 0.3480753965125694] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [112, 248, 23]]
** centroid: 1, normalized-entropy: 0.7371721657397963, [(1, 112), (2, 248), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [167, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [81, 36, 0]]
** centroid: 3, normalized-entropy: 0.8904916402194913, [(1, 81), (2, 36)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3571491109338523] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3571491109338523, 0.3054966659269769] ***
*** finished computation of 3 references, err: [Inf, 0.3571491109338523, 0.3054966659269769] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [71, 224, 24]]
** centroid: 1, normalized-entropy: 0.7075431693488992, [(1, 71), (2, 224), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [142, 51, 0]]
** centroid: 2, normalized-entropy: 0.8330902838472973, [(1, 142), (2, 51)]
*** center 3: selecting labels [1] (freq >= 2) [from [155, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3528711425023212] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3528711425023212, 0.2300093196216563] ***
*** finished computation of 3 references, err: [Inf, 0.3528711425023212, 0.2300093196216563] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [238, 30, 0]]
** centroid: 1, normalized-entropy: 0.5057408862206602, [(1, 238), (2, 30)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 192, 23]]
** centroid: 2, normalized-entropy: 0.4907290117858637, [(2, 192), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [122, 62, 0]]
** centroid: 3, normalized-entropy: 0.9218764863469129, [(1, 122), (2, 62)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36741606619438044] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36741606619438044, 0.23302475879292772] ***
*** finished computation of 3 references, err: [Inf, 0.36741606619438044, 0.23302475879292772] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [232, 24, 0]]
** centroid: 1, normalized-entropy: 0.44886448872302936, [(1, 232), (2, 24)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 180, 24]]
** centroid: 2, normalized-entropy: 0.5225593745369407, [(2, 180), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [136, 71, 0]]
** centroid: 3, normalized-entropy: 0.9276560787801051, [(1, 136), (2, 71)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2636656752065965] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2636656752065965, 0.23761211046054065] ***
*** starting iteration: 2; err: [Inf, 0.2636656752065965, 0.23761211046054065] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2636656752065965, 0.23761211046054065, 0.23469700223931275] ***
*** starting iteration: 3; err: [Inf, 0.2636656752065965, 0.23761211046054065, 0.23469700223931275] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2636656752065965, 0.23761211046054065, 0.23469700223931275, 0.23379070331641771] ***
*** finished computation of 3 references, err: [Inf, 0.2636656752065965, 0.23761211046054065, 0.23469700223931275, 0.23379070331641771] ***
*** center 1: selecting labels [1] (freq >= 2) [from [223, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [30, 153, 25]]
** centroid: 2, normalized-entropy: 0.6916203390064566, [(1, 30), (2, 153), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [149, 86, 0]]
** centroid: 3, normalized-entropy: 0.9475174637852444, [(1, 149), (2, 86)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28465909360191677] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28465909360191677, 0.238097684667341] ***
*** starting iteration: 2; err: [Inf, 0.28465909360191677, 0.238097684667341] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28465909360191677, 0.238097684667341, 0.23535287138242192] ***
*** starting iteration: 3; err: [Inf, 0.28465909360191677, 0.238097684667341, 0.23535287138242192] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28465909360191677, 0.238097684667341, 0.23535287138242192, 0.23426685952672224] ***
*** starting iteration: 4; err: [Inf, 0.28465909360191677, 0.238097684667341, 0.23535287138242192, 0.23426685952672224] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28465909360191677, 0.238097684667341, 0.23535287138242192, 0.23426685952672224, 0.23354088054827485] ***
*** finished computation of 3 references, err: [Inf, 0.28465909360191677, 0.238097684667341, 0.23535287138242192, 0.23426685952672224, 0.23354088054827485] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [100, 139, 10]]
** centroid: 1, normalized-entropy: 0.7472406959721706, [(1, 100), (2, 139), (3, 10)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [72, 145, 13]]
** centroid: 2, normalized-entropy: 0.7434974345560617, [(1, 72), (2, 145), (3, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [188, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4964480469704255] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4964480469704255, 0.26598959732968275] ***
*** starting iteration: 2; err: [Inf, 0.4964480469704255, 0.26598959732968275] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4964480469704255, 0.26598959732968275, 0.2403073411719731] ***
*** starting iteration: 3; err: [Inf, 0.4964480469704255, 0.26598959732968275, 0.2403073411719731] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4964480469704255, 0.26598959732968275, 0.2403073411719731, 0.2343044157448536] ***
*** starting iteration: 4; err: [Inf, 0.4964480469704255, 0.26598959732968275, 0.2403073411719731, 0.2343044157448536] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4964480469704255, 0.26598959732968275, 0.2403073411719731, 0.2343044157448536, 0.23335722115901725] ***
*** finished computation of 3 references, err: [Inf, 0.4964480469704255, 0.26598959732968275, 0.2403073411719731, 0.2343044157448536, 0.23335722115901725] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [124, 85, 0]]
** centroid: 1, normalized-entropy: 0.9747343853838629, [(1, 124), (2, 85)]
*** center 2: selecting labels [1] (freq >= 2) [from [179, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [65, 190, 24]]
** centroid: 3, normalized-entropy: 0.7391698743131576, [(1, 65), (2, 190), (3, 24)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2341058621513056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2341058621513056, 0.1950620253271124] ***
*** starting iteration: 2; err: [Inf, 0.2341058621513056, 0.1950620253271124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2341058621513056, 0.1950620253271124, 0.19131922180916103] ***
*** starting iteration: 3; err: [Inf, 0.2341058621513056, 0.1950620253271124, 0.19131922180916103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2341058621513056, 0.1950620253271124, 0.19131922180916103, 0.18986287115242434] ***
*** starting iteration: 4; err: [Inf, 0.2341058621513056, 0.1950620253271124, 0.19131922180916103, 0.18986287115242434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2341058621513056, 0.1950620253271124, 0.19131922180916103, 0.18986287115242434, 0.1894198079389316] ***
*** finished computation of 7 references, err: [Inf, 0.2341058621513056, 0.1950620253271124, 0.19131922180916103, 0.18986287115242434, 0.1894198079389316] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 77, 0]]
** centroid: 1, normalized-entropy: 0.2307099556914763, [(1, 3), (2, 77)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [79, 39, 0]]
** centroid: 2, normalized-entropy: 0.9154450354498175, [(1, 79), (2, 39)]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 79, 25]]
** centroid: 4, normalized-entropy: 0.7956792965030224, [(2, 79), (3, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 43, 0]]
** centroid: 5, normalized-entropy: 0.9698570179131006, [(1, 65), (2, 43)]
*** center 6: selecting labels [1] (freq >= 2) [from [106, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.247318584398636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.247318584398636, 0.1934429223326662] ***
*** starting iteration: 2; err: [Inf, 0.247318584398636, 0.1934429223326662] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.247318584398636, 0.1934429223326662, 0.18815745409393775] ***
*** starting iteration: 3; err: [Inf, 0.247318584398636, 0.1934429223326662, 0.18815745409393775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.247318584398636, 0.1934429223326662, 0.18815745409393775, 0.18692855352837442] ***
*** starting iteration: 4; err: [Inf, 0.247318584398636, 0.1934429223326662, 0.18815745409393775, 0.18692855352837442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.247318584398636, 0.1934429223326662, 0.18815745409393775, 0.18692855352837442, 0.18623564309947405] ***
*** finished computation of 7 references, err: [Inf, 0.247318584398636, 0.1934429223326662, 0.18815745409393775, 0.18692855352837442, 0.18623564309947405] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [80, 16, 0]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(1, 80), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 11, 0]]
** centroid: 2, normalized-entropy: 0.5869185834047994, [(1, 67), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 96, 23]]
** centroid: 3, normalized-entropy: 0.7082772165975041, [(2, 96), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 52, 0]]
** centroid: 5, normalized-entropy: 0.9972943816462351, [(1, 46), (2, 52)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 104, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [87, 5, 0]]
** centroid: 7, normalized-entropy: 0.30458668852140236, [(1, 87), (2, 5)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23202442626763453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23202442626763453, 0.19049167757884583] ***
*** starting iteration: 2; err: [Inf, 0.23202442626763453, 0.19049167757884583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23202442626763453, 0.19049167757884583, 0.1863465930350583] ***
*** starting iteration: 3; err: [Inf, 0.23202442626763453, 0.19049167757884583, 0.1863465930350583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23202442626763453, 0.19049167757884583, 0.1863465930350583, 0.18585323817704036] ***
*** finished computation of 7 references, err: [Inf, 0.23202442626763453, 0.19049167757884583, 0.1863465930350583, 0.18585323817704036] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [31, 84, 0]]
** centroid: 1, normalized-entropy: 0.8408400584625579, [(1, 31), (2, 84)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [72, 13, 0]]
** centroid: 2, normalized-entropy: 0.617151919200282, [(1, 72), (2, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 95, 24]]
** centroid: 4, normalized-entropy: 0.7252767313016596, [(2, 95), (3, 24)]
*** center 5: selecting labels [1] (freq >= 2) [from [75, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 82, 0]]
** centroid: 6, normalized-entropy: 0.22028326695127437, [(1, 3), (2, 82)]
*** center 7: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28532359342848707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28532359342848707, 0.21561127332355212] ***
*** starting iteration: 2; err: [Inf, 0.28532359342848707, 0.21561127332355212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28532359342848707, 0.21561127332355212, 0.20632003818138] ***
*** starting iteration: 3; err: [Inf, 0.28532359342848707, 0.21561127332355212, 0.20632003818138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28532359342848707, 0.21561127332355212, 0.20632003818138, 0.2026664932851341] ***
*** finished computation of 7 references, err: [Inf, 0.28532359342848707, 0.21561127332355212, 0.20632003818138, 0.2026664932851341] ***
*** center 1: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 69, 1]]
** centroid: 2, normalized-entropy: 0.10802319526362848, [(2, 69), (3, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 55, 24]]
** centroid: 3, normalized-entropy: 0.8858834790484443, [(2, 55), (3, 24)]
*** center 4: selecting labels [1] (freq >= 1) [from [148, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [15, 66, 0]]
** centroid: 5, normalized-entropy: 0.6912898694057888, [(1, 15), (2, 66)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [29, 24, 0]]
** centroid: 6, normalized-entropy: 0.9935704757706079, [(1, 29), (2, 24)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [132, 25, 0]]
** centroid: 7, normalized-entropy: 0.6324778922057418, [(1, 132), (2, 25)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27619452336789113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27619452336789113, 0.2108496278608176] ***
*** starting iteration: 2; err: [Inf, 0.27619452336789113, 0.2108496278608176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27619452336789113, 0.2108496278608176, 0.2005988043967517] ***
*** starting iteration: 3; err: [Inf, 0.27619452336789113, 0.2108496278608176, 0.2005988043967517] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27619452336789113, 0.2108496278608176, 0.2005988043967517, 0.1971645284279332] ***
*** finished computation of 7 references, err: [Inf, 0.27619452336789113, 0.2108496278608176, 0.2005988043967517, 0.1971645284279332] ***
*** center 1: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [1, 110, 0]]
** centroid: 2, normalized-entropy: 0.07414948357792069, [(1, 1), (2, 110)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 104, 23]]
** centroid: 3, normalized-entropy: 0.6824826735754346, [(2, 104), (3, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [86, 2, 0]]
** centroid: 5, normalized-entropy: 0.1564910629057016, [(1, 86), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [78, 68, 0]]
** centroid: 6, normalized-entropy: 0.9966132830150962, [(1, 78), (2, 68)]
*** center 7: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2804034536249232] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2804034536249232, 0.20711784164464545] ***
*** starting iteration: 2; err: [Inf, 0.2804034536249232, 0.20711784164464545] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2804034536249232, 0.20711784164464545, 0.1963222755483635] ***
*** starting iteration: 3; err: [Inf, 0.2804034536249232, 0.20711784164464545, 0.1963222755483635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2804034536249232, 0.20711784164464545, 0.1963222755483635, 0.19397031517233002] ***
*** finished computation of 7 references, err: [Inf, 0.2804034536249232, 0.20711784164464545, 0.1963222755483635, 0.19397031517233002] ***
*** center 1: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 53, 24]]
** centroid: 2, normalized-entropy: 0.8951127210954559, [(2, 53), (3, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [39, 67, 0]]
** centroid: 5, normalized-entropy: 0.9490651498811383, [(1, 39), (2, 67)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [24, 78, 0]]
** centroid: 6, normalized-entropy: 0.787126586201269, [(1, 24), (2, 78)]
*** center 7: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4294724229012837] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4294724229012837, 0.3071914611093409] ***
*** finished computation of 3 references, err: [Inf, 0.4294724229012837, 0.3071914611093409] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [143, 126, 0]]
** centroid: 1, normalized-entropy: 0.9971171152692666, [(1, 143), (2, 126)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [118, 113, 25]]
** centroid: 2, normalized-entropy: 0.8603109017740741, [(1, 118), (2, 113), (3, 25)]
*** center 3: selecting labels [1] (freq >= 1) [from [141, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4548576170413837] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4548576170413837, 0.2907491951030323] ***
*** finished computation of 3 references, err: [Inf, 0.4548576170413837, 0.2907491951030323] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [215, 30, 0]]
** centroid: 1, normalized-entropy: 0.5363596511250623, [(1, 215), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [145, 55, 0]]
** centroid: 2, normalized-entropy: 0.8485481782946159, [(1, 145), (2, 55)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 199, 23]]
** centroid: 3, normalized-entropy: 0.4803157560911085, [(2, 199), (3, 23)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3945225200418947] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3945225200418947, 0.3020318673303661] ***
*** finished computation of 3 references, err: [Inf, 0.3945225200418947, 0.3020318673303661] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [234, 63, 0]]
** centroid: 1, normalized-entropy: 0.7455178428108284, [(1, 234), (2, 63)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 161, 24]]
** centroid: 2, normalized-entropy: 0.5566965016311172, [(2, 161), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [134, 51, 0]]
** centroid: 3, normalized-entropy: 0.8494914931547568, [(1, 134), (2, 51)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2818560217823218] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2818560217823218, 0.2114705722499359] ***
*** starting iteration: 2; err: [Inf, 0.2818560217823218, 0.2114705722499359] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2818560217823218, 0.2114705722499359, 0.20248963992326735] ***
*** starting iteration: 3; err: [Inf, 0.2818560217823218, 0.2114705722499359, 0.20248963992326735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2818560217823218, 0.2114705722499359, 0.20248963992326735, 0.196139703299179] ***
*** starting iteration: 4; err: [Inf, 0.2818560217823218, 0.2114705722499359, 0.20248963992326735, 0.196139703299179] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2818560217823218, 0.2114705722499359, 0.20248963992326735, 0.196139703299179, 0.1939813081523286] ***
*** starting iteration: 5; err: [Inf, 0.2818560217823218, 0.2114705722499359, 0.20248963992326735, 0.196139703299179, 0.1939813081523286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2818560217823218, 0.2114705722499359, 0.20248963992326735, 0.196139703299179, 0.1939813081523286, 0.1926147718298565] ***
*** starting iteration: 6; err: [Inf, 0.2818560217823218, 0.2114705722499359, 0.20248963992326735, 0.196139703299179, 0.1939813081523286, 0.1926147718298565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2818560217823218, 0.2114705722499359, 0.20248963992326735, 0.196139703299179, 0.1939813081523286, 0.1926147718298565, 0.19175889422031897] ***
*** finished computation of 7 references, err: [Inf, 0.2818560217823218, 0.2114705722499359, 0.20248963992326735, 0.196139703299179, 0.1939813081523286, 0.1926147718298565, 0.19175889422031897] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [88, 17, 0]]
** centroid: 1, normalized-entropy: 0.6388469391771899, [(1, 88), (2, 17)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 70, 25]]
** centroid: 2, normalized-entropy: 0.8314743880097292, [(2, 70), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [95, 3, 0]]
** centroid: 3, normalized-entropy: 0.19745300438456026, [(1, 95), (2, 3)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 83, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [54, 22, 0]]
** centroid: 5, normalized-entropy: 0.8680403986166402, [(1, 54), (2, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [74, 44, 0]]
** centroid: 6, normalized-entropy: 0.9528588097297789, [(1, 74), (2, 44)]
*** center 7: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23754339642833913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23754339642833913, 0.2004831246612803] ***
*** starting iteration: 2; err: [Inf, 0.23754339642833913, 0.2004831246612803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23754339642833913, 0.2004831246612803, 0.19565615645083395] ***
*** starting iteration: 3; err: [Inf, 0.23754339642833913, 0.2004831246612803, 0.19565615645083395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23754339642833913, 0.2004831246612803, 0.19565615645083395, 0.1932829065287466] ***
*** starting iteration: 4; err: [Inf, 0.23754339642833913, 0.2004831246612803, 0.19565615645083395, 0.1932829065287466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23754339642833913, 0.2004831246612803, 0.19565615645083395, 0.1932829065287466, 0.191686334021423] ***
*** starting iteration: 5; err: [Inf, 0.23754339642833913, 0.2004831246612803, 0.19565615645083395, 0.1932829065287466, 0.191686334021423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23754339642833913, 0.2004831246612803, 0.19565615645083395, 0.1932829065287466, 0.191686334021423, 0.18748028480868112] ***
*** starting iteration: 6; err: [Inf, 0.23754339642833913, 0.2004831246612803, 0.19565615645083395, 0.1932829065287466, 0.191686334021423, 0.18748028480868112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23754339642833913, 0.2004831246612803, 0.19565615645083395, 0.1932829065287466, 0.191686334021423, 0.18748028480868112, 0.18624715748448287] ***
*** starting iteration: 7; err: [Inf, 0.23754339642833913, 0.2004831246612803, 0.19565615645083395, 0.1932829065287466, 0.191686334021423, 0.18748028480868112, 0.18624715748448287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23754339642833913, 0.2004831246612803, 0.19565615645083395, 0.1932829065287466, 0.191686334021423, 0.18748028480868112, 0.18624715748448287, 0.18534366106349176] ***
*** finished computation of 7 references, err: [Inf, 0.23754339642833913, 0.2004831246612803, 0.19565615645083395, 0.1932829065287466, 0.191686334021423, 0.18748028480868112, 0.18624715748448287, 0.18534366106349176] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 80, 23]]
** centroid: 1, normalized-entropy: 0.7661493370832159, [(2, 80), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [64, 24, 0]]
** centroid: 3, normalized-entropy: 0.8453509366224364, [(1, 64), (2, 24)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [6, 69, 0]]
** centroid: 4, normalized-entropy: 0.4021791902022729, [(1, 6), (2, 69)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [107, 11, 0]]
** centroid: 5, normalized-entropy: 0.44712851249800223, [(1, 107), (2, 11)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 100, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2327850493120736] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2327850493120736, 0.20264744256012912] ***
*** starting iteration: 2; err: [Inf, 0.2327850493120736, 0.20264744256012912] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2327850493120736, 0.20264744256012912, 0.19776609292703456] ***
*** starting iteration: 3; err: [Inf, 0.2327850493120736, 0.20264744256012912, 0.19776609292703456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2327850493120736, 0.20264744256012912, 0.19776609292703456, 0.19586973645720168] ***
*** starting iteration: 4; err: [Inf, 0.2327850493120736, 0.20264744256012912, 0.19776609292703456, 0.19586973645720168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2327850493120736, 0.20264744256012912, 0.19776609292703456, 0.19586973645720168, 0.19507556493119008] ***
*** finished computation of 7 references, err: [Inf, 0.2327850493120736, 0.20264744256012912, 0.19776609292703456, 0.19586973645720168, 0.19507556493119008] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 81, 6]]
** centroid: 1, normalized-entropy: 0.36205125173399805, [(2, 81), (3, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [123, 43, 0]]
** centroid: 2, normalized-entropy: 0.825288415630559, [(1, 123), (2, 43)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [85, 1, 0]]
** centroid: 3, normalized-entropy: 0.09140162014739266, [(1, 85), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [59, 2, 0]]
** centroid: 4, normalized-entropy: 0.20818094555717087, [(1, 59), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [16, 84, 0]]
** centroid: 5, normalized-entropy: 0.634309554640566, [(1, 16), (2, 84)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 64, 18]]
** centroid: 6, normalized-entropy: 0.7592757847892834, [(2, 64), (3, 18)]
*** center 7: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.234352490275276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.234352490275276, 0.20369934182272884] ***
*** starting iteration: 2; err: [Inf, 0.234352490275276, 0.20369934182272884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.234352490275276, 0.20369934182272884, 0.1935816513312919] ***
*** starting iteration: 3; err: [Inf, 0.234352490275276, 0.20369934182272884, 0.1935816513312919] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.234352490275276, 0.20369934182272884, 0.1935816513312919, 0.1889221039083269] ***
*** finished computation of 7 references, err: [Inf, 0.234352490275276, 0.20369934182272884, 0.1935816513312919, 0.1889221039083269] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 83, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [68, 34, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 68), (2, 34)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [102, 7, 0]]
** centroid: 4, normalized-entropy: 0.3439745143595339, [(1, 102), (2, 7)]
*** center 5: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 86, 25]]
** centroid: 6, normalized-entropy: 0.7695944821271463, [(2, 86), (3, 25)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [98, 29, 0]]
** centroid: 7, normalized-entropy: 0.7751176506935044, [(1, 98), (2, 29)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24132574960097916] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24132574960097916, 0.1985386966405132] ***
*** starting iteration: 2; err: [Inf, 0.24132574960097916, 0.1985386966405132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24132574960097916, 0.1985386966405132, 0.1953068956107214] ***
*** starting iteration: 3; err: [Inf, 0.24132574960097916, 0.1985386966405132, 0.1953068956107214] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24132574960097916, 0.1985386966405132, 0.1953068956107214, 0.19420616684210623] ***
*** finished computation of 7 references, err: [Inf, 0.24132574960097916, 0.1985386966405132, 0.1953068956107214, 0.19420616684210623] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [69, 43, 0]]
** centroid: 1, normalized-entropy: 0.960769458040784, [(1, 69), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [41, 48, 0]]
** centroid: 2, normalized-entropy: 0.995533068899466, [(1, 41), (2, 48)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 104, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 19, 0]]
** centroid: 4, normalized-entropy: 0.7095128863456239, [(1, 79), (2, 19)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 70, 23]]
** centroid: 5, normalized-entropy: 0.8069896049203007, [(2, 70), (3, 23)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27446487720782076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27446487720782076, 0.20067112750724247] ***
*** starting iteration: 2; err: [Inf, 0.27446487720782076, 0.20067112750724247] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27446487720782076, 0.20067112750724247, 0.19450077149218348] ***
*** starting iteration: 3; err: [Inf, 0.27446487720782076, 0.20067112750724247, 0.19450077149218348] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27446487720782076, 0.20067112750724247, 0.19450077149218348, 0.1923545628962019] ***
*** finished computation of 7 references, err: [Inf, 0.27446487720782076, 0.20067112750724247, 0.19450077149218348, 0.1923545628962019] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 66, 0]]
** centroid: 1, normalized-entropy: 0.9927744539878083, [(1, 54), (2, 66)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 99, 24]]
** centroid: 2, normalized-entropy: 0.7120640548905481, [(2, 99), (3, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [82, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 52, 0]]
** centroid: 5, normalized-entropy: 0.9949848281859699, [(1, 44), (2, 52)]
*** center 6: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [28, 57, 0]]
** centroid: 7, normalized-entropy: 0.9143242464317818, [(1, 28), (2, 57)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18135847805023148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18135847805023148, 0.1507202051286292] ***
*** starting iteration: 2; err: [Inf, 0.18135847805023148, 0.1507202051286292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18135847805023148, 0.1507202051286292, 0.14782690440371699] ***
*** starting iteration: 3; err: [Inf, 0.18135847805023148, 0.1507202051286292, 0.14782690440371699] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18135847805023148, 0.1507202051286292, 0.14782690440371699, 0.1471350350677296] ***
*** finished computation of 7 references, err: [Inf, 0.18135847805023148, 0.1507202051286292, 0.14782690440371699, 0.1471350350677296] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [119, 3, 0]]
** centroid: 1, normalized-entropy: 0.16648978563002756, [(1, 119), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [97, 10, 0]]
** centroid: 2, normalized-entropy: 0.447907858914932, [(1, 97), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 40, 25]]
** centroid: 3, normalized-entropy: 0.961236604722876, [(2, 40), (3, 25)]
*** center 4: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [88, 11, 0]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(1, 88), (2, 11)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 100, 0]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(1, 5), (2, 100)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20703688335522585] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20703688335522585, 0.14935585950966226] ***
*** starting iteration: 2; err: [Inf, 0.20703688335522585, 0.14935585950966226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20703688335522585, 0.14935585950966226, 0.14470850621633555] ***
*** starting iteration: 3; err: [Inf, 0.20703688335522585, 0.14935585950966226, 0.14470850621633555] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20703688335522585, 0.14935585950966226, 0.14470850621633555, 0.14388984691831974] ***
*** finished computation of 7 references, err: [Inf, 0.20703688335522585, 0.14935585950966226, 0.14470850621633555, 0.14388984691831974] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [65, 23, 0]]
** centroid: 1, normalized-entropy: 0.828797154590015, [(1, 65), (2, 23)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 71, 23]]
** centroid: 2, normalized-entropy: 0.8027381019527042, [(2, 71), (3, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [94, 3, 0]]
** centroid: 4, normalized-entropy: 0.19902377455969078, [(1, 94), (2, 3)]
*** center 5: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 95, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 92, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1999459858827371] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1999459858827371, 0.15556865334709774] ***
*** starting iteration: 2; err: [Inf, 0.1999459858827371, 0.15556865334709774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1999459858827371, 0.15556865334709774, 0.15260661661351235] ***
*** starting iteration: 3; err: [Inf, 0.1999459858827371, 0.15556865334709774, 0.15260661661351235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1999459858827371, 0.15556865334709774, 0.15260661661351235, 0.15192729879988878] ***
*** finished computation of 7 references, err: [Inf, 0.1999459858827371, 0.15556865334709774, 0.15260661661351235, 0.15192729879988878] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [66, 33, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 66), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [95, 26, 0]]
** centroid: 2, normalized-entropy: 0.7507002995629545, [(1, 95), (2, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 85, 24]]
** centroid: 4, normalized-entropy: 0.7605024019419504, [(2, 85), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 36, 0]]
** centroid: 5, normalized-entropy: 0.9709505944546688, [(1, 54), (2, 36)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 1, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 94, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26897302942697304] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26897302942697304, 0.17048862988657848] ***
*** starting iteration: 2; err: [Inf, 0.26897302942697304, 0.17048862988657848] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26897302942697304, 0.17048862988657848, 0.16032962614038326] ***
*** starting iteration: 3; err: [Inf, 0.26897302942697304, 0.17048862988657848, 0.16032962614038326] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26897302942697304, 0.17048862988657848, 0.16032962614038326, 0.1559156166723798] ***
*** finished computation of 7 references, err: [Inf, 0.26897302942697304, 0.17048862988657848, 0.16032962614038326, 0.1559156166723798] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 115, 25]]
** centroid: 1, normalized-entropy: 0.6769418697808861, [(2, 115), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [52, 32, 0]]
** centroid: 2, normalized-entropy: 0.9587118829771317, [(1, 52), (2, 32)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [36, 33, 0]]
** centroid: 3, normalized-entropy: 0.9986359641585719, [(1, 36), (2, 33)]
*** center 4: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [109, 59, 0]]
** centroid: 6, normalized-entropy: 0.9351267602011794, [(1, 109), (2, 59)]
*** center 7: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23310452871474213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23310452871474213, 0.17680941647612608] ***
*** starting iteration: 2; err: [Inf, 0.23310452871474213, 0.17680941647612608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23310452871474213, 0.17680941647612608, 0.16246884826094615] ***
*** starting iteration: 3; err: [Inf, 0.23310452871474213, 0.17680941647612608, 0.16246884826094615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23310452871474213, 0.17680941647612608, 0.16246884826094615, 0.15674587327294398] ***
*** finished computation of 7 references, err: [Inf, 0.23310452871474213, 0.17680941647612608, 0.16246884826094615, 0.15674587327294398] ***
*** center 1: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 136, 23]]
** centroid: 2, normalized-entropy: 0.5962988584330506, [(2, 136), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [54, 1, 0]]
** centroid: 3, normalized-entropy: 0.13110652958234514, [(1, 54), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [85, 60, 0]]
** centroid: 4, normalized-entropy: 0.9784493292686188, [(1, 85), (2, 60)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [31, 49, 0]]
** centroid: 5, normalized-entropy: 0.9631672450918831, [(1, 31), (2, 49)]
*** center 6: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [62, 38, 0]]
** centroid: 7, normalized-entropy: 0.9580420222262997, [(1, 62), (2, 38)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24641356066168135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24641356066168135, 0.18779084035314095] ***
*** starting iteration: 2; err: [Inf, 0.24641356066168135, 0.18779084035314095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24641356066168135, 0.18779084035314095, 0.1697451196959301] ***
*** starting iteration: 3; err: [Inf, 0.24641356066168135, 0.18779084035314095, 0.1697451196959301] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24641356066168135, 0.18779084035314095, 0.1697451196959301, 0.16110773124233604] ***
*** finished computation of 7 references, err: [Inf, 0.24641356066168135, 0.18779084035314095, 0.1697451196959301, 0.16110773124233604] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [89, 82, 0]]
** centroid: 1, normalized-entropy: 0.9987908790105047, [(1, 89), (2, 82)]
*** center 2: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 128, 24]]
** centroid: 3, normalized-entropy: 0.6292492238560344, [(2, 128), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [55, 29, 0]]
** centroid: 4, normalized-entropy: 0.9297432191769048, [(1, 55), (2, 29)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [41, 36, 0]]
** centroid: 5, normalized-entropy: 0.9969562518473082, [(1, 41), (2, 36)]
*** center 6: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.39963703276449675] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39963703276449675, 0.3516548752082741] ***
*** finished computation of 3 references, err: [Inf, 0.39963703276449675, 0.3516548752082741] ***
*** center 1: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [107, 186, 25]]
** centroid: 2, normalized-entropy: 0.8011218019141889, [(1, 107), (2, 186), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [176, 53, 0]]
** centroid: 3, normalized-entropy: 0.7805149279571454, [(1, 176), (2, 53)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38248207912441046] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38248207912441046, 0.3159664875270612] ***
*** finished computation of 3 references, err: [Inf, 0.38248207912441046, 0.3159664875270612] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 186, 23]]
** centroid: 1, normalized-entropy: 0.500060261959327, [(2, 186), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [202, 85, 0]]
** centroid: 2, normalized-entropy: 0.8765551876946174, [(1, 202), (2, 85)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [158, 13, 0]]
** centroid: 3, normalized-entropy: 0.38800997367059686, [(1, 158), (2, 13)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3811480312278659] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3811480312278659, 0.3423643663743402] ***
*** finished computation of 3 references, err: [Inf, 0.3811480312278659, 0.3423643663743402] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [78, 153, 24]]
** centroid: 1, normalized-entropy: 0.8112502525139478, [(1, 78), (2, 153), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [131, 121, 0]]
** centroid: 2, normalized-entropy: 0.9988637928982028, [(1, 131), (2, 121)]
*** center 3: selecting labels [1] (freq >= 2) [from [159, 1, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2131015074162467] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2131015074162467, 0.17160382481517727] ***
*** starting iteration: 2; err: [Inf, 0.2131015074162467, 0.17160382481517727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2131015074162467, 0.17160382481517727, 0.1615340083903233] ***
*** starting iteration: 3; err: [Inf, 0.2131015074162467, 0.17160382481517727, 0.1615340083903233] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2131015074162467, 0.17160382481517727, 0.1615340083903233, 0.15572750352269918] ***
*** starting iteration: 4; err: [Inf, 0.2131015074162467, 0.17160382481517727, 0.1615340083903233, 0.15572750352269918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2131015074162467, 0.17160382481517727, 0.1615340083903233, 0.15572750352269918, 0.15212884933097628] ***
*** starting iteration: 5; err: [Inf, 0.2131015074162467, 0.17160382481517727, 0.1615340083903233, 0.15572750352269918, 0.15212884933097628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2131015074162467, 0.17160382481517727, 0.1615340083903233, 0.15572750352269918, 0.15212884933097628, 0.15037747902806858] ***
*** starting iteration: 6; err: [Inf, 0.2131015074162467, 0.17160382481517727, 0.1615340083903233, 0.15572750352269918, 0.15212884933097628, 0.15037747902806858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2131015074162467, 0.17160382481517727, 0.1615340083903233, 0.15572750352269918, 0.15212884933097628, 0.15037747902806858, 0.14953890745248366] ***
*** finished computation of 7 references, err: [Inf, 0.2131015074162467, 0.17160382481517727, 0.1615340083903233, 0.15572750352269918, 0.15212884933097628, 0.15037747902806858, 0.14953890745248366] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 88, 1]]
** centroid: 1, normalized-entropy: 0.08887969568457589, [(2, 88), (3, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [94, 20, 0]]
** centroid: 2, normalized-entropy: 0.6699960320994334, [(1, 94), (2, 20)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 80, 24]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(2, 80), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [90, 4, 0]]
** centroid: 4, normalized-entropy: 0.2538784402981617, [(1, 90), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [68, 11, 0]]
** centroid: 5, normalized-entropy: 0.5822463050121238, [(1, 68), (2, 11)]
*** center 6: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [58, 36, 0]]
** centroid: 7, normalized-entropy: 0.9601186626422924, [(1, 58), (2, 36)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20117841489512522] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20117841489512522, 0.16667264795721112] ***
*** starting iteration: 2; err: [Inf, 0.20117841489512522, 0.16667264795721112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20117841489512522, 0.16667264795721112, 0.15829902150105502] ***
*** starting iteration: 3; err: [Inf, 0.20117841489512522, 0.16667264795721112, 0.15829902150105502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20117841489512522, 0.16667264795721112, 0.15829902150105502, 0.15546205262842028] ***
*** starting iteration: 4; err: [Inf, 0.20117841489512522, 0.16667264795721112, 0.15829902150105502, 0.15546205262842028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20117841489512522, 0.16667264795721112, 0.15829902150105502, 0.15546205262842028, 0.1538727269612666] ***
*** starting iteration: 5; err: [Inf, 0.20117841489512522, 0.16667264795721112, 0.15829902150105502, 0.15546205262842028, 0.1538727269612666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20117841489512522, 0.16667264795721112, 0.15829902150105502, 0.15546205262842028, 0.1538727269612666, 0.15263981335256052] ***
*** starting iteration: 6; err: [Inf, 0.20117841489512522, 0.16667264795721112, 0.15829902150105502, 0.15546205262842028, 0.1538727269612666, 0.15263981335256052] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20117841489512522, 0.16667264795721112, 0.15829902150105502, 0.15546205262842028, 0.1538727269612666, 0.15263981335256052, 0.1515408351799582] ***
*** starting iteration: 7; err: [Inf, 0.20117841489512522, 0.16667264795721112, 0.15829902150105502, 0.15546205262842028, 0.1538727269612666, 0.15263981335256052, 0.1515408351799582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20117841489512522, 0.16667264795721112, 0.15829902150105502, 0.15546205262842028, 0.1538727269612666, 0.15263981335256052, 0.1515408351799582, 0.1511618019286906] ***
*** finished computation of 7 references, err: [Inf, 0.20117841489512522, 0.16667264795721112, 0.15829902150105502, 0.15546205262842028, 0.1538727269612666, 0.15263981335256052, 0.1515408351799582, 0.1511618019286906] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 120, 23]]
** centroid: 1, normalized-entropy: 0.6363133195592738, [(2, 120), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [71, 51, 0]]
** centroid: 2, normalized-entropy: 0.9805263709614215, [(1, 71), (2, 51)]
*** center 3: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [70, 18, 0]]
** centroid: 4, normalized-entropy: 0.7309263775906009, [(1, 70), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [6, 79, 0]]
** centroid: 5, normalized-entropy: 0.3681150054280774, [(1, 6), (2, 79)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [48, 16, 0]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(1, 48), (2, 16)]
*** center 7: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1996509187741029] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1996509187741029, 0.1617567134773948] ***
*** starting iteration: 2; err: [Inf, 0.1996509187741029, 0.1617567134773948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1996509187741029, 0.1617567134773948, 0.15674879023249538] ***
*** starting iteration: 3; err: [Inf, 0.1996509187741029, 0.1617567134773948, 0.15674879023249538] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1996509187741029, 0.1617567134773948, 0.15674879023249538, 0.1545003931424853] ***
*** starting iteration: 4; err: [Inf, 0.1996509187741029, 0.1617567134773948, 0.15674879023249538, 0.1545003931424853] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1996509187741029, 0.1617567134773948, 0.15674879023249538, 0.1545003931424853, 0.15386586819078657] ***
*** finished computation of 7 references, err: [Inf, 0.1996509187741029, 0.1617567134773948, 0.15674879023249538, 0.1545003931424853, 0.15386586819078657] ***
*** center 1: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [91, 71, 0]]
** centroid: 2, normalized-entropy: 0.9889774242246632, [(1, 91), (2, 71)]
*** center 3: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 103, 24]]
** centroid: 4, normalized-entropy: 0.6993252039597307, [(2, 103), (3, 24)]
*** center 5: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 76, 0]]
** centroid: 6, normalized-entropy: 0.23292785546981223, [(1, 3), (2, 76)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [26, 25, 0]]
** centroid: 7, normalized-entropy: 0.9997226475394071, [(1, 26), (2, 25)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3851733778801945] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3851733778801945, 0.239208669184956] ***
*** finished computation of 3 references, err: [Inf, 0.3851733778801945, 0.239208669184956] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [72, 169, 25]]
** centroid: 1, normalized-entropy: 0.7865879469825064, [(1, 72), (2, 169), (3, 25)]
*** center 2: selecting labels [1] (freq >= 1) [from [197, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [133, 70, 0]]
** centroid: 3, normalized-entropy: 0.9293636260137188, [(1, 133), (2, 70)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3196803884862781] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3196803884862781, 0.23588286452847107] ***
*** finished computation of 3 references, err: [Inf, 0.3196803884862781, 0.23588286452847107] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [241, 56, 0]]
** centroid: 1, normalized-entropy: 0.6984329064349525, [(1, 241), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [119, 59, 0]]
** centroid: 2, normalized-entropy: 0.916411780708005, [(1, 119), (2, 59)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 169, 23]]
** centroid: 3, normalized-entropy: 0.5287617209242789, [(2, 169), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3558074803254951] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3558074803254951, 0.23244331754859945] ***
*** finished computation of 3 references, err: [Inf, 0.3558074803254951, 0.23244331754859945] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [226, 34, 0]]
** centroid: 1, normalized-entropy: 0.5595440356886702, [(1, 226), (2, 34)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 181, 24]]
** centroid: 2, normalized-entropy: 0.5208888527768222, [(2, 181), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [142, 60, 0]]
** centroid: 3, normalized-entropy: 0.8776296673746861, [(1, 142), (2, 60)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 14)
[0.9559919200637763, 0.9390048731366097, 0.9330048611485737, 0.9270378162593732, 0.9209808611006215, 0.9189818561076045, 0.8940467413521306, 0.8859847871823919, 0.8419707132281983, 0.8260356164547781, 0.8080535625445805, 0.8038667409924894, 0.7640125155095214, 0.7629905354456253]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 1) => 0.9559919200637763
finished with 15
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.1959006435013023] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1959006435013023, 0.15270612907569403] ***
*** starting iteration: 2; err: [Inf, 0.1959006435013023, 0.15270612907569403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1959006435013023, 0.15270612907569403, 0.14830630579774828] ***
*** starting iteration: 3; err: [Inf, 0.1959006435013023, 0.15270612907569403, 0.14830630579774828] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1959006435013023, 0.15270612907569403, 0.14830630579774828, 0.14740674520774313] ***
*** finished computation of 7 references, err: [Inf, 0.1959006435013023, 0.15270612907569403, 0.14830630579774828, 0.14740674520774313] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [9, 104, 0]]
** centroid: 1, normalized-entropy: 0.40093068188727266, [(1, 9), (2, 104)]
*** center 2: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [72, 12, 0]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(1, 72), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [103, 4, 0]]
** centroid: 4, normalized-entropy: 0.2301627406079554, [(1, 103), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [91, 3, 0]]
** centroid: 5, normalized-entropy: 0.2039058755048202, [(1, 91), (2, 3)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 92, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 69, 23]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 69), (3, 23)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20289553323789994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20289553323789994, 0.15372832410887735] ***
*** starting iteration: 2; err: [Inf, 0.20289553323789994, 0.15372832410887735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20289553323789994, 0.15372832410887735, 0.1475105290315128] ***
*** starting iteration: 3; err: [Inf, 0.20289553323789994, 0.15372832410887735, 0.1475105290315128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20289553323789994, 0.15372832410887735, 0.1475105290315128, 0.14626989416238312] ***
*** starting iteration: 4; err: [Inf, 0.20289553323789994, 0.15372832410887735, 0.1475105290315128, 0.14626989416238312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20289553323789994, 0.15372832410887735, 0.1475105290315128, 0.14626989416238312, 0.14599056906023486] ***
*** finished computation of 7 references, err: [Inf, 0.20289553323789994, 0.15372832410887735, 0.1475105290315128, 0.14626989416238312, 0.14599056906023486] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 37, 0]]
** centroid: 1, normalized-entropy: 0.950672092687066, [(1, 63), (2, 37)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [97, 5, 0]]
** centroid: 2, normalized-entropy: 0.28221763445592507, [(1, 97), (2, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 82, 25]]
** centroid: 4, normalized-entropy: 0.7843112002044088, [(2, 82), (3, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 32, 0]]
** centroid: 5, normalized-entropy: 0.9252253278054431, [(1, 62), (2, 32)]
*** center 6: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 83, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18943864732214166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18943864732214166, 0.15169912011179698] ***
*** starting iteration: 2; err: [Inf, 0.18943864732214166, 0.15169912011179698] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18943864732214166, 0.15169912011179698, 0.14883894542570056] ***
*** starting iteration: 3; err: [Inf, 0.18943864732214166, 0.15169912011179698, 0.14883894542570056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18943864732214166, 0.15169912011179698, 0.14883894542570056, 0.14815463239642634] ***
*** finished computation of 7 references, err: [Inf, 0.18943864732214166, 0.15169912011179698, 0.14883894542570056, 0.14815463239642634] ***
*** center 1: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 77, 24]]
** centroid: 2, normalized-entropy: 0.7910662980902586, [(2, 77), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 27, 0]]
** centroid: 3, normalized-entropy: 0.9305861291319927, [(1, 51), (2, 27)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [16, 74, 0]]
** centroid: 4, normalized-entropy: 0.6751914401458716, [(1, 16), (2, 74)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [12, 97, 0]]
** centroid: 5, normalized-entropy: 0.5001926210998139, [(1, 12), (2, 97)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9559919200637763, 0.9390048731366097, 0.9369729010447573, 0.9330048611485737, 0.9270378162593732, 0.9209808611006215, 0.9189818561076045, 0.8940467413521306, 0.8859847871823919, 0.8419707132281983, 0.8260356164547781, 0.8080535625445805, 0.8038667409924894, 0.7640125155095214, 0.7629905354456253]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 1) => 0.9559919200637763
finished with 16
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.3340435798962352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3340435798962352, 0.22977120446197846] ***
*** starting iteration: 2; err: [Inf, 0.3340435798962352, 0.22977120446197846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3340435798962352, 0.22977120446197846, 0.20246308623301285] ***
*** starting iteration: 3; err: [Inf, 0.3340435798962352, 0.22977120446197846, 0.20246308623301285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3340435798962352, 0.22977120446197846, 0.20246308623301285, 0.1945302553804222] ***
*** finished computation of 7 references, err: [Inf, 0.3340435798962352, 0.22977120446197846, 0.20246308623301285, 0.1945302553804222] ***
*** center 1: selecting labels [1] (freq >= 1) [from [125, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 55, 25]]
** centroid: 2, normalized-entropy: 0.8960382325345574, [(2, 55), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [32, 67, 0]]
** centroid: 3, normalized-entropy: 0.9078619154263698, [(1, 32), (2, 67)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [60, 16, 0]]
** centroid: 4, normalized-entropy: 0.7424875695421234, [(1, 60), (2, 16)]
*** center 5: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 101, 0]]
** centroid: 7, normalized-entropy: 0.27425064105029284, [(1, 5), (2, 101)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22049028130815082] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22049028130815082, 0.19713643652064422] ***
*** starting iteration: 2; err: [Inf, 0.22049028130815082, 0.19713643652064422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22049028130815082, 0.19713643652064422, 0.19136634507081074] ***
*** starting iteration: 3; err: [Inf, 0.22049028130815082, 0.19713643652064422, 0.19136634507081074] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22049028130815082, 0.19713643652064422, 0.19136634507081074, 0.18649677156695518] ***
*** finished computation of 7 references, err: [Inf, 0.22049028130815082, 0.19713643652064422, 0.19136634507081074, 0.18649677156695518] ***
*** center 1: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [42, 38, 0]]
** centroid: 2, normalized-entropy: 0.99819587904281, [(1, 42), (2, 38)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [64, 56, 0]]
** centroid: 3, normalized-entropy: 0.9967916319816367, [(1, 64), (2, 56)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 116, 23]]
** centroid: 4, normalized-entropy: 0.6472308538450208, [(2, 116), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [1, 74, 0]]
** centroid: 5, normalized-entropy: 0.10215803640865054, [(1, 1), (2, 74)]
*** center 6: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.35137900678340395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35137900678340395, 0.22308745709313513] ***
*** starting iteration: 2; err: [Inf, 0.35137900678340395, 0.22308745709313513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35137900678340395, 0.22308745709313513, 0.21277009935161542] ***
*** starting iteration: 3; err: [Inf, 0.35137900678340395, 0.22308745709313513, 0.21277009935161542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35137900678340395, 0.22308745709313513, 0.21277009935161542, 0.2035698838213618] ***
*** finished computation of 7 references, err: [Inf, 0.35137900678340395, 0.22308745709313513, 0.21277009935161542, 0.2035698838213618] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 72, 24]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 72), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [18, 104, 0]]
** centroid: 2, normalized-entropy: 0.603652249754401, [(1, 18), (2, 104)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [15, 49, 0]]
** centroid: 3, normalized-entropy: 0.7855602922535471, [(1, 15), (2, 49)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [19, 50, 0]]
** centroid: 4, normalized-entropy: 0.849054424254048, [(1, 19), (2, 50)]
*** center 5: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [126, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9559919200637763, 0.9390048731366097, 0.9369729010447573, 0.9330048611485737, 0.9310118501735268, 0.9270378162593732, 0.9209808611006215, 0.9189818561076045, 0.8940467413521306, 0.8859847871823919, 0.8419707132281983, 0.8260356164547781, 0.8080535625445805, 0.8038667409924894, 0.7640125155095214, 0.7629905354456253]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 1) => 0.9559919200637763
finished with 17
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.2766193618883264] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2766193618883264, 0.24159468504300974] ***
*** finished computation of 3 references, err: [Inf, 0.2766193618883264, 0.24159468504300974] ***
*** center 1: selecting labels [1] (freq >= 2) [from [191, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [77, 102, 9]]
** centroid: 2, normalized-entropy: 0.7671952453529782, [(1, 77), (2, 102), (3, 9)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [134, 137, 16]]
** centroid: 3, normalized-entropy: 0.7915023454844817, [(1, 134), (2, 137), (3, 16)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.26721439734687735] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26721439734687735, 0.23245829116061575] ***
*** finished computation of 3 references, err: [Inf, 0.26721439734687735, 0.23245829116061575] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [164, 54, 0]]
** centroid: 1, normalized-entropy: 0.8076226097576925, [(1, 164), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [196, 46, 0]]
** centroid: 2, normalized-entropy: 0.7016443140299524, [(1, 196), (2, 46)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 184, 23]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(2, 184), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3385940464478785] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3385940464478785, 0.25606571027877806] ***
*** finished computation of 3 references, err: [Inf, 0.3385940464478785, 0.25606571027877806] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [127, 93, 0]]
** centroid: 1, normalized-entropy: 0.9827018741923325, [(1, 127), (2, 93)]
*** center 2: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [121, 182, 24]]
** centroid: 3, normalized-entropy: 0.8061986349758762, [(1, 121), (2, 182), (3, 24)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 17)
[0.9559919200637763, 0.9390048731366097, 0.9369729010447573, 0.9330048611485737, 0.9310118501735268, 0.9270378162593732, 0.9209808611006215, 0.9189818561076045, 0.8940467413521306, 0.8859847871823919, 0.8760107412802024, 0.8419707132281983, 0.8260356164547781, 0.8080535625445805, 0.8038667409924894, 0.7640125155095214, 0.7629905354456253]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 1) => 0.9559919200637763
finished with 18
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.5344623902608743] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5344623902608743, 0.28867823717559965] ***
*** finished computation of 3 references, err: [Inf, 0.5344623902608743, 0.28867823717559965] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [233, 1, 0]]
** centroid: 1, normalized-entropy: 0.03978620802593758, [(1, 233), (2, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [6, 208, 23]]
** centroid: 2, normalized-entropy: 0.3950338735187106, [(1, 6), (2, 208), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [121, 75, 0]]
** centroid: 3, normalized-entropy: 0.959894265046754, [(1, 121), (2, 75)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4200015617660184] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4200015617660184, 0.30031677382695177] ***
*** finished computation of 3 references, err: [Inf, 0.4200015617660184, 0.30031677382695177] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [239, 42, 0]]
** centroid: 1, normalized-entropy: 0.6085028367187664, [(1, 239), (2, 42)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 175, 24]]
** centroid: 2, normalized-entropy: 0.5310917331669389, [(2, 175), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [129, 58, 0]]
** centroid: 3, normalized-entropy: 0.8933585579250755, [(1, 129), (2, 58)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38718093878116916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38718093878116916, 0.31057573573289066] ***
*** finished computation of 3 references, err: [Inf, 0.38718093878116916, 0.31057573573289066] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [117, 165, 25]]
** centroid: 1, normalized-entropy: 0.8243002184901786, [(1, 117), (2, 165), (3, 25)]
*** center 2: selecting labels [1] (freq >= 1) [from [161, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [124, 74, 0]]
** centroid: 3, normalized-entropy: 0.9534985819759996, [(1, 124), (2, 74)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 18)
[0.9559919200637763, 0.9390048731366097, 0.9369729010447573, 0.9330048611485737, 0.9310118501735268, 0.9270378162593732, 0.9209808611006215, 0.9189818561076045, 0.8960157762552973, 0.8940467413521306, 0.8859847871823919, 0.8760107412802024, 0.8419707132281983, 0.8260356164547781, 0.8080535625445805, 0.8038667409924894, 0.7640125155095214, 0.7629905354456253]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 1) => 0.9559919200637763
finished with 19
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.24471756416951884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24471756416951884, 0.168541706282528] ***
*** starting iteration: 2; err: [Inf, 0.24471756416951884, 0.168541706282528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24471756416951884, 0.168541706282528, 0.15584384159998851] ***
*** starting iteration: 3; err: [Inf, 0.24471756416951884, 0.168541706282528, 0.15584384159998851] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24471756416951884, 0.168541706282528, 0.15584384159998851, 0.15226366394828703] ***
*** starting iteration: 4; err: [Inf, 0.24471756416951884, 0.168541706282528, 0.15584384159998851, 0.15226366394828703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24471756416951884, 0.168541706282528, 0.15584384159998851, 0.15226366394828703, 0.15029351946942554] ***
*** starting iteration: 5; err: [Inf, 0.24471756416951884, 0.168541706282528, 0.15584384159998851, 0.15226366394828703, 0.15029351946942554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24471756416951884, 0.168541706282528, 0.15584384159998851, 0.15226366394828703, 0.15029351946942554, 0.14941514730900973] ***
*** finished computation of 7 references, err: [Inf, 0.24471756416951884, 0.168541706282528, 0.15584384159998851, 0.15226366394828703, 0.15029351946942554, 0.14941514730900973] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [72, 24, 0]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(1, 72), (2, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [102, 3, 0]]
** centroid: 3, normalized-entropy: 0.18717625687320805, [(1, 102), (2, 3)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 77, 25]]
** centroid: 4, normalized-entropy: 0.8034158480707552, [(2, 77), (3, 25)]
*** center 5: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [46, 57, 0]]
** centroid: 6, normalized-entropy: 0.9917570244063947, [(1, 46), (2, 57)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 78, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1771764173381857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1771764173381857, 0.15561090038204076] ***
*** starting iteration: 2; err: [Inf, 0.1771764173381857, 0.15561090038204076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1771764173381857, 0.15561090038204076, 0.15154052557105357] ***
*** starting iteration: 3; err: [Inf, 0.1771764173381857, 0.15561090038204076, 0.15154052557105357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1771764173381857, 0.15561090038204076, 0.15154052557105357, 0.15014706193043598] ***
*** starting iteration: 4; err: [Inf, 0.1771764173381857, 0.15561090038204076, 0.15154052557105357, 0.15014706193043598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1771764173381857, 0.15561090038204076, 0.15154052557105357, 0.15014706193043598, 0.14902699620300985] ***
*** starting iteration: 5; err: [Inf, 0.1771764173381857, 0.15561090038204076, 0.15154052557105357, 0.15014706193043598, 0.14902699620300985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1771764173381857, 0.15561090038204076, 0.15154052557105357, 0.15014706193043598, 0.14902699620300985, 0.14860436053195414] ***
*** finished computation of 7 references, err: [Inf, 0.1771764173381857, 0.15561090038204076, 0.15154052557105357, 0.15014706193043598, 0.14902699620300985, 0.14860436053195414] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [60, 20, 0]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(1, 60), (2, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [10, 104, 0]]
** centroid: 3, normalized-entropy: 0.4288109647301171, [(1, 10), (2, 104)]
*** center 4: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 56, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 56), (2, 56)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 104, 23]]
** centroid: 6, normalized-entropy: 0.6824826735754346, [(2, 104), (3, 23)]
*** center 7: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18766164634065394] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18766164634065394, 0.15306270948570708] ***
*** starting iteration: 2; err: [Inf, 0.18766164634065394, 0.15306270948570708] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18766164634065394, 0.15306270948570708, 0.15049139084538787] ***
*** starting iteration: 3; err: [Inf, 0.18766164634065394, 0.15306270948570708, 0.15049139084538787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18766164634065394, 0.15306270948570708, 0.15049139084538787, 0.14959271707902963] ***
*** finished computation of 7 references, err: [Inf, 0.18766164634065394, 0.15306270948570708, 0.15049139084538787, 0.14959271707902963] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [71, 45, 0]]
** centroid: 1, normalized-entropy: 0.9634513846131947, [(1, 71), (2, 45)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 20, 0]]
** centroid: 2, normalized-entropy: 0.8314743880097292, [(1, 56), (2, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [2, 97, 0]]
** centroid: 3, normalized-entropy: 0.14257333025989857, [(1, 2), (2, 97)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 98, 24]]
** centroid: 4, normalized-entropy: 0.7153220528038851, [(2, 98), (3, 24)]
*** center 5: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [77, 15, 0]]
** centroid: 7, normalized-entropy: 0.6415410585827175, [(1, 77), (2, 15)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 19)
[0.9559919200637763, 0.9390048731366097, 0.9369729010447573, 0.9330048611485737, 0.9310118501735268, 0.9270378162593732, 0.9209808611006215, 0.9189818561076045, 0.9019978061894229, 0.8960157762552973, 0.8940467413521306, 0.8859847871823919, 0.8760107412802024, 0.8419707132281983, 0.8260356164547781, 0.8080535625445805, 0.8038667409924894, 0.7640125155095214, 0.7629905354456253]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 1) => 0.9559919200637763
finished with 19
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 19)
[0.9559919200637763, 0.9390048731366097, 0.9369729010447573, 0.9330048611485737, 0.9310118501735268, 0.9270378162593732, 0.9209808611006215, 0.9189818561076045, 0.9019978061894229, 0.8960157762552973, 0.8940467413521306, 0.8859847871823919, 0.8760107412802024, 0.8419707132281983, 0.8260356164547781, 0.8080535625445805, 0.8038667409924894, 0.7640125155095214, 0.7629905354456253]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 1) => 0.9559919200637763
finished with 20
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 20)
[0.9559919200637763, 0.9390048731366097, 0.9369729010447573, 0.9330048611485737, 0.9310118501735268, 0.9270378162593732, 0.9209808611006215, 0.9189818561076045, 0.9019978061894229, 0.8960157762552973, 0.8940467413521306, 0.8859847871823919, 0.8820137502772233, 0.8760107412802024, 0.8419707132281983, 0.8260356164547781, 0.8080535625445805, 0.8038667409924894, 0.7640125155095214, 0.7629905354456253]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.3, 1) => 0.9559919200637763
finished with 20
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.21510175809822976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21510175809822976, 0.16875510508753358] ***
*** starting iteration: 2; err: [Inf, 0.21510175809822976, 0.16875510508753358] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21510175809822976, 0.16875510508753358, 0.1589135934386868] ***
*** starting iteration: 3; err: [Inf, 0.21510175809822976, 0.16875510508753358, 0.1589135934386868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21510175809822976, 0.16875510508753358, 0.1589135934386868, 0.15644961346313357] ***
*** finished computation of 7 references, err: [Inf, 0.21510175809822976, 0.16875510508753358, 0.1589135934386868, 0.15644961346313357] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 175, 36]]
** centroid: 1, normalized-entropy: 0.6591122473679398, [(2, 175), (3, 36)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [98, 14, 0]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(1, 98), (2, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 77, 0]]
** centroid: 3, normalized-entropy: 0.9888642043472529, [(1, 60), (2, 77)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [125, 62, 0]]
** centroid: 4, normalized-entropy: 0.9165029795307001, [(1, 125), (2, 62)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [53, 71, 0]]
** centroid: 5, normalized-entropy: 0.9847460718652463, [(1, 53), (2, 71)]
*** center 6: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [125, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24260398752917536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24260398752917536, 0.17357064417563378] ***
*** starting iteration: 2; err: [Inf, 0.24260398752917536, 0.17357064417563378] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24260398752917536, 0.17357064417563378, 0.16525171364936977] ***
*** starting iteration: 3; err: [Inf, 0.24260398752917536, 0.17357064417563378, 0.16525171364936977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24260398752917536, 0.17357064417563378, 0.16525171364936977, 0.15880384033173323] ***
*** finished computation of 7 references, err: [Inf, 0.24260398752917536, 0.17357064417563378, 0.16525171364936977, 0.15880384033173323] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [73, 41, 0]]
** centroid: 1, normalized-entropy: 0.9423915493613846, [(1, 73), (2, 41)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 98, 18]]
** centroid: 2, normalized-entropy: 0.6226343162547099, [(2, 98), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 35, 0]]
** centroid: 3, normalized-entropy: 0.9844961311800012, [(1, 47), (2, 35)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [57, 24, 0]]
** centroid: 4, normalized-entropy: 0.876716288999464, [(1, 57), (2, 24)]
*** center 5: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22016051337867976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22016051337867976, 0.18675826769880952] ***
*** starting iteration: 2; err: [Inf, 0.22016051337867976, 0.18675826769880952] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22016051337867976, 0.18675826769880952, 0.1711026726104319] ***
*** starting iteration: 3; err: [Inf, 0.22016051337867976, 0.18675826769880952, 0.1711026726104319] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22016051337867976, 0.18675826769880952, 0.1711026726104319, 0.15724156364612282] ***
*** finished computation of 7 references, err: [Inf, 0.22016051337867976, 0.18675826769880952, 0.1711026726104319, 0.15724156364612282] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 87, 15]]
** centroid: 1, normalized-entropy: 0.6024308020404452, [(2, 87), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 9, 0]]
** centroid: 3, normalized-entropy: 0.5801954953637372, [(1, 56), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [7, 73, 0]]
** centroid: 4, normalized-entropy: 0.4280696292293062, [(1, 7), (2, 73)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 27, 0]]
** centroid: 5, normalized-entropy: 0.8651214227512075, [(1, 67), (2, 27)]
*** center 6: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20771461802441626] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20771461802441626, 0.16393134028278292] ***
*** starting iteration: 2; err: [Inf, 0.20771461802441626, 0.16393134028278292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20771461802441626, 0.16393134028278292, 0.15538213744480162] ***
*** starting iteration: 3; err: [Inf, 0.20771461802441626, 0.16393134028278292, 0.15538213744480162] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20771461802441626, 0.16393134028278292, 0.15538213744480162, 0.1525739808655344] ***
*** finished computation of 7 references, err: [Inf, 0.20771461802441626, 0.16393134028278292, 0.15538213744480162, 0.1525739808655344] ***
*** center 1: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [15, 35, 0]]
** centroid: 4, normalized-entropy: 0.8812908992306927, [(1, 15), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [8, 69, 0]]
** centroid: 5, normalized-entropy: 0.481225663841737, [(1, 8), (2, 69)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 53, 21]]
** centroid: 6, normalized-entropy: 0.8605553930586318, [(2, 53), (3, 21)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [70, 50, 0]]
** centroid: 7, normalized-entropy: 0.9798687566511527, [(1, 70), (2, 50)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3210733472015709] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3210733472015709, 0.22374573030136527] ***
*** starting iteration: 2; err: [Inf, 0.3210733472015709, 0.22374573030136527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3210733472015709, 0.22374573030136527, 0.18431847548671068] ***
*** starting iteration: 3; err: [Inf, 0.3210733472015709, 0.22374573030136527, 0.18431847548671068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3210733472015709, 0.22374573030136527, 0.18431847548671068, 0.16672970771230758] ***
*** finished computation of 7 references, err: [Inf, 0.3210733472015709, 0.22374573030136527, 0.18431847548671068, 0.16672970771230758] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [82, 35, 0]]
** centroid: 1, normalized-entropy: 0.8802436087136892, [(1, 82), (2, 35)]
*** center 2: selecting labels [1] (freq >= 1) [from [124, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 22, 14]]
** centroid: 3, normalized-entropy: 0.9640787648082293, [(2, 22), (3, 14)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [73, 24, 0]]
** centroid: 4, normalized-entropy: 0.8071675554288905, [(1, 73), (2, 24)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 28, 1]]
** centroid: 5, normalized-entropy: 0.21639693245126485, [(2, 28), (3, 1)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 54, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 43, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18659736066684127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18659736066684127, 0.16024308558925987] ***
*** starting iteration: 2; err: [Inf, 0.18659736066684127, 0.16024308558925987] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18659736066684127, 0.16024308558925987, 0.15675879503507167] ***
*** starting iteration: 3; err: [Inf, 0.18659736066684127, 0.16024308558925987, 0.15675879503507167] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18659736066684127, 0.16024308558925987, 0.15675879503507167, 0.1552320249415934] ***
*** finished computation of 7 references, err: [Inf, 0.18659736066684127, 0.16024308558925987, 0.15675879503507167, 0.1552320249415934] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 65, 18]]
** centroid: 1, normalized-entropy: 0.7544062039636575, [(2, 65), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [2, 65, 0]]
** centroid: 3, normalized-entropy: 0.19364280468389852, [(1, 2), (2, 65)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [46, 2, 0]]
** centroid: 4, normalized-entropy: 0.24988229283318547, [(1, 46), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [36, 28, 0]]
** centroid: 5, normalized-entropy: 0.9886994082884974, [(1, 36), (2, 28)]
*** center 6: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [43, 54, 0]]
** centroid: 7, normalized-entropy: 0.9907034651869471, [(1, 43), (2, 54)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20241611087415368] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20241611087415368, 0.15450867012236266] ***
*** starting iteration: 2; err: [Inf, 0.20241611087415368, 0.15450867012236266] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20241611087415368, 0.15450867012236266, 0.14634806527756156] ***
*** starting iteration: 3; err: [Inf, 0.20241611087415368, 0.15450867012236266, 0.14634806527756156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20241611087415368, 0.15450867012236266, 0.14634806527756156, 0.14468009866587817] ***
*** finished computation of 7 references, err: [Inf, 0.20241611087415368, 0.15450867012236266, 0.14634806527756156, 0.14468009866587817] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [73, 5, 0]]
** centroid: 1, normalized-entropy: 0.34351974100740135, [(1, 73), (2, 5)]
*** center 2: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 58, 21]]
** centroid: 3, normalized-entropy: 0.8354065254460503, [(2, 58), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [68, 3, 0]]
** centroid: 4, normalized-entropy: 0.25253077151613923, [(1, 68), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [5, 66, 0]]
** centroid: 5, normalized-entropy: 0.3674984948272913, [(1, 5), (2, 66)]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 68, 0]]
** centroid: 7, normalized-entropy: 0.18717625687320805, [(1, 2), (2, 68)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27571407419559546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27571407419559546, 0.1991101873733569] ***
*** starting iteration: 2; err: [Inf, 0.27571407419559546, 0.1991101873733569] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27571407419559546, 0.1991101873733569, 0.18285762167721986] ***
*** starting iteration: 3; err: [Inf, 0.27571407419559546, 0.1991101873733569, 0.18285762167721986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27571407419559546, 0.1991101873733569, 0.18285762167721986, 0.17151868251804261] ***
*** finished computation of 7 references, err: [Inf, 0.27571407419559546, 0.1991101873733569, 0.18285762167721986, 0.17151868251804261] ***
*** center 1: selecting labels [1] (freq >= 1) [from [118, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 90, 6]]
** centroid: 3, normalized-entropy: 0.3372900666170139, [(2, 90), (3, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [43, 17, 0]]
** centroid: 4, normalized-entropy: 0.8599530497177523, [(1, 43), (2, 17)]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [21, 88, 8]]
** centroid: 5, normalized-entropy: 0.642599386467205, [(1, 21), (2, 88), (3, 8)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [15, 12, 0]]
** centroid: 6, normalized-entropy: 0.9910760598382222, [(1, 15), (2, 12)]
*** center 7: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26402074841875584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26402074841875584, 0.1696072028130293] ***
*** starting iteration: 2; err: [Inf, 0.26402074841875584, 0.1696072028130293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26402074841875584, 0.1696072028130293, 0.15691743185929954] ***
*** starting iteration: 3; err: [Inf, 0.26402074841875584, 0.1696072028130293, 0.15691743185929954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26402074841875584, 0.1696072028130293, 0.15691743185929954, 0.15413086877204477] ***
*** finished computation of 7 references, err: [Inf, 0.26402074841875584, 0.1696072028130293, 0.15691743185929954, 0.15413086877204477] ***
*** center 1: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 72, 15]]
** centroid: 2, normalized-entropy: 0.6631968402398286, [(2, 72), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [21, 32, 0]]
** centroid: 3, normalized-entropy: 0.9687003436508602, [(1, 21), (2, 32)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [71, 9, 0]]
** centroid: 4, normalized-entropy: 0.5074109636646968, [(1, 71), (2, 9)]
*** center 5: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [81, 8, 0]]
** centroid: 6, normalized-entropy: 0.43609466429612137, [(1, 81), (2, 8)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 70, 5]]
** centroid: 7, normalized-entropy: 0.3533593350214213, [(2, 70), (3, 5)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2171348103862256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2171348103862256, 0.1564974947925657] ***
*** starting iteration: 2; err: [Inf, 0.2171348103862256, 0.1564974947925657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2171348103862256, 0.1564974947925657, 0.14728928927890955] ***
*** starting iteration: 3; err: [Inf, 0.2171348103862256, 0.1564974947925657, 0.14728928927890955] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2171348103862256, 0.1564974947925657, 0.14728928927890955, 0.1450651967357844] ***
*** finished computation of 7 references, err: [Inf, 0.2171348103862256, 0.1564974947925657, 0.14728928927890955, 0.1450651967357844] ***
*** center 1: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [61, 45, 0]]
** centroid: 2, normalized-entropy: 0.9835018986559216, [(1, 61), (2, 45)]
*** center 3: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [27, 38, 0]]
** centroid: 5, normalized-entropy: 0.9792415350396869, [(1, 27), (2, 38)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 59, 0]]
** centroid: 6, normalized-entropy: 0.12229159706937456, [(1, 1), (2, 59)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 63, 17]]
** centroid: 7, normalized-entropy: 0.7462343013654809, [(2, 63), (3, 17)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22531197287049146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22531197287049146, 0.16247900764551013] ***
*** starting iteration: 2; err: [Inf, 0.22531197287049146, 0.16247900764551013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22531197287049146, 0.16247900764551013, 0.15545687716361134] ***
*** starting iteration: 3; err: [Inf, 0.22531197287049146, 0.16247900764551013, 0.15545687716361134] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22531197287049146, 0.16247900764551013, 0.15545687716361134, 0.15342984945513308] ***
*** finished computation of 7 references, err: [Inf, 0.22531197287049146, 0.16247900764551013, 0.15545687716361134, 0.15342984945513308] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [66, 1, 0]]
** centroid: 1, normalized-entropy: 0.11190990870168394, [(1, 66), (2, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 78, 15]]
** centroid: 3, normalized-entropy: 0.6373874992221911, [(2, 78), (3, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [63, 37, 0]]
** centroid: 4, normalized-entropy: 0.950672092687066, [(1, 63), (2, 37)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [6, 79, 0]]
** centroid: 5, normalized-entropy: 0.3681150054280774, [(1, 6), (2, 79)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [22, 1, 0]]
** centroid: 6, normalized-entropy: 0.2580186686648155, [(1, 22), (2, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21422114629857242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21422114629857242, 0.16710332687199117] ***
*** starting iteration: 2; err: [Inf, 0.21422114629857242, 0.16710332687199117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21422114629857242, 0.16710332687199117, 0.15807344129122794] ***
*** starting iteration: 3; err: [Inf, 0.21422114629857242, 0.16710332687199117, 0.15807344129122794] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21422114629857242, 0.16710332687199117, 0.15807344129122794, 0.1547007819809951] ***
*** finished computation of 7 references, err: [Inf, 0.21422114629857242, 0.16710332687199117, 0.15807344129122794, 0.1547007819809951] ***
*** center 1: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [53, 18, 0]]
** centroid: 2, normalized-entropy: 0.8168114277045246, [(1, 53), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 84, 4]]
** centroid: 3, normalized-entropy: 0.2667649878030262, [(2, 84), (3, 4)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 44, 18]]
** centroid: 4, normalized-entropy: 0.8691375806126381, [(2, 44), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [48, 5, 0]]
** centroid: 5, normalized-entropy: 0.4507913883546652, [(1, 48), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [38, 39, 0]]
** centroid: 6, normalized-entropy: 0.9998783322990061, [(1, 38), (2, 39)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [47, 15, 0]]
** centroid: 7, normalized-entropy: 0.7982441335646697, [(1, 47), (2, 15)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18793413322139532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18793413322139532, 0.1568806628342718] ***
*** starting iteration: 2; err: [Inf, 0.18793413322139532, 0.1568806628342718] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18793413322139532, 0.1568806628342718, 0.15187817388493569] ***
*** starting iteration: 3; err: [Inf, 0.18793413322139532, 0.1568806628342718, 0.15187817388493569] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18793413322139532, 0.1568806628342718, 0.15187817388493569, 0.1489336064606905] ***
*** finished computation of 7 references, err: [Inf, 0.18793413322139532, 0.1568806628342718, 0.15187817388493569, 0.1489336064606905] ***
*** center 1: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [53, 22, 0]]
** centroid: 2, normalized-entropy: 0.8729882944709463, [(1, 53), (2, 22)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 102, 16]]
** centroid: 3, normalized-entropy: 0.572580465623769, [(2, 102), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 33, 0]]
** centroid: 5, normalized-entropy: 0.9964196342978481, [(1, 38), (2, 33)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [61, 1, 0]]
** centroid: 6, normalized-entropy: 0.11911602665564841, [(1, 61), (2, 1)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [18, 41, 0]]
** centroid: 7, normalized-entropy: 0.8874179270685693, [(1, 18), (2, 41)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24722239115834235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24722239115834235, 0.18569081825204192] ***
*** starting iteration: 2; err: [Inf, 0.24722239115834235, 0.18569081825204192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24722239115834235, 0.18569081825204192, 0.16501573483087123] ***
*** starting iteration: 3; err: [Inf, 0.24722239115834235, 0.18569081825204192, 0.16501573483087123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24722239115834235, 0.18569081825204192, 0.16501573483087123, 0.15679037263663487] ***
*** finished computation of 7 references, err: [Inf, 0.24722239115834235, 0.18569081825204192, 0.16501573483087123, 0.15679037263663487] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 53, 17]]
** centroid: 1, normalized-entropy: 0.7997594113291759, [(2, 53), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [80, 26, 0]]
** centroid: 2, normalized-entropy: 0.8037159237834126, [(1, 80), (2, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [11, 21, 0]]
** centroid: 4, normalized-entropy: 0.9283620723948678, [(1, 11), (2, 21)]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [2, 89, 3]]
** centroid: 5, normalized-entropy: 0.22173951819783372, [(1, 2), (2, 89), (3, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [63, 3, 0]]
** centroid: 6, normalized-entropy: 0.2667649878030262, [(1, 63), (2, 3)]
*** center 7: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19133204344473778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19133204344473778, 0.158667441656813] ***
*** starting iteration: 2; err: [Inf, 0.19133204344473778, 0.158667441656813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19133204344473778, 0.158667441656813, 0.15251717576757073] ***
*** starting iteration: 3; err: [Inf, 0.19133204344473778, 0.158667441656813, 0.15251717576757073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19133204344473778, 0.158667441656813, 0.15251717576757073, 0.14968985910434277] ***
*** finished computation of 7 references, err: [Inf, 0.19133204344473778, 0.158667441656813, 0.15251717576757073, 0.14968985910434277] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [65, 22, 0]]
** centroid: 1, normalized-entropy: 0.8158009273789572, [(1, 65), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [31, 28, 0]]
** centroid: 2, normalized-entropy: 0.9981341775041118, [(1, 31), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 57, 15]]
** centroid: 3, normalized-entropy: 0.7382848661434506, [(2, 57), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 61, 3]]
** centroid: 5, normalized-entropy: 0.2729708579140699, [(2, 61), (3, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [35, 35, 0]]
** centroid: 6, normalized-entropy: 1.0, [(1, 35), (2, 35)]
*** center 7: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24851949832960962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24851949832960962, 0.1734739885739982] ***
*** starting iteration: 2; err: [Inf, 0.24851949832960962, 0.1734739885739982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24851949832960962, 0.1734739885739982, 0.15807234164327383] ***
*** starting iteration: 3; err: [Inf, 0.24851949832960962, 0.1734739885739982, 0.15807234164327383] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24851949832960962, 0.1734739885739982, 0.15807234164327383, 0.15322277653962374] ***
*** finished computation of 7 references, err: [Inf, 0.24851949832960962, 0.1734739885739982, 0.15807234164327383, 0.15322277653962374] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [49, 40, 0]]
** centroid: 1, normalized-entropy: 0.9926108898749407, [(1, 49), (2, 40)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 64, 18]]
** centroid: 2, normalized-entropy: 0.7592757847892834, [(2, 64), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [14, 55, 0]]
** centroid: 3, normalized-entropy: 0.7276874545656657, [(1, 14), (2, 55)]
*** center 4: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [12, 31, 0]]
** centroid: 7, normalized-entropy: 0.8541802051521676, [(1, 12), (2, 31)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2588198113385588] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2588198113385588, 0.16508719197660685] ***
*** starting iteration: 2; err: [Inf, 0.2588198113385588, 0.16508719197660685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2588198113385588, 0.16508719197660685, 0.15784239870123565] ***
*** starting iteration: 3; err: [Inf, 0.2588198113385588, 0.16508719197660685, 0.15784239870123565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2588198113385588, 0.16508719197660685, 0.15784239870123565, 0.15541723490320147] ***
*** finished computation of 7 references, err: [Inf, 0.2588198113385588, 0.16508719197660685, 0.15784239870123565, 0.15541723490320147] ***
*** center 1: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 47, 0]]
** centroid: 2, normalized-entropy: 0.9965322634876737, [(1, 54), (2, 47)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 74, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 63, 23]]
** centroid: 4, normalized-entropy: 0.8377698690066789, [(2, 63), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 10, 0]]
** centroid: 5, normalized-entropy: 0.5713549744279549, [(1, 64), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [80, 11, 0]]
** centroid: 6, normalized-entropy: 0.5318826028800231, [(1, 80), (2, 11)]
*** center 7: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22624485973548145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22624485973548145, 0.15851297669112682] ***
*** starting iteration: 2; err: [Inf, 0.22624485973548145, 0.15851297669112682] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22624485973548145, 0.15851297669112682, 0.14939861151017247] ***
*** starting iteration: 3; err: [Inf, 0.22624485973548145, 0.15851297669112682, 0.14939861151017247] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22624485973548145, 0.15851297669112682, 0.14939861151017247, 0.14557733216881752] ***
*** finished computation of 7 references, err: [Inf, 0.22624485973548145, 0.15851297669112682, 0.14939861151017247, 0.14557733216881752] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [15, 55, 0]]
** centroid: 1, normalized-entropy: 0.7495952572594798, [(1, 15), (2, 55)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 63, 19]]
** centroid: 2, normalized-entropy: 0.7809756883263416, [(2, 63), (3, 19)]
*** center 3: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [42, 47, 0]]
** centroid: 4, normalized-entropy: 0.9977221075331744, [(1, 42), (2, 47)]
*** center 5: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [18, 44, 0]]
** centroid: 6, normalized-entropy: 0.8691375806126381, [(1, 18), (2, 44)]
*** center 7: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24699203124642372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24699203124642372, 0.16658840646222234] ***
*** starting iteration: 2; err: [Inf, 0.24699203124642372, 0.16658840646222234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24699203124642372, 0.16658840646222234, 0.15239891356043517] ***
*** starting iteration: 3; err: [Inf, 0.24699203124642372, 0.16658840646222234, 0.15239891356043517] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24699203124642372, 0.16658840646222234, 0.15239891356043517, 0.15038580952445046] ***
*** finished computation of 7 references, err: [Inf, 0.24699203124642372, 0.16658840646222234, 0.15239891356043517, 0.15038580952445046] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [62, 17, 0]]
** centroid: 1, normalized-entropy: 0.751286576718343, [(1, 62), (2, 17)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 68, 16]]
** centroid: 2, normalized-entropy: 0.7024665512903904, [(2, 68), (3, 16)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [2, 83, 1]]
** centroid: 3, normalized-entropy: 0.1579561697706465, [(1, 2), (2, 83), (3, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 9, 0]]
** centroid: 4, normalized-entropy: 0.569190343735683, [(1, 58), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [10, 29, 0]]
** centroid: 5, normalized-entropy: 0.8212809417449864, [(1, 10), (2, 29)]
*** center 6: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29277947192639114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29277947192639114, 0.2008196118026972] ***
*** starting iteration: 2; err: [Inf, 0.29277947192639114, 0.2008196118026972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29277947192639114, 0.2008196118026972, 0.17292816407163628] ***
*** starting iteration: 3; err: [Inf, 0.29277947192639114, 0.2008196118026972, 0.17292816407163628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29277947192639114, 0.2008196118026972, 0.17292816407163628, 0.16328019515797496] ***
*** finished computation of 7 references, err: [Inf, 0.29277947192639114, 0.2008196118026972, 0.17292816407163628, 0.16328019515797496] ***
*** center 1: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [43, 9, 0]]
** centroid: 2, normalized-entropy: 0.6646953053493416, [(1, 43), (2, 9)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [89, 7, 0]]
** centroid: 3, normalized-entropy: 0.3767150026960246, [(1, 89), (2, 7)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 117, 21]]
** centroid: 4, normalized-entropy: 0.6152538910563409, [(2, 117), (3, 21)]
*** center 5: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [6, 75, 0]]
** centroid: 6, normalized-entropy: 0.38094658570539014, [(1, 6), (2, 75)]
*** center 7: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21397751114331187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21397751114331187, 0.1648817451223731] ***
*** starting iteration: 2; err: [Inf, 0.21397751114331187, 0.1648817451223731] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21397751114331187, 0.1648817451223731, 0.1524193001491949] ***
*** starting iteration: 3; err: [Inf, 0.21397751114331187, 0.1648817451223731, 0.1524193001491949] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21397751114331187, 0.1648817451223731, 0.1524193001491949, 0.1486095569478348] ***
*** finished computation of 7 references, err: [Inf, 0.21397751114331187, 0.1648817451223731, 0.1524193001491949, 0.1486095569478348] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [9, 58, 0]]
** centroid: 1, normalized-entropy: 0.569190343735683, [(1, 9), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [41, 47, 0]]
** centroid: 2, normalized-entropy: 0.99664402524877, [(1, 41), (2, 47)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 93, 17]]
** centroid: 3, normalized-entropy: 0.6210993704855443, [(2, 93), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [60, 6, 0]]
** centroid: 7, normalized-entropy: 0.43949698692151346, [(1, 60), (2, 6)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2510259435288608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2510259435288608, 0.18827815326303243] ***
*** starting iteration: 2; err: [Inf, 0.2510259435288608, 0.18827815326303243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2510259435288608, 0.18827815326303243, 0.16667269311472774] ***
*** starting iteration: 3; err: [Inf, 0.2510259435288608, 0.18827815326303243, 0.16667269311472774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2510259435288608, 0.18827815326303243, 0.16667269311472774, 0.1574225451555103] ***
*** finished computation of 7 references, err: [Inf, 0.2510259435288608, 0.18827815326303243, 0.16667269311472774, 0.1574225451555103] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 41, 17]]
** centroid: 1, normalized-entropy: 0.8726965039103788, [(2, 41), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [4, 80, 0]]
** centroid: 2, normalized-entropy: 0.2761954276479391, [(1, 4), (2, 80)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 42, 0]]
** centroid: 3, normalized-entropy: 0.9903070204513952, [(1, 53), (2, 42)]
*** center 4: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 4, 0]]
** centroid: 5, normalized-entropy: 0.32275695889739825, [(1, 64), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [85, 28, 0]]
** centroid: 6, normalized-entropy: 0.8077527023327313, [(1, 85), (2, 28)]
*** center 7: selecting labels [1] (freq >= 1) [from [26, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22232355938665568] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22232355938665568, 0.16500296173989773] ***
*** starting iteration: 2; err: [Inf, 0.22232355938665568, 0.16500296173989773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22232355938665568, 0.16500296173989773, 0.15451705234358087] ***
*** starting iteration: 3; err: [Inf, 0.22232355938665568, 0.16500296173989773, 0.15451705234358087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22232355938665568, 0.16500296173989773, 0.15451705234358087, 0.15110038897953929] ***
*** finished computation of 7 references, err: [Inf, 0.22232355938665568, 0.16500296173989773, 0.15451705234358087, 0.15110038897953929] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 72, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [62, 37, 0]]
** centroid: 3, normalized-entropy: 0.9534985819759996, [(1, 62), (2, 37)]
*** center 4: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 67, 0]]
** centroid: 5, normalized-entropy: 0.25524211319019174, [(1, 3), (2, 67)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 30, 22]]
** centroid: 6, normalized-entropy: 0.9828586897127057, [(2, 30), (3, 22)]
*** center 7: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21150768767623232] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21150768767623232, 0.18180718634836376] ***
*** starting iteration: 2; err: [Inf, 0.21150768767623232, 0.18180718634836376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21150768767623232, 0.18180718634836376, 0.15849762907624246] ***
*** starting iteration: 3; err: [Inf, 0.21150768767623232, 0.18180718634836376, 0.15849762907624246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21150768767623232, 0.18180718634836376, 0.15849762907624246, 0.15409664844255894] ***
*** finished computation of 7 references, err: [Inf, 0.21150768767623232, 0.18180718634836376, 0.15849762907624246, 0.15409664844255894] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [84, 17, 0]]
** centroid: 1, normalized-entropy: 0.653839880626333, [(1, 84), (2, 17)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 55, 14]]
** centroid: 2, normalized-entropy: 0.7276874545656657, [(2, 55), (3, 14)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 86, 5]]
** centroid: 3, normalized-entropy: 0.30704288878312236, [(2, 86), (3, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [32, 28, 0]]
** centroid: 4, normalized-entropy: 0.9967916319816367, [(1, 32), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 15, 0]]
** centroid: 5, normalized-entropy: 0.6864381668766382, [(1, 67), (2, 15)]
*** center 6: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.31805416419263927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31805416419263927, 0.16915249340049923] ***
*** starting iteration: 2; err: [Inf, 0.31805416419263927, 0.16915249340049923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31805416419263927, 0.16915249340049923, 0.15715853787958622] ***
*** starting iteration: 3; err: [Inf, 0.31805416419263927, 0.16915249340049923, 0.15715853787958622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31805416419263927, 0.16915249340049923, 0.15715853787958622, 0.1552580232284963] ***
*** finished computation of 7 references, err: [Inf, 0.31805416419263927, 0.16915249340049923, 0.15715853787958622, 0.1552580232284963] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 54, 18]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 54), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [31, 10, 0]]
** centroid: 3, normalized-entropy: 0.8014698931335286, [(1, 31), (2, 10)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 61, 2]]
** centroid: 4, normalized-entropy: 0.20307392998664567, [(2, 61), (3, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [92, 38, 0]]
** centroid: 6, normalized-entropy: 0.871683617119982, [(1, 92), (2, 38)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 40, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2586608538301662] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2586608538301662, 0.1790130126737058] ***
*** starting iteration: 2; err: [Inf, 0.2586608538301662, 0.1790130126737058] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2586608538301662, 0.1790130126737058, 0.16132884748093784] ***
*** starting iteration: 3; err: [Inf, 0.2586608538301662, 0.1790130126737058, 0.16132884748093784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2586608538301662, 0.1790130126737058, 0.16132884748093784, 0.15490426281280817] ***
*** finished computation of 7 references, err: [Inf, 0.2586608538301662, 0.1790130126737058, 0.16132884748093784, 0.15490426281280817] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [72, 15, 0]]
** centroid: 1, normalized-entropy: 0.6631968402398286, [(1, 72), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [72, 18, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 72), (2, 18)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 72, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [29, 31, 0]]
** centroid: 5, normalized-entropy: 0.99919835426364, [(1, 29), (2, 31)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 12, 15]]
** centroid: 7, normalized-entropy: 0.9910760598382222, [(2, 12), (3, 15)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1994001834951341] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1994001834951341, 0.14988325199484825] ***
*** starting iteration: 2; err: [Inf, 0.1994001834951341, 0.14988325199484825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1994001834951341, 0.14988325199484825, 0.14249791615456342] ***
*** starting iteration: 3; err: [Inf, 0.1994001834951341, 0.14988325199484825, 0.14249791615456342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1994001834951341, 0.14988325199484825, 0.14249791615456342, 0.141347630251199] ***
*** finished computation of 7 references, err: [Inf, 0.1994001834951341, 0.14988325199484825, 0.14249791615456342, 0.141347630251199] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [25, 59, 0]]
** centroid: 1, normalized-entropy: 0.8783609387702275, [(1, 25), (2, 59)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [1, 75, 0]]
** centroid: 2, normalized-entropy: 0.10106696361212422, [(1, 1), (2, 75)]
*** center 3: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 9, 0]]
** centroid: 5, normalized-entropy: 0.6646953053493416, [(1, 43), (2, 9)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 58, 17]]
** centroid: 6, normalized-entropy: 0.7721551435804817, [(2, 58), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [70, 3, 0]]
** centroid: 7, normalized-entropy: 0.24729443986205674, [(1, 70), (2, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19936051344126463] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19936051344126463, 0.15942964571993798] ***
*** starting iteration: 2; err: [Inf, 0.19936051344126463, 0.15942964571993798] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19936051344126463, 0.15942964571993798, 0.15232096262462438] ***
*** starting iteration: 3; err: [Inf, 0.19936051344126463, 0.15942964571993798, 0.15232096262462438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19936051344126463, 0.15942964571993798, 0.15232096262462438, 0.1491617438867688] ***
*** finished computation of 7 references, err: [Inf, 0.19936051344126463, 0.15942964571993798, 0.15232096262462438, 0.1491617438867688] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 36, 14]]
** centroid: 1, normalized-entropy: 0.8554508105601307, [(2, 36), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [55, 21, 0]]
** centroid: 3, normalized-entropy: 0.8503821170987139, [(1, 55), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [7, 87, 0]]
** centroid: 4, normalized-entropy: 0.3823806751537801, [(1, 7), (2, 87)]
*** center 5: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 61, 0]]
** centroid: 6, normalized-entropy: 0.20307392998664567, [(1, 2), (2, 61)]
*** center 7: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22001808507088572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22001808507088572, 0.1979437307631597] ***
*** starting iteration: 2; err: [Inf, 0.22001808507088572, 0.1979437307631597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22001808507088572, 0.1979437307631597, 0.18559024546295405] ***
*** starting iteration: 3; err: [Inf, 0.22001808507088572, 0.1979437307631597, 0.18559024546295405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22001808507088572, 0.1979437307631597, 0.18559024546295405, 0.17487001093849538] ***
*** finished computation of 7 references, err: [Inf, 0.22001808507088572, 0.1979437307631597, 0.18559024546295405, 0.17487001093849538] ***
*** center 1: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 37, 12]]
** centroid: 3, normalized-entropy: 0.8030909760146977, [(2, 37), (3, 12)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [26, 33, 0]]
** centroid: 4, normalized-entropy: 0.9898220559635807, [(1, 26), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [13, 34, 0]]
** centroid: 5, normalized-entropy: 0.8507707040532602, [(1, 13), (2, 34)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [22, 76, 0]]
** centroid: 6, normalized-entropy: 0.7682814090975241, [(1, 22), (2, 76)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 14, 4]]
** centroid: 7, normalized-entropy: 0.7642045065086204, [(2, 14), (3, 4)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22287464267387985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22287464267387985, 0.1701993910893798] ***
*** starting iteration: 2; err: [Inf, 0.22287464267387985, 0.1701993910893798] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22287464267387985, 0.1701993910893798, 0.1572221944415942] ***
*** starting iteration: 3; err: [Inf, 0.22287464267387985, 0.1701993910893798, 0.1572221944415942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22287464267387985, 0.1701993910893798, 0.1572221944415942, 0.14970886525791138] ***
*** finished computation of 7 references, err: [Inf, 0.22287464267387985, 0.1701993910893798, 0.1572221944415942, 0.14970886525791138] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 64, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [79, 1, 0]]
** centroid: 2, normalized-entropy: 0.09694460606247329, [(1, 79), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [2, 66, 0]]
** centroid: 4, normalized-entropy: 0.1914332548141934, [(1, 2), (2, 66)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 29, 20]]
** centroid: 5, normalized-entropy: 0.9755259511264975, [(2, 29), (3, 20)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [62, 10, 0]]
** centroid: 6, normalized-entropy: 0.581321498763703, [(1, 62), (2, 10)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [80, 17, 0]]
** centroid: 7, normalized-entropy: 0.6695920597928519, [(1, 80), (2, 17)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2738612232580781] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2738612232580781, 0.18155192313715815] ***
*** starting iteration: 2; err: [Inf, 0.2738612232580781, 0.18155192313715815] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2738612232580781, 0.18155192313715815, 0.16667651204019784] ***
*** starting iteration: 3; err: [Inf, 0.2738612232580781, 0.18155192313715815, 0.16667651204019784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2738612232580781, 0.18155192313715815, 0.16667651204019784, 0.1582809229195118] ***
*** finished computation of 7 references, err: [Inf, 0.2738612232580781, 0.18155192313715815, 0.16667651204019784, 0.1582809229195118] ***
*** center 1: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [41, 20, 0]]
** centroid: 2, normalized-entropy: 0.9127341558073343, [(1, 41), (2, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [73, 38, 0]]
** centroid: 3, normalized-entropy: 0.9270425482501284, [(1, 73), (2, 38)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [9, 41, 0]]
** centroid: 4, normalized-entropy: 0.6800770457282798, [(1, 9), (2, 41)]
*** center 5: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 95, 17]]
** centroid: 7, normalized-entropy: 0.6142910730156771, [(2, 95), (3, 17)]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 399,3 => 36,1 => 565), Dict(2 => 388,3 => 41,1 => 571))
[ Info: ===== scores for single classifier: {"micro_f1":0.944,"precision":0.944,"recall":0.944,"macro_recall":0.9590487539193915,"macro_f1":0.9021706015004772,"accuracy":0.944,"class_f1":{"2":0.927461139896373,"3":0.8118811881188119,"1":0.9671694764862467},"class_precision":{"2":0.9322916666666666,"3":0.6833333333333333,"1":0.9802158273381295},"class_recall":{"2":0.9226804123711341,"3":1.0,"1":0.9544658493870403}}
[ Info: ===== scores for 1: {"micro_f1":0.963,"precision":0.963,"recall":0.963,"macro_recall":0.9669994617327508,"macro_f1":0.9486035757474743,"accuracy":0.963,"class_f1":{"2":0.9528662420382166,"3":0.9195402298850575,"1":0.9734042553191491},"class_precision":{"2":0.9420654911838791,"3":0.8695652173913043,"1":0.9856373429084381},"class_recall":{"2":0.9639175257731959,"3":0.975609756097561,"1":0.9614711033274956}}
[ Info: ===== scores for 5: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9672085962468667,"macro_f1":0.9473109647107524,"accuracy":0.961,"class_f1":{"2":0.9510664993726474,"3":0.9195402298850575,"1":0.9713261648745519},"class_precision":{"2":0.9266503667481663,"3":0.8695652173913043,"1":0.9944954128440368},"class_recall":{"2":0.9768041237113402,"3":0.975609756097561,"1":0.9492119089316988}}
[ Info: ===== scores for 7: {"micro_f1":0.96,"precision":0.96,"recall":0.96,"macro_recall":0.967175495820172,"macro_f1":0.9499272356168303,"accuracy":0.96,"class_f1":{"2":0.9501246882793016,"3":0.9302325581395349,"1":0.9694244604316546},"class_precision":{"2":0.9202898550724637,"3":0.8888888888888888,"1":0.9963031423290203},"class_recall":{"2":0.9819587628865979,"3":0.975609756097561,"1":0.9439579684763573}}
[ Info: ===== scores for 9: {"micro_f1":0.962,"precision":0.962,"recall":0.962,"macro_recall":0.9677923674085713,"macro_f1":0.9448234983978216,"accuracy":0.962,"class_f1":{"2":0.9522613065326634,"3":0.9090909090909092,"1":0.9731182795698925},"class_precision":{"2":0.928921568627451,"3":0.851063829787234,"1":0.9963302752293578},"class_recall":{"2":0.9768041237113402,"3":0.975609756097561,"1":0.9509632224168126}}
[ Info: ===== scores for 11: {"micro_f1":0.956,"precision":0.956,"recall":0.956,"macro_recall":0.9710100444749369,"macro_f1":0.9351508087827313,"accuracy":0.956,"class_f1":{"2":0.9447236180904522,"3":0.891304347826087,"1":0.9694244604316546},"class_precision":{"2":0.9215686274509803,"3":0.803921568627451,"1":0.9963031423290203},"class_recall":{"2":0.9690721649484536,"3":1.0,"1":0.9439579684763573}}
(score = 0.964, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.964, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.963, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.963, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.96, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.96, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.968,"k":7,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.968,"precision":0.968,"recall":0.968,"macro_recall":0.9645746903422056,"macro_f1":0.9550520459440057,"accuracy":0.968,"class_f1":{"2":0.9597989949748744,"3":0.9285714285714286,"1":0.9767857142857143},"class_precision":{"2":0.9362745098039216,"3":0.9069767441860465,"1":0.9963570127504554},"class_recall":{"2":0.9845360824742269,"3":0.9512195121951219,"1":0.957968476357268}}
Test Summary: | Pass  Total
AKNC          |    8      8
[1098, 1, 1, 3, 3, 5, 3, 2, 2, 6, 3, 6, 4, 6, 6, 3, 8, 2, 14, 2, 4, 4, 3, 4, 9, 5, 2, 9, 2, 3, 3, 1, 6, 3, 6, 1, 7, 7, 2, 29, 7, 8, 6, 9, 6, 5, 7, 2, 9, 20, 13, 50, 46, 6, 4, 9, 2, 42, 5, 9, 5, 9, 4, 10, 50, 6, 17, 1, 2, 3, 5, 2, 21, 48, 7, 30, 4, 2, 8, 7, 13, 9, 28, 5, 9, 20, 135, 2, 8, 15, 12, 35, 14, 18, 9, 3, 25, 4, 7, 9, 40, 8, 29, 39, 21, 32, 4, 80, 1, 5, 23, 15, 8, 20, 29, 131, 65, 4, 11, 10, 77, 18, 3, 1, 87, 17, 30, 4, 6, 24, 3, 36, 10, 27, 62, 27, 2, 56, 2, 96, 25, 16, 19, 69, 1, 35, 125, 5, 11, 12, 14, 9, 18, 28, 12, 15, 12, 24, 130, 37, 9, 22, 17, 6, 4, 66, 5, 11, 10, 45, 70, 38, 5, 4, 20, 134, 30, 4, 61, 10, 21, 8, 5, 103, 52, 8, 21, 49, 35, 1, 15, 47, 55, 16, 69, 24, 63, 59, 70, 9, 6, 88, 10, 9, 32, 17, 1, 5, 7, 6, 20, 71, 24, 6, 16, 4, 8, 93, 14, 25, 32, 28, 107, 6, 68, 17, 11, 40, 30, 389, 8, 14, 13, 36, 72, 144, 50, 9, 33, 11, 24, 16, 30, 66, 40, 65, 40, 53, 30, 10, 7, 34, 165, 11, 3, 72, 7, 10, 4, 45, 34, 6, 277, 32, 4, 123, 4, 109, 6, 33, 29, 4, 5, 17, 19, 424, 68, 82, 50, 4, 45, 165, 52, 64, 49, 16, 15, 5, 25, 21, 35, 15, 53, 24, 23, 71, 117, 276, 22, 10]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6409999999999999, speedup = 0.2488877072949147, eval_ratio = 0.080265)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4007781498015873,"recall":0.3975694444444444,"f1":null,"seconds":0.00019650720059871674,"exhaustive_search_seconds":0.00033965520560741425,"evaluations":532.921875,"distances_sum":1719.5586401398605}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5789930555555555,"recall":0.5789930555555555,"f1":0.5789930555555555,"seconds":0.00030854158103466034,"exhaustive_search_seconds":0.00033965520560741425,"evaluations":689.546875,"distances_sum":1606.5213811123904}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.684895833333333,"recall":0.684895833333333,"f1":0.684895833333333,"seconds":0.00042761117219924927,"exhaustive_search_seconds":0.00033965520560741425,"evaluations":850.859375,"distances_sum":1560.3346778181788}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7578124999999994,"recall":0.7578124999999994,"f1":0.7578124999999994,"seconds":0.0005045942962169647,"exhaustive_search_seconds":0.00033965520560741425,"evaluations":964.171875,"distances_sum":1536.96122661225}
KCenters.DeloneInvIndex> reached performance {"precision":0.8046874999999996,"recall":0.8046874999999996,"f1":0.8046874999999996,"seconds":0.0007367264479398727,"exhaustive_search_seconds":0.00033965520560741425,"evaluations":1082.0859375,"distances_sum":1521.714957569458}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.775, speedup = 0.5735447459923966, eval_ratio = 0.108793)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
