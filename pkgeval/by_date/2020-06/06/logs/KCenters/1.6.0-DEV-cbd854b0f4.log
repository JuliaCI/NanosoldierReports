Julia Version 1.6.0-DEV.185
Commit cbd854b0f4 (2020-06-06 13:20 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed LearnBase ─────────────────── v0.2.2
  Installed Compat ────────────────────── v3.10.0
  Installed KCenters ──────────────────── v0.2.2
  Installed OrderedCollections ────────── v1.2.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed StatsBase ─────────────────── v0.32.2
  Installed DataFrames ────────────────── v0.20.2
  Installed Reexport ──────────────────── v0.2.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed InvertedIndices ───────────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed PooledArrays ──────────────── v0.5.3
  Installed MLDataUtils ───────────────── v0.5.1
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed Parsers ───────────────────── v1.0.5
  Installed Missings ──────────────────── v0.4.3
  Installed Tables ────────────────────── v1.0.4
  Installed DataStructures ────────────── v0.17.17
  Installed JSON ──────────────────────── v0.21.0
  Installed SimilaritySearch ──────────── v0.3.19
  Installed IteratorInterfaceExtensions ─ v1.0.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.5
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_C3wNXs/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_C3wNXs/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.5
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9316620069742203
[ Info: 0.8307796732584636
[ Info: 0.5567020623385907
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3292943025380373
mean(cdnet.distances) = 0.3927705179899931
mean(crand.distances) = 0.33750644728541374
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8576699342324351,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":8.1640625,"distances_sum":2374.730870770038}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5478515625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5478515625,"f1":0.6886096542346546,"seconds":4.548579454421997e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":7.2421875,"distances_sum":1547.6553991708029}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8576699342324351,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":8.1640625,"distances_sum":2374.730870770038}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9138621794871804,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":8.578125,"distances_sum":2754.2698924588617}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8525390625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8525390625,"f1":0.9138621794871804,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":8.578125,"distances_sum":2754.2698924588617}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9629693223443226,"seconds":7.338821887969971e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":8.875,"distances_sum":3095.2076096529486}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9726190476190479,"seconds":6.366521120071411e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":8.953125,"distances_sum":3162.894946312682}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9660771520146524,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":8.8828125,"distances_sum":3110.375849680274}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9407795329670338,"seconds":5.8710575103759766e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":8.7265625,"distances_sum":2918.3709385175757}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9726190476190479,"seconds":6.366521120071411e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":8.953125,"distances_sum":3162.894946312682}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9726190476190479,"seconds":6.366521120071411e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":8.953125,"distances_sum":3162.894946312682}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.36328125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.36328125,"f1":null,"seconds":3.889203071594238e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":5.8828125,"distances_sum":998.5675472020598}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3876953125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3876953125,"f1":null,"seconds":3.7532299757003784e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.0546875,"distances_sum":1095.1738189059092}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8056640625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.8056640625,"f1":0.8839925699300706,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.453125,"distances_sum":2340.568475024634}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8056640625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.8056640625,"f1":0.8839925699300706,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.453125,"distances_sum":2340.568475024634}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9100857475857481,"seconds":5.494803190231323e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.6953125,"distances_sum":2550.504629405601}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.93094977938728,"seconds":5.479902029037476e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8671875,"distances_sum":2653.9587605050056}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9464800824175831,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.78125,"distances_sum":2816.901146836585}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9464800824175831,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.78125,"distances_sum":2816.901146836585}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9795787545787551,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.921875,"distances_sum":3062.5741571065923}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9544700091575097,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8046875,"distances_sum":2883.3695700738717}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9691449175824178,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8828125,"distances_sum":2978.2004242478765}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.963787774725275,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.921875,"distances_sum":2930.3481825172685}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9795787545787551,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.921875,"distances_sum":3062.5741571065923}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9795787545787551,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.921875,"distances_sum":3062.5741571065923}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8711606102231111,"seconds":5.37186861038208e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.46875,"distances_sum":2228.46535644416}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.787109375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.787109375,"f1":0.8711606102231111,"seconds":5.37186861038208e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.46875,"distances_sum":2228.46535644416}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9119708416583425,"seconds":6.055459380149841e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.6328125,"distances_sum":2482.275082332933}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8978682775557784,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.4375,"distances_sum":2355.8201793521484}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8505859375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8505859375,"f1":0.9119708416583425,"seconds":6.055459380149841e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.6328125,"distances_sum":2482.275082332933}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9684523809523813,"seconds":6.32554292678833e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.9375,"distances_sum":2891.5279749022084}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9588427197802203,"seconds":4.909932613372803e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.8984375,"distances_sum":2820.815806664012}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9669528388278392,"seconds":5.0533562898635864e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.9765625,"distances_sum":2888.7985183678425}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9684523809523813,"seconds":6.32554292678833e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.9375,"distances_sum":2891.5279749022084}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9684523809523813,"seconds":6.32554292678833e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.9375,"distances_sum":2891.5279749022084}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.843693806193807,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.015625,"distances_sum":2111.7896049693372}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.748046875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.748046875,"f1":0.843693806193807,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.015625,"distances_sum":2111.7896049693372}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9583962912087918,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.859375,"distances_sum":2834.4546029519424}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9154735889110897,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.6796875,"distances_sum":2565.029351040075}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9564045329670335,"seconds":5.792826414108276e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8125,"distances_sum":2826.4630601054887}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9583962912087918,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.859375,"distances_sum":2834.4546029519424}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9682692307692311,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8671875,"distances_sum":2917.210816372996}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9736328125, conf: {"ssize":2,"bsize":13}, perf: {"precision":1.0,"recall":0.9736328125,"f1":0.9855483058608061,"seconds":5.751848220825195e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9609375,"distances_sum":3043.1935918563895}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9736328125,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.9736328125,"f1":0.9855483058608061,"seconds":5.751848220825195e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9609375,"distances_sum":3043.1935918563895}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9736328125,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.9736328125,"f1":0.9855483058608061,"seconds":5.751848220825195e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9609375,"distances_sum":3043.1935918563895}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.736328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9855282738095238,"recall":0.736328125,"f1":0.8326355935730944,"seconds":4.9211084842681885e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.8359375,"distances_sum":1669.7425406285379}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.236328125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.236328125,"f1":null,"seconds":3.50363552570343e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":5.921875,"distances_sum":618.7865987123344}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.64453125, conf: {"ssize":4,"bsize":4}, perf: {"precision":0.9915922619047619,"recall":0.64453125,"f1":0.7679558288933295,"seconds":4.818663001060486e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.4921875,"distances_sum":1354.8206283703546}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.736328125,"state":{"ssize":1,"bsize":5},"perf":{"precision":0.9855282738095238,"recall":0.736328125,"f1":0.8326355935730944,"seconds":4.9211084842681885e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.8359375,"distances_sum":1669.7425406285379}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":1,"bsize":6}, perf: {"precision":0.9849702380952382,"recall":0.8095703125,"f1":0.8831330128205134,"seconds":5.27501106262207e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.296875,"distances_sum":1886.5748067083307}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":4,"bsize":8}, perf: {"precision":0.9897693452380952,"recall":0.9111328125,"f1":0.9443509615384619,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.75,"distances_sum":2309.740762814325}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":2,"bsize":8}, perf: {"precision":0.9859747023809524,"recall":0.9013671875,"f1":0.9382211538461541,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7734375,"distances_sum":2253.7021135599853}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":3,"bsize":5}, perf: {"precision":0.98828125,"recall":0.765625,"f1":0.8553175990675997,"seconds":4.934147000312805e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.046875,"distances_sum":1749.8548968092598}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":4,"bsize":8},"perf":{"precision":0.9897693452380952,"recall":0.9111328125,"f1":0.9443509615384619,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.75,"distances_sum":2309.740762814325}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":4,"bsize":9}, perf: {"precision":0.9885137648809524,"recall":0.93359375,"f1":0.9574154361263738,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.84375,"distances_sum":2393.238750205331}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":6,"bsize":12}, perf: {"precision":0.988653273809524,"recall":0.9560546875,"f1":0.9706673534798538,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9375,"distances_sum":2465.199577483378}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":10}, perf: {"precision":0.9849981398809524,"recall":0.92578125,"f1":0.9518450950091578,"seconds":6.157904863357544e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8515625,"distances_sum":2340.2421140155925}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":12}, perf: {"precision":0.9853980654761905,"recall":0.947265625,"f1":0.9646391369047619,"seconds":6.780028343200684e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.90625,"distances_sum":2447.566468693123}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":5,"bsize":9}, perf: {"precision":0.9847935267857144,"recall":0.9228515625,"f1":0.9497546073717951,"seconds":5.377456545829773e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8203125,"distances_sum":2344.7440172246215}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":0.9914434523809523,"recall":0.9169921875,"f1":0.9493160485347988,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7890625,"distances_sum":2312.7709031493337}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":6,"bsize":12},"perf":{"precision":0.988653273809524,"recall":0.9560546875,"f1":0.9706673534798538,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9375,"distances_sum":2465.199577483378}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":6,"bsize":12},"perf":{"precision":0.988653273809524,"recall":0.9560546875,"f1":0.9706673534798538,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9375,"distances_sum":2465.199577483378}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8440679112554121,"seconds":3.5276636481285095e-5,"exhaustive_search_seconds":3.157183527946472e-6,"evaluations":7.53125,"distances_sum":1532.0882736295414}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.744140625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.744140625,"f1":0.8440679112554121,"seconds":3.5276636481285095e-5,"exhaustive_search_seconds":3.157183527946472e-6,"evaluations":7.53125,"distances_sum":1532.0882736295414}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8563936063936071,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":3.157183527946472e-6,"evaluations":7.5703125,"distances_sum":1536.6939576082564}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9477048992673999,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":3.157183527946472e-6,"evaluations":8.6953125,"distances_sum":2138.027553050168}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9477048992673999,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":3.157183527946472e-6,"evaluations":8.6953125,"distances_sum":2138.027553050168}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9579269688644694,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":3.157183527946472e-6,"evaluations":8.734375,"distances_sum":2231.564739412758}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9556833791208795,"seconds":6.025657057762146e-6,"exhaustive_search_seconds":3.157183527946472e-6,"evaluations":8.734375,"distances_sum":2220.4213789063197}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.956799450549451,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":3.157183527946472e-6,"evaluations":8.7734375,"distances_sum":2209.278358952684}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9579269688644694,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":3.157183527946472e-6,"evaluations":8.734375,"distances_sum":2231.564739412758}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9579269688644694,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":3.157183527946472e-6,"evaluations":8.734375,"distances_sum":2231.564739412758}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8488842754467765,"seconds":4.84660267829895e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.5859375,"distances_sum":1692.236582546619}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6640625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6640625,"f1":0.7826517232767239,"seconds":4.630535840988159e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.2109375,"distances_sum":1407.2004213148157}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7828653984903992,"seconds":4.656612873077393e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.25,"distances_sum":1482.6252561873334}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.755859375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.755859375,"f1":0.8488842754467765,"seconds":4.84660267829895e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.5859375,"distances_sum":1692.236582546619}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9522779304029307,"seconds":5.4817646741867065e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.6796875,"distances_sum":2331.971730350147}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8681495587745593,"seconds":4.7441571950912476e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.6640625,"distances_sum":1748.5668598479053}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9259729853479861,"seconds":5.194917321205139e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.3984375,"distances_sum":2141.9230469321674}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9522779304029307,"seconds":5.4817646741867065e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.6796875,"distances_sum":2331.971730350147}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9643830128205135,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.7734375,"distances_sum":2434.469468941929}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9620364010989017,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.796875,"distances_sum":2400.7987816454406}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9643830128205135,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.7734375,"distances_sum":2434.469468941929}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9643830128205135,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.7734375,"distances_sum":2434.469468941929}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.38671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.38671875,"f1":null,"seconds":3.6619603633880615e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":5.1796875,"distances_sum":777.4453082391141}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.860857892107893,"seconds":5.19677996635437e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.6328125,"distances_sum":1741.8819883792228}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5185546875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5185546875,"f1":0.6658270548895553,"seconds":4.263594746589661e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":6.25,"distances_sum":1055.2852427632063}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.860857892107893,"seconds":5.19677996635437e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.6328125,"distances_sum":1741.8819883792228}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9669471153846159,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8359375,"distances_sum":2489.715843806525}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8855342574092584,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.8828125,"distances_sum":1899.3987306229535}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9277675449550455,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.40625,"distances_sum":2199.3416379460105}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9669471153846159,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8359375,"distances_sum":2489.715843806525}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":4,"bsize":13}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9819940476190478,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9375,"distances_sum":2589.1958155724906}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9751144688644691,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8828125,"distances_sum":2553.9403024012527}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9713770604395608,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8359375,"distances_sum":2542.4364129004457}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9715602106227109,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8515625,"distances_sum":2536.1499518763776}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9819940476190478,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9375,"distances_sum":2589.1958155724906}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9819940476190478,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9375,"distances_sum":2589.1958155724906}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4228515625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4228515625,"f1":null,"seconds":4.014000296592712e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":5.6328125,"distances_sum":847.6524144939101}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.790127060439561,"seconds":4.898756742477417e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":7.1953125,"distances_sum":1494.9089357024152}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4521484375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4521484375,"f1":null,"seconds":4.298985004425049e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":5.921875,"distances_sum":914.1417670482199}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.673828125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.673828125,"f1":0.790127060439561,"seconds":4.898756742477417e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":7.1953125,"distances_sum":1494.9089357024152}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.957371794871795,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.7578125,"distances_sum":2417.4695033803396}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9487980769230774,"seconds":5.4817646741867065e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.6875,"distances_sum":2355.0738957050507}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.818359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.818359375,"f1":0.8922077922077931,"seconds":5.282461643218994e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.0703125,"distances_sum":1931.573285585804}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8465123418248426,"seconds":4.777684807777405e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":7.6953125,"distances_sum":1699.45329300594}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.957371794871795,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.7578125,"distances_sum":2417.4695033803396}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9769173534798536,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8828125,"distances_sum":2552.187465996998}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9611893315018318,"seconds":5.407258868217468e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.765625,"distances_sum":2441.4200392900793}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9585222069597074,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.75,"distances_sum":2435.415813777028}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9652358058608064,"seconds":5.3551048040390015e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.828125,"distances_sum":2442.6429298895623}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9694768772893776,"seconds":5.898997187614441e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8984375,"distances_sum":2476.2253613936623}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.958298992673993,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.765625,"distances_sum":2405.8153390203406}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9769173534798536,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8828125,"distances_sum":2552.187465996998}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9769173534798536,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8828125,"distances_sum":2552.187465996998}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5341796875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5341796875,"f1":0.6785684801309808,"seconds":4.3585896492004395e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":6.6015625,"distances_sum":969.4104499123362}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.80157758907759,"seconds":4.872679710388184e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":7.46875,"distances_sum":1361.476071616536}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3662109375, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.3662109375,"f1":0.5159992784992782,"seconds":3.6545097827911377e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":5.4921875,"distances_sum":688.9431949702038}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6826171875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6826171875,"f1":0.80157758907759,"seconds":4.872679710388184e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":7.46875,"distances_sum":1361.476071616536}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.8865363802863813,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.1640625,"distances_sum":1756.943722534425}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9221700174825183,"seconds":5.334615707397461e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.375,"distances_sum":1942.950809213559}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.8002386502386508,"seconds":4.641711711883545e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":7.46875,"distances_sum":1415.540430915465}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8681640625,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8681640625,"f1":0.9221700174825183,"seconds":5.334615707397461e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.375,"distances_sum":1942.950809213559}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9592319139194143,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.765625,"distances_sum":2174.120176428471}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9370821886446892,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.4375,"distances_sum":2026.666182587251}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":11,"bsize":8}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9383413461538468,"seconds":5.273148417472839e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.53125,"distances_sum":2091.0164335957256}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9332703754578761,"seconds":5.319714546203613e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.484375,"distances_sum":1958.6600800285319}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9592319139194143,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.765625,"distances_sum":2174.120176428471}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9592319139194143,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.765625,"distances_sum":2174.120176428471}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2578125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2578125,"f1":null,"seconds":3.3918768167495728e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":5.8359375,"distances_sum":519.0460493619901}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.8006196928071935,"seconds":4.664063453674316e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.5546875,"distances_sum":1494.5923301386977}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.68359375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.68359375,"f1":0.8006196928071935,"seconds":4.664063453674316e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.5546875,"distances_sum":1494.5923301386977}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.85922410922411,"seconds":4.90434467792511e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.046875,"distances_sum":1698.9288257048636}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9595467032967037,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.84375,"distances_sum":2280.662429238611}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9264308608058615,"seconds":5.2656978368759155e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.5390625,"distances_sum":2019.66183319148}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9595467032967037,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.84375,"distances_sum":2280.662429238611}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9652186355311358,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.875,"distances_sum":2301.759384274782}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9652186355311358,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.875,"distances_sum":2301.759384274782}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9652186355311358,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.875,"distances_sum":2301.759384274782}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.294921875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.294921875,"f1":null,"seconds":3.4421682357788086e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":6.015625,"distances_sum":569.8095521532463}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7818816600066607,"seconds":4.4852495193481445e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.5078125,"distances_sum":1240.4390444237256}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2939453125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2939453125,"f1":null,"seconds":3.6749988794326782e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":6.046875,"distances_sum":591.782791127382}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6572265625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6572265625,"f1":0.7818816600066607,"seconds":4.4852495193481445e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.5078125,"distances_sum":1240.4390444237256}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9442193223443228,"seconds":5.342066287994385e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.609375,"distances_sum":1943.5761522554315}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9051256035631043,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.5,"distances_sum":1739.3792862883995}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9423649267399271,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.7265625,"distances_sum":1961.8678917043537}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9420163170163177,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.625,"distances_sum":1980.3321724408604}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6591796875,"f1":0.7835924492174501,"seconds":4.412606358528137e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.5234375,"distances_sum":1327.9631275023778}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8506186521811531,"seconds":4.798173904418945e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.9453125,"distances_sum":1459.7873466098824}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9442193223443228,"seconds":5.342066287994385e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.609375,"distances_sum":1943.5761522554315}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.96073717948718,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8359375,"distances_sum":2088.218848781027}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.971560210622711,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8984375,"distances_sum":2151.9467150107025}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9586767399267406,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.796875,"distances_sum":2084.743448542036}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9770833333333339,"seconds":6.0461461544036865e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.921875,"distances_sum":2201.8381418019844}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9480940934065942,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.7109375,"distances_sum":2010.8768739210116}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9770833333333339,"seconds":6.0461461544036865e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.921875,"distances_sum":2201.8381418019844}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9770833333333339,"seconds":6.0461461544036865e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.921875,"distances_sum":2201.8381418019844}}, n: 9
mean(cfft.distances) = 0.34232370685401087
mean(cdnet.distances) = 0.363425239720615
mean(crand.distances) = 0.3525170060864805
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8711111111111111
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.831111111111111
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.86
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8822222222222221
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8777777777777778
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.8911111111111111
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8755555555555556
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8933333333333332
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.88
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8511111111111113
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9400000000000001
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9333333333333332
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9066666666666667
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9311111111111111
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9244444444444445
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8666666666666666
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8733333333333334
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9244444444444445
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9311111111111111
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9177777777777777
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8577777777777778
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9088888888888889
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 23, 13]]
** centroid: 1, normalized-entropy: 0.943601631299382, [(2, 23), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 3, 1, 2, 3, 3, 1]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 23, 13]]
** centroid: 1, normalized-entropy: 0.943601631299382, [(2, 23), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 3, 1, 2, 3, 3, 1]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 23, 13]]
** centroid: 1, normalized-entropy: 0.943601631299382, [(2, 23), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 3, 1, 2, 3, 3, 1]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 23, 13]]
** centroid: 1, normalized-entropy: 0.943601631299382, [(2, 23), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 3, 1, 2, 3, 3, 1]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 23, 13]]
** centroid: 1, normalized-entropy: 0.943601631299382, [(2, 23), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 3, 1, 2, 3, 3, 1]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 23, 13]]
** centroid: 1, normalized-entropy: 0.943601631299382, [(2, 23), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 3, 1, 2, 3, 3, 1]
acc = 0.94
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 23, 13]]
** centroid: 1, normalized-entropy: 0.943601631299382, [(2, 23), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 3, 1, 2, 3, 3, 1]
acc = 0.98
*** finished computation of 12 references, err: [Inf, 0.5674594453970592] ***
*** center 1: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 9, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.2306916223815852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2306916223815852, 0.20261695284141903] ***
*** finished computation of 7 references, err: [Inf, 0.2306916223815852, 0.20261695284141903] ***
*** center 1: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [110, 24, 0]]
** centroid: 2, normalized-entropy: 0.678114052360606, [(1, 110), (2, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [79, 11, 0]]
** centroid: 3, normalized-entropy: 0.5357150195407704, [(1, 79), (2, 11)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 81, 17]]
** centroid: 4, normalized-entropy: 0.665580063146735, [(2, 81), (3, 17)]
*** center 5: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 79, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [51, 55, 0]]
** centroid: 7, normalized-entropy: 0.9989725613141186, [(1, 51), (2, 55)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24297881675004468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24297881675004468, 0.20661316569852664] ***
*** finished computation of 7 references, err: [Inf, 0.24297881675004468, 0.20661316569852664] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [38, 51, 0]]
** centroid: 1, normalized-entropy: 0.9845543528607513, [(1, 38), (2, 51)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 101, 22]]
** centroid: 2, normalized-entropy: 0.6775807218599569, [(2, 101), (3, 22)]
*** center 3: selecting labels [1] (freq >= 1) [from [119, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [38, 68, 0]]
** centroid: 4, normalized-entropy: 0.9414231081869789, [(1, 38), (2, 68)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [70, 16, 0]]
** centroid: 5, normalized-entropy: 0.6931274153282881, [(1, 70), (2, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23457141923878727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23457141923878727, 0.19656903740309034] ***
*** finished computation of 7 references, err: [Inf, 0.23457141923878727, 0.19656903740309034] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [79, 29, 0]]
** centroid: 1, normalized-entropy: 0.8393307617496655, [(1, 79), (2, 29)]
*** center 2: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [106, 46, 0]]
** centroid: 3, normalized-entropy: 0.8844839729019952, [(1, 106), (2, 46)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 85, 21]]
** centroid: 4, normalized-entropy: 0.7181384220154764, [(2, 85), (3, 21)]
*** center 5: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [6, 78, 0]]
** centroid: 7, normalized-entropy: 0.3712323266408756, [(1, 6), (2, 78)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4323674809584791] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4323674809584791, 0.2631224364478577] ***
*** starting iteration: 2; err: [Inf, 0.4323674809584791, 0.2631224364478577] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4323674809584791, 0.2631224364478577, 0.24458515995417024] ***
*** starting iteration: 3; err: [Inf, 0.4323674809584791, 0.2631224364478577, 0.24458515995417024] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4323674809584791, 0.2631224364478577, 0.24458515995417024, 0.24101225535214707] ***
*** finished computation of 3 references, err: [Inf, 0.4323674809584791, 0.2631224364478577, 0.24458515995417024, 0.24101225535214707] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [177, 27, 0]]
** centroid: 1, normalized-entropy: 0.5638560041131417, [(1, 177), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [222, 7, 0]]
** centroid: 2, normalized-entropy: 0.197230832707744, [(1, 222), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 216, 17]]
** centroid: 3, normalized-entropy: 0.3768789825574349, [(2, 216), (3, 17)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3594252411778765] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3594252411778765, 0.2478802282229831] ***
*** starting iteration: 2; err: [Inf, 0.3594252411778765, 0.2478802282229831] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3594252411778765, 0.2478802282229831, 0.23555062616291433] ***
*** starting iteration: 3; err: [Inf, 0.3594252411778765, 0.2478802282229831, 0.23555062616291433] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3594252411778765, 0.2478802282229831, 0.23555062616291433, 0.23271043676285372] ***
*** finished computation of 3 references, err: [Inf, 0.3594252411778765, 0.2478802282229831, 0.23555062616291433, 0.23271043676285372] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [62, 157, 22]]
** centroid: 1, normalized-entropy: 0.7709469557719589, [(1, 62), (2, 157), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [102, 79, 0]]
** centroid: 2, normalized-entropy: 0.988320671684953, [(1, 102), (2, 79)]
*** center 3: selecting labels [1] (freq >= 2) [from [245, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2633179523207169] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2633179523207169, 0.23431790467474548] ***
*** starting iteration: 2; err: [Inf, 0.2633179523207169, 0.23431790467474548] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2633179523207169, 0.23431790467474548, 0.2295741371116133] ***
*** starting iteration: 3; err: [Inf, 0.2633179523207169, 0.23431790467474548, 0.2295741371116133] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2633179523207169, 0.23431790467474548, 0.2295741371116133, 0.2290162956293231] ***
*** finished computation of 3 references, err: [Inf, 0.2633179523207169, 0.23431790467474548, 0.2295741371116133, 0.2290162956293231] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [78, 153, 21]]
** centroid: 1, normalized-entropy: 0.7946564298213452, [(1, 78), (2, 153), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [109, 85, 0]]
** centroid: 2, normalized-entropy: 0.988931806246975, [(1, 109), (2, 85)]
*** center 3: selecting labels [1] (freq >= 2) [from [221, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.29526879424480973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29526879424480973, 0.19989266898902552] ***
*** starting iteration: 2; err: [Inf, 0.29526879424480973, 0.19989266898902552] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29526879424480973, 0.19989266898902552, 0.17914170588509323] ***
*** starting iteration: 3; err: [Inf, 0.29526879424480973, 0.19989266898902552, 0.17914170588509323] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29526879424480973, 0.19989266898902552, 0.17914170588509323, 0.16806609355690735] ***
*** finished computation of 7 references, err: [Inf, 0.29526879424480973, 0.19989266898902552, 0.17914170588509323, 0.16806609355690735] ***
*** center 1: selecting labels [1] (freq >= 1) [from [127, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [37, 41, 0]]
** centroid: 2, normalized-entropy: 0.9981021327390103, [(1, 37), (2, 41)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [17, 115, 4]]
** centroid: 3, normalized-entropy: 0.46009959506864345, [(1, 17), (2, 115), (3, 4)]
*** center 4: selecting labels [1] (freq >= 1) [from [140, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [39, 6, 0]]
** centroid: 5, normalized-entropy: 0.5665095065529052, [(1, 39), (2, 6)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 88, 13]]
** centroid: 6, normalized-entropy: 0.5538976334852961, [(2, 88), (3, 13)]
*** center 7: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21810381406585852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21810381406585852, 0.17859873809046048] ***
*** starting iteration: 2; err: [Inf, 0.21810381406585852, 0.17859873809046048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21810381406585852, 0.17859873809046048, 0.16722344132447461] ***
*** starting iteration: 3; err: [Inf, 0.21810381406585852, 0.17859873809046048, 0.16722344132447461] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21810381406585852, 0.17859873809046048, 0.16722344132447461, 0.15708845114472253] ***
*** finished computation of 7 references, err: [Inf, 0.21810381406585852, 0.17859873809046048, 0.16722344132447461, 0.15708845114472253] ***
*** center 1: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [92, 16, 0]]
** centroid: 3, normalized-entropy: 0.6051865766334207, [(1, 92), (2, 16)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 84, 19]]
** centroid: 4, normalized-entropy: 0.6897501750585195, [(2, 84), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [87, 27, 0]]
** centroid: 5, normalized-entropy: 0.7897492536625221, [(1, 87), (2, 27)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [80, 8, 0]]
** centroid: 6, normalized-entropy: 0.43949698692151346, [(1, 80), (2, 8)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 101, 3]]
** centroid: 7, normalized-entropy: 0.18857195602479668, [(2, 101), (3, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19658134128574445] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19658134128574445, 0.16462032457135026] ***
*** starting iteration: 2; err: [Inf, 0.19658134128574445, 0.16462032457135026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19658134128574445, 0.16462032457135026, 0.16075741670288515] ***
*** starting iteration: 3; err: [Inf, 0.19658134128574445, 0.16462032457135026, 0.16075741670288515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19658134128574445, 0.16462032457135026, 0.16075741670288515, 0.15864498875518587] ***
*** finished computation of 7 references, err: [Inf, 0.19658134128574445, 0.16462032457135026, 0.16075741670288515, 0.15864498875518587] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [25, 93, 0]]
** centroid: 1, normalized-entropy: 0.7450314037905273, [(1, 25), (2, 93)]
*** center 2: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [13, 65, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 13), (2, 65)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [81, 12, 0]]
** centroid: 4, normalized-entropy: 0.5547781633412736, [(1, 81), (2, 12)]
*** center 5: selecting labels [1] (freq >= 1) [from [147, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 68, 21]]
** centroid: 7, normalized-entropy: 0.7882487221644084, [(2, 68), (3, 21)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2378844705846597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2378844705846597, 0.19681534265285475] ***
*** starting iteration: 2; err: [Inf, 0.2378844705846597, 0.19681534265285475] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2378844705846597, 0.19681534265285475, 0.19367733116432265] ***
*** starting iteration: 3; err: [Inf, 0.2378844705846597, 0.19681534265285475, 0.19367733116432265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2378844705846597, 0.19681534265285475, 0.19367733116432265, 0.19158129752739458] ***
*** finished computation of 7 references, err: [Inf, 0.2378844705846597, 0.19681534265285475, 0.19367733116432265, 0.19158129752739458] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 87, 17]]
** centroid: 1, normalized-entropy: 0.6425267139094084, [(2, 87), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [78, 3, 0]]
** centroid: 3, normalized-entropy: 0.22853814395352806, [(1, 78), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [86, 29, 0]]
** centroid: 4, normalized-entropy: 0.814705548656723, [(1, 86), (2, 29)]
*** center 5: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [47, 50, 0]]
** centroid: 6, normalized-entropy: 0.999309898706868, [(1, 47), (2, 50)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 81, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25971687705056373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25971687705056373, 0.2376701123942656] ***
*** starting iteration: 2; err: [Inf, 0.25971687705056373, 0.2376701123942656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25971687705056373, 0.2376701123942656, 0.22013324767566178] ***
*** starting iteration: 3; err: [Inf, 0.25971687705056373, 0.2376701123942656, 0.22013324767566178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25971687705056373, 0.2376701123942656, 0.22013324767566178, 0.20337463149904222] ***
*** finished computation of 7 references, err: [Inf, 0.25971687705056373, 0.2376701123942656, 0.22013324767566178, 0.20337463149904222] ***
*** center 1: selecting labels [1] (freq >= 2) [from [186, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 57, 0]]
** centroid: 2, normalized-entropy: 0.99819587904281, [(1, 63), (2, 57)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [31, 48, 0]]
** centroid: 3, normalized-entropy: 0.966334094295981, [(1, 31), (2, 48)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [24, 16, 0]]
** centroid: 4, normalized-entropy: 0.9709505944546688, [(1, 24), (2, 16)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 64, 22]]
** centroid: 5, normalized-entropy: 0.8203636429576731, [(2, 64), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 51, 0]]
** centroid: 6, normalized-entropy: 0.572580465623769, [(1, 8), (2, 51)]
*** center 7: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2544303779983181] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2544303779983181, 0.20221429535870564] ***
*** starting iteration: 2; err: [Inf, 0.2544303779983181, 0.20221429535870564] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2544303779983181, 0.20221429535870564, 0.19556016803508264] ***
*** starting iteration: 3; err: [Inf, 0.2544303779983181, 0.20221429535870564, 0.19556016803508264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2544303779983181, 0.20221429535870564, 0.19556016803508264, 0.1929997235740433] ***
*** finished computation of 7 references, err: [Inf, 0.2544303779983181, 0.20221429535870564, 0.19556016803508264, 0.1929997235740433] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 30, 21]]
** centroid: 1, normalized-entropy: 0.9774178175281716, [(2, 30), (3, 21)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 88, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [89, 2, 0]]
** centroid: 3, normalized-entropy: 0.15240699892386778, [(1, 89), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [23, 66, 0]]
** centroid: 4, normalized-entropy: 0.8243633538094403, [(1, 23), (2, 66)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [87, 37, 0]]
** centroid: 5, normalized-entropy: 0.8793103533940488, [(1, 87), (2, 37)]
*** center 6: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [101, 15, 0]]
** centroid: 7, normalized-entropy: 0.5555437650236148, [(1, 101), (2, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3248156853413944] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3248156853413944, 0.24295619206022712] ***
*** starting iteration: 2; err: [Inf, 0.3248156853413944, 0.24295619206022712] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3248156853413944, 0.24295619206022712, 0.23768836991705078] ***
*** starting iteration: 3; err: [Inf, 0.3248156853413944, 0.24295619206022712, 0.23768836991705078] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3248156853413944, 0.24295619206022712, 0.23768836991705078, 0.23617135131636682] ***
*** finished computation of 3 references, err: [Inf, 0.3248156853413944, 0.24295619206022712, 0.23768836991705078, 0.23617135131636682] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [275, 4, 0]]
** centroid: 1, normalized-entropy: 0.10833583758794743, [(1, 275), (2, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [14, 170, 22]]
** centroid: 2, normalized-entropy: 0.528058142501639, [(1, 14), (2, 170), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [120, 62, 0]]
** centroid: 3, normalized-entropy: 0.9254482516437047, [(1, 120), (2, 62)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3396183649675622] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3396183649675622, 0.23410950747431666] ***
*** starting iteration: 2; err: [Inf, 0.3396183649675622, 0.23410950747431666] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3396183649675622, 0.23410950747431666, 0.23058791623019365] ***
*** starting iteration: 3; err: [Inf, 0.3396183649675622, 0.23410950747431666, 0.23058791623019365] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3396183649675622, 0.23410950747431666, 0.23058791623019365, 0.22929244303609478] ***
*** finished computation of 3 references, err: [Inf, 0.3396183649675622, 0.23410950747431666, 0.23058791623019365, 0.22929244303609478] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [81, 149, 20]]
** centroid: 1, normalized-entropy: 0.7970498969951869, [(1, 81), (2, 149), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [107, 89, 1]]
** centroid: 2, normalized-entropy: 0.9939075844165749, [(1, 107), (2, 89)]
*** center 3: selecting labels [1] (freq >= 2) [from [220, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.29676098497192915] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29676098497192915, 0.23953656677587387] ***
*** finished computation of 3 references, err: [Inf, 0.29676098497192915, 0.23953656677587387] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [117, 95, 0]]
** centroid: 1, normalized-entropy: 0.9922178367202824, [(1, 117), (2, 95)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [262, 8, 0]]
** centroid: 2, normalized-entropy: 0.19253105481819402, [(1, 262), (2, 8)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [20, 147, 17]]
** centroid: 3, normalized-entropy: 0.5831235718687814, [(1, 20), (2, 147), (3, 17)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2837106864285031] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2837106864285031, 0.2457814954145849] ***
*** finished computation of 3 references, err: [Inf, 0.2837106864285031, 0.2457814954145849] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [1, 194, 22]]
** centroid: 1, normalized-entropy: 0.3249608942259723, [(1, 1), (2, 194), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [140, 29, 0]]
** centroid: 2, normalized-entropy: 0.6613464704183091, [(1, 140), (2, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [268, 13, 0]]
** centroid: 3, normalized-entropy: 0.27030667830449473, [(1, 268), (2, 13)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2690671815912517] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2690671815912517, 0.23347738727849016] ***
*** finished computation of 3 references, err: [Inf, 0.2690671815912517, 0.23347738727849016] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [56, 189, 21]]
** centroid: 1, normalized-entropy: 0.7020653474042807, [(1, 56), (2, 189), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [113, 49, 0]]
** centroid: 2, normalized-entropy: 0.8842882429181962, [(1, 113), (2, 49)]
*** center 3: selecting labels [1] (freq >= 1) [from [239, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2528478213188773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2528478213188773, 0.19989997280521077] ***
*** starting iteration: 2; err: [Inf, 0.2528478213188773, 0.19989997280521077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2528478213188773, 0.19989997280521077, 0.1969387618427699] ***
*** starting iteration: 3; err: [Inf, 0.2528478213188773, 0.19989997280521077, 0.1969387618427699] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2528478213188773, 0.19989997280521077, 0.1969387618427699, 0.19593433336517005] ***
*** starting iteration: 4; err: [Inf, 0.2528478213188773, 0.19989997280521077, 0.1969387618427699, 0.19593433336517005] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2528478213188773, 0.19989997280521077, 0.1969387618427699, 0.19593433336517005, 0.1951287842408807] ***
*** finished computation of 7 references, err: [Inf, 0.2528478213188773, 0.19989997280521077, 0.1969387618427699, 0.19593433336517005, 0.1951287842408807] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 100, 17]]
** centroid: 1, normalized-entropy: 0.5979502983976931, [(2, 100), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [91, 47, 0]]
** centroid: 2, normalized-entropy: 0.9253723677424422, [(1, 91), (2, 47)]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [36, 50, 0]]
** centroid: 4, normalized-entropy: 0.9807983646944296, [(1, 36), (2, 50)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 53, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 53), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3334037787776658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3334037787776658, 0.21818694058034954] ***
*** starting iteration: 2; err: [Inf, 0.3334037787776658, 0.21818694058034954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3334037787776658, 0.21818694058034954, 0.20875684739295755] ***
*** starting iteration: 3; err: [Inf, 0.3334037787776658, 0.21818694058034954, 0.20875684739295755] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3334037787776658, 0.21818694058034954, 0.20875684739295755, 0.20143764003318199] ***
*** starting iteration: 4; err: [Inf, 0.3334037787776658, 0.21818694058034954, 0.20875684739295755, 0.20143764003318199] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3334037787776658, 0.21818694058034954, 0.20875684739295755, 0.20143764003318199, 0.19791798856572948] ***
*** starting iteration: 5; err: [Inf, 0.3334037787776658, 0.21818694058034954, 0.20875684739295755, 0.20143764003318199, 0.19791798856572948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3334037787776658, 0.21818694058034954, 0.20875684739295755, 0.20143764003318199, 0.19791798856572948, 0.19494529841314145] ***
*** starting iteration: 6; err: [Inf, 0.3334037787776658, 0.21818694058034954, 0.20875684739295755, 0.20143764003318199, 0.19791798856572948, 0.19494529841314145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3334037787776658, 0.21818694058034954, 0.20875684739295755, 0.20143764003318199, 0.19791798856572948, 0.19494529841314145, 0.19225654626653335] ***
*** starting iteration: 7; err: [Inf, 0.3334037787776658, 0.21818694058034954, 0.20875684739295755, 0.20143764003318199, 0.19791798856572948, 0.19494529841314145, 0.19225654626653335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3334037787776658, 0.21818694058034954, 0.20875684739295755, 0.20143764003318199, 0.19791798856572948, 0.19494529841314145, 0.19225654626653335, 0.19037649286645597] ***
*** starting iteration: 8; err: [Inf, 0.3334037787776658, 0.21818694058034954, 0.20875684739295755, 0.20143764003318199, 0.19791798856572948, 0.19494529841314145, 0.19225654626653335, 0.19037649286645597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3334037787776658, 0.21818694058034954, 0.20875684739295755, 0.20143764003318199, 0.19791798856572948, 0.19494529841314145, 0.19225654626653335, 0.19037649286645597, 0.1880569144709223] ***
*** starting iteration: 9; err: [Inf, 0.3334037787776658, 0.21818694058034954, 0.20875684739295755, 0.20143764003318199, 0.19791798856572948, 0.19494529841314145, 0.19225654626653335, 0.19037649286645597, 0.1880569144709223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3334037787776658, 0.21818694058034954, 0.20875684739295755, 0.20143764003318199, 0.19791798856572948, 0.19494529841314145, 0.19225654626653335, 0.19037649286645597, 0.1880569144709223, 0.18680321519448795] ***
*** starting iteration: 10; err: [Inf, 0.3334037787776658, 0.21818694058034954, 0.20875684739295755, 0.20143764003318199, 0.19791798856572948, 0.19494529841314145, 0.19225654626653335, 0.19037649286645597, 0.1880569144709223, 0.18680321519448795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3334037787776658, 0.21818694058034954, 0.20875684739295755, 0.20143764003318199, 0.19791798856572948, 0.19494529841314145, 0.19225654626653335, 0.19037649286645597, 0.1880569144709223, 0.18680321519448795, 0.1862278140591237] ***
*** finished computation of 7 references, err: [Inf, 0.3334037787776658, 0.21818694058034954, 0.20875684739295755, 0.20143764003318199, 0.19791798856572948, 0.19494529841314145, 0.19225654626653335, 0.19037649286645597, 0.1880569144709223, 0.18680321519448795, 0.1862278140591237] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [16, 59, 0]]
** centroid: 1, normalized-entropy: 0.7478061583312324, [(1, 16), (2, 59)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [2, 81, 0]]
** centroid: 2, normalized-entropy: 0.1638605128691586, [(1, 2), (2, 81)]
*** center 3: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 61, 22]]
** centroid: 4, normalized-entropy: 0.8342867421739538, [(2, 61), (3, 22)]
*** center 5: selecting labels [1] (freq >= 2) [from [141, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [72, 35, 0]]
** centroid: 7, normalized-entropy: 0.9119388957757234, [(1, 72), (2, 35)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3274724885899534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3274724885899534, 0.25250798555766824] ***
*** starting iteration: 2; err: [Inf, 0.3274724885899534, 0.25250798555766824] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3274724885899534, 0.25250798555766824, 0.22910270578928874] ***
*** starting iteration: 3; err: [Inf, 0.3274724885899534, 0.25250798555766824, 0.22910270578928874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3274724885899534, 0.25250798555766824, 0.22910270578928874, 0.21704299077726733] ***
*** starting iteration: 4; err: [Inf, 0.3274724885899534, 0.25250798555766824, 0.22910270578928874, 0.21704299077726733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3274724885899534, 0.25250798555766824, 0.22910270578928874, 0.21704299077726733, 0.20285720322937376] ***
*** starting iteration: 5; err: [Inf, 0.3274724885899534, 0.25250798555766824, 0.22910270578928874, 0.21704299077726733, 0.20285720322937376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3274724885899534, 0.25250798555766824, 0.22910270578928874, 0.21704299077726733, 0.20285720322937376, 0.19800910500898913] ***
*** starting iteration: 6; err: [Inf, 0.3274724885899534, 0.25250798555766824, 0.22910270578928874, 0.21704299077726733, 0.20285720322937376, 0.19800910500898913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3274724885899534, 0.25250798555766824, 0.22910270578928874, 0.21704299077726733, 0.20285720322937376, 0.19800910500898913, 0.19568503940704166] ***
*** starting iteration: 7; err: [Inf, 0.3274724885899534, 0.25250798555766824, 0.22910270578928874, 0.21704299077726733, 0.20285720322937376, 0.19800910500898913, 0.19568503940704166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3274724885899534, 0.25250798555766824, 0.22910270578928874, 0.21704299077726733, 0.20285720322937376, 0.19800910500898913, 0.19568503940704166, 0.19436380977294165] ***
*** starting iteration: 8; err: [Inf, 0.3274724885899534, 0.25250798555766824, 0.22910270578928874, 0.21704299077726733, 0.20285720322937376, 0.19800910500898913, 0.19568503940704166, 0.19436380977294165] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3274724885899534, 0.25250798555766824, 0.22910270578928874, 0.21704299077726733, 0.20285720322937376, 0.19800910500898913, 0.19568503940704166, 0.19436380977294165, 0.19363661062752904] ***
*** finished computation of 7 references, err: [Inf, 0.3274724885899534, 0.25250798555766824, 0.22910270578928874, 0.21704299077726733, 0.20285720322937376, 0.19800910500898913, 0.19568503940704166, 0.19436380977294165, 0.19363661062752904] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [82, 17, 0]]
** centroid: 1, normalized-entropy: 0.6616179061408356, [(1, 82), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [12, 64, 0]]
** centroid: 2, normalized-entropy: 0.6292492238560344, [(1, 12), (2, 64)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [27, 33, 0]]
** centroid: 3, normalized-entropy: 0.9927744539878083, [(1, 27), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [65, 26, 0]]
** centroid: 4, normalized-entropy: 0.8631205685666311, [(1, 65), (2, 26)]
*** center 5: selecting labels [1] (freq >= 2) [from [134, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 98, 21]]
** centroid: 6, normalized-entropy: 0.6722948170756378, [(2, 98), (3, 21)]
*** center 7: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1938238169623164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1938238169623164, 0.154342741298548] ***
*** finished computation of 7 references, err: [Inf, 0.1938238169623164, 0.154342741298548] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 116, 17]]
** centroid: 1, normalized-entropy: 0.5514278209443916, [(2, 116), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 2, 0]]
** centroid: 3, normalized-entropy: 0.2108423003185322, [(1, 58), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [87, 24, 0]]
** centroid: 4, normalized-entropy: 0.7531979910695015, [(1, 87), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [107, 23, 0]]
** centroid: 5, normalized-entropy: 0.673299408918962, [(1, 107), (2, 23)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 85, 0]]
** centroid: 6, normalized-entropy: 0.3882389775123619, [(1, 7), (2, 85)]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20162214107554535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20162214107554535, 0.1524139123366981] ***
*** finished computation of 7 references, err: [Inf, 0.20162214107554535, 0.1524139123366981] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 76, 22]]
** centroid: 1, normalized-entropy: 0.7682814090975241, [(2, 76), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 41, 0]]
** centroid: 4, normalized-entropy: 0.98460399620868, [(1, 55), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [89, 35, 0]]
** centroid: 5, normalized-entropy: 0.8585093672491074, [(1, 89), (2, 35)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 84, 0]]
** centroid: 6, normalized-entropy: 0.21639693245126485, [(1, 3), (2, 84)]
*** center 7: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20331273818140042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20331273818140042, 0.15621107946690369] ***
*** finished computation of 7 references, err: [Inf, 0.20331273818140042, 0.15621107946690369] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [24, 104, 0]]
** centroid: 1, normalized-entropy: 0.6962122601251459, [(1, 24), (2, 104)]
*** center 2: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 42, 0]]
** centroid: 3, normalized-entropy: 0.9519543850564236, [(1, 71), (2, 42)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 30, 0]]
** centroid: 4, normalized-entropy: 0.9330252953592912, [(1, 56), (2, 30)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 62, 21]]
** centroid: 5, normalized-entropy: 0.8160172973428256, [(2, 62), (3, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2887335332731406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2887335332731406, 0.22822366403723443] ***
*** finished computation of 7 references, err: [Inf, 0.2887335332731406, 0.22822366403723443] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [32, 70, 1]]
** centroid: 1, normalized-entropy: 0.8974271930876951, [(1, 32), (2, 70)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [23, 42, 0]]
** centroid: 2, normalized-entropy: 0.937456170782005, [(1, 23), (2, 42)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [27, 25, 0]]
** centroid: 3, normalized-entropy: 0.9989326546260583, [(1, 27), (2, 25)]
*** center 4: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 6: selecting labels [1, 2, 3] (freq >= 2) [from [63, 113, 16]]
** centroid: 6, normalized-entropy: 0.8053027742952226, [(1, 63), (2, 113), (3, 16)]
*** center 7: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2538037583569827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2538037583569827, 0.2088833596652326] ***
*** finished computation of 7 references, err: [Inf, 0.2538037583569827, 0.2088833596652326] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 75, 0]]
** centroid: 1, normalized-entropy: 0.9945386816500111, [(1, 63), (2, 75)]
*** center 2: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [39, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 43, 0]]
** centroid: 4, normalized-entropy: 0.9875257101057102, [(1, 56), (2, 43)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 98, 22]]
** centroid: 5, normalized-entropy: 0.6873150928309273, [(2, 98), (3, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [91, 20, 0]]
** centroid: 7, normalized-entropy: 0.680471054135434, [(1, 91), (2, 20)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22072848335405562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22072848335405562, 0.2017760291476378] ***
*** finished computation of 7 references, err: [Inf, 0.22072848335405562, 0.2017760291476378] ***
*** center 1: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [95, 51, 0]]
** centroid: 2, normalized-entropy: 0.9334548655102479, [(1, 95), (2, 51)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 98, 6]]
** centroid: 3, normalized-entropy: 0.3182152976832332, [(2, 98), (3, 6)]
*** center 4: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 52, 15]]
** centroid: 5, normalized-entropy: 0.7671903206448686, [(2, 52), (3, 15)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [50, 21, 0]]
** centroid: 6, normalized-entropy: 0.8760643678555242, [(1, 50), (2, 21)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [94, 16, 0]]
** centroid: 7, normalized-entropy: 0.5983474220910422, [(1, 94), (2, 16)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5500040235719433] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5500040235719433, 0.32396209948100485] ***
*** starting iteration: 2; err: [Inf, 0.5500040235719433, 0.32396209948100485] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5500040235719433, 0.32396209948100485, 0.30290511760485916] ***
*** starting iteration: 3; err: [Inf, 0.5500040235719433, 0.32396209948100485, 0.30290511760485916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5500040235719433, 0.32396209948100485, 0.30290511760485916, 0.2988370432904376] ***
*** finished computation of 3 references, err: [Inf, 0.5500040235719433, 0.32396209948100485, 0.30290511760485916, 0.2988370432904376] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [136, 69, 0]]
** centroid: 1, normalized-entropy: 0.9215135925408615, [(1, 136), (2, 69)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 167, 17]]
** centroid: 2, normalized-entropy: 0.44440171070689066, [(2, 167), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [263, 14, 0]]
** centroid: 3, normalized-entropy: 0.288692840804849, [(1, 263), (2, 14)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.41082435131430445] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41082435131430445, 0.33816228092353473] ***
*** starting iteration: 2; err: [Inf, 0.41082435131430445, 0.33816228092353473] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41082435131430445, 0.33816228092353473, 0.31590305022180437] ***
*** starting iteration: 3; err: [Inf, 0.41082435131430445, 0.33816228092353473, 0.31590305022180437] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41082435131430445, 0.33816228092353473, 0.31590305022180437, 0.30873613692038154] ***
*** finished computation of 3 references, err: [Inf, 0.41082435131430445, 0.33816228092353473, 0.31590305022180437, 0.30873613692038154] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [263, 30, 0]]
** centroid: 1, normalized-entropy: 0.47652336618971874, [(1, 263), (2, 30)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 184, 22]]
** centroid: 2, normalized-entropy: 0.4901757916273403, [(2, 184), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [146, 22, 0]]
** centroid: 3, normalized-entropy: 0.5600443203590992, [(1, 146), (2, 22)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.6210232828890366] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6210232828890366, 0.339258981850473] ***
*** starting iteration: 2; err: [Inf, 0.6210232828890366, 0.339258981850473] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6210232828890366, 0.339258981850473, 0.30911851634943055] ***
*** starting iteration: 3; err: [Inf, 0.6210232828890366, 0.339258981850473, 0.30911851634943055] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6210232828890366, 0.339258981850473, 0.30911851634943055, 0.29879560689769985] ***
*** finished computation of 3 references, err: [Inf, 0.6210232828890366, 0.339258981850473, 0.30911851634943055, 0.29879560689769985] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [99, 152, 21]]
** centroid: 1, normalized-entropy: 0.8108373768153324, [(1, 99), (2, 152), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [130, 86, 0]]
** centroid: 2, normalized-entropy: 0.9698570179131006, [(1, 130), (2, 86)]
*** center 3: selecting labels [1] (freq >= 2) [from [179, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2792423497941401] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2792423497941401, 0.24605180748756528] ***
*** starting iteration: 2; err: [Inf, 0.2792423497941401, 0.24605180748756528] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2792423497941401, 0.24605180748756528, 0.24168159202679534] ***
*** starting iteration: 3; err: [Inf, 0.2792423497941401, 0.24605180748756528, 0.24168159202679534] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2792423497941401, 0.24605180748756528, 0.24168159202679534, 0.2404510376278546] ***
*** starting iteration: 4; err: [Inf, 0.2792423497941401, 0.24605180748756528, 0.24168159202679534, 0.2404510376278546] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2792423497941401, 0.24605180748756528, 0.24168159202679534, 0.2404510376278546, 0.23975885454383497] ***
*** finished computation of 3 references, err: [Inf, 0.2792423497941401, 0.24605180748756528, 0.24168159202679534, 0.2404510376278546, 0.23975885454383497] ***
*** center 1: selecting labels [1] (freq >= 2) [from [216, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [61, 163, 17]]
** centroid: 2, normalized-entropy: 0.7275373901904056, [(1, 61), (2, 163), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [122, 87, 0]]
** centroid: 3, normalized-entropy: 0.9796747334133636, [(1, 122), (2, 87)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3109494555913292] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3109494555913292, 0.23843832316318306] ***
*** starting iteration: 2; err: [Inf, 0.3109494555913292, 0.23843832316318306] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3109494555913292, 0.23843832316318306, 0.23429614049696673] ***
*** starting iteration: 3; err: [Inf, 0.3109494555913292, 0.23843832316318306, 0.23429614049696673] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3109494555913292, 0.23843832316318306, 0.23429614049696673, 0.23348979750226462] ***
*** finished computation of 3 references, err: [Inf, 0.3109494555913292, 0.23843832316318306, 0.23429614049696673, 0.23348979750226462] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [54, 160, 22]]
** centroid: 1, normalized-entropy: 0.7483571260593737, [(1, 54), (2, 160), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [117, 76, 0]]
** centroid: 2, normalized-entropy: 0.9671971242475061, [(1, 117), (2, 76)]
*** center 3: selecting labels [1] (freq >= 2) [from [238, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3717567610904865] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3717567610904865, 0.24787779960912587] ***
*** starting iteration: 2; err: [Inf, 0.3717567610904865, 0.24787779960912587] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3717567610904865, 0.24787779960912587, 0.23435647888639677] ***
*** starting iteration: 3; err: [Inf, 0.3717567610904865, 0.24787779960912587, 0.23435647888639677] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3717567610904865, 0.24787779960912587, 0.23435647888639677, 0.23224654898600378] ***
*** starting iteration: 4; err: [Inf, 0.3717567610904865, 0.24787779960912587, 0.23435647888639677, 0.23224654898600378] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3717567610904865, 0.24787779960912587, 0.23435647888639677, 0.23224654898600378, 0.23192775453757802] ***
*** finished computation of 3 references, err: [Inf, 0.3717567610904865, 0.24787779960912587, 0.23435647888639677, 0.23224654898600378, 0.23192775453757802] ***
*** center 1: selecting labels [1] (freq >= 2) [from [217, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [88, 105, 3]]
** centroid: 2, normalized-entropy: 0.6898459744408582, [(1, 88), (2, 105), (3, 3)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [103, 133, 18]]
** centroid: 3, normalized-entropy: 0.812272731418114, [(1, 103), (2, 133), (3, 18)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.29008950025413754] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29008950025413754, 0.24672280711488234] ***
*** starting iteration: 2; err: [Inf, 0.29008950025413754, 0.24672280711488234] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29008950025413754, 0.24672280711488234, 0.24284074573033676] ***
*** starting iteration: 3; err: [Inf, 0.29008950025413754, 0.24672280711488234, 0.24284074573033676] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29008950025413754, 0.24672280711488234, 0.24284074573033676, 0.24205038553053462] ***
*** finished computation of 3 references, err: [Inf, 0.29008950025413754, 0.24672280711488234, 0.24284074573033676, 0.24205038553053462] ***
*** center 1: selecting labels [1] (freq >= 1) [from [251, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [10, 193, 17]]
** centroid: 2, normalized-entropy: 0.4125385228274118, [(1, 10), (2, 193), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [138, 57, 0]]
** centroid: 3, normalized-entropy: 0.871683617119982, [(1, 138), (2, 57)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2580405432686232] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2580405432686232, 0.24220552319741767] ***
*** starting iteration: 2; err: [Inf, 0.2580405432686232, 0.24220552319741767] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2580405432686232, 0.24220552319741767, 0.23991877030695732] ***
*** starting iteration: 3; err: [Inf, 0.2580405432686232, 0.24220552319741767, 0.23991877030695732] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2580405432686232, 0.24220552319741767, 0.23991877030695732, 0.23887212551862136] ***
*** starting iteration: 4; err: [Inf, 0.2580405432686232, 0.24220552319741767, 0.23991877030695732, 0.23887212551862136] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2580405432686232, 0.24220552319741767, 0.23991877030695732, 0.23887212551862136, 0.23791761736830938] ***
*** finished computation of 3 references, err: [Inf, 0.2580405432686232, 0.24220552319741767, 0.23991877030695732, 0.23887212551862136, 0.23791761736830938] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [254, 1, 0]]
** centroid: 1, normalized-entropy: 0.036996925328935865, [(1, 254), (2, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [10, 183, 22]]
** centroid: 2, normalized-entropy: 0.4670688324169995, [(1, 10), (2, 183), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [145, 52, 0]]
** centroid: 3, normalized-entropy: 0.8326625636416438, [(1, 145), (2, 52)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2563126135528132] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2563126135528132, 0.23336184735450408] ***
*** starting iteration: 2; err: [Inf, 0.2563126135528132, 0.23336184735450408] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2563126135528132, 0.23336184735450408, 0.23196402555429327] ***
*** starting iteration: 3; err: [Inf, 0.2563126135528132, 0.23336184735450408, 0.23196402555429327] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2563126135528132, 0.23336184735450408, 0.23196402555429327, 0.23178684781968728] ***
*** finished computation of 3 references, err: [Inf, 0.2563126135528132, 0.23336184735450408, 0.23196402555429327, 0.23178684781968728] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [102, 130, 18]]
** centroid: 1, normalized-entropy: 0.8148892366042803, [(1, 102), (2, 130), (3, 18)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [94, 108, 3]]
** centroid: 2, normalized-entropy: 0.6890347848215554, [(1, 94), (2, 108), (3, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [212, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37174556375126] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37174556375126, 0.24655225909735962] ***
*** starting iteration: 2; err: [Inf, 0.37174556375126, 0.24655225909735962] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37174556375126, 0.24655225909735962, 0.2428002558493366] ***
*** starting iteration: 3; err: [Inf, 0.37174556375126, 0.24655225909735962, 0.2428002558493366] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37174556375126, 0.24655225909735962, 0.2428002558493366, 0.24224849689860936] ***
*** finished computation of 3 references, err: [Inf, 0.37174556375126, 0.24655225909735962, 0.2428002558493366, 0.24224849689860936] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [243, 20, 0]]
** centroid: 1, normalized-entropy: 0.38809009091225677, [(1, 243), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [156, 46, 0]]
** centroid: 2, normalized-entropy: 0.7740204128451942, [(1, 156), (2, 46)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 184, 17]]
** centroid: 3, normalized-entropy: 0.4181050831403908, [(2, 184), (3, 17)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3259804004794922] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3259804004794922, 0.24365172020649759] ***
*** starting iteration: 2; err: [Inf, 0.3259804004794922, 0.24365172020649759] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3259804004794922, 0.24365172020649759, 0.2367393813082722] ***
*** starting iteration: 3; err: [Inf, 0.3259804004794922, 0.24365172020649759, 0.2367393813082722] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3259804004794922, 0.24365172020649759, 0.2367393813082722, 0.23518270862706261] ***
*** finished computation of 3 references, err: [Inf, 0.3259804004794922, 0.24365172020649759, 0.2367393813082722, 0.23518270862706261] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [80, 158, 22]]
** centroid: 1, normalized-entropy: 0.7958366639957789, [(1, 80), (2, 158), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [231, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [98, 78, 0]]
** centroid: 3, normalized-entropy: 0.9906649266228326, [(1, 98), (2, 78)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3328423203015211] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3328423203015211, 0.2329789219225856] ***
*** starting iteration: 2; err: [Inf, 0.3328423203015211, 0.2329789219225856] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3328423203015211, 0.2329789219225856, 0.23159558624531823] ***
*** starting iteration: 3; err: [Inf, 0.3328423203015211, 0.2329789219225856, 0.23159558624531823] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3328423203015211, 0.2329789219225856, 0.23159558624531823, 0.23102703146675582] ***
*** finished computation of 3 references, err: [Inf, 0.3328423203015211, 0.2329789219225856, 0.23159558624531823, 0.23102703146675582] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [272, 4, 0]]
** centroid: 1, normalized-entropy: 0.10928571467638523, [(1, 272), (2, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [10, 162, 21]]
** centroid: 2, normalized-entropy: 0.49307507056242345, [(1, 10), (2, 162), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [126, 72, 0]]
** centroid: 3, normalized-entropy: 0.9456603046006401, [(1, 126), (2, 72)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3556470877627979] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3556470877627979, 0.23629692360946164] ***
*** starting iteration: 2; err: [Inf, 0.3556470877627979, 0.23629692360946164] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3556470877627979, 0.23629692360946164, 0.23450646376763065] ***
*** starting iteration: 3; err: [Inf, 0.3556470877627979, 0.23629692360946164, 0.23450646376763065] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3556470877627979, 0.23629692360946164, 0.23450646376763065, 0.2339621719403623] ***
*** finished computation of 3 references, err: [Inf, 0.3556470877627979, 0.23629692360946164, 0.23450646376763065, 0.2339621719403623] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [263, 4, 0]]
** centroid: 1, normalized-entropy: 0.11224763886405, [(1, 263), (2, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [10, 181, 17]]
** centroid: 2, normalized-entropy: 0.42925429107085533, [(1, 10), (2, 181), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [126, 65, 0]]
** centroid: 3, normalized-entropy: 0.9251189944868535, [(1, 126), (2, 65)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9410128691565817, 0.9369908830986676, 0.9290008571445697, 0.9289978601355847, 0.9219938501375626, 0.9200368032703362, 0.9170038301774829, 0.9120018221814629, 0.9100267932603262, 0.9089898281515048, 0.8919788051524579, 0.8900187612762464, 0.8869797941654229, 0.8799607991224758]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9410128691565817
finished with 15
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9410128691565817, 0.9369908830986676, 0.9290008571445697, 0.9289978601355847, 0.9219938501375626, 0.9200368032703362, 0.9170038301774829, 0.9120018221814629, 0.9100267932603262, 0.9089898281515048, 0.8919788051524579, 0.8900187612762464, 0.8869797941654229, 0.8799607991224758, 0.7879765993538449]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9410128691565817
finished with 16
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.24247104017764912] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24247104017764912, 0.1960825766883567] ***
*** finished computation of 7 references, err: [Inf, 0.24247104017764912, 0.1960825766883567] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 61, 22]]
** centroid: 1, normalized-entropy: 0.8342867421739538, [(2, 61), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [124, 20, 0]]
** centroid: 5, normalized-entropy: 0.581321498763703, [(1, 124), (2, 20)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [32, 72, 0]]
** centroid: 6, normalized-entropy: 0.8904916402194913, [(1, 32), (2, 72)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 83, 0]]
** centroid: 7, normalized-entropy: 0.16082302082246946, [(1, 2), (2, 83)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2323100527663292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2323100527663292, 0.19444050987542927] ***
*** finished computation of 7 references, err: [Inf, 0.2323100527663292, 0.19444050987542927] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [53, 56, 0]]
** centroid: 1, normalized-entropy: 0.9994535015927487, [(1, 53), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 27, 0]]
** centroid: 2, normalized-entropy: 0.8894663896628687, [(1, 61), (2, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 112, 21]]
** centroid: 4, normalized-entropy: 0.6292492238560344, [(2, 112), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [80, 43, 0]]
** centroid: 5, normalized-entropy: 0.9337044887280268, [(1, 80), (2, 43)]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2273675828987548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2273675828987548, 0.19836480810947427] ***
*** finished computation of 7 references, err: [Inf, 0.2273675828987548, 0.19836480810947427] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [53, 67, 0]]
** centroid: 1, normalized-entropy: 0.9901592635041827, [(1, 53), (2, 67)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [75, 21, 0]]
** centroid: 2, normalized-entropy: 0.7578784625383954, [(1, 75), (2, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 35, 17]]
** centroid: 4, normalized-entropy: 0.9117517586347538, [(2, 35), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [73, 24, 0]]
** centroid: 5, normalized-entropy: 0.8071675554288905, [(1, 73), (2, 24)]
*** center 6: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 103, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9410128691565817, 0.9370118621615627, 0.9369908830986676, 0.9290008571445697, 0.9289978601355847, 0.9219938501375626, 0.9200368032703362, 0.9170038301774829, 0.9120018221814629, 0.9100267932603262, 0.9089898281515048, 0.8919788051524579, 0.8900187612762464, 0.8869797941654229, 0.8799607991224758, 0.7879765993538449]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9410128691565817
finished with 16
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9410128691565817, 0.9370118621615627, 0.9369908830986676, 0.9290008571445697, 0.9289978601355847, 0.9219938501375626, 0.9200368032703362, 0.9170038301774829, 0.9120018221814629, 0.9100267932603262, 0.9089898281515048, 0.8919788051524579, 0.8900187612762464, 0.8869797941654229, 0.8799607991224758, 0.7879765993538449]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9410128691565817
finished with 17
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.29073475175481234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29073475175481234, 0.18342488404019391] ***
*** starting iteration: 2; err: [Inf, 0.29073475175481234, 0.18342488404019391] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29073475175481234, 0.18342488404019391, 0.16467668016667705] ***
*** starting iteration: 3; err: [Inf, 0.29073475175481234, 0.18342488404019391, 0.16467668016667705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29073475175481234, 0.18342488404019391, 0.16467668016667705, 0.155933482502692] ***
*** starting iteration: 4; err: [Inf, 0.29073475175481234, 0.18342488404019391, 0.16467668016667705, 0.155933482502692] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29073475175481234, 0.18342488404019391, 0.16467668016667705, 0.155933482502692, 0.15212255346591588] ***
*** starting iteration: 5; err: [Inf, 0.29073475175481234, 0.18342488404019391, 0.16467668016667705, 0.155933482502692, 0.15212255346591588] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29073475175481234, 0.18342488404019391, 0.16467668016667705, 0.155933482502692, 0.15212255346591588, 0.14970660511916084] ***
*** starting iteration: 6; err: [Inf, 0.29073475175481234, 0.18342488404019391, 0.16467668016667705, 0.155933482502692, 0.15212255346591588, 0.14970660511916084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29073475175481234, 0.18342488404019391, 0.16467668016667705, 0.155933482502692, 0.15212255346591588, 0.14970660511916084, 0.14882677726799975] ***
*** finished computation of 7 references, err: [Inf, 0.29073475175481234, 0.18342488404019391, 0.16467668016667705, 0.155933482502692, 0.15212255346591588, 0.14970660511916084, 0.14882677726799975] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [95, 30, 0]]
** centroid: 1, normalized-entropy: 0.7950402793845225, [(1, 95), (2, 30)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 85, 17]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(2, 85), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 46, 0]]
** centroid: 3, normalized-entropy: 0.9972943816462351, [(1, 52), (2, 46)]
*** center 4: selecting labels [1] (freq >= 2) [from [123, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 80, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [56, 9, 0]]
** centroid: 6, normalized-entropy: 0.5801954953637372, [(1, 56), (2, 9)]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29585639538377456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29585639538377456, 0.20498372205202167] ***
*** starting iteration: 2; err: [Inf, 0.29585639538377456, 0.20498372205202167] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29585639538377456, 0.20498372205202167, 0.1830907505078205] ***
*** starting iteration: 3; err: [Inf, 0.29585639538377456, 0.20498372205202167, 0.1830907505078205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29585639538377456, 0.20498372205202167, 0.1830907505078205, 0.17296407226964586] ***
*** starting iteration: 4; err: [Inf, 0.29585639538377456, 0.20498372205202167, 0.1830907505078205, 0.17296407226964586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29585639538377456, 0.20498372205202167, 0.1830907505078205, 0.17296407226964586, 0.1675453367866464] ***
*** starting iteration: 5; err: [Inf, 0.29585639538377456, 0.20498372205202167, 0.1830907505078205, 0.17296407226964586, 0.1675453367866464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29585639538377456, 0.20498372205202167, 0.1830907505078205, 0.17296407226964586, 0.1675453367866464, 0.16439601403662468] ***
*** starting iteration: 6; err: [Inf, 0.29585639538377456, 0.20498372205202167, 0.1830907505078205, 0.17296407226964586, 0.1675453367866464, 0.16439601403662468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29585639538377456, 0.20498372205202167, 0.1830907505078205, 0.17296407226964586, 0.1675453367866464, 0.16439601403662468, 0.16181893775175357] ***
*** starting iteration: 7; err: [Inf, 0.29585639538377456, 0.20498372205202167, 0.1830907505078205, 0.17296407226964586, 0.1675453367866464, 0.16439601403662468, 0.16181893775175357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29585639538377456, 0.20498372205202167, 0.1830907505078205, 0.17296407226964586, 0.1675453367866464, 0.16439601403662468, 0.16181893775175357, 0.1602794142227726] ***
*** starting iteration: 8; err: [Inf, 0.29585639538377456, 0.20498372205202167, 0.1830907505078205, 0.17296407226964586, 0.1675453367866464, 0.16439601403662468, 0.16181893775175357, 0.1602794142227726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29585639538377456, 0.20498372205202167, 0.1830907505078205, 0.17296407226964586, 0.1675453367866464, 0.16439601403662468, 0.16181893775175357, 0.1602794142227726, 0.15964500790509373] ***
*** finished computation of 7 references, err: [Inf, 0.29585639538377456, 0.20498372205202167, 0.1830907505078205, 0.17296407226964586, 0.1675453367866464, 0.16439601403662468, 0.16181893775175357, 0.1602794142227726, 0.15964500790509373] ***
*** center 1: selecting labels [1] (freq >= 2) [from [105, 1, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [144, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [5, 53, 0]]
** centroid: 4, normalized-entropy: 0.4236805715709106, [(1, 5), (2, 53)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [1, 87, 2]]
** centroid: 5, normalized-entropy: 0.1551032721030341, [(2, 87), (3, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [99, 26, 0]]
** centroid: 6, normalized-entropy: 0.737642380185689, [(1, 99), (2, 26)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 69, 20]]
** centroid: 7, normalized-entropy: 0.7686913027030167, [(2, 69), (3, 20)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2260769656007604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2260769656007604, 0.1782965206085932] ***
*** starting iteration: 2; err: [Inf, 0.2260769656007604, 0.1782965206085932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2260769656007604, 0.1782965206085932, 0.16621786837690863] ***
*** starting iteration: 3; err: [Inf, 0.2260769656007604, 0.1782965206085932, 0.16621786837690863] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2260769656007604, 0.1782965206085932, 0.16621786837690863, 0.15856526171540034] ***
*** starting iteration: 4; err: [Inf, 0.2260769656007604, 0.1782965206085932, 0.16621786837690863, 0.15856526171540034] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2260769656007604, 0.1782965206085932, 0.16621786837690863, 0.15856526171540034, 0.153196171776083] ***
*** starting iteration: 5; err: [Inf, 0.2260769656007604, 0.1782965206085932, 0.16621786837690863, 0.15856526171540034, 0.153196171776083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2260769656007604, 0.1782965206085932, 0.16621786837690863, 0.15856526171540034, 0.153196171776083, 0.14958432484578726] ***
*** starting iteration: 6; err: [Inf, 0.2260769656007604, 0.1782965206085932, 0.16621786837690863, 0.15856526171540034, 0.153196171776083, 0.14958432484578726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2260769656007604, 0.1782965206085932, 0.16621786837690863, 0.15856526171540034, 0.153196171776083, 0.14958432484578726, 0.14759166181266217] ***
*** starting iteration: 7; err: [Inf, 0.2260769656007604, 0.1782965206085932, 0.16621786837690863, 0.15856526171540034, 0.153196171776083, 0.14958432484578726, 0.14759166181266217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2260769656007604, 0.1782965206085932, 0.16621786837690863, 0.15856526171540034, 0.153196171776083, 0.14958432484578726, 0.14759166181266217, 0.14625114571886777] ***
*** starting iteration: 8; err: [Inf, 0.2260769656007604, 0.1782965206085932, 0.16621786837690863, 0.15856526171540034, 0.153196171776083, 0.14958432484578726, 0.14759166181266217, 0.14625114571886777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2260769656007604, 0.1782965206085932, 0.16621786837690863, 0.15856526171540034, 0.153196171776083, 0.14958432484578726, 0.14759166181266217, 0.14625114571886777, 0.14557968189931478] ***
*** finished computation of 7 references, err: [Inf, 0.2260769656007604, 0.1782965206085932, 0.16621786837690863, 0.15856526171540034, 0.153196171776083, 0.14958432484578726, 0.14759166181266217, 0.14625114571886777, 0.14557968189931478] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [88, 14, 0]]
** centroid: 1, normalized-entropy: 0.577004250315725, [(1, 88), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [87, 19, 0]]
** centroid: 2, normalized-entropy: 0.6784232197116191, [(1, 87), (2, 19)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 91, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [14, 71, 0]]
** centroid: 6, normalized-entropy: 0.6454495903301855, [(1, 14), (2, 71)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 43, 21]]
** centroid: 7, normalized-entropy: 0.912999213585247, [(2, 43), (3, 21)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 17)
[0.9410128691565817, 0.9370118621615627, 0.9369908830986676, 0.9359868850886816, 0.9290008571445697, 0.9289978601355847, 0.9219938501375626, 0.9200368032703362, 0.9170038301774829, 0.9120018221814629, 0.9100267932603262, 0.9089898281515048, 0.8919788051524579, 0.8900187612762464, 0.8869797941654229, 0.8799607991224758, 0.7879765993538449]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9410128691565817
finished with 18
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.22348705347971404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22348705347971404, 0.16813075492248028] ***
*** finished computation of 7 references, err: [Inf, 0.22348705347971404, 0.16813075492248028] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [124, 22, 0]]
** centroid: 1, normalized-entropy: 0.6115516951951333, [(1, 124), (2, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 117, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [58, 67, 0]]
** centroid: 6, normalized-entropy: 0.9962572968375276, [(1, 58), (2, 67)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 44, 17]]
** centroid: 7, normalized-entropy: 0.8536576732793314, [(2, 44), (3, 17)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19479190992300344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19479190992300344, 0.1610739606668589] ***
*** finished computation of 7 references, err: [Inf, 0.19479190992300344, 0.1610739606668589] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [49, 60, 0]]
** centroid: 1, normalized-entropy: 0.9926410394727402, [(1, 49), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [81, 38, 0]]
** centroid: 2, normalized-entropy: 0.9036488915053315, [(1, 81), (2, 38)]
*** center 3: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 128, 22]]
** centroid: 4, normalized-entropy: 0.6014353864290773, [(2, 128), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [116, 10, 0]]
** centroid: 5, normalized-entropy: 0.39993804743902767, [(1, 116), (2, 10)]
*** center 6: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24409445541780972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24409445541780972, 0.20046424592329912] ***
*** finished computation of 7 references, err: [Inf, 0.24409445541780972, 0.20046424592329912] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 88, 6]]
** centroid: 2, normalized-entropy: 0.3424637724817958, [(2, 88), (3, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [122, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [3, 55, 0]]
** centroid: 4, normalized-entropy: 0.29367630985136944, [(1, 3), (2, 55)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [91, 15, 0]]
** centroid: 5, normalized-entropy: 0.5881782735046225, [(1, 91), (2, 15)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 9, 15]]
** centroid: 6, normalized-entropy: 0.954434002924965, [(2, 9), (3, 15)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [192, 6, 0]]
** centroid: 7, normalized-entropy: 0.19590927087360496, [(1, 192), (2, 6)]
finished with 8 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 18)
[0.9449899000797203, 0.9410128691565817, 0.9370118621615627, 0.9369908830986676, 0.9359868850886816, 0.9290008571445697, 0.9289978601355847, 0.9219938501375626, 0.9200368032703362, 0.9170038301774829, 0.9120018221814629, 0.9100267932603262, 0.9089898281515048, 0.8919788051524579, 0.8900187612762464, 0.8869797941654229, 0.8799607991224758, 0.7879765993538449]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9449899000797203
finished with 18
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9449899000797203, 0.9410128691565817, 0.9370118621615627, 0.9369908830986676, 0.9359868850886816, 0.9290008571445697, 0.9289978601355847, 0.9219938501375626, 0.9200368032703362, 0.9170038301774829, 0.9120018221814629, 0.9100267932603262, 0.9089898281515048, 0.8919788051524579, 0.8900187612762464, 0.8869797941654229, 0.8799607991224758, 0.7879765993538449]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9449899000797203
finished with 18
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9449899000797203, 0.9410128691565817, 0.9370118621615627, 0.9369908830986676, 0.9359868850886816, 0.9290008571445697, 0.9289978601355847, 0.9219938501375626, 0.9200368032703362, 0.9170038301774829, 0.9120018221814629, 0.9100267932603262, 0.9089898281515048, 0.8919788051524579, 0.8900187612762464, 0.8869797941654229, 0.8799607991224758, 0.7879765993538449]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9449899000797203
finished with 19
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.20124458850224367] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20124458850224367, 0.15775266033317614] ***
*** finished computation of 7 references, err: [Inf, 0.20124458850224367, 0.15775266033317614] ***
*** center 1: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 55, 0]]
** centroid: 2, normalized-entropy: 0.9999392847706552, [(1, 54), (2, 55)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [27, 57, 0]]
** centroid: 3, normalized-entropy: 0.9059282160429994, [(1, 27), (2, 57)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [57, 52, 0]]
** centroid: 4, normalized-entropy: 0.9984816077977791, [(1, 57), (2, 52)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 86, 17]]
** centroid: 5, normalized-entropy: 0.646251622274129, [(2, 86), (3, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1913218928369759] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1913218928369759, 0.16260995418308066] ***
*** finished computation of 7 references, err: [Inf, 0.1913218928369759, 0.16260995418308066] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [97, 17, 0]]
** centroid: 1, normalized-entropy: 0.6076407686085387, [(1, 97), (2, 17)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [4, 81, 1]]
** centroid: 2, normalized-entropy: 0.22838863773690846, [(1, 4), (2, 81), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [81, 31, 0]]
** centroid: 5, normalized-entropy: 0.8510340662036064, [(1, 81), (2, 31)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 107, 21]]
** centroid: 6, normalized-entropy: 0.6439403638806508, [(2, 107), (3, 21)]
*** center 7: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23584760771156743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23584760771156743, 0.15931248520933808] ***
*** finished computation of 7 references, err: [Inf, 0.23584760771156743, 0.15931248520933808] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 92, 21]]
** centroid: 1, normalized-entropy: 0.6926889992682925, [(2, 92), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [48, 48, 0]]
** centroid: 4, normalized-entropy: 1.0, [(1, 48), (2, 48)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [95, 25, 0]]
** centroid: 5, normalized-entropy: 0.7382848661434506, [(1, 95), (2, 25)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [30, 73, 0]]
** centroid: 6, normalized-entropy: 0.8703460546929581, [(1, 30), (2, 73)]
*** center 7: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
finished with 11 centroids; started with 7
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.18518607846833765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18518607846833765, 0.15942631552601233] ***
*** finished computation of 7 references, err: [Inf, 0.18518607846833765, 0.15942631552601233] ***
*** center 1: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 111, 30]]
** centroid: 2, normalized-entropy: 0.7467366074830678, [(2, 111), (3, 30)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 128, 0]]
** centroid: 3, normalized-entropy: 0.934294522412246, [(1, 69), (2, 128)]
*** center 4: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 102, 0]]
** centroid: 5, normalized-entropy: 0.8708644692353648, [(1, 42), (2, 102)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [195, 21, 0]]
** centroid: 6, normalized-entropy: 0.460127886147135, [(1, 195), (2, 21)]
*** center 7: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21121810869313776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21121810869313776, 0.16226415550336243] ***
*** finished computation of 7 references, err: [Inf, 0.21121810869313776, 0.16226415550336243] ***
*** center 1: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [3, 56, 0]]
** centroid: 4, normalized-entropy: 0.2899860470332091, [(1, 3), (2, 56)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [36, 36, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 36), (2, 36)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [63, 42, 0]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(1, 63), (2, 42)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 41, 18]]
** centroid: 7, normalized-entropy: 0.8874179270685693, [(2, 41), (3, 18)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18920148090273142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18920148090273142, 0.1558773413724266] ***
*** finished computation of 7 references, err: [Inf, 0.18920148090273142, 0.1558773413724266] ***
*** center 1: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 76, 15]]
** centroid: 2, normalized-entropy: 0.6457523329916605, [(2, 76), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 40, 0]]
** centroid: 3, normalized-entropy: 0.9755259511264975, [(1, 58), (2, 40)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [15, 48, 0]]
** centroid: 4, normalized-entropy: 0.7918583525674836, [(1, 15), (2, 48)]
*** center 5: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [59, 24, 0]]
** centroid: 7, normalized-entropy: 0.8676293117125105, [(1, 59), (2, 24)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20352799292467535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20352799292467535, 0.1619116579145193] ***
*** finished computation of 7 references, err: [Inf, 0.20352799292467535, 0.1619116579145193] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [15, 3, 0]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(1, 15), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [77, 22, 0]]
** centroid: 2, normalized-entropy: 0.7642045065086204, [(1, 77), (2, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [4, 75, 0]]
** centroid: 4, normalized-entropy: 0.2890794597316462, [(1, 4), (2, 75)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 41, 12]]
** centroid: 5, normalized-entropy: 0.7717094696953635, [(2, 41), (3, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [58, 31, 0]]
** centroid: 6, normalized-entropy: 0.9325538428833382, [(1, 58), (2, 31)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [54, 9, 0]]
** centroid: 7, normalized-entropy: 0.5916727785823274, [(1, 54), (2, 9)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23394720537029207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23394720537029207, 0.17762018323666415] ***
*** finished computation of 7 references, err: [Inf, 0.23394720537029207, 0.17762018323666415] ***
*** center 1: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 3, 0]]
** centroid: 2, normalized-entropy: 0.2580186686648155, [(1, 66), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 90, 13]]
** centroid: 3, normalized-entropy: 0.5469617407220055, [(2, 90), (3, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [81, 64, 0]]
** centroid: 5, normalized-entropy: 0.9900618470242131, [(1, 81), (2, 64)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 34, 0]]
** centroid: 6, normalized-entropy: 0.552495114325111, [(1, 5), (2, 34)]
*** center 7: selecting labels [1] (freq >= 2) [from [26, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1977154723070562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1977154723070562, 0.1657283813310787] ***
*** finished computation of 7 references, err: [Inf, 0.1977154723070562, 0.1657283813310787] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [46, 3, 0]]
** centroid: 1, normalized-entropy: 0.3322866302216152, [(1, 46), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [26, 21, 0]]
** centroid: 2, normalized-entropy: 0.9918207974218425, [(1, 26), (2, 21)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 63, 19]]
** centroid: 3, normalized-entropy: 0.7809756883263416, [(2, 63), (3, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [32, 85, 0]]
** centroid: 4, normalized-entropy: 0.8464482275175529, [(1, 32), (2, 85)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 10, 0]]
** centroid: 5, normalized-entropy: 0.9798687566511527, [(1, 14), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [85, 4, 0]]
** centroid: 6, normalized-entropy: 0.2645173683629748, [(1, 85), (2, 4)]
*** center 7: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19897098682820796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19897098682820796, 0.16148174890503286] ***
*** finished computation of 7 references, err: [Inf, 0.19897098682820796, 0.16148174890503286] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [38, 15, 0]]
** centroid: 1, normalized-entropy: 0.8595316914502928, [(1, 38), (2, 15)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 56, 16]]
** centroid: 2, normalized-entropy: 0.7642045065086204, [(2, 56), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [122, 1, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [32, 48, 0]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(1, 32), (2, 48)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 60, 0]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(1, 3), (2, 60)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2295352819915861] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2295352819915861, 0.1753634904101491] ***
*** finished computation of 7 references, err: [Inf, 0.2295352819915861, 0.1753634904101491] ***
*** center 1: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 46, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 75, 0]]
** centroid: 3, normalized-entropy: 0.9807983646944296, [(1, 54), (2, 75)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 50, 18]]
** centroid: 4, normalized-entropy: 0.8337649072106652, [(2, 50), (3, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [27, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [54, 18, 0]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(1, 54), (2, 18)]
*** center 7: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21163566555269062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21163566555269062, 0.16048507746495305] ***
*** finished computation of 7 references, err: [Inf, 0.21163566555269062, 0.16048507746495305] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 52, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 54, 23]]
** centroid: 3, normalized-entropy: 0.8796975782775168, [(2, 54), (3, 23)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 12, 0]]
** centroid: 4, normalized-entropy: 0.5961045458832345, [(1, 71), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 66, 0]]
** centroid: 5, normalized-entropy: 0.9913740996986371, [(1, 53), (2, 66)]
*** center 6: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [76, 4, 0]]
** centroid: 7, normalized-entropy: 0.2863969571159561, [(1, 76), (2, 4)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20285599018167705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20285599018167705, 0.15552939513139427] ***
*** finished computation of 7 references, err: [Inf, 0.20285599018167705, 0.15552939513139427] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [4, 47, 0]]
** centroid: 1, normalized-entropy: 0.3966277727783787, [(1, 4), (2, 47)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 12, 0]]
** centroid: 2, normalized-entropy: 0.7568336324184036, [(1, 43), (2, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [17, 29, 0]]
** centroid: 3, normalized-entropy: 0.9503376699710269, [(1, 17), (2, 29)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [45, 22, 0]]
** centroid: 4, normalized-entropy: 0.9132401614300725, [(1, 45), (2, 22)]
*** center 5: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 71, 13]]
** centroid: 7, normalized-entropy: 0.6216297820565386, [(2, 71), (3, 13)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2100339307487011] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2100339307487011, 0.16418696666508914] ***
*** finished computation of 7 references, err: [Inf, 0.2100339307487011, 0.16418696666508914] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 93, 18]]
** centroid: 1, normalized-entropy: 0.6394571324851642, [(2, 93), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [87, 6, 0]]
** centroid: 2, normalized-entropy: 0.3451173149449528, [(1, 87), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 43, 0]]
** centroid: 5, normalized-entropy: 0.9978211842997324, [(1, 48), (2, 43)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 37, 0]]
** centroid: 6, normalized-entropy: 0.5266170655714281, [(1, 5), (2, 37)]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24614670155476778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24614670155476778, 0.16516157379001378] ***
*** finished computation of 7 references, err: [Inf, 0.24614670155476778, 0.16516157379001378] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [72, 6, 0]]
** centroid: 1, normalized-entropy: 0.3912435636292556, [(1, 72), (2, 6)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 47, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [51, 44, 0]]
** centroid: 4, normalized-entropy: 0.996079990851081, [(1, 51), (2, 44)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 21, 18]]
** centroid: 5, normalized-entropy: 0.9957274520849256, [(2, 21), (3, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [41, 49, 0]]
** centroid: 7, normalized-entropy: 0.9942929346520455, [(1, 41), (2, 49)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2003286153655499] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2003286153655499, 0.16825427923351527] ***
*** finished computation of 7 references, err: [Inf, 0.2003286153655499, 0.16825427923351527] ***
*** center 1: selecting labels [1] (freq >= 2) [from [28, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [94, 26, 0]]
** centroid: 3, normalized-entropy: 0.7540340561971327, [(1, 94), (2, 26)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 5, 0]]
** centroid: 4, normalized-entropy: 0.3674984948272913, [(1, 66), (2, 5)]
*** center 5: selecting labels [1] (freq >= 2) [from [28, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [44, 35, 0]]
** centroid: 6, normalized-entropy: 0.9906174973781801, [(1, 44), (2, 35)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 120, 12]]
** centroid: 7, normalized-entropy: 0.43949698692151346, [(2, 120), (3, 12)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19903472940740174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19903472940740174, 0.1610651331031695] ***
*** finished computation of 7 references, err: [Inf, 0.19903472940740174, 0.1610651331031695] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [14, 57, 0]]
** centroid: 1, normalized-entropy: 0.7162583911075451, [(1, 14), (2, 57)]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [34, 40, 0]]
** centroid: 3, normalized-entropy: 0.9952525494396791, [(1, 34), (2, 40)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 45, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 39, 15]]
** centroid: 5, normalized-entropy: 0.8524051786494784, [(2, 39), (3, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [92, 9, 0]]
** centroid: 7, normalized-entropy: 0.43348846324460666, [(1, 92), (2, 9)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1930791396945715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1930791396945715, 0.16349429926835002] ***
*** finished computation of 7 references, err: [Inf, 0.1930791396945715, 0.16349429926835002] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [14, 30, 0]]
** centroid: 1, normalized-entropy: 0.9023932827949788, [(1, 14), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [12, 49, 0]]
** centroid: 2, normalized-entropy: 0.7153220528038851, [(1, 12), (2, 49)]
*** center 3: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 4, 0]]
** centroid: 5, normalized-entropy: 0.3912435636292556, [(1, 48), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [68, 40, 0]]
** centroid: 6, normalized-entropy: 0.9509560484549724, [(1, 68), (2, 40)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 58, 13]]
** centroid: 7, normalized-entropy: 0.6868088934028034, [(2, 58), (3, 13)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21663812642358243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21663812642358243, 0.16871689392067493] ***
*** finished computation of 7 references, err: [Inf, 0.21663812642358243, 0.16871689392067493] ***
*** center 1: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 41, 16]]
** centroid: 2, normalized-entropy: 0.8564052389131375, [(2, 41), (3, 16)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 33, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [7, 55, 0]]
** centroid: 4, normalized-entropy: 0.5086113313826895, [(1, 7), (2, 55)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 12, 0]]
** centroid: 5, normalized-entropy: 0.6145715612236268, [(1, 67), (2, 12)]
*** center 6: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [122, 29, 0]]
** centroid: 7, normalized-entropy: 0.7057464344153325, [(1, 122), (2, 29)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1897609996937681] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1897609996937681, 0.17104879414103924] ***
*** finished computation of 7 references, err: [Inf, 0.1897609996937681, 0.17104879414103924] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [11, 64, 5]]
** centroid: 1, normalized-entropy: 0.5685533512523218, [(1, 11), (2, 64), (3, 5)]
*** center 2: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 38, 0]]
** centroid: 5, normalized-entropy: 0.9733854352299557, [(1, 56), (2, 38)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 73, 8]]
** centroid: 6, normalized-entropy: 0.46506984488164627, [(2, 73), (3, 8)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [29, 6, 0]]
** centroid: 7, normalized-entropy: 0.6609623351442084, [(1, 29), (2, 6)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20188299112580715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20188299112580715, 0.1554738910710439] ***
*** finished computation of 7 references, err: [Inf, 0.20188299112580715, 0.1554738910710439] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 26, 0]]
** centroid: 1, normalized-entropy: 0.6373874992221911, [(1, 5), (2, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 25, 0]]
** centroid: 3, normalized-entropy: 0.8524051786494784, [(1, 65), (2, 25)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [40, 19, 0]]
** centroid: 5, normalized-entropy: 0.9065795484987461, [(1, 40), (2, 19)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 38, 0]]
** centroid: 6, normalized-entropy: 0.5746356978376794, [(1, 6), (2, 38)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 65, 12]]
** centroid: 7, normalized-entropy: 0.6242741010130388, [(2, 65), (3, 12)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18695587229309604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18695587229309604, 0.15845212405733763] ***
*** finished computation of 7 references, err: [Inf, 0.18695587229309604, 0.15845212405733763] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 17, 16]]
** centroid: 1, normalized-entropy: 0.9993375041688846, [(2, 17), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 19, 0]]
** centroid: 3, normalized-entropy: 0.8325582396745668, [(1, 53), (2, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 42, 0]]
** centroid: 4, normalized-entropy: 0.9977221075331744, [(1, 47), (2, 42)]
*** center 5: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 52, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [36, 37, 0]]
** centroid: 7, normalized-entropy: 0.9998646331239297, [(1, 36), (2, 37)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1861027300907299] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1861027300907299, 0.15662344733253122] ***
*** finished computation of 7 references, err: [Inf, 0.1861027300907299, 0.15662344733253122] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 6, 0]]
** centroid: 1, normalized-entropy: 0.42622865699814483, [(1, 63), (2, 6)]
*** center 2: selecting labels [2] (freq >= 2) [from [1, 76, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [86, 4, 0]]
** centroid: 3, normalized-entropy: 0.2623112196143368, [(1, 86), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 28, 0]]
** centroid: 4, normalized-entropy: 0.8292743048721369, [(1, 79), (2, 28)]
*** center 5: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 29, 15]]
** centroid: 6, normalized-entropy: 0.9256859869821296, [(2, 29), (3, 15)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 47, 1]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26819585121795536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26819585121795536, 0.1673521365430206] ***
*** finished computation of 7 references, err: [Inf, 0.26819585121795536, 0.1673521365430206] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [110, 2, 0]]
** centroid: 1, normalized-entropy: 0.12923377484588472, [(1, 110), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 21, 0]]
** centroid: 2, normalized-entropy: 0.8304955225035798, [(1, 59), (2, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 23, 10]]
** centroid: 4, normalized-entropy: 0.8849636363831529, [(2, 23), (3, 10)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 51, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [55, 7, 0]]
** centroid: 6, normalized-entropy: 0.5086113313826895, [(1, 55), (2, 7)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 87, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19754285574145616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19754285574145616, 0.16004388121981175] ***
*** finished computation of 7 references, err: [Inf, 0.19754285574145616, 0.16004388121981175] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [37, 17, 0]]
** centroid: 1, normalized-entropy: 0.8986533756907481, [(1, 37), (2, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [39, 2, 0]]
** centroid: 3, normalized-entropy: 0.2811937964320427, [(1, 39), (2, 2)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 90, 14]]
** centroid: 4, normalized-entropy: 0.5699613760403499, [(2, 90), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 56, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 56), (2, 56)]
*** center 6: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [91, 9, 0]]
** centroid: 7, normalized-entropy: 0.4364698170641031, [(1, 91), (2, 9)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19810356054082512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19810356054082512, 0.1595244577107951] ***
*** finished computation of 7 references, err: [Inf, 0.19810356054082512, 0.1595244577107951] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 26, 17]]
** centroid: 1, normalized-entropy: 0.9681647320759545, [(2, 26), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [37, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [68, 51, 0]]
** centroid: 3, normalized-entropy: 0.9852281360342514, [(1, 68), (2, 51)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 20, 0]]
** centroid: 5, normalized-entropy: 0.8577435372751958, [(1, 51), (2, 20)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [36, 19, 0]]
** centroid: 6, normalized-entropy: 0.9299429352091801, [(1, 36), (2, 19)]
*** center 7: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2073206420391798] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2073206420391798, 0.16466180269792677] ***
*** finished computation of 7 references, err: [Inf, 0.2073206420391798, 0.16466180269792677] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 64, 13]]
** centroid: 1, normalized-entropy: 0.6550239908788728, [(2, 64), (3, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 55, 0]]
** centroid: 4, normalized-entropy: 0.9767349863544337, [(1, 79), (2, 55)]
*** center 5: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [13, 55, 0]]
** centroid: 6, normalized-entropy: 0.7039260680195971, [(1, 13), (2, 55)]
*** center 7: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22257190751098097] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22257190751098097, 0.16248475736379622] ***
*** finished computation of 7 references, err: [Inf, 0.22257190751098097, 0.16248475736379622] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [49, 29, 0]]
** centroid: 1, normalized-entropy: 0.9520402801398793, [(1, 49), (2, 29)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [26, 47, 0]]
** centroid: 2, normalized-entropy: 0.9394532068181357, [(1, 26), (2, 47)]
*** center 3: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 22, 0]]
** centroid: 5, normalized-entropy: 0.9949848281859699, [(1, 26), (2, 22)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 82, 11]]
** centroid: 6, normalized-entropy: 0.5243952392403632, [(2, 82), (3, 11)]
*** center 7: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.16863071167655289] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16863071167655289, 0.15258606062177568] ***
*** finished computation of 7 references, err: [Inf, 0.16863071167655289, 0.15258606062177568] ***
*** center 1: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [10, 66, 0]]
** centroid: 2, normalized-entropy: 0.5617526078313283, [(1, 10), (2, 66)]
*** center 3: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 19, 0]]
** centroid: 4, normalized-entropy: 0.7809756883263416, [(1, 63), (2, 19)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 81, 11]]
** centroid: 5, normalized-entropy: 0.5281098034628294, [(2, 81), (3, 11)]
*** center 6: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [59, 20, 0]]
** centroid: 7, normalized-entropy: 0.8162554088088008, [(1, 59), (2, 20)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19559344990178942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19559344990178942, 0.16062264611385763] ***
*** finished computation of 7 references, err: [Inf, 0.19559344990178942, 0.16062264611385763] ***
*** center 1: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 3, 0]]
** centroid: 2, normalized-entropy: 0.2729708579140699, [(1, 61), (2, 3)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 78, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 57, 0]]
** centroid: 5, normalized-entropy: 0.9944066525627803, [(1, 68), (2, 57)]
*** center 6: selecting labels [1] (freq >= 2) [from [28, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 45, 11]]
** centroid: 7, normalized-entropy: 0.7147274731317893, [(2, 45), (3, 11)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18467545663286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18467545663286, 0.159622999524232] ***
*** finished computation of 7 references, err: [Inf, 0.18467545663286, 0.159622999524232] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [74, 6, 0]]
** centroid: 1, normalized-entropy: 0.3843115441264972, [(1, 74), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 83, 16]]
** centroid: 2, normalized-entropy: 0.638161945314006, [(2, 83), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 26, 0]]
** centroid: 3, normalized-entropy: 0.9140185106642174, [(1, 53), (2, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [30, 3, 0]]
** centroid: 6, normalized-entropy: 0.43949698692151346, [(1, 30), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [27, 59, 0]]
** centroid: 7, normalized-entropy: 0.8976844934141643, [(1, 27), (2, 59)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2299203800018877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2299203800018877, 0.18574217612482607] ***
*** finished computation of 7 references, err: [Inf, 0.2299203800018877, 0.18574217612482607] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [69, 24, 0]]
** centroid: 1, normalized-entropy: 0.8238116333123173, [(1, 69), (2, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 72, 0]]
** centroid: 5, normalized-entropy: 0.8739810481273581, [(1, 30), (2, 72)]
*** center 6: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 21, 16]]
** centroid: 7, normalized-entropy: 0.9867867202680318, [(2, 21), (3, 16)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19188781515695155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19188781515695155, 0.15684043583180757] ***
*** finished computation of 7 references, err: [Inf, 0.19188781515695155, 0.15684043583180757] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 48, 0]]
** centroid: 1, normalized-entropy: 0.4507913883546652, [(1, 5), (2, 48)]
*** center 2: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 66, 10]]
** centroid: 3, normalized-entropy: 0.5617526078313283, [(2, 66), (3, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 33, 0]]
** centroid: 4, normalized-entropy: 0.8846293067903075, [(1, 76), (2, 33)]
*** center 5: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 23, 0]]
** centroid: 6, normalized-entropy: 0.9468188316776024, [(1, 40), (2, 23)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [62, 2, 0]]
** centroid: 7, normalized-entropy: 0.2006223243127146, [(1, 62), (2, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19773906145244838] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19773906145244838, 0.1627844862882048] ***
*** finished computation of 7 references, err: [Inf, 0.19773906145244838, 0.1627844862882048] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 46, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 10, 0]]
** centroid: 2, normalized-entropy: 0.5864477034453907, [(1, 61), (2, 10)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [77, 11, 0]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(1, 77), (2, 11)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 31, 15]]
** centroid: 4, normalized-entropy: 0.9108783787500366, [(2, 31), (3, 15)]
*** center 5: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 68, 0]]
** centroid: 7, normalized-entropy: 0.48546076074591343, [(1, 8), (2, 68)]
finished with 8 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 362,3 => 30,1 => 608), Dict(2 => 343,3 => 33,1 => 624))
[ Info: ===== scores for single classifier: {"micro_f1":0.932,"precision":0.932,"recall":0.932,"macro_recall":0.9391679748822606,"macro_f1":0.8745956694310827,"accuracy":0.932,"class_f1":{"2":0.8940809968847353,"3":0.7674418604651162,"1":0.9622641509433962},"class_precision":{"2":0.959866220735786,"3":0.6226415094339622,"1":0.9444444444444444},"class_recall":{"2":0.8367346938775511,"3":1.0,"1":0.9807692307692307}}
[ Info: ===== scores for 1: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.9525515584189054,"macro_f1":0.9619231609572106,"accuracy":0.969,"class_f1":{"2":0.9561527581329562,"3":0.9523809523809523,"1":0.9772357723577235},"class_precision":{"2":0.9285714285714286,"3":1.0,"1":0.9917491749174917},"class_recall":{"2":0.9854227405247813,"3":0.9090909090909091,"1":0.9631410256410257}}
[ Info: ===== scores for 5: {"micro_f1":0.976,"precision":0.976,"recall":0.976,"macro_recall":0.9762997773201856,"macro_f1":0.9725732939147574,"accuracy":0.976,"class_f1":{"2":0.9659090909090909,"3":0.9696969696969697,"1":0.9821138211382114},"class_precision":{"2":0.9418282548476454,"3":0.9696969696969697,"1":0.9966996699669967},"class_recall":{"2":0.9912536443148688,"3":0.9696969696969697,"1":0.967948717948718}}
[ Info: ===== scores for 7: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9739185134593297,"macro_f1":0.9577780244534032,"accuracy":0.974,"class_f1":{"2":0.9628571428571427,"3":0.927536231884058,"1":0.9829406986190089},"class_precision":{"2":0.9439775910364145,"3":0.8888888888888888,"1":0.9967051070840197},"class_recall":{"2":0.9825072886297376,"3":0.9696969696969697,"1":0.969551282051282}}
[ Info: ===== scores for 9: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.96993468549591,"macro_f1":0.9458490618273769,"accuracy":0.969,"class_f1":{"2":0.9556509298998569,"3":0.9014084507042254,"1":0.9804878048780488},"class_precision":{"2":0.9382022471910112,"3":0.8421052631578947,"1":0.995049504950495},"class_recall":{"2":0.9737609329446064,"3":0.9696969696969697,"1":0.9663461538461539}}
[ Info: ===== scores for 11: {"micro_f1":0.968,"precision":0.968,"recall":0.968,"macro_recall":0.978967319528544,"macro_f1":0.9460068017337669,"accuracy":0.968,"class_f1":{"2":0.9542857142857143,"3":0.9041095890410958,"1":0.9796251018744906},"class_precision":{"2":0.9355742296918768,"3":0.825,"1":0.9966832504145937},"class_recall":{"2":0.9737609329446064,"3":1.0,"1":0.9631410256410257}}
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.976,"k":5,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.976,"precision":0.976,"recall":0.976,"macro_recall":0.9762997773201856,"macro_f1":0.9725732939147574,"accuracy":0.976,"class_f1":{"2":0.9659090909090909,"3":0.9696969696969697,"1":0.9821138211382114},"class_precision":{"2":0.9418282548476454,"3":0.9696969696969697,"1":0.9966996699669967},"class_recall":{"2":0.9912536443148688,"3":0.9696969696969697,"1":0.967948717948718}}
Test Summary: | Pass  Total
AKNC          |    8      8
[827, 1, 4, 1, 2, 4, 1, 2, 6, 5, 5, 1, 3, 1, 6, 1, 4, 7, 21, 4, 1, 11, 3, 1, 2, 16, 5, 3, 2, 4, 10, 5, 2, 11, 2, 8, 8, 3, 5, 3, 36, 22, 1, 11, 11, 9, 3, 22, 12, 20, 3, 13, 7, 6, 21, 7, 9, 8, 3, 9, 10, 8, 3, 6, 34, 1, 11, 19, 22, 7, 162, 11, 11, 10, 58, 4, 2, 4, 19, 20, 12, 140, 6, 33, 2, 61, 64, 25, 26, 2, 19, 31, 13, 37, 47, 29, 27, 29, 22, 12, 10, 34, 1, 36, 4, 7, 12, 7, 58, 48, 68, 15, 31, 25, 20, 8, 18, 5, 3, 5, 14, 22, 6, 25, 8, 22, 227, 14, 1, 2, 44, 2, 8, 11, 4, 13, 21, 34, 67, 38, 3, 2, 29, 3, 43, 18, 9, 15, 1, 43, 12, 10, 59, 30, 49, 12, 79, 12, 29, 83, 16, 18, 10, 26, 3, 10, 8, 548, 60, 48, 88, 15, 7, 62, 57, 30, 230, 122, 10, 6, 4, 2, 8, 17, 16, 28, 20, 31, 7, 24, 6, 25, 16, 8, 11, 18, 46, 3, 20, 13, 61, 4, 22, 13, 216, 10, 21, 32, 87, 3, 15, 193, 57, 184, 15, 8, 31, 50, 96, 19, 55, 64, 15, 20, 14, 46, 96, 3, 200, 88, 32, 41, 182, 34, 56, 8, 11, 16, 9, 8, 7, 19, 25, 7, 156, 24, 24, 15, 1, 34, 8, 9, 1, 16, 61, 40, 38, 13, 62, 10, 55, 43, 54, 6, 26, 11, 9, 177, 117, 8, 7, 2, 119, 7, 7, 8, 14, 13, 10, 5, 7, 29, 546, 3, 11, 4, 137, 41, 69, 8, 42, 31, 39, 13, 9, 15, 11, 14, 24, 5]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6669999999999999, speedup = 0.2337859305625331, eval_ratio = 0.07685299999999999)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.38754030257936517,"recall":0.37934027777777785,"f1":null,"seconds":0.0003218185156583786,"exhaustive_search_seconds":0.0004132334142923355,"evaluations":512.90625,"distances_sum":1671.9362238715194}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5494791666666665,"recall":0.5494791666666665,"f1":null,"seconds":0.0004378892481327057,"exhaustive_search_seconds":0.0004132334142923355,"evaluations":708.7734375,"distances_sum":1588.7368139808007}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6744791666666664,"recall":0.6744791666666664,"f1":0.6744791666666664,"seconds":0.0004563983529806137,"exhaustive_search_seconds":0.0004132334142923355,"evaluations":863.390625,"distances_sum":1528.6338036058025}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7552083333333324,"recall":0.7552083333333324,"f1":0.7552083333333324,"seconds":0.0008128583431243896,"exhaustive_search_seconds":0.0004132334142923355,"evaluations":1038.140625,"distances_sum":1499.9532349453978}
KCenters.DeloneInvIndex> reached performance {"precision":0.80642361111111,"recall":0.80642361111111,"f1":0.80642361111111,"seconds":0.0009156055748462677,"exhaustive_search_seconds":0.0004132334142923355,"evaluations":1188.078125,"distances_sum":1487.841587156951}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8080000000000004, speedup = 0.7828900104578729, eval_ratio = 0.101287)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
