Julia Version 1.6.0-DEV.192
Commit 07385aba13 (2020-06-08 16:02 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed PDMats ─ v0.10.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [90014a1f] + PDMats v0.10.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [90014a1f] + PDMats v0.10.0
  [2a0f44e3] + Base64
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [9a3f8284] + Random
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [4607b0f0] + SuiteSparse
  [8dfed614] + Test
    Testing PDMats
Status `/tmp/jl_oJeaQI/Project.toml`
  [90014a1f] PDMats v0.10.0
  [37e2e46d] LinearAlgebra
  [2f01184e] SparseArrays
  [4607b0f0] SuiteSparse
  [8dfed614] Test
Status `/tmp/jl_oJeaQI/Manifest.toml`
  [90014a1f] PDMats v0.10.0
  [2a0f44e3] Base64
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [9a3f8284] Random
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [4607b0f0] SuiteSparse
  [8dfed614] Test
Running tests ...
* pdmtypes 
Testing PDMat{Float64,Array{Float64,2}} with dim = 3
Testing PDiagMat{Float64,Array{Float64,1}} with dim = 3
Testing ScalMat{Float64} with dim = 3
Testing PDSparseMat{Float64,SparseMatrixCSC{Float64,Int64}} with dim = 3
Testing PDMat{Float32,Array{Float32,2}} with dim = 3
Testing PDiagMat{Float32,Array{Float32,1}} with dim = 3
Testing ScalMat{Float32} with dim = 3
Testing PDSparseMat{Float32,SparseMatrixCSC{Float32,Int64}} with dim = 3
* addition 
┌ Warning: Assignment to `X` in soft scope is ambiguous because a global variable by the same name exists: `X` will be treated as a new local. Disambiguate by using `local X` to suppress this warning or `global X` to assign to the existing global variable.
└ @ ~/.julia/packages/PDMats/8bndI/test/addition.jl:10
Testing addition with eltype = Float64
Testing addition with eltype = Float32
* generics 
Testing scalar multiplication
* kron 
ERROR: LoadError: LoadError: PosDefException: matrix is not positive definite; Cholesky factorization failed.
Stacktrace:
 [1] checkpositivedefinite at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:18 [inlined]
 [2] cholesky!(::Hermitian{Float32,Array{Float32,2}}, ::Val{false}; check::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/cholesky.jl:219
 [3] cholesky!(::Array{Float32,2}, ::Val{false}; check::Bool) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/cholesky.jl:251
 [4] #cholesky#138 at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/cholesky.jl:344 [inlined]
 [5] cholesky at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/cholesky.jl:344 [inlined] (repeats 2 times)
 [6] PDMat at /home/pkgeval/.julia/packages/PDMats/8bndI/src/pdmat.jl:19 [inlined]
 [7] _pd_kron_compare(::PDMat{Float32,Array{Float32,2}}, ::PDMat{Float32,Array{Float32,2}}) at /home/pkgeval/.julia/packages/PDMats/8bndI/test/kron.jl:16
 [8] top-level scope at /home/pkgeval/.julia/packages/PDMats/8bndI/test/kron.jl:25
 [9] include(::String) at ./client.jl:444
 [10] top-level scope at /home/pkgeval/.julia/packages/PDMats/8bndI/test/runtests.jl:7
 [11] include(::String) at ./client.jl:444
 [12] top-level scope at none:6
in expression starting at /home/pkgeval/.julia/packages/PDMats/8bndI/test/kron.jl:24
in expression starting at /home/pkgeval/.julia/packages/PDMats/8bndI/test/runtests.jl:5
ERROR: Package PDMats errored during testing
Stacktrace:
 [1] pkgerror(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1561
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
 [5] #test#61 at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [7] #test#60 at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope at none:16
