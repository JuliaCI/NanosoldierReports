Julia Version 1.6.0-DEV.203
Commit 4e2fb5c72c (2020-06-09 12:13 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed FunctionWrappers ───────────── v1.1.1
  Installed Inflate ────────────────────── v0.1.2
  Installed SymbolicUtils ──────────────── v0.3.3
  Installed Roots ──────────────────────── v1.0.1
  Installed DiffEqOperators ────────────── v4.10.0
  Installed VectorizationBase ──────────── v0.12.6
  Installed DataStructures ─────────────── v0.17.17
  Installed MLStyle ────────────────────── v0.3.1
  Installed ChainRulesCore ─────────────── v0.8.0
  Installed SimpleTraits ───────────────── v0.9.2
  Installed TerminalLoggers ────────────── v0.1.1
  Installed ProgressLogging ────────────── v0.1.2
  Installed BlockBandedMatrices ────────── v0.8.5
  Installed RecursiveFactorization ─────── v0.1.2
  Installed Parameters ─────────────────── v0.12.1
  Installed GeneralizedGenerated ───────── v0.2.4
  Installed PoissonRandom ──────────────── v0.4.0
  Installed FillArrays ─────────────────── v0.8.10
  Installed RecipesBase ────────────────── v1.0.1
  Installed Combinatorics ──────────────── v1.0.2
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed RecursiveArrayTools ────────── v2.4.4
  Installed TableTraits ────────────────── v1.0.0
  Installed LaTeXStrings ───────────────── v1.1.0
  Installed RandomNumbers ──────────────── v1.4.0
  Installed DiffEqJump ─────────────────── v6.8.3
  Installed StaticArrays ───────────────── v0.12.3
  Installed SafeTestsets ───────────────── v0.0.1
  Installed LeftChildRightSiblingTrees ─── v0.1.2
  Installed ConsoleProgressMonitor ─────── v0.1.2
  Installed NameResolution ─────────────── v0.1.3
  Installed NaNMath ────────────────────── v0.3.3
  Installed MacroTools ─────────────────── v0.5.5
  Installed MatrixFactorizations ───────── v0.4.1
  Installed LoggingExtras ──────────────── v0.4.1
  Installed Unitful ────────────────────── v1.2.1
  Installed UnPack ─────────────────────── v1.0.1
  Installed OrderedCollections ─────────── v1.2.0
  Installed ArrayLayouts ───────────────── v0.3.4
  Installed OffsetArrays ───────────────── v1.0.4
  Installed ArnoldiMethod ──────────────── v0.0.4
  Installed ModelingToolkit ────────────── v3.8.0
  Installed DiffResults ────────────────── v1.0.2
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed BandedMatrices ─────────────── v0.15.11
  Installed ArrayInterface ─────────────── v2.8.7
  Installed LazyArrays ─────────────────── v0.16.12
  Installed LabelledArrays ─────────────── v1.2.1
  Installed IteratorInterfaceExtensions ── v1.0.0
  Installed Latexify ───────────────────── v0.13.5
  Installed LightGraphs ────────────────── v1.3.3
  Installed JuliaVariables ─────────────── v0.2.0
  Installed SpecialFunctions ───────────── v0.10.3
  Installed ConstructionBase ───────────── v1.0.0
  Installed CanonicalTraits ────────────── v0.2.1
  Installed SLEEFPirates ───────────────── v0.5.0
  Installed IterativeSolvers ───────────── v0.8.4
  Installed BinaryProvider ─────────────── v0.5.10
  Installed ForwardDiff ────────────────── v0.10.10
  Installed DiffEqBase ─────────────────── v6.36.4
  Installed ZygoteRules ────────────────── v0.2.0
  Installed MuladdMacro ────────────────── v0.2.2
  Installed AbstractTrees ──────────────── v0.3.3
  Installed SIMDPirates ────────────────── v0.8.6
  Installed ProgressMeter ──────────────── v1.3.0
  Installed Formatting ─────────────────── v0.4.1
  Installed TimerOutputs ───────────────── v0.5.6
  Installed DocStringExtensions ────────── v0.8.1
  Installed NNlib ──────────────────────── v0.6.6
  Installed CommonSubexpressions ───────── v0.2.0
  Installed Compat ─────────────────────── v3.11.0
  Installed CpuId ──────────────────────── v0.2.2
  Installed BlockArrays ────────────────── v0.12.8
  Installed Requires ───────────────────── v1.0.1
  Installed DiffRules ──────────────────── v1.0.1
  Installed TreeViews ──────────────────── v0.3.0
  Installed PrettyPrint ────────────────── v0.1.0
  Installed LoopVectorization ──────────── v0.8.4
Updating `~/.julia/environments/v1.6/Project.toml`
  [9fdde737] + DiffEqOperators v4.10.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [1520ce14] + AbstractTrees v0.3.3
  [ec485272] + ArnoldiMethod v0.0.4
  [4fba245c] + ArrayInterface v2.8.7
  [4c555306] + ArrayLayouts v0.3.4
  [aae01518] + BandedMatrices v0.15.11
  [b99e7846] + BinaryProvider v0.5.10
  [8e7c35d0] + BlockArrays v0.12.8
  [ffab5731] + BlockBandedMatrices v0.8.5
  [a603d957] + CanonicalTraits v0.2.1
  [d360d2e6] + ChainRulesCore v0.8.0
  [861a8166] + Combinatorics v1.0.2
  [bbf7d656] + CommonSubexpressions v0.2.0
  [34da2185] + Compat v3.11.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [88cd18e8] + ConsoleProgressMonitor v0.1.2
  [187b0558] + ConstructionBase v1.0.0
  [adafc99b] + CpuId v0.2.2
  [864edb3b] + DataStructures v0.17.17
  [2b5f629d] + DiffEqBase v6.36.4
  [c894b116] + DiffEqJump v6.8.3
  [9fdde737] + DiffEqOperators v4.10.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [ffbed154] + DocStringExtensions v0.8.1
  [1a297f60] + FillArrays v0.8.10
  [59287772] + Formatting v0.4.1
  [f6369f11] + ForwardDiff v0.10.10
  [069b7b12] + FunctionWrappers v1.1.1
  [6b9d7cbe] + GeneralizedGenerated v0.2.4
  [d25df0c9] + Inflate v0.1.2
  [42fd0dbc] + IterativeSolvers v0.8.4
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [b14d175d] + JuliaVariables v0.2.0
  [b964fa9f] + LaTeXStrings v1.1.0
  [2ee39098] + LabelledArrays v1.2.1
  [23fbe1c1] + Latexify v0.13.5
  [5078a376] + LazyArrays v0.16.12
  [1d6d02ad] + LeftChildRightSiblingTrees v0.1.2
  [093fc24a] + LightGraphs v1.3.3
  [e6f89c97] + LoggingExtras v0.4.1
  [bdcacae8] + LoopVectorization v0.8.4
  [d8e11817] + MLStyle v0.3.1
  [1914dd2f] + MacroTools v0.5.5
  [a3b82374] + MatrixFactorizations v0.4.1
  [961ee093] + ModelingToolkit v3.8.0
  [46d2c3a1] + MuladdMacro v0.2.2
  [872c559c] + NNlib v0.6.6
  [77ba4419] + NaNMath v0.3.3
  [71a1bf82] + NameResolution v0.1.3
  [6fe1bfb0] + OffsetArrays v1.0.4
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.2.0
  [d96e819e] + Parameters v0.12.1
  [e409e4f3] + PoissonRandom v0.4.0
  [8162dcfd] + PrettyPrint v0.1.0
  [33c8b6b6] + ProgressLogging v0.1.2
  [92933f4c] + ProgressMeter v1.3.0
  [e6cf234a] + RandomNumbers v1.4.0
  [3cdcf5f2] + RecipesBase v1.0.1
  [731186ca] + RecursiveArrayTools v2.4.4
  [f2c3362d] + RecursiveFactorization v0.1.2
  [ae029012] + Requires v1.0.1
  [f2b01f46] + Roots v1.0.1
  [21efa798] + SIMDPirates v0.8.6
  [476501e8] + SLEEFPirates v0.5.0
  [1bc83da4] + SafeTestsets v0.0.1
  [699a6c99] + SimpleTraits v0.9.2
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.3
  [d1185830] + SymbolicUtils v0.3.3
  [3783bdb8] + TableTraits v1.0.0
  [5d786b92] + TerminalLoggers v0.1.1
  [a759f4b9] + TimerOutputs v0.5.6
  [a2a6695c] + TreeViews v0.3.0
  [3a884ed6] + UnPack v1.0.1
  [1986cc42] + Unitful v1.2.1
  [3d5dd08c] + VectorizationBase v0.12.6
  [700de1a5] + ZygoteRules v0.2.0
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building VectorizationBase → `~/.julia/packages/VectorizationBase/SyqTC/deps/build.log`
   Building SLEEFPirates ─────→ `~/.julia/packages/SLEEFPirates/mkNmA/deps/build.log`
   Building NNlib ────────────→ `~/.julia/packages/NNlib/FAI3o/deps/build.log`
    Testing DiffEqOperators
Status `/tmp/jl_4Bfds7/Project.toml`
  [aae01518] BandedMatrices v0.15.11
  [ffab5731] BlockBandedMatrices v0.8.5
  [2b5f629d] DiffEqBase v6.36.4
  [9fdde737] DiffEqOperators v4.10.0
  [1a297f60] FillArrays v0.8.10
  [f6369f11] ForwardDiff v0.10.10
  [5078a376] LazyArrays v0.16.12
  [961ee093] ModelingToolkit v3.8.0
  [872c559c] NNlib v0.6.6
  [1dea7af3] OrdinaryDiffEq v5.39.1
  [d96e819e] Parameters v0.12.1
  [1bc83da4] SafeTestsets v0.0.1
  [7ccca996] SimpleDifferentialOperators v0.6.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.3
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [4607b0f0] SuiteSparse
  [8dfed614] Test
Status `/tmp/jl_4Bfds7/Manifest.toml`
  [1520ce14] AbstractTrees v0.3.3
  [79e6a3ab] Adapt v1.1.0
  [ec485272] ArnoldiMethod v0.0.4
  [4fba245c] ArrayInterface v2.8.7
  [4c555306] ArrayLayouts v0.3.4
  [aae01518] BandedMatrices v0.15.11
  [b99e7846] BinaryProvider v0.5.10
  [8e7c35d0] BlockArrays v0.12.8
  [ffab5731] BlockBandedMatrices v0.8.5
  [a603d957] CanonicalTraits v0.2.1
  [d360d2e6] ChainRulesCore v0.8.0
  [861a8166] Combinatorics v1.0.2
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v3.11.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [88cd18e8] ConsoleProgressMonitor v0.1.2
  [187b0558] ConstructionBase v1.0.0
  [adafc99b] CpuId v0.2.2
  [864edb3b] DataStructures v0.17.17
  [2b5f629d] DiffEqBase v6.36.4
  [c894b116] DiffEqJump v6.8.3
  [9fdde737] DiffEqOperators v4.10.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.8.2
  [ffbed154] DocStringExtensions v0.8.1
  [d4d017d3] ExponentialUtilities v1.6.0
  [1a297f60] FillArrays v0.8.10
  [6a86dc24] FiniteDiff v2.3.2
  [59287772] Formatting v0.4.1
  [f6369f11] ForwardDiff v0.10.10
  [069b7b12] FunctionWrappers v1.1.1
  [6b9d7cbe] GeneralizedGenerated v0.2.4
  [01680d73] GenericSVD v0.3.0
  [d25df0c9] Inflate v0.1.2
  [42fd0dbc] IterativeSolvers v0.8.4
  [82899510] IteratorInterfaceExtensions v1.0.0
  [b14d175d] JuliaVariables v0.2.0
  [b964fa9f] LaTeXStrings v1.1.0
  [2ee39098] LabelledArrays v1.2.1
  [23fbe1c1] Latexify v0.13.5
  [5078a376] LazyArrays v0.16.12
  [1d6d02ad] LeftChildRightSiblingTrees v0.1.2
  [093fc24a] LightGraphs v1.3.3
  [d3d80556] LineSearches v7.0.1
  [e6f89c97] LoggingExtras v0.4.1
  [bdcacae8] LoopVectorization v0.8.4
  [d8e11817] MLStyle v0.3.1
  [1914dd2f] MacroTools v0.5.5
  [a3b82374] MatrixFactorizations v0.4.1
  [961ee093] ModelingToolkit v3.8.0
  [46d2c3a1] MuladdMacro v0.2.2
  [d41bc354] NLSolversBase v7.6.1
  [2774e3e8] NLsolve v4.3.0
  [872c559c] NNlib v0.6.6
  [77ba4419] NaNMath v0.3.3
  [71a1bf82] NameResolution v0.1.3
  [6fe1bfb0] OffsetArrays v1.0.4
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.2.0
  [1dea7af3] OrdinaryDiffEq v5.39.1
  [d96e819e] Parameters v0.12.1
  [e409e4f3] PoissonRandom v0.4.0
  [8162dcfd] PrettyPrint v0.1.0
  [33c8b6b6] ProgressLogging v0.1.2
  [92933f4c] ProgressMeter v1.3.0
  [e6cf234a] RandomNumbers v1.4.0
  [3cdcf5f2] RecipesBase v1.0.1
  [731186ca] RecursiveArrayTools v2.4.4
  [f2c3362d] RecursiveFactorization v0.1.2
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [f2b01f46] Roots v1.0.1
  [21efa798] SIMDPirates v0.8.6
  [476501e8] SLEEFPirates v0.5.0
  [1bc83da4] SafeTestsets v0.0.1
  [7ccca996] SimpleDifferentialOperators v0.6.1
  [699a6c99] SimpleTraits v0.9.2
  [47a9eef4] SparseDiffTools v1.8.0
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.3
  [d1185830] SymbolicUtils v0.3.3
  [3783bdb8] TableTraits v1.0.0
  [5d786b92] TerminalLoggers v0.1.1
  [a759f4b9] TimerOutputs v0.5.6
  [a2a6695c] TreeViews v0.3.0
  [3a884ed6] UnPack v1.0.1
  [1986cc42] Unitful v1.2.1
  [3d5dd08c] VectorizationBase v0.12.6
  [19fa3120] VertexSafeGraphs v0.1.2
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
┌ Warning: `@get!(dict, key, default)` at /home/pkgeval/.julia/packages/SymbolicUtils/ANVDR/src/rule_dsl.jl:296 is deprecated, use `get!(()->default, dict, key)` instead.
└ @ Base deprecated.jl:204
Test Summary:   | Pass  Total
Utilities Tests |    4      4
661.028000 seconds (53.60 M allocations: 3.117 GiB, 0.37% gc time)
Test Summary:   | Pass  Total
Poisson example |    1      1
 11.329461 seconds (11.62 M allocations: 602.884 MiB, 2.89% gc time)
Test Summary:         | Pass  Total
Heat equation example |    1      1
248.603520 seconds (29.96 M allocations: 5.449 GiB, 0.91% gc time)
Test Summary:                      | Pass  Total
Robin Boundary Condition Operators |  124    124
  4.052908 seconds (3.18 M allocations: 158.769 MiB, 2.70% gc time)
Test Summary:              | Pass  Broken  Total
JacVec Operators Interface |   34       4     38
156.476525 seconds (111.36 M allocations: 5.768 GiB, 4.02% gc time)
Test Summary:                 | Pass  Total
Composite Operators Interface |   12     12
  6.148055 seconds (5.02 M allocations: 247.666 MiB, 3.68% gc time)
Test Summary:                   | Pass  Broken  Total
BC and Coefficient Compositions |  103       6    109
 70.437474 seconds (31.45 M allocations: 1.574 GiB, 1.99% gc time)
Test Summary:                  | Pass  Total
Derivative Operators Interface | 1080   1080
 67.353986 seconds (197.12 M allocations: 10.397 GiB, 14.65% gc time)
Test Summary:                        | Pass  Total
Ghost Derivative Operators Interface |    4      4
  0.106631 seconds (33.61 k allocations: 1.964 MiB)
Test Summary:                         | Pass  Total
Validate Regular Derivative Operators |   30     30
 12.499784 seconds (11.29 M allocations: 582.773 MiB, 3.23% gc time)
Test Summary:                          | Pass  Total
Validate and Compare Generic Operators |   72     72
 11.176652 seconds (8.75 M allocations: 615.831 MiB, 2.11% gc time)
Test Summary:                                 |   Pass   Total
Validate Boundary Padded Array Concretization | 100455  100455
 31.840359 seconds (29.78 M allocations: 1.463 GiB, 4.09% gc time)
┌ Warning: Assignment to `A` in soft scope is ambiguous because a global variable by the same name exists: `A` will be treated as a new local. Disambiguate by using `local A` to suppress this warning or `global A` to assign to the existing global variable.
└ @ ~/.julia/packages/DiffEqOperators/QiB3a/test/MultiDimBC_test.jl:84
Test Summary:                                  | Pass  Broken  Total
Validate Higher Dimensional Boundary Extension |  351       3    354
100.261489 seconds (96.37 M allocations: 4.600 GiB, 4.45% gc time)
Test Summary:         | Pass  Total
Matrix-Free Operators |   34     34
 31.393989 seconds (30.19 M allocations: 1.589 GiB, 4.62% gc time)
JacVec Operator Integration Test: Error During Test at /home/pkgeval/.julia/packages/SafeTestsets/A83XK/src/SafeTestsets.jl:25
  Got exception outside of a @test
  LoadError: MethodError: Cannot `convert` an object of type 
    DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool} to an object of type 
    AbstractArray{T,2} where T
  Closest candidates are:
    convert(::Type{AbstractArray{T,2} where T}, !Matched::BandedMatrices.BandedMatrix) at /home/pkgeval/.julia/packages/BandedMatrices/cvauE/src/banded/BandedMatrix.jl:100
    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14
    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58
    ...
  Stacktrace:
   [1] mul!(::Array{Float64,3}, ::DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool}, ::SubArray{Float64,1,Array{Float64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}) at /home/pkgeval/.julia/packages/DiffEqBase/TjqaN/src/operators/common_defaults.jl:17
   [2] mul!(::Array{Float64,1}, ::OrdinaryDiffEq.WOperator{true,Any,LinearAlgebra.UniformScaling{Bool},Float64,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Array{Float64,3},Nothing}, ::SubArray{Float64,1,Array{Float64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}) at /home/pkgeval/.julia/packages/OrdinaryDiffEq/LQQYm/src/derivative_utils.jl:303
   [3] expand!(::IterativeSolvers.ArnoldiDecomp{Float64,OrdinaryDiffEq.WOperator{true,Any,LinearAlgebra.UniformScaling{Bool},Float64,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Array{Float64,3},Nothing}}, ::DiffEqBase.ComposePreconditioner{IterativeSolvers.Identity,DiffEqBase.ScaleVector{Array{Float64,3}}}, ::DiffEqBase.ComposePreconditioner{IterativeSolvers.Identity,DiffEqBase.ScaleVector{Array{Float64,3}}}, ::Int64, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/IterativeSolvers/3g7hG/src/gmres.jl:286
   [4] iterate at /home/pkgeval/.julia/packages/IterativeSolvers/3g7hG/src/gmres.jl:59 [inlined]
   [5] iterate(::IterativeSolvers.GMRESIterable{DiffEqBase.ComposePreconditioner{IterativeSolvers.Identity,DiffEqBase.ScaleVector{Array{Float64,3}}},DiffEqBase.ComposePreconditioner{IterativeSolvers.Identity,DiffEqBase.ScaleVector{Array{Float64,3}}},Array{Float64,1},Array{Float64,1},Array{Float64,1},IterativeSolvers.ArnoldiDecomp{Float64,OrdinaryDiffEq.WOperator{true,Any,LinearAlgebra.UniformScaling{Bool},Float64,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Array{Float64,3},Nothing}},IterativeSolvers.Residual{Float64,Float64},Float64}) at /home/pkgeval/.julia/packages/IterativeSolvers/3g7hG/src/gmres.jl:56
   [6] (::DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}})(::Array{Float64,1}, ::OrdinaryDiffEq.WOperator{true,Any,LinearAlgebra.UniformScaling{Bool},Float64,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Array{Float64,3},Nothing}, ::Array{Float64,1}, ::Bool; Pl::DiffEqBase.ScaleVector{Array{Float64,3}}, Pr::DiffEqBase.ScaleVector{Array{Float64,3}}, tol::Float64, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/DiffEqBase/TjqaN/src/linear_nonlinear.jl:169
   [7] compute_step!(::OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},true,Array{Float64,3},Float64,OrdinaryDiffEq.NLNewtonCache{Array{Float64,3},Float64,Float64,Array{Float64,3},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},OrdinaryDiffEq.WOperator{true,Any,LinearAlgebra.UniformScaling{Bool},Float64,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Array{Float64,3},Nothing},DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Float64,NTuple{4,Float64}},Nothing,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}}}, ::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0,true,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}},DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},DataType},true,Array{Float64,3},Nothing,Float64,NTuple{4,Float64},Float64,Float64,Float64,Array{Array{Float64,3},1},DiffEqBase.ODESolution{Float64,4,Array{Array{Float64,3},1},Nothing,Nothing,Array{Float64,1},Array{Array{Array{Float64,3},1},1},DiffEqBase.ODEProblem{Array{Float64,3},Tuple{Float64,Float64},true,NTuple{4,Float64},DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.TRBDF2{0,true,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}},DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},DataType},OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Array{Array{Float64,3},1},Array{Float64,1},Array{Array{Array{Float64,3},1},1},OrdinaryDiffEq.TRBDF2Cache{Array{Float64,3},Array{Float64,3},Array{Float64,3},OrdinaryDiffEq.TRBDF2Tableau{Float64,Float64},OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},true,Array{Float64,3},Float64,OrdinaryDiffEq.NLNewtonCache{Array{Float64,3},Float64,Float64,Array{Float64,3},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},OrdinaryDiffEq.WOperator{true,Any,LinearAlgebra.UniformScaling{Bool},Float64,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Array{Float64,3},Nothing},DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Float64,NTuple{4,Float64}},Nothing,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}}}}},DiffEqBase.DEStats},DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},OrdinaryDiffEq.TRBDF2Cache{Array{Float64,3},Array{Float64,3},Array{Float64,3},OrdinaryDiffEq.TRBDF2Tableau{Float64,Float64},OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},true,Array{Float64,3},Float64,OrdinaryDiffEq.NLNewtonCache{Array{Float64,3},Float64,Float64,Array{Float64,3},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},OrdinaryDiffEq.WOperator{true,Any,LinearAlgebra.UniformScaling{Bool},Float64,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Array{Float64,3},Nothing},DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Float64,NTuple{4,Float64}},Nothing,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}}}},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,typeof(DiffEqBase.ODE_DEFAULT_NORM),typeof(LinearAlgebra.opnorm),DiffEqBase.CallbackSet{Tuple{},Tuple{}},typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN),typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE),typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK),DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Nothing,Nothing,Int64,Tuple{},Tuple{},Tuple{}},Array{Float64,3},Float64,Nothing,OrdinaryDiffEq.DefaultInit}) at /home/pkgeval/.julia/packages/OrdinaryDiffEq/LQQYm/src/nlsolve/newton.jl:156
   [8] nlsolve!(::OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},true,Array{Float64,3},Float64,OrdinaryDiffEq.NLNewtonCache{Array{Float64,3},Float64,Float64,Array{Float64,3},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},OrdinaryDiffEq.WOperator{true,Any,LinearAlgebra.UniformScaling{Bool},Float64,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Array{Float64,3},Nothing},DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Float64,NTuple{4,Float64}},Nothing,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}}}, ::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0,true,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}},DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},DataType},true,Array{Float64,3},Nothing,Float64,NTuple{4,Float64},Float64,Float64,Float64,Array{Array{Float64,3},1},DiffEqBase.ODESolution{Float64,4,Array{Array{Float64,3},1},Nothing,Nothing,Array{Float64,1},Array{Array{Array{Float64,3},1},1},DiffEqBase.ODEProblem{Array{Float64,3},Tuple{Float64,Float64},true,NTuple{4,Float64},DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.TRBDF2{0,true,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}},DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},DataType},OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Array{Array{Float64,3},1},Array{Float64,1},Array{Array{Array{Float64,3},1},1},OrdinaryDiffEq.TRBDF2Cache{Array{Float64,3},Array{Float64,3},Array{Float64,3},OrdinaryDiffEq.TRBDF2Tableau{Float64,Float64},OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},true,Array{Float64,3},Float64,OrdinaryDiffEq.NLNewtonCache{Array{Float64,3},Float64,Float64,Array{Float64,3},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},OrdinaryDiffEq.WOperator{true,Any,LinearAlgebra.UniformScaling{Bool},Float64,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Array{Float64,3},Nothing},DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Float64,NTuple{4,Float64}},Nothing,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}}}}},DiffEqBase.DEStats},DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},OrdinaryDiffEq.TRBDF2Cache{Array{Float64,3},Array{Float64,3},Array{Float64,3},OrdinaryDiffEq.TRBDF2Tableau{Float64,Float64},OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},true,Array{Float64,3},Float64,OrdinaryDiffEq.NLNewtonCache{Array{Float64,3},Float64,Float64,Array{Float64,3},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},OrdinaryDiffEq.WOperator{true,Any,LinearAlgebra.UniformScaling{Bool},Float64,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Array{Float64,3},Nothing},DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Float64,NTuple{4,Float64}},Nothing,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}}}},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,typeof(DiffEqBase.ODE_DEFAULT_NORM),typeof(LinearAlgebra.opnorm),DiffEqBase.CallbackSet{Tuple{},Tuple{}},typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN),typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE),typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK),DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Nothing,Nothing,Int64,Tuple{},Tuple{},Tuple{}},Array{Float64,3},Float64,Nothing,OrdinaryDiffEq.DefaultInit}, ::OrdinaryDiffEq.TRBDF2Cache{Array{Float64,3},Array{Float64,3},Array{Float64,3},OrdinaryDiffEq.TRBDF2Tableau{Float64,Float64},OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},true,Array{Float64,3},Float64,OrdinaryDiffEq.NLNewtonCache{Array{Float64,3},Float64,Float64,Array{Float64,3},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},OrdinaryDiffEq.WOperator{true,Any,LinearAlgebra.UniformScaling{Bool},Float64,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Array{Float64,3},Nothing},DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Float64,NTuple{4,Float64}},Nothing,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}}}}, ::Bool) at /home/pkgeval/.julia/packages/OrdinaryDiffEq/LQQYm/src/nlsolve/nlsolve.jl:30
   [9] perform_step!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0,true,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}},DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},DataType},true,Array{Float64,3},Nothing,Float64,NTuple{4,Float64},Float64,Float64,Float64,Array{Array{Float64,3},1},DiffEqBase.ODESolution{Float64,4,Array{Array{Float64,3},1},Nothing,Nothing,Array{Float64,1},Array{Array{Array{Float64,3},1},1},DiffEqBase.ODEProblem{Array{Float64,3},Tuple{Float64,Float64},true,NTuple{4,Float64},DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.TRBDF2{0,true,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}},DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},DataType},OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Array{Array{Float64,3},1},Array{Float64,1},Array{Array{Array{Float64,3},1},1},OrdinaryDiffEq.TRBDF2Cache{Array{Float64,3},Array{Float64,3},Array{Float64,3},OrdinaryDiffEq.TRBDF2Tableau{Float64,Float64},OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},true,Array{Float64,3},Float64,OrdinaryDiffEq.NLNewtonCache{Array{Float64,3},Float64,Float64,Array{Float64,3},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},OrdinaryDiffEq.WOperator{true,Any,LinearAlgebra.UniformScaling{Bool},Float64,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Array{Float64,3},Nothing},DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Float64,NTuple{4,Float64}},Nothing,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}}}}},DiffEqBase.DEStats},DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},OrdinaryDiffEq.TRBDF2Cache{Array{Float64,3},Array{Float64,3},Array{Float64,3},OrdinaryDiffEq.TRBDF2Tableau{Float64,Float64},OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},true,Array{Float64,3},Float64,OrdinaryDiffEq.NLNewtonCache{Array{Float64,3},Float64,Float64,Array{Float64,3},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},OrdinaryDiffEq.WOperator{true,Any,LinearAlgebra.UniformScaling{Bool},Float64,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Array{Float64,3},Nothing},DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Float64,NTuple{4,Float64}},Nothing,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}}}},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,typeof(DiffEqBase.ODE_DEFAULT_NORM),typeof(LinearAlgebra.opnorm),DiffEqBase.CallbackSet{Tuple{},Tuple{}},typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN),typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE),typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK),DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Nothing,Nothing,Int64,Tuple{},Tuple{},Tuple{}},Array{Float64,3},Float64,Nothing,OrdinaryDiffEq.DefaultInit}, ::OrdinaryDiffEq.TRBDF2Cache{Array{Float64,3},Array{Float64,3},Array{Float64,3},OrdinaryDiffEq.TRBDF2Tableau{Float64,Float64},OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},true,Array{Float64,3},Float64,OrdinaryDiffEq.NLNewtonCache{Array{Float64,3},Float64,Float64,Array{Float64,3},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},OrdinaryDiffEq.WOperator{true,Any,LinearAlgebra.UniformScaling{Bool},Float64,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Array{Float64,3},Nothing},DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Float64,NTuple{4,Float64}},Nothing,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}}}}, ::Bool) at /home/pkgeval/.julia/packages/OrdinaryDiffEq/LQQYm/src/perform_step/sdirk_perform_step.jl:392
   [10] perform_step! at /home/pkgeval/.julia/packages/OrdinaryDiffEq/LQQYm/src/perform_step/sdirk_perform_step.jl:373 [inlined]
   [11] solve!(::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0,true,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}},DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},DataType},true,Array{Float64,3},Nothing,Float64,NTuple{4,Float64},Float64,Float64,Float64,Array{Array{Float64,3},1},DiffEqBase.ODESolution{Float64,4,Array{Array{Float64,3},1},Nothing,Nothing,Array{Float64,1},Array{Array{Array{Float64,3},1},1},DiffEqBase.ODEProblem{Array{Float64,3},Tuple{Float64,Float64},true,NTuple{4,Float64},DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem},OrdinaryDiffEq.TRBDF2{0,true,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}},DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},DataType},OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Array{Array{Float64,3},1},Array{Float64,1},Array{Array{Array{Float64,3},1},1},OrdinaryDiffEq.TRBDF2Cache{Array{Float64,3},Array{Float64,3},Array{Float64,3},OrdinaryDiffEq.TRBDF2Tableau{Float64,Float64},OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},true,Array{Float64,3},Float64,OrdinaryDiffEq.NLNewtonCache{Array{Float64,3},Float64,Float64,Array{Float64,3},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},OrdinaryDiffEq.WOperator{true,Any,LinearAlgebra.UniformScaling{Bool},Float64,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Array{Float64,3},Nothing},DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Float64,NTuple{4,Float64}},Nothing,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}}}}},DiffEqBase.DEStats},DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},OrdinaryDiffEq.TRBDF2Cache{Array{Float64,3},Array{Float64,3},Array{Float64,3},OrdinaryDiffEq.TRBDF2Tableau{Float64,Float64},OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},true,Array{Float64,3},Float64,OrdinaryDiffEq.NLNewtonCache{Array{Float64,3},Float64,Float64,Array{Float64,3},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},OrdinaryDiffEq.WOperator{true,Any,LinearAlgebra.UniformScaling{Bool},Float64,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Array{Float64,3},Nothing},DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Float64,NTuple{4,Float64}},Nothing,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}}}},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Float64,typeof(DiffEqBase.ODE_DEFAULT_NORM),typeof(LinearAlgebra.opnorm),DiffEqBase.CallbackSet{Tuple{},Tuple{}},typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN),typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE),typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK),DataStructures.BinaryHeap{Float64,DataStructures.LessThan},DataStructures.BinaryHeap{Float64,DataStructures.LessThan},Nothing,Nothing,Int64,Tuple{},Tuple{},Tuple{}},Array{Float64,3},Float64,Nothing,OrdinaryDiffEq.DefaultInit}) at /home/pkgeval/.julia/packages/OrdinaryDiffEq/LQQYm/src/solve.jl:425
   [12] #__solve#358 at /home/pkgeval/.julia/packages/OrdinaryDiffEq/LQQYm/src/solve.jl:5 [inlined]
   [13] solve_call(::DiffEqBase.ODEProblem{Array{Float64,3},Tuple{Float64,Float64},true,NTuple{4,Float64},DiffEqBase.ODEFunction{true,typeof(Main.##270.brusselator_2d_loop),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,typeof(DiffEqBase.update_coefficients!),Nothing,Nothing,DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},DiffEqOperators.JacVecOperator{Float64,typeof(Main.##270.brusselator_2d_loop),Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{ForwardDiff.Dual{DiffEqOperators.JacVecTag,Float64,1},3},Array{Float64,3},NTuple{4,Float64},Float64,Bool},Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.TRBDF2{0,true,DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!),IterativeSolvers.Identity,IterativeSolvers.Identity,Tuple{},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}},DiffEqBase.NLNewton{Rational{Int64},Rational{Int64},Rational{Int64}},DataType}; merge_callbacks::Bool, kwargs::Base.Iterators.Pairs{Symbol,Bool,Tuple{Symbol},NamedTuple{(:save_everystep,),Tuple{Bool}}}) at /home/pkgeval/.julia/packages/DiffEqBase/TjqaN/src/solve.jl:60
   [14] #solve_up#452 at /home/pkgeval/.julia/packages/DiffEqBase/TjqaN/src/solve.jl:85 [inlined]
   [15] #solve#451 at /home/pkgeval/.julia/packages/DiffEqBase/TjqaN/src/solve.jl:69 [inlined]
   [16] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/jacvec_integration_test.jl:41
   [17] include at ./Base.jl:369 [inlined]
   [18] include(::String) at /home/pkgeval/.julia/packages/SafeTestsets/A83XK/src/SafeTestsets.jl:23
   [19] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/runtests.jl:28
   [20] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1115
   [21] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/runtests.jl:28
   [22] eval(::Module, ::Any) at ./boot.jl:331
   [23] top-level scope at /home/pkgeval/.julia/packages/SafeTestsets/A83XK/src/SafeTestsets.jl:23
   [24] top-level scope at timing.jl:174
   [25] top-level scope at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/runtests.jl:28
   [26] top-level scope at timing.jl:174
   [27] include(::String) at ./client.jl:444
   [28] top-level scope at none:6
   [29] eval(::Module, ::Any) at ./boot.jl:331
   [30] exec_options(::Base.JLOptions) at ./client.jl:260
   [31] _start() at ./client.jl:485
  in expression starting at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/jacvec_integration_test.jl:41
  
Test Summary:                    | Error  Total
JacVec Operator Integration Test |     1      1
ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/DiffEqOperators/QiB3a/test/runtests.jl:9
ERROR: Package DiffEqOperators errored during testing
Stacktrace:
 [1] pkgerror(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1561
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
 [5] #test#61 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [7] #test#60 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope at none:16
