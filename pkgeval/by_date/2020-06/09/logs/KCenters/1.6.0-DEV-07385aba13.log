Julia Version 1.6.0-DEV.192
Commit 07385aba13 (2020-06-08 16:02 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Compat ────────────────────── v3.11.0
  Installed KCenters ──────────────────── v0.2.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataPattern ─────────────── v0.5.3
  Installed MLDataUtils ───────────────── v0.5.1
  Installed Reexport ──────────────────── v0.2.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed InvertedIndices ───────────── v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Parsers ───────────────────── v1.0.5
  Installed Tables ────────────────────── v1.0.4
  Installed JSON ──────────────────────── v0.21.0
  Installed DataFrames ────────────────── v0.20.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed StatsBase ─────────────────── v0.32.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed OrderedCollections ────────── v1.2.0
  Installed DataStructures ────────────── v0.17.17
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.11.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.5
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_X3jqJu/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_X3jqJu/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.11.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.5
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9364293802777927
[ Info: 0.8326150393486023
[ Info: 0.5556202241281668
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33010025101403395
mean(cdnet.distances) = 0.3956152114768823
mean(crand.distances) = 0.37766546875238416
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.59765625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.59765625,"f1":0.7318540834165843,"seconds":4.4461339712142944e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.5234375,"distances_sum":1528.3684494294412}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.22265625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.22265625,"f1":null,"seconds":3.978610038757324e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":6.6015625,"distances_sum":543.8391469824869}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.59765625,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.59765625,"f1":0.7318540834165843,"seconds":4.4461339712142944e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.5234375,"distances_sum":1528.3684494294412}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9023554570429578,"seconds":6.269663572311401e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.609375,"distances_sum":2241.255388518661}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9152077089577095,"seconds":6.362795829772949e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.640625,"distances_sum":2365.6230360297864}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8628954378954388,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.4921875,"distances_sum":2048.8638959910363}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.853515625,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.853515625,"f1":0.9152077089577095,"seconds":6.362795829772949e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.640625,"distances_sum":2365.6230360297864}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9617387820512825,"seconds":6.757676601409912e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.921875,"distances_sum":2712.034552332678}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9355196886446894,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.7578125,"distances_sum":2503.790209654346}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9797619047619052,"seconds":6.537884473800659e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.953125,"distances_sum":2859.2453439132514}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9522550366300372,"seconds":6.185844540596008e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.90625,"distances_sum":2635.3980759108367}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9797619047619052,"seconds":6.537884473800659e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.953125,"distances_sum":2859.2453439132514}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9797619047619052,"seconds":6.537884473800659e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.953125,"distances_sum":2859.2453439132514}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2041015625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2041015625,"f1":null,"seconds":3.693625330924988e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.1640625,"distances_sum":484.74761837189357}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5771484375, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5771484375,"f1":0.7165792540792547,"seconds":4.82611358165741e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.59375,"distances_sum":1324.6213934234302}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.46484375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.46484375,"f1":null,"seconds":4.192814230918884e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.171875,"distances_sum":1050.4651956250616}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5771484375,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.5771484375,"f1":0.7165792540792547,"seconds":4.82611358165741e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.59375,"distances_sum":1324.6213934234302}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9353308150183155,"seconds":6.182119250297546e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.828125,"distances_sum":2326.6696921228795}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5927734375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5927734375,"f1":null,"seconds":4.520639777183533e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.5390625,"distances_sum":1383.4980205259506}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8574899059274066,"seconds":5.504116415977478e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.375,"distances_sum":1884.3632008474149}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.861155511155512,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.421875,"distances_sum":1910.8478565120095}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8570887445887455,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.3359375,"distances_sum":1872.2028268803597}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.9353308150183155,"seconds":6.182119250297546e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.828125,"distances_sum":2326.6696921228795}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9588427197802203,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8671875,"distances_sum":2534.6202457487584}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.949839743589744,"seconds":6.165355443954468e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8671875,"distances_sum":2449.5835641154313}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9481284340659345,"seconds":5.9586018323898315e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.796875,"distances_sum":2496.2443928548423}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9588427197802203,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8671875,"distances_sum":2534.6202457487584}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9588427197802203,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8671875,"distances_sum":2534.6202457487584}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3916015625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3916015625,"f1":null,"seconds":4.2691826820373535e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":6.1640625,"distances_sum":870.5656246896114}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.37109375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.37109375,"f1":null,"seconds":3.900378942489624e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":6.0703125,"distances_sum":867.3620947602834}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.373046875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.373046875,"f1":null,"seconds":3.7569552659988403e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":6.09375,"distances_sum":857.7095945056087}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3916015625,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.3916015625,"f1":null,"seconds":4.2691826820373535e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":6.1640625,"distances_sum":870.5656246896114}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9085508241758248,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.4765625,"distances_sum":2162.4167930831522}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.400390625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.400390625,"f1":null,"seconds":4.433095455169678e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":6.3125,"distances_sum":929.8461950394357}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7807478979353988,"seconds":4.721805453300476e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":7.7265625,"distances_sum":1612.1718579373405}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9023039460539469,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.421875,"distances_sum":2140.2602621751607}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.83984375,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.83984375,"f1":0.9085508241758248,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.4765625,"distances_sum":2162.4167930831522}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9720238095238096,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.875,"distances_sum":2639.182379435549}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9149298618048625,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.4921875,"distances_sum":2235.0355166653494}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9501977189477194,"seconds":6.128102540969849e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.7421875,"distances_sum":2528.1960895478574}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9195257867132874,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.46875,"distances_sum":2249.0168536070073}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9459191849816856,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.71875,"distances_sum":2472.45372822775}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9720238095238096,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.875,"distances_sum":2639.182379435549}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9720238095238096,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.875,"distances_sum":2639.182379435549}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41015625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.41015625,"f1":null,"seconds":4.1816383600234985e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":6.6796875,"distances_sum":863.9210142884712}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.41015625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.41015625,"f1":null,"seconds":4.1816383600234985e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":6.6796875,"distances_sum":863.9210142884712}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6875,"f1":0.8040110930735939,"seconds":5.258247256278992e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.8984375,"distances_sum":1574.1991113888262}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6875,"f1":0.8040110930735939,"seconds":5.258247256278992e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.8984375,"distances_sum":1574.1991113888262}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9253434065934072,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.890625,"distances_sum":2211.292421466946}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8701171875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8701171875,"f1":0.9253434065934072,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.890625,"distances_sum":2211.292421466946}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8701171875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8701171875,"f1":0.9253434065934072,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.890625,"distances_sum":2211.292421466946}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41015625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.41015625,"f1":null,"seconds":3.827735781669617e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":6.5078125,"distances_sum":928.8413791671036}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7917840839715848,"seconds":4.839152097702026e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":7.828125,"distances_sum":1599.9658073606956}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.720703125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.720703125,"f1":0.8280764374514383,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.125,"distances_sum":1766.3298817852574}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.720703125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.720703125,"f1":0.8280764374514383,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.125,"distances_sum":1766.3298817852574}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8968182858807868,"seconds":6.496906280517578e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.5859375,"distances_sum":2136.544432646222}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9619848901098904,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.90625,"distances_sum":2468.0926452974068}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.952781593406594,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.8984375,"distances_sum":2402.187833295313}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8937016108891116,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.515625,"distances_sum":2098.995747500837}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7353515625,"f1":0.8390463702963711,"seconds":5.3551048040390015e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.171875,"distances_sum":1826.3743850518445}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7392578125,"f1":0.8435533216783225,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.2734375,"distances_sum":1806.35468792573}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8520151723276733,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.2421875,"distances_sum":1889.111026526667}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9619848901098904,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.90625,"distances_sum":2468.0926452974068}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.978537087912088,"seconds":6.789341568946838e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.9375,"distances_sum":2593.5918611607412}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9717319139194143,"seconds":6.405636668205261e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.9375,"distances_sum":2540.624176198436}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9817536630036633,"seconds":7.0855021476745605e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.9765625,"distances_sum":2618.233216043718}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9786687271062273,"seconds":6.359070539474487e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.9765625,"distances_sum":2581.571872036631}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9673420329670335,"seconds":6.016343832015991e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.921875,"distances_sum":2495.9912590320055}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9817536630036633,"seconds":7.0855021476745605e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.9765625,"distances_sum":2618.233216043718}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9817536630036633,"seconds":7.0855021476745605e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.9765625,"distances_sum":2618.233216043718}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5947265625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5947265625,"f1":0.733628177378178,"seconds":5.101785063743591e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.9609375,"distances_sum":1324.8302586205934}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5947265625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5947265625,"f1":0.733628177378178,"seconds":5.101785063743591e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.9609375,"distances_sum":1324.8302586205934}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8946745962370969,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.890625,"distances_sum":1998.0806915029807}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8203125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8203125,"f1":0.8946745962370969,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.890625,"distances_sum":1998.0806915029807}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8203125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8203125,"f1":0.8946745962370969,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.890625,"distances_sum":1998.0806915029807}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8203125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8203125,"f1":0.8946745962370969,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.890625,"distances_sum":1998.0806915029807}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.7990584068709077,"seconds":5.140900611877441e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.0859375,"distances_sum":1561.7658262412845}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3916015625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3916015625,"f1":null,"seconds":4.04752790927887e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.8828125,"distances_sum":882.1111292339843}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8450934482184491,"seconds":5.345791578292847e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.4375,"distances_sum":1747.3930787312588}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7490234375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7490234375,"f1":0.8450934482184491,"seconds":5.345791578292847e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.4375,"distances_sum":1747.3930787312588}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9585622710622714,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.84375,"distances_sum":2414.375765903291}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9352793040293047,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8671875,"distances_sum":2238.9169034374786}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9339056776556781,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.7890625,"distances_sum":2286.9652118673566}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9553972069597076,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.90625,"distances_sum":2370.8753731685606}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8684419746919756,"seconds":5.247071385383606e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.546875,"distances_sum":1865.5090459292148}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9245821886446897,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.6640625,"distances_sum":2149.6509596538403}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9585622710622714,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.84375,"distances_sum":2414.375765903291}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9707818223443228,"seconds":5.977228283882141e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.9375,"distances_sum":2482.0008577300937}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9619677197802203,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.84375,"distances_sum":2458.6498774711436}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9707818223443228,"seconds":5.977228283882141e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.9375,"distances_sum":2482.0008577300937}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9707818223443228,"seconds":5.977228283882141e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.9375,"distances_sum":2482.0008577300937}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6748046875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6748046875,"f1":0.7950944888444896,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.34375,"distances_sum":1610.320021178446}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6748046875,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6748046875,"f1":0.7950944888444896,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.34375,"distances_sum":1610.320021178446}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8628215534465544,"seconds":4.9658119678497314e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.046875,"distances_sum":1920.3577343826923}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9310382326007333,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.5859375,"distances_sum":2355.706904892307}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8798828125,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9310382326007333,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.5859375,"distances_sum":2355.706904892307}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9364729020979026,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.625,"distances_sum":2375.6087780596667}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9569997710622711,"seconds":6.7930668592453e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8125,"distances_sum":2486.5324128514776}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9487980769230775,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.734375,"distances_sum":2438.4723744097223}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9569997710622711,"seconds":6.7930668592453e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8125,"distances_sum":2486.5324128514776}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.923828125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9569997710622711,"seconds":6.7930668592453e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8125,"distances_sum":2486.5324128514776}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.228515625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.228515625,"f1":null,"seconds":3.4105032682418823e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":5.8515625,"distances_sum":559.4686685516356}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7918366355866364,"seconds":4.952773451805115e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.0625,"distances_sum":1590.723426095911}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6796875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6796875,"f1":0.7918366355866364,"seconds":4.952773451805115e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.0625,"distances_sum":1590.723426095911}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8715779012654018,"seconds":5.02169132232666e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.34375,"distances_sum":1911.7097033746143}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9341632326007331,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.8046875,"distances_sum":2324.372306709877}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9216835248085253,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.7578125,"distances_sum":2260.4859214699018}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8857421875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8857421875,"f1":0.9341632326007331,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.8046875,"distances_sum":2324.372306709877}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9487408424908429,"seconds":6.562098860740662e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.8359375,"distances_sum":2455.342955370169}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9724530677655681,"seconds":6.424263119697571e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.8984375,"distances_sum":2625.53125944357}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9583562271062277,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.8984375,"distances_sum":2489.0897394334957}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.949971382783883,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.875,"distances_sum":2453.173217573373}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9626717032967036,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.8515625,"distances_sum":2543.9776813200515}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9724530677655681,"seconds":6.424263119697571e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.8984375,"distances_sum":2625.53125944357}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9724530677655681,"seconds":6.424263119697571e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.8984375,"distances_sum":2625.53125944357}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8730004370629378,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.5,"distances_sum":2050.885132004857}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7841796875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7841796875,"f1":0.8730004370629378,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.5,"distances_sum":2050.885132004857}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9690476190476195,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9609375,"distances_sum":2712.8188291277907}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9690476190476195,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9609375,"distances_sum":2712.8188291277907}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9751144688644692,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9375,"distances_sum":2778.574414135324}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9751144688644692,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9375,"distances_sum":2778.574414135324}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9751144688644692,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9375,"distances_sum":2778.574414135324}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.23046875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.23046875,"f1":null,"seconds":2.8777867555618286e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.7734375,"distances_sum":461.94620809428653}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5390625, conf: {"ssize":2,"bsize":3}, perf: {"precision":0.991015625,"recall":0.5390625,"f1":0.6844734258796764,"seconds":3.900378942489624e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":6.90625,"distances_sum":1044.892713901437}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7265625, conf: {"ssize":5,"bsize":5}, perf: {"precision":0.9887183779761904,"recall":0.7265625,"f1":0.8289716143231777,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.1484375,"distances_sum":1513.4763395740158}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7265625,"state":{"ssize":5,"bsize":5},"perf":{"precision":0.9887183779761904,"recall":0.7265625,"f1":0.8289716143231777,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.1484375,"distances_sum":1513.4763395740158}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":3,"bsize":6}, perf: {"precision":0.9853050595238094,"recall":0.791015625,"f1":0.8725753413253419,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.71875,"distances_sum":1692.4753077549692}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":7,"bsize":9}, perf: {"precision":0.9841424851190476,"recall":0.92578125,"f1":0.9516848385989014,"seconds":6.3478946685791016e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.90625,"distances_sum":2149.7234597702654}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8056640625, conf: {"ssize":1,"bsize":6}, perf: {"precision":0.9856770833333335,"recall":0.8056640625,"f1":0.8812502601565109,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.71875,"distances_sum":1767.3276511956924}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":2,"bsize":5}, perf: {"precision":0.9865327380952381,"recall":0.7568359375,"f1":0.8505837912087919,"seconds":6.191432476043701e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.359375,"distances_sum":1601.1826847457053}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":4,"bsize":5}, perf: {"precision":0.9898065476190477,"recall":0.7587890625,"f1":0.8516743672993681,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.3984375,"distances_sum":1586.998396144361}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":7,"bsize":9},"perf":{"precision":0.9841424851190476,"recall":0.92578125,"f1":0.9516848385989014,"seconds":6.3478946685791016e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.90625,"distances_sum":2149.7234597702654}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":11,"bsize":12}, perf: {"precision":0.985537574404762,"recall":0.9462890625,"f1":0.9639430231227105,"seconds":6.886199116706848e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.96875,"distances_sum":2220.06384969722}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":10,"bsize":13}, perf: {"precision":0.9824683779761905,"recall":0.9453125,"f1":0.961915493360806,"seconds":7.269904017448425e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.984375,"distances_sum":2215.4252206208903}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":10,"bsize":11}, perf: {"precision":0.9868396577380952,"recall":0.9375,"f1":0.959049479166667,"seconds":6.683170795440674e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.953125,"distances_sum":2165.5299995241803}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":11,"bsize":12},"perf":{"precision":0.985537574404762,"recall":0.9462890625,"f1":0.9639430231227105,"seconds":6.886199116706848e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.96875,"distances_sum":2220.06384969722}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":11,"bsize":12},"perf":{"precision":0.985537574404762,"recall":0.9462890625,"f1":0.9639430231227105,"seconds":6.886199116706848e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.96875,"distances_sum":2220.06384969722}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2333984375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2333984375,"f1":null,"seconds":3.244727849960327e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":5.109375,"distances_sum":518.6614034427502}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2333984375,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.2333984375,"f1":null,"seconds":3.244727849960327e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":5.109375,"distances_sum":518.6614034427502}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.365234375, conf: {"ssize":6,"bsize":2}, perf: {"precision":null,"recall":0.365234375,"f1":null,"seconds":3.645196557044983e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":5.765625,"distances_sum":773.9903074304045}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5341796875, conf: {"ssize":7,"bsize":3}, perf: {"precision":1.0,"recall":0.5341796875,"f1":0.6810668498168503,"seconds":4.548579454421997e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":7.0546875,"distances_sum":1124.438485276218}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.646484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.646484375,"f1":0.7746092449217457,"seconds":5.207955837249756e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":7.7578125,"distances_sum":1323.5021192163706}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8536297036297045,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.4375,"distances_sum":1664.975701751472}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7578125,"f1":0.8536297036297045,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.4375,"distances_sum":1664.975701751472}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8955502830502837,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.8125,"distances_sum":1857.9542081625566}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9222985347985354,"seconds":6.359070539474487e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.734375,"distances_sum":2027.4572440627499}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8947287087912097,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.7734375,"distances_sum":1849.9638352722645}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9040324259074268,"seconds":6.074085831642151e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.8203125,"distances_sum":1895.2203809915654}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8576584873459882,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.4921875,"distances_sum":1662.6917874406263}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8642578125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8642578125,"f1":0.9222985347985354,"seconds":6.359070539474487e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.734375,"distances_sum":2027.4572440627499}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8642578125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8642578125,"f1":0.9222985347985354,"seconds":6.359070539474487e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.734375,"distances_sum":2027.4572440627499}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.546875, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.546875,"f1":null,"seconds":4.474073648452759e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":7.109375,"distances_sum":1126.3749463289337}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.8497112262737272,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.3828125,"distances_sum":1644.4116171623973}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.748046875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.748046875,"f1":0.8497112262737272,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.3828125,"distances_sum":1644.4116171623973}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9537259615384621,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.796875,"distances_sum":2164.2590330063813}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9551739926739932,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.9296875,"distances_sum":2175.398452085458}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9551739926739932,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.9296875,"distances_sum":2175.398452085458}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9734775641025643,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.9140625,"distances_sum":2309.3518544948356}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9694768772893776,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.9453125,"distances_sum":2258.0945213285963}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9734775641025643,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.9140625,"distances_sum":2309.3518544948356}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9734775641025643,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.9140625,"distances_sum":2309.3518544948356}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8597277722277732,"seconds":5.085021257400513e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.0546875,"distances_sum":1639.182347408334}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7646484375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7646484375,"f1":0.8597277722277732,"seconds":5.085021257400513e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.0546875,"distances_sum":1639.182347408334}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9242647977022984,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.6328125,"distances_sum":2008.8894152496534}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.869140625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.869140625,"f1":0.9242647977022984,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.6328125,"distances_sum":2008.8894152496534}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9642914377289382,"seconds":5.977228283882141e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.84375,"distances_sum":2256.180224170646}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.975280448717949,"seconds":6.057322025299072e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.953125,"distances_sum":2301.637652903432}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9669700091575095,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.9296875,"distances_sum":2236.0942880873577}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9466002747252753,"seconds":5.578622221946716e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.828125,"distances_sum":2102.876682315499}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.953316995504496,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7890625,"distances_sum":2181.668438863315}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.975280448717949,"seconds":6.057322025299072e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.953125,"distances_sum":2301.637652903432}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.975280448717949,"seconds":6.057322025299072e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.953125,"distances_sum":2301.637652903432}}, n: 9
mean(cfft.distances) = 0.3348591897994561
mean(cdnet.distances) = 0.36069939579038524
mean(crand.distances) = 0.35856317971670054
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8755555555555556
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9088888888888889
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8755555555555556
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8688888888888888
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8888888888888888
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8911111111111111
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9466666666666667
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8644444444444446
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9111111111111111
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9066666666666666
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8822222222222221
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8688888888888888
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9311111111111111
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9288888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8799999999999999
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8777777777777778
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.88
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9288888888888889
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8911111111111111
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9066666666666666
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8799999999999999
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8555555555555556
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8533333333333334
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9133333333333332
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9044444444444445
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5332958342631658] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 29, 10]]
** centroid: 1, normalized-entropy: 0.8212809417449864, [(2, 29), (3, 10)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 8, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 11: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
finished with 14 centroids; started with 12
acc = 0.94
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.23887210011666826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23887210011666826, 0.2079571471675425] ***
*** finished computation of 7 references, err: [Inf, 0.23887210011666826, 0.2079571471675425] ***
*** center 1: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [73, 37, 0]]
** centroid: 2, normalized-entropy: 0.9212963741927287, [(1, 73), (2, 37)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 59, 30]]
** centroid: 3, normalized-entropy: 0.9219957030944405, [(2, 59), (3, 30)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [76, 34, 0]]
** centroid: 4, normalized-entropy: 0.8921212805771683, [(1, 76), (2, 34)]
*** center 5: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [4, 102, 0]]
** centroid: 7, normalized-entropy: 0.23181305002459035, [(1, 4), (2, 102)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24796611234942847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24796611234942847, 0.19589591979863005] ***
*** starting iteration: 2; err: [Inf, 0.24796611234942847, 0.19589591979863005] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24796611234942847, 0.19589591979863005, 0.19176190300752316] ***
*** starting iteration: 3; err: [Inf, 0.24796611234942847, 0.19589591979863005, 0.19176190300752316] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24796611234942847, 0.19589591979863005, 0.19176190300752316, 0.19155762192175105] ***
*** finished computation of 7 references, err: [Inf, 0.24796611234942847, 0.19589591979863005, 0.19176190300752316, 0.19155762192175105] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [79, 13, 0]]
** centroid: 1, normalized-entropy: 0.5876446142980418, [(1, 79), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 20, 0]]
** centroid: 2, normalized-entropy: 0.7778108790853029, [(1, 67), (2, 20)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 87, 30]]
** centroid: 3, normalized-entropy: 0.8212809417449864, [(2, 87), (3, 30)]
*** center 4: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [103, 7, 0]]
** centroid: 5, normalized-entropy: 0.34171390666761664, [(1, 103), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [66, 12, 0]]
** centroid: 6, normalized-entropy: 0.6193821946787638, [(1, 66), (2, 12)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 93, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2174446543446858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2174446543446858, 0.19979724132929227] ***
*** finished computation of 7 references, err: [Inf, 0.2174446543446858, 0.19979724132929227] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [33, 25, 0]]
** centroid: 1, normalized-entropy: 0.9862325350724501, [(1, 33), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [8, 91, 0]]
** centroid: 2, normalized-entropy: 0.40502013262424225, [(1, 8), (2, 91)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 32, 33]]
** centroid: 3, normalized-entropy: 0.9998292601233937, [(2, 32), (3, 33)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [141, 4, 0]]
** centroid: 4, normalized-entropy: 0.1821384645788663, [(1, 141), (2, 4)]
*** center 5: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [41, 71, 0]]
** centroid: 7, normalized-entropy: 0.947607799966766, [(1, 41), (2, 71)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24270606573916848] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24270606573916848, 0.20970492504713037] ***
*** finished computation of 7 references, err: [Inf, 0.24270606573916848, 0.20970492504713037] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [52, 2, 0]]
** centroid: 1, normalized-entropy: 0.22853814395352806, [(1, 52), (2, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [82, 14, 0]]
** centroid: 3, normalized-entropy: 0.5993142373098089, [(1, 82), (2, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [48, 28, 0]]
** centroid: 5, normalized-entropy: 0.9494520153879484, [(1, 48), (2, 28)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [60, 43, 0]]
** centroid: 6, normalized-entropy: 0.98025955447738, [(1, 60), (2, 43)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 132, 33]]
** centroid: 7, normalized-entropy: 0.7219280948873623, [(2, 132), (3, 33)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2476326692359964] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2476326692359964, 0.1988942871211438] ***
*** starting iteration: 2; err: [Inf, 0.2476326692359964, 0.1988942871211438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2476326692359964, 0.1988942871211438, 0.19427578724982278] ***
*** starting iteration: 3; err: [Inf, 0.2476326692359964, 0.1988942871211438, 0.19427578724982278] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2476326692359964, 0.1988942871211438, 0.19427578724982278, 0.19185675428229365] ***
*** finished computation of 7 references, err: [Inf, 0.2476326692359964, 0.1988942871211438, 0.19427578724982278, 0.19185675428229365] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [17, 57, 0]]
** centroid: 1, normalized-entropy: 0.77753986416076, [(1, 17), (2, 57)]
*** center 2: selecting labels [1] (freq >= 1) [from [118, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [8, 67, 0]]
** centroid: 3, normalized-entropy: 0.48977901368693744, [(1, 8), (2, 67)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [52, 50, 0]]
** centroid: 4, normalized-entropy: 0.9997226475394071, [(1, 52), (2, 50)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 58, 30]]
** centroid: 5, normalized-entropy: 0.9256859869821296, [(2, 58), (3, 30)]
*** center 6: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2307242729004355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2307242729004355, 0.19685569258806096] ***
*** starting iteration: 2; err: [Inf, 0.2307242729004355, 0.19685569258806096] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2307242729004355, 0.19685569258806096, 0.19262185041978397] ***
*** starting iteration: 3; err: [Inf, 0.2307242729004355, 0.19685569258806096, 0.19262185041978397] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2307242729004355, 0.19685569258806096, 0.19262185041978397, 0.19093811392436444] ***
*** finished computation of 7 references, err: [Inf, 0.2307242729004355, 0.19685569258806096, 0.19262185041978397, 0.19093811392436444] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [94, 3, 0]]
** centroid: 1, normalized-entropy: 0.19902377455969078, [(1, 94), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [5, 78, 0]]
** centroid: 2, normalized-entropy: 0.32840071392894665, [(1, 5), (2, 78)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 68, 33]]
** centroid: 3, normalized-entropy: 0.9115532734067251, [(2, 68), (3, 33)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [76, 6, 0]]
** centroid: 4, normalized-entropy: 0.3776463213737003, [(1, 76), (2, 6)]
*** center 5: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [40, 68, 0]]
** centroid: 6, normalized-entropy: 0.9509560484549724, [(1, 40), (2, 68)]
*** center 7: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.286666287110303] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.286666287110303, 0.22417206385115657] ***
*** starting iteration: 2; err: [Inf, 0.286666287110303, 0.22417206385115657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.286666287110303, 0.22417206385115657, 0.20995125068683942] ***
*** starting iteration: 3; err: [Inf, 0.286666287110303, 0.22417206385115657, 0.20995125068683942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.286666287110303, 0.22417206385115657, 0.20995125068683942, 0.2039914473191719] ***
*** finished computation of 7 references, err: [Inf, 0.286666287110303, 0.22417206385115657, 0.20995125068683942, 0.2039914473191719] ***
*** center 1: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [45, 6, 0]]
** centroid: 2, normalized-entropy: 0.5225593745369407, [(1, 45), (2, 6)]
*** center 3: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [128, 35, 0]]
** centroid: 4, normalized-entropy: 0.750415849979091, [(1, 128), (2, 35)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 97, 33]]
** centroid: 5, normalized-entropy: 0.8173174158670672, [(2, 97), (3, 33)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [108, 3, 0]]
** centroid: 6, normalized-entropy: 0.1792560669283214, [(1, 108), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 78, 0]]
** centroid: 7, normalized-entropy: 0.09794058271817412, [(1, 1), (2, 78)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2822410319480827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2822410319480827, 0.17214498151437724] ***
*** starting iteration: 2; err: [Inf, 0.2822410319480827, 0.17214498151437724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2822410319480827, 0.17214498151437724, 0.16372490613287813] ***
*** starting iteration: 3; err: [Inf, 0.2822410319480827, 0.17214498151437724, 0.16372490613287813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2822410319480827, 0.17214498151437724, 0.16372490613287813, 0.1581427819856272] ***
*** starting iteration: 4; err: [Inf, 0.2822410319480827, 0.17214498151437724, 0.16372490613287813, 0.1581427819856272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2822410319480827, 0.17214498151437724, 0.16372490613287813, 0.1581427819856272, 0.15398416247263597] ***
*** starting iteration: 5; err: [Inf, 0.2822410319480827, 0.17214498151437724, 0.16372490613287813, 0.1581427819856272, 0.15398416247263597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2822410319480827, 0.17214498151437724, 0.16372490613287813, 0.1581427819856272, 0.15398416247263597, 0.15139750115204234] ***
*** starting iteration: 6; err: [Inf, 0.2822410319480827, 0.17214498151437724, 0.16372490613287813, 0.1581427819856272, 0.15398416247263597, 0.15139750115204234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2822410319480827, 0.17214498151437724, 0.16372490613287813, 0.1581427819856272, 0.15398416247263597, 0.15139750115204234, 0.1486353024675346] ***
*** starting iteration: 7; err: [Inf, 0.2822410319480827, 0.17214498151437724, 0.16372490613287813, 0.1581427819856272, 0.15398416247263597, 0.15139750115204234, 0.1486353024675346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2822410319480827, 0.17214498151437724, 0.16372490613287813, 0.1581427819856272, 0.15398416247263597, 0.15139750115204234, 0.1486353024675346, 0.14640278928051773] ***
*** starting iteration: 8; err: [Inf, 0.2822410319480827, 0.17214498151437724, 0.16372490613287813, 0.1581427819856272, 0.15398416247263597, 0.15139750115204234, 0.1486353024675346, 0.14640278928051773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2822410319480827, 0.17214498151437724, 0.16372490613287813, 0.1581427819856272, 0.15398416247263597, 0.15139750115204234, 0.1486353024675346, 0.14640278928051773, 0.14485541958076595] ***
*** starting iteration: 9; err: [Inf, 0.2822410319480827, 0.17214498151437724, 0.16372490613287813, 0.1581427819856272, 0.15398416247263597, 0.15139750115204234, 0.1486353024675346, 0.14640278928051773, 0.14485541958076595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2822410319480827, 0.17214498151437724, 0.16372490613287813, 0.1581427819856272, 0.15398416247263597, 0.15139750115204234, 0.1486353024675346, 0.14640278928051773, 0.14485541958076595, 0.1441780782581584] ***
*** finished computation of 7 references, err: [Inf, 0.2822410319480827, 0.17214498151437724, 0.16372490613287813, 0.1581427819856272, 0.15398416247263597, 0.15139750115204234, 0.1486353024675346, 0.14640278928051773, 0.14485541958076595, 0.1441780782581584] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [59, 53, 0]]
** centroid: 1, normalized-entropy: 0.9979288148772633, [(1, 59), (2, 53)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 36, 0]]
** centroid: 2, normalized-entropy: 0.915207326151564, [(1, 73), (2, 36)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 81, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 60, 30]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(2, 60), (3, 30)]
*** center 6: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [94, 2, 0]]
** centroid: 7, normalized-entropy: 0.14609425012013613, [(1, 94), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22954529012774008] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22954529012774008, 0.18254858098583465] ***
*** starting iteration: 2; err: [Inf, 0.22954529012774008, 0.18254858098583465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22954529012774008, 0.18254858098583465, 0.16409368218639042] ***
*** starting iteration: 3; err: [Inf, 0.22954529012774008, 0.18254858098583465, 0.16409368218639042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22954529012774008, 0.18254858098583465, 0.16409368218639042, 0.15774100580192665] ***
*** starting iteration: 4; err: [Inf, 0.22954529012774008, 0.18254858098583465, 0.16409368218639042, 0.15774100580192665] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22954529012774008, 0.18254858098583465, 0.16409368218639042, 0.15774100580192665, 0.15270715128529866] ***
*** starting iteration: 5; err: [Inf, 0.22954529012774008, 0.18254858098583465, 0.16409368218639042, 0.15774100580192665, 0.15270715128529866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22954529012774008, 0.18254858098583465, 0.16409368218639042, 0.15774100580192665, 0.15270715128529866, 0.1495309344128422] ***
*** starting iteration: 6; err: [Inf, 0.22954529012774008, 0.18254858098583465, 0.16409368218639042, 0.15774100580192665, 0.15270715128529866, 0.1495309344128422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22954529012774008, 0.18254858098583465, 0.16409368218639042, 0.15774100580192665, 0.15270715128529866, 0.1495309344128422, 0.1480334478582645] ***
*** starting iteration: 7; err: [Inf, 0.22954529012774008, 0.18254858098583465, 0.16409368218639042, 0.15774100580192665, 0.15270715128529866, 0.1495309344128422, 0.1480334478582645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22954529012774008, 0.18254858098583465, 0.16409368218639042, 0.15774100580192665, 0.15270715128529866, 0.1495309344128422, 0.1480334478582645, 0.14761516896692262] ***
*** finished computation of 7 references, err: [Inf, 0.22954529012774008, 0.18254858098583465, 0.16409368218639042, 0.15774100580192665, 0.15270715128529866, 0.1495309344128422, 0.1480334478582645, 0.14761516896692262] ***
*** center 1: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [82, 44, 0]]
** centroid: 2, normalized-entropy: 0.9333572600179806, [(1, 82), (2, 44)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [97, 12, 0]]
** centroid: 3, normalized-entropy: 0.5001926210998139, [(1, 97), (2, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 9, 0]]
** centroid: 5, normalized-entropy: 0.5801954953637372, [(1, 56), (2, 9)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 54, 33]]
** centroid: 6, normalized-entropy: 0.9575534837147484, [(2, 54), (3, 33)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 104, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18800857523944917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18800857523944917, 0.15680642550702262] ***
*** starting iteration: 2; err: [Inf, 0.18800857523944917, 0.15680642550702262] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18800857523944917, 0.15680642550702262, 0.15472283229480374] ***
*** starting iteration: 3; err: [Inf, 0.18800857523944917, 0.15680642550702262, 0.15472283229480374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18800857523944917, 0.15680642550702262, 0.15472283229480374, 0.15271512455812403] ***
*** starting iteration: 4; err: [Inf, 0.18800857523944917, 0.15680642550702262, 0.15472283229480374, 0.15271512455812403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18800857523944917, 0.15680642550702262, 0.15472283229480374, 0.15271512455812403, 0.15109426790656036] ***
*** starting iteration: 5; err: [Inf, 0.18800857523944917, 0.15680642550702262, 0.15472283229480374, 0.15271512455812403, 0.15109426790656036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18800857523944917, 0.15680642550702262, 0.15472283229480374, 0.15271512455812403, 0.15109426790656036, 0.14875580930895266] ***
*** starting iteration: 6; err: [Inf, 0.18800857523944917, 0.15680642550702262, 0.15472283229480374, 0.15271512455812403, 0.15109426790656036, 0.14875580930895266] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18800857523944917, 0.15680642550702262, 0.15472283229480374, 0.15271512455812403, 0.15109426790656036, 0.14875580930895266, 0.1468952075303204] ***
*** starting iteration: 7; err: [Inf, 0.18800857523944917, 0.15680642550702262, 0.15472283229480374, 0.15271512455812403, 0.15109426790656036, 0.14875580930895266, 0.1468952075303204] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18800857523944917, 0.15680642550702262, 0.15472283229480374, 0.15271512455812403, 0.15109426790656036, 0.14875580930895266, 0.1468952075303204, 0.14577022210780022] ***
*** starting iteration: 8; err: [Inf, 0.18800857523944917, 0.15680642550702262, 0.15472283229480374, 0.15271512455812403, 0.15109426790656036, 0.14875580930895266, 0.1468952075303204, 0.14577022210780022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18800857523944917, 0.15680642550702262, 0.15472283229480374, 0.15271512455812403, 0.15109426790656036, 0.14875580930895266, 0.1468952075303204, 0.14577022210780022, 0.1453399329014804] ***
*** finished computation of 7 references, err: [Inf, 0.18800857523944917, 0.15680642550702262, 0.15472283229480374, 0.15271512455812403, 0.15109426790656036, 0.14875580930895266, 0.1468952075303204, 0.14577022210780022, 0.1453399329014804] ***
*** center 1: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 9, 0]]
** centroid: 2, normalized-entropy: 0.5293608652873645, [(1, 66), (2, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [87, 6, 0]]
** centroid: 4, normalized-entropy: 0.3451173149449528, [(1, 87), (2, 6)]
*** center 5: selecting labels [2] (freq >= 2) [from [1, 75, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 75, 0]]
** centroid: 6, normalized-entropy: 0.9321115676166747, [(1, 40), (2, 75)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 54, 33]]
** centroid: 7, normalized-entropy: 0.9575534837147484, [(2, 54), (3, 33)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3964468042293491] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3964468042293491, 0.23501722232295988] ***
*** finished computation of 7 references, err: [Inf, 0.3964468042293491, 0.23501722232295988] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [20, 68, 0]]
** centroid: 1, normalized-entropy: 0.7732266742876346, [(1, 20), (2, 68)]
*** center 2: selecting labels [1] (freq >= 2) [from [139, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 43, 9]]
** centroid: 3, normalized-entropy: 0.6646953053493416, [(2, 43), (3, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [51, 42, 0]]
** centroid: 4, normalized-entropy: 0.9932338197397066, [(1, 51), (2, 42)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 33, 0]]
** centroid: 5, normalized-entropy: 0.9777945702913884, [(1, 47), (2, 33)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 46, 21]]
** centroid: 6, normalized-entropy: 0.8970964164730478, [(2, 46), (3, 21)]
*** center 7: selecting labels [1] (freq >= 2) [from [147, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.36789643833053476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.36789643833053476, 0.2372181252401875] ***
*** finished computation of 7 references, err: [Inf, 0.36789643833053476, 0.2372181252401875] ***
*** center 1: selecting labels [1] (freq >= 2) [from [214, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [84, 44, 0]]
** centroid: 2, normalized-entropy: 0.9283620723948678, [(1, 84), (2, 44)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [63, 16, 0]]
** centroid: 3, normalized-entropy: 0.7269625813353975, [(1, 63), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 55, 0]]
** centroid: 4, normalized-entropy: 0.998363672593813, [(1, 50), (2, 55)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 53, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 17, 28]]
** centroid: 6, normalized-entropy: 0.9564574047992596, [(2, 17), (3, 28)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 38, 5]]
** centroid: 7, normalized-entropy: 0.5185697317883058, [(2, 38), (3, 5)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.37861646209023836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37861646209023836, 0.24839479798615827] ***
*** finished computation of 7 references, err: [Inf, 0.37861646209023836, 0.24839479798615827] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [20, 54, 0]]
** centroid: 1, normalized-entropy: 0.8418521897563208, [(1, 20), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [193, 19, 0]]
** centroid: 2, normalized-entropy: 0.4352089878265592, [(1, 193), (2, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [194, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [8, 70, 0]]
** centroid: 4, normalized-entropy: 0.4770713062193298, [(1, 8), (2, 70)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 12, 13]]
** centroid: 5, normalized-entropy: 0.998845535995202, [(2, 12), (3, 13)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 1, 20]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24295265890093803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24295265890093803, 0.19780523793679708] ***
*** starting iteration: 2; err: [Inf, 0.24295265890093803, 0.19780523793679708] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24295265890093803, 0.19780523793679708, 0.19120881486421581] ***
*** starting iteration: 3; err: [Inf, 0.24295265890093803, 0.19780523793679708, 0.19120881486421581] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24295265890093803, 0.19780523793679708, 0.19120881486421581, 0.18978258221783023] ***
*** starting iteration: 4; err: [Inf, 0.24295265890093803, 0.19780523793679708, 0.19120881486421581, 0.18978258221783023] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24295265890093803, 0.19780523793679708, 0.19120881486421581, 0.18978258221783023, 0.1884127533066085] ***
*** starting iteration: 5; err: [Inf, 0.24295265890093803, 0.19780523793679708, 0.19120881486421581, 0.18978258221783023, 0.1884127533066085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24295265890093803, 0.19780523793679708, 0.19120881486421581, 0.18978258221783023, 0.1884127533066085, 0.18795398660032064] ***
*** finished computation of 7 references, err: [Inf, 0.24295265890093803, 0.19780523793679708, 0.19120881486421581, 0.18978258221783023, 0.1884127533066085, 0.18795398660032064] ***
*** center 1: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 71, 33]]
** centroid: 2, normalized-entropy: 0.9014296082981941, [(2, 71), (3, 33)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [79, 2, 0]]
** centroid: 3, normalized-entropy: 0.16702680404522793, [(1, 79), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [78, 16, 0]]
** centroid: 4, normalized-entropy: 0.6581912658132184, [(1, 78), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 61, 0]]
** centroid: 5, normalized-entropy: 0.9878444130876813, [(1, 47), (2, 61)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 73, 0]]
** centroid: 6, normalized-entropy: 0.4280696292293062, [(1, 7), (2, 73)]
*** center 7: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22958766913105702] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22958766913105702, 0.19448189399270774] ***
*** starting iteration: 2; err: [Inf, 0.22958766913105702, 0.19448189399270774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22958766913105702, 0.19448189399270774, 0.19098662920966408] ***
*** starting iteration: 3; err: [Inf, 0.22958766913105702, 0.19448189399270774, 0.19098662920966408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22958766913105702, 0.19448189399270774, 0.19098662920966408, 0.18935451810450657] ***
*** starting iteration: 4; err: [Inf, 0.22958766913105702, 0.19448189399270774, 0.19098662920966408, 0.18935451810450657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22958766913105702, 0.19448189399270774, 0.19098662920966408, 0.18935451810450657, 0.18884791939266618] ***
*** finished computation of 7 references, err: [Inf, 0.22958766913105702, 0.19448189399270774, 0.19098662920966408, 0.18935451810450657, 0.18884791939266618] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 65, 0]]
** centroid: 1, normalized-entropy: 0.4178642624458583, [(1, 6), (2, 65)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [86, 32, 0]]
** centroid: 2, normalized-entropy: 0.8431619569518377, [(1, 86), (2, 32)]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 82, 33]]
** centroid: 4, normalized-entropy: 0.8647572655747071, [(2, 82), (3, 33)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 39, 0]]
** centroid: 5, normalized-entropy: 0.943601631299382, [(1, 69), (2, 39)]
*** center 6: selecting labels [1] (freq >= 2) [from [106, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20110354929122035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20110354929122035, 0.17730070765035133] ***
*** finished computation of 7 references, err: [Inf, 0.20110354929122035, 0.17730070765035133] ***
*** center 1: selecting labels [1] (freq >= 1) [from [162, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [6, 65, 0]]
** centroid: 2, normalized-entropy: 0.4178642624458583, [(1, 6), (2, 65)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 28, 16]]
** centroid: 3, normalized-entropy: 0.9456603046006401, [(2, 28), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [152, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [84, 70, 0]]
** centroid: 5, normalized-entropy: 0.9940302114769566, [(1, 84), (2, 70)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 15, 14]]
** centroid: 6, normalized-entropy: 0.999142103991909, [(2, 15), (3, 14)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 54, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24107040231035132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24107040231035132, 0.1794415522468691] ***
*** finished computation of 7 references, err: [Inf, 0.24107040231035132, 0.1794415522468691] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [126, 12, 0]]
** centroid: 1, normalized-entropy: 0.42622865699814483, [(1, 126), (2, 12)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 26, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [134, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 36, 33]]
** centroid: 4, normalized-entropy: 0.9986359641585719, [(2, 36), (3, 33)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [8, 15, 0]]
** centroid: 5, normalized-entropy: 0.9321115676166747, [(1, 8), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [143, 51, 0]]
** centroid: 6, normalized-entropy: 0.8310711226002413, [(1, 143), (2, 51)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 83, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2060724878760482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2060724878760482, 0.16574096912937028] ***
*** finished computation of 7 references, err: [Inf, 0.2060724878760482, 0.16574096912937028] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [76, 23, 0]]
** centroid: 1, normalized-entropy: 0.7820392866349247, [(1, 76), (2, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [55, 1, 0]]
** centroid: 3, normalized-entropy: 0.12923377484588472, [(1, 55), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [24, 21, 0]]
** centroid: 4, normalized-entropy: 0.9967916319816367, [(1, 24), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [137, 35, 0]]
** centroid: 5, normalized-entropy: 0.7288502142447376, [(1, 137), (2, 35)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 114, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 25, 33]]
** centroid: 7, normalized-entropy: 0.9862325350724501, [(2, 25), (3, 33)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19453332487944033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19453332487944033, 0.15300684531747893] ***
*** starting iteration: 2; err: [Inf, 0.19453332487944033, 0.15300684531747893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19453332487944033, 0.15300684531747893, 0.14702623979854132] ***
*** starting iteration: 3; err: [Inf, 0.19453332487944033, 0.15300684531747893, 0.14702623979854132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19453332487944033, 0.15300684531747893, 0.14702623979854132, 0.14588410560147944] ***
*** starting iteration: 4; err: [Inf, 0.19453332487944033, 0.15300684531747893, 0.14702623979854132, 0.14588410560147944] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19453332487944033, 0.15300684531747893, 0.14702623979854132, 0.14588410560147944, 0.14546241122297943] ***
*** finished computation of 7 references, err: [Inf, 0.19453332487944033, 0.15300684531747893, 0.14702623979854132, 0.14588410560147944, 0.14546241122297943] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [122, 2, 0]]
** centroid: 1, normalized-entropy: 0.11911602665564841, [(1, 122), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 46, 30]]
** centroid: 2, normalized-entropy: 0.9677884628267678, [(2, 46), (3, 30)]
*** center 3: selecting labels [1] (freq >= 2) [from [98, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [87, 17, 0]]
** centroid: 4, normalized-entropy: 0.6425267139094084, [(1, 87), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [4, 85, 0]]
** centroid: 5, normalized-entropy: 0.2645173683629748, [(1, 4), (2, 85)]
*** center 6: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 81, 0]]
** centroid: 7, normalized-entropy: 0.2222848306856879, [(1, 3), (2, 81)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1944064321603788] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1944064321603788, 0.1541056069482615] ***
*** starting iteration: 2; err: [Inf, 0.1944064321603788, 0.1541056069482615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1944064321603788, 0.1541056069482615, 0.14989840454942752] ***
*** starting iteration: 3; err: [Inf, 0.1944064321603788, 0.1541056069482615, 0.14989840454942752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1944064321603788, 0.1541056069482615, 0.14989840454942752, 0.1492235420671092] ***
*** finished computation of 7 references, err: [Inf, 0.1944064321603788, 0.1541056069482615, 0.14989840454942752, 0.1492235420671092] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [31, 74, 0]]
** centroid: 1, normalized-entropy: 0.8753918540610236, [(1, 31), (2, 74)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [84, 6, 0]]
** centroid: 2, normalized-entropy: 0.3533593350214213, [(1, 84), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 61, 33]]
** centroid: 4, normalized-entropy: 0.9350145588035413, [(2, 61), (3, 33)]
*** center 5: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [93, 3, 0]]
** centroid: 6, normalized-entropy: 0.2006223243127146, [(1, 93), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 79, 0]]
** centroid: 7, normalized-entropy: 0.22641094842107634, [(1, 3), (2, 79)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17923914157608148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17923914157608148, 0.14963337889142234] ***
*** starting iteration: 2; err: [Inf, 0.17923914157608148, 0.14963337889142234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17923914157608148, 0.14963337889142234, 0.14629603347376638] ***
*** starting iteration: 3; err: [Inf, 0.17923914157608148, 0.14963337889142234, 0.14629603347376638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17923914157608148, 0.14963337889142234, 0.14629603347376638, 0.14534351519676209] ***
*** finished computation of 7 references, err: [Inf, 0.17923914157608148, 0.14963337889142234, 0.14629603347376638, 0.14534351519676209] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [85, 51, 0]]
** centroid: 1, normalized-entropy: 0.954434002924965, [(1, 85), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 10, 0]]
** centroid: 2, normalized-entropy: 0.5713549744279549, [(1, 64), (2, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 67, 33]]
** centroid: 4, normalized-entropy: 0.9149263727797277, [(2, 67), (3, 33)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 91, 0]]
** centroid: 5, normalized-entropy: 0.3712323266408756, [(1, 7), (2, 91)]
*** center 6: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.43021594383683914] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43021594383683914, 0.24848282374665365] ***
*** starting iteration: 2; err: [Inf, 0.43021594383683914, 0.24848282374665365] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43021594383683914, 0.24848282374665365, 0.24316774982282216] ***
*** starting iteration: 3; err: [Inf, 0.43021594383683914, 0.24848282374665365, 0.24316774982282216] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43021594383683914, 0.24848282374665365, 0.24316774982282216, 0.2428606327528039] ***
*** finished computation of 3 references, err: [Inf, 0.43021594383683914, 0.24848282374665365, 0.24316774982282216, 0.2428606327528039] ***
*** center 1: selecting labels [1] (freq >= 1) [from [218, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [88, 69, 0]]
** centroid: 2, normalized-entropy: 0.9894094752752204, [(1, 88), (2, 69)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [98, 163, 30]]
** centroid: 3, normalized-entropy: 0.8423405529060283, [(1, 98), (2, 163), (3, 30)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29765993369480725] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29765993369480725, 0.2369502361841511] ***
*** starting iteration: 2; err: [Inf, 0.29765993369480725, 0.2369502361841511] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29765993369480725, 0.2369502361841511, 0.23527185073488208] ***
*** starting iteration: 3; err: [Inf, 0.29765993369480725, 0.2369502361841511, 0.23527185073488208] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29765993369480725, 0.2369502361841511, 0.23527185073488208, 0.2345528436442097] ***
*** finished computation of 3 references, err: [Inf, 0.29765993369480725, 0.2369502361841511, 0.23527185073488208, 0.2345528436442097] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [175, 54, 0]]
** centroid: 1, normalized-entropy: 0.7879991169725559, [(1, 175), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [226, 2, 0]]
** centroid: 2, normalized-entropy: 0.07253718299881001, [(1, 226), (2, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [10, 167, 33]]
** centroid: 3, normalized-entropy: 0.5625149007020297, [(1, 10), (2, 167), (3, 33)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.41336006837208633] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41336006837208633, 0.2751316714046085] ***
*** starting iteration: 2; err: [Inf, 0.41336006837208633, 0.2751316714046085] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41336006837208633, 0.2751316714046085, 0.2700388153653307] ***
*** starting iteration: 3; err: [Inf, 0.41336006837208633, 0.2751316714046085, 0.2700388153653307] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41336006837208633, 0.2751316714046085, 0.2700388153653307, 0.25487372317425405] ***
*** finished computation of 3 references, err: [Inf, 0.41336006837208633, 0.2751316714046085, 0.2700388153653307, 0.25487372317425405] ***
*** center 1: selecting labels [1] (freq >= 1) [from [283, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [23, 147, 33]]
** centroid: 2, normalized-entropy: 0.7061577942606516, [(1, 23), (2, 147), (3, 33)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [109, 72, 0]]
** centroid: 3, normalized-entropy: 0.9696431715885565, [(1, 109), (2, 72)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22996341941218162] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22996341941218162, 0.16395324519653623] ***
*** finished computation of 7 references, err: [Inf, 0.22996341941218162, 0.16395324519653623] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 29, 30]]
** centroid: 1, normalized-entropy: 0.9997927658541268, [(2, 29), (3, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [119, 56, 0]]
** centroid: 3, normalized-entropy: 0.9043814577244941, [(1, 119), (2, 56)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [81, 1, 0]]
** centroid: 4, normalized-entropy: 0.09501724567107643, [(1, 81), (2, 1)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 54, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [151, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 92, 0]]
** centroid: 7, normalized-entropy: 0.14854949043034832, [(1, 2), (2, 92)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17435292083758866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17435292083758866, 0.1554984774481019] ***
*** finished computation of 7 references, err: [Inf, 0.17435292083758866, 0.1554984774481019] ***
*** center 1: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [35, 58, 0]]
** centroid: 2, normalized-entropy: 0.9554189905653109, [(1, 35), (2, 58)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 21, 0]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(1, 70), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [119, 25, 0]]
** centroid: 4, normalized-entropy: 0.665899177983886, [(1, 119), (2, 25)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 43, 19]]
** centroid: 5, normalized-entropy: 0.8890349038123858, [(2, 43), (3, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 76, 14]]
** centroid: 7, normalized-entropy: 0.6235702082127973, [(2, 76), (3, 14)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19952503873616168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19952503873616168, 0.16297455577422743] ***
*** finished computation of 7 references, err: [Inf, 0.19952503873616168, 0.16297455577422743] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [78, 11, 0]]
** centroid: 1, normalized-entropy: 0.5396084773004918, [(1, 78), (2, 11)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 88, 33]]
** centroid: 2, normalized-entropy: 0.8453509366224364, [(2, 88), (3, 33)]
*** center 3: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [76, 69, 0]]
** centroid: 5, normalized-entropy: 0.9983182035362714, [(1, 76), (2, 69)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [55, 51, 0]]
** centroid: 6, normalized-entropy: 0.9989725613141186, [(1, 55), (2, 51)]
*** center 7: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 11)
[0.9459998921076765, 0.9450018881156605, 0.9409739080397763, 0.9319589050127973, 0.9279818740896585, 0.927028825232418, 0.9260038481595368, 0.9149898401395408, 0.8829997662332992, 0.861061660462858, 0.7870025714337091]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.3, 1) => 0.9459998921076765
finished with 11
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9459998921076765, 0.9450018881156605, 0.9409739080397763, 0.9319589050127973, 0.9279818740896585, 0.927028825232418, 0.9260038481595368, 0.9149898401395408, 0.8829997662332992, 0.861061660462858, 0.7870025714337091]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.3, 1) => 0.9459998921076765
finished with 13
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.3061258003933877] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3061258003933877, 0.2547566849121201] ***
*** finished computation of 3 references, err: [Inf, 0.3061258003933877, 0.2547566849121201] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [313, 70, 0]]
** centroid: 1, normalized-entropy: 0.6860942887759828, [(1, 313), (2, 70)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 118, 33]]
** centroid: 2, normalized-entropy: 0.757498211089806, [(2, 118), (3, 33)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [98, 35, 0]]
** centroid: 3, normalized-entropy: 0.8314743880097292, [(1, 98), (2, 35)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36643135738587035] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36643135738587035, 0.2435061645053618] ***
*** finished computation of 3 references, err: [Inf, 0.36643135738587035, 0.2435061645053618] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [94, 188, 30]]
** centroid: 1, normalized-entropy: 0.811805824211677, [(1, 94), (2, 188), (3, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [198, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [112, 44, 0]]
** centroid: 3, normalized-entropy: 0.8582307926411409, [(1, 112), (2, 44)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30604229242201597] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30604229242201597, 0.23476136321791152] ***
*** finished computation of 3 references, err: [Inf, 0.30604229242201597, 0.23476136321791152] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [277, 38, 0]]
** centroid: 1, normalized-entropy: 0.5311831755095601, [(1, 277), (2, 38)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [138, 48, 0]]
** centroid: 2, normalized-entropy: 0.8238116333123173, [(1, 138), (2, 48)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 133, 33]]
** centroid: 3, normalized-entropy: 0.7195119020668815, [(2, 133), (3, 33)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3981002269084803] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3981002269084803, 0.30081548236377603] ***
*** finished computation of 3 references, err: [Inf, 0.3981002269084803, 0.30081548236377603] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [258, 47, 0]]
** centroid: 1, normalized-entropy: 0.6200021277681225, [(1, 258), (2, 47)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 154, 30]]
** centroid: 2, normalized-entropy: 0.6415410585827175, [(2, 154), (3, 30)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [146, 31, 0]]
** centroid: 3, normalized-entropy: 0.6693317013910446, [(1, 146), (2, 31)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.43481352292015213] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43481352292015213, 0.29764013024775876] ***
*** finished computation of 3 references, err: [Inf, 0.43481352292015213, 0.29764013024775876] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [262, 19, 0]]
** centroid: 1, normalized-entropy: 0.3569620883410681, [(1, 262), (2, 19)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 154, 33]]
** centroid: 2, normalized-entropy: 0.6722948170756378, [(2, 154), (3, 33)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [149, 50, 0]]
** centroid: 3, normalized-entropy: 0.8132632183446623, [(1, 149), (2, 50)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4042521547526121] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4042521547526121, 0.3131208655492834] ***
*** finished computation of 3 references, err: [Inf, 0.4042521547526121, 0.3131208655492834] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [108, 163, 33]]
** centroid: 1, normalized-entropy: 0.858260424114598, [(1, 108), (2, 163), (3, 33)]
*** center 2: selecting labels [1] (freq >= 1) [from [196, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [111, 56, 0]]
** centroid: 3, normalized-entropy: 0.9202789224136475, [(1, 111), (2, 56)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9459998921076765, 0.9450018881156605, 0.9409739080397763, 0.9319589050127973, 0.9279818740896585, 0.927028825232418, 0.9260038481595368, 0.9149898401395408, 0.8829997662332992, 0.861061660462858, 0.8379996763230295, 0.7870025714337091, 0.7830495165824507]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.3, 1) => 0.9459998921076765
finished with 13
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9459998921076765, 0.9450018881156605, 0.9409739080397763, 0.9319589050127973, 0.9279818740896585, 0.927028825232418, 0.9260038481595368, 0.9149898401395408, 0.8829997662332992, 0.861061660462858, 0.8379996763230295, 0.7870025714337091, 0.7830495165824507]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.3, 1) => 0.9459998921076765
finished with 14
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.3888237289608912] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3888237289608912, 0.3020971723295211] ***
*** starting iteration: 2; err: [Inf, 0.3888237289608912, 0.3020971723295211] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3888237289608912, 0.3020971723295211, 0.2985651876984371] ***
*** starting iteration: 3; err: [Inf, 0.3888237289608912, 0.3020971723295211, 0.2985651876984371] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3888237289608912, 0.3020971723295211, 0.2985651876984371, 0.2981438752712665] ***
*** finished computation of 3 references, err: [Inf, 0.3888237289608912, 0.3020971723295211, 0.2985651876984371, 0.2981438752712665] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [142, 89, 0]]
** centroid: 1, normalized-entropy: 0.9616868495300217, [(1, 142), (2, 89)]
*** center 2: selecting labels [1] (freq >= 1) [from [197, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [65, 143, 30]]
** centroid: 3, normalized-entropy: 0.8388831420643554, [(1, 65), (2, 143), (3, 30)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36575410964394706] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36575410964394706, 0.30912534602550507] ***
*** starting iteration: 2; err: [Inf, 0.36575410964394706, 0.30912534602550507] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36575410964394706, 0.30912534602550507, 0.30010586511483345] ***
*** starting iteration: 3; err: [Inf, 0.36575410964394706, 0.30912534602550507, 0.30010586511483345] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36575410964394706, 0.30912534602550507, 0.30010586511483345, 0.29886556490753097] ***
*** finished computation of 3 references, err: [Inf, 0.36575410964394706, 0.30912534602550507, 0.30010586511483345, 0.29886556490753097] ***
*** center 1: selecting labels [1] (freq >= 1) [from [233, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [111, 83, 0]]
** centroid: 2, normalized-entropy: 0.9849209145239498, [(1, 111), (2, 83)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [67, 140, 33]]
** centroid: 3, normalized-entropy: 0.8587509660470909, [(1, 67), (2, 140), (3, 33)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4842328452945001] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4842328452945001, 0.321659616036187] ***
*** starting iteration: 2; err: [Inf, 0.4842328452945001, 0.321659616036187] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4842328452945001, 0.321659616036187, 0.3003493435429535] ***
*** starting iteration: 3; err: [Inf, 0.4842328452945001, 0.321659616036187, 0.3003493435429535] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4842328452945001, 0.321659616036187, 0.3003493435429535, 0.2967699465566668] ***
*** finished computation of 3 references, err: [Inf, 0.4842328452945001, 0.321659616036187, 0.3003493435429535, 0.2967699465566668] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 163, 33]]
** centroid: 1, normalized-entropy: 0.6539562977963581, [(2, 163), (3, 33)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [190, 39, 0]]
** centroid: 2, normalized-entropy: 0.658403560505207, [(1, 190), (2, 39)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [225, 17, 0]]
** centroid: 3, normalized-entropy: 0.3668482111378627, [(1, 225), (2, 17)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9459998921076765, 0.9450018881156605, 0.9409739080397763, 0.9319589050127973, 0.9279818740896585, 0.927028825232418, 0.9260038481595368, 0.9149898401395408, 0.8829997662332992, 0.861061660462858, 0.8409996823170477, 0.8379996763230295, 0.7870025714337091, 0.7830495165824507]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.3, 1) => 0.9459998921076765
finished with 15
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.2449745816687631] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2449745816687631, 0.17162278418040447] ***
*** finished computation of 7 references, err: [Inf, 0.2449745816687631, 0.17162278418040447] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [161, 2, 0]]
** centroid: 1, normalized-entropy: 0.09549123781111848, [(1, 161), (2, 2)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 96, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [173, 26, 0]]
** centroid: 3, normalized-entropy: 0.559227052439017, [(1, 173), (2, 26)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 10, 30]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(2, 10), (3, 30)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 2, 0]]
** centroid: 5, normalized-entropy: 0.18512476010054582, [(1, 69), (2, 2)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 65, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 31, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30516870003095875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30516870003095875, 0.18807292525967892] ***
*** finished computation of 7 references, err: [Inf, 0.30516870003095875, 0.18807292525967892] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [188, 15, 0]]
** centroid: 1, normalized-entropy: 0.38028141940427174, [(1, 188), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [147, 2, 0]]
** centroid: 2, normalized-entropy: 0.10271325407997658, [(1, 147), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [7, 33, 0]]
** centroid: 3, normalized-entropy: 0.6690158350565576, [(1, 7), (2, 33)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 27, 13]]
** centroid: 4, normalized-entropy: 0.9097361225311661, [(2, 27), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 18, 0]]
** centroid: 5, normalized-entropy: 0.7401470427139037, [(1, 68), (2, 18)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 86, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 42, 20]]
** centroid: 7, normalized-entropy: 0.9071657675730821, [(2, 42), (3, 20)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26970887600655097] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26970887600655097, 0.17775548799130983] ***
*** finished computation of 7 references, err: [Inf, 0.26970887600655097, 0.17775548799130983] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [39, 36, 0]]
** centroid: 1, normalized-entropy: 0.998845535995202, [(1, 39), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [229, 4, 0]]
** centroid: 2, normalized-entropy: 0.1252261984130779, [(1, 229), (2, 4)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 21]]
*** center 4: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 37, 12]]
** centroid: 5, normalized-entropy: 0.8030909760146977, [(2, 37), (3, 12)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [83, 66, 0]]
** centroid: 7, normalized-entropy: 0.9905894286537544, [(1, 83), (2, 66)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9459998921076765, 0.9450018881156605, 0.9409739080397763, 0.9319589050127973, 0.9279818740896585, 0.927028825232418, 0.9260038481595368, 0.9250118381854909, 0.9149898401395408, 0.8829997662332992, 0.861061660462858, 0.8409996823170477, 0.8379996763230295, 0.7870025714337091, 0.7830495165824507]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.3, 1) => 0.9459998921076765
finished with 15
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9459998921076765, 0.9450018881156605, 0.9409739080397763, 0.9319589050127973, 0.9279818740896585, 0.927028825232418, 0.9260038481595368, 0.9250118381854909, 0.9149898401395408, 0.8829997662332992, 0.861061660462858, 0.8409996823170477, 0.8379996763230295, 0.7870025714337091, 0.7830495165824507]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.3, 1) => 0.9459998921076765
finished with 15
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9459998921076765, 0.9450018881156605, 0.9409739080397763, 0.9319589050127973, 0.9279818740896585, 0.927028825232418, 0.9260038481595368, 0.9250118381854909, 0.9149898401395408, 0.8829997662332992, 0.861061660462858, 0.8409996823170477, 0.8379996763230295, 0.7870025714337091, 0.7830495165824507]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.3, 1) => 0.9459998921076765
finished with 15
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.18366749056288972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18366749056288972, 0.15920270776911638] ***
*** finished computation of 7 references, err: [Inf, 0.18366749056288972, 0.15920270776911638] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [8, 173, 0]]
** centroid: 1, normalized-entropy: 0.26122332696633593, [(1, 8), (2, 173)]
*** center 2: selecting labels [1] (freq >= 1) [from [157, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [168, 39, 0]]
** centroid: 4, normalized-entropy: 0.698124573139618, [(1, 168), (2, 39)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [124, 53, 0]]
** centroid: 5, normalized-entropy: 0.8805991852252457, [(1, 124), (2, 53)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 72, 48]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(2, 72), (3, 48)]
*** center 7: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2308716721655801] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2308716721655801, 0.1568365772087127] ***
*** finished computation of 7 references, err: [Inf, 0.2308716721655801, 0.1568365772087127] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [101, 4, 0]]
** centroid: 1, normalized-entropy: 0.23348971044772968, [(1, 101), (2, 4)]
*** center 2: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 11, 0]]
** centroid: 3, normalized-entropy: 0.7007495497162061, [(1, 47), (2, 11)]
*** center 4: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [51, 59, 0]]
** centroid: 5, normalized-entropy: 0.9961812375892514, [(1, 51), (2, 59)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 76, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 14, 23]]
** centroid: 7, normalized-entropy: 0.9568886656798214, [(2, 14), (3, 23)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22048263412900268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22048263412900268, 0.17446413191780447] ***
*** finished computation of 7 references, err: [Inf, 0.22048263412900268, 0.17446413191780447] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [60, 1, 0]]
** centroid: 1, normalized-entropy: 0.12068101401352371, [(1, 60), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [43, 7, 0]]
** centroid: 2, normalized-entropy: 0.5842388116428561, [(1, 43), (2, 7)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 59, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 61, 0]]
** centroid: 5, normalized-entropy: 0.898419774686072, [(1, 28), (2, 61)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 34, 21]]
** centroid: 6, normalized-entropy: 0.9593160320543779, [(2, 34), (3, 21)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [60, 22, 0]]
** centroid: 7, normalized-entropy: 0.8390040613676978, [(1, 60), (2, 22)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22015021070837976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22015021070837976, 0.17666646307334305] ***
*** finished computation of 7 references, err: [Inf, 0.22015021070837976, 0.17666646307334305] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 66, 20]]
** centroid: 1, normalized-entropy: 0.7824441294066888, [(2, 66), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [4, 65, 0]]
** centroid: 3, normalized-entropy: 0.3193373865339728, [(1, 4), (2, 65)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [131, 32, 0]]
** centroid: 4, normalized-entropy: 0.7145047603574212, [(1, 131), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [16, 8, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 16), (2, 8)]
*** center 6: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2020476417802274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2020476417802274, 0.14838707965239883] ***
*** finished computation of 7 references, err: [Inf, 0.2020476417802274, 0.14838707965239883] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 27, 0]]
** centroid: 1, normalized-entropy: 0.8531935252328874, [(1, 70), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [43, 38, 0]]
** centroid: 2, normalized-entropy: 0.9972496329704711, [(1, 43), (2, 38)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 62, 23]]
** centroid: 3, normalized-entropy: 0.8423074510400833, [(2, 62), (3, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 46, 0]]
** centroid: 7, normalized-entropy: 0.14854949043034832, [(1, 1), (2, 46)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.239875640142709] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.239875640142709, 0.16817552663199603] ***
*** finished computation of 7 references, err: [Inf, 0.239875640142709, 0.16817552663199603] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [43, 1, 0]]
** centroid: 1, normalized-entropy: 0.1564910629057016, [(1, 43), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [88, 22, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 88), (2, 22)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 46, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [137, 3, 0]]
** centroid: 4, normalized-entropy: 0.14938813931814066, [(1, 137), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [30, 14, 0]]
** centroid: 5, normalized-entropy: 0.9023932827949788, [(1, 30), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 31, 0]]
** centroid: 6, normalized-entropy: 0.43055186701043935, [(1, 3), (2, 31)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 52, 30]]
** centroid: 7, normalized-entropy: 0.9474351361840305, [(2, 52), (3, 30)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19224453755281865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19224453755281865, 0.17025648233946414] ***
*** finished computation of 7 references, err: [Inf, 0.19224453755281865, 0.17025648233946414] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [15, 54, 0]]
** centroid: 1, normalized-entropy: 0.7553754125614286, [(1, 15), (2, 54)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [35, 47, 7]]
** centroid: 2, normalized-entropy: 0.8230316243923385, [(1, 35), (2, 47), (3, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 64, 16]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 64), (3, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [60, 5, 0]]
** centroid: 4, normalized-entropy: 0.3912435636292556, [(1, 60), (2, 5)]
*** center 5: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22059098902903498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22059098902903498, 0.16132001819461583] ***
*** finished computation of 7 references, err: [Inf, 0.22059098902903498, 0.16132001819461583] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 20, 27]]
** centroid: 1, normalized-entropy: 0.9839393951635759, [(2, 20), (3, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [17, 38, 0]]
** centroid: 3, normalized-entropy: 0.8921212805771683, [(1, 17), (2, 38)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [3, 61, 0]]
** centroid: 4, normalized-entropy: 0.2729708579140699, [(1, 3), (2, 61)]
*** center 5: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [10, 51, 0]]
** centroid: 6, normalized-entropy: 0.6436394131461666, [(1, 10), (2, 51)]
*** center 7: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19522453385777772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19522453385777772, 0.1668539981180802] ***
*** finished computation of 7 references, err: [Inf, 0.19522453385777772, 0.1668539981180802] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [1, 60, 19]]
** centroid: 1, normalized-entropy: 0.5570335975371112, [(1, 1), (2, 60), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [29, 2, 0]]
** centroid: 2, normalized-entropy: 0.3451173149449528, [(1, 29), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 59, 5]]
** centroid: 3, normalized-entropy: 0.3955378064564774, [(2, 59), (3, 5)]
*** center 4: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [20, 47, 0]]
** centroid: 6, normalized-entropy: 0.8794587736429037, [(1, 20), (2, 47)]
*** center 7: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2042807696321979] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2042807696321979, 0.154704534066841] ***
*** finished computation of 7 references, err: [Inf, 0.2042807696321979, 0.154704534066841] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 41, 2]]
** centroid: 1, normalized-entropy: 0.2713895875081112, [(2, 41), (3, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [28, 33, 0]]
** centroid: 2, normalized-entropy: 0.995148095654003, [(1, 28), (2, 33)]
*** center 3: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [76, 13, 0]]
** centroid: 4, normalized-entropy: 0.5999108763872215, [(1, 76), (2, 13)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 68, 22]]
** centroid: 5, normalized-entropy: 0.80235344282919, [(2, 68), (3, 22)]
*** center 6: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [65, 4, 0]]
** centroid: 7, normalized-entropy: 0.3193373865339728, [(1, 65), (2, 4)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2046587679265067] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2046587679265067, 0.15281782031524926] ***
*** finished computation of 7 references, err: [Inf, 0.2046587679265067, 0.15281782031524926] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [8, 56, 0]]
** centroid: 1, normalized-entropy: 0.5435644431995963, [(1, 8), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [1, 82, 0]]
** centroid: 2, normalized-entropy: 0.09408443883267342, [(1, 1), (2, 82)]
*** center 3: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [49, 5, 0]]
** centroid: 4, normalized-entropy: 0.44506485705083854, [(1, 49), (2, 5)]
*** center 5: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 29, 25]]
** centroid: 6, normalized-entropy: 0.9960383613659186, [(2, 29), (3, 25)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [71, 2, 0]]
** centroid: 7, normalized-entropy: 0.18116640155354563, [(1, 71), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20292409404739736] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20292409404739736, 0.16903141386993228] ***
*** finished computation of 7 references, err: [Inf, 0.20292409404739736, 0.16903141386993228] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [117, 24, 0]]
** centroid: 2, normalized-entropy: 0.6581912658132184, [(1, 117), (2, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 9, 0]]
** centroid: 3, normalized-entropy: 0.5975977764379984, [(1, 53), (2, 9)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 55, 18]]
** centroid: 4, normalized-entropy: 0.8058049113482652, [(2, 55), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [54, 10, 0]]
** centroid: 5, normalized-entropy: 0.625262405223423, [(1, 54), (2, 10)]
*** center 6: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 72, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2589981891606003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2589981891606003, 0.16408729998581112] ***
*** finished computation of 7 references, err: [Inf, 0.2589981891606003, 0.16408729998581112] ***
*** center 1: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [2, 70, 0]]
** centroid: 2, normalized-entropy: 0.18312206830137262, [(1, 2), (2, 70)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 20, 22]]
** centroid: 3, normalized-entropy: 0.998363672593813, [(2, 20), (3, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [21, 59, 0]]
** centroid: 4, normalized-entropy: 0.8304955225035798, [(1, 21), (2, 59)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [125, 1, 0]]
** centroid: 5, normalized-entropy: 0.06677964109705235, [(1, 125), (2, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [43, 15, 0]]
** centroid: 7, normalized-entropy: 0.8246578332945033, [(1, 43), (2, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21181993818469347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21181993818469347, 0.15633377692475914] ***
*** finished computation of 7 references, err: [Inf, 0.21181993818469347, 0.15633377692475914] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [33, 51, 0]]
** centroid: 1, normalized-entropy: 0.9666186325481027, [(1, 33), (2, 51)]
*** center 2: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 54, 26]]
** centroid: 3, normalized-entropy: 0.9097361225311661, [(2, 54), (3, 26)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [39, 38, 0]]
** centroid: 4, normalized-entropy: 0.9998783322990061, [(1, 39), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [74, 7, 0]]
** centroid: 5, normalized-entropy: 0.42440514472480345, [(1, 74), (2, 7)]
*** center 6: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [53, 17, 0]]
** centroid: 7, normalized-entropy: 0.7997594113291759, [(1, 53), (2, 17)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17690348153281957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17690348153281957, 0.15586010409845039] ***
*** finished computation of 7 references, err: [Inf, 0.17690348153281957, 0.15586010409845039] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [57, 34, 0]]
** centroid: 1, normalized-entropy: 0.9534158774525225, [(1, 57), (2, 34)]
*** center 2: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [32, 36, 0]]
** centroid: 3, normalized-entropy: 0.9975025463691153, [(1, 32), (2, 36)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 61, 22]]
** centroid: 4, normalized-entropy: 0.8342867421739538, [(2, 61), (3, 22)]
*** center 5: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [31, 37, 0]]
** centroid: 6, normalized-entropy: 0.9943766625699823, [(1, 31), (2, 37)]
*** center 7: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21215397808514536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21215397808514536, 0.1748084040749818] ***
*** finished computation of 7 references, err: [Inf, 0.21215397808514536, 0.1748084040749818] ***
*** center 1: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 99, 17]]
** centroid: 2, normalized-entropy: 0.6011432909108727, [(2, 99), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [55, 5, 0]]
** centroid: 3, normalized-entropy: 0.4138168503036336, [(1, 55), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [121, 7, 0]]
** centroid: 4, normalized-entropy: 0.3059848737138347, [(1, 121), (2, 7)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [7, 32, 0]]
** centroid: 5, normalized-entropy: 0.6789538995185759, [(1, 7), (2, 32)]
*** center 6: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [19, 19, 0]]
** centroid: 7, normalized-entropy: 1.0, [(1, 19), (2, 19)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2000746612129733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2000746612129733, 0.15776687034964562] ***
*** finished computation of 7 references, err: [Inf, 0.2000746612129733, 0.15776687034964562] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [50, 21, 0]]
** centroid: 1, normalized-entropy: 0.8760643678555242, [(1, 50), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 35, 0]]
** centroid: 2, normalized-entropy: 0.9524521973646323, [(1, 59), (2, 35)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [66, 7, 0]]
** centroid: 3, normalized-entropy: 0.4558314584408233, [(1, 66), (2, 7)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 102, 20]]
** centroid: 4, normalized-entropy: 0.6436394131461666, [(2, 102), (3, 20)]
*** center 5: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [69, 2, 0]]
** centroid: 6, normalized-entropy: 0.18512476010054582, [(1, 69), (2, 2)]
*** center 7: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20038394270371646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20038394270371646, 0.1526284529804252] ***
*** finished computation of 7 references, err: [Inf, 0.20038394270371646, 0.1526284529804252] ***
*** center 1: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [44, 9, 0]]
** centroid: 2, normalized-entropy: 0.6572729784684466, [(1, 44), (2, 9)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 30, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 60), (2, 30)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 97, 23]]
** centroid: 4, normalized-entropy: 0.7049450065963296, [(2, 97), (3, 23)]
*** center 5: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [33, 28, 0]]
** centroid: 6, normalized-entropy: 0.995148095654003, [(1, 33), (2, 28)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [54, 10, 0]]
** centroid: 7, normalized-entropy: 0.625262405223423, [(1, 54), (2, 10)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30806861124373974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30806861124373974, 0.2010788069665432] ***
*** finished computation of 7 references, err: [Inf, 0.30806861124373974, 0.2010788069665432] ***
*** center 1: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [71, 8, 0]]
** centroid: 3, normalized-entropy: 0.47299536229314826, [(1, 71), (2, 8)]
*** center 4: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 64, 0]]
** centroid: 5, normalized-entropy: 0.9478176755411893, [(1, 37), (2, 64)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 21, 17]]
** centroid: 6, normalized-entropy: 0.9919924034538556, [(2, 21), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [33, 74, 0]]
** centroid: 7, normalized-entropy: 0.891330958407023, [(1, 33), (2, 74)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18557327237352728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18557327237352728, 0.16505003133229912] ***
*** finished computation of 7 references, err: [Inf, 0.18557327237352728, 0.16505003133229912] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [1, 44, 0]]
** centroid: 1, normalized-entropy: 0.1537421803287618, [(1, 1), (2, 44)]
*** center 2: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 8, 29]]
** centroid: 3, normalized-entropy: 0.7531979910695015, [(2, 8), (3, 29)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [107, 13, 0]]
** centroid: 4, normalized-entropy: 0.4948682299355441, [(1, 107), (2, 13)]
*** center 5: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 45, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [31, 58, 0]]
** centroid: 7, normalized-entropy: 0.9325538428833382, [(1, 31), (2, 58)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1811856508515775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1811856508515775, 0.1634293029299006] ***
*** finished computation of 7 references, err: [Inf, 0.1811856508515775, 0.1634293029299006] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 54, 26]]
** centroid: 1, normalized-entropy: 0.9097361225311661, [(2, 54), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [124, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [44, 45, 0]]
** centroid: 3, normalized-entropy: 0.9999089303498087, [(1, 44), (2, 45)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [52, 8, 0]]
** centroid: 4, normalized-entropy: 0.5665095065529052, [(1, 52), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 28, 0]]
** centroid: 5, normalized-entropy: 0.45868581620054033, [(1, 3), (2, 28)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [30, 24, 0]]
** centroid: 6, normalized-entropy: 0.9910760598382222, [(1, 30), (2, 24)]
*** center 7: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23305899553280324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23305899553280324, 0.1730056277681142] ***
*** finished computation of 7 references, err: [Inf, 0.23305899553280324, 0.1730056277681142] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 52, 21]]
** centroid: 1, normalized-entropy: 0.8656939941993219, [(2, 52), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [13, 25, 0]]
** centroid: 2, normalized-entropy: 0.9268190639645774, [(1, 13), (2, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [122, 9, 0]]
** centroid: 3, normalized-entropy: 0.361062084013382, [(1, 122), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [35, 2, 0]]
** centroid: 4, normalized-entropy: 0.30337483608641397, [(1, 35), (2, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 34, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [35, 49, 0]]
** centroid: 7, normalized-entropy: 0.9798687566511527, [(1, 35), (2, 49)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24100915139494464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24100915139494464, 0.1906664515216835] ***
*** finished computation of 7 references, err: [Inf, 0.24100915139494464, 0.1906664515216835] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [44, 24, 0]]
** centroid: 1, normalized-entropy: 0.9366673818775627, [(1, 44), (2, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [25, 100, 24]]
** centroid: 3, normalized-entropy: 0.783940744794483, [(1, 25), (2, 100), (3, 24)]
*** center 4: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [39, 50, 0]]
** centroid: 7, normalized-entropy: 0.9889525767600615, [(1, 39), (2, 50)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1690262852171436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1690262852171436, 0.1502220476232469] ***
*** finished computation of 7 references, err: [Inf, 0.1690262852171436, 0.1502220476232469] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [56, 10, 0]]
** centroid: 1, normalized-entropy: 0.6136190195993708, [(1, 56), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [51, 8, 0]]
** centroid: 2, normalized-entropy: 0.572580465623769, [(1, 51), (2, 8)]
*** center 3: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [12, 58, 0]]
** centroid: 5, normalized-entropy: 0.6609623351442084, [(1, 12), (2, 58)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 64, 0]]
** centroid: 6, normalized-entropy: 0.5387379148665815, [(1, 9), (2, 64)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 37, 30]]
** centroid: 7, normalized-entropy: 0.9921116920021501, [(2, 37), (3, 30)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2733827807493508] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2733827807493508, 0.1939264572970569] ***
*** finished computation of 7 references, err: [Inf, 0.2733827807493508, 0.1939264572970569] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [120, 31, 0]]
** centroid: 1, normalized-entropy: 0.7323984009474936, [(1, 120), (2, 31)]
*** center 2: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 46, 26]]
** centroid: 3, normalized-entropy: 0.943601631299382, [(2, 46), (3, 26)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [48, 7, 0]]
** centroid: 4, normalized-entropy: 0.54991090463341, [(1, 48), (2, 7)]
*** center 5: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 51, 0]]
** centroid: 6, normalized-entropy: 0.13709947889981755, [(1, 1), (2, 51)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [7, 30, 0]]
** centroid: 7, normalized-entropy: 0.699772221773307, [(1, 7), (2, 30)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25754279978014527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25754279978014527, 0.1771316037606448] ***
*** finished computation of 7 references, err: [Inf, 0.25754279978014527, 0.1771316037606448] ***
*** center 1: selecting labels [1] (freq >= 1) [from [126, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [1, 50, 0]]
** centroid: 2, normalized-entropy: 0.13923299905509884, [(1, 1), (2, 50)]
*** center 3: selecting labels [1] (freq >= 1) [from [135, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 10, 26]]
** centroid: 4, normalized-entropy: 0.8524051786494784, [(2, 10), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [14, 40, 0]]
** centroid: 5, normalized-entropy: 0.8256265261578954, [(1, 14), (2, 40)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 36, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [9, 53, 0]]
** centroid: 7, normalized-entropy: 0.5975977764379984, [(1, 9), (2, 53)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2139581448128447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2139581448128447, 0.1702970970114693] ***
*** finished computation of 7 references, err: [Inf, 0.2139581448128447, 0.1702970970114693] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [67, 24, 0]]
** centroid: 1, normalized-entropy: 0.8323322690121193, [(1, 67), (2, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [11, 52, 6]]
** centroid: 4, normalized-entropy: 0.6538059804824295, [(1, 11), (2, 52), (3, 6)]
*** center 5: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [86, 18, 0]]
** centroid: 6, normalized-entropy: 0.6646953053493416, [(1, 86), (2, 18)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 70, 16]]
** centroid: 7, normalized-entropy: 0.6931274153282881, [(2, 70), (3, 16)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22863412037398667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22863412037398667, 0.1627184517206624] ***
*** finished computation of 7 references, err: [Inf, 0.22863412037398667, 0.1627184517206624] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [111, 13, 0]]
** centroid: 1, normalized-entropy: 0.48414891118771425, [(1, 111), (2, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [36, 14, 0]]
** centroid: 3, normalized-entropy: 0.8554508105601307, [(1, 36), (2, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 46, 27]]
** centroid: 5, normalized-entropy: 0.9505668528932193, [(2, 46), (3, 27)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [45, 2, 0]]
** centroid: 6, normalized-entropy: 0.2538784402981617, [(1, 45), (2, 2)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 82, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1699728242047131] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1699728242047131, 0.1565663347877562] ***
*** finished computation of 7 references, err: [Inf, 0.1699728242047131, 0.1565663347877562] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [56, 15, 0]]
** centroid: 1, normalized-entropy: 0.743898745288434, [(1, 56), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [70, 8, 0]]
** centroid: 2, normalized-entropy: 0.4770713062193298, [(1, 70), (2, 8)]
*** center 3: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [2, 78, 0]]
** centroid: 4, normalized-entropy: 0.1686609314966701, [(1, 2), (2, 78)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 1, 0]]
** centroid: 5, normalized-entropy: 0.11058084476988722, [(1, 67), (2, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 90, 23]]
** centroid: 7, normalized-entropy: 0.7289514964064973, [(2, 90), (3, 23)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22776214252971114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22776214252971114, 0.17558340836246497] ***
*** finished computation of 7 references, err: [Inf, 0.22776214252971114, 0.17558340836246497] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [37, 52, 0]]
** centroid: 1, normalized-entropy: 0.9794116346561961, [(1, 37), (2, 52)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [83, 8, 0]]
** centroid: 2, normalized-entropy: 0.4294619720471057, [(1, 83), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 52, 21]]
** centroid: 3, normalized-entropy: 0.8656939941993219, [(2, 52), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [2, 53, 0]]
** centroid: 4, normalized-entropy: 0.22536363912739493, [(1, 2), (2, 53)]
*** center 5: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [54, 2, 0]]
** centroid: 6, normalized-entropy: 0.2222848306856879, [(1, 54), (2, 2)]
*** center 7: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1840483350344002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1840483350344002, 0.1599880610415712] ***
*** finished computation of 7 references, err: [Inf, 0.1840483350344002, 0.1599880610415712] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [89, 21, 0]]
** centroid: 1, normalized-entropy: 0.7033693386668108, [(1, 89), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [9, 31, 0]]
** centroid: 2, normalized-entropy: 0.7691928290130138, [(1, 9), (2, 31)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [77, 1, 0]]
** centroid: 3, normalized-entropy: 0.098959095355743, [(1, 77), (2, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [13, 46, 0]]
** centroid: 5, normalized-entropy: 0.7607859931846075, [(1, 13), (2, 46)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 64, 25]]
** centroid: 6, normalized-entropy: 0.8566727035015875, [(2, 64), (3, 25)]
*** center 7: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 337,3 => 48,1 => 615), Dict(2 => 332,3 => 39,1 => 629))
[ Info: ===== scores for single classifier: {"micro_f1":0.936,"precision":0.936,"recall":0.936,"macro_recall":0.9212154557654203,"macro_f1":0.8570583472687486,"accuracy":0.936,"class_f1":{"2":0.9050445103857567,"3":0.6930693069306931,"1":0.9730612244897959},"class_precision":{"2":0.8918128654970761,"3":0.5645161290322581,"1":1.0},"class_recall":{"2":0.9186746987951807,"3":0.8974358974358975,"1":0.9475357710651828}}
[ Info: ===== scores for 1: {"micro_f1":0.98,"precision":0.98,"recall":0.98,"macro_recall":0.928540954409133,"macro_f1":0.9459608082761092,"accuracy":0.98,"class_f1":{"2":0.9698795180722891,"3":0.8767123287671232,"1":0.9912905779889152},"class_precision":{"2":0.9698795180722891,"3":0.9411764705882353,"1":0.9873817034700315},"class_recall":{"2":0.9698795180722891,"3":0.8205128205128205,"1":0.9952305246422893}}
[ Info: ===== scores for 5: {"micro_f1":0.99,"precision":0.99,"recall":0.99,"macro_recall":0.9602619437842684,"macro_f1":0.9676059291468296,"accuracy":0.99,"class_f1":{"2":0.9849397590361446,"3":0.9210526315789475,"1":0.9968253968253968},"class_precision":{"2":0.9849397590361446,"3":0.9459459459459459,"1":0.9952456418383518},"class_recall":{"2":0.9849397590361446,"3":0.8974358974358975,"1":0.9984101748807631}}
[ Info: ===== scores for 7: {"micro_f1":0.993,"precision":0.993,"recall":0.993,"macro_recall":0.9788340513003874,"macro_f1":0.9863954962863871,"accuracy":0.993,"class_f1":{"2":0.9894736842105263,"3":0.9736842105263158,"1":0.9960285941223194},"class_precision":{"2":0.987987987987988,"3":1.0,"1":0.9952380952380953},"class_recall":{"2":0.9909638554216867,"3":0.9487179487179487,"1":0.9968203497615262}}
[ Info: ===== scores for 9: {"micro_f1":0.993,"precision":0.993,"recall":0.993,"macro_recall":0.9868511181409835,"macro_f1":0.9905723986219342,"accuracy":0.993,"class_f1":{"2":0.9894736842105263,"3":0.9870129870129869,"1":0.9952305246422893},"class_precision":{"2":0.987987987987988,"3":1.0,"1":0.9952305246422893},"class_recall":{"2":0.9909638554216867,"3":0.9743589743589743,"1":0.9952305246422893}}
[ Info: ===== scores for 11: {"micro_f1":0.991,"precision":0.991,"recall":0.991,"macro_recall":0.9853171603703141,"macro_f1":0.981238137268512,"accuracy":0.991,"class_f1":{"2":0.9864661654135338,"3":0.9620253164556962,"1":0.9952229299363058},"class_precision":{"2":0.984984984984985,"3":0.95,"1":0.9968102073365231},"class_recall":{"2":0.9879518072289156,"3":0.9743589743589743,"1":0.9936406995230525}}
(score = 0.977, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.98, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.984, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.984, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.988, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.988, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.985, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.985, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.99, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.99, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.989, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.989, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.993, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.993, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.993,"k":7,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.993,"precision":0.993,"recall":0.993,"macro_recall":0.9788340513003874,"macro_f1":0.9863954962863871,"accuracy":0.993,"class_f1":{"2":0.9894736842105263,"3":0.9736842105263158,"1":0.9960285941223194},"class_precision":{"2":0.987987987987988,"3":1.0,"1":0.9952380952380953},"class_recall":{"2":0.9909638554216867,"3":0.9487179487179487,"1":0.9968203497615262}}
Test Summary: | Pass  Total
AKNC          |    8      8
[604, 1, 2, 1, 1, 4, 4, 1, 5, 1, 3, 3, 3, 3, 3, 12, 8, 10, 4, 9, 9, 12, 2, 5, 1, 16, 5, 6, 2, 3, 6, 1, 14, 8, 5, 5, 63, 1, 10, 1, 19, 1, 4, 17, 8, 19, 4, 5, 53, 38, 22, 2, 7, 6, 3, 21, 18, 8, 2, 22, 16, 2, 89, 4, 38, 27, 47, 42, 13, 18, 21, 5, 2, 2, 9, 35, 18, 16, 1, 10, 14, 12, 27, 3, 12, 14, 66, 1, 2, 24, 49, 49, 11, 15, 31, 16, 13, 6, 9, 63, 16, 10, 30, 8, 15, 12, 14, 14, 18, 42, 2, 76, 50, 33, 4, 6, 52, 5, 10, 2, 7, 11, 7, 11, 4, 29, 5, 44, 18, 14, 20, 11, 40, 186, 17, 16, 37, 9, 7, 17, 2, 10, 59, 95, 1, 21, 6, 53, 5, 32, 53, 6, 18, 14, 18, 2, 3, 12, 17, 17, 42, 17, 16, 22, 11, 22, 16, 1, 280, 63, 50, 23, 27, 40, 132, 37, 38, 4, 37, 13, 18, 10, 85, 14, 63, 50, 20, 5, 106, 35, 31, 820, 30, 15, 6, 9, 30, 153, 59, 8, 19, 12, 79, 5, 10, 1, 18, 32, 10, 15, 6, 10, 13, 28, 27, 11, 53, 33, 42, 30, 22, 33, 27, 799, 81, 81, 10, 12, 40, 24, 28, 24, 6, 13, 7, 173, 62, 48, 26, 8, 156, 11, 19, 39, 16, 14, 3, 14, 177, 14, 44, 13, 26, 26, 27, 67, 5, 16, 15, 12, 8, 8, 18, 77, 140, 52, 9, 2, 45, 34, 27, 11, 54, 72, 22, 24, 47, 14, 12, 22, 150, 4, 53, 6, 19, 20, 13, 3, 8, 12, 42, 75, 57, 38, 6, 101, 4, 6, 133, 41]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6539999999999996, speedup = 0.25953768617844974, eval_ratio = 0.078841)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4239366319444444,"recall":0.42361111111111105,"f1":null,"seconds":0.0004743225872516632,"exhaustive_search_seconds":0.0003589838743209839,"evaluations":548.34375,"distances_sum":1676.3757854165194}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5807291666666667,"recall":0.5807291666666667,"f1":0.5807291666666667,"seconds":0.000322612002491951,"exhaustive_search_seconds":0.0003589838743209839,"evaluations":724.875,"distances_sum":1588.1629815017607}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6944444444444441,"recall":0.6944444444444441,"f1":0.6944444444444441,"seconds":0.0004302971065044403,"exhaustive_search_seconds":0.0003589838743209839,"evaluations":888.0625,"distances_sum":1539.04023922302}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.747395833333333,"recall":0.747395833333333,"f1":0.747395833333333,"seconds":0.0005206670612096786,"exhaustive_search_seconds":0.0003589838743209839,"evaluations":1017.484375,"distances_sum":1524.2827125347007}
KCenters.DeloneInvIndex> reached performance {"precision":0.8072916666666659,"recall":0.8072916666666659,"f1":0.8072916666666659,"seconds":0.0006427876651287079,"exhaustive_search_seconds":0.0003589838743209839,"evaluations":1159.296875,"distances_sum":1504.3989723782786}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7769999999999995, speedup = 0.6049052579771964, eval_ratio = 0.10413299999999999)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
