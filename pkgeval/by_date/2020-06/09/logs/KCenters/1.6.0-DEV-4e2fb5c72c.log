Julia Version 1.6.0-DEV.203
Commit 4e2fb5c72c (2020-06-09 12:13 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Reexport ──────────────────── v0.2.0
  Installed Missings ──────────────────── v0.4.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed TableTraits ───────────────── v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed DataStructures ────────────── v0.17.17
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed Tables ────────────────────── v1.0.4
  Installed Parsers ───────────────────── v1.0.5
  Installed OrderedCollections ────────── v1.2.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed InvertedIndices ───────────── v1.0.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed Compat ────────────────────── v3.11.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed MLDataUtils ───────────────── v0.5.1
  Installed JSON ──────────────────────── v0.21.0
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataFrames ────────────────── v0.20.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.11.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.5
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_HMjYTX/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_HMjYTX/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.11.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.5
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.932025450070699
[ Info: 0.8307796732584636
[ Info: 0.5538560461501281
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32982491600016756
mean(cdnet.distances) = 0.3574342511842648
mean(crand.distances) = 0.3573741374909878
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7294921875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7294921875,"f1":0.8333319458319467,"seconds":6.172806024551392e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":7.890625,"distances_sum":2115.3829979461866}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4404296875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4404296875,"f1":null,"seconds":3.887340426445007e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":6.0390625,"distances_sum":1194.0382817651891}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7294921875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7294921875,"f1":0.8333319458319467,"seconds":6.172806024551392e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":7.890625,"distances_sum":2115.3829979461866}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8946288086913095,"seconds":6.18956983089447e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.1171875,"distances_sum":2503.453016072233}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8827703546453554,"seconds":5.9138983488082886e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.1484375,"distances_sum":2398.2210089289906}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9418498168498174,"seconds":6.28642737865448e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.6640625,"distances_sum":2834.7417259333397}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9461939102564108,"seconds":6.414949893951416e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.703125,"distances_sum":2857.686568426668}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7978515625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.7978515625,"f1":0.8819087162837171,"seconds":6.0051679611206055e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.109375,"distances_sum":2400.505877166749}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9461939102564108,"seconds":6.414949893951416e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.703125,"distances_sum":2857.686568426668}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9535199175824178,"seconds":6.504356861114502e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.78125,"distances_sum":2879.803313038311}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9551167582417588,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.75,"distances_sum":2891.8528452535843}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9653731684981688,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.8046875,"distances_sum":2982.4988052488075}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9641254578754583,"seconds":6.254762411117554e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.84375,"distances_sum":2970.0859972415196}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9653731684981688,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.8046875,"distances_sum":2982.4988052488075}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9653731684981688,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.8046875,"distances_sum":2982.4988052488075}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.556640625,"f1":0.6967258436008439,"seconds":4.550442099571228e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.171875,"distances_sum":1339.3020023465936}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.392578125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.392578125,"f1":null,"seconds":3.6656856536865234e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.015625,"distances_sum":952.5542414791917}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.693359375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.693359375,"f1":0.8078223859473868,"seconds":4.973262548446655e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.078125,"distances_sum":1673.446770593695}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.693359375,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.693359375,"f1":0.8078223859473868,"seconds":4.973262548446655e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.078125,"distances_sum":1673.446770593695}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8464894480519489,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.3828125,"distances_sum":1855.8148240017908}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8687042124542133,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.5,"distances_sum":1990.0650041934502}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9063072344322352,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.625,"distances_sum":2171.6885791121726}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.705078125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.705078125,"f1":0.8165724900099909,"seconds":4.988163709640503e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.90625,"distances_sum":1728.8405781538886}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8359375,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.8359375,"f1":0.9063072344322352,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.625,"distances_sum":2171.6885791121726}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9069342116217124,"seconds":5.6158751249313354e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.5703125,"distances_sum":2216.4115655909754}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9685325091575093,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9375,"distances_sum":2627.112676281793}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9337511446886455,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.7421875,"distances_sum":2376.214995942046}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9356856684981691,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.7265625,"distances_sum":2443.058208071314}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.912425595238096,"seconds":5.3960829973220825e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.6875,"distances_sum":2224.2206724164516}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9685325091575093,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9375,"distances_sum":2627.112676281793}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9685325091575093,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9375,"distances_sum":2627.112676281793}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.447265625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.447265625,"f1":null,"seconds":4.306435585021973e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.890625,"distances_sum":1009.7797106764164}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.447265625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.447265625,"f1":null,"seconds":4.306435585021973e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.890625,"distances_sum":1009.7797106764164}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6103515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.6103515625,"f1":0.7467199467199473,"seconds":4.537403583526611e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.4765625,"distances_sum":1447.5976005421674}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6962890625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6962890625,"f1":0.8123000263625272,"seconds":5.017966032028198e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.03125,"distances_sum":1680.1158649823922}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6123046875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.6123046875,"f1":0.745639603452104,"seconds":4.461035132408142e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.390625,"distances_sum":1473.1370009360878}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6962890625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6962890625,"f1":0.8123000263625272,"seconds":5.017966032028198e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.03125,"distances_sum":1680.1158649823922}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9352220695970703,"seconds":6.023794412612915e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.765625,"distances_sum":2378.861666689644}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9519860347985353,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.84375,"distances_sum":2554.044634022665}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7138671875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.7138671875,"f1":0.8251696220446229,"seconds":4.986301064491272e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.0234375,"distances_sum":1773.856291495402}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.736328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.736328125,"f1":0.8395791708291717,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.296875,"distances_sum":1784.056148017736}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9411114926739934,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.7890625,"distances_sum":2406.932892219461}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9519860347985353,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.84375,"distances_sum":2554.044634022665}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9169921875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9519860347985353,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.84375,"distances_sum":2554.044634022665}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5625,"f1":null,"seconds":4.4871121644973755e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.0,"distances_sum":1225.9053361377025}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.857435273060274,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.375,"distances_sum":1798.6424798216342}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.857435273060274,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.375,"distances_sum":1798.6424798216342}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9560668498168503,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8359375,"distances_sum":2441.206924737857}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9560668498168503,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8359375,"distances_sum":2441.206924737857}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.963747710622711,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.890625,"distances_sum":2450.4162968971473}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9591002747252751,"seconds":6.198883056640625e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.875,"distances_sum":2428.3116759365075}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.963747710622711,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.890625,"distances_sum":2450.4162968971473}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.963747710622711,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.890625,"distances_sum":2450.4162968971473}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.216796875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.216796875,"f1":null,"seconds":3.7103891372680664e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":6.0859375,"distances_sum":480.21652944494076}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8729780636030643,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.15625,"distances_sum":1954.7956451273456}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7919921875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7919921875,"f1":0.8729780636030643,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.15625,"distances_sum":1954.7956451273456}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9563472985347992,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.7890625,"distances_sum":2404.609022005937}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9532425907425912,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.703125,"distances_sum":2428.4529490503833}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9485176282051287,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.78125,"distances_sum":2348.0444140324626}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9563472985347992,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.7890625,"distances_sum":2404.609022005937}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":12,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9740327380952385,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.859375,"distances_sum":2549.722780417919}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9729739010989013,"seconds":5.912035703659058e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.8671875,"distances_sum":2543.5339797843476}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9627690018315023,"seconds":6.070360541343689e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.7578125,"distances_sum":2483.7350219082955}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":10,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.976247710622711,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.890625,"distances_sum":2548.6473666693128}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":10,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.976247710622711,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.890625,"distances_sum":2548.6473666693128}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":10,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.976247710622711,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.890625,"distances_sum":2548.6473666693128}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1875,"f1":null,"seconds":3.3918768167495728e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":5.3203125,"distances_sum":433.2964799151325}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1875,"f1":null,"seconds":3.3918768167495728e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":5.3203125,"distances_sum":433.2964799151325}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.8491362803862811,"seconds":5.163252353668213e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.2578125,"distances_sum":1897.625937105327}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.748046875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.748046875,"f1":0.8491362803862811,"seconds":5.163252353668213e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.2578125,"distances_sum":1897.625937105327}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9276156135531144,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.875,"distances_sum":2441.681067165912}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9571657509157514,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.921875,"distances_sum":2673.600295532309}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9426282051282057,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9296875,"distances_sum":2557.282137353664}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9571657509157514,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.921875,"distances_sum":2673.600295532309}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9718005952380956,"seconds":6.6123902797698975e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.984375,"distances_sum":2774.8873881042896}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9702266483516484,"seconds":6.537884473800659e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.953125,"distances_sum":2793.327992918213}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9750000000000002,"seconds":6.614252924919128e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.96875,"distances_sum":2830.420615587289}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9616128663003667,"seconds":6.280839443206787e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.90625,"distances_sum":2729.211450837256}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9618704212454218,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.890625,"distances_sum":2738.778454977844}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9750000000000002,"seconds":6.614252924919128e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.96875,"distances_sum":2830.420615587289}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9750000000000002,"seconds":6.614252924919128e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.96875,"distances_sum":2830.420615587289}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7392578125,"f1":0.8432900432900441,"seconds":5.165114998817444e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":7.953125,"distances_sum":1845.0508336230696}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7392578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7392578125,"f1":0.8432900432900441,"seconds":5.165114998817444e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":7.953125,"distances_sum":1845.0508336230696}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9277415293040298,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.7265625,"distances_sum":2402.092432827257}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9621165293040297,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.8984375,"distances_sum":2679.1401869436145}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8585539460539471,"seconds":4.783272743225098e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.1171875,"distances_sum":1897.477541548721}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.847708021145522,"seconds":4.673376679420471e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.1171875,"distances_sum":1839.9327736117928}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.843530948218449,"seconds":4.898756742477417e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.0703125,"distances_sum":1809.893563114315}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9621165293040297,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.8984375,"distances_sum":2679.1401869436145}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9715602106227108,"seconds":6.372109055519104e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.9375,"distances_sum":2750.742799634534}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9724759615384619,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.9609375,"distances_sum":2762.6041019228765}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9728994963369966,"seconds":6.6515058279037476e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.9453125,"distances_sum":2759.2622193290376}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9724759615384619,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.9609375,"distances_sum":2762.6041019228765}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9724759615384619,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.9609375,"distances_sum":2762.6041019228765}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.419921875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.419921875,"f1":null,"seconds":3.3974647521972656e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":5.71875,"distances_sum":944.2960597167348}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.419921875,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.419921875,"f1":null,"seconds":3.3974647521972656e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":5.71875,"distances_sum":944.2960597167348}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7177734375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7177734375,"f1":0.8291297244422253,"seconds":6.910413503646851e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.8828125,"distances_sum":1891.575399648093}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.42578125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.42578125,"f1":null,"seconds":3.4440308809280396e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":5.5390625,"distances_sum":977.3743585435743}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.778913274225775,"seconds":6.4391642808914185e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.1015625,"distances_sum":1671.268612134358}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7177734375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7177734375,"f1":0.8291297244422253,"seconds":6.910413503646851e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.8828125,"distances_sum":1891.575399648093}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9175309065934075,"seconds":5.276873707771301e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.6015625,"distances_sum":2483.390881078225}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.806640625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.806640625,"f1":0.8879094863469873,"seconds":5.09992241859436e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.5234375,"distances_sum":2247.8592404458464}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9500801282051287,"seconds":5.4836273193359375e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.7109375,"distances_sum":2660.778052975965}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9477564102564108,"seconds":5.414709448814392e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.7890625,"distances_sum":2635.685928618748}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.877410089910091,"seconds":5.027279257774353e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.421875,"distances_sum":2210.877589519199}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9500801282051287,"seconds":5.4836273193359375e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.7109375,"distances_sum":2660.778052975965}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9130859375,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9500801282051287,"seconds":5.4836273193359375e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.7109375,"distances_sum":2660.778052975965}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4306640625, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.4306640625,"f1":0.575203268953269,"seconds":3.6582350730895996e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":6.5234375,"distances_sum":881.2387290751856}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2060546875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2060546875,"f1":null,"seconds":3.1050294637680054e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":6.5,"distances_sum":456.8324487438163}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.19921875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.19921875,"f1":null,"seconds":3.3937394618988037e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":6.3203125,"distances_sum":482.6894126589419}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4306640625,"state":{"ssize":1,"bsize":2},"perf":{"precision":1.0,"recall":0.4306640625,"f1":0.575203268953269,"seconds":3.6582350730895996e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":6.5234375,"distances_sum":881.2387290751856}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.583984375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.583984375,"f1":0.7227496461871468,"seconds":4.343688488006592e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":7.328125,"distances_sum":1317.3112347954705}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8525391275391283,"seconds":5.159527063369751e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":7.9375,"distances_sum":1897.05835314138}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5830078125, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.5830078125,"f1":0.7196425102675108,"seconds":4.129484295845032e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":7.3671875,"distances_sum":1270.632702937835}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7898469585969593,"seconds":4.423782229423523e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":7.7109375,"distances_sum":1592.8546193051989}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4462890625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4462890625,"f1":null,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":6.6953125,"distances_sum":956.6040716598386}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8625463078588088,"seconds":4.870817065238953e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.078125,"distances_sum":1930.910905813251}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.740234375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.740234375,"f1":0.8414141414141423,"seconds":5.027279257774353e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":7.9375,"distances_sum":1852.8192739935407}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8625463078588088,"seconds":4.870817065238953e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.078125,"distances_sum":1930.910905813251}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9471497252747256,"seconds":5.6438148021698e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.78125,"distances_sum":2616.5343410805162}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9540979853479857,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.84375,"distances_sum":2646.6562276257064}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9293243215118221,"seconds":7.57165253162384e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.6875,"distances_sum":2469.5715373202725}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9671531593406597,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.90625,"distances_sum":2736.7087997714693}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9331559065934073,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.6953125,"distances_sum":2455.427147897185}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9332131410256417,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.6953125,"distances_sum":2474.215200840002}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9671531593406597,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.90625,"distances_sum":2736.7087997714693}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9671531593406597,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.90625,"distances_sum":2736.7087997714693}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.43359375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.43359375,"f1":null,"seconds":3.840774297714233e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":6.8203125,"distances_sum":858.5477385648429}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8552692099567107,"seconds":4.872679710388184e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.1796875,"distances_sum":1848.4467327675995}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8543808621933631,"seconds":5.012378096580505e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.203125,"distances_sum":1827.3627368410207}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7578125,"f1":0.8552692099567107,"seconds":4.872679710388184e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.1796875,"distances_sum":1848.4467327675995}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8577672327672337,"seconds":5.066394805908203e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.265625,"distances_sum":1849.0991754216307}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9333390567765574,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.953125,"distances_sum":2369.834584988944}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9290641650016657,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8828125,"distances_sum":2369.5056938688117}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9623740842490848,"seconds":8.068978786468506e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.9375,"distances_sum":2605.07913438652}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8704332126207136,"seconds":5.163252353668213e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.28125,"distances_sum":1932.8029877688164}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8076171875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8076171875,"f1":0.8875749250749259,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.6875,"distances_sum":2042.3854069651852}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9623740842490848,"seconds":8.068978786468506e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.9375,"distances_sum":2605.07913438652}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9653331043956048,"seconds":6.0927122831344604e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.953125,"distances_sum":2630.8461042123813}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9743532509157512,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":9.0,"distances_sum":2691.552988112997}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":9,"bsize":11}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9819196428571433,"seconds":6.163492798805237e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.9921875,"distances_sum":2745.5973860185077}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9773809523809527,"seconds":8.162111043930054e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.96875,"distances_sum":2715.1526718963364}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9710794413919417,"seconds":6.079673767089844e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.9921875,"distances_sum":2662.7956386289425}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9775297619047623,"seconds":6.143003702163696e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.9921875,"distances_sum":2714.719492122495}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":9,"bsize":11},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9819196428571433,"seconds":6.163492798805237e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.9921875,"distances_sum":2745.5973860185077}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":9,"bsize":11},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9819196428571433,"seconds":6.163492798805237e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.9921875,"distances_sum":2745.5973860185077}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.435546875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.435546875,"f1":null,"seconds":3.904104232788086e-6,"exhaustive_search_seconds":3.296881914138794e-6,"evaluations":6.3984375,"distances_sum":940.7566790726797}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2255859375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2255859375,"f1":null,"seconds":3.382563591003418e-6,"exhaustive_search_seconds":3.296881914138794e-6,"evaluations":6.25,"distances_sum":583.9244553874388}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.435546875,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.435546875,"f1":null,"seconds":3.904104232788086e-6,"exhaustive_search_seconds":3.296881914138794e-6,"evaluations":6.3984375,"distances_sum":940.7566790726797}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5859375,"f1":0.720265498390499,"seconds":4.302710294723511e-6,"exhaustive_search_seconds":3.296881914138794e-6,"evaluations":6.9453125,"distances_sum":1332.0725143830336}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.59375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.59375,"f1":0.72953105921856,"seconds":4.3548643589019775e-6,"exhaustive_search_seconds":3.296881914138794e-6,"evaluations":7.0625,"distances_sum":1346.3242268526408}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.59375,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.59375,"f1":0.72953105921856,"seconds":4.3548643589019775e-6,"exhaustive_search_seconds":3.296881914138794e-6,"evaluations":7.0625,"distances_sum":1346.3242268526408}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9323946886446891,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":3.296881914138794e-6,"evaluations":8.7265625,"distances_sum":2470.124665425581}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9319482600732607,"seconds":9.210780262947083e-6,"exhaustive_search_seconds":3.296881914138794e-6,"evaluations":8.7265625,"distances_sum":2484.232901780294}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7314453125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7314453125,"f1":0.8370972777222786,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":3.296881914138794e-6,"evaluations":7.828125,"distances_sum":1813.681233736669}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9282285422910432,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":3.296881914138794e-6,"evaluations":8.65625,"distances_sum":2471.3531977618672}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8798828125,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9319482600732607,"seconds":9.210780262947083e-6,"exhaustive_search_seconds":3.296881914138794e-6,"evaluations":8.7265625,"distances_sum":2484.232901780294}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8798828125,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9319482600732607,"seconds":9.210780262947083e-6,"exhaustive_search_seconds":3.296881914138794e-6,"evaluations":8.7265625,"distances_sum":2484.232901780294}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.228515625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.228515625,"f1":null,"seconds":3.4812837839126587e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":5.3046875,"distances_sum":621.6603025663576}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.228515625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.228515625,"f1":null,"seconds":3.4812837839126587e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":5.3046875,"distances_sum":621.6603025663576}}, n: 9
mean(cfft.distances) = 0.3346911816105088
mean(cdnet.distances) = 0.6220592972020967
mean(crand.distances) = 0.6107697021815587
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8666666666666667
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8466666666666667
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.9
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9022222222222221
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9288888888888889
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9444444444444445
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8555555555555555
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8888888888888888
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9244444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9466666666666667
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8977777777777778
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9222222222222222
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9288888888888889
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9266666666666667
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8488888888888888
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8799999999999999
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.86
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9222222222222222
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9222222222222222
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.888888888888889
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.888888888888889
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8866666666666667
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8933333333333332
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8466666666666667
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.888888888888889
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9044444444444443
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8711111111111111
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.6151462227106095] ***
*** center 1: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 9, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.39236275371522067] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39236275371522067, 0.30723648942033716] ***
*** starting iteration: 2; err: [Inf, 0.39236275371522067, 0.30723648942033716] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39236275371522067, 0.30723648942033716, 0.30175936985313445] ***
*** starting iteration: 3; err: [Inf, 0.39236275371522067, 0.30723648942033716, 0.30175936985313445] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39236275371522067, 0.30723648942033716, 0.30175936985313445, 0.29897123549480337] ***
*** starting iteration: 4; err: [Inf, 0.39236275371522067, 0.30723648942033716, 0.30175936985313445, 0.29897123549480337] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39236275371522067, 0.30723648942033716, 0.30175936985313445, 0.29897123549480337, 0.2981650901975127] ***
*** finished computation of 3 references, err: [Inf, 0.39236275371522067, 0.30723648942033716, 0.30175936985313445, 0.29897123549480337, 0.2981650901975127] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [248, 17, 0]]
** centroid: 1, normalized-entropy: 0.34370683897055854, [(1, 248), (2, 17)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 191, 27]]
** centroid: 2, normalized-entropy: 0.5403363031565518, [(2, 191), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [155, 28, 0]]
** centroid: 3, normalized-entropy: 0.6173106544855739, [(1, 155), (2, 28)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4063538672958223] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4063538672958223, 0.31342201299457134] ***
*** starting iteration: 2; err: [Inf, 0.4063538672958223, 0.31342201299457134] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4063538672958223, 0.31342201299457134, 0.2984013309383924] ***
*** starting iteration: 3; err: [Inf, 0.4063538672958223, 0.31342201299457134, 0.2984013309383924] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4063538672958223, 0.31342201299457134, 0.2984013309383924, 0.29460281708642194] ***
*** starting iteration: 4; err: [Inf, 0.4063538672958223, 0.31342201299457134, 0.2984013309383924, 0.29460281708642194] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4063538672958223, 0.31342201299457134, 0.2984013309383924, 0.29460281708642194, 0.29286977984402135] ***
*** starting iteration: 5; err: [Inf, 0.4063538672958223, 0.31342201299457134, 0.2984013309383924, 0.29460281708642194, 0.29286977984402135] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4063538672958223, 0.31342201299457134, 0.2984013309383924, 0.29460281708642194, 0.29286977984402135, 0.29225481867041814] ***
*** finished computation of 3 references, err: [Inf, 0.4063538672958223, 0.31342201299457134, 0.2984013309383924, 0.29460281708642194, 0.29286977984402135, 0.29225481867041814] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [168, 43, 0]]
** centroid: 1, normalized-entropy: 0.7294465276691664, [(1, 168), (2, 43)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 192, 17]]
** centroid: 2, normalized-entropy: 0.40688224959419506, [(2, 192), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [240, 7, 0]]
** centroid: 3, normalized-entropy: 0.18599788988246022, [(1, 240), (2, 7)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3136788794444106] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3136788794444106, 0.30234882252840983] ***
*** starting iteration: 2; err: [Inf, 0.3136788794444106, 0.30234882252840983] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3136788794444106, 0.30234882252840983, 0.3012477490545503] ***
*** starting iteration: 3; err: [Inf, 0.3136788794444106, 0.30234882252840983, 0.3012477490545503] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3136788794444106, 0.30234882252840983, 0.3012477490545503, 0.3011360009112905] ***
*** finished computation of 3 references, err: [Inf, 0.3136788794444106, 0.30234882252840983, 0.3012477490545503, 0.3011360009112905] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [59, 176, 26]]
** centroid: 1, normalized-entropy: 0.7569613020941685, [(1, 59), (2, 176), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [141, 70, 0]]
** centroid: 2, normalized-entropy: 0.9167079475963912, [(1, 141), (2, 70)]
*** center 3: selecting labels [1] (freq >= 1) [from [195, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.264263153369133] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.264263153369133, 0.24275144649803773] ***
*** starting iteration: 2; err: [Inf, 0.264263153369133, 0.24275144649803773] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.264263153369133, 0.24275144649803773, 0.2409251380869811] ***
*** starting iteration: 3; err: [Inf, 0.264263153369133, 0.24275144649803773, 0.2409251380869811] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.264263153369133, 0.24275144649803773, 0.2409251380869811, 0.24020124315186306] ***
*** finished computation of 3 references, err: [Inf, 0.264263153369133, 0.24275144649803773, 0.2409251380869811, 0.24020124315186306] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [146, 52, 0]]
** centroid: 1, normalized-entropy: 0.8306836355350677, [(1, 146), (2, 52)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [27, 184, 27]]
** centroid: 2, normalized-entropy: 0.6305779774572338, [(1, 27), (2, 184), (3, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [230, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33121980454582817] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33121980454582817, 0.241692582388287] ***
*** starting iteration: 2; err: [Inf, 0.33121980454582817, 0.241692582388287] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33121980454582817, 0.241692582388287, 0.23945698539434612] ***
*** starting iteration: 3; err: [Inf, 0.33121980454582817, 0.241692582388287, 0.23945698539434612] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33121980454582817, 0.241692582388287, 0.23945698539434612, 0.2387176355824567] ***
*** finished computation of 3 references, err: [Inf, 0.33121980454582817, 0.241692582388287, 0.23945698539434612, 0.2387176355824567] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [91, 163, 17]]
** centroid: 1, normalized-entropy: 0.7699753110491953, [(1, 91), (2, 163), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [129, 79, 0]]
** centroid: 2, normalized-entropy: 0.9579060880661358, [(1, 129), (2, 79)]
*** center 3: selecting labels [1] (freq >= 2) [from [188, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2831728006608371] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2831728006608371, 0.2469810680535132] ***
*** starting iteration: 2; err: [Inf, 0.2831728006608371, 0.2469810680535132] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2831728006608371, 0.2469810680535132, 0.2434402919797481] ***
*** starting iteration: 3; err: [Inf, 0.2831728006608371, 0.2469810680535132, 0.2434402919797481] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2831728006608371, 0.2469810680535132, 0.2434402919797481, 0.24237573801957327] ***
*** finished computation of 3 references, err: [Inf, 0.2831728006608371, 0.2469810680535132, 0.2434402919797481, 0.24237573801957327] ***
*** center 1: selecting labels [1] (freq >= 2) [from [194, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [86, 132, 22]]
** centroid: 2, normalized-entropy: 0.8334252243930074, [(1, 86), (2, 132), (3, 22)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [115, 114, 4]]
** centroid: 3, normalized-entropy: 0.69909874626363, [(1, 115), (2, 114), (3, 4)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19643086218484887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19643086218484887, 0.1573161665845226] ***
*** starting iteration: 2; err: [Inf, 0.19643086218484887, 0.1573161665845226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19643086218484887, 0.1573161665845226, 0.15176806223995468] ***
*** starting iteration: 3; err: [Inf, 0.19643086218484887, 0.1573161665845226, 0.15176806223995468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19643086218484887, 0.1573161665845226, 0.15176806223995468, 0.1497491298511893] ***
*** finished computation of 7 references, err: [Inf, 0.19643086218484887, 0.1573161665845226, 0.15176806223995468, 0.1497491298511893] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [93, 6, 0]]
** centroid: 1, normalized-entropy: 0.32984607020714635, [(1, 93), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [36, 69, 0]]
** centroid: 2, normalized-entropy: 0.927526588431676, [(1, 36), (2, 69)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [116, 1, 0]]
** centroid: 3, normalized-entropy: 0.07099894663640989, [(1, 116), (2, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 87, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 58, 27]]
** centroid: 6, normalized-entropy: 0.9018043446575508, [(2, 58), (3, 27)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [61, 15, 0]]
** centroid: 7, normalized-entropy: 0.7166336117927455, [(1, 61), (2, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19859764404103405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19859764404103405, 0.1461639170516757] ***
*** starting iteration: 2; err: [Inf, 0.19859764404103405, 0.1461639170516757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19859764404103405, 0.1461639170516757, 0.14230222622633562] ***
*** starting iteration: 3; err: [Inf, 0.19859764404103405, 0.1461639170516757, 0.14230222622633562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19859764404103405, 0.1461639170516757, 0.14230222622633562, 0.14116075899831762] ***
*** finished computation of 7 references, err: [Inf, 0.19859764404103405, 0.1461639170516757, 0.14230222622633562, 0.14116075899831762] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [59, 20, 0]]
** centroid: 1, normalized-entropy: 0.8162554088088008, [(1, 59), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [68, 35, 0]]
** centroid: 2, normalized-entropy: 0.9246327718618892, [(1, 68), (2, 35)]
*** center 3: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [69, 16, 0]]
** centroid: 4, normalized-entropy: 0.6977652006354232, [(1, 69), (2, 16)]
*** center 5: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 75, 12]]
** centroid: 6, normalized-entropy: 0.5787946246321198, [(2, 75), (3, 12)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 96, 5]]
** centroid: 7, normalized-entropy: 0.2842902892501332, [(2, 96), (3, 5)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1865213731913988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1865213731913988, 0.16399868376095078] ***
*** starting iteration: 2; err: [Inf, 0.1865213731913988, 0.16399868376095078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1865213731913988, 0.16399868376095078, 0.15496596088982012] ***
*** starting iteration: 3; err: [Inf, 0.1865213731913988, 0.16399868376095078, 0.15496596088982012] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1865213731913988, 0.16399868376095078, 0.15496596088982012, 0.1499435802708021] ***
*** finished computation of 7 references, err: [Inf, 0.1865213731913988, 0.16399868376095078, 0.15496596088982012, 0.1499435802708021] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [17, 69, 0]]
** centroid: 1, normalized-entropy: 0.7172524777375696, [(1, 17), (2, 69)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 84, 26]]
** centroid: 2, normalized-entropy: 0.7889406572966208, [(2, 84), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [100, 37, 0]]
** centroid: 3, normalized-entropy: 0.8415693566412304, [(1, 100), (2, 37)]
*** center 4: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 56, 0]]
** centroid: 7, normalized-entropy: 0.4090731390438265, [(1, 5), (2, 56)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2993326413220373] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2993326413220373, 0.24073315811562707] ***
*** starting iteration: 2; err: [Inf, 0.2993326413220373, 0.24073315811562707] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2993326413220373, 0.24073315811562707, 0.23323147913030554] ***
*** starting iteration: 3; err: [Inf, 0.2993326413220373, 0.24073315811562707, 0.23323147913030554] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2993326413220373, 0.24073315811562707, 0.23323147913030554, 0.23175406423320566] ***
*** finished computation of 3 references, err: [Inf, 0.2993326413220373, 0.24073315811562707, 0.23323147913030554, 0.23175406423320566] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [251, 14, 0]]
** centroid: 1, normalized-entropy: 0.2982998666186738, [(1, 251), (2, 14)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 185, 17]]
** centroid: 2, normalized-entropy: 0.4166647575202427, [(2, 185), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [157, 43, 0]]
** centroid: 3, normalized-entropy: 0.7509319796338464, [(1, 157), (2, 43)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.312283361792799] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.312283361792799, 0.24895527776794277] ***
*** starting iteration: 2; err: [Inf, 0.312283361792799, 0.24895527776794277] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.312283361792799, 0.24895527776794277, 0.23657589135105084] ***
*** starting iteration: 3; err: [Inf, 0.312283361792799, 0.24895527776794277, 0.23657589135105084] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.312283361792799, 0.24895527776794277, 0.23657589135105084, 0.23322034674952144] ***
*** finished computation of 3 references, err: [Inf, 0.312283361792799, 0.24895527776794277, 0.23657589135105084, 0.23322034674952144] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [265, 21, 0]]
** centroid: 1, normalized-entropy: 0.3785827651603727, [(1, 265), (2, 21)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 175, 26]]
** centroid: 2, normalized-entropy: 0.5556617546499439, [(2, 175), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [130, 50, 0]]
** centroid: 3, normalized-entropy: 0.8524051786494784, [(1, 130), (2, 50)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2690679956641462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2690679956641462, 0.20932678664914212] ***
*** starting iteration: 2; err: [Inf, 0.2690679956641462, 0.20932678664914212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2690679956641462, 0.20932678664914212, 0.19398261654727697] ***
*** starting iteration: 3; err: [Inf, 0.2690679956641462, 0.20932678664914212, 0.19398261654727697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2690679956641462, 0.20932678664914212, 0.19398261654727697, 0.19094081965202392] ***
*** starting iteration: 4; err: [Inf, 0.2690679956641462, 0.20932678664914212, 0.19398261654727697, 0.19094081965202392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2690679956641462, 0.20932678664914212, 0.19398261654727697, 0.19094081965202392, 0.19003368928530687] ***
*** finished computation of 7 references, err: [Inf, 0.2690679956641462, 0.20932678664914212, 0.19398261654727697, 0.19094081965202392, 0.19003368928530687] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [132, 1, 0]]
** centroid: 1, normalized-entropy: 0.06385368546122076, [(1, 132), (2, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [106, 4, 0]]
** centroid: 3, normalized-entropy: 0.22536363912739493, [(1, 106), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [69, 9, 0]]
** centroid: 4, normalized-entropy: 0.5159469300074472, [(1, 69), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 95, 0]]
** centroid: 5, normalized-entropy: 0.19745300438456026, [(1, 3), (2, 95)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 44, 27]]
** centroid: 6, normalized-entropy: 0.9582407282588409, [(2, 44), (3, 27)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 83, 0]]
** centroid: 7, normalized-entropy: 0.21832103023746746, [(1, 3), (2, 83)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28667005643700955] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28667005643700955, 0.21972441048859834] ***
*** starting iteration: 2; err: [Inf, 0.28667005643700955, 0.21972441048859834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28667005643700955, 0.21972441048859834, 0.20826433155814122] ***
*** starting iteration: 3; err: [Inf, 0.28667005643700955, 0.21972441048859834, 0.20826433155814122] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28667005643700955, 0.21972441048859834, 0.20826433155814122, 0.19909516256651666] ***
*** starting iteration: 4; err: [Inf, 0.28667005643700955, 0.21972441048859834, 0.20826433155814122, 0.19909516256651666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28667005643700955, 0.21972441048859834, 0.20826433155814122, 0.19909516256651666, 0.19406384448458006] ***
*** starting iteration: 5; err: [Inf, 0.28667005643700955, 0.21972441048859834, 0.20826433155814122, 0.19909516256651666, 0.19406384448458006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28667005643700955, 0.21972441048859834, 0.20826433155814122, 0.19909516256651666, 0.19406384448458006, 0.19183035263221995] ***
*** starting iteration: 6; err: [Inf, 0.28667005643700955, 0.21972441048859834, 0.20826433155814122, 0.19909516256651666, 0.19406384448458006, 0.19183035263221995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28667005643700955, 0.21972441048859834, 0.20826433155814122, 0.19909516256651666, 0.19406384448458006, 0.19183035263221995, 0.1904542461355989] ***
*** starting iteration: 7; err: [Inf, 0.28667005643700955, 0.21972441048859834, 0.20826433155814122, 0.19909516256651666, 0.19406384448458006, 0.19183035263221995, 0.1904542461355989] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28667005643700955, 0.21972441048859834, 0.20826433155814122, 0.19909516256651666, 0.19406384448458006, 0.19183035263221995, 0.1904542461355989, 0.1893489484883275] ***
*** starting iteration: 8; err: [Inf, 0.28667005643700955, 0.21972441048859834, 0.20826433155814122, 0.19909516256651666, 0.19406384448458006, 0.19183035263221995, 0.1904542461355989, 0.1893489484883275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28667005643700955, 0.21972441048859834, 0.20826433155814122, 0.19909516256651666, 0.19406384448458006, 0.19183035263221995, 0.1904542461355989, 0.1893489484883275, 0.18766046800780511] ***
*** starting iteration: 9; err: [Inf, 0.28667005643700955, 0.21972441048859834, 0.20826433155814122, 0.19909516256651666, 0.19406384448458006, 0.19183035263221995, 0.1904542461355989, 0.1893489484883275, 0.18766046800780511] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28667005643700955, 0.21972441048859834, 0.20826433155814122, 0.19909516256651666, 0.19406384448458006, 0.19183035263221995, 0.1904542461355989, 0.1893489484883275, 0.18766046800780511, 0.18624051903846436] ***
*** starting iteration: 10; err: [Inf, 0.28667005643700955, 0.21972441048859834, 0.20826433155814122, 0.19909516256651666, 0.19406384448458006, 0.19183035263221995, 0.1904542461355989, 0.1893489484883275, 0.18766046800780511, 0.18624051903846436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28667005643700955, 0.21972441048859834, 0.20826433155814122, 0.19909516256651666, 0.19406384448458006, 0.19183035263221995, 0.1904542461355989, 0.1893489484883275, 0.18766046800780511, 0.18624051903846436, 0.18588337146661718] ***
*** finished computation of 7 references, err: [Inf, 0.28667005643700955, 0.21972441048859834, 0.20826433155814122, 0.19909516256651666, 0.19406384448458006, 0.19183035263221995, 0.1904542461355989, 0.1893489484883275, 0.18766046800780511, 0.18624051903846436, 0.18588337146661718] ***
*** center 1: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 103, 1]]
** centroid: 3, normalized-entropy: 0.07823246525771242, [(2, 103), (3, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [70, 18, 0]]
** centroid: 4, normalized-entropy: 0.7309263775906009, [(1, 70), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [129, 8, 0]]
** centroid: 5, normalized-entropy: 0.32103707602914155, [(1, 129), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [45, 37, 0]]
** centroid: 6, normalized-entropy: 0.9931231770192241, [(1, 45), (2, 37)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 76, 16]]
** centroid: 7, normalized-entropy: 0.6665783579949205, [(2, 76), (3, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28647813473645223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28647813473645223, 0.22381999776342595] ***
*** starting iteration: 2; err: [Inf, 0.28647813473645223, 0.22381999776342595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28647813473645223, 0.22381999776342595, 0.20515345557937692] ***
*** starting iteration: 3; err: [Inf, 0.28647813473645223, 0.22381999776342595, 0.20515345557937692] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28647813473645223, 0.22381999776342595, 0.20515345557937692, 0.19808003429157278] ***
*** starting iteration: 4; err: [Inf, 0.28647813473645223, 0.22381999776342595, 0.20515345557937692, 0.19808003429157278] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28647813473645223, 0.22381999776342595, 0.20515345557937692, 0.19808003429157278, 0.195007161000629] ***
*** starting iteration: 5; err: [Inf, 0.28647813473645223, 0.22381999776342595, 0.20515345557937692, 0.19808003429157278, 0.195007161000629] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28647813473645223, 0.22381999776342595, 0.20515345557937692, 0.19808003429157278, 0.195007161000629, 0.19215322434036494] ***
*** starting iteration: 6; err: [Inf, 0.28647813473645223, 0.22381999776342595, 0.20515345557937692, 0.19808003429157278, 0.195007161000629, 0.19215322434036494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28647813473645223, 0.22381999776342595, 0.20515345557937692, 0.19808003429157278, 0.195007161000629, 0.19215322434036494, 0.19000824642921987] ***
*** starting iteration: 7; err: [Inf, 0.28647813473645223, 0.22381999776342595, 0.20515345557937692, 0.19808003429157278, 0.195007161000629, 0.19215322434036494, 0.19000824642921987] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28647813473645223, 0.22381999776342595, 0.20515345557937692, 0.19808003429157278, 0.195007161000629, 0.19215322434036494, 0.19000824642921987, 0.18917370771129113] ***
*** finished computation of 7 references, err: [Inf, 0.28647813473645223, 0.22381999776342595, 0.20515345557937692, 0.19808003429157278, 0.195007161000629, 0.19215322434036494, 0.19000824642921987, 0.18917370771129113] ***
*** center 1: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 71, 26]]
** centroid: 2, normalized-entropy: 0.8386398715015523, [(2, 71), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [96, 5, 0]]
** centroid: 3, normalized-entropy: 0.2842902892501332, [(1, 96), (2, 5)]
*** center 4: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [6, 88, 0]]
** centroid: 6, normalized-entropy: 0.3424637724817958, [(1, 6), (2, 88)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [4, 82, 0]]
** centroid: 7, normalized-entropy: 0.2713895875081112, [(1, 4), (2, 82)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2386384169744501] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2386384169744501, 0.19887464613214628] ***
*** starting iteration: 2; err: [Inf, 0.2386384169744501, 0.19887464613214628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2386384169744501, 0.19887464613214628, 0.1941553068587797] ***
*** starting iteration: 3; err: [Inf, 0.2386384169744501, 0.19887464613214628, 0.1941553068587797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2386384169744501, 0.19887464613214628, 0.1941553068587797, 0.19197561032370897] ***
*** starting iteration: 4; err: [Inf, 0.2386384169744501, 0.19887464613214628, 0.1941553068587797, 0.19197561032370897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2386384169744501, 0.19887464613214628, 0.1941553068587797, 0.19197561032370897, 0.19069809733971102] ***
*** starting iteration: 5; err: [Inf, 0.2386384169744501, 0.19887464613214628, 0.1941553068587797, 0.19197561032370897, 0.19069809733971102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2386384169744501, 0.19887464613214628, 0.1941553068587797, 0.19197561032370897, 0.19069809733971102, 0.18978393461776186] ***
*** finished computation of 7 references, err: [Inf, 0.2386384169744501, 0.19887464613214628, 0.1941553068587797, 0.19197561032370897, 0.19069809733971102, 0.18978393461776186] ***
*** center 1: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 69, 27]]
** centroid: 2, normalized-entropy: 0.8571484374283717, [(2, 69), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [51, 2, 0]]
** centroid: 3, normalized-entropy: 0.23181305002459035, [(1, 51), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [40, 70, 0]]
** centroid: 4, normalized-entropy: 0.9456603046006401, [(1, 40), (2, 70)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [87, 13, 0]]
** centroid: 5, normalized-entropy: 0.557438185027989, [(1, 87), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [8, 82, 0]]
** centroid: 6, normalized-entropy: 0.43275015878875417, [(1, 8), (2, 82)]
*** center 7: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25229668896784935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25229668896784935, 0.19838551471548818] ***
*** starting iteration: 2; err: [Inf, 0.25229668896784935, 0.19838551471548818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25229668896784935, 0.19838551471548818, 0.1944733825833376] ***
*** starting iteration: 3; err: [Inf, 0.25229668896784935, 0.19838551471548818, 0.1944733825833376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25229668896784935, 0.19838551471548818, 0.1944733825833376, 0.19397645523824703] ***
*** finished computation of 7 references, err: [Inf, 0.25229668896784935, 0.19838551471548818, 0.1944733825833376, 0.19397645523824703] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [104, 2, 0]]
** centroid: 1, normalized-entropy: 0.13503620280212753, [(1, 104), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 42, 17]]
** centroid: 2, normalized-entropy: 0.8663006754980497, [(2, 42), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [124, 6, 0]]
** centroid: 3, normalized-entropy: 0.269828447703074, [(1, 124), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [95, 8, 0]]
** centroid: 4, normalized-entropy: 0.3939152573634121, [(1, 95), (2, 8)]
*** center 5: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 91, 0]]
** centroid: 6, normalized-entropy: 0.25186284771956524, [(1, 4), (2, 91)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 93, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2342132267638527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2342132267638527, 0.19110045252881688] ***
*** starting iteration: 2; err: [Inf, 0.2342132267638527, 0.19110045252881688] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2342132267638527, 0.19110045252881688, 0.18779807612984098] ***
*** starting iteration: 3; err: [Inf, 0.2342132267638527, 0.19110045252881688, 0.18779807612984098] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2342132267638527, 0.19110045252881688, 0.18779807612984098, 0.1879017143388107] ***
*** finished computation of 7 references, err: [Inf, 0.2342132267638527, 0.19110045252881688, 0.18779807612984098, 0.1879017143388107] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [5, 100, 0]]
** centroid: 1, normalized-entropy: 0.2761954276479391, [(1, 5), (2, 100)]
*** center 2: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 35, 0]]
** centroid: 3, normalized-entropy: 0.9464220508835531, [(1, 61), (2, 35)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [68, 27, 0]]
** centroid: 4, normalized-entropy: 0.8611247055579295, [(1, 68), (2, 27)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 84, 26]]
** centroid: 5, normalized-entropy: 0.7889406572966208, [(2, 84), (3, 26)]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2632842048500628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2632842048500628, 0.21911414126116033] ***
*** finished computation of 7 references, err: [Inf, 0.2632842048500628, 0.21911414126116033] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 24, 27]]
** centroid: 1, normalized-entropy: 0.9975025463691153, [(2, 24), (3, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [132, 8, 0]]
** centroid: 2, normalized-entropy: 0.3159971329784246, [(1, 132), (2, 8)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [108, 45, 0]]
** centroid: 3, normalized-entropy: 0.8739810481273581, [(1, 108), (2, 45)]
*** center 4: selecting labels [1] (freq >= 2) [from [134, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [3, 92, 0]]
** centroid: 5, normalized-entropy: 0.2022494245476988, [(1, 3), (2, 92)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [26, 40, 0]]
** centroid: 6, normalized-entropy: 0.9672947789468944, [(1, 26), (2, 40)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 27, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23406450129972808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23406450129972808, 0.20679082243662814] ***
*** finished computation of 7 references, err: [Inf, 0.23406450129972808, 0.20679082243662814] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [151, 3, 0]]
** centroid: 1, normalized-entropy: 0.13851379303093797, [(1, 151), (2, 3)]
*** center 2: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 69, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [7, 111, 0]]
** centroid: 4, normalized-entropy: 0.3247477475036634, [(1, 7), (2, 111)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 12, 0]]
** centroid: 5, normalized-entropy: 0.5916727785823274, [(1, 72), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [49, 5, 0]]
** centroid: 6, normalized-entropy: 0.44506485705083854, [(1, 49), (2, 5)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 42, 17]]
** centroid: 7, normalized-entropy: 0.8663006754980497, [(2, 42), (3, 17)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3063291561227108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3063291561227108, 0.2115245634791856] ***
*** finished computation of 7 references, err: [Inf, 0.3063291561227108, 0.2115245634791856] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 84, 26]]
** centroid: 1, normalized-entropy: 0.7889406572966208, [(2, 84), (3, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [150, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [82, 76, 0]]
** centroid: 4, normalized-entropy: 0.9989595114657399, [(1, 82), (2, 76)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 50, 0]]
** centroid: 5, normalized-entropy: 0.9929326437363045, [(1, 41), (2, 50)]
*** center 6: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [13, 36, 0]]
** centroid: 7, normalized-entropy: 0.834648285181383, [(1, 13), (2, 36)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18564427449639226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18564427449639226, 0.15263690720645287] ***
*** finished computation of 7 references, err: [Inf, 0.18564427449639226, 0.15263690720645287] ***
*** center 1: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [80, 18, 0]]
** centroid: 2, normalized-entropy: 0.6880476235340797, [(1, 80), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 47, 27]]
** centroid: 3, normalized-entropy: 0.9466474387740499, [(2, 47), (3, 27)]
*** center 4: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [39, 83, 0]]
** centroid: 5, normalized-entropy: 0.9040245561086042, [(1, 39), (2, 83)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 88, 0]]
** centroid: 6, normalized-entropy: 0.2580186686648155, [(1, 4), (2, 88)]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19538702867852561] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19538702867852561, 0.15782959877081898] ***
*** finished computation of 7 references, err: [Inf, 0.19538702867852561, 0.15782959877081898] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [132, 4, 0]]
** centroid: 1, normalized-entropy: 0.1914332548141934, [(1, 132), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 17]]
** centroid: 2, normalized-entropy: 0.8351164948421137, [(2, 47), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [95, 5, 0]]
** centroid: 3, normalized-entropy: 0.2863969571159561, [(1, 95), (2, 5)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 92, 0]]
** centroid: 5, normalized-entropy: 0.3685567775377064, [(1, 7), (2, 92)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [9, 93, 0]]
** centroid: 7, normalized-entropy: 0.43055186701043935, [(1, 9), (2, 93)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21308607974325655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21308607974325655, 0.14916477827746225] ***
*** finished computation of 7 references, err: [Inf, 0.21308607974325655, 0.14916477827746225] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [43, 73, 0]]
** centroid: 1, normalized-entropy: 0.9512001567617836, [(1, 43), (2, 73)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [87, 4, 0]]
** centroid: 2, normalized-entropy: 0.26014536394771426, [(1, 87), (2, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 64, 26]]
** centroid: 4, normalized-entropy: 0.8672816222000259, [(2, 64), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 24, 0]]
** centroid: 5, normalized-entropy: 0.8721617883411698, [(1, 58), (2, 24)]
*** center 6: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 81, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3078943600181725] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3078943600181725, 0.2495476478003189] ***
*** finished computation of 3 references, err: [Inf, 0.3078943600181725, 0.2495476478003189] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [133, 177, 27]]
** centroid: 1, normalized-entropy: 0.8259284274556549, [(1, 133), (2, 177), (3, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [110, 59, 0]]
** centroid: 2, normalized-entropy: 0.9332728777019407, [(1, 110), (2, 59)]
*** center 3: selecting labels [1] (freq >= 2) [from [160, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4006878409766476] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4006878409766476, 0.23852489606897603] ***
*** finished computation of 3 references, err: [Inf, 0.4006878409766476, 0.23852489606897603] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [115, 124, 13]]
** centroid: 1, normalized-entropy: 0.7826962154538196, [(1, 115), (2, 124), (3, 13)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [114, 118, 4]]
** centroid: 2, normalized-entropy: 0.6983066837010659, [(1, 114), (2, 118), (3, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [179, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3324027545177664] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3324027545177664, 0.2342280196263336] ***
*** finished computation of 3 references, err: [Inf, 0.3324027545177664, 0.2342280196263336] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [266, 33, 0]]
** centroid: 1, normalized-entropy: 0.5010246381374179, [(1, 266), (2, 33)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 161, 26]]
** centroid: 2, normalized-entropy: 0.581712374068804, [(2, 161), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [129, 52, 0]]
** centroid: 3, normalized-entropy: 0.8651984766249922, [(1, 129), (2, 52)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.42377604047352496] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42377604047352496, 0.3221453346099492] ***
*** starting iteration: 2; err: [Inf, 0.42377604047352496, 0.3221453346099492] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42377604047352496, 0.3221453346099492, 0.2959637532623166] ***
*** starting iteration: 3; err: [Inf, 0.42377604047352496, 0.3221453346099492, 0.2959637532623166] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42377604047352496, 0.3221453346099492, 0.2959637532623166, 0.29074588530856343] ***
*** finished computation of 3 references, err: [Inf, 0.42377604047352496, 0.3221453346099492, 0.2959637532623166, 0.29074588530856343] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [177, 54, 0]]
** centroid: 1, normalized-entropy: 0.7845191388986644, [(1, 177), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [224, 2, 0]]
** centroid: 2, normalized-entropy: 0.07306611931384553, [(1, 224), (2, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [2, 180, 27]]
** centroid: 3, normalized-entropy: 0.3982481092680518, [(1, 2), (2, 180), (3, 27)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3889240567869824] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3889240567869824, 0.2987370492535821] ***
*** starting iteration: 2; err: [Inf, 0.3889240567869824, 0.2987370492535821] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3889240567869824, 0.2987370492535821, 0.29364825314891035] ***
*** starting iteration: 3; err: [Inf, 0.3889240567869824, 0.2987370492535821, 0.29364825314891035] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3889240567869824, 0.2987370492535821, 0.29364825314891035, 0.2933210028179068] ***
*** finished computation of 3 references, err: [Inf, 0.3889240567869824, 0.2987370492535821, 0.29364825314891035, 0.2933210028179068] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [243, 19, 0]]
** centroid: 1, normalized-entropy: 0.3752548292793095, [(1, 243), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [165, 25, 0]]
** centroid: 2, normalized-entropy: 0.5617526078313283, [(1, 165), (2, 25)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 198, 17]]
** centroid: 3, normalized-entropy: 0.3988929469056534, [(2, 198), (3, 17)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3555795041707413] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3555795041707413, 0.30427500907180904] ***
*** starting iteration: 2; err: [Inf, 0.3555795041707413, 0.30427500907180904] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3555795041707413, 0.30427500907180904, 0.2940301854691204] ***
*** starting iteration: 3; err: [Inf, 0.3555795041707413, 0.30427500907180904, 0.2940301854691204] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3555795041707413, 0.30427500907180904, 0.2940301854691204, 0.29292356578641565] ***
*** finished computation of 3 references, err: [Inf, 0.3555795041707413, 0.30427500907180904, 0.2940301854691204, 0.29292356578641565] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [155, 50, 0]]
** centroid: 1, normalized-entropy: 0.8014698931335286, [(1, 155), (2, 50)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 175, 26]]
** centroid: 2, normalized-entropy: 0.5556617546499439, [(2, 175), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [240, 21, 0]]
** centroid: 3, normalized-entropy: 0.40379715049939235, [(1, 240), (2, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34578718362213884] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34578718362213884, 0.31439777514016304] ***
*** starting iteration: 2; err: [Inf, 0.34578718362213884, 0.31439777514016304] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34578718362213884, 0.31439777514016304, 0.30927627986190737] ***
*** starting iteration: 3; err: [Inf, 0.34578718362213884, 0.31439777514016304, 0.30927627986190737] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34578718362213884, 0.31439777514016304, 0.30927627986190737, 0.30834529676975253] ***
*** finished computation of 3 references, err: [Inf, 0.34578718362213884, 0.31439777514016304, 0.30927627986190737, 0.30834529676975253] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [91, 168, 27]]
** centroid: 1, normalized-entropy: 0.8189349085245874, [(1, 91), (2, 168), (3, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [134, 68, 0]]
** centroid: 2, normalized-entropy: 0.9215608652945444, [(1, 134), (2, 68)]
*** center 3: selecting labels [1] (freq >= 2) [from [178, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.43868553402904853] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43868553402904853, 0.29909277327688244] ***
*** starting iteration: 2; err: [Inf, 0.43868553402904853, 0.29909277327688244] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43868553402904853, 0.29909277327688244, 0.2949539100195559] ***
*** starting iteration: 3; err: [Inf, 0.43868553402904853, 0.29909277327688244, 0.2949539100195559] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43868553402904853, 0.29909277327688244, 0.2949539100195559, 0.29367616643355615] ***
*** finished computation of 3 references, err: [Inf, 0.43868553402904853, 0.29909277327688244, 0.2949539100195559, 0.29367616643355615] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [243, 13, 0]]
** centroid: 1, normalized-entropy: 0.28970642690609794, [(1, 243), (2, 13)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 202, 17]]
** centroid: 2, normalized-entropy: 0.393756978244469, [(2, 202), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [165, 27, 0]]
** centroid: 3, normalized-entropy: 0.5858732928619204, [(1, 165), (2, 27)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3602140904187799] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3602140904187799, 0.2930689819755432] ***
*** starting iteration: 2; err: [Inf, 0.3602140904187799, 0.2930689819755432] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3602140904187799, 0.2930689819755432, 0.2927426726178921] ***
*** finished computation of 3 references, err: [Inf, 0.3602140904187799, 0.2930689819755432, 0.2927426726178921] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [247, 23, 0]]
** centroid: 1, normalized-entropy: 0.4201910370851767, [(1, 247), (2, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [148, 49, 0]]
** centroid: 2, normalized-entropy: 0.8092605480110476, [(1, 148), (2, 49)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 174, 26]]
** centroid: 3, normalized-entropy: 0.557438185027989, [(2, 174), (3, 26)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2419814850237254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2419814850237254, 0.18623825194322513] ***
*** finished computation of 7 references, err: [Inf, 0.2419814850237254, 0.18623825194322513] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [216, 9, 0]]
** centroid: 1, normalized-entropy: 0.24229218908241482, [(1, 216), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [8, 65, 0]]
** centroid: 2, normalized-entropy: 0.4986751363204345, [(1, 8), (2, 65)]
*** center 3: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [29, 61, 0]]
** centroid: 4, normalized-entropy: 0.9067816913292788, [(1, 29), (2, 61)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 99, 27]]
** centroid: 5, normalized-entropy: 0.7495952572594798, [(2, 99), (3, 27)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [28, 2, 0]]
** centroid: 6, normalized-entropy: 0.3533593350214213, [(1, 28), (2, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21341855941142054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21341855941142054, 0.1573736306330164] ***
*** finished computation of 7 references, err: [Inf, 0.21341855941142054, 0.1573736306330164] ***
*** center 1: selecting labels [1] (freq >= 2) [from [120, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [22, 95, 0]]
** centroid: 2, normalized-entropy: 0.6973409725623739, [(1, 22), (2, 95)]
*** center 3: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [82, 13, 0]]
** centroid: 5, normalized-entropy: 0.5759084429149787, [(1, 82), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [23, 38, 0]]
** centroid: 6, normalized-entropy: 0.9559312637896479, [(1, 23), (2, 38)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 95, 17]]
** centroid: 7, normalized-entropy: 0.6142910730156771, [(2, 95), (3, 17)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2765980234538586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2765980234538586, 0.18966313337835985] ***
*** finished computation of 7 references, err: [Inf, 0.2765980234538586, 0.18966313337835985] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [96, 107, 0]]
** centroid: 1, normalized-entropy: 0.9978809043075717, [(1, 96), (2, 107)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [16, 12, 0]]
** centroid: 2, normalized-entropy: 0.9852281360342514, [(1, 16), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 4, 0]]
** centroid: 4, normalized-entropy: 0.2974722489192896, [(1, 72), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [2, 69, 0]]
** centroid: 5, normalized-entropy: 0.18512476010054582, [(1, 2), (2, 69)]
*** center 6: selecting labels [1] (freq >= 2) [from [188, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 54, 26]]
** centroid: 7, normalized-entropy: 0.9097361225311661, [(2, 54), (3, 26)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19091556026731749] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19091556026731749, 0.16495045928519453] ***
*** finished computation of 7 references, err: [Inf, 0.19091556026731749, 0.16495045928519453] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 8, 27]]
** centroid: 1, normalized-entropy: 0.775512658133148, [(2, 8), (3, 27)]
*** center 2: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [132, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [103, 63, 0]]
** centroid: 5, normalized-entropy: 0.9577009405013451, [(1, 103), (2, 63)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [44, 2, 0]]
** centroid: 6, normalized-entropy: 0.2580186686648155, [(1, 44), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 88, 0]]
** centroid: 7, normalized-entropy: 0.4138168503036336, [(1, 8), (2, 88)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27043417682438375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27043417682438375, 0.17306668169913755] ***
*** finished computation of 7 references, err: [Inf, 0.27043417682438375, 0.17306668169913755] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [18, 43, 0]]
** centroid: 1, normalized-entropy: 0.8751957887407251, [(1, 18), (2, 43)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 61, 17]]
** centroid: 2, normalized-entropy: 0.7564041945982506, [(2, 61), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [20, 79, 0]]
** centroid: 3, normalized-entropy: 0.7259501452943735, [(1, 20), (2, 79)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 42, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [169, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [148, 10, 0]]
** centroid: 6, normalized-entropy: 0.340373285759646, [(1, 148), (2, 10)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [53, 7, 0]]
** centroid: 7, normalized-entropy: 0.5197027865043053, [(1, 53), (2, 7)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22186830943112432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22186830943112432, 0.16517651299883176] ***
*** finished computation of 7 references, err: [Inf, 0.22186830943112432, 0.16517651299883176] ***
*** center 1: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [122, 4, 0]]
** centroid: 2, normalized-entropy: 0.20307392998664567, [(1, 122), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 34, 23]]
** centroid: 3, normalized-entropy: 0.9729661265889024, [(2, 34), (3, 23)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 91, 3]]
** centroid: 4, normalized-entropy: 0.2039058755048202, [(2, 91), (3, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 65, 0]]
** centroid: 5, normalized-entropy: 0.8914467590654126, [(1, 29), (2, 65)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [91, 51, 0]]
** centroid: 6, normalized-entropy: 0.9419794807819524, [(1, 91), (2, 51)]
*** center 7: selecting labels [1] (freq >= 2) [from [97, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20390344131318433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20390344131318433, 0.16379433287050318] ***
*** starting iteration: 2; err: [Inf, 0.20390344131318433, 0.16379433287050318] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20390344131318433, 0.16379433287050318, 0.15498830066216332] ***
*** starting iteration: 3; err: [Inf, 0.20390344131318433, 0.16379433287050318, 0.15498830066216332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20390344131318433, 0.16379433287050318, 0.15498830066216332, 0.15110766575545878] ***
*** starting iteration: 4; err: [Inf, 0.20390344131318433, 0.16379433287050318, 0.15498830066216332, 0.15110766575545878] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20390344131318433, 0.16379433287050318, 0.15498830066216332, 0.15110766575545878, 0.14983211205321345] ***
*** starting iteration: 5; err: [Inf, 0.20390344131318433, 0.16379433287050318, 0.15498830066216332, 0.15110766575545878, 0.14983211205321345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20390344131318433, 0.16379433287050318, 0.15498830066216332, 0.15110766575545878, 0.14983211205321345, 0.14927755602895543] ***
*** finished computation of 7 references, err: [Inf, 0.20390344131318433, 0.16379433287050318, 0.15498830066216332, 0.15110766575545878, 0.14983211205321345, 0.14927755602895543] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [108, 14, 0]]
** centroid: 1, normalized-entropy: 0.5140912790181233, [(1, 108), (2, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 84, 27]]
** centroid: 3, normalized-entropy: 0.8003922080453356, [(2, 84), (3, 27)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 34, 0]]
** centroid: 4, normalized-entropy: 0.9736680645496202, [(1, 50), (2, 34)]
*** center 5: selecting labels [2] (freq >= 2) [from [1, 83, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [48, 21, 0]]
** centroid: 6, normalized-entropy: 0.8865408928220899, [(1, 48), (2, 21)]
*** center 7: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20854450801786767] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20854450801786767, 0.15506599952342517] ***
*** starting iteration: 2; err: [Inf, 0.20854450801786767, 0.15506599952342517] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20854450801786767, 0.15506599952342517, 0.15172126897117835] ***
*** starting iteration: 3; err: [Inf, 0.20854450801786767, 0.15506599952342517, 0.15172126897117835] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20854450801786767, 0.15506599952342517, 0.15172126897117835, 0.1503776657615678] ***
*** starting iteration: 4; err: [Inf, 0.20854450801786767, 0.15506599952342517, 0.15172126897117835, 0.1503776657615678] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20854450801786767, 0.15506599952342517, 0.15172126897117835, 0.1503776657615678, 0.14977235007036974] ***
*** finished computation of 7 references, err: [Inf, 0.20854450801786767, 0.15506599952342517, 0.15172126897117835, 0.1503776657615678, 0.14977235007036974] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [77, 16, 0]]
** centroid: 1, normalized-entropy: 0.6623570516079519, [(1, 77), (2, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [138, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [6, 57, 0]]
** centroid: 3, normalized-entropy: 0.45371633918694493, [(1, 6), (2, 57)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 70, 12]]
** centroid: 4, normalized-entropy: 0.6006085754131871, [(2, 70), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 33, 0]]
** centroid: 5, normalized-entropy: 0.925015873745592, [(1, 64), (2, 33)]
*** center 6: selecting labels [1] (freq >= 2) [from [123, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 65, 5]]
** centroid: 7, normalized-entropy: 0.3712323266408756, [(2, 65), (3, 5)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24277012089247826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24277012089247826, 0.16636377215843418] ***
*** starting iteration: 2; err: [Inf, 0.24277012089247826, 0.16636377215843418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24277012089247826, 0.16636377215843418, 0.15345432180101456] ***
*** starting iteration: 3; err: [Inf, 0.24277012089247826, 0.16636377215843418, 0.15345432180101456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24277012089247826, 0.16636377215843418, 0.15345432180101456, 0.1481811918550055] ***
*** starting iteration: 4; err: [Inf, 0.24277012089247826, 0.16636377215843418, 0.15345432180101456, 0.1481811918550055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24277012089247826, 0.16636377215843418, 0.15345432180101456, 0.1481811918550055, 0.14597568484204732] ***
*** starting iteration: 5; err: [Inf, 0.24277012089247826, 0.16636377215843418, 0.15345432180101456, 0.1481811918550055, 0.14597568484204732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24277012089247826, 0.16636377215843418, 0.15345432180101456, 0.1481811918550055, 0.14597568484204732, 0.14511805551609713] ***
*** finished computation of 7 references, err: [Inf, 0.24277012089247826, 0.16636377215843418, 0.15345432180101456, 0.1481811918550055, 0.14597568484204732, 0.14511805551609713] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 76, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 37, 0]]
** centroid: 2, normalized-entropy: 0.9878853530449176, [(1, 48), (2, 37)]
*** center 3: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [83, 35, 0]]
** centroid: 4, normalized-entropy: 0.8771076392358363, [(1, 83), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 11, 0]]
** centroid: 5, normalized-entropy: 0.5822463050121238, [(1, 68), (2, 11)]
*** center 6: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 87, 26]]
** centroid: 7, normalized-entropy: 0.7781655393133492, [(2, 87), (3, 26)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.44153510563931353] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44153510563931353, 0.2414248530380987] ***
*** starting iteration: 2; err: [Inf, 0.44153510563931353, 0.2414248530380987] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44153510563931353, 0.2414248530380987, 0.2402055838764799] ***
*** starting iteration: 3; err: [Inf, 0.44153510563931353, 0.2414248530380987, 0.2402055838764799] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44153510563931353, 0.2414248530380987, 0.2402055838764799, 0.23971047737270695] ***
*** finished computation of 3 references, err: [Inf, 0.44153510563931353, 0.2414248530380987, 0.2402055838764799, 0.23971047737270695] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [16, 184, 27]]
** centroid: 1, normalized-entropy: 0.5556327182831602, [(1, 16), (2, 184), (3, 27)]
*** center 2: selecting labels [1] (freq >= 2) [from [242, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [145, 52, 0]]
** centroid: 3, normalized-entropy: 0.8326625636416438, [(1, 145), (2, 52)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 16)
[0.9469948990907074, 0.9460058861256466, 0.9379948811086537, 0.9339908771046496, 0.9319918721116326, 0.92403481325637, 0.9219818621016226, 0.903993814173455, 0.9009968051884218, 0.8889817961674248, 0.8810007612402823, 0.8800387213560866, 0.8709517901134668, 0.8489897082711454, 0.7870145594696493, 0.7699076321830812]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9469948990907074
finished with 17
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.23380633450226337] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23380633450226337, 0.1922054305366161] ***
*** finished computation of 7 references, err: [Inf, 0.23380633450226337, 0.1922054305366161] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 84, 17]]
** centroid: 2, normalized-entropy: 0.653839880626333, [(2, 84), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [90, 8, 0]]
** centroid: 3, normalized-entropy: 0.4079059801389762, [(1, 90), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [94, 26, 0]]
** centroid: 4, normalized-entropy: 0.7540340561971327, [(1, 94), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 54, 0]]
** centroid: 5, normalized-entropy: 0.9982994837029028, [(1, 49), (2, 54)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 70, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2432715423988818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2432715423988818, 0.19451669803953198] ***
*** finished computation of 7 references, err: [Inf, 0.2432715423988818, 0.19451669803953198] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [116, 6, 0]]
** centroid: 1, normalized-entropy: 0.28290479297989196, [(1, 116), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 44, 26]]
** centroid: 2, normalized-entropy: 0.9517626756348312, [(2, 44), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [122, 4, 0]]
** centroid: 3, normalized-entropy: 0.20307392998664567, [(1, 122), (2, 4)]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 1, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 93, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 98, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24352913131579398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24352913131579398, 0.1945837609792917] ***
*** finished computation of 7 references, err: [Inf, 0.24352913131579398, 0.1945837609792917] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [38, 82, 0]]
** centroid: 1, normalized-entropy: 0.9007196798623592, [(1, 38), (2, 82)]
*** center 2: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 47, 27]]
** centroid: 4, normalized-entropy: 0.9466474387740499, [(2, 47), (3, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [85, 13, 0]]
** centroid: 5, normalized-entropy: 0.5646695797525669, [(1, 85), (2, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 94, 0]]
** centroid: 7, normalized-entropy: 0.3633319133250508, [(1, 7), (2, 94)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 17)
[0.9469948990907074, 0.9460058861256466, 0.9379948811086537, 0.9339908771046496, 0.9319918721116326, 0.92403481325637, 0.9219818621016226, 0.9140397882912853, 0.903993814173455, 0.9009968051884218, 0.8889817961674248, 0.8810007612402823, 0.8800387213560866, 0.8709517901134668, 0.8489897082711454, 0.7870145594696493, 0.7699076321830812]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9469948990907074
finished with 18
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.28777511818502266] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28777511818502266, 0.2544111398666784] ***
*** starting iteration: 2; err: [Inf, 0.28777511818502266, 0.2544111398666784] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28777511818502266, 0.2544111398666784, 0.24375139903165288] ***
*** starting iteration: 3; err: [Inf, 0.28777511818502266, 0.2544111398666784, 0.24375139903165288] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28777511818502266, 0.2544111398666784, 0.24375139903165288, 0.2415364007731234] ***
*** finished computation of 3 references, err: [Inf, 0.28777511818502266, 0.2544111398666784, 0.24375139903165288, 0.2415364007731234] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [144, 65, 0]]
** centroid: 1, normalized-entropy: 0.894329906939531, [(1, 144), (2, 65)]
*** center 2: selecting labels [1] (freq >= 2) [from [231, 1, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [28, 170, 27]]
** centroid: 3, normalized-entropy: 0.6604191536876186, [(1, 28), (2, 170), (3, 27)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.24678817941951028] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24678817941951028, 0.23393305186796626] ***
*** starting iteration: 2; err: [Inf, 0.24678817941951028, 0.23393305186796626] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24678817941951028, 0.23393305186796626, 0.23319551347429562] ***
*** finished computation of 3 references, err: [Inf, 0.24678817941951028, 0.23393305186796626, 0.23319551347429562] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [231, 39, 0]]
** centroid: 1, normalized-entropy: 0.5957610966703235, [(1, 231), (2, 39)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 179, 17]]
** centroid: 2, normalized-entropy: 0.42547569905624044, [(2, 179), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [177, 24, 0]]
** centroid: 3, normalized-entropy: 0.52764232609436, [(1, 177), (2, 24)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4687434246266509] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4687434246266509, 0.253911091137616] ***
*** starting iteration: 2; err: [Inf, 0.4687434246266509, 0.253911091137616] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4687434246266509, 0.253911091137616, 0.23721611568483633] ***
*** starting iteration: 3; err: [Inf, 0.4687434246266509, 0.253911091137616, 0.23721611568483633] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4687434246266509, 0.253911091137616, 0.23721611568483633, 0.23351706203207306] ***
*** finished computation of 3 references, err: [Inf, 0.4687434246266509, 0.253911091137616, 0.23721611568483633, 0.23351706203207306] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [1, 192, 26]]
** centroid: 1, normalized-entropy: 0.527247477024035, [(2, 192), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [264, 10, 0]]
** centroid: 2, normalized-entropy: 0.22599073821780646, [(1, 264), (2, 10)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [130, 44, 0]]
** centroid: 3, normalized-entropy: 0.8158009273789572, [(1, 130), (2, 44)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 18)
[0.9469948990907074, 0.9460058861256466, 0.9379948811086537, 0.9339908771046496, 0.9319918721116326, 0.92403481325637, 0.9219818621016226, 0.9140397882912853, 0.903993814173455, 0.9009968051884218, 0.8889817961674248, 0.8810007612402823, 0.8800387213560866, 0.8739967512422603, 0.8709517901134668, 0.8489897082711454, 0.7870145594696493, 0.7699076321830812]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9469948990907074
finished with 19
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.20697022477715826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20697022477715826, 0.16820505111619505] ***
*** starting iteration: 2; err: [Inf, 0.20697022477715826, 0.16820505111619505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20697022477715826, 0.16820505111619505, 0.16092111813268056] ***
*** starting iteration: 3; err: [Inf, 0.20697022477715826, 0.16820505111619505, 0.16092111813268056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20697022477715826, 0.16820505111619505, 0.16092111813268056, 0.15754061461392757] ***
*** starting iteration: 4; err: [Inf, 0.20697022477715826, 0.16820505111619505, 0.16092111813268056, 0.15754061461392757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20697022477715826, 0.16820505111619505, 0.16092111813268056, 0.15754061461392757, 0.154095776805615] ***
*** starting iteration: 5; err: [Inf, 0.20697022477715826, 0.16820505111619505, 0.16092111813268056, 0.15754061461392757, 0.154095776805615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20697022477715826, 0.16820505111619505, 0.16092111813268056, 0.15754061461392757, 0.154095776805615, 0.15053458518681448] ***
*** starting iteration: 6; err: [Inf, 0.20697022477715826, 0.16820505111619505, 0.16092111813268056, 0.15754061461392757, 0.154095776805615, 0.15053458518681448] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20697022477715826, 0.16820505111619505, 0.16092111813268056, 0.15754061461392757, 0.154095776805615, 0.15053458518681448, 0.14863352363722193] ***
*** starting iteration: 7; err: [Inf, 0.20697022477715826, 0.16820505111619505, 0.16092111813268056, 0.15754061461392757, 0.154095776805615, 0.15053458518681448, 0.14863352363722193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20697022477715826, 0.16820505111619505, 0.16092111813268056, 0.15754061461392757, 0.154095776805615, 0.15053458518681448, 0.14863352363722193, 0.1481016006847905] ***
*** finished computation of 7 references, err: [Inf, 0.20697022477715826, 0.16820505111619505, 0.16092111813268056, 0.15754061461392757, 0.154095776805615, 0.15053458518681448, 0.14863352363722193, 0.1481016006847905] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [51, 11, 0]]
** centroid: 1, normalized-entropy: 0.674398887071447, [(1, 51), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [24, 76, 0]]
** centroid: 2, normalized-entropy: 0.7950402793845225, [(1, 24), (2, 76)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [4, 80, 0]]
** centroid: 3, normalized-entropy: 0.2761954276479391, [(1, 4), (2, 80)]
*** center 4: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 48, 27]]
** centroid: 5, normalized-entropy: 0.9426831892554921, [(2, 48), (3, 27)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [104, 21, 0]]
** centroid: 6, normalized-entropy: 0.6531091121418665, [(1, 104), (2, 21)]
*** center 7: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19749394049965727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19749394049965727, 0.16448620903533304] ***
*** starting iteration: 2; err: [Inf, 0.19749394049965727, 0.16448620903533304] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19749394049965727, 0.16448620903533304, 0.15531815477155395] ***
*** starting iteration: 3; err: [Inf, 0.19749394049965727, 0.16448620903533304, 0.15531815477155395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19749394049965727, 0.16448620903533304, 0.15531815477155395, 0.15190609634087338] ***
*** starting iteration: 4; err: [Inf, 0.19749394049965727, 0.16448620903533304, 0.15531815477155395, 0.15190609634087338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19749394049965727, 0.16448620903533304, 0.15531815477155395, 0.15190609634087338, 0.15099855748771773] ***
*** finished computation of 7 references, err: [Inf, 0.19749394049965727, 0.16448620903533304, 0.15531815477155395, 0.15190609634087338, 0.15099855748771773] ***
*** center 1: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [2, 65, 0]]
** centroid: 2, normalized-entropy: 0.19364280468389852, [(1, 2), (2, 65)]
*** center 3: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [22, 60, 0]]
** centroid: 4, normalized-entropy: 0.8390040613676978, [(1, 22), (2, 60)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [36, 54, 0]]
** centroid: 5, normalized-entropy: 0.9709505944546688, [(1, 36), (2, 54)]
*** center 6: selecting labels [1] (freq >= 1) [from [130, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 63, 17]]
** centroid: 7, normalized-entropy: 0.7462343013654809, [(2, 63), (3, 17)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20275074350501018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20275074350501018, 0.15786200742875373] ***
*** starting iteration: 2; err: [Inf, 0.20275074350501018, 0.15786200742875373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20275074350501018, 0.15786200742875373, 0.14964697370933985] ***
*** starting iteration: 3; err: [Inf, 0.20275074350501018, 0.15786200742875373, 0.14964697370933985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20275074350501018, 0.15786200742875373, 0.14964697370933985, 0.14626508978275077] ***
*** starting iteration: 4; err: [Inf, 0.20275074350501018, 0.15786200742875373, 0.14964697370933985, 0.14626508978275077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20275074350501018, 0.15786200742875373, 0.14964697370933985, 0.14626508978275077, 0.14532742137996957] ***
*** finished computation of 7 references, err: [Inf, 0.20275074350501018, 0.15786200742875373, 0.14964697370933985, 0.14626508978275077, 0.14532742137996957] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [57, 36, 0]]
** centroid: 1, normalized-entropy: 0.9629004147713269, [(1, 57), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [65, 29, 0]]
** centroid: 2, normalized-entropy: 0.8914467590654126, [(1, 65), (2, 29)]
*** center 3: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [1, 84, 0]]
** centroid: 4, normalized-entropy: 0.0922772477445739, [(1, 1), (2, 84)]
*** center 5: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [59, 15, 0]]
** centroid: 6, normalized-entropy: 0.7273006785144036, [(1, 59), (2, 15)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 82, 26]]
** centroid: 7, normalized-entropy: 0.7962699368824384, [(2, 82), (3, 26)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 19)
[0.9469948990907074, 0.9460058861256466, 0.9379948811086537, 0.9339908771046496, 0.9319918721116326, 0.92403481325637, 0.9219818621016226, 0.9140397882912853, 0.903993814173455, 0.9009968051884218, 0.8959977942013871, 0.8889817961674248, 0.8810007612402823, 0.8800387213560866, 0.8739967512422603, 0.8709517901134668, 0.8489897082711454, 0.7870145594696493, 0.7699076321830812]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9469948990907074
finished with 20
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.27336138745143385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27336138745143385, 0.21236137164247645] ***
*** starting iteration: 2; err: [Inf, 0.27336138745143385, 0.21236137164247645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27336138745143385, 0.21236137164247645, 0.20108414311297573] ***
*** starting iteration: 3; err: [Inf, 0.27336138745143385, 0.21236137164247645, 0.20108414311297573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27336138745143385, 0.21236137164247645, 0.20108414311297573, 0.1988638997016413] ***
*** finished computation of 7 references, err: [Inf, 0.27336138745143385, 0.21236137164247645, 0.20108414311297573, 0.1988638997016413] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [21, 70, 0]]
** centroid: 1, normalized-entropy: 0.7793498372920851, [(1, 21), (2, 70)]
*** center 2: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [135, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 73, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 38, 27]]
** centroid: 6, normalized-entropy: 0.9792415350396869, [(2, 38), (3, 27)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [35, 55, 0]]
** centroid: 7, normalized-entropy: 0.9640787648082293, [(1, 35), (2, 55)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3440170993939785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3440170993939785, 0.2269772395472052] ***
*** starting iteration: 2; err: [Inf, 0.3440170993939785, 0.2269772395472052] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3440170993939785, 0.2269772395472052, 0.20702623875987627] ***
*** starting iteration: 3; err: [Inf, 0.3440170993939785, 0.2269772395472052, 0.20702623875987627] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3440170993939785, 0.2269772395472052, 0.20702623875987627, 0.19485857239554355] ***
*** finished computation of 7 references, err: [Inf, 0.3440170993939785, 0.2269772395472052, 0.20702623875987627, 0.19485857239554355] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 52, 17]]
** centroid: 1, normalized-entropy: 0.8054848387405957, [(2, 52), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [154, 5, 0]]
** centroid: 3, normalized-entropy: 0.2015951078538421, [(1, 154), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [70, 21, 0]]
** centroid: 4, normalized-entropy: 0.7793498372920851, [(1, 70), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 76, 0]]
** centroid: 5, normalized-entropy: 0.23292785546981223, [(1, 3), (2, 76)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 57, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [66, 31, 0]]
** centroid: 7, normalized-entropy: 0.9039324555927869, [(1, 66), (2, 31)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3039813718522551] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3039813718522551, 0.2355178744386256] ***
*** starting iteration: 2; err: [Inf, 0.3039813718522551, 0.2355178744386256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3039813718522551, 0.2355178744386256, 0.21861216886809606] ***
*** starting iteration: 3; err: [Inf, 0.3039813718522551, 0.2355178744386256, 0.21861216886809606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3039813718522551, 0.2355178744386256, 0.21861216886809606, 0.19978432686136535] ***
*** finished computation of 7 references, err: [Inf, 0.3039813718522551, 0.2355178744386256, 0.21861216886809606, 0.19978432686136535] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [53, 50, 0]]
** centroid: 1, normalized-entropy: 0.9993879681484049, [(1, 53), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 15, 0]]
** centroid: 2, normalized-entropy: 0.7273006785144036, [(1, 59), (2, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [99, 3, 0]]
** centroid: 4, normalized-entropy: 0.1914332548141934, [(1, 99), (2, 3)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 79, 25]]
** centroid: 5, normalized-entropy: 0.7956792965030224, [(2, 79), (3, 25)]
*** center 6: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 99, 1]]
** centroid: 7, normalized-entropy: 0.08079313589591128, [(2, 99), (3, 1)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 20)
[0.9469948990907074, 0.9460058861256466, 0.9379948811086537, 0.9339908771046496, 0.9319918721116326, 0.92403481325637, 0.92401683120246, 0.9219818621016226, 0.9140397882912853, 0.903993814173455, 0.9009968051884218, 0.8959977942013871, 0.8889817961674248, 0.8810007612402823, 0.8800387213560866, 0.8739967512422603, 0.8709517901134668, 0.8489897082711454, 0.7870145594696493, 0.7699076321830812]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9469948990907074
finished with 22
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.3323409321173248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3323409321173248, 0.21988900727942004] ***
*** starting iteration: 2; err: [Inf, 0.3323409321173248, 0.21988900727942004] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3323409321173248, 0.21988900727942004, 0.20793863661816572] ***
*** starting iteration: 3; err: [Inf, 0.3323409321173248, 0.21988900727942004, 0.20793863661816572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3323409321173248, 0.21988900727942004, 0.20793863661816572, 0.19700407452724716] ***
*** starting iteration: 4; err: [Inf, 0.3323409321173248, 0.21988900727942004, 0.20793863661816572, 0.19700407452724716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3323409321173248, 0.21988900727942004, 0.20793863661816572, 0.19700407452724716, 0.19327073625929364] ***
*** starting iteration: 5; err: [Inf, 0.3323409321173248, 0.21988900727942004, 0.20793863661816572, 0.19700407452724716, 0.19327073625929364] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3323409321173248, 0.21988900727942004, 0.20793863661816572, 0.19700407452724716, 0.19327073625929364, 0.19150567967612464] ***
*** starting iteration: 6; err: [Inf, 0.3323409321173248, 0.21988900727942004, 0.20793863661816572, 0.19700407452724716, 0.19327073625929364, 0.19150567967612464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3323409321173248, 0.21988900727942004, 0.20793863661816572, 0.19700407452724716, 0.19327073625929364, 0.19150567967612464, 0.18907156631255428] ***
*** starting iteration: 7; err: [Inf, 0.3323409321173248, 0.21988900727942004, 0.20793863661816572, 0.19700407452724716, 0.19327073625929364, 0.19150567967612464, 0.18907156631255428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3323409321173248, 0.21988900727942004, 0.20793863661816572, 0.19700407452724716, 0.19327073625929364, 0.19150567967612464, 0.18907156631255428, 0.18825981778081496] ***
*** finished computation of 7 references, err: [Inf, 0.3323409321173248, 0.21988900727942004, 0.20793863661816572, 0.19700407452724716, 0.19327073625929364, 0.19150567967612464, 0.18907156631255428, 0.18825981778081496] ***
*** center 1: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [17, 66, 0]]
** centroid: 2, normalized-entropy: 0.7314625617214586, [(1, 17), (2, 66)]
*** center 3: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [50, 42, 0]]
** centroid: 4, normalized-entropy: 0.9945386816500111, [(1, 50), (2, 42)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [99, 10, 0]]
** centroid: 5, normalized-entropy: 0.4422615143479816, [(1, 99), (2, 10)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 60, 27]]
** centroid: 6, normalized-entropy: 0.8935711016541908, [(2, 60), (3, 27)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 58, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26344840373492046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26344840373492046, 0.20795326181889875] ***
*** starting iteration: 2; err: [Inf, 0.26344840373492046, 0.20795326181889875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26344840373492046, 0.20795326181889875, 0.20061173911221783] ***
*** starting iteration: 3; err: [Inf, 0.26344840373492046, 0.20795326181889875, 0.20061173911221783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26344840373492046, 0.20795326181889875, 0.20061173911221783, 0.1984219759914918] ***
*** starting iteration: 4; err: [Inf, 0.26344840373492046, 0.20795326181889875, 0.20061173911221783, 0.1984219759914918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26344840373492046, 0.20795326181889875, 0.20061173911221783, 0.1984219759914918, 0.19774722521831428] ***
*** finished computation of 7 references, err: [Inf, 0.26344840373492046, 0.20795326181889875, 0.20061173911221783, 0.1984219759914918, 0.19774722521831428] ***
*** center 1: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [45, 43, 0]]
** centroid: 2, normalized-entropy: 0.9996273710574612, [(1, 45), (2, 43)]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [124, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [5, 98, 0]]
** centroid: 5, normalized-entropy: 0.28017814662275986, [(1, 5), (2, 98)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 69, 17]]
** centroid: 6, normalized-entropy: 0.7172524777375696, [(2, 69), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [42, 32, 0]]
** centroid: 7, normalized-entropy: 0.9867867202680318, [(1, 42), (2, 32)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.34797624843348673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34797624843348673, 0.22567341988557194] ***
*** starting iteration: 2; err: [Inf, 0.34797624843348673, 0.22567341988557194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34797624843348673, 0.22567341988557194, 0.2030389739948882] ***
*** starting iteration: 3; err: [Inf, 0.34797624843348673, 0.22567341988557194, 0.2030389739948882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34797624843348673, 0.22567341988557194, 0.2030389739948882, 0.19512097467284376] ***
*** starting iteration: 4; err: [Inf, 0.34797624843348673, 0.22567341988557194, 0.2030389739948882, 0.19512097467284376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34797624843348673, 0.22567341988557194, 0.2030389739948882, 0.19512097467284376, 0.19146664590313694] ***
*** starting iteration: 5; err: [Inf, 0.34797624843348673, 0.22567341988557194, 0.2030389739948882, 0.19512097467284376, 0.19146664590313694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34797624843348673, 0.22567341988557194, 0.2030389739948882, 0.19512097467284376, 0.19146664590313694, 0.18964648896456882] ***
*** starting iteration: 6; err: [Inf, 0.34797624843348673, 0.22567341988557194, 0.2030389739948882, 0.19512097467284376, 0.19146664590313694, 0.18964648896456882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34797624843348673, 0.22567341988557194, 0.2030389739948882, 0.19512097467284376, 0.19146664590313694, 0.18964648896456882, 0.188839015392433] ***
*** finished computation of 7 references, err: [Inf, 0.34797624843348673, 0.22567341988557194, 0.2030389739948882, 0.19512097467284376, 0.19146664590313694, 0.18964648896456882, 0.188839015392433] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 90, 26]]
** centroid: 1, normalized-entropy: 0.7676515870125797, [(2, 90), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [14, 89, 0]]
** centroid: 4, normalized-entropy: 0.5734593207286953, [(1, 14), (2, 89)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [93, 37, 0]]
** centroid: 5, normalized-entropy: 0.8616636287106234, [(1, 93), (2, 37)]
*** center 6: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [33, 30, 0]]
** centroid: 7, normalized-entropy: 0.998363672593813, [(1, 33), (2, 30)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1890741305498479] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1890741305498479, 0.156546810390176] ***
*** starting iteration: 2; err: [Inf, 0.1890741305498479, 0.156546810390176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1890741305498479, 0.156546810390176, 0.15194131366002397] ***
*** starting iteration: 3; err: [Inf, 0.1890741305498479, 0.156546810390176, 0.15194131366002397] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1890741305498479, 0.156546810390176, 0.15194131366002397, 0.1493633055434403] ***
*** starting iteration: 4; err: [Inf, 0.1890741305498479, 0.156546810390176, 0.15194131366002397, 0.1493633055434403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1890741305498479, 0.156546810390176, 0.15194131366002397, 0.1493633055434403, 0.14813741505028563] ***
*** starting iteration: 5; err: [Inf, 0.1890741305498479, 0.156546810390176, 0.15194131366002397, 0.1493633055434403, 0.14813741505028563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1890741305498479, 0.156546810390176, 0.15194131366002397, 0.1493633055434403, 0.14813741505028563, 0.1473612617302753] ***
*** finished computation of 7 references, err: [Inf, 0.1890741305498479, 0.156546810390176, 0.15194131366002397, 0.1493633055434403, 0.14813741505028563, 0.1473612617302753] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [52, 41, 0]]
** centroid: 1, normalized-entropy: 0.989884644089986, [(1, 52), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [107, 3, 0]]
** centroid: 2, normalized-entropy: 0.1805246676420577, [(1, 107), (2, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [2, 90, 0]]
** centroid: 5, normalized-entropy: 0.1510969705171136, [(1, 2), (2, 90)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [68, 30, 0]]
** centroid: 6, normalized-entropy: 0.8886466698980794, [(1, 68), (2, 30)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 72, 27]]
** centroid: 7, normalized-entropy: 0.8453509366224364, [(2, 72), (3, 27)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18975568554926847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18975568554926847, 0.15560155440885656] ***
*** starting iteration: 2; err: [Inf, 0.18975568554926847, 0.15560155440885656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18975568554926847, 0.15560155440885656, 0.14825664025366955] ***
*** starting iteration: 3; err: [Inf, 0.18975568554926847, 0.15560155440885656, 0.14825664025366955] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18975568554926847, 0.15560155440885656, 0.14825664025366955, 0.1455961722012112] ***
*** starting iteration: 4; err: [Inf, 0.18975568554926847, 0.15560155440885656, 0.14825664025366955, 0.1455961722012112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18975568554926847, 0.15560155440885656, 0.14825664025366955, 0.1455961722012112, 0.14485878766426394] ***
*** finished computation of 7 references, err: [Inf, 0.18975568554926847, 0.15560155440885656, 0.14825664025366955, 0.1455961722012112, 0.14485878766426394] ***
*** center 1: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [55, 38, 0]]
** centroid: 2, normalized-entropy: 0.9757606417025202, [(1, 55), (2, 38)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [102, 19, 0]]
** centroid: 3, normalized-entropy: 0.6271441658983906, [(1, 102), (2, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 91, 7]]
** centroid: 5, normalized-entropy: 0.3712323266408756, [(2, 91), (3, 7)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [76, 17, 0]]
** centroid: 6, normalized-entropy: 0.6861549474202007, [(1, 76), (2, 17)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 77, 10]]
** centroid: 7, normalized-entropy: 0.5146464316834292, [(2, 77), (3, 10)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19574791020427507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19574791020427507, 0.15862564104951282] ***
*** starting iteration: 2; err: [Inf, 0.19574791020427507, 0.15862564104951282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19574791020427507, 0.15862564104951282, 0.15296120603353824] ***
*** starting iteration: 3; err: [Inf, 0.19574791020427507, 0.15862564104951282, 0.15296120603353824] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19574791020427507, 0.15862564104951282, 0.15296120603353824, 0.151320385586085] ***
*** starting iteration: 4; err: [Inf, 0.19574791020427507, 0.15862564104951282, 0.15296120603353824, 0.151320385586085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19574791020427507, 0.15862564104951282, 0.15296120603353824, 0.151320385586085, 0.15078361850962144] ***
*** finished computation of 7 references, err: [Inf, 0.19574791020427507, 0.15862564104951282, 0.15296120603353824, 0.151320385586085, 0.15078361850962144] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [98, 49, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 98), (2, 49)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 77, 26]]
** centroid: 2, normalized-entropy: 0.8151025048028707, [(2, 77), (3, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [97, 2, 0]]
** centroid: 4, normalized-entropy: 0.14257333025989857, [(1, 97), (2, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [34, 22, 0]]
** centroid: 6, normalized-entropy: 0.9666186325481027, [(1, 34), (2, 22)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 96, 0]]
** centroid: 7, normalized-entropy: 0.0828365528136124, [(1, 1), (2, 96)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 22)
[0.9469948990907074, 0.9460058861256466, 0.9379948811086537, 0.9359868850886816, 0.9339908771046496, 0.9319918721116326, 0.9259918601235967, 0.92403481325637, 0.92401683120246, 0.9219818621016226, 0.9140397882912853, 0.903993814173455, 0.9009968051884218, 0.8959977942013871, 0.8889817961674248, 0.8810007612402823, 0.8800387213560866, 0.8739967512422603, 0.8709517901134668, 0.8489897082711454, 0.7870145594696493, 0.7699076321830812]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9469948990907074
finished with 23
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.29688505060668735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29688505060668735, 0.23468835777414307] ***
*** finished computation of 7 references, err: [Inf, 0.29688505060668735, 0.23468835777414307] ***
*** center 1: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [90, 86, 0]]
** centroid: 2, normalized-entropy: 0.9996273710574612, [(1, 90), (2, 86)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 56, 27]]
** centroid: 3, normalized-entropy: 0.9100534290139191, [(2, 56), (3, 27)]
*** center 4: selecting labels [1] (freq >= 2) [from [173, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [16, 86, 0]]
** centroid: 5, normalized-entropy: 0.6267511370265896, [(1, 16), (2, 86)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [23, 8, 0]]
** centroid: 6, normalized-entropy: 0.8238116333123173, [(1, 23), (2, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3144463367419488] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3144463367419488, 0.21228921274351573] ***
*** finished computation of 7 references, err: [Inf, 0.3144463367419488, 0.21228921274351573] ***
*** center 1: selecting labels [1] (freq >= 2) [from [161, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 49, 17]]
** centroid: 2, normalized-entropy: 0.8230660790114689, [(2, 49), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [89, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [22, 70, 0]]
** centroid: 4, normalized-entropy: 0.7935912300117066, [(1, 22), (2, 70)]
*** center 5: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [87, 69, 0]]
** centroid: 6, normalized-entropy: 0.990374836448575, [(1, 87), (2, 69)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 53, 0]]
** centroid: 7, normalized-entropy: 0.4743454375622396, [(1, 6), (2, 53)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3520522702525815] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3520522702525815, 0.24380174290103981] ***
*** finished computation of 7 references, err: [Inf, 0.3520522702525815, 0.24380174290103981] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [193, 18, 0]]
** centroid: 1, normalized-entropy: 0.42061170899770123, [(1, 193), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [77, 9, 0]]
** centroid: 2, normalized-entropy: 0.48356837509176975, [(1, 77), (2, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 129, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 36, 0]]
** centroid: 6, normalized-entropy: 0.46899559358928133, [(1, 4), (2, 36)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 54, 26]]
** centroid: 7, normalized-entropy: 0.9097361225311661, [(2, 54), (3, 26)]
finished with 8 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 23)
[0.9469948990907074, 0.9460058861256466, 0.9379948811086537, 0.9359868850886816, 0.9339908771046496, 0.9319918721116326, 0.9259918601235967, 0.92403481325637, 0.92401683120246, 0.9219818621016226, 0.9140397882912853, 0.9079828331325337, 0.903993814173455, 0.9009968051884218, 0.8959977942013871, 0.8889817961674248, 0.8810007612402823, 0.8800387213560866, 0.8739967512422603, 0.8709517901134668, 0.8489897082711454, 0.7870145594696493, 0.7699076321830812]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9469948990907074
finished with 23
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 23)
[0.9469948990907074, 0.9460058861256466, 0.9379948811086537, 0.9359868850886816, 0.9339908771046496, 0.9319918721116326, 0.9259918601235967, 0.92403481325637, 0.92401683120246, 0.9219818621016226, 0.9140397882912853, 0.9079828331325337, 0.903993814173455, 0.9009968051884218, 0.8959977942013871, 0.8889817961674248, 0.8810007612402823, 0.8800387213560866, 0.8739967512422603, 0.8709517901134668, 0.8489897082711454, 0.7870145594696493, 0.7699076321830812]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9469948990907074
finished with 23
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.21659191890014334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21659191890014334, 0.16510630168393253] ***
*** finished computation of 7 references, err: [Inf, 0.21659191890014334, 0.16510630168393253] ***
*** center 1: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [185, 79, 0]]
** centroid: 2, normalized-entropy: 0.8803628720042532, [(1, 185), (2, 79)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 121, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [106, 36, 0]]
** centroid: 4, normalized-entropy: 0.8168114277045246, [(1, 106), (2, 36)]
*** center 5: selecting labels [1] (freq >= 2) [from [164, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [97, 8, 0]]
** centroid: 6, normalized-entropy: 0.38861174916944274, [(1, 97), (2, 8)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 118, 35]]
** centroid: 7, normalized-entropy: 0.7758402255830369, [(2, 118), (3, 35)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2716322254110128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2716322254110128, 0.1813924073735252] ***
*** finished computation of 7 references, err: [Inf, 0.2716322254110128, 0.1813924073735252] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [47, 25, 0]]
** centroid: 1, normalized-entropy: 0.9315627684809641, [(1, 47), (2, 25)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 52, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [103, 16, 0]]
** centroid: 3, normalized-entropy: 0.5695273910401157, [(1, 103), (2, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [134, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 44, 0]]
** centroid: 5, normalized-entropy: 0.8832225588099292, [(1, 19), (2, 44)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 12, 10]]
** centroid: 6, normalized-entropy: 0.9940302114769566, [(2, 12), (3, 10)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 34, 3]]
** centroid: 7, normalized-entropy: 0.40597703847557104, [(2, 34), (3, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1883703014906496] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1883703014906496, 0.15746136475214734] ***
*** finished computation of 7 references, err: [Inf, 0.1883703014906496, 0.15746136475214734] ***
*** center 1: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [87, 5, 0]]
** centroid: 2, normalized-entropy: 0.30458668852140236, [(1, 87), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [35, 15, 0]]
** centroid: 3, normalized-entropy: 0.8812908992306927, [(1, 35), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [81, 2, 0]]
** centroid: 4, normalized-entropy: 0.1638605128691586, [(1, 81), (2, 2)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 65, 11]]
** centroid: 5, normalized-entropy: 0.5965109917085881, [(2, 65), (3, 11)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 81, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [43, 1, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20488450961839408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20488450961839408, 0.16428720221109688] ***
*** finished computation of 7 references, err: [Inf, 0.20488450961839408, 0.16428720221109688] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [38, 37, 0]]
** centroid: 1, normalized-entropy: 0.999871756640849, [(1, 38), (2, 37)]
*** center 2: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 66, 2]]
** centroid: 4, normalized-entropy: 0.1914332548141934, [(2, 66), (3, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [80, 12, 0]]
** centroid: 5, normalized-entropy: 0.5586293734521991, [(1, 80), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [96, 23, 0]]
** centroid: 6, normalized-entropy: 0.7082772165975041, [(1, 96), (2, 23)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 45, 14]]
** centroid: 7, normalized-entropy: 0.7905013842153699, [(2, 45), (3, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22272165526263416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22272165526263416, 0.16718420740496368] ***
*** finished computation of 7 references, err: [Inf, 0.22272165526263416, 0.16718420740496368] ***
*** center 1: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [2, 47, 0]]
** centroid: 2, normalized-entropy: 0.2460225782203316, [(1, 2), (2, 47)]
*** center 3: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 28, 0]]
** centroid: 5, normalized-entropy: 0.9494520153879484, [(1, 48), (2, 28)]
*** center 6: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 7: selecting labels [1, 2, 3] (freq >= 2) [from [8, 109, 19]]
** centroid: 7, normalized-entropy: 0.5634399041667456, [(1, 8), (2, 109), (3, 19)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2642036213427782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2642036213427782, 0.17378677418641747] ***
*** finished computation of 7 references, err: [Inf, 0.2642036213427782, 0.17378677418641747] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [26, 4, 0]]
** centroid: 1, normalized-entropy: 0.5665095065529052, [(1, 26), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [84, 37, 0]]
** centroid: 2, normalized-entropy: 0.8882480468474291, [(1, 84), (2, 37)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 45, 4]]
** centroid: 3, normalized-entropy: 0.4079059801389762, [(2, 45), (3, 4)]
*** center 4: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [18, 23, 0]]
** centroid: 6, normalized-entropy: 0.9892452969285004, [(1, 18), (2, 23)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 57, 14]]
** centroid: 7, normalized-entropy: 0.7162583911075451, [(2, 57), (3, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25362055832520125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25362055832520125, 0.18864223646558823] ***
*** finished computation of 7 references, err: [Inf, 0.25362055832520125, 0.18864223646558823] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 12, 0]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(1, 30), (2, 12)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 53, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 74, 0]]
** centroid: 5, normalized-entropy: 0.8152560766360704, [(1, 25), (2, 74)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 44, 21]]
** centroid: 6, normalized-entropy: 0.9076961653608385, [(2, 44), (3, 21)]
*** center 7: selecting labels [1] (freq >= 2) [from [157, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21190239087771626] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21190239087771626, 0.15760693185590208] ***
*** finished computation of 7 references, err: [Inf, 0.21190239087771626, 0.15760693185590208] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 40, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [37, 20, 0]]
** centroid: 3, normalized-entropy: 0.9348490242345946, [(1, 37), (2, 20)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [35, 27, 0]]
** centroid: 4, normalized-entropy: 0.9879565014919159, [(1, 35), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [71, 50, 0]]
** centroid: 5, normalized-entropy: 0.9781619565012999, [(1, 71), (2, 50)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 60, 19]]
** centroid: 7, normalized-entropy: 0.7958812735955936, [(2, 60), (3, 19)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20242567156255245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20242567156255245, 0.16161169380042703] ***
*** finished computation of 7 references, err: [Inf, 0.20242567156255245, 0.16161169380042703] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [3, 79, 8]]
** centroid: 1, normalized-entropy: 0.4031866301452816, [(1, 3), (2, 79), (3, 8)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [12, 10, 0]]
** centroid: 2, normalized-entropy: 0.9940302114769566, [(1, 12), (2, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [59, 1, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [110, 12, 0]]
** centroid: 6, normalized-entropy: 0.4637773498877517, [(1, 110), (2, 12)]
*** center 7: selecting labels [1, 2, 3] (freq >= 2) [from [4, 80, 8]]
** centroid: 7, normalized-entropy: 0.4280272187063686, [(1, 4), (2, 80), (3, 8)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18194813079573213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18194813079573213, 0.15136142568849026] ***
*** finished computation of 7 references, err: [Inf, 0.18194813079573213, 0.15136142568849026] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 12, 0]]
** centroid: 2, normalized-entropy: 0.678114052360606, [(1, 55), (2, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 54, 0]]
** centroid: 3, normalized-entropy: 0.9839393951635759, [(1, 40), (2, 54)]
*** center 4: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 61, 18]]
** centroid: 6, normalized-entropy: 0.7742411580847273, [(2, 61), (3, 18)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [21, 42, 0]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(1, 21), (2, 42)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21275219365488737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21275219365488737, 0.1627829020768404] ***
*** finished computation of 7 references, err: [Inf, 0.21275219365488737, 0.1627829020768404] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 84, 19]]
** centroid: 1, normalized-entropy: 0.6897501750585195, [(2, 84), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [42, 29, 0]]
** centroid: 2, normalized-entropy: 0.9756797868933086, [(1, 42), (2, 29)]
*** center 3: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 4, 0]]
** centroid: 5, normalized-entropy: 0.2974722489192896, [(1, 72), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [28, 63, 0]]
** centroid: 6, normalized-entropy: 0.8904916402194913, [(1, 28), (2, 63)]
*** center 7: selecting labels [1] (freq >= 2) [from [37, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22352617764659227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22352617764659227, 0.16243665153672918] ***
*** finished computation of 7 references, err: [Inf, 0.22352617764659227, 0.16243665153672918] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [39, 4, 0]]
** centroid: 1, normalized-entropy: 0.446481346896803, [(1, 39), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [88, 3, 0]]
** centroid: 2, normalized-entropy: 0.20905980566852464, [(1, 88), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 28, 0]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(1, 42), (2, 28)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 13, 0]]
** centroid: 5, normalized-entropy: 0.6402569436810504, [(1, 67), (2, 13)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 75, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 49, 17]]
** centroid: 7, normalized-entropy: 0.8230660790114689, [(2, 49), (3, 17)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1784991951286793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1784991951286793, 0.1621299961116165] ***
*** finished computation of 7 references, err: [Inf, 0.1784991951286793, 0.1621299961116165] ***
*** center 1: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [45, 41, 0]]
** centroid: 2, normalized-entropy: 0.9984389230256238, [(1, 45), (2, 41)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 41, 5]]
** centroid: 3, normalized-entropy: 0.49596907206183377, [(2, 41), (3, 5)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [22, 35, 0]]
** centroid: 6, normalized-entropy: 0.9621461334087003, [(1, 22), (2, 35)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 60, 15]]
** centroid: 7, normalized-entropy: 0.7219280948873623, [(2, 60), (3, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2084534179456532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2084534179456532, 0.16166659689694643] ***
*** finished computation of 7 references, err: [Inf, 0.2084534179456532, 0.16166659689694643] ***
*** center 1: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [29, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [2, 63, 1]]
** centroid: 3, normalized-entropy: 0.19823496409776642, [(1, 2), (2, 63)]
*** center 4: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 8, 0]]
** centroid: 5, normalized-entropy: 0.5079353563991225, [(1, 63), (2, 8)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 97, 11]]
** centroid: 6, normalized-entropy: 0.4748384883008607, [(2, 97), (3, 11)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [94, 10, 0]]
** centroid: 7, normalized-entropy: 0.45668363153944286, [(1, 94), (2, 10)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19133882361464202] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19133882361464202, 0.1608072912413627] ***
*** finished computation of 7 references, err: [Inf, 0.19133882361464202, 0.1608072912413627] ***
*** center 1: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [32, 26, 0]]
** centroid: 2, normalized-entropy: 0.9922666387194963, [(1, 32), (2, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [74, 23, 0]]
** centroid: 3, normalized-entropy: 0.790206924188637, [(1, 74), (2, 23)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 45, 1]]
*** center 5: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [41, 47, 0]]
** centroid: 6, normalized-entropy: 0.99664402524877, [(1, 41), (2, 47)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 60, 20]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 60), (3, 20)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20724125843401997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20724125843401997, 0.1583337440267205] ***
*** finished computation of 7 references, err: [Inf, 0.20724125843401997, 0.1583337440267205] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [34, 34, 0]]
** centroid: 1, normalized-entropy: 1.0, [(1, 34), (2, 34)]
*** center 2: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [77, 19, 0]]
** centroid: 4, normalized-entropy: 0.7177418091697444, [(1, 77), (2, 19)]
*** center 5: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [29, 41, 0]]
** centroid: 6, normalized-entropy: 0.9786961448300948, [(1, 29), (2, 41)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 93, 20]]
** centroid: 7, normalized-entropy: 0.6734503665674518, [(2, 93), (3, 20)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20913675334490836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20913675334490836, 0.16890913297142834] ***
*** finished computation of 7 references, err: [Inf, 0.20913675334490836, 0.16890913297142834] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 37, 0]]
** centroid: 1, normalized-entropy: 0.9534985819759996, [(1, 62), (2, 37)]
*** center 2: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [52, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [26, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [17, 21, 0]]
** centroid: 6, normalized-entropy: 0.9919924034538556, [(1, 17), (2, 21)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 113, 15]]
** centroid: 7, normalized-entropy: 0.5212220180699689, [(2, 113), (3, 15)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18645643103215842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18645643103215842, 0.15522541588917374] ***
*** finished computation of 7 references, err: [Inf, 0.18645643103215842, 0.15522541588917374] ***
*** center 1: selecting labels [1] (freq >= 2) [from [28, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 31, 0]]
** centroid: 2, normalized-entropy: 0.9254482516437047, [(1, 60), (2, 31)]
*** center 3: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [9, 82, 0]]
** centroid: 4, normalized-entropy: 0.4655024490815131, [(1, 9), (2, 82)]
*** center 5: selecting labels [1] (freq >= 2) [from [87, 1, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 62, 17]]
** centroid: 7, normalized-entropy: 0.751286576718343, [(2, 62), (3, 17)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19334408169705422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19334408169705422, 0.1577571151824668] ***
*** finished computation of 7 references, err: [Inf, 0.19334408169705422, 0.1577571151824668] ***
*** center 1: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [33, 46, 0]]
** centroid: 2, normalized-entropy: 0.980377508715691, [(1, 33), (2, 46)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 94, 22]]
** centroid: 3, normalized-entropy: 0.7007495497162061, [(2, 94), (3, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [21, 14, 0]]
** centroid: 4, normalized-entropy: 0.9709505944546688, [(1, 21), (2, 14)]
*** center 5: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [53, 12, 0]]
** centroid: 6, normalized-entropy: 0.6900703653284017, [(1, 53), (2, 12)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [74, 12, 0]]
** centroid: 7, normalized-entropy: 0.5830194167347007, [(1, 74), (2, 12)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2590558939501643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2590558939501643, 0.19646611259318889] ***
*** finished computation of 7 references, err: [Inf, 0.2590558939501643, 0.19646611259318889] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 24, 0]]
** centroid: 1, normalized-entropy: 0.6631968402398286, [(1, 5), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [101, 94, 0]]
** centroid: 2, normalized-entropy: 0.9990702531566406, [(1, 101), (2, 94)]
*** center 3: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 77, 15]]
** centroid: 4, normalized-entropy: 0.6415410585827175, [(2, 77), (3, 15)]
*** center 5: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26321401665359734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26321401665359734, 0.17008509412407874] ***
*** finished computation of 7 references, err: [Inf, 0.26321401665359734, 0.17008509412407874] ***
*** center 1: selecting labels [1] (freq >= 2) [from [61, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [33, 16, 0]]
** centroid: 2, normalized-entropy: 0.9113423759758414, [(1, 33), (2, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [32, 62, 1]]
** centroid: 3, normalized-entropy: 0.9252253278054431, [(1, 32), (2, 62)]
*** center 4: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 7: selecting labels [1, 2, 3] (freq >= 2) [from [3, 85, 22]]
** centroid: 7, normalized-entropy: 0.5637584242191135, [(1, 3), (2, 85), (3, 22)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2209407233344391] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2209407233344391, 0.16755438159406186] ***
*** finished computation of 7 references, err: [Inf, 0.2209407233344391, 0.16755438159406186] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [80, 54, 0]]
** centroid: 1, normalized-entropy: 0.9726699911457106, [(1, 80), (2, 54)]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 91, 19]]
** centroid: 3, normalized-entropy: 0.6639057588563916, [(2, 91), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 49, 0]]
** centroid: 5, normalized-entropy: 0.4971677614160751, [(1, 6), (2, 49)]
*** center 6: selecting labels [1] (freq >= 2) [from [27, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19450767805241048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19450767805241048, 0.15682090964354575] ***
*** finished computation of 7 references, err: [Inf, 0.19450767805241048, 0.15682090964354575] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 10, 0]]
** centroid: 1, normalized-entropy: 0.625262405223423, [(1, 54), (2, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 75, 20]]
** centroid: 3, normalized-entropy: 0.7424875695421234, [(2, 75), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 33, 0]]
** centroid: 5, normalized-entropy: 0.9819407868640977, [(1, 24), (2, 33)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [25, 61, 0]]
** centroid: 7, normalized-entropy: 0.869620774054375, [(1, 25), (2, 61)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23580997418425978] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23580997418425978, 0.16749181649368255] ***
*** finished computation of 7 references, err: [Inf, 0.23580997418425978, 0.16749181649368255] ***
*** center 1: selecting labels [1] (freq >= 2) [from [28, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [21, 36, 0]]
** centroid: 2, normalized-entropy: 0.9494520153879484, [(1, 21), (2, 36)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [2, 40, 0]]
** centroid: 3, normalized-entropy: 0.2761954276479391, [(1, 2), (2, 40)]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [121, 8, 0]]
** centroid: 5, normalized-entropy: 0.3353942964292546, [(1, 121), (2, 8)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 104, 19]]
** centroid: 6, normalized-entropy: 0.6209181358912585, [(2, 104), (3, 19)]
*** center 7: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21580078286025672] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21580078286025672, 0.17093504554778338] ***
*** finished computation of 7 references, err: [Inf, 0.21580078286025672, 0.17093504554778338] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 9, 0]]
** centroid: 2, normalized-entropy: 0.6292492238560344, [(1, 48), (2, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 50, 0]]
** centroid: 3, normalized-entropy: 0.9969105350354788, [(1, 57), (2, 50)]
*** center 4: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [16, 24, 0]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(1, 16), (2, 24)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 86, 20]]
** centroid: 7, normalized-entropy: 0.6987003526563345, [(2, 86), (3, 20)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23399934499524533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23399934499524533, 0.15743795405887068] ***
*** finished computation of 7 references, err: [Inf, 0.23399934499524533, 0.15743795405887068] ***
*** center 1: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 34, 15]]
** centroid: 2, normalized-entropy: 0.8886466698980794, [(2, 34), (3, 15)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 46, 3]]
** centroid: 3, normalized-entropy: 0.3322866302216152, [(2, 46), (3, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 16, 0]]
** centroid: 4, normalized-entropy: 0.7120640548905481, [(1, 66), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [80, 19, 0]]
** centroid: 5, normalized-entropy: 0.7054690408228712, [(1, 80), (2, 19)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [19, 49, 0]]
** centroid: 6, normalized-entropy: 0.8546480601169081, [(1, 19), (2, 49)]
*** center 7: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18843070578482002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18843070578482002, 0.1586035577794537] ***
*** finished computation of 7 references, err: [Inf, 0.18843070578482002, 0.1586035577794537] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [32, 32, 0]]
** centroid: 1, normalized-entropy: 1.0, [(1, 32), (2, 32)]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 62, 17]]
** centroid: 3, normalized-entropy: 0.751286576718343, [(2, 62), (3, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [18, 64, 0]]
** centroid: 4, normalized-entropy: 0.7592757847892834, [(1, 18), (2, 64)]
*** center 5: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [45, 20, 0]]
** centroid: 6, normalized-entropy: 0.8904916402194913, [(1, 45), (2, 20)]
*** center 7: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20262085652537645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20262085652537645, 0.15604482329264283] ***
*** finished computation of 7 references, err: [Inf, 0.20262085652537645, 0.15604482329264283] ***
*** center 1: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [14, 70, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 14), (2, 70)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 55, 24]]
** centroid: 4, normalized-entropy: 0.8858834790484443, [(2, 55), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [39, 7, 0]]
** centroid: 5, normalized-entropy: 0.6152538910563409, [(1, 39), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [52, 15, 0]]
** centroid: 6, normalized-entropy: 0.7671903206448686, [(1, 52), (2, 15)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [51, 12, 0]]
** centroid: 7, normalized-entropy: 0.7024665512903904, [(1, 51), (2, 12)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19336755303200334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19336755303200334, 0.1644006114602089] ***
*** finished computation of 7 references, err: [Inf, 0.19336755303200334, 0.1644006114602089] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 52, 7]]
** centroid: 1, normalized-entropy: 0.5254506799086205, [(2, 52), (3, 7)]
*** center 2: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [25, 23, 0]]
** centroid: 4, normalized-entropy: 0.9987472979361685, [(1, 25), (2, 23)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 69, 6]]
** centroid: 5, normalized-entropy: 0.4021791902022729, [(2, 69), (3, 6)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [107, 17, 0]]
** centroid: 6, normalized-entropy: 0.5765847309822099, [(1, 107), (2, 17)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [25, 25, 0]]
** centroid: 7, normalized-entropy: 1.0, [(1, 25), (2, 25)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22558949972037226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22558949972037226, 0.17998583290632814] ***
*** finished computation of 7 references, err: [Inf, 0.22558949972037226, 0.17998583290632814] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 11]]
** centroid: 1, normalized-entropy: 0.7495952572594798, [(2, 3), (3, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [112, 8, 0]]
** centroid: 2, normalized-entropy: 0.3533593350214213, [(1, 112), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [134, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [51, 21, 0]]
** centroid: 4, normalized-entropy: 0.8708644692353648, [(1, 51), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 51, 0]]
** centroid: 5, normalized-entropy: 0.4340811200043348, [(1, 5), (2, 51)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 36, 6]]
** centroid: 6, normalized-entropy: 0.5916727785823274, [(2, 36), (3, 6)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 58, 0]]
** centroid: 7, normalized-entropy: 0.3451173149449528, [(1, 4), (2, 58)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24695997930224986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24695997930224986, 0.16538233794085683] ***
*** finished computation of 7 references, err: [Inf, 0.24695997930224986, 0.16538233794085683] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 63, 16]]
** centroid: 1, normalized-entropy: 0.7269625813353975, [(2, 63), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 32, 0]]
** centroid: 2, normalized-entropy: 0.9738354819891416, [(1, 47), (2, 32)]
*** center 3: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 2) [from [15, 85, 5]]
** centroid: 5, normalized-entropy: 0.5407040970774403, [(1, 15), (2, 85), (3, 5)]
*** center 6: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [64, 7, 0]]
** centroid: 7, normalized-entropy: 0.4645149440905521, [(1, 64), (2, 7)]
finished with 9 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 362,3 => 35,1 => 603), Dict(2 => 383,3 => 33,1 => 584))
[ Info: ===== scores for single classifier: {"micro_f1":0.912,"precision":0.912,"recall":0.912,"macro_recall":0.9380894047235834,"macro_f1":0.8497396414903182,"accuracy":0.912,"class_f1":{"2":0.88659793814433,"3":0.717391304347826,"1":0.9452296819787986},"class_precision":{"2":0.8753180661577609,"3":0.559322033898305,"1":0.9762773722627737},"class_recall":{"2":0.8981723237597912,"3":1.0,"1":0.916095890410959}}
[ Info: ===== scores for 1: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9561279936963974,"macro_f1":0.9698572034046838,"accuracy":0.979,"class_f1":{"2":0.9725490196078431,"3":0.9523809523809523,"1":0.9846416382252559},"class_precision":{"2":0.9738219895287958,"3":1.0,"1":0.9812925170068028},"class_recall":{"2":0.9712793733681462,"3":0.9090909090909091,"1":0.988013698630137}}
[ Info: ===== scores for 5: {"micro_f1":0.977,"precision":0.977,"recall":0.977,"macro_recall":0.9835771427208889,"macro_f1":0.9613666563451858,"accuracy":0.977,"class_f1":{"2":0.9700130378096479,"3":0.9295774647887324,"1":0.9845094664371773},"class_precision":{"2":0.96875,"3":0.868421052631579,"1":0.9896193771626297},"class_recall":{"2":0.9712793733681462,"3":1.0,"1":0.9794520547945206}}
[ Info: ===== scores for 7: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9803954004077399,"macro_f1":0.9544385997448565,"accuracy":0.973,"class_f1":{"2":0.9647058823529412,"3":0.9166666666666666,"1":0.9819432502149613},"class_precision":{"2":0.9659685863874345,"3":0.8461538461538461,"1":0.9861830742659758},"class_recall":{"2":0.9634464751958225,"3":1.0,"1":0.9777397260273972}}
[ Info: ===== scores for 9: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9803954004077399,"macro_f1":0.9505345891451151,"accuracy":0.973,"class_f1":{"2":0.9647058823529412,"3":0.9041095890410958,"1":0.9827882960413082},"class_precision":{"2":0.9659685863874345,"3":0.825,"1":0.9878892733564014},"class_recall":{"2":0.9634464751958225,"3":1.0,"1":0.9777397260273972}}
[ Info: ===== scores for 11: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9803954004077399,"macro_f1":0.9505345891451151,"accuracy":0.973,"class_f1":{"2":0.9647058823529412,"3":0.9041095890410958,"1":0.9827882960413082},"class_precision":{"2":0.9659685863874345,"3":0.825,"1":0.9878892733564014},"class_recall":{"2":0.9634464751958225,"3":1.0,"1":0.9777397260273972}}
(score = 0.974, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.979,"k":1,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9561279936963974,"macro_f1":0.9698572034046838,"accuracy":0.979,"class_f1":{"2":0.9725490196078431,"3":0.9523809523809523,"1":0.9846416382252559},"class_precision":{"2":0.9738219895287958,"3":1.0,"1":0.9812925170068028},"class_recall":{"2":0.9712793733681462,"3":0.9090909090909091,"1":0.988013698630137}}
Test Summary: | Pass  Total
AKNC          |    8      8
[388, 2, 5, 2, 2, 1, 4, 2, 1, 6, 8, 7, 1, 4, 9, 8, 4, 2, 9, 6, 3, 4, 11, 17, 9, 14, 16, 35, 3, 2, 20, 14, 3, 23, 4, 5, 15, 2, 2, 1, 14, 22, 8, 8, 17, 5, 1, 22, 22, 2, 3, 26, 6, 8, 12, 8, 2, 13, 1, 16, 8, 19, 21, 5, 25, 26, 5, 5, 175, 13, 98, 36, 13, 1, 5, 11, 1, 193, 39, 3, 28, 10, 10, 3, 17, 7, 5, 2, 6, 2, 6, 12, 17, 9, 22, 21, 8, 66, 6, 8, 153, 1, 14, 28, 22, 15, 9, 3, 22, 14, 15, 14, 18, 9, 24, 138, 24, 18, 12, 138, 34, 3, 3, 29, 33, 97, 26, 16, 29, 13, 9, 25, 61, 38, 96, 31, 34, 23, 70, 18, 13, 29, 4, 6, 43, 22, 19, 14, 1, 6, 31, 2, 256, 4, 94, 51, 19, 16, 68, 1, 31, 19, 16, 9, 54, 38, 81, 4, 20, 35, 6, 7, 13, 10, 6, 6, 104, 8, 9, 17, 15, 3, 81, 8, 17, 2, 9, 53, 171, 10, 11, 72, 10, 11, 17, 34, 203, 19, 7, 24, 30, 54, 33, 4, 12, 29, 6, 6, 19, 13, 3, 114, 29, 10, 24, 10, 22, 10, 249, 11, 6, 52, 16, 59, 37, 4, 2, 11, 953, 15, 26, 20, 58, 3, 16, 17, 3, 34, 28, 5, 5, 20, 13, 48, 4, 18, 2, 51, 151, 6, 37, 126, 7, 70, 47, 10, 2, 6, 91, 53, 7, 7, 12, 12, 74, 9, 169, 79, 6, 7, 224, 26, 9, 15, 20, 14, 7, 63, 2, 18, 33, 25, 29, 11, 10, 12, 115, 4, 34, 12, 12, 640, 54, 64, 7, 35, 28, 36, 24, 10]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.653, speedup = 0.26050685261546835, eval_ratio = 0.081727)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.42812500000000003,"recall":0.40972222222222227,"f1":null,"seconds":0.00021220184862613678,"exhaustive_search_seconds":0.0003682263195514679,"evaluations":539.59375,"distances_sum":1614.2542513870749}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5838758680555554,"recall":0.5833333333333331,"f1":null,"seconds":0.0003567822277545929,"exhaustive_search_seconds":0.0003682263195514679,"evaluations":723.2734375,"distances_sum":1608.1309996559107}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6909722222222221,"recall":0.6909722222222221,"f1":0.6909722222222221,"seconds":0.0005383938550949097,"exhaustive_search_seconds":0.0003682263195514679,"evaluations":907.5546875,"distances_sum":1555.7236040304683}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7717013888888885,"recall":0.7717013888888885,"f1":0.7717013888888885,"seconds":0.000666176900267601,"exhaustive_search_seconds":0.0003682263195514679,"evaluations":1044.953125,"distances_sum":1527.6594655560277}
KCenters.DeloneInvIndex> reached performance {"precision":0.8220486111111102,"recall":0.8220486111111102,"f1":0.8220486111111102,"seconds":0.0007136687636375427,"exhaustive_search_seconds":0.0003682263195514679,"evaluations":1176.6640625,"distances_sum":1513.3456357920206}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7759999999999997, speedup = 0.5844256844774018, eval_ratio = 0.10691800000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
