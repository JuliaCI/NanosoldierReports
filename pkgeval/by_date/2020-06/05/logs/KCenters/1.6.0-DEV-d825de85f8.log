Julia Version 1.6.0-DEV.180
Commit d825de85f8 (2020-06-05 17:56 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Reexport ──────────────────── v0.2.0
  Installed Missings ──────────────────── v0.4.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.4
  Installed StatsBase ─────────────────── v0.32.2
  Installed OrderedCollections ────────── v1.2.0
  Installed JSON ──────────────────────── v0.21.0
  Installed DataAPI ───────────────────── v1.3.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataStructures ────────────── v0.17.17
  Installed MLDataUtils ───────────────── v0.5.1
  Installed SimilaritySearch ──────────── v0.3.19
  Installed Tables ────────────────────── v1.0.4
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed InvertedIndices ───────────── v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Compat ────────────────────── v3.10.0
  Installed MLDataPattern ─────────────── v0.5.3
  Installed DataFrames ────────────────── v0.20.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.4
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_lIgLH3/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_lIgLH3/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.4
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.932025450070699
[ Info: 0.8321307849884033
[ Info: 0.5548888477186362
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33252118043601514
mean(cdnet.distances) = 0.33969853110611437
mean(crand.distances) = 0.3457321602851152
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.171875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.171875,"f1":null,"seconds":3.889203071594238e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":5.359375,"distances_sum":491.315417132275}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8655740093240101,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.4375,"distances_sum":2187.9885563787125}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7744140625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7744140625,"f1":0.8655740093240101,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.4375,"distances_sum":2187.9885563787125}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9593635531135537,"seconds":6.81169331073761e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.875,"distances_sum":2840.7624226591806}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9593635531135537,"seconds":6.81169331073761e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.875,"distances_sum":2840.7624226591806}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.975188873626374,"seconds":7.309019565582275e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9296875,"distances_sum":2987.5193359573705}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.975188873626374,"seconds":7.309019565582275e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9296875,"distances_sum":2987.5193359573705}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.975188873626374,"seconds":7.309019565582275e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9296875,"distances_sum":2987.5193359573705}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2080078125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2080078125,"f1":null,"seconds":3.7159770727157593e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":5.90625,"distances_sum":488.6620891264343}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8546713702963712,"seconds":5.997717380523682e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.3203125,"distances_sum":1890.2252537913719}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.759765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.759765625,"f1":0.8546713702963712,"seconds":5.997717380523682e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.3203125,"distances_sum":1890.2252537913719}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9197490009990015,"seconds":6.465241312980652e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.5859375,"distances_sum":2263.690721265326}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9331158424908431,"seconds":6.362795829772949e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.671875,"distances_sum":2349.1875470736227}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8617564726939737,"seconds":5.904585123062134e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.375,"distances_sum":1880.4027961062866}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.9331158424908431,"seconds":6.362795829772949e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.671875,"distances_sum":2349.1875470736227}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9670444139194144,"seconds":6.271526217460632e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.8828125,"distances_sum":2580.148900455063}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9565876831501835,"seconds":6.401911377906799e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.84375,"distances_sum":2533.046054059936}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9670444139194144,"seconds":6.271526217460632e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.8828125,"distances_sum":2580.148900455063}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9670444139194144,"seconds":6.271526217460632e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.8828125,"distances_sum":2580.148900455063}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.62109375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.62109375,"f1":0.7524354118104124,"seconds":5.681067705154419e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.890625,"distances_sum":1493.5162356372064}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5869140625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5869140625,"f1":null,"seconds":5.748122930526733e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.6640625,"distances_sum":1362.896701988615}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.62109375,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.62109375,"f1":0.7524354118104124,"seconds":5.681067705154419e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.890625,"distances_sum":1493.5162356372064}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.703125, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.703125,"f1":0.817526744089245,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.203125,"distances_sum":1699.3182074173517}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8994396228771236,"seconds":7.31833279132843e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.9453125,"distances_sum":2113.0086487407175}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.701171875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.701171875,"f1":0.8128430597180605,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.0859375,"distances_sum":1710.7021911639035}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.728515625, conf: {"ssize":5,"bsize":4}, perf: {"precision":null,"recall":0.728515625,"f1":null,"seconds":6.26780092716217e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.1875,"distances_sum":1798.5667716938078}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7021484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7021484375,"f1":0.8152888777888787,"seconds":6.167218089103699e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.1953125,"distances_sum":1696.6332445101486}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8562676906426916,"seconds":6.819143891334534e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.65625,"distances_sum":1863.4920427606671}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.826171875,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.826171875,"f1":0.8994396228771236,"seconds":7.31833279132843e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.9453125,"distances_sum":2113.0086487407175}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9517170329670335,"seconds":7.4803829193115234e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.921875,"distances_sum":2502.543000577504}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9538175366300372,"seconds":7.508322596549988e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.890625,"distances_sum":2525.5936330419163}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9517914377289382,"seconds":7.485970854759216e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.875,"distances_sum":2525.3704832276608}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9303743131868139,"seconds":7.37607479095459e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.921875,"distances_sum":2312.786256125511}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.9037488553113562,"seconds":7.191672921180725e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.9921875,"distances_sum":2115.9727791171545}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.958058608058609,"seconds":6.83218240737915e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.9453125,"distances_sum":2541.490086680972}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9479223901098905,"seconds":6.863847374916077e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.9140625,"distances_sum":2472.6120491292977}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.958058608058609,"seconds":6.83218240737915e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.9453125,"distances_sum":2541.490086680972}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.958058608058609,"seconds":6.83218240737915e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.9453125,"distances_sum":2541.490086680972}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.193359375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.193359375,"f1":null,"seconds":3.7141144275665283e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":6.1875,"distances_sum":432.7078678204711}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2021484375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2021484375,"f1":null,"seconds":3.937631845474243e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":6.3203125,"distances_sum":450.0949989393398}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2021484375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.2021484375,"f1":null,"seconds":3.937631845474243e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":6.3203125,"distances_sum":450.0949989393398}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.60546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.60546875,"f1":0.7405497280497286,"seconds":5.159527063369751e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.5703125,"distances_sum":1344.5289265196593}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.86660422910423,"seconds":6.26780092716217e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.4453125,"distances_sum":1882.6425083298338}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2158203125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2158203125,"f1":null,"seconds":3.974884748458862e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":6.5,"distances_sum":477.6536133344951}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5859375, conf: {"ssize":7,"bsize":3}, perf: {"precision":1.0,"recall":0.5859375,"f1":0.7283355533355541,"seconds":5.025416612625122e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.5546875,"distances_sum":1310.796834574164}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7744140625,"state":{"ssize":6,"bsize":5},"perf":{"precision":1.0,"recall":0.7744140625,"f1":0.86660422910423,"seconds":6.26780092716217e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.4453125,"distances_sum":1882.6425083298338}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9626144688644697,"seconds":7.165595889091492e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.921875,"distances_sum":2442.3661987200608}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9196199633699638,"seconds":6.720423698425293e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7265625,"distances_sum":2154.8435341494032}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.932119963369964,"seconds":6.77257776260376e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7890625,"distances_sum":2219.059007849686}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9626144688644697,"seconds":7.165595889091492e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.921875,"distances_sum":2442.3661987200608}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9626144688644697,"seconds":7.165595889091492e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.921875,"distances_sum":2442.3661987200608}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4384765625, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.4384765625,"f1":0.5933275058275063,"seconds":4.591420292854309e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":6.8125,"distances_sum":980.8617924034073}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1953125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1953125,"f1":null,"seconds":4.088506102561951e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":5.9765625,"distances_sum":492.53104134599533}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8594962329337337,"seconds":7.092952728271484e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.7734375,"distances_sum":1886.2391892352805}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8594962329337337,"seconds":7.092952728271484e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.7734375,"distances_sum":1886.2391892352805}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9334020146520153,"seconds":7.20098614692688e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.9375,"distances_sum":2311.6839692273757}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9163836163836171,"seconds":6.543472409248352e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.9296875,"distances_sum":2195.7450226173746}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8713744588744599,"seconds":6.366521120071411e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.84375,"distances_sum":1940.3525416802956}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9098672161172167,"seconds":6.77257776260376e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.9765625,"distances_sum":2110.135144066362}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9334020146520153,"seconds":7.20098614692688e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.9375,"distances_sum":2311.6839692273757}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9576350732600738,"seconds":7.832422852516174e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.96875,"distances_sum":2458.7960081079}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9635874542124548,"seconds":7.841736078262329e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.953125,"distances_sum":2529.9141412697395}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9634500915750919,"seconds":7.178634405136108e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.9140625,"distances_sum":2543.1277105641675}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9555288461538467,"seconds":7.066875696182251e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.8671875,"distances_sum":2493.4725541537596}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9590289918414923,"seconds":7.154420018196106e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.953125,"distances_sum":2488.2743418875634}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9634500915750919,"seconds":7.178634405136108e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.9140625,"distances_sum":2543.1277105641675}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9634500915750919,"seconds":7.178634405136108e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.9140625,"distances_sum":2543.1277105641675}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2080078125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2080078125,"f1":null,"seconds":3.997236490249634e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":5.9375,"distances_sum":492.930182772283}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8707708957708966,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.359375,"distances_sum":1871.4229371033812}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78125,"f1":0.8707708957708966,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.359375,"distances_sum":1871.4229371033812}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78125,"f1":0.8707708957708966,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.359375,"distances_sum":1871.4229371033812}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.78125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78125,"f1":0.8707708957708966,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.359375,"distances_sum":1871.4229371033812}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.595703125, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.595703125,"f1":0.7300801628926635,"seconds":4.844740033149719e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":7.3671875,"distances_sum":1361.3876456515882}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6953125,"f1":0.8086408383283394,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":7.8359375,"distances_sum":1651.642925185421}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6953125,"f1":0.8086408383283394,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":7.8359375,"distances_sum":1651.642925185421}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8970071595071603,"seconds":6.601214408874512e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.6484375,"distances_sum":2093.8637944552647}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8608818265068274,"seconds":6.102025508880615e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.4921875,"distances_sum":1868.6192579024253}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9115988178488185,"seconds":6.455928087234497e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.765625,"distances_sum":2146.186999017894}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.849609375,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.849609375,"f1":0.9115988178488185,"seconds":6.455928087234497e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.765625,"distances_sum":2146.186999017894}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9565132783882786,"seconds":2.4683773517608643e-5,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.9375,"distances_sum":2470.69072668729}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9532222985347991,"seconds":7.241964340209961e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.90625,"distances_sum":2438.7142178321124}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9739983974358979,"seconds":7.620081305503845e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.984375,"distances_sum":2589.036087720796}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9499656593406598,"seconds":7.268041372299194e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.8984375,"distances_sum":2424.7107075994486}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9586939102564107,"seconds":6.729736924171448e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.9453125,"distances_sum":2447.4446385832766}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.938029678654679,"seconds":6.685033440589905e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.9375,"distances_sum":2322.3919421667265}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9739983974358979,"seconds":7.620081305503845e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.984375,"distances_sum":2589.036087720796}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9739983974358979,"seconds":7.620081305503845e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.984375,"distances_sum":2589.036087720796}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6376953125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6376953125,"f1":0.7687380328005335,"seconds":5.025416612625122e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.28125,"distances_sum":1707.6285143814594}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7265625, conf: {"ssize":2,"bsize":5}, perf: {"precision":null,"recall":0.7265625,"f1":null,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.7578125,"distances_sum":1981.4715788624335}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.322265625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.322265625,"f1":null,"seconds":3.4011900424957275e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":5.09375,"distances_sum":895.5066356477028}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7265625,"state":{"ssize":2,"bsize":5},"perf":{"precision":null,"recall":0.7265625,"f1":null,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.7578125,"distances_sum":1981.4715788624335}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9319654304029309,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.5703125,"distances_sum":2665.6520287524986}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9501888736263742,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7265625,"distances_sum":2766.3225753361967}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9141597985347993,"seconds":5.237758159637451e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.4375,"distances_sum":2529.270101951158}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9447229853479858,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6953125,"distances_sum":2775.420512874576}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9293841575091579,"seconds":5.545094609260559e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.5390625,"distances_sum":2615.9557702770226}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.8970529470529478,"seconds":5.202367901802063e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.328125,"distances_sum":2395.757373368965}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9501888736263742,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7265625,"distances_sum":2766.3225753361967}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9649210164835167,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8046875,"distances_sum":2894.8862623858986}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9704269688644691,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8671875,"distances_sum":2921.051112473727}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.975022893772894,"seconds":5.252659320831299e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8359375,"distances_sum":2981.1364867219613}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":11,"bsize":12}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9695913461538466,"seconds":6.0908496379852295e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.84375,"distances_sum":2913.553442839616}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.966409111721612,"seconds":6.1318278312683105e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.796875,"distances_sum":2900.191544464425}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9670043498168504,"seconds":6.509944796562195e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8203125,"distances_sum":2900.8571530738636}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.975022893772894,"seconds":5.252659320831299e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8359375,"distances_sum":2981.1364867219613}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.975022893772894,"seconds":5.252659320831299e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8359375,"distances_sum":2981.1364867219613}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3798828125, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3798828125,"f1":null,"seconds":2.987682819366455e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":5.7734375,"distances_sum":883.6191634984234}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.37109375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.37109375,"f1":null,"seconds":3.6656856536865234e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":5.6875,"distances_sum":860.3062466771754}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.564453125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.564453125,"f1":0.7058542152292159,"seconds":3.8780272006988525e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":6.8359375,"distances_sum":1334.1364616007345}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.564453125,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.564453125,"f1":0.7058542152292159,"seconds":3.8780272006988525e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":6.8359375,"distances_sum":1334.1364616007345}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.708984375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.708984375,"f1":0.8168423590298598,"seconds":4.509463906288147e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":7.6796875,"distances_sum":1715.5374947526745}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7953882922632928,"seconds":4.1406601667404175e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":7.6953125,"distances_sum":1618.6552020284278}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.894205794205795,"seconds":4.511326551437378e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.078125,"distances_sum":2170.3912553505643}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8893778096903101,"seconds":5.045905709266663e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.03125,"distances_sum":2128.547020584455}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8251953125,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8251953125,"f1":0.894205794205795,"seconds":4.511326551437378e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.078125,"distances_sum":2170.3912553505643}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9589342948717953,"seconds":4.967674612998962e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.796875,"distances_sum":2631.401197607632}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9713198260073264,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.9140625,"distances_sum":2699.4258043008053}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9309065934065939,"seconds":6.796792149543762e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.4375,"distances_sum":2388.3344333382875}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9511618589743597,"seconds":5.252659320831299e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.796875,"distances_sum":2543.554617050797}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9403762903762912,"seconds":4.880130290985107e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.578125,"distances_sum":2465.89944902002}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9416609432234437,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.6875,"distances_sum":2494.7852904802553}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.8991133866133874,"seconds":4.898756742477417e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.171875,"distances_sum":2219.6060799005522}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9431464368964374,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.7421875,"distances_sum":2477.2851171990224}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9713198260073264,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.9140625,"distances_sum":2699.4258043008053}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9713198260073264,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.9140625,"distances_sum":2699.4258043008053}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5126953125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5126953125,"f1":null,"seconds":4.777684807777405e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":7.2421875,"distances_sum":1191.9932839357862}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7958984375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7958984375,"f1":0.8760300463425473,"seconds":6.055459380149841e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.28125,"distances_sum":1999.260698514032}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7958984375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7958984375,"f1":0.8760300463425473,"seconds":6.055459380149841e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.28125,"distances_sum":1999.260698514032}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9457074175824179,"seconds":6.6086649894714355e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.78125,"distances_sum":2464.4808119755066}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9523466117216124,"seconds":6.59748911857605e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.8125,"distances_sum":2495.1274845386874}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9523466117216124,"seconds":6.59748911857605e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.8125,"distances_sum":2495.1274845386874}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9565533424908431,"seconds":6.193295121192932e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.8359375,"distances_sum":2554.3814293497703}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.965682234432235,"seconds":5.239620804786682e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.859375,"distances_sum":2598.3548294218185}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9644948801198804,"seconds":5.103647708892822e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.921875,"distances_sum":2575.74542222827}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9637877747252753,"seconds":5.086883902549744e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.859375,"distances_sum":2584.7500204440157}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.965682234432235,"seconds":5.239620804786682e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.859375,"distances_sum":2598.3548294218185}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.965682234432235,"seconds":5.239620804786682e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.859375,"distances_sum":2598.3548294218185}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1708984375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1708984375,"f1":null,"seconds":3.0603259801864624e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":5.1796875,"distances_sum":377.70219779484825}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7779234654234662,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.28125,"distances_sum":1479.124809048217}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8045879467754475,"seconds":4.390254616737366e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.4453125,"distances_sum":1647.4118297889986}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6923828125,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6923828125,"f1":0.8045879467754475,"seconds":4.390254616737366e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.4453125,"distances_sum":1647.4118297889986}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8455386627261634,"seconds":4.408881068229675e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.75,"distances_sum":1825.4488380497603}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.928677572427573,"seconds":4.889443516731262e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.4921875,"distances_sum":2300.456896316518}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9510302197802201,"seconds":4.945322871208191e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6796875,"distances_sum":2519.24196710597}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.904144293206794,"seconds":5.284324288368225e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.15625,"distances_sum":2144.0564278824354}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9510302197802201,"seconds":4.945322871208191e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6796875,"distances_sum":2519.24196710597}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9695169413919419,"seconds":4.9602240324020386e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.890625,"distances_sum":2589.1047015826125}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9677483974358979,"seconds":6.303191184997559e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8515625,"distances_sum":2600.885631594775}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9690876831501835,"seconds":6.249174475669861e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.859375,"distances_sum":2581.407961467234}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9578353937728943,"seconds":5.02169132232666e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.7890625,"distances_sum":2521.395144233371}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9695169413919419,"seconds":4.9602240324020386e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.890625,"distances_sum":2589.1047015826125}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9695169413919419,"seconds":4.9602240324020386e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.890625,"distances_sum":2589.1047015826125}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5361328125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5361328125,"f1":0.681444770507271,"seconds":3.6749988794326782e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.3671875,"distances_sum":1237.8130742474161}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4990234375, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.4990234375,"f1":null,"seconds":3.339722752571106e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.109375,"distances_sum":1108.9683350076323}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5361328125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5361328125,"f1":0.681444770507271,"seconds":3.6749988794326782e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.3671875,"distances_sum":1237.8130742474161}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8686740342990351,"seconds":4.408881068229675e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.2109375,"distances_sum":1952.6996560789091}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8893549159174168,"seconds":4.721805453300476e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.265625,"distances_sum":2077.5188818117645}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.928079212454213,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.6640625,"distances_sum":2322.1752178753954}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9133101273726282,"seconds":5.153939127922058e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.375,"distances_sum":2211.485208929801}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8613386613386621,"seconds":4.364177584648132e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.046875,"distances_sum":1933.3214063096134}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7843604312354321,"seconds":4.038214683532715e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.765625,"distances_sum":1534.976361950791}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8759765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8759765625,"f1":0.928079212454213,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.6640625,"distances_sum":2322.1752178753954}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.975784111721612,"seconds":4.9620866775512695e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.890625,"distances_sum":2666.896605916621}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.9814560439560445,"seconds":4.9620866775512695e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9609375,"distances_sum":2701.0891776362464}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9330070970695977,"seconds":4.732981324195862e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7421875,"distances_sum":2340.7670817195044}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9659626831501839,"seconds":4.880130290985107e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8515625,"distances_sum":2609.1414107466876}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.94579378954379,"seconds":4.868954420089722e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7578125,"distances_sum":2465.6144249715603}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9437728937728941,"seconds":4.824250936508179e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7109375,"distances_sum":2443.514161250167}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9658203125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9814560439560445,"seconds":4.9620866775512695e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9609375,"distances_sum":2701.0891776362464}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9658203125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9814560439560445,"seconds":4.9620866775512695e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9609375,"distances_sum":2701.0891776362464}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41015625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.41015625,"f1":null,"seconds":3.0566006898880005e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":5.9921875,"distances_sum":971.3625200520339}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5390625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5390625,"f1":0.6827422577422582,"seconds":4.149973392486572e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.796875,"distances_sum":1295.135635983659}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3583984375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3583984375,"f1":null,"seconds":2.7921050786972046e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":5.5078125,"distances_sum":848.1989775323275}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5390625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5390625,"f1":0.6827422577422582,"seconds":4.149973392486572e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.796875,"distances_sum":1295.135635983659}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7041015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7041015625,"f1":0.8190054736929745,"seconds":4.108995199203491e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.7734375,"distances_sum":1806.015035360494}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8724702380952388,"seconds":4.455447196960449e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.03125,"distances_sum":2107.7675926935717}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6279296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6279296875,"f1":0.7601414210789219,"seconds":5.545094609260559e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.375,"distances_sum":1594.586985403902}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.806640625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.806640625,"f1":0.8845706376956385,"seconds":5.256384611129761e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.1640625,"distances_sum":2171.3778929797472}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.806640625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.806640625,"f1":0.8845706376956385,"seconds":5.256384611129761e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.1640625,"distances_sum":2171.3778929797472}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9394891566766572,"seconds":4.973262548446655e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7421875,"distances_sum":2418.871336913546}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9511275183150188,"seconds":4.751607775688171e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.703125,"distances_sum":2546.6152165786652}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9256930569430575,"seconds":6.452202796936035e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.515625,"distances_sum":2392.5978975026574}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9613896520146527,"seconds":6.5229833126068115e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.765625,"distances_sum":2631.932797147104}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9406192765567775,"seconds":7.199123501777649e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6875,"distances_sum":2471.35865128595}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9613896520146527,"seconds":6.5229833126068115e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.765625,"distances_sum":2631.932797147104}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9613896520146527,"seconds":6.5229833126068115e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.765625,"distances_sum":2631.932797147104}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2216796875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2216796875,"f1":null,"seconds":4.231929779052734e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":6.296875,"distances_sum":506.9677426185682}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2216796875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2216796875,"f1":null,"seconds":4.231929779052734e-6,"exhaustive_search_seconds":1.5329569578170776e-6,"evaluations":6.296875,"distances_sum":506.9677426185682}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2392578125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2392578125,"f1":null,"seconds":2.5257468223571777e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":5.8515625,"distances_sum":466.8072328766072}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.568359375,"f1":0.7089360292485297,"seconds":3.6209821701049805e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":7.5,"distances_sum":1016.6684564859903}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.568359375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.568359375,"f1":0.7089360292485297,"seconds":3.6209821701049805e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":7.5,"distances_sum":1016.6684564859903}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8553743131868142,"seconds":4.405155777931213e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.40625,"distances_sum":1504.2886772625632}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7587890625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7587890625,"f1":0.8553743131868142,"seconds":4.405155777931213e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.40625,"distances_sum":1504.2886772625632}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8713255494505503,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.3671875,"distances_sum":1549.1654303000548}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9369906135531141,"seconds":6.621703505516052e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.875,"distances_sum":1899.1799592700359}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.9369906135531141,"seconds":6.621703505516052e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.875,"distances_sum":1899.1799592700359}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8896484375,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.9369906135531141,"seconds":6.621703505516052e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.875,"distances_sum":1899.1799592700359}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.8060011169386178,"seconds":4.941597580909729e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.0625,"distances_sum":1354.561725604362}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8766691641691652,"seconds":4.7292560338974e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.5703125,"distances_sum":1621.9589225287154}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.408203125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.408203125,"f1":null,"seconds":3.213062882423401e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":6.578125,"distances_sum":820.5706446841134}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.791015625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.791015625,"f1":0.8766691641691652,"seconds":4.7292560338974e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.5703125,"distances_sum":1621.9589225287154}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9370395229770235,"seconds":6.845220923423767e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.78125,"distances_sum":1937.7915817831085}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8917129745254752,"seconds":6.381422281265259e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.71875,"distances_sum":1633.7397157408388}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9367247335997342,"seconds":6.845220923423767e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.8671875,"distances_sum":1893.658275805218}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8916015625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.9370395229770235,"seconds":6.845220923423767e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.78125,"distances_sum":1937.7915817831085}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9457474816849821,"seconds":6.703659892082214e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.7890625,"distances_sum":2001.7136645719104}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9635989010989015,"seconds":7.5660645961761475e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.8515625,"distances_sum":2116.6387951444212}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9635989010989015,"seconds":7.5660645961761475e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.8515625,"distances_sum":2116.6387951444212}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9635989010989015,"seconds":7.5660645961761475e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":8.8515625,"distances_sum":2116.6387951444212}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5361328125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5361328125,"f1":0.679912795537796,"seconds":4.842877388000488e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":6.875,"distances_sum":1034.9964904561796}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.39453125, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.39453125,"f1":null,"seconds":4.276633262634277e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":6.0234375,"distances_sum":725.5485950884344}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5361328125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5361328125,"f1":0.679912795537796,"seconds":4.842877388000488e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":6.875,"distances_sum":1034.9964904561796}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66015625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.66015625,"f1":0.7810536685536693,"seconds":5.7015568017959595e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.7421875,"distances_sum":1288.7697195278724}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.932174596237097,"seconds":6.940215826034546e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.578125,"distances_sum":1904.1212878991391}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.932174596237097,"seconds":6.940215826034546e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.578125,"distances_sum":1904.1212878991391}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9690876831501839,"seconds":6.707385182380676e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.875,"distances_sum":2135.0867026202754}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9496768856143863,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.78125,"distances_sum":2012.7057981138403}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9667067307692313,"seconds":6.893649697303772e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.890625,"distances_sum":2119.3136905721212}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9488756035631042,"seconds":6.936490535736084e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.75,"distances_sum":2007.088725353371}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690876831501839,"seconds":6.707385182380676e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.875,"distances_sum":2135.0867026202754}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690876831501839,"seconds":6.707385182380676e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.875,"distances_sum":2135.0867026202754}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.7981865356865365,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.8515625,"distances_sum":1388.4693348774995}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5556640625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5556640625,"f1":0.6994835026085032,"seconds":5.273148417472839e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.234375,"distances_sum":1096.9437398013863}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1376953125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1376953125,"f1":null,"seconds":3.2782554626464844e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":4.2890625,"distances_sum":258.6855265900475}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6826171875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6826171875,"f1":0.7981865356865365,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.8515625,"distances_sum":1388.4693348774995}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9249599358974365,"seconds":6.85080885887146e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.5546875,"distances_sum":1933.3980523872958}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.869140625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.869140625,"f1":0.9249599358974365,"seconds":6.85080885887146e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.5546875,"distances_sum":1933.3980523872958}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9513111888111894,"seconds":6.3944607973098755e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7421875,"distances_sum":2145.7527060542643}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.958968635531136,"seconds":4.98257577419281e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7578125,"distances_sum":2156.936449822166}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.958968635531136,"seconds":4.98257577419281e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7578125,"distances_sum":2156.936449822166}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.958968635531136,"seconds":4.98257577419281e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7578125,"distances_sum":2156.936449822166}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3896484375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3896484375,"f1":null,"seconds":3.548339009284973e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":5.7578125,"distances_sum":763.3449753017153}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8710888070263079,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.546875,"distances_sum":1543.18119652}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.787109375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.787109375,"f1":0.8710888070263079,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.546875,"distances_sum":1543.18119652}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8856695387945397,"seconds":5.455687642097473e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.5234375,"distances_sum":1640.1736065147552}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9551568223443229,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.734375,"distances_sum":2012.1120581017722}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9207365551115558,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.7265625,"distances_sum":1781.3915047746113}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9551568223443229,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.734375,"distances_sum":2012.1120581017722}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9658310439560446,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8515625,"distances_sum":2057.477601674593}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9658310439560446,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8515625,"distances_sum":2057.477601674593}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9658310439560446,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8515625,"distances_sum":2057.477601674593}}, n: 9
mean(cfft.distances) = 0.3355279996644686
mean(cdnet.distances) = 0.35648864621270815
mean(crand.distances) = 0.35595494494294583
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.9177777777777777
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8888888888888888
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8955555555555555
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8644444444444445
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9111111111111111
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8999999999999999
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9444444444444445
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9088888888888889
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9088888888888889
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9311111111111111
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9133333333333334
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9266666666666667
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9266666666666667
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8822222222222224
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8688888888888888
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9244444444444445
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9088888888888889
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8799999999999999
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8888888888888888
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8911111111111111
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8888888888888888
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9155555555555556
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9155555555555556
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9133333333333332
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 1, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 1, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 1, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 1, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 1, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 1, 3, 1, 3]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 1, 3, 1, 3]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.4934854018688202] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 26]]
** centroid: 1, normalized-entropy: 0.22853814395352806, [(2, 1), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 18, 4]]
** centroid: 6, normalized-entropy: 0.6840384356390419, [(2, 18), (3, 4)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 10: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 2, 4]]
** centroid: 12, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 4)]
finished with 14 centroids; started with 12
acc = 0.98
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.17821173805969995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17821173805969995, 0.15592976012784573] ***
*** starting iteration: 2; err: [Inf, 0.17821173805969995, 0.15592976012784573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17821173805969995, 0.15592976012784573, 0.15005084838964292] ***
*** starting iteration: 3; err: [Inf, 0.17821173805969995, 0.15592976012784573, 0.15005084838964292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17821173805969995, 0.15592976012784573, 0.15005084838964292, 0.14832697981023216] ***
*** finished computation of 7 references, err: [Inf, 0.17821173805969995, 0.15592976012784573, 0.15005084838964292, 0.14832697981023216] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [64, 47, 0]]
** centroid: 1, normalized-entropy: 0.983013379603719, [(1, 64), (2, 47)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 5, 0]]
** centroid: 2, normalized-entropy: 0.34351974100740135, [(1, 73), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 105, 17]]
** centroid: 3, normalized-entropy: 0.582518914151422, [(2, 105), (3, 17)]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 85, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [104, 2, 0]]
** centroid: 5, normalized-entropy: 0.13503620280212753, [(1, 104), (2, 2)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2092473410870014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2092473410870014, 0.16381388050511012] ***
*** starting iteration: 2; err: [Inf, 0.2092473410870014, 0.16381388050511012] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2092473410870014, 0.16381388050511012, 0.15263473432276514] ***
*** starting iteration: 3; err: [Inf, 0.2092473410870014, 0.16381388050511012, 0.15263473432276514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2092473410870014, 0.16381388050511012, 0.15263473432276514, 0.1504147026821904] ***
*** finished computation of 7 references, err: [Inf, 0.2092473410870014, 0.16381388050511012, 0.15263473432276514, 0.1504147026821904] ***
*** center 1: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [74, 42, 0]]
** centroid: 2, normalized-entropy: 0.9443871950133461, [(1, 74), (2, 42)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 20, 0]]
** centroid: 3, normalized-entropy: 0.7686913027030167, [(1, 69), (2, 20)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 123, 13]]
** centroid: 4, normalized-entropy: 0.4548525435109225, [(2, 123), (3, 13)]
*** center 5: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [81, 47, 0]]
** centroid: 6, normalized-entropy: 0.9484880760741908, [(1, 81), (2, 47)]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2620548289262227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2620548289262227, 0.18561274477495704] ***
*** starting iteration: 2; err: [Inf, 0.2620548289262227, 0.18561274477495704] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2620548289262227, 0.18561274477495704, 0.15826866629350556] ***
*** starting iteration: 3; err: [Inf, 0.2620548289262227, 0.18561274477495704, 0.15826866629350556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2620548289262227, 0.18561274477495704, 0.15826866629350556, 0.15165392256368404] ***
*** finished computation of 7 references, err: [Inf, 0.2620548289262227, 0.18561274477495704, 0.15826866629350556, 0.15165392256368404] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 111, 0]]
** centroid: 1, normalized-entropy: 0.17556502585750275, [(1, 3), (2, 111)]
*** center 2: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [83, 8, 0]]
** centroid: 3, normalized-entropy: 0.4294619720471057, [(1, 83), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [31, 62, 0]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(1, 31), (2, 62)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [111, 2, 0]]
** centroid: 5, normalized-entropy: 0.12831912909782706, [(1, 111), (2, 2)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 65, 16]]
** centroid: 6, normalized-entropy: 0.7169622516889513, [(2, 65), (3, 16)]
*** center 7: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35220621184849443] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35220621184849443, 0.2368350980546454] ***
*** starting iteration: 2; err: [Inf, 0.35220621184849443, 0.2368350980546454] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35220621184849443, 0.2368350980546454, 0.23489309795692317] ***
*** starting iteration: 3; err: [Inf, 0.35220621184849443, 0.2368350980546454, 0.23489309795692317] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35220621184849443, 0.2368350980546454, 0.23489309795692317, 0.2339588160748067] ***
*** finished computation of 3 references, err: [Inf, 0.35220621184849443, 0.2368350980546454, 0.23489309795692317, 0.2339588160748067] ***
*** center 1: selecting labels [1] (freq >= 1) [from [256, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [26, 178, 13]]
** centroid: 2, normalized-entropy: 0.5328272064398099, [(1, 26), (2, 178), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [140, 54, 0]]
** centroid: 3, normalized-entropy: 0.8531935252328874, [(1, 140), (2, 54)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3719337047726988] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719337047726988, 0.23377646457521187] ***
*** starting iteration: 2; err: [Inf, 0.3719337047726988, 0.23377646457521187] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719337047726988, 0.23377646457521187, 0.23142987941817633] ***
*** starting iteration: 3; err: [Inf, 0.3719337047726988, 0.23377646457521187, 0.23142987941817633] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719337047726988, 0.23377646457521187, 0.23142987941817633, 0.22986144046375956] ***
*** starting iteration: 4; err: [Inf, 0.3719337047726988, 0.23377646457521187, 0.23142987941817633, 0.22986144046375956] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719337047726988, 0.23377646457521187, 0.23142987941817633, 0.22986144046375956, 0.2291561236697203] ***
*** finished computation of 3 references, err: [Inf, 0.3719337047726988, 0.23377646457521187, 0.23142987941817633, 0.22986144046375956, 0.2291561236697203] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [89, 151, 16]]
** centroid: 1, normalized-entropy: 0.7755028925732013, [(1, 89), (2, 151), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [206, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [108, 97, 0]]
** centroid: 3, normalized-entropy: 0.9979220705990755, [(1, 108), (2, 97)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.20213810360973683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20213810360973683, 0.15452507744800556] ***
*** finished computation of 7 references, err: [Inf, 0.20213810360973683, 0.15452507744800556] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 93, 11]]
** centroid: 1, normalized-entropy: 0.48702128315977294, [(2, 93), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 8, 0]]
** centroid: 3, normalized-entropy: 0.481225663841737, [(1, 69), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [97, 12, 0]]
** centroid: 4, normalized-entropy: 0.5001926210998139, [(1, 97), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 34, 0]]
** centroid: 5, normalized-entropy: 0.9215608652945444, [(1, 67), (2, 34)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 97, 6]]
** centroid: 6, normalized-entropy: 0.32046828741158423, [(2, 97), (3, 6)]
*** center 7: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19027896502545324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19027896502545324, 0.15338273097187102] ***
*** finished computation of 7 references, err: [Inf, 0.19027896502545324, 0.15338273097187102] ***
*** center 1: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 51, 13]]
** centroid: 2, normalized-entropy: 0.7281342378690551, [(2, 51), (3, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [85, 58, 0]]
** centroid: 4, normalized-entropy: 0.9741291879035374, [(1, 85), (2, 58)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [35, 68, 0]]
** centroid: 5, normalized-entropy: 0.9246327718618892, [(1, 35), (2, 68)]
*** center 6: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 55, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20227087689828926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20227087689828926, 0.15214529091274476] ***
*** finished computation of 7 references, err: [Inf, 0.20227087689828926, 0.15214529091274476] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [35, 93, 0]]
** centroid: 1, normalized-entropy: 0.8463541013584317, [(1, 35), (2, 93)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 5, 0]]
** centroid: 2, normalized-entropy: 0.38705142139219795, [(1, 61), (2, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 51, 16]]
** centroid: 4, normalized-entropy: 0.7930490047779772, [(2, 51), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [80, 7, 0]]
** centroid: 5, normalized-entropy: 0.40379715049939235, [(1, 80), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 92, 0]]
** centroid: 6, normalized-entropy: 0.24988229283318547, [(1, 4), (2, 92)]
*** center 7: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.47943228557034656] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47943228557034656, 0.31170715844571906] ***
*** starting iteration: 2; err: [Inf, 0.47943228557034656, 0.31170715844571906] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47943228557034656, 0.31170715844571906, 0.29394380615145954] ***
*** starting iteration: 3; err: [Inf, 0.47943228557034656, 0.31170715844571906, 0.29394380615145954] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47943228557034656, 0.31170715844571906, 0.29394380615145954, 0.2877119638280266] ***
*** starting iteration: 4; err: [Inf, 0.47943228557034656, 0.31170715844571906, 0.29394380615145954, 0.2877119638280266] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47943228557034656, 0.31170715844571906, 0.29394380615145954, 0.2877119638280266, 0.2860104346622688] ***
*** starting iteration: 5; err: [Inf, 0.47943228557034656, 0.31170715844571906, 0.29394380615145954, 0.2877119638280266, 0.2860104346622688] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47943228557034656, 0.31170715844571906, 0.29394380615145954, 0.2877119638280266, 0.2860104346622688, 0.2849495575005362] ***
*** starting iteration: 6; err: [Inf, 0.47943228557034656, 0.31170715844571906, 0.29394380615145954, 0.2877119638280266, 0.2860104346622688, 0.2849495575005362] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47943228557034656, 0.31170715844571906, 0.29394380615145954, 0.2877119638280266, 0.2860104346622688, 0.2849495575005362, 0.28475469944987436] ***
*** finished computation of 3 references, err: [Inf, 0.47943228557034656, 0.31170715844571906, 0.29394380615145954, 0.2877119638280266, 0.2860104346622688, 0.2849495575005362, 0.28475469944987436] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [74, 168, 17]]
** centroid: 1, normalized-entropy: 0.7441015043861153, [(1, 74), (2, 168), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [104, 76, 0]]
** centroid: 2, normalized-entropy: 0.9824740868386409, [(1, 104), (2, 76)]
*** center 3: selecting labels [1] (freq >= 2) [from [227, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.41942079657775305] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41942079657775305, 0.31845549428821546] ***
*** starting iteration: 2; err: [Inf, 0.41942079657775305, 0.31845549428821546] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41942079657775305, 0.31845549428821546, 0.30450428842191307] ***
*** starting iteration: 3; err: [Inf, 0.41942079657775305, 0.31845549428821546, 0.30450428842191307] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41942079657775305, 0.31845549428821546, 0.30450428842191307, 0.30194602902096207] ***
*** starting iteration: 4; err: [Inf, 0.41942079657775305, 0.31845549428821546, 0.30450428842191307, 0.30194602902096207] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41942079657775305, 0.31845549428821546, 0.30450428842191307, 0.30194602902096207, 0.3017399106607556] ***
*** finished computation of 3 references, err: [Inf, 0.41942079657775305, 0.31845549428821546, 0.30450428842191307, 0.30194602902096207, 0.3017399106607556] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [248, 3, 0]]
** centroid: 1, normalized-entropy: 0.09347354407782983, [(1, 248), (2, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [3, 190, 13]]
** centroid: 2, normalized-entropy: 0.28265021778753374, [(1, 3), (2, 190), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [171, 39, 0]]
** centroid: 3, normalized-entropy: 0.6924194863274741, [(1, 171), (2, 39)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.40104771176188336] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40104771176188336, 0.29863603928194815] ***
*** starting iteration: 2; err: [Inf, 0.40104771176188336, 0.29863603928194815] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40104771176188336, 0.29863603928194815, 0.29265810227554956] ***
*** starting iteration: 3; err: [Inf, 0.40104771176188336, 0.29863603928194815, 0.29265810227554956] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40104771176188336, 0.29863603928194815, 0.29265810227554956, 0.29215005837727165] ***
*** finished computation of 3 references, err: [Inf, 0.40104771176188336, 0.29863603928194815, 0.29265810227554956, 0.29215005837727165] ***
*** center 1: selecting labels [1] (freq >= 2) [from [205, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [107, 100, 0]]
** centroid: 2, normalized-entropy: 0.9991749453138412, [(1, 107), (2, 100)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [91, 148, 16]]
** centroid: 3, normalized-entropy: 0.7802540411050317, [(1, 91), (2, 148), (3, 16)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.355191519776885] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.355191519776885, 0.25818615248175086] ***
*** starting iteration: 2; err: [Inf, 0.355191519776885, 0.25818615248175086] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.355191519776885, 0.25818615248175086, 0.2351665003728625] ***
*** starting iteration: 3; err: [Inf, 0.355191519776885, 0.25818615248175086, 0.2351665003728625] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.355191519776885, 0.25818615248175086, 0.2351665003728625, 0.22840646936316267] ***
*** finished computation of 3 references, err: [Inf, 0.355191519776885, 0.25818615248175086, 0.2351665003728625, 0.22840646936316267] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [104, 111, 1]]
** centroid: 1, normalized-entropy: 0.9992352130706913, [(1, 104), (2, 111)]
*** center 2: selecting labels [1] (freq >= 2) [from [217, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [84, 133, 16]]
** centroid: 3, normalized-entropy: 0.7935313023538564, [(1, 84), (2, 133), (3, 16)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.44299556329466594] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44299556329466594, 0.2720576546809774] ***
*** starting iteration: 2; err: [Inf, 0.44299556329466594, 0.2720576546809774] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44299556329466594, 0.2720576546809774, 0.271397045892391] ***
*** finished computation of 3 references, err: [Inf, 0.44299556329466594, 0.2720576546809774, 0.271397045892391] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [239, 27, 0]]
** centroid: 1, normalized-entropy: 0.4737443540507663, [(1, 239), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [125, 91, 0]]
** centroid: 2, normalized-entropy: 0.9820525584558657, [(1, 125), (2, 91)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [58, 114, 13]]
** centroid: 3, normalized-entropy: 0.772419995185161, [(1, 58), (2, 114), (3, 13)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3094314659681769] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3094314659681769, 0.2427013405896109] ***
*** starting iteration: 2; err: [Inf, 0.3094314659681769, 0.2427013405896109] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3094314659681769, 0.2427013405896109, 0.23174714765649684] ***
*** starting iteration: 3; err: [Inf, 0.3094314659681769, 0.2427013405896109, 0.23174714765649684] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3094314659681769, 0.2427013405896109, 0.23174714765649684, 0.22948200864901674] ***
*** finished computation of 3 references, err: [Inf, 0.3094314659681769, 0.2427013405896109, 0.23174714765649684, 0.22948200864901674] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [89, 150, 16]]
** centroid: 1, normalized-entropy: 0.7766548502203244, [(1, 89), (2, 150), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [204, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [110, 98, 0]]
** centroid: 3, normalized-entropy: 0.9975977315497319, [(1, 110), (2, 98)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2532282337013565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2532282337013565, 0.16882228563426416] ***
*** starting iteration: 2; err: [Inf, 0.2532282337013565, 0.16882228563426416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2532282337013565, 0.16882228563426416, 0.1510296275862982] ***
*** starting iteration: 3; err: [Inf, 0.2532282337013565, 0.16882228563426416, 0.1510296275862982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2532282337013565, 0.16882228563426416, 0.1510296275862982, 0.14568027272798098] ***
*** starting iteration: 4; err: [Inf, 0.2532282337013565, 0.16882228563426416, 0.1510296275862982, 0.14568027272798098] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2532282337013565, 0.16882228563426416, 0.1510296275862982, 0.14568027272798098, 0.14331461945492718] ***
*** starting iteration: 5; err: [Inf, 0.2532282337013565, 0.16882228563426416, 0.1510296275862982, 0.14568027272798098, 0.14331461945492718] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2532282337013565, 0.16882228563426416, 0.1510296275862982, 0.14568027272798098, 0.14331461945492718, 0.1426857051120752] ***
*** finished computation of 7 references, err: [Inf, 0.2532282337013565, 0.16882228563426416, 0.1510296275862982, 0.14568027272798098, 0.14331461945492718, 0.1426857051120752] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [71, 18, 0]]
** centroid: 1, normalized-entropy: 0.7263997735417457, [(1, 71), (2, 18)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 71, 17]]
** centroid: 2, normalized-entropy: 0.7080803256135676, [(2, 71), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [38, 74, 0]]
** centroid: 4, normalized-entropy: 0.9241335419915458, [(1, 38), (2, 74)]
*** center 5: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [21, 81, 0]]
** centroid: 7, normalized-entropy: 0.7335379291086666, [(1, 21), (2, 81)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2090329524489871] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2090329524489871, 0.17563892491133898] ***
*** starting iteration: 2; err: [Inf, 0.2090329524489871, 0.17563892491133898] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2090329524489871, 0.17563892491133898, 0.160727816999707] ***
*** starting iteration: 3; err: [Inf, 0.2090329524489871, 0.17563892491133898, 0.160727816999707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2090329524489871, 0.17563892491133898, 0.160727816999707, 0.15476690721733014] ***
*** starting iteration: 4; err: [Inf, 0.2090329524489871, 0.17563892491133898, 0.160727816999707, 0.15476690721733014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2090329524489871, 0.17563892491133898, 0.160727816999707, 0.15476690721733014, 0.1533420882404208] ***
*** starting iteration: 5; err: [Inf, 0.2090329524489871, 0.17563892491133898, 0.160727816999707, 0.15476690721733014, 0.1533420882404208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2090329524489871, 0.17563892491133898, 0.160727816999707, 0.15476690721733014, 0.1533420882404208, 0.1524615011504688] ***
*** finished computation of 7 references, err: [Inf, 0.2090329524489871, 0.17563892491133898, 0.160727816999707, 0.15476690721733014, 0.1533420882404208, 0.1524615011504688] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [42, 41, 0]]
** centroid: 1, normalized-entropy: 0.9998952874186191, [(1, 42), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 9, 0]]
** centroid: 2, normalized-entropy: 0.47983202361612853, [(1, 78), (2, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [79, 56, 0]]
** centroid: 3, normalized-entropy: 0.9789596360047792, [(1, 79), (2, 56)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [73, 5, 0]]
** centroid: 5, normalized-entropy: 0.34351974100740135, [(1, 73), (2, 5)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 121, 13]]
** centroid: 6, normalized-entropy: 0.4594610707110552, [(2, 121), (3, 13)]
*** center 7: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18766228868688892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18766228868688892, 0.15966423676032265] ***
*** starting iteration: 2; err: [Inf, 0.18766228868688892, 0.15966423676032265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18766228868688892, 0.15966423676032265, 0.15027717345762814] ***
*** starting iteration: 3; err: [Inf, 0.18766228868688892, 0.15966423676032265, 0.15027717345762814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18766228868688892, 0.15966423676032265, 0.15027717345762814, 0.1457335507759693] ***
*** starting iteration: 4; err: [Inf, 0.18766228868688892, 0.15966423676032265, 0.15027717345762814, 0.1457335507759693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18766228868688892, 0.15966423676032265, 0.15027717345762814, 0.1457335507759693, 0.14368690798307646] ***
*** starting iteration: 5; err: [Inf, 0.18766228868688892, 0.15966423676032265, 0.15027717345762814, 0.1457335507759693, 0.14368690798307646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18766228868688892, 0.15966423676032265, 0.15027717345762814, 0.1457335507759693, 0.14368690798307646, 0.14328673905609218] ***
*** finished computation of 7 references, err: [Inf, 0.18766228868688892, 0.15966423676032265, 0.15027717345762814, 0.1457335507759693, 0.14368690798307646, 0.14328673905609218] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [31, 61, 0]]
** centroid: 1, normalized-entropy: 0.9218764863469129, [(1, 31), (2, 61)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 77, 16]]
** centroid: 2, normalized-entropy: 0.6623570516079519, [(2, 77), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [85, 17, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 85), (2, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [102, 2, 0]]
** centroid: 5, normalized-entropy: 0.13709947889981755, [(1, 102), (2, 2)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 91, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25035038701322926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25035038701322926, 0.15561041908685463] ***
*** finished computation of 7 references, err: [Inf, 0.25035038701322926, 0.15561041908685463] ***
*** center 1: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 82, 17]]
** centroid: 3, normalized-entropy: 0.6616179061408356, [(2, 82), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 75, 0]]
** centroid: 5, normalized-entropy: 0.7578784625383954, [(1, 21), (2, 75)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [29, 68, 0]]
** centroid: 6, normalized-entropy: 0.8800270477157599, [(1, 29), (2, 68)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [101, 19, 0]]
** centroid: 7, normalized-entropy: 0.6303074079971902, [(1, 101), (2, 19)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.225702164592738] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.225702164592738, 0.17332922552350624] ***
*** finished computation of 7 references, err: [Inf, 0.225702164592738, 0.17332922552350624] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [3, 170, 13]]
** centroid: 1, normalized-entropy: 0.30469998007590304, [(1, 3), (2, 170), (3, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [137, 14, 0]]
** centroid: 3, normalized-entropy: 0.44546855207740615, [(1, 137), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [37, 42, 0]]
** centroid: 4, normalized-entropy: 0.9971085167216716, [(1, 37), (2, 42)]
*** center 5: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [68, 6, 0]]
** centroid: 7, normalized-entropy: 0.40597703847557104, [(1, 68), (2, 6)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.17912778749048286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17912778749048286, 0.1560222620557787] ***
*** finished computation of 7 references, err: [Inf, 0.17912778749048286, 0.1560222620557787] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [91, 55, 0]]
** centroid: 1, normalized-entropy: 0.9556869116064719, [(1, 91), (2, 55)]
*** center 2: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 39, 0]]
** centroid: 3, normalized-entropy: 0.9973806632063373, [(1, 44), (2, 39)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 62, 16]]
** centroid: 4, normalized-entropy: 0.7320666900931937, [(2, 62), (3, 16)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [141, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [53, 30, 0]]
** centroid: 7, normalized-entropy: 0.9438767571287909, [(1, 53), (2, 30)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34460899718777016] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34460899718777016, 0.25387677423342747] ***
*** starting iteration: 2; err: [Inf, 0.34460899718777016, 0.25387677423342747] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34460899718777016, 0.25387677423342747, 0.2403793321536468] ***
*** starting iteration: 3; err: [Inf, 0.34460899718777016, 0.25387677423342747, 0.2403793321536468] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34460899718777016, 0.25387677423342747, 0.2403793321536468, 0.23729494380605248] ***
*** finished computation of 3 references, err: [Inf, 0.34460899718777016, 0.25387677423342747, 0.2403793321536468, 0.23729494380605248] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [2, 186, 17]]
** centroid: 1, normalized-entropy: 0.30938029251835863, [(1, 2), (2, 186), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [234, 7, 0]]
** centroid: 2, normalized-entropy: 0.1895829925083022, [(1, 234), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [169, 51, 0]]
** centroid: 3, normalized-entropy: 0.7811673627417713, [(1, 169), (2, 51)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27047097172191564] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27047097172191564, 0.24323109458612538] ***
*** starting iteration: 2; err: [Inf, 0.27047097172191564, 0.24323109458612538] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27047097172191564, 0.24323109458612538, 0.23598688426727746] ***
*** starting iteration: 3; err: [Inf, 0.27047097172191564, 0.24323109458612538, 0.23598688426727746] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27047097172191564, 0.24323109458612538, 0.23598688426727746, 0.23161198448590833] ***
*** finished computation of 3 references, err: [Inf, 0.27047097172191564, 0.24323109458612538, 0.23598688426727746, 0.23161198448590833] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [138, 70, 0]]
** centroid: 1, normalized-entropy: 0.9214676689990972, [(1, 138), (2, 70)]
*** center 2: selecting labels [1] (freq >= 2) [from [240, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [44, 162, 13]]
** centroid: 3, normalized-entropy: 0.6490854285785476, [(1, 44), (2, 162), (3, 13)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2771751047021289] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2771751047021289, 0.2328342013996558] ***
*** starting iteration: 2; err: [Inf, 0.2771751047021289, 0.2328342013996558] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2771751047021289, 0.2328342013996558, 0.2295760851426014] ***
*** starting iteration: 3; err: [Inf, 0.2771751047021289, 0.2328342013996558, 0.2295760851426014] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2771751047021289, 0.2328342013996558, 0.2295760851426014, 0.22901714759050817] ***
*** finished computation of 3 references, err: [Inf, 0.2771751047021289, 0.2328342013996558, 0.2295760851426014, 0.22901714759050817] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [108, 97, 0]]
** centroid: 1, normalized-entropy: 0.9979220705990755, [(1, 108), (2, 97)]
*** center 2: selecting labels [1] (freq >= 2) [from [205, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [90, 151, 16]]
** centroid: 3, normalized-entropy: 0.7762144998918616, [(1, 90), (2, 151), (3, 16)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30499285192986775] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30499285192986775, 0.24034440343047273] ***
*** starting iteration: 2; err: [Inf, 0.30499285192986775, 0.24034440343047273] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30499285192986775, 0.24034440343047273, 0.22733940942459055] ***
*** starting iteration: 3; err: [Inf, 0.30499285192986775, 0.24034440343047273, 0.22733940942459055] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30499285192986775, 0.24034440343047273, 0.22733940942459055, 0.22507646316298852] ***
*** starting iteration: 4; err: [Inf, 0.30499285192986775, 0.24034440343047273, 0.22733940942459055, 0.22507646316298852] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30499285192986775, 0.24034440343047273, 0.22733940942459055, 0.22507646316298852, 0.22451983491523755] ***
*** finished computation of 3 references, err: [Inf, 0.30499285192986775, 0.24034440343047273, 0.22733940942459055, 0.22507646316298852, 0.22451983491523755] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [73, 169, 17]]
** centroid: 1, normalized-entropy: 0.7411857284327745, [(1, 73), (2, 169), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [228, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [104, 75, 0]]
** centroid: 3, normalized-entropy: 0.9809826349521635, [(1, 104), (2, 75)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 10)
[0.9439918960877045, 0.9360138581695469, 0.9340148531765298, 0.9339848830866795, 0.9310118501735268, 0.9199888511265756, 0.9100447753142363, 0.8780157402911893, 0.8550196903490317, 0.8070225914537291]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.9, 2) => 0.9439918960877045
finished with 10
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 10)
[0.9439918960877045, 0.9360138581695469, 0.9340148531765298, 0.9339848830866795, 0.9310118501735268, 0.9199888511265756, 0.9100447753142363, 0.8780157402911893, 0.8550196903490317, 0.8070225914537291]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.9, 2) => 0.9439918960877045
finished with 11
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.3518657649419055] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3518657649419055, 0.26231686131645543] ***
*** starting iteration: 2; err: [Inf, 0.3518657649419055, 0.26231686131645543] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3518657649419055, 0.26231686131645543, 0.23290131903217137] ***
*** starting iteration: 3; err: [Inf, 0.3518657649419055, 0.26231686131645543, 0.23290131903217137] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3518657649419055, 0.26231686131645543, 0.23290131903217137, 0.22647307440219028] ***
*** starting iteration: 4; err: [Inf, 0.3518657649419055, 0.26231686131645543, 0.23290131903217137, 0.22647307440219028] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3518657649419055, 0.26231686131645543, 0.23290131903217137, 0.22647307440219028, 0.225668789295888] ***
*** finished computation of 3 references, err: [Inf, 0.3518657649419055, 0.26231686131645543, 0.23290131903217137, 0.22647307440219028, 0.225668789295888] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [95, 112, 3]]
** centroid: 1, normalized-entropy: 0.6870423539141357, [(1, 95), (2, 112), (3, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [89, 132, 14]]
** centroid: 2, normalized-entropy: 0.7825628850941562, [(1, 89), (2, 132), (3, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [221, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2966761072326837] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2966761072326837, 0.23161963706716024] ***
*** starting iteration: 2; err: [Inf, 0.2966761072326837, 0.23161963706716024] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2966761072326837, 0.23161963706716024, 0.22664129395300392] ***
*** starting iteration: 3; err: [Inf, 0.2966761072326837, 0.23161963706716024, 0.22664129395300392] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2966761072326837, 0.23161963706716024, 0.22664129395300392, 0.2255278327104369] ***
*** starting iteration: 4; err: [Inf, 0.2966761072326837, 0.23161963706716024, 0.22664129395300392, 0.2255278327104369] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2966761072326837, 0.23161963706716024, 0.22664129395300392, 0.2255278327104369, 0.224977299471901] ***
*** finished computation of 3 references, err: [Inf, 0.2966761072326837, 0.23161963706716024, 0.22664129395300392, 0.2255278327104369, 0.224977299471901] ***
*** center 1: selecting labels [1] (freq >= 1) [from [213, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [109, 119, 8]]
** centroid: 2, normalized-entropy: 0.7434500717041891, [(1, 109), (2, 119), (3, 8)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [100, 113, 5]]
** centroid: 3, normalized-entropy: 0.7142492387687981, [(1, 100), (2, 113), (3, 5)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.29196394149861904] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29196394149861904, 0.2358414148185765] ***
*** starting iteration: 2; err: [Inf, 0.29196394149861904, 0.2358414148185765] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29196394149861904, 0.2358414148185765, 0.23340114818346955] ***
*** starting iteration: 3; err: [Inf, 0.29196394149861904, 0.2358414148185765, 0.23340114818346955] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29196394149861904, 0.2358414148185765, 0.23340114818346955, 0.23199217134704073] ***
*** starting iteration: 4; err: [Inf, 0.29196394149861904, 0.2358414148185765, 0.23340114818346955, 0.23199217134704073] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29196394149861904, 0.2358414148185765, 0.23340114818346955, 0.23199217134704073, 0.2301702878188001] ***
*** starting iteration: 5; err: [Inf, 0.29196394149861904, 0.2358414148185765, 0.23340114818346955, 0.23199217134704073, 0.2301702878188001] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29196394149861904, 0.2358414148185765, 0.23340114818346955, 0.23199217134704073, 0.2301702878188001, 0.22915304369800005] ***
*** starting iteration: 6; err: [Inf, 0.29196394149861904, 0.2358414148185765, 0.23340114818346955, 0.23199217134704073, 0.2301702878188001, 0.22915304369800005] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29196394149861904, 0.2358414148185765, 0.23340114818346955, 0.23199217134704073, 0.2301702878188001, 0.22915304369800005, 0.2287075328368364] ***
*** finished computation of 3 references, err: [Inf, 0.29196394149861904, 0.2358414148185765, 0.23340114818346955, 0.23199217134704073, 0.2301702878188001, 0.22915304369800005, 0.2287075328368364] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [90, 147, 14]]
** centroid: 1, normalized-entropy: 0.7665063767007583, [(1, 90), (2, 147), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [205, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [108, 101, 2]]
** centroid: 3, normalized-entropy: 0.6732251278036488, [(1, 108), (2, 101), (3, 2)]
finished with 7 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 11)
[0.9439918960877045, 0.9360138581695469, 0.9340148531765298, 0.9339848830866795, 0.9310118501735268, 0.9200038361715008, 0.9199888511265756, 0.9100447753142363, 0.8780157402911893, 0.8550196903490317, 0.8070225914537291]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.9, 2) => 0.9439918960877045
finished with 13
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.19124900201975048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19124900201975048, 0.14962419195622875] ***
*** finished computation of 7 references, err: [Inf, 0.19124900201975048, 0.14962419195622875] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [127, 2, 0]]
** centroid: 1, normalized-entropy: 0.11539039325220708, [(1, 127), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [68, 4, 0]]
** centroid: 2, normalized-entropy: 0.3095434291503252, [(1, 68), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 52, 13]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 52), (3, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [4, 89, 0]]
** centroid: 4, normalized-entropy: 0.2559300438391133, [(1, 4), (2, 89)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [40, 85, 0]]
** centroid: 5, normalized-entropy: 0.9043814577244941, [(1, 40), (2, 85)]
*** center 6: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18243626675622976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18243626675622976, 0.15512602732236172] ***
*** finished computation of 7 references, err: [Inf, 0.18243626675622976, 0.15512602732236172] ***
*** center 1: selecting labels [1] (freq >= 1) [from [155, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 43, 16]]
** centroid: 2, normalized-entropy: 0.8431619569518377, [(2, 43), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [58, 11, 0]]
** centroid: 3, normalized-entropy: 0.6329208984823799, [(1, 58), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [83, 1, 0]]
** centroid: 4, normalized-entropy: 0.09317131799548928, [(1, 83), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [13, 103, 0]]
** centroid: 5, normalized-entropy: 0.5061252137852816, [(1, 13), (2, 103)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 90, 0]]
** centroid: 6, normalized-entropy: 0.43949698692151346, [(1, 9), (2, 90)]
*** center 7: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2560040355176181] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2560040355176181, 0.19714553421572992] ***
*** finished computation of 7 references, err: [Inf, 0.2560040355176181, 0.19714553421572992] ***
*** center 1: selecting labels [1] (freq >= 1) [from [130, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 67, 17]]
** centroid: 2, normalized-entropy: 0.7266645172796352, [(2, 67), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [40, 2, 0]]
** centroid: 3, normalized-entropy: 0.2761954276479391, [(1, 40), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [74, 16, 0]]
** centroid: 4, normalized-entropy: 0.6751914401458716, [(1, 74), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [59, 65, 0]]
** centroid: 5, normalized-entropy: 0.9983104413610835, [(1, 59), (2, 65)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [14, 94, 0]]
** centroid: 6, normalized-entropy: 0.5564215672884282, [(1, 14), (2, 94)]
*** center 7: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21800823364060545] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21800823364060545, 0.18821603857745967] ***
*** finished computation of 7 references, err: [Inf, 0.21800823364060545, 0.18821603857745967] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 86, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [57, 7, 0]]
** centroid: 2, normalized-entropy: 0.49802788653447644, [(1, 57), (2, 7)]
*** center 3: selecting labels [1] (freq >= 1) [from [137, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 83, 13]]
** centroid: 4, normalized-entropy: 0.572108447204188, [(2, 83), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 43, 0]]
** centroid: 5, normalized-entropy: 0.9560353655943677, [(1, 71), (2, 43)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [79, 2, 0]]
** centroid: 6, normalized-entropy: 0.16702680404522793, [(1, 79), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [78, 11, 0]]
** centroid: 7, normalized-entropy: 0.5396084773004918, [(1, 78), (2, 11)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24324619107372847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24324619107372847, 0.1886692807124439] ***
*** finished computation of 7 references, err: [Inf, 0.24324619107372847, 0.1886692807124439] ***
*** center 1: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 61, 16]]
** centroid: 2, normalized-entropy: 0.7372413771710565, [(2, 61), (3, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [86, 31, 0]]
** centroid: 4, normalized-entropy: 0.834135193716964, [(1, 86), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [36, 79, 0]]
** centroid: 5, normalized-entropy: 0.8966554495712067, [(1, 36), (2, 79)]
*** center 6: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 77, 0]]
** centroid: 7, normalized-entropy: 0.2307099556914763, [(1, 3), (2, 77)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20104401550387163] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20104401550387163, 0.152075162562248] ***
*** finished computation of 7 references, err: [Inf, 0.20104401550387163, 0.152075162562248] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 116, 7]]
** centroid: 1, normalized-entropy: 0.3150569452644301, [(2, 116), (3, 7)]
*** center 2: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [67, 9, 0]]
** centroid: 3, normalized-entropy: 0.524805134842907, [(1, 67), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [109, 6, 0]]
** centroid: 4, normalized-entropy: 0.295560777857315, [(1, 109), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 41, 0]]
** centroid: 5, normalized-entropy: 0.9826808027585991, [(1, 56), (2, 41)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 72, 10]]
** centroid: 6, normalized-entropy: 0.5349436990971067, [(2, 72), (3, 10)]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9439918960877045, 0.9390018761276248, 0.9360138581695469, 0.9340148531765298, 0.9339848830866795, 0.9319858780936624, 0.9310118501735268, 0.9200038361715008, 0.9199888511265756, 0.9100447753142363, 0.8780157402911893, 0.8550196903490317, 0.8070225914537291]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.9, 2) => 0.9439918960877045
finished with 14
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.2858352714802723] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2858352714802723, 0.2063995768293716] ***
*** starting iteration: 2; err: [Inf, 0.2858352714802723, 0.2063995768293716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2858352714802723, 0.2063995768293716, 0.19396226759510557] ***
*** starting iteration: 3; err: [Inf, 0.2858352714802723, 0.2063995768293716, 0.19396226759510557] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2858352714802723, 0.2063995768293716, 0.19396226759510557, 0.19019130546482163] ***
*** finished computation of 7 references, err: [Inf, 0.2858352714802723, 0.2063995768293716, 0.19396226759510557, 0.19019130546482163] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 122, 17]]
** centroid: 1, normalized-entropy: 0.5359423426233068, [(2, 122), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [84, 28, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 84), (2, 28)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [8, 81, 0]]
** centroid: 4, normalized-entropy: 0.43609466429612137, [(1, 8), (2, 81)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 13, 0]]
** centroid: 5, normalized-entropy: 0.6084002154765848, [(1, 74), (2, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2821251218761506] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2821251218761506, 0.24043865592220331] ***
*** starting iteration: 2; err: [Inf, 0.2821251218761506, 0.24043865592220331] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2821251218761506, 0.24043865592220331, 0.22586673733707088] ***
*** starting iteration: 3; err: [Inf, 0.2821251218761506, 0.24043865592220331, 0.22586673733707088] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2821251218761506, 0.24043865592220331, 0.22586673733707088, 0.20998979050797345] ***
*** finished computation of 7 references, err: [Inf, 0.2821251218761506, 0.24043865592220331, 0.22586673733707088, 0.20998979050797345] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [78, 40, 0]]
** centroid: 1, normalized-entropy: 0.9238422284571813, [(1, 78), (2, 40)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [57, 81, 12]]
** centroid: 2, normalized-entropy: 0.821473367922256, [(1, 57), (2, 81), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [19, 111, 1]]
** centroid: 3, normalized-entropy: 0.6001310136416094, [(1, 19), (2, 111)]
*** center 4: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3333395251898148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3333395251898148, 0.23039463397556695] ***
*** starting iteration: 2; err: [Inf, 0.3333395251898148, 0.23039463397556695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3333395251898148, 0.23039463397556695, 0.20937403798734452] ***
*** starting iteration: 3; err: [Inf, 0.3333395251898148, 0.23039463397556695, 0.20937403798734452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3333395251898148, 0.23039463397556695, 0.20937403798734452, 0.19952608195986637] ***
*** finished computation of 7 references, err: [Inf, 0.3333395251898148, 0.23039463397556695, 0.20937403798734452, 0.19952608195986637] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 126, 16]]
** centroid: 1, normalized-entropy: 0.5079353563991225, [(2, 126), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 20, 0]]
** centroid: 2, normalized-entropy: 0.8063495153650776, [(1, 61), (2, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [86, 54, 0]]
** centroid: 3, normalized-entropy: 0.9619780596506257, [(1, 86), (2, 54)]
*** center 4: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [60, 48, 0]]
** centroid: 6, normalized-entropy: 0.9910760598382222, [(1, 60), (2, 48)]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9439918960877045, 0.9390018761276248, 0.9360138581695469, 0.9340148531765298, 0.9339848830866795, 0.9319858780936624, 0.9310118501735268, 0.9200038361715008, 0.9199888511265756, 0.9129848411285537, 0.9100447753142363, 0.8780157402911893, 0.8550196903490317, 0.8070225914537291]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.9, 2) => 0.9439918960877045
finished with 15
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.31837279585962025] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31837279585962025, 0.29203990425120246] ***
*** starting iteration: 2; err: [Inf, 0.31837279585962025, 0.29203990425120246] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31837279585962025, 0.29203990425120246, 0.2907600260966153] ***
*** starting iteration: 3; err: [Inf, 0.31837279585962025, 0.29203990425120246, 0.2907600260966153] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31837279585962025, 0.29203990425120246, 0.2907600260966153, 0.29103861819091326] ***
*** finished computation of 3 references, err: [Inf, 0.31837279585962025, 0.29203990425120246, 0.2907600260966153, 0.29103861819091326] ***
*** center 1: selecting labels [1] (freq >= 2) [from [229, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [47, 191, 17]]
** centroid: 2, normalized-entropy: 0.6450790978272339, [(1, 47), (2, 191), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [129, 53, 0]]
** centroid: 3, normalized-entropy: 0.8702776070039198, [(1, 129), (2, 53)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39807083400181387] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39807083400181387, 0.30616008360609076] ***
*** starting iteration: 2; err: [Inf, 0.39807083400181387, 0.30616008360609076] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39807083400181387, 0.30616008360609076, 0.2995226270110085] ***
*** starting iteration: 3; err: [Inf, 0.39807083400181387, 0.30616008360609076, 0.2995226270110085] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39807083400181387, 0.30616008360609076, 0.2995226270110085, 0.29880531398074023] ***
*** finished computation of 3 references, err: [Inf, 0.39807083400181387, 0.30616008360609076, 0.2995226270110085, 0.29880531398074023] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [171, 36, 0]]
** centroid: 1, normalized-entropy: 0.6665783579949205, [(1, 171), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [249, 4, 0]]
** centroid: 2, normalized-entropy: 0.1172209221846178, [(1, 249), (2, 4)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [2, 192, 13]]
** centroid: 3, normalized-entropy: 0.26253164964660836, [(1, 2), (2, 192), (3, 13)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4041317854735671] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4041317854735671, 0.3135625974511144] ***
*** starting iteration: 2; err: [Inf, 0.4041317854735671, 0.3135625974511144] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4041317854735671, 0.3135625974511144, 0.3034244617785856] ***
*** starting iteration: 3; err: [Inf, 0.4041317854735671, 0.3135625974511144, 0.3034244617785856] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4041317854735671, 0.3135625974511144, 0.3034244617785856, 0.30247697058570816] ***
*** finished computation of 3 references, err: [Inf, 0.4041317854735671, 0.3135625974511144, 0.3034244617785856, 0.30247697058570816] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [4, 192, 16]]
** centroid: 1, normalized-entropy: 0.32738806890670585, [(1, 4), (2, 192), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [166, 54, 0]]
** centroid: 2, normalized-entropy: 0.803993937522765, [(1, 166), (2, 54)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [233, 2, 0]]
** centroid: 3, normalized-entropy: 0.07074940739713882, [(1, 233), (2, 2)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9439918960877045, 0.9390018761276248, 0.9360138581695469, 0.9340148531765298, 0.9339848830866795, 0.9319858780936624, 0.9310118501735268, 0.9220088351824879, 0.9200038361715008, 0.9199888511265756, 0.9129848411285537, 0.9100447753142363, 0.8780157402911893, 0.8550196903490317, 0.8070225914537291]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.9, 2) => 0.9439918960877045
finished with 15
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9439918960877045, 0.9390018761276248, 0.9360138581695469, 0.9340148531765298, 0.9339848830866795, 0.9319858780936624, 0.9310118501735268, 0.9220088351824879, 0.9200038361715008, 0.9199888511265756, 0.9129848411285537, 0.9100447753142363, 0.8780157402911893, 0.8550196903490317, 0.8070225914537291]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.9, 2) => 0.9439918960877045
finished with 16
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.22761576808359776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22761576808359776, 0.19506676786498087] ***
*** starting iteration: 2; err: [Inf, 0.22761576808359776, 0.19506676786498087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22761576808359776, 0.19506676786498087, 0.1903193821464931] ***
*** starting iteration: 3; err: [Inf, 0.22761576808359776, 0.19506676786498087, 0.1903193821464931] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22761576808359776, 0.19506676786498087, 0.1903193821464931, 0.18942762884470793] ***
*** finished computation of 7 references, err: [Inf, 0.22761576808359776, 0.19506676786498087, 0.1903193821464931, 0.18942762884470793] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 62, 0]]
** centroid: 2, normalized-entropy: 0.9987261494308297, [(1, 57), (2, 62)]
*** center 3: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 72, 17]]
** centroid: 4, normalized-entropy: 0.7035821005719904, [(2, 72), (3, 17)]
*** center 5: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [75, 12, 0]]
** centroid: 6, normalized-entropy: 0.5787946246321198, [(1, 75), (2, 12)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [20, 98, 0]]
** centroid: 7, normalized-entropy: 0.656540281386946, [(1, 20), (2, 98)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2377782572435028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2377782572435028, 0.2017492554953386] ***
*** starting iteration: 2; err: [Inf, 0.2377782572435028, 0.2017492554953386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2377782572435028, 0.2017492554953386, 0.19903002463709116] ***
*** starting iteration: 3; err: [Inf, 0.2377782572435028, 0.2017492554953386, 0.19903002463709116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2377782572435028, 0.2017492554953386, 0.19903002463709116, 0.197567130197426] ***
*** starting iteration: 4; err: [Inf, 0.2377782572435028, 0.2017492554953386, 0.19903002463709116, 0.197567130197426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2377782572435028, 0.2017492554953386, 0.19903002463709116, 0.197567130197426, 0.19631559481618108] ***
*** starting iteration: 5; err: [Inf, 0.2377782572435028, 0.2017492554953386, 0.19903002463709116, 0.197567130197426, 0.19631559481618108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2377782572435028, 0.2017492554953386, 0.19903002463709116, 0.197567130197426, 0.19631559481618108, 0.1949809969429379] ***
*** starting iteration: 6; err: [Inf, 0.2377782572435028, 0.2017492554953386, 0.19903002463709116, 0.197567130197426, 0.19631559481618108, 0.1949809969429379] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2377782572435028, 0.2017492554953386, 0.19903002463709116, 0.197567130197426, 0.19631559481618108, 0.1949809969429379, 0.19242006626309663] ***
*** starting iteration: 7; err: [Inf, 0.2377782572435028, 0.2017492554953386, 0.19903002463709116, 0.197567130197426, 0.19631559481618108, 0.1949809969429379, 0.19242006626309663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2377782572435028, 0.2017492554953386, 0.19903002463709116, 0.197567130197426, 0.19631559481618108, 0.1949809969429379, 0.19242006626309663, 0.18990005325174136] ***
*** starting iteration: 8; err: [Inf, 0.2377782572435028, 0.2017492554953386, 0.19903002463709116, 0.197567130197426, 0.19631559481618108, 0.1949809969429379, 0.19242006626309663, 0.18990005325174136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2377782572435028, 0.2017492554953386, 0.19903002463709116, 0.197567130197426, 0.19631559481618108, 0.1949809969429379, 0.19242006626309663, 0.18990005325174136, 0.18722906825307203] ***
*** starting iteration: 9; err: [Inf, 0.2377782572435028, 0.2017492554953386, 0.19903002463709116, 0.197567130197426, 0.19631559481618108, 0.1949809969429379, 0.19242006626309663, 0.18990005325174136, 0.18722906825307203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2377782572435028, 0.2017492554953386, 0.19903002463709116, 0.197567130197426, 0.19631559481618108, 0.1949809969429379, 0.19242006626309663, 0.18990005325174136, 0.18722906825307203, 0.18530753267177758] ***
*** starting iteration: 10; err: [Inf, 0.2377782572435028, 0.2017492554953386, 0.19903002463709116, 0.197567130197426, 0.19631559481618108, 0.1949809969429379, 0.19242006626309663, 0.18990005325174136, 0.18722906825307203, 0.18530753267177758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2377782572435028, 0.2017492554953386, 0.19903002463709116, 0.197567130197426, 0.19631559481618108, 0.1949809969429379, 0.19242006626309663, 0.18990005325174136, 0.18722906825307203, 0.18530753267177758, 0.183961341447983] ***
*** finished computation of 7 references, err: [Inf, 0.2377782572435028, 0.2017492554953386, 0.19903002463709116, 0.197567130197426, 0.19631559481618108, 0.1949809969429379, 0.19242006626309663, 0.18990005325174136, 0.18722906825307203, 0.18530753267177758, 0.183961341447983] ***
*** center 1: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [98, 4, 0]]
** centroid: 2, normalized-entropy: 0.23868451135100152, [(1, 98), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 89, 13]]
** centroid: 3, normalized-entropy: 0.550405815580872, [(2, 89), (3, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [73, 32, 0]]
** centroid: 4, normalized-entropy: 0.8870341576828725, [(1, 73), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 7, 0]]
** centroid: 5, normalized-entropy: 0.45162282218200417, [(1, 67), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 95, 0]]
** centroid: 6, normalized-entropy: 0.14489961753310668, [(1, 2), (2, 95)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [85, 5, 0]]
** centroid: 7, normalized-entropy: 0.3095434291503252, [(1, 85), (2, 5)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23649111566325087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23649111566325087, 0.19808744282546875] ***
*** starting iteration: 2; err: [Inf, 0.23649111566325087, 0.19808744282546875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23649111566325087, 0.19808744282546875, 0.1941024198307135] ***
*** starting iteration: 3; err: [Inf, 0.23649111566325087, 0.19808744282546875, 0.1941024198307135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23649111566325087, 0.19808744282546875, 0.1941024198307135, 0.1920704392376293] ***
*** starting iteration: 4; err: [Inf, 0.23649111566325087, 0.19808744282546875, 0.1941024198307135, 0.1920704392376293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23649111566325087, 0.19808744282546875, 0.1941024198307135, 0.1920704392376293, 0.19099881013539777] ***
*** starting iteration: 5; err: [Inf, 0.23649111566325087, 0.19808744282546875, 0.1941024198307135, 0.1920704392376293, 0.19099881013539777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23649111566325087, 0.19808744282546875, 0.1941024198307135, 0.1920704392376293, 0.19099881013539777, 0.19068080526699815] ***
*** finished computation of 7 references, err: [Inf, 0.23649111566325087, 0.19808744282546875, 0.1941024198307135, 0.1920704392376293, 0.19099881013539777, 0.19068080526699815] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [93, 3, 0]]
** centroid: 1, normalized-entropy: 0.2006223243127146, [(1, 93), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [71, 7, 0]]
** centroid: 2, normalized-entropy: 0.4356133734874324, [(1, 71), (2, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [2, 99, 0]]
** centroid: 4, normalized-entropy: 0.1403272709905931, [(1, 2), (2, 99)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 77, 16]]
** centroid: 5, normalized-entropy: 0.6623570516079519, [(2, 77), (3, 16)]
*** center 6: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [48, 62, 0]]
** centroid: 7, normalized-entropy: 0.9882836109919163, [(1, 48), (2, 62)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9439918960877045, 0.9390018761276248, 0.9360138581695469, 0.9340148531765298, 0.9339848830866795, 0.9319858780936624, 0.9310118501735268, 0.923015830201459, 0.9220088351824879, 0.9200038361715008, 0.9199888511265756, 0.9129848411285537, 0.9100447753142363, 0.8780157402911893, 0.8550196903490317, 0.8070225914537291]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.9, 2) => 0.9439918960877045
finished with 17
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.21677255659535907] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21677255659535907, 0.18852654948057063] ***
*** finished computation of 7 references, err: [Inf, 0.21677255659535907, 0.18852654948057063] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 75, 12]]
** centroid: 1, normalized-entropy: 0.5787946246321198, [(2, 75), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 16, 0]]
** centroid: 3, normalized-entropy: 0.8238116333123173, [(1, 46), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [99, 23, 0]]
** centroid: 4, normalized-entropy: 0.6983747934875366, [(1, 99), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [96, 15, 0]]
** centroid: 5, normalized-entropy: 0.5713549744279549, [(1, 96), (2, 15)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 103, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.240530949580236] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.240530949580236, 0.1892346875376251] ***
*** finished computation of 7 references, err: [Inf, 0.240530949580236, 0.1892346875376251] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [26, 93, 0]]
** centroid: 1, normalized-entropy: 0.7573958968817643, [(1, 26), (2, 93)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 5, 0]]
** centroid: 2, normalized-entropy: 0.4138168503036336, [(1, 55), (2, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [88, 12, 0]]
** centroid: 4, normalized-entropy: 0.5293608652873645, [(1, 88), (2, 12)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 64, 16]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(2, 64), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [36, 74, 0]]
** centroid: 6, normalized-entropy: 0.9121156307204275, [(1, 36), (2, 74)]
*** center 7: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2523233715497942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2523233715497942, 0.19393374546439396] ***
*** finished computation of 7 references, err: [Inf, 0.2523233715497942, 0.19393374546439396] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [106, 4, 0]]
** centroid: 1, normalized-entropy: 0.22536363912739493, [(1, 106), (2, 4)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 44, 17]]
** centroid: 3, normalized-entropy: 0.8536576732793314, [(2, 44), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [130, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [91, 26, 0]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(1, 91), (2, 26)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 92, 0]]
** centroid: 6, normalized-entropy: 0.29292995113885967, [(1, 5), (2, 92)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 77, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.1748407770656049] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1748407770656049, 0.15085767356771976] ***
*** starting iteration: 2; err: [Inf, 0.1748407770656049, 0.15085767356771976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1748407770656049, 0.15085767356771976, 0.14778303087549285] ***
*** starting iteration: 3; err: [Inf, 0.1748407770656049, 0.15085767356771976, 0.14778303087549285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1748407770656049, 0.15085767356771976, 0.14778303087549285, 0.14659197835065424] ***
*** finished computation of 7 references, err: [Inf, 0.1748407770656049, 0.15085767356771976, 0.14778303087549285, 0.14659197835065424] ***
*** center 1: selecting labels [1] (freq >= 2) [from [149, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [4, 146, 0]]
** centroid: 2, normalized-entropy: 0.1773894531859976, [(1, 4), (2, 146)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 151, 23]]
** centroid: 3, normalized-entropy: 0.5633972853464396, [(2, 151), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [157, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [91, 35, 0]]
** centroid: 5, normalized-entropy: 0.8524051786494784, [(1, 91), (2, 35)]
*** center 6: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [108, 30, 0]]
** centroid: 7, normalized-entropy: 0.7553754125614286, [(1, 108), (2, 30)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.16878587795421482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16878587795421482, 0.14891134222131222] ***
*** starting iteration: 2; err: [Inf, 0.16878587795421482, 0.14891134222131222] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16878587795421482, 0.14891134222131222, 0.1443672678247094] ***
*** starting iteration: 3; err: [Inf, 0.16878587795421482, 0.14891134222131222, 0.1443672678247094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16878587795421482, 0.14891134222131222, 0.1443672678247094, 0.1437578709833324] ***
*** finished computation of 7 references, err: [Inf, 0.16878587795421482, 0.14891134222131222, 0.1443672678247094, 0.1437578709833324] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 66, 9]]
** centroid: 1, normalized-entropy: 0.5293608652873645, [(2, 66), (3, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 64, 0]]
** centroid: 3, normalized-entropy: 0.9975844702713692, [(1, 57), (2, 64)]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 46, 0]]
** centroid: 5, normalized-entropy: 0.8571484374283717, [(1, 18), (2, 46)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [57, 10, 0]]
** centroid: 6, normalized-entropy: 0.6079696120060726, [(1, 57), (2, 10)]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21244999557361008] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21244999557361008, 0.16128111022617667] ***
*** starting iteration: 2; err: [Inf, 0.21244999557361008, 0.16128111022617667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21244999557361008, 0.16128111022617667, 0.15475826046057045] ***
*** starting iteration: 3; err: [Inf, 0.21244999557361008, 0.16128111022617667, 0.15475826046057045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21244999557361008, 0.16128111022617667, 0.15475826046057045, 0.15116692816838623] ***
*** finished computation of 7 references, err: [Inf, 0.21244999557361008, 0.16128111022617667, 0.15475826046057045, 0.15116692816838623] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [59, 39, 0]]
** centroid: 1, normalized-entropy: 0.9697442681154499, [(1, 59), (2, 39)]
*** center 2: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 24, 9]]
** centroid: 4, normalized-entropy: 0.8453509366224364, [(2, 24), (3, 9)]
*** center 5: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 58, 0]]
** centroid: 6, normalized-entropy: 0.39993804743902767, [(1, 5), (2, 58)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 62, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23610397786460816] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23610397786460816, 0.16863017401844263] ***
*** starting iteration: 2; err: [Inf, 0.23610397786460816, 0.16863017401844263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23610397786460816, 0.16863017401844263, 0.15826481049926952] ***
*** starting iteration: 3; err: [Inf, 0.23610397786460816, 0.16863017401844263, 0.15826481049926952] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23610397786460816, 0.16863017401844263, 0.15826481049926952, 0.15370175508596004] ***
*** finished computation of 7 references, err: [Inf, 0.23610397786460816, 0.16863017401844263, 0.15826481049926952, 0.15370175508596004] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [52, 50, 0]]
** centroid: 1, normalized-entropy: 0.9997226475394071, [(1, 52), (2, 50)]
*** center 2: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 116, 13]]
** centroid: 4, normalized-entropy: 0.4714480944105985, [(2, 116), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 15, 0]]
** centroid: 5, normalized-entropy: 0.7166336117927455, [(1, 61), (2, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [58, 7, 0]]
** centroid: 7, normalized-entropy: 0.49291577961610966, [(1, 58), (2, 7)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.36016708830557764] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.36016708830557764, 0.18215291357738897] ***
*** starting iteration: 2; err: [Inf, 0.36016708830557764, 0.18215291357738897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.36016708830557764, 0.18215291357738897, 0.16097766546625644] ***
*** starting iteration: 3; err: [Inf, 0.36016708830557764, 0.18215291357738897, 0.16097766546625644] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.36016708830557764, 0.18215291357738897, 0.16097766546625644, 0.15426708465628325] ***
*** finished computation of 7 references, err: [Inf, 0.36016708830557764, 0.18215291357738897, 0.16097766546625644, 0.15426708465628325] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [25, 5, 0]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(1, 25), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 3, 0]]
** centroid: 2, normalized-entropy: 0.29367630985136944, [(1, 55), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [21, 32, 0]]
** centroid: 3, normalized-entropy: 0.9687003436508602, [(1, 21), (2, 32)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 45, 10]]
** centroid: 4, normalized-entropy: 0.6840384356390419, [(2, 45), (3, 10)]
*** center 5: selecting labels [1] (freq >= 2) [from [127, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 59, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [78, 40, 0]]
** centroid: 7, normalized-entropy: 0.9238422284571813, [(1, 78), (2, 40)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24057170998305083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24057170998305083, 0.16966371985897422] ***
*** starting iteration: 2; err: [Inf, 0.24057170998305083, 0.16966371985897422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24057170998305083, 0.16966371985897422, 0.15521133315609767] ***
*** starting iteration: 3; err: [Inf, 0.24057170998305083, 0.16966371985897422, 0.15521133315609767] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24057170998305083, 0.16966371985897422, 0.15521133315609767, 0.15157147590070963] ***
*** finished computation of 7 references, err: [Inf, 0.24057170998305083, 0.16966371985897422, 0.15521133315609767, 0.15157147590070963] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [92, 8, 0]]
** centroid: 1, normalized-entropy: 0.4021791902022729, [(1, 92), (2, 8)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 52, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [8, 65, 0]]
** centroid: 3, normalized-entropy: 0.4986751363204345, [(1, 8), (2, 65)]
*** center 4: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [77, 10, 0]]
** centroid: 5, normalized-entropy: 0.5146464316834292, [(1, 77), (2, 10)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 41, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 17, 10]]
** centroid: 7, normalized-entropy: 0.9509560484549724, [(2, 17), (3, 10)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2085825461205095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2085825461205095, 0.15963572750240565] ***
*** starting iteration: 2; err: [Inf, 0.2085825461205095, 0.15963572750240565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2085825461205095, 0.15963572750240565, 0.15102301224973053] ***
*** starting iteration: 3; err: [Inf, 0.2085825461205095, 0.15963572750240565, 0.15102301224973053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2085825461205095, 0.15963572750240565, 0.15102301224973053, 0.1479847074896097] ***
*** finished computation of 7 references, err: [Inf, 0.2085825461205095, 0.15963572750240565, 0.15102301224973053, 0.1479847074896097] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 79, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [30, 13, 0]]
** centroid: 2, normalized-entropy: 0.8841151220488478, [(1, 30), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [75, 2, 0]]
** centroid: 3, normalized-entropy: 0.17378132267943294, [(1, 75), (2, 2)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 55, 12]]
** centroid: 4, normalized-entropy: 0.678114052360606, [(2, 55), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [32, 45, 0]]
** centroid: 5, normalized-entropy: 0.9793399259567798, [(1, 32), (2, 45)]
*** center 6: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.198045589806512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.198045589806512, 0.15852682463731615] ***
*** starting iteration: 2; err: [Inf, 0.198045589806512, 0.15852682463731615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.198045589806512, 0.15852682463731615, 0.1538296600729227] ***
*** starting iteration: 3; err: [Inf, 0.198045589806512, 0.15852682463731615, 0.1538296600729227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.198045589806512, 0.15852682463731615, 0.1538296600729227, 0.1520009320192039] ***
*** finished computation of 7 references, err: [Inf, 0.198045589806512, 0.15852682463731615, 0.1538296600729227, 0.1520009320192039] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 61, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [39, 42, 0]]
** centroid: 2, normalized-entropy: 0.9990102708804813, [(1, 39), (2, 42)]
*** center 3: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 28, 10]]
** centroid: 4, normalized-entropy: 0.8314743880097292, [(2, 28), (3, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 11, 0]]
** centroid: 5, normalized-entropy: 0.5558227377664954, [(1, 74), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [38, 24, 0]]
** centroid: 6, normalized-entropy: 0.9629004147713269, [(1, 38), (2, 24)]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21541630659252406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21541630659252406, 0.16485443452745677] ***
*** starting iteration: 2; err: [Inf, 0.21541630659252406, 0.16485443452745677] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21541630659252406, 0.16485443452745677, 0.15328126296959818] ***
*** starting iteration: 3; err: [Inf, 0.21541630659252406, 0.16485443452745677, 0.15328126296959818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21541630659252406, 0.16485443452745677, 0.15328126296959818, 0.15080258565954863] ***
*** finished computation of 7 references, err: [Inf, 0.21541630659252406, 0.16485443452745677, 0.15328126296959818, 0.15080258565954863] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 62, 7]]
** centroid: 1, normalized-entropy: 0.47357292491745173, [(2, 62), (3, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [9, 60, 0]]
** centroid: 2, normalized-entropy: 0.5586293734521991, [(1, 9), (2, 60)]
*** center 3: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [29, 22, 0]]
** centroid: 4, normalized-entropy: 0.9863676072907089, [(1, 29), (2, 22)]
*** center 5: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [34, 32, 0]]
** centroid: 6, normalized-entropy: 0.9993375041688846, [(1, 34), (2, 32)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [70, 3, 0]]
** centroid: 7, normalized-entropy: 0.24729443986205674, [(1, 70), (2, 3)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20111245603021236] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20111245603021236, 0.17228153971396387] ***
*** starting iteration: 2; err: [Inf, 0.20111245603021236, 0.17228153971396387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20111245603021236, 0.17228153971396387, 0.16096443550195544] ***
*** starting iteration: 3; err: [Inf, 0.20111245603021236, 0.17228153971396387, 0.16096443550195544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20111245603021236, 0.17228153971396387, 0.16096443550195544, 0.15823318659793587] ***
*** finished computation of 7 references, err: [Inf, 0.20111245603021236, 0.17228153971396387, 0.16096443550195544, 0.15823318659793587] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 103, 14]]
** centroid: 1, normalized-entropy: 0.5283773417314562, [(2, 103), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 6, 0]]
** centroid: 2, normalized-entropy: 0.4220005168831531, [(1, 64), (2, 6)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [72, 28, 0]]
** centroid: 3, normalized-entropy: 0.8554508105601307, [(1, 72), (2, 28)]
*** center 4: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [37, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [42, 7, 0]]
** centroid: 6, normalized-entropy: 0.5916727785823274, [(1, 42), (2, 7)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [31, 33, 0]]
** centroid: 7, normalized-entropy: 0.9992954443621548, [(1, 31), (2, 33)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2235295353140682] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2235295353140682, 0.15701026524044573] ***
*** starting iteration: 2; err: [Inf, 0.2235295353140682, 0.15701026524044573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2235295353140682, 0.15701026524044573, 0.1539650431200862] ***
*** starting iteration: 3; err: [Inf, 0.2235295353140682, 0.15701026524044573, 0.1539650431200862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2235295353140682, 0.15701026524044573, 0.1539650431200862, 0.15334911079332234] ***
*** finished computation of 7 references, err: [Inf, 0.2235295353140682, 0.15701026524044573, 0.1539650431200862, 0.15334911079332234] ***
*** center 1: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [37, 23, 0]]
** centroid: 2, normalized-entropy: 0.9603622703154779, [(1, 37), (2, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [32, 42, 0]]
** centroid: 3, normalized-entropy: 0.9867867202680318, [(1, 32), (2, 42)]
*** center 4: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 35, 0]]
** centroid: 5, normalized-entropy: 0.9119388957757234, [(1, 72), (2, 35)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 99, 11]]
** centroid: 6, normalized-entropy: 0.46899559358928133, [(2, 99), (3, 11)]
*** center 7: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21274673563614488] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21274673563614488, 0.1614754442870617] ***
*** starting iteration: 2; err: [Inf, 0.21274673563614488, 0.1614754442870617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21274673563614488, 0.1614754442870617, 0.15323393203224986] ***
*** starting iteration: 3; err: [Inf, 0.21274673563614488, 0.1614754442870617, 0.15323393203224986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21274673563614488, 0.1614754442870617, 0.15323393203224986, 0.14909174303151668] ***
*** finished computation of 7 references, err: [Inf, 0.21274673563614488, 0.1614754442870617, 0.15323393203224986, 0.14909174303151668] ***
*** center 1: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [2, 58, 0]]
** centroid: 2, normalized-entropy: 0.2108423003185322, [(1, 2), (2, 58)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [20, 45, 0]]
** centroid: 3, normalized-entropy: 0.8904916402194913, [(1, 20), (2, 45)]
*** center 4: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 38, 12]]
** centroid: 5, normalized-entropy: 0.7950402793845225, [(2, 38), (3, 12)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 1, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 30, 0]]
** centroid: 7, normalized-entropy: 0.5916727785823274, [(1, 5), (2, 30)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20216301680728793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20216301680728793, 0.15996551497001202] ***
*** starting iteration: 2; err: [Inf, 0.20216301680728793, 0.15996551497001202] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20216301680728793, 0.15996551497001202, 0.15295901716686786] ***
*** starting iteration: 3; err: [Inf, 0.20216301680728793, 0.15996551497001202, 0.15295901716686786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20216301680728793, 0.15996551497001202, 0.15295901716686786, 0.15084825158305465] ***
*** finished computation of 7 references, err: [Inf, 0.20216301680728793, 0.15996551497001202, 0.15295901716686786, 0.15084825158305465] ***
*** center 1: selecting labels [1] (freq >= 2) [from [149, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 43, 13]]
** centroid: 2, normalized-entropy: 0.7817281222714539, [(2, 43), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [28, 36, 0]]
** centroid: 3, normalized-entropy: 0.9886994082884974, [(1, 28), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [9, 54, 0]]
** centroid: 4, normalized-entropy: 0.5916727785823274, [(1, 9), (2, 54)]
*** center 5: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 35, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3009042009511031] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3009042009511031, 0.18242240074835717] ***
*** starting iteration: 2; err: [Inf, 0.3009042009511031, 0.18242240074835717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3009042009511031, 0.18242240074835717, 0.15262156842648983] ***
*** starting iteration: 3; err: [Inf, 0.3009042009511031, 0.18242240074835717, 0.15262156842648983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3009042009511031, 0.18242240074835717, 0.15262156842648983, 0.14465246955584735] ***
*** finished computation of 7 references, err: [Inf, 0.3009042009511031, 0.18242240074835717, 0.15262156842648983, 0.14465246955584735] ***
*** center 1: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 13, 0]]
** centroid: 2, normalized-entropy: 0.6601070987550468, [(1, 63), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 29, 0]]
** centroid: 3, normalized-entropy: 0.9556222693531471, [(1, 48), (2, 29)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [20, 46, 0]]
** centroid: 4, normalized-entropy: 0.8849636363831529, [(1, 20), (2, 46)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 45, 13]]
** centroid: 6, normalized-entropy: 0.7676515870125797, [(2, 45), (3, 13)]
*** center 7: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24836325893737377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24836325893737377, 0.16713602245599032] ***
*** starting iteration: 2; err: [Inf, 0.24836325893737377, 0.16713602245599032] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24836325893737377, 0.16713602245599032, 0.16025957855582237] ***
*** starting iteration: 3; err: [Inf, 0.24836325893737377, 0.16713602245599032, 0.16025957855582237] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24836325893737377, 0.16713602245599032, 0.16025957855582237, 0.15645792848989368] ***
*** finished computation of 7 references, err: [Inf, 0.24836325893737377, 0.16713602245599032, 0.16025957855582237, 0.15645792848989368] ***
*** center 1: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 41, 12]]
** centroid: 2, normalized-entropy: 0.7717094696953635, [(2, 41), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [27, 12, 0]]
** centroid: 3, normalized-entropy: 0.8904916402194913, [(1, 27), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [6, 79, 0]]
** centroid: 4, normalized-entropy: 0.3681150054280774, [(1, 6), (2, 79)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [59, 3, 0]]
** centroid: 5, normalized-entropy: 0.2795055456366802, [(1, 59), (2, 3)]
*** center 6: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 54, 0]]
** centroid: 7, normalized-entropy: 0.625262405223423, [(1, 10), (2, 54)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19001977220829577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19001977220829577, 0.15467367898859083] ***
*** starting iteration: 2; err: [Inf, 0.19001977220829577, 0.15467367898859083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19001977220829577, 0.15467367898859083, 0.14976896165311337] ***
*** starting iteration: 3; err: [Inf, 0.19001977220829577, 0.15467367898859083, 0.14976896165311337] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19001977220829577, 0.15467367898859083, 0.14976896165311337, 0.14904874949343502] ***
*** finished computation of 7 references, err: [Inf, 0.19001977220829577, 0.15467367898859083, 0.14976896165311337, 0.14904874949343502] ***
*** center 1: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 5, 0]]
** centroid: 2, normalized-entropy: 0.462749058578174, [(1, 46), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 36, 0]]
** centroid: 3, normalized-entropy: 0.927526588431676, [(1, 69), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [6, 80, 0]]
** centroid: 4, normalized-entropy: 0.3650551896402848, [(1, 6), (2, 80)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 76, 10]]
** centroid: 5, normalized-entropy: 0.5185697317883058, [(2, 76), (3, 10)]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21751238813251256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21751238813251256, 0.1680706614907831] ***
*** starting iteration: 2; err: [Inf, 0.21751238813251256, 0.1680706614907831] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21751238813251256, 0.1680706614907831, 0.1579687120411545] ***
*** starting iteration: 3; err: [Inf, 0.21751238813251256, 0.1680706614907831, 0.1579687120411545] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21751238813251256, 0.1680706614907831, 0.1579687120411545, 0.15324302886612715] ***
*** finished computation of 7 references, err: [Inf, 0.21751238813251256, 0.1680706614907831, 0.1579687120411545, 0.15324302886612715] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [59, 42, 0]]
** centroid: 1, normalized-entropy: 0.9794662187017297, [(1, 59), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 26, 0]]
** centroid: 2, normalized-entropy: 0.842657877202239, [(1, 70), (2, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 7, 0]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(1, 49), (2, 7)]
*** center 4: selecting labels [1] (freq >= 2) [from [39, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 99, 12]]
** centroid: 6, normalized-entropy: 0.4941829348497886, [(2, 99), (3, 12)]
*** center 7: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2606883322633803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2606883322633803, 0.17569774014130235] ***
*** starting iteration: 2; err: [Inf, 0.2606883322633803, 0.17569774014130235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2606883322633803, 0.17569774014130235, 0.15708339577633887] ***
*** starting iteration: 3; err: [Inf, 0.2606883322633803, 0.17569774014130235, 0.15708339577633887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2606883322633803, 0.17569774014130235, 0.15708339577633887, 0.15283760309964417] ***
*** finished computation of 7 references, err: [Inf, 0.2606883322633803, 0.17569774014130235, 0.15708339577633887, 0.15283760309964417] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [7, 37, 0]]
** centroid: 1, normalized-entropy: 0.6321302781219708, [(1, 7), (2, 37)]
*** center 2: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [3, 62, 1]]
** centroid: 4, normalized-entropy: 0.269828447703074, [(1, 3), (2, 62)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 52, 10]]
** centroid: 5, normalized-entropy: 0.6373874992221911, [(2, 52), (3, 10)]
*** center 6: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [80, 26, 0]]
** centroid: 7, normalized-entropy: 0.8037159237834126, [(1, 80), (2, 26)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25307730201631784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25307730201631784, 0.18836105215921997] ***
*** starting iteration: 2; err: [Inf, 0.25307730201631784, 0.18836105215921997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25307730201631784, 0.18836105215921997, 0.17105658503063023] ***
*** starting iteration: 3; err: [Inf, 0.25307730201631784, 0.18836105215921997, 0.17105658503063023] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25307730201631784, 0.18836105215921997, 0.17105658503063023, 0.1656865151943639] ***
*** finished computation of 7 references, err: [Inf, 0.25307730201631784, 0.18836105215921997, 0.17105658503063023, 0.1656865151943639] ***
*** center 1: selecting labels [1] (freq >= 2) [from [122, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 89, 9]]
** centroid: 2, normalized-entropy: 0.442571064839798, [(2, 89), (3, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [5, 32, 0]]
** centroid: 3, normalized-entropy: 0.5713549744279549, [(1, 5), (2, 32)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 46, 0]]
** centroid: 4, normalized-entropy: 0.9646900825612559, [(1, 72), (2, 46)]
*** center 5: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [31, 4, 0]]
** centroid: 6, normalized-entropy: 0.5127091420308771, [(1, 31), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [68, 3, 0]]
** centroid: 7, normalized-entropy: 0.25253077151613923, [(1, 68), (2, 3)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2364805217310786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2364805217310786, 0.16490059009753166] ***
*** starting iteration: 2; err: [Inf, 0.2364805217310786, 0.16490059009753166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2364805217310786, 0.16490059009753166, 0.1542947818893008] ***
*** starting iteration: 3; err: [Inf, 0.2364805217310786, 0.16490059009753166, 0.1542947818893008] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2364805217310786, 0.16490059009753166, 0.1542947818893008, 0.15007878048345447] ***
*** finished computation of 7 references, err: [Inf, 0.2364805217310786, 0.16490059009753166, 0.1542947818893008, 0.15007878048345447] ***
*** center 1: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 78, 15]]
** centroid: 2, normalized-entropy: 0.6373874992221911, [(2, 78), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 5, 0]]
** centroid: 3, normalized-entropy: 0.35678001438394347, [(1, 69), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [21, 47, 0]]
** centroid: 4, normalized-entropy: 0.8918107543797084, [(1, 21), (2, 47)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 24, 0]]
** centroid: 5, normalized-entropy: 0.9321115676166747, [(1, 45), (2, 24)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [39, 8, 0]]
** centroid: 6, normalized-entropy: 0.6581912658132184, [(1, 39), (2, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28052321628481147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28052321628481147, 0.17225254553277045] ***
*** starting iteration: 2; err: [Inf, 0.28052321628481147, 0.17225254553277045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28052321628481147, 0.17225254553277045, 0.16339726476557553] ***
*** starting iteration: 3; err: [Inf, 0.28052321628481147, 0.17225254553277045, 0.16339726476557553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28052321628481147, 0.17225254553277045, 0.16339726476557553, 0.1517016781680286] ***
*** finished computation of 7 references, err: [Inf, 0.28052321628481147, 0.17225254553277045, 0.16339726476557553, 0.1517016781680286] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [48, 11, 0]]
** centroid: 1, normalized-entropy: 0.693965967334286, [(1, 48), (2, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [78, 14, 0]]
** centroid: 4, normalized-entropy: 0.6152538910563409, [(1, 78), (2, 14)]
*** center 5: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 87, 10]]
** centroid: 6, normalized-entropy: 0.478723511385963, [(2, 87), (3, 10)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [54, 4, 0]]
** centroid: 7, normalized-entropy: 0.36205125173399805, [(1, 54), (2, 4)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17555728996172548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17555728996172548, 0.15425259635670227] ***
*** starting iteration: 2; err: [Inf, 0.17555728996172548, 0.15425259635670227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17555728996172548, 0.15425259635670227, 0.15279643201082946] ***
*** starting iteration: 3; err: [Inf, 0.17555728996172548, 0.15425259635670227, 0.15279643201082946] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17555728996172548, 0.15425259635670227, 0.15279643201082946, 0.15255745710991322] ***
*** finished computation of 7 references, err: [Inf, 0.17555728996172548, 0.15425259635670227, 0.15279643201082946, 0.15255745710991322] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 82, 12]]
** centroid: 1, normalized-entropy: 0.5509844433017146, [(2, 82), (3, 12)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 64, 3]]
** centroid: 2, normalized-entropy: 0.26377743669413856, [(2, 64), (3, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [65, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 11, 0]]
** centroid: 5, normalized-entropy: 0.7444131797881749, [(1, 41), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [65, 4, 0]]
** centroid: 6, normalized-entropy: 0.3193373865339728, [(1, 65), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [56, 19, 0]]
** centroid: 7, normalized-entropy: 0.8165187119538281, [(1, 56), (2, 19)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20875953937508165] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20875953937508165, 0.16797045626398177] ***
*** starting iteration: 2; err: [Inf, 0.20875953937508165, 0.16797045626398177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20875953937508165, 0.16797045626398177, 0.15577722466737032] ***
*** starting iteration: 3; err: [Inf, 0.20875953937508165, 0.16797045626398177, 0.15577722466737032] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20875953937508165, 0.16797045626398177, 0.15577722466737032, 0.14927153651043773] ***
*** finished computation of 7 references, err: [Inf, 0.20875953937508165, 0.16797045626398177, 0.15577722466737032, 0.14927153651043773] ***
*** center 1: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 5, 0]]
** centroid: 2, normalized-entropy: 0.32840071392894665, [(1, 78), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [7, 70, 0]]
** centroid: 3, normalized-entropy: 0.43949698692151346, [(1, 7), (2, 70)]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [1, 71, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [47, 13, 0]]
** centroid: 6, normalized-entropy: 0.7540340561971327, [(1, 47), (2, 13)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 22, 11]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 22), (3, 11)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1723359058070928] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1723359058070928, 0.1585104801878333] ***
*** starting iteration: 2; err: [Inf, 0.1723359058070928, 0.1585104801878333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1723359058070928, 0.1585104801878333, 0.15088083323277532] ***
*** starting iteration: 3; err: [Inf, 0.1723359058070928, 0.1585104801878333, 0.15088083323277532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1723359058070928, 0.1585104801878333, 0.15088083323277532, 0.14820486630592494] ***
*** finished computation of 7 references, err: [Inf, 0.1723359058070928, 0.1585104801878333, 0.15088083323277532, 0.14820486630592494] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [70, 38, 0]]
** centroid: 1, normalized-entropy: 0.9357110512652843, [(1, 70), (2, 38)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [33, 52, 0]]
** centroid: 2, normalized-entropy: 0.9636512739945752, [(1, 33), (2, 52)]
*** center 3: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 86, 9]]
** centroid: 6, normalized-entropy: 0.4520861986745138, [(2, 86), (3, 9)]
*** center 7: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2959970755726099] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2959970755726099, 0.20613874610699714] ***
*** starting iteration: 2; err: [Inf, 0.2959970755726099, 0.20613874610699714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2959970755726099, 0.20613874610699714, 0.15786564084887506] ***
*** starting iteration: 3; err: [Inf, 0.2959970755726099, 0.20613874610699714, 0.15786564084887506] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2959970755726099, 0.20613874610699714, 0.15786564084887506, 0.14924527108483016] ***
*** finished computation of 7 references, err: [Inf, 0.2959970755726099, 0.20613874610699714, 0.15786564084887506, 0.14924527108483016] ***
*** center 1: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [90, 26, 0]]
** centroid: 4, normalized-entropy: 0.7676515870125797, [(1, 90), (2, 26)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 15, 14]]
** centroid: 5, normalized-entropy: 0.999142103991909, [(2, 15), (3, 14)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 8, 0]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(1, 40), (2, 8)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 65, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22554343626275658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22554343626275658, 0.17955445717275142] ***
*** starting iteration: 2; err: [Inf, 0.22554343626275658, 0.17955445717275142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22554343626275658, 0.17955445717275142, 0.16608114528935403] ***
*** starting iteration: 3; err: [Inf, 0.22554343626275658, 0.17955445717275142, 0.16608114528935403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22554343626275658, 0.17955445717275142, 0.16608114528935403, 0.16074049125332385] ***
*** finished computation of 7 references, err: [Inf, 0.22554343626275658, 0.17955445717275142, 0.16608114528935403, 0.16074049125332385] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [12, 61, 0]]
** centroid: 1, normalized-entropy: 0.644694043811662, [(1, 12), (2, 61)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [29, 5, 0]]
** centroid: 2, normalized-entropy: 0.6024308020404452, [(1, 29), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 79, 12]]
** centroid: 3, normalized-entropy: 0.5625393752025972, [(2, 79), (3, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [73, 41, 0]]
** centroid: 4, normalized-entropy: 0.9423915493613846, [(1, 73), (2, 41)]
*** center 5: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21653252105787396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21653252105787396, 0.17650481746159494] ***
*** starting iteration: 2; err: [Inf, 0.21653252105787396, 0.17650481746159494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21653252105787396, 0.17650481746159494, 0.15015016758488492] ***
*** starting iteration: 3; err: [Inf, 0.21653252105787396, 0.17650481746159494, 0.15015016758488492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21653252105787396, 0.17650481746159494, 0.15015016758488492, 0.1446084209252149] ***
*** finished computation of 7 references, err: [Inf, 0.21653252105787396, 0.17650481746159494, 0.15015016758488492, 0.1446084209252149] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [37, 19, 0]]
** centroid: 1, normalized-entropy: 0.9241335419915458, [(1, 37), (2, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 62, 9]]
** centroid: 3, normalized-entropy: 0.5484866088431741, [(2, 62), (3, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 25, 0]]
** centroid: 4, normalized-entropy: 0.8827586787955116, [(1, 58), (2, 25)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 79, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21264200269430875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21264200269430875, 0.16016786457132548] ***
*** starting iteration: 2; err: [Inf, 0.21264200269430875, 0.16016786457132548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21264200269430875, 0.16016786457132548, 0.1531401004374493] ***
*** starting iteration: 3; err: [Inf, 0.21264200269430875, 0.16016786457132548, 0.1531401004374493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21264200269430875, 0.16016786457132548, 0.1531401004374493, 0.14904889678023756] ***
*** finished computation of 7 references, err: [Inf, 0.21264200269430875, 0.16016786457132548, 0.1531401004374493, 0.14904889678023756] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 50, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 14, 0]]
** centroid: 2, normalized-entropy: 0.6840384356390419, [(1, 63), (2, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 22, 9]]
** centroid: 5, normalized-entropy: 0.8691375806126381, [(2, 22), (3, 9)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [76, 27, 0]]
** centroid: 6, normalized-entropy: 0.829952434172285, [(1, 76), (2, 27)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 80, 0]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(1, 4), (2, 80)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21978466634824873] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21978466634824873, 0.1741633979603648] ***
*** starting iteration: 2; err: [Inf, 0.21978466634824873, 0.1741633979603648] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21978466634824873, 0.1741633979603648, 0.15989618690358476] ***
*** starting iteration: 3; err: [Inf, 0.21978466634824873, 0.1741633979603648, 0.15989618690358476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21978466634824873, 0.1741633979603648, 0.15989618690358476, 0.15450158927962185] ***
*** finished computation of 7 references, err: [Inf, 0.21978466634824873, 0.1741633979603648, 0.15989618690358476, 0.15450158927962185] ***
*** center 1: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 95, 11]]
** centroid: 2, normalized-entropy: 0.4808446942193282, [(2, 95), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [10, 38, 0]]
** centroid: 3, normalized-entropy: 0.7382848661434506, [(1, 10), (2, 38)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [52, 4, 0]]
** centroid: 4, normalized-entropy: 0.3712323266408756, [(1, 52), (2, 4)]
*** center 5: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [77, 6, 0]]
** centroid: 6, normalized-entropy: 0.3744088453489206, [(1, 77), (2, 6)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [56, 34, 0]]
** centroid: 7, normalized-entropy: 0.9564574047992596, [(1, 56), (2, 34)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20682353536598386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20682353536598386, 0.17692580018937587] ***
*** starting iteration: 2; err: [Inf, 0.20682353536598386, 0.17692580018937587] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20682353536598386, 0.17692580018937587, 0.15702965180017053] ***
*** starting iteration: 3; err: [Inf, 0.20682353536598386, 0.17692580018937587, 0.15702965180017053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20682353536598386, 0.17692580018937587, 0.15702965180017053, 0.15127938681468367] ***
*** finished computation of 7 references, err: [Inf, 0.20682353536598386, 0.17692580018937587, 0.15702965180017053, 0.15127938681468367] ***
*** center 1: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 61, 7]]
** centroid: 3, normalized-entropy: 0.4782501641071144, [(2, 61), (3, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [53, 21, 0]]
** centroid: 4, normalized-entropy: 0.8605553930586318, [(1, 53), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 46, 0]]
** centroid: 5, normalized-entropy: 0.6769418697808861, [(1, 10), (2, 46)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [26, 59, 0]]
** centroid: 6, normalized-entropy: 0.8883630233845602, [(1, 26), (2, 59)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28369301761314275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28369301761314275, 0.17433334602136166] ***
*** starting iteration: 2; err: [Inf, 0.28369301761314275, 0.17433334602136166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28369301761314275, 0.17433334602136166, 0.14882236400526017] ***
*** starting iteration: 3; err: [Inf, 0.28369301761314275, 0.17433334602136166, 0.14882236400526017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28369301761314275, 0.17433334602136166, 0.14882236400526017, 0.14661998577415944] ***
*** finished computation of 7 references, err: [Inf, 0.28369301761314275, 0.17433334602136166, 0.14882236400526017, 0.14661998577415944] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 67, 11]]
** centroid: 1, normalized-entropy: 0.5869185834047994, [(2, 67), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 29, 0]]
** centroid: 3, normalized-entropy: 0.9335289015212996, [(1, 54), (2, 29)]
*** center 4: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [35, 11, 0]]
** centroid: 5, normalized-entropy: 0.7935912300117066, [(1, 35), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 79, 0]]
** centroid: 6, normalized-entropy: 0.40707680632541937, [(1, 7), (2, 79)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [57, 4, 0]]
** centroid: 7, normalized-entropy: 0.34918437350730797, [(1, 57), (2, 4)]
finished with 8 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 362,3 => 23,1 => 615), Dict(2 => 346,3 => 36,1 => 618))
[ Info: ===== scores for single classifier: {"micro_f1":0.894,"precision":0.894,"recall":0.894,"macro_recall":0.601349371145656,"macro_f1":0.5957683398634829,"accuracy":0.894,"class_f1":{"2":0.841317365269461,"3":0.0,"1":0.9459876543209876},"class_precision":{"2":0.8726708074534162,"3":0.0,"1":0.9041297935103245},"class_recall":{"2":0.8121387283236994,"3":0.0,"1":0.9919093851132686}}
[ Info: ===== scores for 1: {"micro_f1":0.958,"precision":0.958,"recall":0.958,"macro_recall":0.8663474069501343,"macro_f1":0.9053563548102384,"accuracy":0.958,"class_f1":{"2":0.9403409090909091,"3":0.8,"1":0.9757281553398058},"class_precision":{"2":0.9245810055865922,"3":1.0,"1":0.9757281553398058},"class_recall":{"2":0.9566473988439307,"3":0.6666666666666666,"1":0.9757281553398058}}
[ Info: ===== scores for 5: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.8596696618050229,"macro_f1":0.901060957426509,"accuracy":0.961,"class_f1":{"2":0.9445234708392602,"3":0.7796610169491525,"1":0.9789983844911146},"class_precision":{"2":0.9299719887955182,"3":1.0,"1":0.9774193548387097},"class_recall":{"2":0.9595375722543352,"3":0.6388888888888888,"1":0.9805825242718447}}
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ===== scores for 7: {"micro_f1":0.942,"precision":0.942,"recall":0.942,"macro_recall":0.651408297011305,"macro_f1":0.634364915856243,"accuracy":0.942,"class_f1":{"2":0.9209809264305178,"3":0.0,"1":0.9821138211382113},"class_precision":{"2":0.8711340206185567,"3":0.0,"1":0.9869281045751634},"class_recall":{"2":0.976878612716763,"3":0.0,"1":0.9773462783171522}}
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ===== scores for 9: {"micro_f1":0.936,"precision":0.936,"recall":0.936,"macro_recall":0.6473240174345736,"macro_f1":0.6300807251097579,"accuracy":0.936,"class_f1":{"2":0.9130434782608696,"3":0.0,"1":0.9771986970684039},"class_precision":{"2":0.8615384615384616,"3":0.0,"1":0.9836065573770492},"class_recall":{"2":0.9710982658959537,"3":0.0,"1":0.970873786407767}}
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ===== scores for 11: {"micro_f1":0.939,"precision":0.939,"recall":0.939,"macro_recall":0.6489421404119199,"macro_f1":0.6321572208621524,"accuracy":0.939,"class_f1":{"2":0.9167803547066848,"3":0.0,"1":0.9796913078797725},"class_precision":{"2":0.8682170542635659,"3":0.0,"1":0.9836867862969005},"class_recall":{"2":0.9710982658959537,"3":0.0,"1":0.9757281553398058}}
(score = 0.964, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.964, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.956, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.956, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.94, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.94, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.942, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.942, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.967,"k":3,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.857578157314394,"macro_f1":0.8989592187816431,"accuracy":0.967,"class_f1":{"2":0.9537166900420757,"3":0.7586206896551725,"1":0.984540276647681},"class_precision":{"2":0.9264305177111717,"3":1.0,"1":0.9901800327332242},"class_recall":{"2":0.9826589595375722,"3":0.6111111111111112,"1":0.9789644012944984}}
Test Summary: | Pass  Total
AKNC          |    8      8
[721, 1, 2, 1, 2, 2, 3, 6, 8, 7, 3, 2, 2, 3, 1, 3, 1, 35, 9, 4, 7, 10, 2, 1, 7, 6, 18, 14, 18, 11, 2, 12, 3, 4, 3, 3, 18, 22, 3, 19, 13, 1, 1, 24, 3, 25, 6, 21, 7, 14, 51, 39, 4, 5, 3, 50, 15, 3, 1, 21, 22, 5, 2, 6, 32, 37, 10, 3, 21, 6, 13, 11, 26, 12, 2, 14, 20, 13, 45, 47, 31, 50, 5, 55, 5, 17, 32, 14, 25, 19, 1, 10, 3, 11, 13, 21, 37, 21, 3, 8, 1, 104, 44, 6, 53, 8, 3, 10, 203, 29, 19, 17, 16, 11, 1, 5, 87, 11, 1, 7, 106, 14, 182, 15, 4, 13, 28, 28, 49, 5, 199, 86, 33, 17, 8, 5, 22, 3, 23, 85, 12, 23, 27, 77, 73, 39, 5, 33, 1, 26, 77, 17, 3, 10, 18, 23, 115, 24, 4, 71, 69, 1, 2, 31, 25, 4, 23, 12, 2, 31, 21, 15, 27, 74, 7, 43, 7, 43, 2, 17, 15, 10, 62, 43, 18, 251, 33, 11, 35, 46, 5, 13, 17, 26, 433, 6, 241, 23, 7, 138, 5, 29, 296, 3, 5, 8, 20, 2, 14, 53, 82, 14, 92, 5, 4, 12, 184, 12, 12, 65, 25, 21, 21, 8, 1, 10, 6, 49, 26, 49, 13, 40, 163, 36, 1, 4, 24, 21, 7, 182, 4, 8, 69, 21, 11, 4, 19, 34, 10, 37, 52, 30, 8, 23, 78, 34, 7, 8, 5, 3, 209, 52, 325, 16, 43, 18, 17, 18, 8, 96, 43, 7, 1, 40, 36, 25, 4, 53, 5, 22, 29, 9, 59, 122, 4, 14, 22, 52, 2, 19, 16, 11, 51, 11, 7, 7, 209, 28, 38, 1]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.622, speedup = 0.37918953347274015, eval_ratio = 0.065527)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3954117063492063,"recall":0.3802083333333333,"f1":null,"seconds":0.00014816224575042725,"exhaustive_search_seconds":0.00040167197585105896,"evaluations":449.9921875,"distances_sum":1741.4349197896204}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5468749999999999,"recall":0.5468749999999999,"f1":null,"seconds":0.00025108642876148224,"exhaustive_search_seconds":0.00040167197585105896,"evaluations":589.9609375,"distances_sum":1666.683440196286}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6475694444444443,"recall":0.6475694444444443,"f1":0.6475694444444443,"seconds":0.000356379896402359,"exhaustive_search_seconds":0.00040167197585105896,"evaluations":693.328125,"distances_sum":1608.4583285365961}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7248263888888885,"recall":0.7248263888888885,"f1":0.7248263888888885,"seconds":0.000743987038731575,"exhaustive_search_seconds":0.00040167197585105896,"evaluations":817.2890625,"distances_sum":1580.4590666993674}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.780381944444444,"recall":0.780381944444444,"f1":0.780381944444444,"seconds":0.0006543789058923721,"exhaustive_search_seconds":0.00040167197585105896,"evaluations":916.6328125,"distances_sum":1561.6556881492577}
KCenters.DeloneInvIndex> reached performance {"precision":0.8185763888888882,"recall":0.8185763888888882,"f1":0.8185763888888882,"seconds":0.0006612706929445267,"exhaustive_search_seconds":0.00040167197585105896,"evaluations":1036.0625,"distances_sum":1551.5162360790314}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7980000000000002, speedup = 0.8896739447598563, eval_ratio = 0.09615399999999999)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
