Julia Version 1.6.0-DEV.144
Commit 8c8f7a66a2 (2020-06-02 16:39 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed PooledArrays ──────────────── v0.5.3
  Installed Missings ──────────────────── v0.4.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed TableTraits ───────────────── v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed DataFrames ────────────────── v0.20.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed OrderedCollections ────────── v1.2.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed Parsers ───────────────────── v1.0.4
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed StatsBase ─────────────────── v0.32.2
  Installed Tables ────────────────────── v1.0.4
  Installed SimilaritySearch ──────────── v0.3.19
  Installed MappedArrays ──────────────── v0.2.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed JSON ──────────────────────── v0.21.0
  Installed Compat ────────────────────── v3.10.0
  Installed DataStructures ────────────── v0.17.17
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.4
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_CW504M/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_CW504M/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.4
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9316620069742203
[ Info: 0.8326150393486023
[ Info: 0.5553847705821197
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3341999435176452
mean(cdnet.distances) = 0.4256795332580805
mean(crand.distances) = 0.3361528710772594
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3720703125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3720703125,"f1":null,"seconds":4.716217517852783e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":5.8828125,"distances_sum":1063.508338737736}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7871219058719067,"seconds":3.602355718612671e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.5078125,"distances_sum":1920.0262195878577}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.68359375,"f1":null,"seconds":4.928559064865112e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.4453125,"distances_sum":1981.7930874665974}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.68359375,"state":{"ssize":1,"bsize":4},"perf":{"precision":null,"recall":0.68359375,"f1":null,"seconds":4.928559064865112e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.4453125,"distances_sum":1981.7930874665974}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7265625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7265625,"f1":0.8338286713286722,"seconds":5.904585123062134e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.875,"distances_sum":2194.443990580776}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9306292665667673,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.6875,"distances_sum":2774.8632066113682}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8798828125,"state":{"ssize":8,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9306292665667673,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.6875,"distances_sum":2774.8632066113682}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":12,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9470924908424914,"seconds":6.513670086860657e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.7421875,"distances_sum":2959.7023120213985}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":11,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9355368589743597,"seconds":6.457790732383728e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.6796875,"distances_sum":2853.8162041012265}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9644402472527477,"seconds":6.485730409622192e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8828125,"distances_sum":3084.170415113027}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9335558538683547,"seconds":6.934627890586853e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.6953125,"distances_sum":2868.0167062971414}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9644402472527477,"seconds":6.485730409622192e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8828125,"distances_sum":3084.170415113027}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9644402472527477,"seconds":6.485730409622192e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8828125,"distances_sum":3084.170415113027}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6552734375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6552734375,"f1":0.7822035603285611,"seconds":5.140900611877441e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.703125,"distances_sum":1777.2773268482883}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.541015625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.541015625,"f1":0.6886139901764907,"seconds":4.889443516731262e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.1484375,"distances_sum":1389.1423934455283}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6552734375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6552734375,"f1":0.7822035603285611,"seconds":5.140900611877441e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.703125,"distances_sum":1777.2773268482883}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9365988178488184,"seconds":6.28642737865448e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.84375,"distances_sum":2646.581291811367}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9334935897435903,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8125,"distances_sum":2629.65814975544}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8916015625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.9365988178488184,"seconds":6.28642737865448e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.84375,"distances_sum":2646.581291811367}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9750572344322349,"seconds":6.724148988723755e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8828125,"distances_sum":2996.847728683696}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9636389652014659,"seconds":6.452202796936035e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.875,"distances_sum":2886.3192124966904}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9694196428571432,"seconds":6.467103958129883e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9375,"distances_sum":2906.7222894446195}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9453983516483522,"seconds":6.280839443206787e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.7109375,"distances_sum":2787.7265982971203}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.938295558608059,"seconds":6.580725312232971e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.6875,"distances_sum":2706.3012819526098}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9750572344322349,"seconds":6.724148988723755e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8828125,"distances_sum":2996.847728683696}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9750572344322349,"seconds":6.724148988723755e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8828125,"distances_sum":2996.847728683696}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2138671875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2138671875,"f1":null,"seconds":4.190951585769653e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":6.6171875,"distances_sum":557.6060824440192}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7957011738261746,"seconds":5.27501106262207e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.5703125,"distances_sum":1752.7091606089866}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5673828125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5673828125,"f1":null,"seconds":4.949048161506653e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.1875,"distances_sum":1396.4854408424455}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6767578125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6767578125,"f1":0.7957011738261746,"seconds":5.27501106262207e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.5703125,"distances_sum":1752.7091606089866}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9429773351648358,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.78125,"distances_sum":2652.7147752304095}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9114156676656684,"seconds":6.215646862983704e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.7109375,"distances_sum":2403.330128203515}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8994140625,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.9429773351648358,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.78125,"distances_sum":2652.7147752304095}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9602163461538465,"seconds":6.860122084617615e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8203125,"distances_sum":2833.3931071926963}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9678228021978025,"seconds":6.463378667831421e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.890625,"distances_sum":2882.4100915209438}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9484088827838834,"seconds":7.508322596549988e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.796875,"distances_sum":2741.955111274611}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9678228021978025,"seconds":6.463378667831421e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.890625,"distances_sum":2882.4100915209438}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9678228021978025,"seconds":6.463378667831421e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.890625,"distances_sum":2882.4100915209438}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.19921875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.19921875,"f1":null,"seconds":3.684312105178833e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":5.015625,"distances_sum":558.4835570989727}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.638671875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.638671875,"f1":0.7663189241314249,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.59375,"distances_sum":1738.7813036796217}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.337890625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.337890625,"f1":null,"seconds":3.861263394355774e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":5.4765625,"distances_sum":853.4954000000233}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.638671875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.638671875,"f1":0.7663189241314249,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.59375,"distances_sum":1738.7813036796217}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9306693306693311,"seconds":6.496906280517578e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.6015625,"distances_sum":2628.0693015245797}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.732421875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.732421875,"f1":0.835460893273394,"seconds":5.76116144657135e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.9921875,"distances_sum":2129.3400770898234}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.732421875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.732421875,"f1":0.8357236513486521,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.9921875,"distances_sum":2105.89929789691}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7421875,"f1":0.8442661505161512,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.0703125,"distances_sum":2114.3038231872365}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9306693306693311,"seconds":6.496906280517578e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.6015625,"distances_sum":2628.0693015245797}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9439274267399274,"seconds":6.202608346939087e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.6171875,"distances_sum":2762.212824291424}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9622596153846158,"seconds":6.362795829772949e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8125,"distances_sum":2881.61097262406}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9485004578754583,"seconds":6.444752216339111e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.6796875,"distances_sum":2786.2423646009106}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9622596153846158,"seconds":6.362795829772949e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8125,"distances_sum":2881.61097262406}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9622596153846158,"seconds":6.362795829772949e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8125,"distances_sum":2881.61097262406}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6083984375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6083984375,"f1":0.7448374542124548,"seconds":5.133450031280518e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.1484375,"distances_sum":1697.008051930098}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1396484375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1396484375,"f1":null,"seconds":3.6172568798065186e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":4.2578125,"distances_sum":414.3186810133222}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6083984375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6083984375,"f1":0.7448374542124548,"seconds":5.133450031280518e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.1484375,"distances_sum":1697.008051930098}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6123046875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6123046875,"f1":0.7468614718614727,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.34375,"distances_sum":1685.6544821649643}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9017118298368305,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.6328125,"distances_sum":2345.8937057067465}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8518616799866808,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.328125,"distances_sum":2107.9154040339617}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.833984375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.833984375,"f1":0.9017118298368305,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.6328125,"distances_sum":2345.8937057067465}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9127008408258415,"seconds":6.3925981521606445e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.640625,"distances_sum":2520.4135138052357}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9493017399267405,"seconds":6.800517439842224e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.8125,"distances_sum":2742.9399839532675}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9493017399267405,"seconds":6.800517439842224e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.8125,"distances_sum":2742.9399839532675}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.912109375,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9493017399267405,"seconds":6.800517439842224e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.8125,"distances_sum":2742.9399839532675}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5634765625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5634765625,"f1":0.703895063270064,"seconds":4.8335641622543335e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":7.2890625,"distances_sum":1469.316396415518}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.251953125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.251953125,"f1":null,"seconds":3.6526471376419067e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":6.6015625,"distances_sum":604.9883489745212}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5634765625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5634765625,"f1":0.703895063270064,"seconds":4.8335641622543335e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":7.2890625,"distances_sum":1469.316396415518}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8709134615384624,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.25,"distances_sum":2223.721615666413}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7949649309024318,"seconds":4.848465323448181e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":7.8359375,"distances_sum":1808.6108975303607}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.587890625, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.587890625,"f1":null,"seconds":4.393979907035828e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":7.5625,"distances_sum":1553.2414302919467}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7822265625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7822265625,"f1":0.8709134615384624,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.25,"distances_sum":2223.721615666413}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9531135531135535,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.828125,"distances_sum":2866.2226378394607}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9332563270063273,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.6171875,"distances_sum":2707.782749652741}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9531135531135535,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.828125,"distances_sum":2866.2226378394607}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9169921875,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9531135531135535,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.828125,"distances_sum":2866.2226378394607}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.854940372127873,"seconds":5.209818482398987e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.4453125,"distances_sum":2142.852726618953}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.65234375,"f1":0.7775337509712518,"seconds":4.824250936508179e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.9375,"distances_sum":1753.737981268856}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.854940372127873,"seconds":5.209818482398987e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.4453125,"distances_sum":2142.852726618953}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.818359375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.818359375,"f1":0.8923337079587088,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.4765625,"distances_sum":2392.500186625012}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7958984375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.7958984375,"f1":0.8795615842490853,"seconds":5.4836273193359375e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.609375,"distances_sum":2281.047837040022}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8995598151848158,"seconds":5.4836273193359375e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.6875,"distances_sum":2434.558452784549}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9007674617049626,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.6015625,"distances_sum":2454.5822198176475}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8310546875,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8310546875,"f1":0.9007674617049626,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.6015625,"distances_sum":2454.5822198176475}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.934887508325009,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.6328125,"distances_sum":2722.9560394349987}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9408195970695977,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.6953125,"distances_sum":2777.8554008630294}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9177999084249091,"seconds":5.619600415229797e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.625,"distances_sum":2558.3059096174607}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9443712537462544,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.7109375,"distances_sum":2780.453471625153}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9275245587745594,"seconds":5.6140124797821045e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.5703125,"distances_sum":2642.698898201828}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.958207417582418,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.765625,"distances_sum":2925.117160027346}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.958207417582418,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.765625,"distances_sum":2925.117160027346}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.958207417582418,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.765625,"distances_sum":2925.117160027346}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.875384511322012,"seconds":4.827976226806641e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.203125,"distances_sum":1585.8186310755145}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.8892227564102572,"seconds":4.723668098449707e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.359375,"distances_sum":1642.0515207729275}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5830078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5830078125,"f1":null,"seconds":3.812834620475769e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":7.015625,"distances_sum":1061.2589493046148}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8115234375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.8115234375,"f1":0.8892227564102572,"seconds":4.723668098449707e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.359375,"distances_sum":1642.0515207729275}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9326954295704302,"seconds":5.336478352546692e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.7421875,"distances_sum":1878.0488466128743}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9293872793872799,"seconds":5.189329385757446e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8125,"distances_sum":1835.4617102439008}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9386847527472534,"seconds":5.204230546951294e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.640625,"distances_sum":1909.5484003803076}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.906936813186814,"seconds":5.109235644340515e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.421875,"distances_sum":1739.590997511447}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9386847527472534,"seconds":5.204230546951294e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.640625,"distances_sum":1909.5484003803076}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9623569139194144,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.90625,"distances_sum":2000.191835818194}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9635244963369967,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8203125,"distances_sum":2046.6993392689062}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9672103937728942,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.875,"distances_sum":2028.439493872617}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.942327984515485,"seconds":5.245208740234375e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8359375,"distances_sum":1904.277507965228}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9709077380952383,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8984375,"distances_sum":2061.08614925254}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.97654532967033,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8984375,"distances_sum":2099.7861344510006}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.921875,"f1":0.955774954212455,"seconds":5.27501106262207e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.828125,"distances_sum":1984.8451174560973}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9594150641025645,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8359375,"distances_sum":2004.9665274906945}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.97654532967033,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8984375,"distances_sum":2099.7861344510006}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.97654532967033,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8984375,"distances_sum":2099.7861344510006}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5859375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5859375,"f1":0.7187562437562444,"seconds":3.976747393608093e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.890625,"distances_sum":1201.8418174525937}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.439453125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.439453125,"f1":null,"seconds":3.4440308809280396e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.4609375,"distances_sum":814.0265545735127}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2197265625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2197265625,"f1":null,"seconds":3.2410025596618652e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.4375,"distances_sum":472.42702726040153}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5859375,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.5859375,"f1":0.7187562437562444,"seconds":3.976747393608093e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.890625,"distances_sum":1201.8418174525937}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8996826090576098,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.515625,"distances_sum":1868.2346244791713}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.8028887778887787,"seconds":4.6603381633758545e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.5703125,"distances_sum":1431.618282772113}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.595703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.595703125,"f1":null,"seconds":4.274770617485046e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.96875,"distances_sum":1214.942281714218}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8600368381618391,"seconds":5.073845386505127e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.125,"distances_sum":1678.9747253018547}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8686480186480195,"seconds":4.956498742103577e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.1328125,"distances_sum":1726.017761224917}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.826171875,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.826171875,"f1":0.8996826090576098,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.515625,"distances_sum":1868.2346244791713}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9578353937728943,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.875,"distances_sum":2248.274997783381}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9576293498168502,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8828125,"distances_sum":2234.751884673261}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9492476273726278,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8203125,"distances_sum":2192.823022299238}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9409486346986351,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8046875,"distances_sum":2139.1378303995584}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9522149725274731,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8515625,"distances_sum":2213.148716069691}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9332532051282059,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.796875,"distances_sum":2096.6694049967014}, best_list's length: 15, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9578353937728943,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.875,"distances_sum":2248.274997783381}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9578353937728943,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.875,"distances_sum":2248.274997783381}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.216796875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.216796875,"f1":null,"seconds":3.550201654434204e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.5625,"distances_sum":451.53858921006827}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8775276806526813,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.3125,"distances_sum":1773.4543429646242}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.798828125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.798828125,"f1":0.8775276806526813,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.3125,"distances_sum":1773.4543429646242}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9609088827838832,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8671875,"distances_sum":2284.426070487003}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9609088827838832,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8671875,"distances_sum":2284.426070487003}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9765625000000004,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9453125,"distances_sum":2353.4762359984293}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9771978021978023,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.96875,"distances_sum":2358.982555130608}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9729166666666669,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9453125,"distances_sum":2329.245112172632}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9771978021978023,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.96875,"distances_sum":2358.982555130608}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9771978021978023,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.96875,"distances_sum":2358.982555130608}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.868436251248752,"seconds":5.0049275159835815e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.46875,"distances_sum":1733.6686182153467}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6611328125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6611328125,"f1":0.7811442030192036,"seconds":4.928559064865112e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":7.96875,"distances_sum":1375.199349552071}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5859375,"f1":0.7214688089688095,"seconds":4.1369348764419556e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":7.4375,"distances_sum":1217.970283865074}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.783203125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.783203125,"f1":0.868436251248752,"seconds":5.0049275159835815e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.46875,"distances_sum":1733.6686182153467}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9649954212454216,"seconds":5.455687642097473e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.8671875,"distances_sum":2312.0508609012727}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9294585622710627,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.859375,"distances_sum":2058.1605358793076}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9649954212454216,"seconds":5.455687642097473e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.8671875,"distances_sum":2312.0508609012727}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9791666666666671,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.984375,"distances_sum":2378.457867534124}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9791666666666671,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.984375,"distances_sum":2378.457867534124}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9791666666666671,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.984375,"distances_sum":2378.457867534124}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5849609375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5849609375,"f1":0.7225793303918311,"seconds":4.246830940246582e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.1328125,"distances_sum":1580.5747587755916}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8733984765234772,"seconds":5.0477683544158936e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.0078125,"distances_sum":2282.4212003392336}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.279296875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.279296875,"f1":null,"seconds":3.337860107421875e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.1953125,"distances_sum":763.6962511689476}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7890625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7890625,"f1":0.8733984765234772,"seconds":5.0477683544158936e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.0078125,"distances_sum":2282.4212003392336}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9074748168498173,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.3828125,"distances_sum":2567.7772204424764}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8408203125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8408203125,"f1":0.9074748168498173,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.3828125,"distances_sum":2567.7772204424764}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9610176282051287,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.84375,"distances_sum":3066.1896866971015}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9171646062271068,"seconds":5.116686224937439e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.5390625,"distances_sum":2688.619553293253}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9610176282051287,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.84375,"distances_sum":3066.1896866971015}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9610176282051287,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.84375,"distances_sum":3066.1896866971015}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3212890625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.3212890625,"f1":null,"seconds":3.475695848464966e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":5.8125,"distances_sum":942.0526514246786}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4111328125, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.4111328125,"f1":0.5569402819402819,"seconds":3.4011900424957275e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":5.78125,"distances_sum":1046.2602042751562}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.53125,"f1":0.6778572122322126,"seconds":3.904104232788086e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":6.4609375,"distances_sum":1303.8731253387198}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.53125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.53125,"f1":0.6778572122322126,"seconds":3.904104232788086e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":6.4609375,"distances_sum":1303.8731253387198}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6748046875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6748046875,"f1":0.7935746545121553,"seconds":4.472211003303528e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.1796875,"distances_sum":1799.3425910055685}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.556640625,"f1":null,"seconds":4.274770617485046e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":6.59375,"distances_sum":1440.9368061630528}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8911661255411265,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.9453125,"distances_sum":2443.9902776320755}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.7962927697302704,"seconds":4.386529326438904e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.140625,"distances_sum":1798.903134352544}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.814453125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.814453125,"f1":0.8911661255411265,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.9453125,"distances_sum":2443.9902776320755}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8963775807525817,"seconds":4.900619387626648e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.015625,"distances_sum":2508.063153558595}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.91392825924076,"seconds":5.217269062995911e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.3984375,"distances_sum":2702.1787047677535}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8944430569430577,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.0078125,"distances_sum":2546.3149525794856}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8515625,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8515625,"f1":0.91392825924076,"seconds":5.217269062995911e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.3984375,"distances_sum":2702.1787047677535}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8515625,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8515625,"f1":0.91392825924076,"seconds":5.217269062995911e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.3984375,"distances_sum":2702.1787047677535}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3203125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.3203125,"f1":null,"seconds":3.4980475902557373e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":5.828125,"distances_sum":975.3331422449864}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3203125,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.3203125,"f1":null,"seconds":3.4980475902557373e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":5.828125,"distances_sum":975.3331422449864}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4306640625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4306640625,"f1":null,"seconds":3.7606805562973022e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":5.796875,"distances_sum":1101.9977938016807}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.54296875, conf: {"ssize":9,"bsize":3}, perf: {"precision":null,"recall":0.54296875,"f1":null,"seconds":3.941357135772705e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":6.546875,"distances_sum":1390.8043970321785}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.54296875,"state":{"ssize":9,"bsize":3},"perf":{"precision":null,"recall":0.54296875,"f1":null,"seconds":3.941357135772705e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":6.546875,"distances_sum":1390.8043970321785}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":12,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8631810897435904,"seconds":4.928559064865112e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.6171875,"distances_sum":2308.1134644631215}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":10,"bsize":6}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8872570138195145,"seconds":5.461275577545166e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.9140625,"distances_sum":2506.2177809591}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8628298784548792,"seconds":5.133450031280518e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.5546875,"distances_sum":2247.577895992538}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.8876722236097244,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.984375,"distances_sum":2529.345209366286}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8115234375,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.8115234375,"f1":0.8876722236097244,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.984375,"distances_sum":2529.345209366286}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8115234375,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.8115234375,"f1":0.8876722236097244,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.984375,"distances_sum":2529.345209366286}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8605831668331676,"seconds":4.867091774940491e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.671875,"distances_sum":2304.426297102323}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.66796875,"f1":null,"seconds":4.8745423555374146e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.1875,"distances_sum":1810.4828205903436}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.864220675158176,"seconds":5.301088094711304e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.7265625,"distances_sum":2286.506532197892}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7724609375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7724609375,"f1":0.864220675158176,"seconds":5.301088094711304e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.7265625,"distances_sum":2286.506532197892}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.944373855311356,"seconds":5.850568413734436e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.7265625,"distances_sum":3106.456783638933}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.806640625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.806640625,"f1":0.8860524891774901,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.921875,"distances_sum":2531.8974952941876}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9523695054945059,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.75,"distances_sum":3178.578381531687}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9600274725274729,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.7890625,"distances_sum":3239.5173929407288}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8986034798534807,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.9765625,"distances_sum":2556.5456101215836}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9476820054945061,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.7421875,"distances_sum":3137.298339779685}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9600274725274729,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.7890625,"distances_sum":3239.5173929407288}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.964938186813187,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.890625,"distances_sum":3221.7658100723365}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9709649725274729,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.875,"distances_sum":3312.7629148765745}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9619448260073262,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.8671875,"distances_sum":3222.2989849008363}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9732715201465205,"seconds":6.252899765968323e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.9296875,"distances_sum":3292.9146063479798}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.970703125, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.970703125,"f1":0.9840773809523811,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.9609375,"distances_sum":3403.0125593953085}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.970703125,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9840773809523811,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.9609375,"distances_sum":3403.0125593953085}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.970703125,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9840773809523811,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.9609375,"distances_sum":3403.0125593953085}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8538180569430578,"seconds":5.243346095085144e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.546875,"distances_sum":2224.5325886240744}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8602454836829845,"seconds":5.032867193222046e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.6796875,"distances_sum":2245.034624117559}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7646484375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7646484375,"f1":0.8602454836829845,"seconds":5.032867193222046e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.6796875,"distances_sum":2245.034624117559}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9572573260073265,"seconds":6.081536412239075e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.7578125,"distances_sum":3233.7164773761388}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9625400641025645,"seconds":0.00010364130139350891,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8203125,"distances_sum":3248.047262055382}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9057983682983691,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.046875,"distances_sum":2713.772559590537}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.818359375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.818359375,"f1":0.8929492382617391,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.921875,"distances_sum":2594.8470313627863}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9625400641025645,"seconds":0.00010364130139350891,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8203125,"distances_sum":3248.047262055382}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9782738095238097,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.953125,"distances_sum":3351.601401509459}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9683264652014657,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8515625,"distances_sum":3295.2029485265844}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":4,"bsize":13}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.97967032967033,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.921875,"distances_sum":3387.6112973463114}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9766769688644692,"seconds":6.07222318649292e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.875,"distances_sum":3386.3587997947184}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9716346153846157,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8828125,"distances_sum":3315.282602948559}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9644230769230774,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.859375,"distances_sum":3246.283850181973}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9709306318681323,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.828125,"distances_sum":3333.1152202099524}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.97967032967033,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.921875,"distances_sum":3387.6112973463114}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.97967032967033,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.921875,"distances_sum":3387.6112973463114}}, n: 9
mean(cfft.distances) = 0.3341999429744387
mean(cdnet.distances) = 0.4263597207049105
mean(crand.distances) = 0.37213389098761535
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8888888888888888
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.86
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8644444444444445
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8844444444444445
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9444444444444445
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8711111111111111
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.88
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9111111111111111
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9355555555555556
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9444444444444443
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8777777777777778
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9177777777777778
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9333333333333332
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8466666666666667
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8755555555555556
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8533333333333332
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9222222222222222
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8844444444444445
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8888888888888888
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9177777777777778
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9066666666666666
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8288888888888888
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8444444444444444
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 4, 14]]
** centroid: 7, normalized-entropy: 0.7642045065086204, [(2, 4), (3, 14)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 10, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 1, 3]
acc = 0.96
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 4, 14]]
** centroid: 7, normalized-entropy: 0.7642045065086204, [(2, 4), (3, 14)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 10, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 1, 3]
acc = 0.96
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 4, 14]]
** centroid: 7, normalized-entropy: 0.7642045065086204, [(2, 4), (3, 14)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 10, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 1, 3]
acc = 0.96
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 4, 14]]
** centroid: 7, normalized-entropy: 0.7642045065086204, [(2, 4), (3, 14)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 10, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 1, 3]
acc = 0.96
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 4, 14]]
** centroid: 7, normalized-entropy: 0.7642045065086204, [(2, 4), (3, 14)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 10, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 1, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 4, 14]]
** centroid: 7, normalized-entropy: 0.7642045065086204, [(2, 4), (3, 14)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 10, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 1, 3]
acc = 0.9066666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 4, 14]]
** centroid: 7, normalized-entropy: 0.7642045065086204, [(2, 4), (3, 14)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 10, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 1, 3]
acc = 0.9466666666666667
*** finished computation of 12 references, err: [Inf, 0.595487163066864] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 8]]
** centroid: 9, normalized-entropy: 0.8453509366224364, [(2, 3), (3, 8)]
*** center 10: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.37017314783206723] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37017314783206723, 0.23381202492019584] ***
*** starting iteration: 2; err: [Inf, 0.37017314783206723, 0.23381202492019584] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37017314783206723, 0.23381202492019584, 0.228460353954152] ***
*** starting iteration: 3; err: [Inf, 0.37017314783206723, 0.23381202492019584, 0.228460353954152] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37017314783206723, 0.23381202492019584, 0.228460353954152, 0.22783993211375184] ***
*** finished computation of 3 references, err: [Inf, 0.37017314783206723, 0.23381202492019584, 0.228460353954152, 0.22783993211375184] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [42, 204, 21]]
** centroid: 1, normalized-entropy: 0.6340372512416851, [(1, 42), (2, 204), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [221, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [102, 77, 0]]
** centroid: 3, normalized-entropy: 0.9858831039983349, [(1, 102), (2, 77)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.33809267792842357] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33809267792842357, 0.23819886751869496] ***
*** starting iteration: 2; err: [Inf, 0.33809267792842357, 0.23819886751869496] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33809267792842357, 0.23819886751869496, 0.23223638646248757] ***
*** starting iteration: 3; err: [Inf, 0.33809267792842357, 0.23819886751869496, 0.23223638646248757] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33809267792842357, 0.23819886751869496, 0.23223638646248757, 0.230810412036107] ***
*** starting iteration: 4; err: [Inf, 0.33809267792842357, 0.23819886751869496, 0.23223638646248757, 0.230810412036107] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33809267792842357, 0.23819886751869496, 0.23223638646248757, 0.230810412036107, 0.23048155937019899] ***
*** finished computation of 3 references, err: [Inf, 0.33809267792842357, 0.23819886751869496, 0.23223638646248757, 0.230810412036107, 0.23048155937019899] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [49, 178, 22]]
** centroid: 1, normalized-entropy: 0.7047451201202973, [(1, 49), (2, 178), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [236, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [114, 68, 0]]
** centroid: 3, normalized-entropy: 0.9534158774525225, [(1, 114), (2, 68)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2301139191391545] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2301139191391545, 0.19233423634432256] ***
*** finished computation of 7 references, err: [Inf, 0.2301139191391545, 0.19233423634432256] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [58, 72, 0]]
** centroid: 1, normalized-entropy: 0.9916178297881032, [(1, 58), (2, 72)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 10, 0]]
** centroid: 2, normalized-entropy: 0.6631968402398286, [(1, 48), (2, 10)]
*** center 3: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 80, 21]]
** centroid: 4, normalized-entropy: 0.7374895672137457, [(2, 80), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [42, 91, 0]]
** centroid: 5, normalized-entropy: 0.8997437586982626, [(1, 42), (2, 91)]
*** center 6: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2261717250400308] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2261717250400308, 0.19087476645298918] ***
*** finished computation of 7 references, err: [Inf, 0.2261717250400308, 0.19087476645298918] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 110, 1]]
** centroid: 1, normalized-entropy: 0.07414948357792069, [(2, 110), (3, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [42, 13, 0]]
** centroid: 2, normalized-entropy: 0.7889406572966208, [(1, 42), (2, 13)]
*** center 3: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 115, 20]]
** centroid: 4, normalized-entropy: 0.6051865766334207, [(2, 115), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [85, 25, 0]]
** centroid: 5, normalized-entropy: 0.7732266742876346, [(1, 85), (2, 25)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [47, 6, 0]]
** centroid: 6, normalized-entropy: 0.5095157180881823, [(1, 47), (2, 6)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [97, 12, 0]]
** centroid: 7, normalized-entropy: 0.5001926210998139, [(1, 97), (2, 12)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22619676905002786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22619676905002786, 0.19145784231818755] ***
*** finished computation of 7 references, err: [Inf, 0.22619676905002786, 0.19145784231818755] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [7, 92, 0]]
** centroid: 1, normalized-entropy: 0.3685567775377064, [(1, 7), (2, 92)]
*** center 2: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [74, 13, 0]]
** centroid: 3, normalized-entropy: 0.6084002154765848, [(1, 74), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [116, 1, 0]]
** centroid: 4, normalized-entropy: 0.07099894663640989, [(1, 116), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [129, 3, 0]]
** centroid: 5, normalized-entropy: 0.1564910629057016, [(1, 129), (2, 3)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 94, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 43, 22]]
** centroid: 7, normalized-entropy: 0.9233388889944429, [(2, 43), (3, 22)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.282221686075422] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.282221686075422, 0.2357878846734449] ***
*** starting iteration: 2; err: [Inf, 0.282221686075422, 0.2357878846734449] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.282221686075422, 0.2357878846734449, 0.2323457462763464] ***
*** starting iteration: 3; err: [Inf, 0.282221686075422, 0.2357878846734449, 0.2323457462763464] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.282221686075422, 0.2357878846734449, 0.2323457462763464, 0.2316802189889568] ***
*** finished computation of 3 references, err: [Inf, 0.282221686075422, 0.2357878846734449, 0.2323457462763464, 0.2316802189889568] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [102, 86, 0]]
** centroid: 1, normalized-entropy: 0.9947688847336321, [(1, 102), (2, 86)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [81, 167, 21]]
** centroid: 2, normalized-entropy: 0.779581125200064, [(1, 81), (2, 167), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [209, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37435250650851176] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37435250650851176, 0.24424308621236632] ***
*** starting iteration: 2; err: [Inf, 0.37435250650851176, 0.24424308621236632] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37435250650851176, 0.24424308621236632, 0.23365457623644076] ***
*** starting iteration: 3; err: [Inf, 0.37435250650851176, 0.24424308621236632, 0.23365457623644076] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37435250650851176, 0.24424308621236632, 0.23365457623644076, 0.23174269018049676] ***
*** starting iteration: 4; err: [Inf, 0.37435250650851176, 0.24424308621236632, 0.23365457623644076, 0.23174269018049676] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37435250650851176, 0.24424308621236632, 0.23365457623644076, 0.23174269018049676, 0.23165795421772364] ***
*** finished computation of 3 references, err: [Inf, 0.37435250650851176, 0.24424308621236632, 0.23365457623644076, 0.23174269018049676, 0.23165795421772364] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [98, 77, 0]]
** centroid: 1, normalized-entropy: 0.9895875212220558, [(1, 98), (2, 77)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [42, 203, 21]]
** centroid: 2, normalized-entropy: 0.6354979198536758, [(1, 42), (2, 203), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [225, 1, 0]]
** centroid: 3, normalized-entropy: 0.04097202425663316, [(1, 225), (2, 1)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32958795625236126] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32958795625236126, 0.2343061061288374] ***
*** starting iteration: 2; err: [Inf, 0.32958795625236126, 0.2343061061288374] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32958795625236126, 0.2343061061288374, 0.2313709022959686] ***
*** starting iteration: 3; err: [Inf, 0.32958795625236126, 0.2343061061288374, 0.2313709022959686] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32958795625236126, 0.2343061061288374, 0.2313709022959686, 0.2309285235567496] ***
*** finished computation of 3 references, err: [Inf, 0.32958795625236126, 0.2343061061288374, 0.2313709022959686, 0.2309285235567496] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [114, 72, 0]]
** centroid: 1, normalized-entropy: 0.9629004147713269, [(1, 114), (2, 72)]
*** center 2: selecting labels [1] (freq >= 1) [from [229, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [56, 174, 22]]
** centroid: 3, normalized-entropy: 0.7307844048341923, [(1, 56), (2, 174), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35763500150651095] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35763500150651095, 0.2714650146110828] ***
*** finished computation of 3 references, err: [Inf, 0.35763500150651095, 0.2714650146110828] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 104, 21]]
** centroid: 1, normalized-entropy: 0.6531091121418665, [(2, 104), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [249, 125, 0]]
** centroid: 2, normalized-entropy: 0.9191845222734306, [(1, 249), (2, 125)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [143, 24, 0]]
** centroid: 3, normalized-entropy: 0.5938797345302353, [(1, 143), (2, 24)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32584264154812653] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32584264154812653, 0.2336811674661052] ***
*** finished computation of 3 references, err: [Inf, 0.32584264154812653, 0.2336811674661052] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [118, 85, 0]]
** centroid: 1, normalized-entropy: 0.9808526196659548, [(1, 118), (2, 85)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [31, 195, 21]]
** centroid: 2, normalized-entropy: 0.5977192040448859, [(1, 31), (2, 195), (3, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [216, 1, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3487236018738021] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3487236018738021, 0.26730391702501627] ***
*** finished computation of 3 references, err: [Inf, 0.3487236018738021, 0.26730391702501627] ***
*** center 1: selecting labels [1] (freq >= 2) [from [229, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [85, 144, 2]]
** centroid: 2, normalized-entropy: 0.6404526925928143, [(1, 85), (2, 144), (3, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [85, 102, 20]]
** centroid: 3, normalized-entropy: 0.8556493262682462, [(1, 85), (2, 102), (3, 20)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2539179816257555] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2539179816257555, 0.19488490987869747] ***
*** starting iteration: 2; err: [Inf, 0.2539179816257555, 0.19488490987869747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2539179816257555, 0.19488490987869747, 0.18798525312247016] ***
*** starting iteration: 3; err: [Inf, 0.2539179816257555, 0.19488490987869747, 0.18798525312247016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2539179816257555, 0.19488490987869747, 0.18798525312247016, 0.18734116862631506] ***
*** finished computation of 7 references, err: [Inf, 0.2539179816257555, 0.19488490987869747, 0.18798525312247016, 0.18734116862631506] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [88, 14, 0]]
** centroid: 1, normalized-entropy: 0.577004250315725, [(1, 88), (2, 14)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 45, 21]]
** centroid: 2, normalized-entropy: 0.9023932827949788, [(2, 45), (3, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [75, 23, 0]]
** centroid: 4, normalized-entropy: 0.7861044688447759, [(1, 75), (2, 23)]
*** center 5: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 101, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [16, 70, 0]]
** centroid: 7, normalized-entropy: 0.6931274153282881, [(1, 16), (2, 70)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23412218022214687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23412218022214687, 0.1895435134924926] ***
*** starting iteration: 2; err: [Inf, 0.23412218022214687, 0.1895435134924926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23412218022214687, 0.1895435134924926, 0.18812629996311628] ***
*** starting iteration: 3; err: [Inf, 0.23412218022214687, 0.1895435134924926, 0.18812629996311628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23412218022214687, 0.1895435134924926, 0.18812629996311628, 0.1878528464948577] ***
*** finished computation of 7 references, err: [Inf, 0.23412218022214687, 0.1895435134924926, 0.18812629996311628, 0.1878528464948577] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [51, 66, 0]]
** centroid: 1, normalized-entropy: 0.98811083652183, [(1, 51), (2, 66)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 27, 0]]
** centroid: 2, normalized-entropy: 0.9466474387740499, [(1, 47), (2, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [31, 66, 0]]
** centroid: 4, normalized-entropy: 0.9039324555927869, [(1, 31), (2, 66)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 120, 21]]
** centroid: 5, normalized-entropy: 0.607171654871303, [(2, 120), (3, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [77, 2, 0]]
** centroid: 7, normalized-entropy: 0.17033057560105982, [(1, 77), (2, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2259173397804894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2259173397804894, 0.18635205159416196] ***
*** starting iteration: 2; err: [Inf, 0.2259173397804894, 0.18635205159416196] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2259173397804894, 0.18635205159416196, 0.18062183013844907] ***
*** starting iteration: 3; err: [Inf, 0.2259173397804894, 0.18635205159416196, 0.18062183013844907] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2259173397804894, 0.18635205159416196, 0.18062183013844907, 0.1798111287111799] ***
*** finished computation of 7 references, err: [Inf, 0.2259173397804894, 0.18635205159416196, 0.18062183013844907, 0.1798111287111799] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 98, 1]]
*** center 2: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 20, 0]]
** centroid: 3, normalized-entropy: 0.8263541679009075, [(1, 57), (2, 20)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [93, 12, 0]]
** centroid: 4, normalized-entropy: 0.5127091420308771, [(1, 93), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [73, 25, 0]]
** centroid: 5, normalized-entropy: 0.8192649712314392, [(1, 73), (2, 25)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 91, 21]]
** centroid: 6, normalized-entropy: 0.6962122601251459, [(2, 91), (3, 21)]
*** center 7: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2076177309153954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2076177309153954, 0.1643052816163055] ***
*** finished computation of 7 references, err: [Inf, 0.2076177309153954, 0.1643052816163055] ***
*** center 1: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [125, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 109, 0]]
** centroid: 3, normalized-entropy: 0.8828524276472873, [(1, 47), (2, 109)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [46, 60, 0]]
** centroid: 4, normalized-entropy: 0.987380023288353, [(1, 46), (2, 60)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [26, 6, 0]]
** centroid: 5, normalized-entropy: 0.6962122601251459, [(1, 26), (2, 6)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 78, 21]]
** centroid: 6, normalized-entropy: 0.7455178428108284, [(2, 78), (3, 21)]
*** center 7: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24348740767676388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24348740767676388, 0.19906888533707545] ***
*** finished computation of 7 references, err: [Inf, 0.24348740767676388, 0.19906888533707545] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 30, 16]]
** centroid: 1, normalized-entropy: 0.9321115676166747, [(2, 30), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [226, 34, 0]]
** centroid: 2, normalized-entropy: 0.5595440356886702, [(1, 226), (2, 34)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [92, 9, 0]]
** centroid: 3, normalized-entropy: 0.43348846324460666, [(1, 92), (2, 9)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 121, 5]]
** centroid: 4, normalized-entropy: 0.24083474743116462, [(2, 121), (3, 5)]
*** center 5: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 27, 0]]
** centroid: 6, normalized-entropy: 0.46899559358928133, [(1, 3), (2, 27)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 60, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21510018606379075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21510018606379075, 0.1573694326001676] ***
*** finished computation of 7 references, err: [Inf, 0.21510018606379075, 0.1573694326001676] ***
*** center 1: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [4, 75, 0]]
** centroid: 3, normalized-entropy: 0.2890794597316462, [(1, 4), (2, 75)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [124, 35, 0]]
** centroid: 4, normalized-entropy: 0.7603971182966424, [(1, 124), (2, 35)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 86, 22]]
** centroid: 5, normalized-entropy: 0.7292739418449411, [(2, 86), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [29, 50, 0]]
** centroid: 6, normalized-entropy: 0.9484103893488014, [(1, 29), (2, 50)]
*** center 7: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34807508881833105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34807508881833105, 0.3235091536876385] ***
*** starting iteration: 2; err: [Inf, 0.34807508881833105, 0.3235091536876385] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34807508881833105, 0.3235091536876385, 0.3209039629618819] ***
*** starting iteration: 3; err: [Inf, 0.34807508881833105, 0.3235091536876385, 0.3209039629618819] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34807508881833105, 0.3235091536876385, 0.3209039629618819, 0.31820705501284374] ***
*** finished computation of 3 references, err: [Inf, 0.34807508881833105, 0.3235091536876385, 0.3209039629618819, 0.31820705501284374] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [29, 167, 21]]
** centroid: 1, normalized-entropy: 0.6340055676963547, [(1, 29), (2, 167), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [208, 31, 0]]
** centroid: 2, normalized-entropy: 0.5566343937743037, [(1, 208), (2, 31)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [155, 55, 0]]
** centroid: 3, normalized-entropy: 0.8296071030882032, [(1, 155), (2, 55)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3695418670189859] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3695418670189859, 0.31225270452047665] ***
*** starting iteration: 2; err: [Inf, 0.3695418670189859, 0.31225270452047665] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3695418670189859, 0.31225270452047665, 0.2963376534290087] ***
*** starting iteration: 3; err: [Inf, 0.3695418670189859, 0.31225270452047665, 0.2963376534290087] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3695418670189859, 0.31225270452047665, 0.2963376534290087, 0.2939428804914231] ***
*** finished computation of 3 references, err: [Inf, 0.3695418670189859, 0.31225270452047665, 0.2963376534290087, 0.2939428804914231] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [135, 56, 0]]
** centroid: 1, normalized-entropy: 0.8728111252237696, [(1, 135), (2, 56)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [6, 217, 21]]
** centroid: 2, normalized-entropy: 0.37001147432924814, [(1, 6), (2, 217), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [224, 8, 0]]
** centroid: 3, normalized-entropy: 0.21639693245126485, [(1, 224), (2, 8)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3719489616991162] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719489616991162, 0.30788929424788997] ***
*** starting iteration: 2; err: [Inf, 0.3719489616991162, 0.30788929424788997] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719489616991162, 0.30788929424788997, 0.2955855591756025] ***
*** starting iteration: 3; err: [Inf, 0.3719489616991162, 0.30788929424788997, 0.2955855591756025] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719489616991162, 0.30788929424788997, 0.2955855591756025, 0.29259305460046214] ***
*** finished computation of 3 references, err: [Inf, 0.3719489616991162, 0.30788929424788997, 0.2955855591756025, 0.29259305460046214] ***
*** center 1: selecting labels [1] (freq >= 2) [from [224, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [115, 94, 0]]
** centroid: 2, normalized-entropy: 0.9927050272181983, [(1, 115), (2, 94)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [60, 152, 22]]
** centroid: 3, normalized-entropy: 0.7750714015296036, [(1, 60), (2, 152), (3, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3209323809333929] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3209323809333929, 0.25106892398594916] ***
*** starting iteration: 2; err: [Inf, 0.3209323809333929, 0.25106892398594916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3209323809333929, 0.25106892398594916, 0.23390002841236177] ***
*** starting iteration: 3; err: [Inf, 0.3209323809333929, 0.25106892398594916, 0.23390002841236177] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3209323809333929, 0.25106892398594916, 0.23390002841236177, 0.23095015253782183] ***
*** finished computation of 3 references, err: [Inf, 0.3209323809333929, 0.25106892398594916, 0.23390002841236177, 0.23095015253782183] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [212, 23, 0]]
** centroid: 1, normalized-entropy: 0.4622145578130442, [(1, 212), (2, 23)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 185, 21]]
** centroid: 2, normalized-entropy: 0.47512074041685076, [(2, 185), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [180, 45, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 180), (2, 45)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33324710879268227] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33324710879268227, 0.23389316885278322] ***
*** starting iteration: 2; err: [Inf, 0.33324710879268227, 0.23389316885278322] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33324710879268227, 0.23389316885278322, 0.23209382461892186] ***
*** starting iteration: 3; err: [Inf, 0.33324710879268227, 0.23389316885278322, 0.23209382461892186] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33324710879268227, 0.23389316885278322, 0.23209382461892186, 0.2321141154101786] ***
*** finished computation of 3 references, err: [Inf, 0.33324710879268227, 0.23389316885278322, 0.23209382461892186, 0.2321141154101786] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [237, 8, 0]]
** centroid: 1, normalized-entropy: 0.20752712272139756, [(1, 237), (2, 8)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [21, 209, 21]]
** centroid: 2, normalized-entropy: 0.5166637040069975, [(1, 21), (2, 209), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [107, 64, 0]]
** centroid: 3, normalized-entropy: 0.9538936403541861, [(1, 107), (2, 64)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3145701002159939] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3145701002159939, 0.2749220746355704] ***
*** starting iteration: 2; err: [Inf, 0.3145701002159939, 0.2749220746355704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3145701002159939, 0.2749220746355704, 0.2611945421983679] ***
*** starting iteration: 3; err: [Inf, 0.3145701002159939, 0.2749220746355704, 0.2611945421983679] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3145701002159939, 0.2749220746355704, 0.2611945421983679, 0.24243441893547393] ***
*** finished computation of 3 references, err: [Inf, 0.3145701002159939, 0.2749220746355704, 0.2611945421983679, 0.24243441893547393] ***
*** center 1: selecting labels [1] (freq >= 1) [from [167, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [85, 186, 22]]
** centroid: 2, normalized-entropy: 0.766320160374542, [(1, 85), (2, 186), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [147, 60, 0]]
** centroid: 3, normalized-entropy: 0.868533960265235, [(1, 147), (2, 60)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34948927884943803] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34948927884943803, 0.2329276218183909] ***
*** starting iteration: 2; err: [Inf, 0.34948927884943803, 0.2329276218183909] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34948927884943803, 0.2329276218183909, 0.23055378625913336] ***
*** starting iteration: 3; err: [Inf, 0.34948927884943803, 0.2329276218183909, 0.23055378625913336] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34948927884943803, 0.2329276218183909, 0.23055378625913336, 0.22978752467070926] ***
*** finished computation of 3 references, err: [Inf, 0.34948927884943803, 0.2329276218183909, 0.23055378625913336, 0.22978752467070926] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [65, 180, 21]]
** centroid: 1, normalized-entropy: 0.7364302140103143, [(1, 65), (2, 180), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [224, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [103, 73, 0]]
** centroid: 3, normalized-entropy: 0.9789387373980203, [(1, 103), (2, 73)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34352848325706625] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34352848325706625, 0.2359298074944713] ***
*** starting iteration: 2; err: [Inf, 0.34352848325706625, 0.2359298074944713] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34352848325706625, 0.2359298074944713, 0.2300700461313916] ***
*** starting iteration: 3; err: [Inf, 0.34352848325706625, 0.2359298074944713, 0.2300700461313916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34352848325706625, 0.2359298074944713, 0.2300700461313916, 0.22863806937604786] ***
*** finished computation of 3 references, err: [Inf, 0.34352848325706625, 0.2359298074944713, 0.2300700461313916, 0.22863806937604786] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [53, 197, 21]]
** centroid: 1, normalized-entropy: 0.6819157033509627, [(1, 53), (2, 197), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [97, 84, 0]]
** centroid: 2, normalized-entropy: 0.9962756704778615, [(1, 97), (2, 84)]
*** center 3: selecting labels [1] (freq >= 1) [from [215, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38372674507662835] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38372674507662835, 0.22942297559352298] ***
*** starting iteration: 2; err: [Inf, 0.38372674507662835, 0.22942297559352298] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38372674507662835, 0.22942297559352298, 0.22839604936696511] ***
*** starting iteration: 3; err: [Inf, 0.38372674507662835, 0.22942297559352298, 0.22839604936696511] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38372674507662835, 0.22942297559352298, 0.22839604936696511, 0.22808687005616513] ***
*** finished computation of 3 references, err: [Inf, 0.38372674507662835, 0.22942297559352298, 0.22839604936696511, 0.22808687005616513] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [263, 7, 0]]
** centroid: 1, normalized-entropy: 0.17352975024239095, [(1, 263), (2, 7)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 194, 22]]
** centroid: 2, normalized-entropy: 0.3249608942259723, [(1, 1), (2, 194), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [135, 45, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 135), (2, 45)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30746947174930983] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30746947174930983, 0.2696939366757758] ***
*** starting iteration: 2; err: [Inf, 0.30746947174930983, 0.2696939366757758] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30746947174930983, 0.2696939366757758, 0.23546878316414518] ***
*** starting iteration: 3; err: [Inf, 0.30746947174930983, 0.2696939366757758, 0.23546878316414518] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30746947174930983, 0.2696939366757758, 0.23546878316414518, 0.23229766950184652] ***
*** finished computation of 3 references, err: [Inf, 0.30746947174930983, 0.2696939366757758, 0.23546878316414518, 0.23229766950184652] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [83, 164, 21]]
** centroid: 1, normalized-entropy: 0.7856168626178299, [(1, 83), (2, 164), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [211, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [98, 89, 0]]
** centroid: 3, normalized-entropy: 0.9983284701587608, [(1, 98), (2, 89)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2705819757719492] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2705819757719492, 0.23717773328723757] ***
*** starting iteration: 2; err: [Inf, 0.2705819757719492, 0.23717773328723757] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2705819757719492, 0.23717773328723757, 0.23200898516414942] ***
*** starting iteration: 3; err: [Inf, 0.2705819757719492, 0.23717773328723757, 0.23200898516414942] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2705819757719492, 0.23717773328723757, 0.23200898516414942, 0.2311213316851068] ***
*** finished computation of 3 references, err: [Inf, 0.2705819757719492, 0.23717773328723757, 0.23200898516414942, 0.2311213316851068] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [147, 52, 0]]
** centroid: 1, normalized-entropy: 0.8287115550447426, [(1, 147), (2, 52)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 217, 21]]
** centroid: 2, normalized-entropy: 0.43055186701043935, [(2, 217), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [218, 12, 0]]
** centroid: 3, normalized-entropy: 0.295560777857315, [(1, 218), (2, 12)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31570208357923524] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31570208357923524, 0.2562997747894036] ***
*** starting iteration: 2; err: [Inf, 0.31570208357923524, 0.2562997747894036] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31570208357923524, 0.2562997747894036, 0.23739917288398904] ***
*** starting iteration: 3; err: [Inf, 0.31570208357923524, 0.2562997747894036, 0.23739917288398904] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31570208357923524, 0.2562997747894036, 0.23739917288398904, 0.2328684681794722] ***
*** finished computation of 3 references, err: [Inf, 0.31570208357923524, 0.2562997747894036, 0.23739917288398904, 0.2328684681794722] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [64, 144, 22]]
** centroid: 1, normalized-entropy: 0.795207445979472, [(1, 64), (2, 144), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [106, 102, 0]]
** centroid: 2, normalized-entropy: 0.9997332130219014, [(1, 106), (2, 102)]
*** center 3: selecting labels [1] (freq >= 2) [from [229, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3457734638170616] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3457734638170616, 0.23244393511756403] ***
*** starting iteration: 2; err: [Inf, 0.3457734638170616, 0.23244393511756403] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3457734638170616, 0.23244393511756403, 0.229443088242387] ***
*** starting iteration: 3; err: [Inf, 0.3457734638170616, 0.23244393511756403, 0.229443088242387] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3457734638170616, 0.23244393511756403, 0.229443088242387, 0.22909646180064022] ***
*** finished computation of 3 references, err: [Inf, 0.3457734638170616, 0.23244393511756403, 0.229443088242387, 0.22909646180064022] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [275, 6, 0]]
** centroid: 1, normalized-entropy: 0.14896752193753462, [(1, 275), (2, 6)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [6, 191, 21]]
** centroid: 2, normalized-entropy: 0.4006312356705021, [(1, 6), (2, 191), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [111, 56, 0]]
** centroid: 3, normalized-entropy: 0.9202789224136475, [(1, 111), (2, 56)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 12)
[0.9310268352184519, 0.9189878501255747, 0.9129998261734787, 0.9129938321555088, 0.9060078042113971, 0.9010117902333471, 0.8890387393381406, 0.8760317203430975, 0.8589847332362304, 0.855061648474822, 0.8409667152182122, 0.7900355445265624]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 2) => 0.9310268352184519
finished with 14
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.4245942758655977] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4245942758655977, 0.30177744422973635] ***
*** finished computation of 3 references, err: [Inf, 0.4245942758655977, 0.30177744422973635] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [82, 228, 21]]
** centroid: 1, normalized-entropy: 0.7076338054119276, [(1, 82), (2, 228), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [182, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [101, 53, 0]]
** centroid: 3, normalized-entropy: 0.9287401520599611, [(1, 101), (2, 53)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4256485146903866] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4256485146903866, 0.2943536435720978] ***
*** finished computation of 3 references, err: [Inf, 0.4256485146903866, 0.2943536435720978] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [255, 22, 0]]
** centroid: 1, normalized-entropy: 0.4001406425508875, [(1, 255), (2, 22)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 180, 21]]
** centroid: 2, normalized-entropy: 0.4830306801456181, [(2, 180), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [137, 51, 0]]
** centroid: 3, normalized-entropy: 0.843290512283284, [(1, 137), (2, 51)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.42416641975556135] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42416641975556135, 0.2901420392643387] ***
*** finished computation of 3 references, err: [Inf, 0.42416641975556135, 0.2901420392643387] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [283, 13, 0]]
** centroid: 1, normalized-entropy: 0.25998039584091986, [(1, 283), (2, 13)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 182, 22]]
** centroid: 2, normalized-entropy: 0.493375733509813, [(2, 182), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [116, 51, 0]]
** centroid: 3, normalized-entropy: 0.8877792153761802, [(1, 116), (2, 51)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3152100360762138] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3152100360762138, 0.23514258307852298] ***
*** finished computation of 3 references, err: [Inf, 0.3152100360762138, 0.23514258307852298] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [293, 37, 0]]
** centroid: 1, normalized-entropy: 0.506281205536756, [(1, 293), (2, 37)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 168, 21]]
** centroid: 2, normalized-entropy: 0.5032583347756457, [(2, 168), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [99, 48, 0]]
** centroid: 3, normalized-entropy: 0.9113423759758414, [(1, 99), (2, 48)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36361584104625494] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36361584104625494, 0.23690281600539184] ***
*** finished computation of 3 references, err: [Inf, 0.36361584104625494, 0.23690281600539184] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [103, 184, 21]]
** centroid: 1, normalized-entropy: 0.7802360727490906, [(1, 103), (2, 184), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [92, 97, 0]]
** centroid: 2, normalized-entropy: 0.9994950927427839, [(1, 92), (2, 97)]
*** center 3: selecting labels [1] (freq >= 2) [from [170, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30455777140311907] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30455777140311907, 0.2423825582302269] ***
*** finished computation of 3 references, err: [Inf, 0.30455777140311907, 0.2423825582302269] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [118, 191, 22]]
** centroid: 1, normalized-entropy: 0.7875170831748849, [(1, 118), (2, 191), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [174, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [107, 55, 0]]
** centroid: 3, normalized-entropy: 0.9243453622131494, [(1, 107), (2, 55)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 14)
[0.9310268352184519, 0.9189878501255747, 0.9129998261734787, 0.9129938321555088, 0.9060078042113971, 0.9010117902333471, 0.8890387393381406, 0.8840487193780606, 0.8760317203430975, 0.8720756684828541, 0.8589847332362304, 0.855061648474822, 0.8409667152182122, 0.7900355445265624]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 2) => 0.9310268352184519
finished with 14
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9310268352184519, 0.9189878501255747, 0.9129998261734787, 0.9129938321555088, 0.9060078042113971, 0.9010117902333471, 0.8890387393381406, 0.8840487193780606, 0.8760317203430975, 0.8720756684828541, 0.8589847332362304, 0.855061648474822, 0.8409667152182122, 0.7900355445265624]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 2) => 0.9310268352184519
finished with 15
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.28930684352886527] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28930684352886527, 0.2746371424536] ***
*** starting iteration: 2; err: [Inf, 0.28930684352886527, 0.2746371424536] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28930684352886527, 0.2746371424536, 0.2715634113239186] ***
*** starting iteration: 3; err: [Inf, 0.28930684352886527, 0.2746371424536, 0.2715634113239186] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28930684352886527, 0.2746371424536, 0.2715634113239186, 0.2637014418411105] ***
*** finished computation of 3 references, err: [Inf, 0.28930684352886527, 0.2746371424536, 0.2715634113239186, 0.2637014418411105] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [114, 62, 0]]
** centroid: 1, normalized-entropy: 0.9360814319397586, [(1, 114), (2, 62)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [197, 58, 0]]
** centroid: 2, normalized-entropy: 0.7735412558772684, [(1, 197), (2, 58)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [81, 133, 21]]
** centroid: 3, normalized-entropy: 0.8238664677971235, [(1, 81), (2, 133), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25548288524095] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25548288524095, 0.23552692641058695] ***
*** starting iteration: 2; err: [Inf, 0.25548288524095, 0.23552692641058695] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25548288524095, 0.23552692641058695, 0.23227991521389207] ***
*** starting iteration: 3; err: [Inf, 0.25548288524095, 0.23552692641058695, 0.23227991521389207] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25548288524095, 0.23552692641058695, 0.23227991521389207, 0.23126293312216448] ***
*** finished computation of 3 references, err: [Inf, 0.25548288524095, 0.23552692641058695, 0.23227991521389207, 0.23126293312216448] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [97, 113, 0]]
** centroid: 1, normalized-entropy: 0.9958085250705626, [(1, 97), (2, 113)]
*** center 2: selecting labels [1] (freq >= 2) [from [203, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [65, 168, 21]]
** centroid: 3, normalized-entropy: 0.7539461757304344, [(1, 65), (2, 168), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32195987301910745] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32195987301910745, 0.24617142066906864] ***
*** starting iteration: 2; err: [Inf, 0.32195987301910745, 0.24617142066906864] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32195987301910745, 0.24617142066906864, 0.23317557410930453] ***
*** starting iteration: 3; err: [Inf, 0.32195987301910745, 0.24617142066906864, 0.23317557410930453] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32195987301910745, 0.24617142066906864, 0.23317557410930453, 0.23071969011198099] ***
*** finished computation of 3 references, err: [Inf, 0.32195987301910745, 0.24617142066906864, 0.23317557410930453, 0.23071969011198099] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [39, 172, 22]]
** centroid: 1, normalized-entropy: 0.6791285943109826, [(1, 39), (2, 172), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [227, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [133, 74, 0]]
** centroid: 3, normalized-entropy: 0.9405781991505306, [(1, 133), (2, 74)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9310268352184519, 0.9189878501255747, 0.9129998261734787, 0.9129938321555088, 0.9060078042113971, 0.9010117902333471, 0.8890387393381406, 0.8840487193780606, 0.8760317203430975, 0.8720756684828541, 0.8589847332362304, 0.855061648474822, 0.850044655433877, 0.8409667152182122, 0.7900355445265624]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 2) => 0.9310268352184519
finished with 15
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9310268352184519, 0.9189878501255747, 0.9129998261734787, 0.9129938321555088, 0.9060078042113971, 0.9010117902333471, 0.8890387393381406, 0.8840487193780606, 0.8760317203430975, 0.8720756684828541, 0.8589847332362304, 0.855061648474822, 0.850044655433877, 0.8409667152182122, 0.7900355445265624]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 2) => 0.9310268352184519
finished with 16
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.3933468549505345] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3933468549505345, 0.3171598777214046] ***
*** starting iteration: 2; err: [Inf, 0.3933468549505345, 0.3171598777214046] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3933468549505345, 0.3171598777214046, 0.296410666970673] ***
*** starting iteration: 3; err: [Inf, 0.3933468549505345, 0.3171598777214046, 0.296410666970673] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3933468549505345, 0.3171598777214046, 0.296410666970673, 0.29098683261665803] ***
*** starting iteration: 4; err: [Inf, 0.3933468549505345, 0.3171598777214046, 0.296410666970673, 0.29098683261665803] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3933468549505345, 0.3171598777214046, 0.296410666970673, 0.29098683261665803, 0.2895548595269134] ***
*** starting iteration: 5; err: [Inf, 0.3933468549505345, 0.3171598777214046, 0.296410666970673, 0.29098683261665803, 0.2895548595269134] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3933468549505345, 0.3171598777214046, 0.296410666970673, 0.29098683261665803, 0.2895548595269134, 0.28929908477283756] ***
*** finished computation of 3 references, err: [Inf, 0.3933468549505345, 0.3171598777214046, 0.296410666970673, 0.29098683261665803, 0.2895548595269134, 0.28929908477283756] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [55, 198, 21]]
** centroid: 1, normalized-entropy: 0.6862736447058537, [(1, 55), (2, 198), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [213, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [97, 83, 0]]
** centroid: 3, normalized-entropy: 0.9956318824744185, [(1, 97), (2, 83)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3865880885332062] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3865880885332062, 0.2940045902764218] ***
*** starting iteration: 2; err: [Inf, 0.3865880885332062, 0.2940045902764218] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3865880885332062, 0.2940045902764218, 0.28908628270634124] ***
*** starting iteration: 3; err: [Inf, 0.3865880885332062, 0.2940045902764218, 0.28908628270634124] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3865880885332062, 0.2940045902764218, 0.28908628270634124, 0.28813655556713763] ***
*** finished computation of 3 references, err: [Inf, 0.3865880885332062, 0.2940045902764218, 0.28908628270634124, 0.28813655556713763] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [281, 14, 0]]
** centroid: 1, normalized-entropy: 0.2754973649580624, [(1, 281), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [111, 47, 0]]
** centroid: 2, normalized-entropy: 0.8781741836599465, [(1, 111), (2, 47)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 192, 21]]
** centroid: 3, normalized-entropy: 0.4645149440905521, [(2, 192), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36275577825854355] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36275577825854355, 0.2910591667710707] ***
*** starting iteration: 2; err: [Inf, 0.36275577825854355, 0.2910591667710707] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36275577825854355, 0.2910591667710707, 0.2868447279853598] ***
*** starting iteration: 3; err: [Inf, 0.36275577825854355, 0.2910591667710707, 0.2868447279853598] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36275577825854355, 0.2910591667710707, 0.2868447279853598, 0.2866672424256042] ***
*** finished computation of 3 references, err: [Inf, 0.36275577825854355, 0.2910591667710707, 0.2868447279853598, 0.2866672424256042] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [241, 15, 0]]
** centroid: 1, normalized-entropy: 0.32183715247832606, [(1, 241), (2, 15)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 198, 22]]
** centroid: 2, normalized-entropy: 0.46899559358928133, [(2, 198), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [158, 33, 0]]
** centroid: 3, normalized-entropy: 0.6640133089215537, [(1, 158), (2, 33)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 16)
[0.9310268352184519, 0.9189878501255747, 0.9129998261734787, 0.9129938321555088, 0.9060078042113971, 0.9029838221454988, 0.9010117902333471, 0.8890387393381406, 0.8840487193780606, 0.8760317203430975, 0.8720756684828541, 0.8589847332362304, 0.855061648474822, 0.850044655433877, 0.8409667152182122, 0.7900355445265624]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 2) => 0.9310268352184519
finished with 16
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9310268352184519, 0.9189878501255747, 0.9129998261734787, 0.9129938321555088, 0.9060078042113971, 0.9029838221454988, 0.9010117902333471, 0.8890387393381406, 0.8840487193780606, 0.8760317203430975, 0.8720756684828541, 0.8589847332362304, 0.855061648474822, 0.850044655433877, 0.8409667152182122, 0.7900355445265624]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 2) => 0.9310268352184519
finished with 18
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.23917097404358667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23917097404358667, 0.19516185335898856] ***
*** finished computation of 7 references, err: [Inf, 0.23917097404358667, 0.19516185335898856] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [93, 4, 0]]
** centroid: 1, normalized-entropy: 0.24793583772272637, [(1, 93), (2, 4)]
*** center 2: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [14, 83, 0]]
** centroid: 3, normalized-entropy: 0.5954670513561874, [(1, 14), (2, 83)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 47, 21]]
** centroid: 4, normalized-entropy: 0.8918107543797084, [(2, 47), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 63, 0]]
** centroid: 5, normalized-entropy: 0.9071657675730821, [(1, 30), (2, 63)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [60, 56, 0]]
** centroid: 6, normalized-entropy: 0.999142103991909, [(1, 60), (2, 56)]
*** center 7: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2199900355176076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2199900355176076, 0.19652319556965062] ***
*** finished computation of 7 references, err: [Inf, 0.2199900355176076, 0.19652319556965062] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [68, 15, 0]]
** centroid: 1, normalized-entropy: 0.6816559115981193, [(1, 68), (2, 15)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 107, 21]]
** centroid: 2, normalized-entropy: 0.6439403638806508, [(2, 107), (3, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 91, 0]]
** centroid: 5, normalized-entropy: 0.9491673879011254, [(1, 53), (2, 91)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [19, 68, 0]]
** centroid: 7, normalized-entropy: 0.7572182549240017, [(1, 19), (2, 68)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2801368489786089] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2801368489786089, 0.20807984239398047] ***
*** finished computation of 7 references, err: [Inf, 0.2801368489786089, 0.20807984239398047] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 59, 22]]
** centroid: 1, normalized-entropy: 0.8437582063121657, [(2, 59), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [173, 4, 0]]
** centroid: 4, normalized-entropy: 0.1557937795680067, [(1, 173), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [2, 96, 0]]
** centroid: 5, normalized-entropy: 0.14372616993938164, [(1, 2), (2, 96)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [36, 22, 0]]
** centroid: 6, normalized-entropy: 0.9575534837147484, [(1, 36), (2, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [38, 65, 0]]
** centroid: 7, normalized-entropy: 0.9498485528365604, [(1, 38), (2, 65)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22396411477132244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22396411477132244, 0.1695629109183813] ***
*** finished computation of 7 references, err: [Inf, 0.22396411477132244, 0.1695629109183813] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [150, 40, 0]]
** centroid: 1, normalized-entropy: 0.7424875695421234, [(1, 150), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [8, 31, 0]]
** centroid: 2, normalized-entropy: 0.7320666900931937, [(1, 8), (2, 31)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 154, 21]]
** centroid: 3, normalized-entropy: 0.5293608652873645, [(2, 154), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 11, 0]]
** centroid: 4, normalized-entropy: 0.6115516951951333, [(1, 62), (2, 11)]
*** center 5: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [41, 17, 0]]
** centroid: 7, normalized-entropy: 0.8726965039103788, [(1, 41), (2, 17)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19933592543568646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19933592543568646, 0.18980053895763283] ***
*** finished computation of 7 references, err: [Inf, 0.19933592543568646, 0.18980053895763283] ***
*** center 1: selecting labels [1] (freq >= 2) [from [27, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [194, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [15, 33, 0]]
** centroid: 3, normalized-entropy: 0.8960382325345574, [(1, 15), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [16, 49, 0]]
** centroid: 4, normalized-entropy: 0.8051250074646822, [(1, 16), (2, 49)]
*** center 5: selecting labels [1, 2, 3] (freq >= 2) [from [23, 108, 21]]
** centroid: 5, normalized-entropy: 0.7300377804973863, [(1, 23), (2, 108), (3, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [19, 91, 0]]
** centroid: 7, normalized-entropy: 0.6639057588563916, [(1, 19), (2, 91)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2149071932785671] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2149071932785671, 0.15651767980289888] ***
*** finished computation of 7 references, err: [Inf, 0.2149071932785671, 0.15651767980289888] ***
*** center 1: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [9, 75, 0]]
** centroid: 2, normalized-entropy: 0.4912373418243334, [(1, 9), (2, 75)]
*** center 3: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [68, 11, 0]]
** centroid: 4, normalized-entropy: 0.5822463050121238, [(1, 68), (2, 11)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 91, 22]]
** centroid: 5, normalized-entropy: 0.7111806626974718, [(2, 91), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [89, 69, 0]]
** centroid: 6, normalized-entropy: 0.9884107299891088, [(1, 89), (2, 69)]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 18)
[0.9310268352184519, 0.9259978541415667, 0.9189878501255747, 0.9130238022453591, 0.9129998261734787, 0.9129938321555088, 0.9060078042113971, 0.9029838221454988, 0.9010117902333471, 0.8890387393381406, 0.8840487193780606, 0.8760317203430975, 0.8720756684828541, 0.8589847332362304, 0.855061648474822, 0.850044655433877, 0.8409667152182122, 0.7900355445265624]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 2) => 0.9310268352184519
finished with 19
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.3041753707986392] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3041753707986392, 0.29363758699806247] ***
*** starting iteration: 2; err: [Inf, 0.3041753707986392, 0.29363758699806247] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3041753707986392, 0.29363758699806247, 0.290612488042552] ***
*** starting iteration: 3; err: [Inf, 0.3041753707986392, 0.29363758699806247, 0.290612488042552] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3041753707986392, 0.29363758699806247, 0.290612488042552, 0.2899416909796429] ***
*** finished computation of 3 references, err: [Inf, 0.3041753707986392, 0.29363758699806247, 0.290612488042552, 0.2899416909796429] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [1, 193, 21]]
** centroid: 1, normalized-entropy: 0.31774968937933956, [(1, 1), (2, 193), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [239, 16, 0]]
** centroid: 2, normalized-entropy: 0.3382468991827838, [(1, 239), (2, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [152, 44, 0]]
** centroid: 3, normalized-entropy: 0.7682814090975241, [(1, 152), (2, 44)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4103628266379349] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4103628266379349, 0.3245223832618294] ***
*** starting iteration: 2; err: [Inf, 0.4103628266379349, 0.3245223832618294] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4103628266379349, 0.3245223832618294, 0.3019413560383843] ***
*** starting iteration: 3; err: [Inf, 0.4103628266379349, 0.3245223832618294, 0.3019413560383843] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4103628266379349, 0.3245223832618294, 0.3019413560383843, 0.2961842693539261] ***
*** finished computation of 3 references, err: [Inf, 0.4103628266379349, 0.3245223832618294, 0.3019413560383843, 0.2961842693539261] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [113, 69, 0]]
** centroid: 1, normalized-entropy: 0.9574187595909498, [(1, 113), (2, 69)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [252, 16, 0]]
** centroid: 2, normalized-entropy: 0.32625881462949274, [(1, 252), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 196, 21]]
** centroid: 3, normalized-entropy: 0.45868581620054033, [(2, 196), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4110997733443618] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4110997733443618, 0.2912842763023733] ***
*** starting iteration: 2; err: [Inf, 0.4110997733443618, 0.2912842763023733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4110997733443618, 0.2912842763023733, 0.2868838746916095] ***
*** starting iteration: 3; err: [Inf, 0.4110997733443618, 0.2912842763023733, 0.2868838746916095] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4110997733443618, 0.2912842763023733, 0.2868838746916095, 0.286841936588198] ***
*** finished computation of 3 references, err: [Inf, 0.4110997733443618, 0.2912842763023733, 0.2868838746916095, 0.286841936588198] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 203, 22]]
** centroid: 1, normalized-entropy: 0.46191147211209804, [(2, 203), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [165, 30, 0]]
** centroid: 2, normalized-entropy: 0.6193821946787638, [(1, 165), (2, 30)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [234, 13, 0]]
** centroid: 3, normalized-entropy: 0.2974722489192896, [(1, 234), (2, 13)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.23043910284736194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23043910284736194, 0.1924621413135901] ***
*** starting iteration: 2; err: [Inf, 0.23043910284736194, 0.1924621413135901] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23043910284736194, 0.1924621413135901, 0.18753140279673972] ***
*** starting iteration: 3; err: [Inf, 0.23043910284736194, 0.1924621413135901, 0.18753140279673972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23043910284736194, 0.1924621413135901, 0.18753140279673972, 0.1864194148555398] ***
*** finished computation of 7 references, err: [Inf, 0.23043910284736194, 0.1924621413135901, 0.18753140279673972, 0.1864194148555398] ***
*** center 1: selecting labels [1] (freq >= 2) [from [185, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 122, 32]]
** centroid: 2, normalized-entropy: 0.7372413771710565, [(2, 122), (3, 32)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [79, 13, 0]]
** centroid: 3, normalized-entropy: 0.5876446142980418, [(1, 79), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [104, 24, 0]]
** centroid: 4, normalized-entropy: 0.6962122601251459, [(1, 104), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 86, 0]]
** centroid: 5, normalized-entropy: 0.9844268978000115, [(1, 64), (2, 86)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 145, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [146, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2560249127135612] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2560249127135612, 0.1944314819332212] ***
*** starting iteration: 2; err: [Inf, 0.2560249127135612, 0.1944314819332212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2560249127135612, 0.1944314819332212, 0.19043830312788487] ***
*** starting iteration: 3; err: [Inf, 0.2560249127135612, 0.1944314819332212, 0.19043830312788487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2560249127135612, 0.1944314819332212, 0.19043830312788487, 0.19037055598851294] ***
*** finished computation of 7 references, err: [Inf, 0.2560249127135612, 0.1944314819332212, 0.19043830312788487, 0.19037055598851294] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [47, 41, 0]]
** centroid: 1, normalized-entropy: 0.99664402524877, [(1, 47), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 39, 0]]
** centroid: 2, normalized-entropy: 0.9998844148717589, [(1, 40), (2, 39)]
*** center 3: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 73, 17]]
** centroid: 4, normalized-entropy: 0.6991413063352633, [(2, 73), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [27, 41, 0]]
** centroid: 5, normalized-entropy: 0.9692040949598235, [(1, 27), (2, 41)]
*** center 6: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23176098586991428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23176098586991428, 0.19260630780737847] ***
*** starting iteration: 2; err: [Inf, 0.23176098586991428, 0.19260630780737847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23176098586991428, 0.19260630780737847, 0.18909771260619163] ***
*** starting iteration: 3; err: [Inf, 0.23176098586991428, 0.19260630780737847, 0.18909771260619163] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23176098586991428, 0.19260630780737847, 0.18909771260619163, 0.18763705792091787] ***
*** finished computation of 7 references, err: [Inf, 0.23176098586991428, 0.19260630780737847, 0.18909771260619163, 0.18763705792091787] ***
*** center 1: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 60, 13]]
** centroid: 2, normalized-entropy: 0.6758635715876156, [(2, 60), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [63, 5, 0]]
** centroid: 3, normalized-entropy: 0.378958787501346, [(1, 63), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [49, 12, 0]]
** centroid: 4, normalized-entropy: 0.7153220528038851, [(1, 49), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [32, 45, 0]]
** centroid: 5, normalized-entropy: 0.9793399259567798, [(1, 32), (2, 45)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 80, 0]]
** centroid: 7, normalized-entropy: 0.16542703399626665, [(1, 2), (2, 80)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23347495618276298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23347495618276298, 0.19125958205666393] ***
*** starting iteration: 2; err: [Inf, 0.23347495618276298, 0.19125958205666393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23347495618276298, 0.19125958205666393, 0.18426661555469037] ***
*** starting iteration: 3; err: [Inf, 0.23347495618276298, 0.19125958205666393, 0.18426661555469037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23347495618276298, 0.19125958205666393, 0.18426661555469037, 0.18314708479866385] ***
*** finished computation of 7 references, err: [Inf, 0.23347495618276298, 0.19125958205666393, 0.18426661555469037, 0.18314708479866385] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 73, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [68, 8, 0]]
** centroid: 3, normalized-entropy: 0.48546076074591343, [(1, 68), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [77, 4, 0]]
** centroid: 4, normalized-entropy: 0.2837689703721877, [(1, 77), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [84, 7, 0]]
** centroid: 5, normalized-entropy: 0.3912435636292556, [(1, 84), (2, 7)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 48, 13]]
** centroid: 6, normalized-entropy: 0.7473944462440388, [(2, 48), (3, 13)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 53, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23374826520914213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23374826520914213, 0.19551116992533207] ***
*** starting iteration: 2; err: [Inf, 0.23374826520914213, 0.19551116992533207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23374826520914213, 0.19551116992533207, 0.19171344706509263] ***
*** starting iteration: 3; err: [Inf, 0.23374826520914213, 0.19551116992533207, 0.19171344706509263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23374826520914213, 0.19551116992533207, 0.19171344706509263, 0.18976788360252977] ***
*** finished computation of 7 references, err: [Inf, 0.23374826520914213, 0.19551116992533207, 0.19171344706509263, 0.18976788360252977] ***
*** center 1: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 63, 13]]
** centroid: 2, normalized-entropy: 0.6601070987550468, [(2, 63), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 18, 0]]
** centroid: 3, normalized-entropy: 0.7897492536625221, [(1, 58), (2, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [4, 79, 0]]
** centroid: 5, normalized-entropy: 0.27866980356389914, [(1, 4), (2, 79)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [32, 42, 0]]
** centroid: 6, normalized-entropy: 0.9867867202680318, [(1, 32), (2, 42)]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24480339730903505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24480339730903505, 0.19228273206204177] ***
*** starting iteration: 2; err: [Inf, 0.24480339730903505, 0.19228273206204177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24480339730903505, 0.19228273206204177, 0.18876865008100868] ***
*** starting iteration: 3; err: [Inf, 0.24480339730903505, 0.19228273206204177, 0.18876865008100868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24480339730903505, 0.19228273206204177, 0.18876865008100868, 0.18811792435497046] ***
*** finished computation of 7 references, err: [Inf, 0.24480339730903505, 0.19228273206204177, 0.18876865008100868, 0.18811792435497046] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 54, 12]]
** centroid: 2, normalized-entropy: 0.6840384356390419, [(2, 54), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [79, 3, 0]]
** centroid: 3, normalized-entropy: 0.22641094842107634, [(1, 79), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [4, 65, 0]]
** centroid: 4, normalized-entropy: 0.3193373865339728, [(1, 4), (2, 65)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 11, 0]]
** centroid: 5, normalized-entropy: 0.674398887071447, [(1, 51), (2, 11)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2430766514078714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2430766514078714, 0.18393278855085374] ***
*** starting iteration: 2; err: [Inf, 0.2430766514078714, 0.18393278855085374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2430766514078714, 0.18393278855085374, 0.17901178776472806] ***
*** starting iteration: 3; err: [Inf, 0.2430766514078714, 0.18393278855085374, 0.17901178776472806] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2430766514078714, 0.18393278855085374, 0.17901178776472806, 0.17850655125267803] ***
*** finished computation of 7 references, err: [Inf, 0.2430766514078714, 0.18393278855085374, 0.17901178776472806, 0.17850655125267803] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 81, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [38, 32, 0]]
** centroid: 3, normalized-entropy: 0.9946937953613056, [(1, 38), (2, 32)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 20, 0]]
** centroid: 4, normalized-entropy: 0.8418521897563208, [(1, 54), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 10, 0]]
** centroid: 5, normalized-entropy: 0.5479900080939728, [(1, 69), (2, 10)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 47, 15]]
** centroid: 6, normalized-entropy: 0.7982441335646697, [(2, 47), (3, 15)]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24085369038581847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24085369038581847, 0.1906034846212715] ***
*** starting iteration: 2; err: [Inf, 0.24085369038581847, 0.1906034846212715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24085369038581847, 0.1906034846212715, 0.1855484239924699] ***
*** starting iteration: 3; err: [Inf, 0.24085369038581847, 0.1906034846212715, 0.1855484239924699] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24085369038581847, 0.1906034846212715, 0.1855484239924699, 0.18493813954107463] ***
*** finished computation of 7 references, err: [Inf, 0.24085369038581847, 0.1906034846212715, 0.1855484239924699, 0.18493813954107463] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [88, 8, 0]]
** centroid: 1, normalized-entropy: 0.4138168503036336, [(1, 88), (2, 8)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 35, 21]]
** centroid: 2, normalized-entropy: 0.954434002924965, [(2, 35), (3, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [85, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [49, 3, 0]]
** centroid: 4, normalized-entropy: 0.3182152976832332, [(1, 49), (2, 3)]
*** center 5: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 84, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 54, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24051347626931965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24051347626931965, 0.18773228471912443] ***
*** starting iteration: 2; err: [Inf, 0.24051347626931965, 0.18773228471912443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24051347626931965, 0.18773228471912443, 0.1807678277255036] ***
*** starting iteration: 3; err: [Inf, 0.24051347626931965, 0.18773228471912443, 0.1807678277255036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24051347626931965, 0.18773228471912443, 0.1807678277255036, 0.17888437198498286] ***
*** finished computation of 7 references, err: [Inf, 0.24051347626931965, 0.18773228471912443, 0.1807678277255036, 0.17888437198498286] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 82, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 13, 0]]
** centroid: 2, normalized-entropy: 0.7746319868686841, [(1, 44), (2, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 76, 19]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(2, 76), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 11, 0]]
** centroid: 5, normalized-entropy: 0.6167482598263911, [(1, 61), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [49, 2, 0]]
** centroid: 6, normalized-entropy: 0.23868451135100152, [(1, 49), (2, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24525881874375044] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24525881874375044, 0.1906366843301803] ***
*** starting iteration: 2; err: [Inf, 0.24525881874375044, 0.1906366843301803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24525881874375044, 0.1906366843301803, 0.18834746519476175] ***
*** starting iteration: 3; err: [Inf, 0.24525881874375044, 0.1906366843301803, 0.18834746519476175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24525881874375044, 0.1906366843301803, 0.18834746519476175, 0.18788503294810652] ***
*** finished computation of 7 references, err: [Inf, 0.24525881874375044, 0.1906366843301803, 0.18834746519476175, 0.18788503294810652] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [46, 21, 0]]
** centroid: 1, normalized-entropy: 0.8970964164730478, [(1, 46), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 24, 0]]
** centroid: 2, normalized-entropy: 0.8858834790484443, [(1, 55), (2, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 50, 18]]
** centroid: 4, normalized-entropy: 0.8337649072106652, [(2, 50), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [78, 14, 0]]
** centroid: 5, normalized-entropy: 0.6152538910563409, [(1, 78), (2, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 85, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2460419785566628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2460419785566628, 0.19131220748648048] ***
*** starting iteration: 2; err: [Inf, 0.2460419785566628, 0.19131220748648048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2460419785566628, 0.19131220748648048, 0.18572786243783776] ***
*** starting iteration: 3; err: [Inf, 0.2460419785566628, 0.19131220748648048, 0.18572786243783776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2460419785566628, 0.19131220748648048, 0.18572786243783776, 0.18534964534267784] ***
*** finished computation of 7 references, err: [Inf, 0.2460419785566628, 0.19131220748648048, 0.18572786243783776, 0.18534964534267784] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 76, 18]]
** centroid: 1, normalized-entropy: 0.7045767128725937, [(2, 76), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [37, 14, 0]]
** centroid: 3, normalized-entropy: 0.8478617451660525, [(1, 37), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 22, 0]]
** centroid: 4, normalized-entropy: 0.8485481782946159, [(1, 58), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 15, 0]]
** centroid: 5, normalized-entropy: 0.7612401496918493, [(1, 53), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [49, 2, 0]]
** centroid: 6, normalized-entropy: 0.23868451135100152, [(1, 49), (2, 2)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 83, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25637343016825614] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25637343016825614, 0.19604704152420163] ***
*** starting iteration: 2; err: [Inf, 0.25637343016825614, 0.19604704152420163] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25637343016825614, 0.19604704152420163, 0.19095392497256397] ***
*** starting iteration: 3; err: [Inf, 0.25637343016825614, 0.19604704152420163, 0.19095392497256397] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25637343016825614, 0.19604704152420163, 0.19095392497256397, 0.18991337564215063] ***
*** finished computation of 7 references, err: [Inf, 0.25637343016825614, 0.19604704152420163, 0.19095392497256397, 0.18991337564215063] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [34, 51, 0]]
** centroid: 1, normalized-entropy: 0.9709505944546688, [(1, 34), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [37, 8, 0]]
** centroid: 2, normalized-entropy: 0.6751914401458716, [(1, 37), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 78, 15]]
** centroid: 4, normalized-entropy: 0.6373874992221911, [(2, 78), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 47, 0]]
** centroid: 5, normalized-entropy: 0.9531971725430559, [(1, 28), (2, 47)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [42, 6, 0]]
** centroid: 6, normalized-entropy: 0.5435644431995963, [(1, 42), (2, 6)]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22027316270582378] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22027316270582378, 0.18729504326498136] ***
*** starting iteration: 2; err: [Inf, 0.22027316270582378, 0.18729504326498136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22027316270582378, 0.18729504326498136, 0.185700819183141] ***
*** starting iteration: 3; err: [Inf, 0.22027316270582378, 0.18729504326498136, 0.185700819183141] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22027316270582378, 0.18729504326498136, 0.185700819183141, 0.1852996977865696] ***
*** finished computation of 7 references, err: [Inf, 0.22027316270582378, 0.18729504326498136, 0.185700819183141, 0.1852996977865696] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 74, 16]]
** centroid: 1, normalized-entropy: 0.6751914401458716, [(2, 74), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 17, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 51), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [52, 12, 0]]
** centroid: 4, normalized-entropy: 0.6962122601251459, [(1, 52), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 3, 0]]
** centroid: 5, normalized-entropy: 0.260862909647207, [(1, 65), (2, 3)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 83, 2]]
** centroid: 6, normalized-entropy: 0.16082302082246946, [(2, 83), (3, 2)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [29, 19, 0]]
** centroid: 7, normalized-entropy: 0.968461008760162, [(1, 29), (2, 19)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23943507561832666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23943507561832666, 0.19937597568146884] ***
*** starting iteration: 2; err: [Inf, 0.23943507561832666, 0.19937597568146884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23943507561832666, 0.19937597568146884, 0.19682404827699065] ***
*** starting iteration: 3; err: [Inf, 0.23943507561832666, 0.19937597568146884, 0.19682404827699065] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23943507561832666, 0.19937597568146884, 0.19682404827699065, 0.19629323041671887] ***
*** finished computation of 7 references, err: [Inf, 0.23943507561832666, 0.19937597568146884, 0.19682404827699065, 0.19629323041671887] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 73, 0]]
** centroid: 1, normalized-entropy: 0.34351974100740135, [(1, 5), (2, 73)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 8, 0]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(1, 40), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 86, 14]]
** centroid: 4, normalized-entropy: 0.5842388116428561, [(2, 86), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 28, 0]]
** centroid: 5, normalized-entropy: 0.9568886656798214, [(1, 46), (2, 28)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 5, 0]]
** centroid: 6, normalized-entropy: 0.5032583347756457, [(1, 40), (2, 5)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24265496166050435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24265496166050435, 0.19912156086228788] ***
*** starting iteration: 2; err: [Inf, 0.24265496166050435, 0.19912156086228788] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24265496166050435, 0.19912156086228788, 0.19266111764870583] ***
*** starting iteration: 3; err: [Inf, 0.24265496166050435, 0.19912156086228788, 0.19266111764870583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24265496166050435, 0.19912156086228788, 0.19266111764870583, 0.19113506665825844] ***
*** finished computation of 7 references, err: [Inf, 0.24265496166050435, 0.19912156086228788, 0.19266111764870583, 0.19113506665825844] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [20, 56, 0]]
** centroid: 1, normalized-entropy: 0.8314743880097292, [(1, 20), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 13, 0]]
** centroid: 2, normalized-entropy: 0.7607859931846075, [(1, 46), (2, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 59, 20]]
** centroid: 4, normalized-entropy: 0.8162554088088008, [(2, 59), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 65, 0]]
** centroid: 5, normalized-entropy: 0.4178642624458583, [(1, 6), (2, 65)]
*** center 6: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [63, 3, 0]]
** centroid: 7, normalized-entropy: 0.2667649878030262, [(1, 63), (2, 3)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24178888884931804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24178888884931804, 0.1948253627754748] ***
*** starting iteration: 2; err: [Inf, 0.24178888884931804, 0.1948253627754748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24178888884931804, 0.1948253627754748, 0.1906855930685997] ***
*** starting iteration: 3; err: [Inf, 0.24178888884931804, 0.1948253627754748, 0.1906855930685997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24178888884931804, 0.1948253627754748, 0.1906855930685997, 0.18884764881804586] ***
*** finished computation of 7 references, err: [Inf, 0.24178888884931804, 0.1948253627754748, 0.1906855930685997, 0.18884764881804586] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [8, 80, 0]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(1, 8), (2, 80)]
*** center 2: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [38, 40, 0]]
** centroid: 3, normalized-entropy: 0.9995256892936492, [(1, 38), (2, 40)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [46, 17, 0]]
** centroid: 4, normalized-entropy: 0.8412367762002599, [(1, 46), (2, 17)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 68, 16]]
** centroid: 5, normalized-entropy: 0.7024665512903904, [(2, 68), (3, 16)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22944752951711417] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22944752951711417, 0.1798211308605969] ***
*** starting iteration: 2; err: [Inf, 0.22944752951711417, 0.1798211308605969] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22944752951711417, 0.1798211308605969, 0.17588377730548382] ***
*** starting iteration: 3; err: [Inf, 0.22944752951711417, 0.1798211308605969, 0.17588377730548382] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22944752951711417, 0.1798211308605969, 0.17588377730548382, 0.17552339020813815] ***
*** finished computation of 7 references, err: [Inf, 0.22944752951711417, 0.1798211308605969, 0.17588377730548382, 0.17552339020813815] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 80, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 34, 0]]
** centroid: 3, normalized-entropy: 0.9952525494396791, [(1, 40), (2, 34)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 9, 0]]
** centroid: 4, normalized-entropy: 0.5484866088431741, [(1, 62), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 15, 0]]
** centroid: 5, normalized-entropy: 0.7327525499549903, [(1, 58), (2, 15)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 58, 14]]
** centroid: 6, normalized-entropy: 0.710676853856123, [(2, 58), (3, 14)]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22724511193856597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22724511193856597, 0.19287936975806952] ***
*** starting iteration: 2; err: [Inf, 0.22724511193856597, 0.19287936975806952] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22724511193856597, 0.19287936975806952, 0.18818720413185655] ***
*** starting iteration: 3; err: [Inf, 0.22724511193856597, 0.19287936975806952, 0.18818720413185655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22724511193856597, 0.19287936975806952, 0.18818720413185655, 0.18726366799790412] ***
*** finished computation of 7 references, err: [Inf, 0.22724511193856597, 0.19287936975806952, 0.18818720413185655, 0.18726366799790412] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [49, 33, 0]]
** centroid: 1, normalized-entropy: 0.9723594643683989, [(1, 49), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 11, 0]]
** centroid: 2, normalized-entropy: 0.7076690004167966, [(1, 46), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 56, 18]]
** centroid: 4, normalized-entropy: 0.8003922080453356, [(2, 56), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [77, 6, 0]]
** centroid: 5, normalized-entropy: 0.3744088453489206, [(1, 77), (2, 6)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 87, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23940984389558434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23940984389558434, 0.1814938113070093] ***
*** starting iteration: 2; err: [Inf, 0.23940984389558434, 0.1814938113070093] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23940984389558434, 0.1814938113070093, 0.17777422211971133] ***
*** starting iteration: 3; err: [Inf, 0.23940984389558434, 0.1814938113070093, 0.17777422211971133] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23940984389558434, 0.1814938113070093, 0.17777422211971133, 0.17760075160861016] ***
*** finished computation of 7 references, err: [Inf, 0.23940984389558434, 0.1814938113070093, 0.17777422211971133, 0.17760075160861016] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 72, 13]]
** centroid: 1, normalized-entropy: 0.617151919200282, [(2, 72), (3, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 6, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 48), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 20, 0]]
** centroid: 4, normalized-entropy: 0.7966394665488286, [(1, 63), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 25, 0]]
** centroid: 5, normalized-entropy: 0.935940714955517, [(1, 46), (2, 25)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2507564444988966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2507564444988966, 0.19306930181756615] ***
*** starting iteration: 2; err: [Inf, 0.2507564444988966, 0.19306930181756615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2507564444988966, 0.19306930181756615, 0.18817004285007716] ***
*** starting iteration: 3; err: [Inf, 0.2507564444988966, 0.19306930181756615, 0.18817004285007716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2507564444988966, 0.19306930181756615, 0.18817004285007716, 0.1861572700291872] ***
*** finished computation of 7 references, err: [Inf, 0.2507564444988966, 0.19306930181756615, 0.18817004285007716, 0.1861572700291872] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 40, 0]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(1, 30), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [35, 13, 0]]
** centroid: 2, normalized-entropy: 0.842657877202239, [(1, 35), (2, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 60, 14]]
** centroid: 4, normalized-entropy: 0.699772221773307, [(2, 60), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 9, 0]]
** centroid: 5, normalized-entropy: 0.569190343735683, [(1, 58), (2, 9)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 80, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [71, 2, 0]]
** centroid: 7, normalized-entropy: 0.18116640155354563, [(1, 71), (2, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23174583293730394] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23174583293730394, 0.18985861959680914] ***
*** starting iteration: 2; err: [Inf, 0.23174583293730394, 0.18985861959680914] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23174583293730394, 0.18985861959680914, 0.18723835849761963] ***
*** starting iteration: 3; err: [Inf, 0.23174583293730394, 0.18985861959680914, 0.18723835849761963] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23174583293730394, 0.18985861959680914, 0.18723835849761963, 0.18643108405545353] ***
*** finished computation of 7 references, err: [Inf, 0.23174583293730394, 0.18985861959680914, 0.18723835849761963, 0.18643108405545353] ***
*** center 1: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 52, 19]]
** centroid: 2, normalized-entropy: 0.8380078505079931, [(2, 52), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [72, 3, 0]]
** centroid: 3, normalized-entropy: 0.24229218908241482, [(1, 72), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [44, 36, 0]]
** centroid: 4, normalized-entropy: 0.9927744539878083, [(1, 44), (2, 36)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 57, 0]]
** centroid: 5, normalized-entropy: 0.6924194863274741, [(1, 13), (2, 57)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 48, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21571036975830793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21571036975830793, 0.180627274941653] ***
*** starting iteration: 2; err: [Inf, 0.21571036975830793, 0.180627274941653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21571036975830793, 0.180627274941653, 0.1795201345346868] ***
*** starting iteration: 3; err: [Inf, 0.21571036975830793, 0.180627274941653, 0.1795201345346868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21571036975830793, 0.180627274941653, 0.1795201345346868, 0.17911955802887677] ***
*** finished computation of 7 references, err: [Inf, 0.21571036975830793, 0.180627274941653, 0.1795201345346868, 0.17911955802887677] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 7, 0]]
** centroid: 2, normalized-entropy: 0.5313400141801669, [(1, 51), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 41, 18]]
** centroid: 3, normalized-entropy: 0.8874179270685693, [(2, 41), (3, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 10, 0]]
** centroid: 4, normalized-entropy: 0.5349436990971067, [(1, 72), (2, 10)]
*** center 5: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [15, 62, 0]]
** centroid: 7, normalized-entropy: 0.7114160189012126, [(1, 15), (2, 62)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22670609591156243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22670609591156243, 0.18960462640295736] ***
*** starting iteration: 2; err: [Inf, 0.22670609591156243, 0.18960462640295736] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22670609591156243, 0.18960462640295736, 0.1863257306162268] ***
*** starting iteration: 3; err: [Inf, 0.22670609591156243, 0.18960462640295736, 0.1863257306162268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22670609591156243, 0.18960462640295736, 0.1863257306162268, 0.18618675979971885] ***
*** finished computation of 7 references, err: [Inf, 0.22670609591156243, 0.18960462640295736, 0.1863257306162268, 0.18618675979971885] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 8, 0]]
** centroid: 2, normalized-entropy: 0.6193821946787638, [(1, 44), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 46, 19]]
** centroid: 3, normalized-entropy: 0.871683617119982, [(2, 46), (3, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [70, 11, 0]]
** centroid: 4, normalized-entropy: 0.5731393980555147, [(1, 70), (2, 11)]
*** center 5: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 74, 0]]
** centroid: 7, normalized-entropy: 0.29181825659888555, [(1, 4), (2, 74)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23705338074825705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23705338074825705, 0.18835718384012579] ***
*** starting iteration: 2; err: [Inf, 0.23705338074825705, 0.18835718384012579] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23705338074825705, 0.18835718384012579, 0.18473899462912233] ***
*** starting iteration: 3; err: [Inf, 0.23705338074825705, 0.18835718384012579, 0.18473899462912233] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23705338074825705, 0.18835718384012579, 0.18473899462912233, 0.1839944831132889] ***
*** finished computation of 7 references, err: [Inf, 0.23705338074825705, 0.18835718384012579, 0.18473899462912233, 0.1839944831132889] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 15, 0]]
** centroid: 1, normalized-entropy: 0.7553754125614286, [(1, 54), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 6, 0]]
** centroid: 2, normalized-entropy: 0.5586293734521991, [(1, 40), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 88, 16]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(2, 88), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [40, 15, 0]]
** centroid: 5, normalized-entropy: 0.8453509366224364, [(1, 40), (2, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 1, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 80, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22332704394683242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22332704394683242, 0.190081279033795] ***
*** starting iteration: 2; err: [Inf, 0.22332704394683242, 0.190081279033795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22332704394683242, 0.190081279033795, 0.18710295235225932] ***
*** starting iteration: 3; err: [Inf, 0.22332704394683242, 0.190081279033795, 0.18710295235225932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22332704394683242, 0.190081279033795, 0.18710295235225932, 0.18575776860490442] ***
*** finished computation of 7 references, err: [Inf, 0.22332704394683242, 0.190081279033795, 0.18710295235225932, 0.18575776860490442] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 85, 17]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 85), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 2, 0]]
** centroid: 3, normalized-entropy: 0.23181305002459035, [(1, 51), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [37, 12, 0]]
** centroid: 4, normalized-entropy: 0.8030909760146977, [(1, 37), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [80, 7, 0]]
** centroid: 5, normalized-entropy: 0.40379715049939235, [(1, 80), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [61, 8, 0]]
** centroid: 6, normalized-entropy: 0.5175827525559071, [(1, 61), (2, 8)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 74, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21158026003837585] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21158026003837585, 0.19156826438568533] ***
*** starting iteration: 2; err: [Inf, 0.21158026003837585, 0.19156826438568533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21158026003837585, 0.19156826438568533, 0.18863098921068014] ***
*** starting iteration: 3; err: [Inf, 0.21158026003837585, 0.19156826438568533, 0.18863098921068014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21158026003837585, 0.19156826438568533, 0.18863098921068014, 0.18660239087045194] ***
*** finished computation of 7 references, err: [Inf, 0.21158026003837585, 0.19156826438568533, 0.18863098921068014, 0.18660239087045194] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 19, 0]]
** centroid: 3, normalized-entropy: 0.8218127305034848, [(1, 55), (2, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [83, 10, 0]]
** centroid: 4, normalized-entropy: 0.49241092131589825, [(1, 83), (2, 10)]
*** center 5: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 61, 16]]
** centroid: 6, normalized-entropy: 0.7372413771710565, [(2, 61), (3, 16)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 47, 0]]
** centroid: 7, normalized-entropy: 0.5983474220910422, [(1, 8), (2, 47)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21510159560851752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21510159560851752, 0.18695771774370223] ***
*** starting iteration: 2; err: [Inf, 0.21510159560851752, 0.18695771774370223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21510159560851752, 0.18695771774370223, 0.1853903542123735] ***
*** starting iteration: 3; err: [Inf, 0.21510159560851752, 0.18695771774370223, 0.1853903542123735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21510159560851752, 0.18695771774370223, 0.1853903542123735, 0.18507234442420303] ***
*** finished computation of 7 references, err: [Inf, 0.21510159560851752, 0.18695771774370223, 0.1853903542123735, 0.18507234442420303] ***
*** center 1: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 4, 0]]
** centroid: 2, normalized-entropy: 0.3912435636292556, [(1, 48), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 67, 15]]
** centroid: 3, normalized-entropy: 0.6864381668766382, [(2, 67), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 41, 0]]
** centroid: 5, normalized-entropy: 0.9984389230256238, [(1, 45), (2, 41)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [41, 11, 0]]
** centroid: 6, normalized-entropy: 0.7444131797881749, [(1, 41), (2, 11)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [12, 66, 0]]
** centroid: 7, normalized-entropy: 0.6193821946787638, [(1, 12), (2, 66)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23547873840294778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23547873840294778, 0.19450143431313335] ***
*** starting iteration: 2; err: [Inf, 0.23547873840294778, 0.19450143431313335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23547873840294778, 0.19450143431313335, 0.19019983372837304] ***
*** starting iteration: 3; err: [Inf, 0.23547873840294778, 0.19450143431313335, 0.19019983372837304] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23547873840294778, 0.19450143431313335, 0.19019983372837304, 0.1890597627032548] ***
*** finished computation of 7 references, err: [Inf, 0.23547873840294778, 0.19450143431313335, 0.19019983372837304, 0.1890597627032548] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 68, 16]]
** centroid: 2, normalized-entropy: 0.7024665512903904, [(2, 68), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 12, 0]]
** centroid: 3, normalized-entropy: 0.7286561673702678, [(1, 47), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [6, 52, 0]]
** centroid: 4, normalized-entropy: 0.47983202361612853, [(1, 6), (2, 52)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [27, 53, 0]]
** centroid: 5, normalized-entropy: 0.9224062617590724, [(1, 27), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [51, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26536007011681795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26536007011681795, 0.20025593245774506] ***
*** starting iteration: 2; err: [Inf, 0.26536007011681795, 0.20025593245774506] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26536007011681795, 0.20025593245774506, 0.19166606396995484] ***
*** starting iteration: 3; err: [Inf, 0.26536007011681795, 0.20025593245774506, 0.19166606396995484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26536007011681795, 0.20025593245774506, 0.19166606396995484, 0.19043075293675066] ***
*** finished computation of 7 references, err: [Inf, 0.26536007011681795, 0.20025593245774506, 0.19166606396995484, 0.19043075293675066] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [11, 69, 0]]
** centroid: 1, normalized-entropy: 0.5776539033535634, [(1, 11), (2, 69)]
*** center 2: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 36, 0]]
** centroid: 3, normalized-entropy: 0.9892452969285004, [(1, 46), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [48, 25, 0]]
** centroid: 4, normalized-entropy: 0.9271587399898307, [(1, 48), (2, 25)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 72, 19]]
** centroid: 5, normalized-entropy: 0.7391658175693049, [(2, 72), (3, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23961639927560463] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23961639927560463, 0.18908866260480137] ***
*** starting iteration: 2; err: [Inf, 0.23961639927560463, 0.18908866260480137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23961639927560463, 0.18908866260480137, 0.1818779369080439] ***
*** starting iteration: 3; err: [Inf, 0.23961639927560463, 0.18908866260480137, 0.1818779369080439] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23961639927560463, 0.18908866260480137, 0.1818779369080439, 0.17873771052062512] ***
*** finished computation of 7 references, err: [Inf, 0.23961639927560463, 0.18908866260480137, 0.1818779369080439, 0.17873771052062512] ***
*** center 1: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 67, 14]]
** centroid: 2, normalized-entropy: 0.6641593279528072, [(2, 67), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 10, 0]]
** centroid: 3, normalized-entropy: 0.6436394131461666, [(1, 51), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [40, 38, 0]]
** centroid: 4, normalized-entropy: 0.9995256892936492, [(1, 40), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [60, 28, 0]]
** centroid: 5, normalized-entropy: 0.9023932827949788, [(1, 60), (2, 28)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2541840312560089] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2541840312560089, 0.1934720030501485] ***
*** starting iteration: 2; err: [Inf, 0.2541840312560089, 0.1934720030501485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2541840312560089, 0.1934720030501485, 0.18618017811980098] ***
*** starting iteration: 3; err: [Inf, 0.2541840312560089, 0.1934720030501485, 0.18618017811980098] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2541840312560089, 0.1934720030501485, 0.18618017811980098, 0.18522552258055658] ***
*** finished computation of 7 references, err: [Inf, 0.2541840312560089, 0.1934720030501485, 0.18618017811980098, 0.18522552258055658] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [79, 7, 0]]
** centroid: 1, normalized-entropy: 0.40707680632541937, [(1, 79), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 38, 14]]
** centroid: 2, normalized-entropy: 0.8403586716091169, [(2, 38), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [73, 7, 0]]
** centroid: 3, normalized-entropy: 0.4280696292293062, [(1, 73), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 6, 0]]
** centroid: 4, normalized-entropy: 0.42622865699814483, [(1, 63), (2, 6)]
*** center 5: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 60, 0]]
** centroid: 6, normalized-entropy: 0.2761954276479391, [(1, 3), (2, 60)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 70, 0]]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 390,3 => 32,1 => 578), Dict(2 => 380,3 => 34,1 => 586))
[ Info: ===== scores for single classifier: {"micro_f1":0.911,"precision":0.911,"recall":0.911,"macro_recall":0.9228707685696876,"macro_f1":0.8198435882455893,"accuracy":0.911,"class_f1":{"2":0.8792401628222524,"3":0.6226415094339622,"1":0.9576490924805532},"class_precision":{"2":0.907563025210084,"3":0.4583333333333333,"1":0.9702276707530648},"class_recall":{"2":0.8526315789473684,"3":0.9705882352941176,"1":0.9453924914675768}}
[ Info: ===== scores for 1: {"micro_f1":0.956,"precision":0.956,"recall":0.956,"macro_recall":0.9604942641687536,"macro_f1":0.9308513708513709,"accuracy":0.956,"class_f1":{"2":0.9428571428571428,"3":0.8800000000000001,"1":0.9696969696969697},"class_precision":{"2":0.9307692307692308,"3":0.8048780487804879,"1":0.984182776801406},"class_recall":{"2":0.9552631578947368,"3":0.9705882352941176,"1":0.9556313993174061}}
[ Info: ===== scores for 5: {"micro_f1":0.959,"precision":0.959,"recall":0.959,"macro_recall":0.9622007488103917,"macro_f1":0.9225302004963023,"accuracy":0.959,"class_f1":{"2":0.9465449804432856,"3":0.846153846153846,"1":0.9748917748917749},"class_precision":{"2":0.937984496124031,"3":0.75,"1":0.9894551845342706},"class_recall":{"2":0.9552631578947368,"3":0.9705882352941176,"1":0.9607508532423208}}
[ Info: ===== scores for 7: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9633384052381505,"macro_f1":0.9239457465498443,"accuracy":0.961,"class_f1":{"2":0.9490196078431372,"3":0.846153846153846,"1":0.9766637856525496},"class_precision":{"2":0.9428571428571428,"3":0.75,"1":0.989492119089317},"class_recall":{"2":0.9552631578947368,"3":0.9705882352941176,"1":0.9641638225255973}}
[ Info: ===== scores for 9: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.963955134775304,"macro_f1":0.9240071529987471,"accuracy":0.961,"class_f1":{"2":0.9492847854356306,"3":0.846153846153846,"1":0.976582827406765},"class_precision":{"2":0.9383033419023136,"3":0.75,"1":0.9929453262786596},"class_recall":{"2":0.9605263157894737,"3":0.9705882352941176,"1":0.9607508532423208}}
[ Info: ===== scores for 11: {"micro_f1":0.962,"precision":0.962,"recall":0.962,"macro_recall":0.9642155982206067,"macro_f1":0.9213965537460926,"accuracy":0.962,"class_f1":{"2":0.9503916449086162,"3":0.8354430379746834,"1":0.9783549783549783},"class_precision":{"2":0.9430051813471503,"3":0.7333333333333333,"1":0.9929701230228472},"class_recall":{"2":0.9578947368421052,"3":0.9705882352941176,"1":0.9641638225255973}}
(score = 0.956, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.956, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.959, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.959, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.96, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.96, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.959, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.959, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.959, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.959, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.961,"k":3,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9654969586181877,"macro_f1":0.9420569465762636,"accuracy":0.961,"class_f1":{"2":0.9499358151476252,"3":0.9041095890410958,"1":0.9721254355400697},"class_precision":{"2":0.9273182957393483,"3":0.8461538461538461,"1":0.9928825622775801},"class_recall":{"2":0.9736842105263158,"3":0.9705882352941176,"1":0.9522184300341296}}
Test Summary: | Pass  Total
AKNC          |    8      8
[870, 1, 3, 1, 2, 1, 3, 3, 1, 8, 1, 5, 5, 2, 18, 5, 3, 5, 5, 1, 7, 7, 1, 8, 8, 6, 4, 7, 5, 2, 15, 2, 1, 13, 3, 7, 5, 5, 14, 11, 6, 3, 30, 3, 3, 12, 5, 17, 15, 3, 2, 1, 2, 98, 4, 11, 31, 2, 3, 8, 2, 16, 17, 64, 27, 10, 17, 5, 20, 38, 39, 7, 7, 50, 57, 17, 13, 7, 5, 4, 4, 103, 12, 2, 52, 19, 130, 9, 24, 6, 64, 17, 8, 6, 4, 11, 20, 17, 15, 6, 4, 14, 4, 27, 3, 14, 49, 26, 6, 33, 6, 12, 21, 8, 21, 15, 135, 12, 17, 22, 15, 25, 5, 23, 8, 20, 28, 10, 155, 18, 11, 9, 1, 56, 18, 51, 1, 44, 1, 85, 8, 170, 20, 28, 14, 14, 23, 5, 14, 26, 6, 29, 41, 99, 4, 22, 4, 25, 13, 31, 10, 4, 78, 29, 28, 31, 10, 5, 15, 129, 62, 1, 288, 25, 30, 26, 56, 27, 3, 1, 23, 33, 68, 17, 43, 17, 93, 25, 24, 2, 10, 35, 14, 55, 37, 4, 10, 7, 5, 22, 385, 21, 8, 5, 8, 19, 18, 95, 31, 3, 76, 7, 3, 4, 28, 466, 8, 2, 222, 50, 13, 17, 8, 5, 6, 19, 37, 10, 17, 36, 105, 27, 47, 44, 207, 94, 29, 14, 15, 36, 12, 23, 24, 154, 3, 109, 46, 50, 17, 4, 13, 16, 135, 70, 166, 66, 20, 63, 13, 26, 37, 29, 6, 7, 5, 72, 85, 51, 38, 60, 28, 40, 44, 32, 49, 9, 57, 92, 48, 91, 8, 23, 6, 55, 1, 44, 2, 66, 21, 98, 14, 70, 11, 14, 18, 10, 25, 11, 28, 5]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6370000000000001, speedup = 0.34018855140478277, eval_ratio = 0.06552100000000001)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.40438988095238104,"recall":0.4027777777777779,"f1":null,"seconds":0.00019808858633041382,"exhaustive_search_seconds":0.00035695359110832214,"evaluations":539.375,"distances_sum":1698.7020141499356}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5798611111111109,"recall":0.5798611111111109,"f1":null,"seconds":0.00031774304807186127,"exhaustive_search_seconds":0.00035695359110832214,"evaluations":679.984375,"distances_sum":1593.071668389475}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6831597222222219,"recall":0.6831597222222219,"f1":0.6831597222222219,"seconds":0.000405922532081604,"exhaustive_search_seconds":0.00035695359110832214,"evaluations":807.9140625,"distances_sum":1544.4764638346523}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7621527777777773,"recall":0.7621527777777773,"f1":0.7621527777777773,"seconds":0.0005798190832138062,"exhaustive_search_seconds":0.00035695359110832214,"evaluations":925.1328125,"distances_sum":1517.7937154752933}
KCenters.DeloneInvIndex> reached performance {"precision":0.8142361111111105,"recall":0.8142361111111105,"f1":0.8142361111111105,"seconds":0.0005853194743394852,"exhaustive_search_seconds":0.00035695359110832214,"evaluations":1036.421875,"distances_sum":1501.4393209464408}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7569999999999998, speedup = 0.8683881030951901, eval_ratio = 0.087134)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
