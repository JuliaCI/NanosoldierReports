Julia Version 1.6.0-DEV.144
Commit 8c8f7a66a2 (2020-06-02 16:39 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Missings ──────────────────── v0.4.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed TableTraits ───────────────── v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed DataFrames ────────────────── v0.20.2
  Installed InvertedIndices ───────────── v1.0.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed OrderedCollections ────────── v1.2.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed Parsers ───────────────────── v1.0.4
  Installed Reexport ──────────────────── v0.2.0
  Installed JSON ──────────────────────── v0.21.0
  Installed Compat ────────────────────── v3.10.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed MappedArrays ──────────────── v0.2.2
  Installed Tables ────────────────────── v1.0.4
  Installed DataStructures ────────────── v0.17.17
  Installed DataAPI ───────────────────── v1.3.0
  Installed SimilaritySearch ──────────── v0.3.19
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.4
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_iVD1Sm/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_iVD1Sm/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.4
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9367083616058032
[ Info: 0.8321307849884033
[ Info: 0.555438105414311
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33083040051162244
mean(cdnet.distances) = 0.3454286304861307
mean(crand.distances) = 0.33623143690327806
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.150390625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.150390625,"f1":null,"seconds":3.382563591003418e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":4.1171875,"distances_sum":499.33018450612656}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.13671875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.13671875,"f1":null,"seconds":3.0603259801864624e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":3.953125,"distances_sum":451.52813268994583}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.150390625,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.150390625,"f1":null,"seconds":3.382563591003418e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":4.1171875,"distances_sum":499.33018450612656}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.46484375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.46484375,"f1":0.6180957930957934,"seconds":4.33996319770813e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":6.234375,"distances_sum":1485.7731858493794}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6083984375, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.6083984375,"f1":0.743742195304696,"seconds":5.3122639656066895e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.484375,"distances_sum":1944.0658766090455}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.8402144730269739,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.2421875,"distances_sum":2388.5837968724722}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7314453125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7314453125,"f1":0.8339759199134207,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.2265625,"distances_sum":2293.0836973936343}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.59375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.59375,"f1":0.731224331224332,"seconds":4.993751645088196e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.2890625,"distances_sum":1857.1537965056357}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7431640625,"state":{"ssize":8,"bsize":5},"perf":{"precision":1.0,"recall":0.7431640625,"f1":0.8402144730269739,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.2421875,"distances_sum":2388.5837968724722}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9023523351648359,"seconds":7.0016831159591675e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.4375,"distances_sum":2724.5930870380357}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.8973968739593745,"seconds":6.232410669326782e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.5,"distances_sum":2685.130773735542}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9164548992673999,"seconds":6.57886266708374e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.46875,"distances_sum":2836.354811800099}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9440361721611726,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.6875,"distances_sum":2968.3137447256663}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":10,"bsize":7}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9035750707625714,"seconds":6.182119250297546e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.3828125,"distances_sum":2743.705130836686}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8969728188478195,"seconds":6.249174475669861e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.34375,"distances_sum":2726.711400551166}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8950221653346663,"seconds":6.917864084243774e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.390625,"distances_sum":2728.481386589697}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9318337912087915,"seconds":6.260350346565247e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.546875,"distances_sum":2927.318188493937}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.900390625,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.9440361721611726,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.6875,"distances_sum":2968.3137447256663}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.900390625,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.9440361721611726,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.6875,"distances_sum":2968.3137447256663}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1767578125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1767578125,"f1":null,"seconds":3.376975655555725e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":4.9140625,"distances_sum":501.26046817889505}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5322265625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5322265625,"f1":0.6802121489621495,"seconds":4.734843969345093e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.0859375,"distances_sum":1373.195805880893}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5322265625,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.5322265625,"f1":0.6802121489621495,"seconds":4.734843969345093e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.0859375,"distances_sum":1373.195805880893}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6376953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6376953125,"f1":0.7678633866133874,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.6953125,"distances_sum":1740.4352779154954}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6376953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6376953125,"f1":0.7678633866133874,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.6953125,"distances_sum":1740.4352779154954}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9268746878121885,"seconds":6.3534826040267944e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.6484375,"distances_sum":2573.555603426563}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9415521978021985,"seconds":6.4820051193237305e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.703125,"distances_sum":2627.986852601997}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8911260614385622,"seconds":9.90554690361023e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.2734375,"distances_sum":2378.797221253893}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8909975441225447,"seconds":1.1488795280456543e-5,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.375,"distances_sum":2319.787590573291}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8968557484182491,"seconds":6.668269634246826e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.34375,"distances_sum":2362.6139318593864}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8974609375,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8974609375,"f1":0.9415521978021985,"seconds":6.4820051193237305e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.703125,"distances_sum":2627.986852601997}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8974609375,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8974609375,"f1":0.9415521978021985,"seconds":6.4820051193237305e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.703125,"distances_sum":2627.986852601997}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1630859375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1630859375,"f1":null,"seconds":3.606081008911133e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":4.4765625,"distances_sum":487.9311426060754}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3271484375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3271484375,"f1":null,"seconds":4.237517714500427e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":5.1875,"distances_sum":942.696896041292}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3193359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3193359375,"f1":null,"seconds":4.693865776062012e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":5.09375,"distances_sum":926.5232602375065}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3271484375,"state":{"ssize":2,"bsize":2},"perf":{"precision":null,"recall":0.3271484375,"f1":null,"seconds":4.237517714500427e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":5.1875,"distances_sum":942.696896041292}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80859375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.80859375,"f1":0.8852709790209795,"seconds":8.65943729877472e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.7578125,"distances_sum":2324.0468843816902}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.8978724400599409,"seconds":6.081536412239075e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.6015625,"distances_sum":2450.583391183267}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9006217740592747,"seconds":6.206333637237549e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.5703125,"distances_sum":2472.0008622827527}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4775390625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.4775390625,"f1":null,"seconds":4.565343260765076e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":6.546875,"distances_sum":1364.312725317476}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.837890625,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.837890625,"f1":0.9006217740592747,"seconds":6.206333637237549e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.5703125,"distances_sum":2472.0008622827527}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9152503746253752,"seconds":8.743256330490112e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.6875,"distances_sum":2518.596226520655}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9537831959706964,"seconds":6.3907355070114136e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.796875,"distances_sum":2842.577436036586}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9289892399267408,"seconds":8.923932909965515e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.734375,"distances_sum":2654.1188256100145}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9649610805860813,"seconds":6.290152668952942e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.8359375,"distances_sum":2963.6209275021433}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9117991383616392,"seconds":6.239861249923706e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.7578125,"distances_sum":2546.598673624192}, best_list's length: 14, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9506753663003666,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.8046875,"distances_sum":2845.021770383173}, best_list's length: 15, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9226133241758248,"seconds":6.34416937828064e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.7578125,"distances_sum":2570.4550533998076}, best_list's length: 16, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9649610805860813,"seconds":6.290152668952942e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.8359375,"distances_sum":2963.6209275021433}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9649610805860813,"seconds":6.290152668952942e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.8359375,"distances_sum":2963.6209275021433}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8416344072594081,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.9296875,"distances_sum":2178.4417159973186}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2880859375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.2880859375,"f1":null,"seconds":3.8351863622665405e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":4.734375,"distances_sum":787.2260677921046}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.615234375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.615234375,"f1":0.7448575729825737,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.25,"distances_sum":1714.8494187098804}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.744140625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.744140625,"f1":0.8416344072594081,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.9296875,"distances_sum":2178.4417159973186}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9335138819513827,"seconds":6.6943466663360596e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.6171875,"distances_sum":2623.659568703797}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9190679112554119,"seconds":6.254762411117554e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.421875,"distances_sum":2575.2095098876102}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9372538919413924,"seconds":8.530914783477783e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.5625,"distances_sum":2647.477758537502}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8916015625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.9372538919413924,"seconds":8.530914783477783e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.5625,"distances_sum":2647.477758537502}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9510130494505499,"seconds":6.465241312980652e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.75,"distances_sum":2721.3782174651565}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9728079212454215,"seconds":7.644295692443848e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.890625,"distances_sum":2852.503477281526}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9588083791208796,"seconds":6.631016731262207e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.78125,"distances_sum":2773.918105327705}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9631753663003669,"seconds":6.703659892082214e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8046875,"distances_sum":2810.1926238016417}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9728079212454215,"seconds":7.644295692443848e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.890625,"distances_sum":2852.503477281526}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9728079212454215,"seconds":7.644295692443848e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.890625,"distances_sum":2852.503477281526}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65234375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.65234375,"f1":0.778012612387613,"seconds":5.494803190231323e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":7.53125,"distances_sum":1669.9548564730565}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.65234375,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.65234375,"f1":0.778012612387613,"seconds":5.494803190231323e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":7.53125,"distances_sum":1669.9548564730565}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7818289349539356,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":7.5546875,"distances_sum":1717.2463295760128}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9233375999001007,"seconds":7.290393114089966e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":8.5390625,"distances_sum":2454.1247556667695}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.929532967032968,"seconds":7.3909759521484375e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":8.4609375,"distances_sum":2481.991084390431}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8073077963702971,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":7.671875,"distances_sum":1830.6255707602113}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.875,"f1":0.929532967032968,"seconds":7.3909759521484375e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":8.4609375,"distances_sum":2481.991084390431}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9680288461538468,"seconds":7.00727105140686e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":8.859375,"distances_sum":2799.9434105343835}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9726247710622717,"seconds":6.778165698051453e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":8.921875,"distances_sum":2823.3465741825567}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9622252747252751,"seconds":6.92903995513916e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":8.765625,"distances_sum":2759.533288487674}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9726247710622717,"seconds":6.778165698051453e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":8.921875,"distances_sum":2823.3465741825567}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9726247710622717,"seconds":6.778165698051453e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":8.921875,"distances_sum":2823.3465741825567}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1982421875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1982421875,"f1":null,"seconds":3.4347176551818848e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":5.6171875,"distances_sum":431.187602594849}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.48828125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.48828125,"f1":0.6428904428904432,"seconds":4.420056939125061e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":7.21875,"distances_sum":1020.5289419092802}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.48828125,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.48828125,"f1":0.6428904428904432,"seconds":4.420056939125061e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":7.21875,"distances_sum":1020.5289419092802}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.806640625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.806640625,"f1":0.8849192474192481,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.75,"distances_sum":1962.2556484632712}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8579673798423806,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.6171875,"distances_sum":1753.0249655449172}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.806640625,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.806640625,"f1":0.8849192474192481,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.75,"distances_sum":1962.2556484632712}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9264339826839835,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.890625,"distances_sum":2177.6407174668266}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.9000431859806868,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.875,"distances_sum":1999.6442788896682}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.948689331501832,"seconds":6.161630153656006e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.875,"distances_sum":2357.714088816815}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.8856683247308258,"seconds":5.928799510002136e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.7734375,"distances_sum":1946.0455761059575}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.948689331501832,"seconds":6.161630153656006e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.875,"distances_sum":2357.714088816815}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.948689331501832,"seconds":6.161630153656006e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.875,"distances_sum":2357.714088816815}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6552734375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6552734375,"f1":0.7755173645798654,"seconds":5.0514936447143555e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":7.9609375,"distances_sum":1495.5760195018167}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7932087010212019,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.0234375,"distances_sum":1568.1052051206414}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.673828125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.673828125,"f1":0.7932087010212019,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.0234375,"distances_sum":1568.1052051206414}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8482470654345662,"seconds":4.626810550689697e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.203125,"distances_sum":1836.7814666537827}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8989068223443232,"seconds":5.098059773445129e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.765625,"distances_sum":2072.094561299525}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8251953125,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.8251953125,"f1":0.8989068223443232,"seconds":5.098059773445129e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.765625,"distances_sum":2072.094561299525}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9517945596070602,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.7890625,"distances_sum":2527.472403865688}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9496165293040298,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.828125,"distances_sum":2476.4422311316603}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9517945596070602,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.7890625,"distances_sum":2527.472403865688}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.916015625,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9517945596070602,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.7890625,"distances_sum":2527.472403865688}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6357421875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6357421875,"f1":0.7617826617826625,"seconds":4.591420292854309e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":7.6953125,"distances_sum":1459.7629888958566}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.513671875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.513671875,"f1":0.6589313464313467,"seconds":4.045665264129639e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":6.9765625,"distances_sum":1140.4865150229475}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6357421875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6357421875,"f1":0.7617826617826625,"seconds":4.591420292854309e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":7.6953125,"distances_sum":1459.7629888958566}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9349853271728277,"seconds":6.332993507385254e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.7890625,"distances_sum":2346.7742697540493}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8928920038295044,"seconds":5.168840289115906e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.828125,"distances_sum":2020.672833426107}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7880161505161511,"seconds":4.59328293800354e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":7.875,"distances_sum":1560.576177056261}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8701782592407601,"seconds":5.04031777381897e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.484375,"distances_sum":1912.2464922191698}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9407280219780227,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.84375,"distances_sum":2345.8332479905166}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.896484375,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9407280219780227,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.84375,"distances_sum":2345.8332479905166}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9556776556776561,"seconds":5.500391125679016e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.890625,"distances_sum":2424.4162172820115}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9589946511821514,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.8671875,"distances_sum":2472.8990187547215}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9713942307692313,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.953125,"distances_sum":2530.6515756012204}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9484260531135537,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.7734375,"distances_sum":2407.6900320111117}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9713942307692313,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.953125,"distances_sum":2530.6515756012204}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9713942307692313,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.953125,"distances_sum":2530.6515756012204}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.630859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.630859375,"f1":0.7599735334110342,"seconds":4.14624810218811e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.53125,"distances_sum":1610.608094807587}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1552734375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1552734375,"f1":null,"seconds":2.3599714040756226e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":4.1640625,"distances_sum":441.3209717269143}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.630859375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.630859375,"f1":0.7599735334110342,"seconds":4.14624810218811e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.53125,"distances_sum":1610.608094807587}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9463286713286719,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7578125,"distances_sum":2546.9080600275274}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8863568722943731,"seconds":5.027279257774353e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.5234375,"distances_sum":2121.2885958971547}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.736328125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.736328125,"f1":0.8358615342990352,"seconds":4.8335641622543335e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.0390625,"distances_sum":1912.0277624192986}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9463286713286719,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7578125,"distances_sum":2546.9080600275274}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9760073260073261,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9453125,"distances_sum":2719.507920743406}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9695913461538463,"seconds":3.602355718612671e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9453125,"distances_sum":2654.422203795153}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9475534881784885,"seconds":5.206093192100525e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.6875,"distances_sum":2543.0879306663096}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9607200091575094,"seconds":5.191192030906677e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.828125,"distances_sum":2634.3343209092022}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9760073260073261,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9453125,"distances_sum":2719.507920743406}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9760073260073261,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9453125,"distances_sum":2719.507920743406}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1875,"f1":null,"seconds":2.648681402206421e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":4.65625,"distances_sum":469.6453032964868}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.19921875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.19921875,"f1":null,"seconds":2.7120113372802734e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":4.9296875,"distances_sum":519.0403501344747}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.505859375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.505859375,"f1":0.65758442945943,"seconds":3.6954879760742188e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.5,"distances_sum":1196.2690837044497}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.505859375,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.505859375,"f1":0.65758442945943,"seconds":3.6954879760742188e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.5,"distances_sum":1196.2690837044497}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8423685689310698,"seconds":4.801899194717407e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.1015625,"distances_sum":1909.8383892068587}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8616617757242765,"seconds":4.913657903671265e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.1796875,"distances_sum":2002.0619927265645}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5224609375, conf: {"ssize":7,"bsize":3}, perf: {"precision":1.0,"recall":0.5224609375,"f1":0.6701324716949721,"seconds":3.7029385566711426e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.5703125,"distances_sum":1266.4961169707942}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.54296875, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.54296875,"f1":0.6913811882561889,"seconds":4.16487455368042e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.828125,"distances_sum":1290.2536141571156}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.51953125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.51953125,"f1":0.6698570526695532,"seconds":4.155561327934265e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.6796875,"distances_sum":1231.7340559480733}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8616617757242765,"seconds":4.913657903671265e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.1796875,"distances_sum":2002.0619927265645}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8944430569430578,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.3125,"distances_sum":2224.856679605962}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8604145854145864,"seconds":5.185604095458984e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.21875,"distances_sum":2042.008985277335}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.93068337912088,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.6015625,"distances_sum":2519.303914882538}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":10,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9412087912087916,"seconds":5.368143320083618e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8203125,"distances_sum":2542.135007122068}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8974609375,"state":{"ssize":10,"bsize":7},"perf":{"precision":1.0,"recall":0.8974609375,"f1":0.9412087912087916,"seconds":5.368143320083618e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8203125,"distances_sum":2542.135007122068}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8974609375,"state":{"ssize":10,"bsize":7},"perf":{"precision":1.0,"recall":0.8974609375,"f1":0.9412087912087916,"seconds":5.368143320083618e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8203125,"distances_sum":2542.135007122068}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3564453125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3564453125,"f1":null,"seconds":3.1962990760803223e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":5.3984375,"distances_sum":789.2138526754383}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2294921875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2294921875,"f1":null,"seconds":2.7436763048171997e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":5.1171875,"distances_sum":569.0951210674108}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.21875,"f1":null,"seconds":2.684071660041809e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":4.9453125,"distances_sum":503.6416854755078}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3564453125,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3564453125,"f1":null,"seconds":3.1962990760803223e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":5.3984375,"distances_sum":789.2138526754383}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7801646270396279,"seconds":4.416331648826599e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":7.3125,"distances_sum":1566.7999737686885}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5244140625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5244140625,"f1":0.6688077547452552,"seconds":3.883615136146545e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":6.625,"distances_sum":1229.161990494067}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5234375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5234375,"f1":0.6720966533466538,"seconds":3.67872416973114e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":6.625,"distances_sum":1195.946701927083}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6572265625,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6572265625,"f1":0.7801646270396279,"seconds":4.416331648826599e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":7.3125,"distances_sum":1566.7999737686885}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9352048992673998,"seconds":5.17629086971283e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.484375,"distances_sum":2463.6652010338867}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8542785339660347,"seconds":4.697591066360474e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":7.7734375,"distances_sum":1920.2996941189476}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8527675449550455,"seconds":4.53554093837738e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":7.8046875,"distances_sum":1931.1997597338357}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9079587079587088,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.3359375,"distances_sum":2201.452560150185}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.8985009781884788,"seconds":4.913657903671265e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.234375,"distances_sum":2186.469451874964}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8929258241758251,"seconds":4.949048161506653e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.25,"distances_sum":2110.430654921075}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.88671875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.88671875,"f1":0.9352048992673998,"seconds":5.17629086971283e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.484375,"distances_sum":2463.6652010338867}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.88671875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.88671875,"f1":0.9352048992673998,"seconds":5.17629086971283e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.484375,"distances_sum":2463.6652010338867}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2119140625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2119140625,"f1":null,"seconds":2.687796950340271e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":4.796875,"distances_sum":517.2526834095686}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3349609375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3349609375,"f1":null,"seconds":3.0454248189926147e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":5.0,"distances_sum":789.2606957903511}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3359375,"f1":null,"seconds":2.99699604511261e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":4.953125,"distances_sum":763.1331088937455}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3359375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3359375,"f1":null,"seconds":2.99699604511261e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":4.953125,"distances_sum":763.1331088937455}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.740234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.740234375,"f1":0.841378413253414,"seconds":4.559755325317383e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.84375,"distances_sum":1779.3872777087097}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8956272893772901,"seconds":5.0067901611328125e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.203125,"distances_sum":2107.9923765849267}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5458984375, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.5458984375,"f1":0.691880168442669,"seconds":3.7867575883865356e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.4296875,"distances_sum":1274.044129881871}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":2,"bsize":4}, perf: {"precision":null,"recall":0.6669921875,"f1":null,"seconds":4.254281520843506e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.1640625,"distances_sum":1605.6714970873445}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8251953125,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.8251953125,"f1":0.8956272893772901,"seconds":5.0067901611328125e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.203125,"distances_sum":2107.9923765849267}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.908299512987014,"seconds":5.252659320831299e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.2734375,"distances_sum":2205.923821055568}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9049679487179494,"seconds":4.984438419342041e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.265625,"distances_sum":2162.8852012634134}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8981461247086255,"seconds":4.993751645088196e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.1640625,"distances_sum":2153.157264884664}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9470898892773896,"seconds":5.163252353668213e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6484375,"distances_sum":2489.344569049695}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9350389194139201,"seconds":5.083158612251282e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.5,"distances_sum":2418.7865285845883}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9461881868131874,"seconds":5.116686224937439e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.578125,"distances_sum":2487.977645733762}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9470898892773896,"seconds":5.163252353668213e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6484375,"distances_sum":2489.344569049695}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9072265625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9470898892773896,"seconds":5.163252353668213e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6484375,"distances_sum":2489.344569049695}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.689453125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.689453125,"f1":0.8051162379287385,"seconds":4.509463906288147e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.7578125,"distances_sum":1664.9566075262626}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.232421875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.232421875,"f1":null,"seconds":2.9634684324264526e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":5.59375,"distances_sum":556.6701657004193}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7975621600621609,"seconds":4.304572939872742e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.65625,"distances_sum":1604.4906564746361}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.689453125,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.689453125,"f1":0.8051162379287385,"seconds":4.509463906288147e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.7578125,"distances_sum":1664.9566075262626}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9368246336996344,"seconds":5.27501106262207e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7890625,"distances_sum":2420.034524500239}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9090893481518487,"seconds":5.058944225311279e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.4765625,"distances_sum":2215.259857038634}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9307234432234438,"seconds":5.206093192100525e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7734375,"distances_sum":2402.9324052685793}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9059497793872799,"seconds":5.219131708145142e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.65625,"distances_sum":2238.841470754044}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8525810994561005,"seconds":4.855915904045105e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.0859375,"distances_sum":1898.237567800744}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.9368246336996344,"seconds":5.27501106262207e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7890625,"distances_sum":2420.034524500239}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9657566391941395,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.875,"distances_sum":2650.8794044036026}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9377918956043961,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8046875,"distances_sum":2412.1352904823375}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9361924533799539,"seconds":5.245208740234375e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.6015625,"distances_sum":2502.2995034128107}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9640453296703299,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8671875,"distances_sum":2638.548260134915}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9692536630036634,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.890625,"distances_sum":2674.887057836949}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9692536630036634,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.890625,"distances_sum":2674.887057836949}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9692536630036634,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.890625,"distances_sum":2674.887057836949}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.515625,"f1":null,"seconds":3.6712735891342163e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":6.125,"distances_sum":1220.3011826700733}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3125,"f1":null,"seconds":3.1888484954833984e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":4.7734375,"distances_sum":736.0842001432998}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7333984375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7333984375,"f1":0.8354286338661348,"seconds":4.934147000312805e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.875,"distances_sum":1785.6704551843227}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7333984375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7333984375,"f1":0.8354286338661348,"seconds":4.934147000312805e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.875,"distances_sum":1785.6704551843227}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.734375,"f1":0.8329831626706635,"seconds":4.896894097328186e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.9609375,"distances_sum":1800.2869175191627}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8509459290709299,"seconds":4.990026354789734e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.0625,"distances_sum":1870.1573889417725}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7587890625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7587890625,"f1":0.8509459290709299,"seconds":4.990026354789734e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.0625,"distances_sum":1870.1573889417725}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9423649267399272,"seconds":3.943219780921936e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.6796875,"distances_sum":2447.1704571712175}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9200127997003,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.421875,"distances_sum":2318.767360025242}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.900390625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.9423649267399272,"seconds":3.943219780921936e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.6796875,"distances_sum":2447.1704571712175}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.900390625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.9423649267399272,"seconds":3.943219780921936e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.6796875,"distances_sum":2447.1704571712175}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3056640625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.3056640625,"f1":null,"seconds":3.1981617212295532e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":5.765625,"distances_sum":722.569620039115}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.3056640625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.3056640625,"f1":null,"seconds":3.1981617212295532e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":5.765625,"distances_sum":722.569620039115}}, n: 9
mean(cfft.distances) = 0.3295708634476836
mean(cdnet.distances) = 0.4176118880669571
mean(crand.distances) = 0.8121896327536071
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8622222222222221
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8888888888888888
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8711111111111111
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9177777777777778
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8799999999999999
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9155555555555557
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.831111111111111
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8911111111111111
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8733333333333334
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9311111111111111
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8511111111111113
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8755555555555556
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8755555555555556
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9288888888888889
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9355555555555556
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9266666666666667
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8666666666666667
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.851111111111111
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8933333333333334
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8444444444444444
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 6, 1]]
** centroid: 8, normalized-entropy: 0.5916727785823274, [(2, 6), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 9, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 6, 1]]
** centroid: 8, normalized-entropy: 0.5916727785823274, [(2, 6), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 9, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 6, 1]]
** centroid: 8, normalized-entropy: 0.5916727785823274, [(2, 6), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 9, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 6, 1]]
** centroid: 8, normalized-entropy: 0.5916727785823274, [(2, 6), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 9, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 6, 1]]
** centroid: 8, normalized-entropy: 0.5916727785823274, [(2, 6), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 9, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 6, 1]]
** centroid: 8, normalized-entropy: 0.5916727785823274, [(2, 6), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 9, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.9466666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 6, 1]]
** centroid: 8, normalized-entropy: 0.5916727785823274, [(2, 6), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 9, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.6254054982463518] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 7]]
** centroid: 1, normalized-entropy: 0.7973265101474423, [(2, 22), (3, 7)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 11, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.96
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.21230739010316138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21230739010316138, 0.1609596433726282] ***
*** starting iteration: 2; err: [Inf, 0.21230739010316138, 0.1609596433726282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21230739010316138, 0.1609596433726282, 0.15147300481596296] ***
*** starting iteration: 3; err: [Inf, 0.21230739010316138, 0.1609596433726282, 0.15147300481596296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21230739010316138, 0.1609596433726282, 0.15147300481596296, 0.14778894067087486] ***
*** starting iteration: 4; err: [Inf, 0.21230739010316138, 0.1609596433726282, 0.15147300481596296, 0.14778894067087486] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21230739010316138, 0.1609596433726282, 0.15147300481596296, 0.14778894067087486, 0.1460644427201691] ***
*** starting iteration: 5; err: [Inf, 0.21230739010316138, 0.1609596433726282, 0.15147300481596296, 0.14778894067087486, 0.1460644427201691] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21230739010316138, 0.1609596433726282, 0.15147300481596296, 0.14778894067087486, 0.1460644427201691, 0.14486653408505493] ***
*** starting iteration: 6; err: [Inf, 0.21230739010316138, 0.1609596433726282, 0.15147300481596296, 0.14778894067087486, 0.1460644427201691, 0.14486653408505493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21230739010316138, 0.1609596433726282, 0.15147300481596296, 0.14778894067087486, 0.1460644427201691, 0.14486653408505493, 0.14351442580561605] ***
*** starting iteration: 7; err: [Inf, 0.21230739010316138, 0.1609596433726282, 0.15147300481596296, 0.14778894067087486, 0.1460644427201691, 0.14486653408505493, 0.14351442580561605] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21230739010316138, 0.1609596433726282, 0.15147300481596296, 0.14778894067087486, 0.1460644427201691, 0.14486653408505493, 0.14351442580561605, 0.14244438491079273] ***
*** starting iteration: 8; err: [Inf, 0.21230739010316138, 0.1609596433726282, 0.15147300481596296, 0.14778894067087486, 0.1460644427201691, 0.14486653408505493, 0.14351442580561605, 0.14244438491079273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21230739010316138, 0.1609596433726282, 0.15147300481596296, 0.14778894067087486, 0.1460644427201691, 0.14486653408505493, 0.14351442580561605, 0.14244438491079273, 0.14193253625637373] ***
*** finished computation of 7 references, err: [Inf, 0.21230739010316138, 0.1609596433726282, 0.15147300481596296, 0.14778894067087486, 0.1460644427201691, 0.14486653408505493, 0.14351442580561605, 0.14244438491079273, 0.14193253625637373] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [3, 61, 0]]
** centroid: 1, normalized-entropy: 0.2729708579140699, [(1, 3), (2, 61)]
*** center 2: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [114, 35, 0]]
** centroid: 3, normalized-entropy: 0.7864546465839444, [(1, 114), (2, 35)]
*** center 4: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 38, 0]]
** centroid: 5, normalized-entropy: 0.9526092095121206, [(1, 64), (2, 38)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [87, 2, 0]]
** centroid: 6, normalized-entropy: 0.1551032721030341, [(1, 87), (2, 2)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 83, 25]]
** centroid: 7, normalized-entropy: 0.7805849322915901, [(2, 83), (3, 25)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20005967123419985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20005967123419985, 0.16913113265118185] ***
*** starting iteration: 2; err: [Inf, 0.20005967123419985, 0.16913113265118185] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20005967123419985, 0.16913113265118185, 0.16248088515596815] ***
*** starting iteration: 3; err: [Inf, 0.20005967123419985, 0.16913113265118185, 0.16248088515596815] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20005967123419985, 0.16913113265118185, 0.16248088515596815, 0.1548752616071652] ***
*** starting iteration: 4; err: [Inf, 0.20005967123419985, 0.16913113265118185, 0.16248088515596815, 0.1548752616071652] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20005967123419985, 0.16913113265118185, 0.16248088515596815, 0.1548752616071652, 0.14887135251351202] ***
*** starting iteration: 5; err: [Inf, 0.20005967123419985, 0.16913113265118185, 0.16248088515596815, 0.1548752616071652, 0.14887135251351202] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20005967123419985, 0.16913113265118185, 0.16248088515596815, 0.1548752616071652, 0.14887135251351202, 0.14552076110579282] ***
*** starting iteration: 6; err: [Inf, 0.20005967123419985, 0.16913113265118185, 0.16248088515596815, 0.1548752616071652, 0.14887135251351202, 0.14552076110579282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20005967123419985, 0.16913113265118185, 0.16248088515596815, 0.1548752616071652, 0.14887135251351202, 0.14552076110579282, 0.14350727689347748] ***
*** starting iteration: 7; err: [Inf, 0.20005967123419985, 0.16913113265118185, 0.16248088515596815, 0.1548752616071652, 0.14887135251351202, 0.14552076110579282, 0.14350727689347748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20005967123419985, 0.16913113265118185, 0.16248088515596815, 0.1548752616071652, 0.14887135251351202, 0.14552076110579282, 0.14350727689347748, 0.14304512962465057] ***
*** finished computation of 7 references, err: [Inf, 0.20005967123419985, 0.16913113265118185, 0.16248088515596815, 0.1548752616071652, 0.14887135251351202, 0.14552076110579282, 0.14350727689347748, 0.14304512962465057] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [69, 41, 0]]
** centroid: 1, normalized-entropy: 0.9527431707334316, [(1, 69), (2, 41)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [40, 52, 0]]
** centroid: 3, normalized-entropy: 0.9876925088958032, [(1, 40), (2, 52)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [113, 10, 0]]
** centroid: 4, normalized-entropy: 0.40674618256046063, [(1, 113), (2, 10)]
*** center 5: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 65, 30]]
** centroid: 7, normalized-entropy: 0.8997437586982626, [(2, 65), (3, 30)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1964675853178296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1964675853178296, 0.16722555317520826] ***
*** starting iteration: 2; err: [Inf, 0.1964675853178296, 0.16722555317520826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1964675853178296, 0.16722555317520826, 0.15888234189916764] ***
*** starting iteration: 3; err: [Inf, 0.1964675853178296, 0.16722555317520826, 0.15888234189916764] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1964675853178296, 0.16722555317520826, 0.15888234189916764, 0.15332727530807805] ***
*** starting iteration: 4; err: [Inf, 0.1964675853178296, 0.16722555317520826, 0.15888234189916764, 0.15332727530807805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1964675853178296, 0.16722555317520826, 0.15888234189916764, 0.15332727530807805, 0.1503906442226655] ***
*** starting iteration: 5; err: [Inf, 0.1964675853178296, 0.16722555317520826, 0.15888234189916764, 0.15332727530807805, 0.1503906442226655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1964675853178296, 0.16722555317520826, 0.15888234189916764, 0.15332727530807805, 0.1503906442226655, 0.1493053358045408] ***
*** starting iteration: 6; err: [Inf, 0.1964675853178296, 0.16722555317520826, 0.15888234189916764, 0.15332727530807805, 0.1503906442226655, 0.1493053358045408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1964675853178296, 0.16722555317520826, 0.15888234189916764, 0.15332727530807805, 0.1503906442226655, 0.1493053358045408, 0.1486371329649054] ***
*** finished computation of 7 references, err: [Inf, 0.1964675853178296, 0.16722555317520826, 0.15888234189916764, 0.15332727530807805, 0.1503906442226655, 0.1493053358045408, 0.1486371329649054] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [79, 28, 0]]
** centroid: 1, normalized-entropy: 0.8292743048721369, [(1, 79), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [67, 40, 0]]
** centroid: 2, normalized-entropy: 0.9535688597080136, [(1, 67), (2, 40)]
*** center 3: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [80, 6, 0]]
** centroid: 5, normalized-entropy: 0.3650551896402848, [(1, 80), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [17, 80, 0]]
** centroid: 6, normalized-entropy: 0.6695920597928519, [(1, 17), (2, 80)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 89, 29]]
** centroid: 7, normalized-entropy: 0.804492844152443, [(2, 89), (3, 29)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2601467277127522] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601467277127522, 0.21134397310593553] ***
*** starting iteration: 2; err: [Inf, 0.2601467277127522, 0.21134397310593553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601467277127522, 0.21134397310593553, 0.2012022464136193] ***
*** starting iteration: 3; err: [Inf, 0.2601467277127522, 0.21134397310593553, 0.2012022464136193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601467277127522, 0.21134397310593553, 0.2012022464136193, 0.19699820681886226] ***
*** starting iteration: 4; err: [Inf, 0.2601467277127522, 0.21134397310593553, 0.2012022464136193, 0.19699820681886226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601467277127522, 0.21134397310593553, 0.2012022464136193, 0.19699820681886226, 0.19541344666915075] ***
*** starting iteration: 5; err: [Inf, 0.2601467277127522, 0.21134397310593553, 0.2012022464136193, 0.19699820681886226, 0.19541344666915075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601467277127522, 0.21134397310593553, 0.2012022464136193, 0.19699820681886226, 0.19541344666915075, 0.19412042520515196] ***
*** starting iteration: 6; err: [Inf, 0.2601467277127522, 0.21134397310593553, 0.2012022464136193, 0.19699820681886226, 0.19541344666915075, 0.19412042520515196] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601467277127522, 0.21134397310593553, 0.2012022464136193, 0.19699820681886226, 0.19541344666915075, 0.19412042520515196, 0.1909271640194071] ***
*** starting iteration: 7; err: [Inf, 0.2601467277127522, 0.21134397310593553, 0.2012022464136193, 0.19699820681886226, 0.19541344666915075, 0.19412042520515196, 0.1909271640194071] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601467277127522, 0.21134397310593553, 0.2012022464136193, 0.19699820681886226, 0.19541344666915075, 0.19412042520515196, 0.1909271640194071, 0.18960394499915745] ***
*** starting iteration: 8; err: [Inf, 0.2601467277127522, 0.21134397310593553, 0.2012022464136193, 0.19699820681886226, 0.19541344666915075, 0.19412042520515196, 0.1909271640194071, 0.18960394499915745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601467277127522, 0.21134397310593553, 0.2012022464136193, 0.19699820681886226, 0.19541344666915075, 0.19412042520515196, 0.1909271640194071, 0.18960394499915745, 0.18917628594565097] ***
*** finished computation of 7 references, err: [Inf, 0.2601467277127522, 0.21134397310593553, 0.2012022464136193, 0.19699820681886226, 0.19541344666915075, 0.19412042520515196, 0.1909271640194071, 0.18960394499915745, 0.18917628594565097] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [71, 2, 0]]
** centroid: 1, normalized-entropy: 0.18116640155354563, [(1, 71), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [52, 45, 0]]
** centroid: 2, normalized-entropy: 0.9962401135461777, [(1, 52), (2, 45)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 87, 25]]
** centroid: 3, normalized-entropy: 0.765993414171823, [(2, 87), (3, 25)]
*** center 4: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [12, 55, 0]]
** centroid: 5, normalized-entropy: 0.678114052360606, [(1, 12), (2, 55)]
*** center 6: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [107, 30, 0]]
** centroid: 7, normalized-entropy: 0.7582971529373276, [(1, 107), (2, 30)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22043666643030504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22043666643030504, 0.1929916134076207] ***
*** starting iteration: 2; err: [Inf, 0.22043666643030504, 0.1929916134076207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22043666643030504, 0.1929916134076207, 0.19086411656641486] ***
*** starting iteration: 3; err: [Inf, 0.22043666643030504, 0.1929916134076207, 0.19086411656641486] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22043666643030504, 0.1929916134076207, 0.19086411656641486, 0.18971645869761483] ***
*** starting iteration: 4; err: [Inf, 0.22043666643030504, 0.1929916134076207, 0.19086411656641486, 0.18971645869761483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22043666643030504, 0.1929916134076207, 0.19086411656641486, 0.18971645869761483, 0.18894242239603562] ***
*** finished computation of 7 references, err: [Inf, 0.22043666643030504, 0.1929916134076207, 0.19086411656641486, 0.18971645869761483, 0.18894242239603562] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [98, 11, 0]]
** centroid: 1, normalized-entropy: 0.47189705387508535, [(1, 98), (2, 11)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 76, 30]]
** centroid: 2, normalized-entropy: 0.8595316914502928, [(2, 76), (3, 30)]
*** center 3: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [69, 8, 0]]
** centroid: 4, normalized-entropy: 0.481225663841737, [(1, 69), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [19, 67, 0]]
** centroid: 5, normalized-entropy: 0.7618624463753669, [(1, 19), (2, 67)]
*** center 6: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [33, 68, 0]]
** centroid: 7, normalized-entropy: 0.9115532734067251, [(1, 33), (2, 68)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2497726353513694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2497726353513694, 0.22572166901053875] ***
*** starting iteration: 2; err: [Inf, 0.2497726353513694, 0.22572166901053875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2497726353513694, 0.22572166901053875, 0.2081035730977734] ***
*** starting iteration: 3; err: [Inf, 0.2497726353513694, 0.22572166901053875, 0.2081035730977734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2497726353513694, 0.22572166901053875, 0.2081035730977734, 0.19126833194232862] ***
*** starting iteration: 4; err: [Inf, 0.2497726353513694, 0.22572166901053875, 0.2081035730977734, 0.19126833194232862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2497726353513694, 0.22572166901053875, 0.2081035730977734, 0.19126833194232862, 0.18769216213676929] ***
*** starting iteration: 5; err: [Inf, 0.2497726353513694, 0.22572166901053875, 0.2081035730977734, 0.19126833194232862, 0.18769216213676929] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2497726353513694, 0.22572166901053875, 0.2081035730977734, 0.19126833194232862, 0.18769216213676929, 0.18576464099590312] ***
*** starting iteration: 6; err: [Inf, 0.2497726353513694, 0.22572166901053875, 0.2081035730977734, 0.19126833194232862, 0.18769216213676929, 0.18576464099590312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2497726353513694, 0.22572166901053875, 0.2081035730977734, 0.19126833194232862, 0.18769216213676929, 0.18576464099590312, 0.18429705373593083] ***
*** starting iteration: 7; err: [Inf, 0.2497726353513694, 0.22572166901053875, 0.2081035730977734, 0.19126833194232862, 0.18769216213676929, 0.18576464099590312, 0.18429705373593083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2497726353513694, 0.22572166901053875, 0.2081035730977734, 0.19126833194232862, 0.18769216213676929, 0.18576464099590312, 0.18429705373593083, 0.1821225399857965] ***
*** starting iteration: 8; err: [Inf, 0.2497726353513694, 0.22572166901053875, 0.2081035730977734, 0.19126833194232862, 0.18769216213676929, 0.18576464099590312, 0.18429705373593083, 0.1821225399857965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2497726353513694, 0.22572166901053875, 0.2081035730977734, 0.19126833194232862, 0.18769216213676929, 0.18576464099590312, 0.18429705373593083, 0.1821225399857965, 0.18125891123899723] ***
*** finished computation of 7 references, err: [Inf, 0.2497726353513694, 0.22572166901053875, 0.2081035730977734, 0.19126833194232862, 0.18769216213676929, 0.18576464099590312, 0.18429705373593083, 0.1821225399857965, 0.18125891123899723] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [56, 49, 0]]
** centroid: 1, normalized-entropy: 0.9967916319816367, [(1, 56), (2, 49)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [77, 39, 0]]
** centroid: 2, normalized-entropy: 0.9211426316005454, [(1, 77), (2, 39)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [95, 4, 0]]
** centroid: 3, normalized-entropy: 0.24414164238829597, [(1, 95), (2, 4)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 83, 29]]
** centroid: 4, normalized-entropy: 0.8251252643746189, [(2, 83), (3, 29)]
*** center 5: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 68, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3853136725365758] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3853136725365758, 0.3064841125440132] ***
*** starting iteration: 2; err: [Inf, 0.3853136725365758, 0.3064841125440132] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3853136725365758, 0.3064841125440132, 0.3023144192210547] ***
*** starting iteration: 3; err: [Inf, 0.3853136725365758, 0.3064841125440132, 0.3023144192210547] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3853136725365758, 0.3064841125440132, 0.3023144192210547, 0.30207589215371067] ***
*** finished computation of 3 references, err: [Inf, 0.3853136725365758, 0.3064841125440132, 0.3023144192210547, 0.30207589215371067] ***
*** center 1: selecting labels [1] (freq >= 2) [from [216, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [71, 153, 25]]
** centroid: 2, normalized-entropy: 0.8081264785568921, [(1, 71), (2, 153), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [135, 66, 0]]
** centroid: 3, normalized-entropy: 0.9132401614300725, [(1, 135), (2, 66)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4051847312825619] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4051847312825619, 0.3328037946533853] ***
*** starting iteration: 2; err: [Inf, 0.4051847312825619, 0.3328037946533853] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4051847312825619, 0.3328037946533853, 0.3309030856586702] ***
*** starting iteration: 3; err: [Inf, 0.4051847312825619, 0.3328037946533853, 0.3309030856586702] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4051847312825619, 0.3328037946533853, 0.3309030856586702, 0.32939325876511644] ***
*** starting iteration: 4; err: [Inf, 0.4051847312825619, 0.3328037946533853, 0.3309030856586702, 0.32939325876511644] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4051847312825619, 0.3328037946533853, 0.3309030856586702, 0.32939325876511644, 0.32741841286940243] ***
*** starting iteration: 5; err: [Inf, 0.4051847312825619, 0.3328037946533853, 0.3309030856586702, 0.32939325876511644, 0.32741841286940243] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4051847312825619, 0.3328037946533853, 0.3309030856586702, 0.32939325876511644, 0.32741841286940243, 0.32550598247565965] ***
*** starting iteration: 6; err: [Inf, 0.4051847312825619, 0.3328037946533853, 0.3309030856586702, 0.32939325876511644, 0.32741841286940243, 0.32550598247565965] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4051847312825619, 0.3328037946533853, 0.3309030856586702, 0.32939325876511644, 0.32741841286940243, 0.32550598247565965, 0.322854741382925] ***
*** starting iteration: 7; err: [Inf, 0.4051847312825619, 0.3328037946533853, 0.3309030856586702, 0.32939325876511644, 0.32741841286940243, 0.32550598247565965, 0.322854741382925] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4051847312825619, 0.3328037946533853, 0.3309030856586702, 0.32939325876511644, 0.32741841286940243, 0.32550598247565965, 0.322854741382925, 0.31540840536892145] ***
*** starting iteration: 8; err: [Inf, 0.4051847312825619, 0.3328037946533853, 0.3309030856586702, 0.32939325876511644, 0.32741841286940243, 0.32550598247565965, 0.322854741382925, 0.31540840536892145] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4051847312825619, 0.3328037946533853, 0.3309030856586702, 0.32939325876511644, 0.32741841286940243, 0.32550598247565965, 0.322854741382925, 0.31540840536892145, 0.3021555036540957] ***
*** starting iteration: 9; err: [Inf, 0.4051847312825619, 0.3328037946533853, 0.3309030856586702, 0.32939325876511644, 0.32741841286940243, 0.32550598247565965, 0.322854741382925, 0.31540840536892145, 0.3021555036540957] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4051847312825619, 0.3328037946533853, 0.3309030856586702, 0.32939325876511644, 0.32741841286940243, 0.32550598247565965, 0.322854741382925, 0.31540840536892145, 0.3021555036540957, 0.30221271127842175] ***
*** finished computation of 3 references, err: [Inf, 0.4051847312825619, 0.3328037946533853, 0.3309030856586702, 0.32939325876511644, 0.32741841286940243, 0.32550598247565965, 0.322854741382925, 0.31540840536892145, 0.3021555036540957, 0.30221271127842175] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [169, 50, 0]]
** centroid: 1, normalized-entropy: 0.7750544832521991, [(1, 169), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [236, 15, 0]]
** centroid: 2, normalized-entropy: 0.32649527274151985, [(1, 236), (2, 15)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [2, 165, 30]]
** centroid: 3, normalized-entropy: 0.4384299638205956, [(1, 2), (2, 165), (3, 30)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38842522828927684] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38842522828927684, 0.34549710300584874] ***
*** starting iteration: 2; err: [Inf, 0.38842522828927684, 0.34549710300584874] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38842522828927684, 0.34549710300584874, 0.33116314828820315] ***
*** starting iteration: 3; err: [Inf, 0.38842522828927684, 0.34549710300584874, 0.33116314828820315] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38842522828927684, 0.34549710300584874, 0.33116314828820315, 0.30960027611433255] ***
*** starting iteration: 4; err: [Inf, 0.38842522828927684, 0.34549710300584874, 0.33116314828820315, 0.30960027611433255] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38842522828927684, 0.34549710300584874, 0.33116314828820315, 0.30960027611433255, 0.30769865129651247] ***
*** starting iteration: 5; err: [Inf, 0.38842522828927684, 0.34549710300584874, 0.33116314828820315, 0.30960027611433255, 0.30769865129651247] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38842522828927684, 0.34549710300584874, 0.33116314828820315, 0.30960027611433255, 0.30769865129651247, 0.3067420814102558] ***
*** finished computation of 3 references, err: [Inf, 0.38842522828927684, 0.34549710300584874, 0.33116314828820315, 0.30960027611433255, 0.30769865129651247, 0.3067420814102558] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [150, 36, 0]]
** centroid: 1, normalized-entropy: 0.708835673332196, [(1, 150), (2, 36)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 168, 29]]
** centroid: 2, normalized-entropy: 0.6028093022709381, [(2, 168), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [245, 39, 0]]
** centroid: 3, normalized-entropy: 0.5771873251692683, [(1, 245), (2, 39)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25572646275028454] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25572646275028454, 0.24205210022404566] ***
*** starting iteration: 2; err: [Inf, 0.25572646275028454, 0.24205210022404566] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25572646275028454, 0.24205210022404566, 0.24184042476984607] ***
*** finished computation of 3 references, err: [Inf, 0.25572646275028454, 0.24205210022404566, 0.24184042476984607] ***
*** center 1: selecting labels [1] (freq >= 2) [from [230, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [159, 52, 0]]
** centroid: 2, normalized-entropy: 0.8055956094012642, [(1, 159), (2, 52)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [33, 167, 25]]
** centroid: 3, normalized-entropy: 0.679891978901429, [(1, 33), (2, 167), (3, 25)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3422514775759545] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3422514775759545, 0.2723576037123844] ***
*** starting iteration: 2; err: [Inf, 0.3422514775759545, 0.2723576037123844] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3422514775759545, 0.2723576037123844, 0.2417795352017817] ***
*** starting iteration: 3; err: [Inf, 0.3422514775759545, 0.2723576037123844, 0.2417795352017817] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3422514775759545, 0.2723576037123844, 0.2417795352017817, 0.23774621683288774] ***
*** starting iteration: 4; err: [Inf, 0.3422514775759545, 0.2723576037123844, 0.2417795352017817, 0.23774621683288774] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3422514775759545, 0.2723576037123844, 0.2417795352017817, 0.23774621683288774, 0.2373207075810381] ***
*** finished computation of 3 references, err: [Inf, 0.3422514775759545, 0.2723576037123844, 0.2417795352017817, 0.23774621683288774, 0.2373207075810381] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 153, 30]]
** centroid: 1, normalized-entropy: 0.6436394131461666, [(2, 153), (3, 30)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [260, 19, 0]]
** centroid: 2, normalized-entropy: 0.3587942360484481, [(1, 260), (2, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [147, 58, 0]]
** centroid: 3, normalized-entropy: 0.8594082340988861, [(1, 147), (2, 58)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27069575383503836] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27069575383503836, 0.24060872637469885] ***
*** starting iteration: 2; err: [Inf, 0.27069575383503836, 0.24060872637469885] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27069575383503836, 0.24060872637469885, 0.23931750936665455] ***
*** starting iteration: 3; err: [Inf, 0.27069575383503836, 0.24060872637469885, 0.23931750936665455] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27069575383503836, 0.24060872637469885, 0.23931750936665455, 0.23908811108931072] ***
*** finished computation of 3 references, err: [Inf, 0.27069575383503836, 0.24060872637469885, 0.23931750936665455, 0.23908811108931072] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [100, 165, 29]]
** centroid: 1, normalized-entropy: 0.8369335462350267, [(1, 100), (2, 165), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [102, 78, 0]]
** centroid: 2, normalized-entropy: 0.9871377743721862, [(1, 102), (2, 78)]
*** center 3: selecting labels [1] (freq >= 2) [from [193, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.342443273075529] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.342443273075529, 0.3101664002140139] ***
*** finished computation of 3 references, err: [Inf, 0.342443273075529, 0.3101664002140139] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [145, 110, 0]]
** centroid: 1, normalized-entropy: 0.9863676072907089, [(1, 145), (2, 110)]
*** center 2: selecting labels [1] (freq >= 2) [from [150, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [127, 109, 25]]
** centroid: 3, normalized-entropy: 0.8554827625273806, [(1, 127), (2, 109), (3, 25)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39481332563869154] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39481332563869154, 0.31429636757122703] ***
*** finished computation of 3 references, err: [Inf, 0.39481332563869154, 0.31429636757122703] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [237, 15, 0]]
** centroid: 1, normalized-entropy: 0.3255517134879513, [(1, 237), (2, 15)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [50, 126, 29]]
** centroid: 2, normalized-entropy: 0.8373881018309671, [(1, 50), (2, 126), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [120, 89, 1]]
** centroid: 3, normalized-entropy: 0.9840713482099183, [(1, 120), (2, 89)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3454746060503432] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3454746060503432, 0.3026250473641116] ***
*** finished computation of 3 references, err: [Inf, 0.3454746060503432, 0.3026250473641116] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [115, 175, 29]]
** centroid: 1, normalized-entropy: 0.8330248101236866, [(1, 115), (2, 175), (3, 29)]
*** center 2: selecting labels [1] (freq >= 2) [from [181, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [99, 68, 0]]
** centroid: 3, normalized-entropy: 0.9749990314386964, [(1, 99), (2, 68)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2969913734738399] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2969913734738399, 0.17103656164339712] ***
*** starting iteration: 2; err: [Inf, 0.2969913734738399, 0.17103656164339712] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2969913734738399, 0.17103656164339712, 0.1555013099640563] ***
*** starting iteration: 3; err: [Inf, 0.2969913734738399, 0.17103656164339712, 0.1555013099640563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2969913734738399, 0.17103656164339712, 0.1555013099640563, 0.1524784243483846] ***
*** starting iteration: 4; err: [Inf, 0.2969913734738399, 0.17103656164339712, 0.1555013099640563, 0.1524784243483846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2969913734738399, 0.17103656164339712, 0.1555013099640563, 0.1524784243483846, 0.15170787678130934] ***
*** finished computation of 7 references, err: [Inf, 0.2969913734738399, 0.17103656164339712, 0.1555013099640563, 0.1524784243483846, 0.15170787678130934] ***
*** center 1: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [15, 68, 0]]
** centroid: 2, normalized-entropy: 0.6816559115981193, [(1, 15), (2, 68)]
*** center 3: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [3, 89, 0]]
** centroid: 4, normalized-entropy: 0.20731018585948177, [(1, 3), (2, 89)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [100, 2, 0]]
** centroid: 5, normalized-entropy: 0.13923299905509884, [(1, 100), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [122, 14, 0]]
** centroid: 6, normalized-entropy: 0.4782501641071144, [(1, 122), (2, 14)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 46, 25]]
** centroid: 7, normalized-entropy: 0.935940714955517, [(2, 46), (3, 25)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21133989742866297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21133989742866297, 0.15858332411737935] ***
*** starting iteration: 2; err: [Inf, 0.21133989742866297, 0.15858332411737935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21133989742866297, 0.15858332411737935, 0.1484577778316308] ***
*** starting iteration: 3; err: [Inf, 0.21133989742866297, 0.15858332411737935, 0.1484577778316308] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21133989742866297, 0.15858332411737935, 0.1484577778316308, 0.1460466459993904] ***
*** starting iteration: 4; err: [Inf, 0.21133989742866297, 0.15858332411737935, 0.1484577778316308, 0.1460466459993904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21133989742866297, 0.15858332411737935, 0.1484577778316308, 0.1460466459993904, 0.14524459639337958] ***
*** finished computation of 7 references, err: [Inf, 0.21133989742866297, 0.15858332411737935, 0.1484577778316308, 0.1460466459993904, 0.14524459639337958] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [43, 47, 0]]
** centroid: 1, normalized-entropy: 0.9985746465403509, [(1, 43), (2, 47)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [74, 43, 0]]
** centroid: 2, normalized-entropy: 0.9487499032694516, [(1, 74), (2, 43)]
*** center 3: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [9, 60, 0]]
** centroid: 4, normalized-entropy: 0.5586293734521991, [(1, 9), (2, 60)]
*** center 5: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 80, 30]]
** centroid: 7, normalized-entropy: 0.8453509366224364, [(2, 80), (3, 30)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2062842085565869] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2062842085565869, 0.15563390929478108] ***
*** starting iteration: 2; err: [Inf, 0.2062842085565869, 0.15563390929478108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2062842085565869, 0.15563390929478108, 0.15056422858804777] ***
*** starting iteration: 3; err: [Inf, 0.2062842085565869, 0.15563390929478108, 0.15056422858804777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2062842085565869, 0.15563390929478108, 0.15056422858804777, 0.1485283189415485] ***
*** starting iteration: 4; err: [Inf, 0.2062842085565869, 0.15563390929478108, 0.15056422858804777, 0.1485283189415485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2062842085565869, 0.15563390929478108, 0.15056422858804777, 0.1485283189415485, 0.14743446789380313] ***
*** starting iteration: 5; err: [Inf, 0.2062842085565869, 0.15563390929478108, 0.15056422858804777, 0.1485283189415485, 0.14743446789380313] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2062842085565869, 0.15563390929478108, 0.15056422858804777, 0.1485283189415485, 0.14743446789380313, 0.147036401114414] ***
*** finished computation of 7 references, err: [Inf, 0.2062842085565869, 0.15563390929478108, 0.15056422858804777, 0.1485283189415485, 0.14743446789380313, 0.147036401114414] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 109, 29]]
** centroid: 1, normalized-entropy: 0.741759672289875, [(2, 109), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [44, 55, 0]]
** centroid: 2, normalized-entropy: 0.9910760598382222, [(1, 44), (2, 55)]
*** center 3: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [92, 39, 0]]
** centroid: 4, normalized-entropy: 0.8784734863246803, [(1, 92), (2, 39)]
*** center 5: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [83, 40, 0]]
** centroid: 7, normalized-entropy: 0.9099503053612785, [(1, 83), (2, 40)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18908624501544227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18908624501544227, 0.14974930360173244] ***
*** starting iteration: 2; err: [Inf, 0.18908624501544227, 0.14974930360173244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18908624501544227, 0.14974930360173244, 0.14554647800150974] ***
*** starting iteration: 3; err: [Inf, 0.18908624501544227, 0.14974930360173244, 0.14554647800150974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18908624501544227, 0.14974930360173244, 0.14554647800150974, 0.14460346499120055] ***
*** finished computation of 7 references, err: [Inf, 0.18908624501544227, 0.14974930360173244, 0.14554647800150974, 0.14460346499120055] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [80, 44, 0]]
** centroid: 1, normalized-entropy: 0.9383153522334071, [(1, 80), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 28, 0]]
** centroid: 2, normalized-entropy: 0.8786744932173094, [(1, 66), (2, 28)]
*** center 3: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 87, 30]]
** centroid: 4, normalized-entropy: 0.8212809417449864, [(2, 87), (3, 30)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [25, 71, 0]]
** centroid: 5, normalized-entropy: 0.8273744775003173, [(1, 25), (2, 71)]
*** center 6: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19608317211066476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19608317211066476, 0.15038151157575882] ***
*** starting iteration: 2; err: [Inf, 0.19608317211066476, 0.15038151157575882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19608317211066476, 0.15038151157575882, 0.14655477718193213] ***
*** starting iteration: 3; err: [Inf, 0.19608317211066476, 0.15038151157575882, 0.14655477718193213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19608317211066476, 0.15038151157575882, 0.14655477718193213, 0.14579604162012172] ***
*** finished computation of 7 references, err: [Inf, 0.19608317211066476, 0.15038151157575882, 0.14655477718193213, 0.14579604162012172] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [72, 41, 0]]
** centroid: 1, normalized-entropy: 0.9450087651303387, [(1, 72), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 41, 0]]
** centroid: 2, normalized-entropy: 0.9826808027585991, [(1, 56), (2, 41)]
*** center 3: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 106, 29]]
** centroid: 4, normalized-entropy: 0.7505858411812107, [(2, 106), (3, 29)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [46, 55, 0]]
** centroid: 5, normalized-entropy: 0.9942646092619051, [(1, 46), (2, 55)]
*** center 6: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.40132766027792216] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40132766027792216, 0.25953006026315484] ***
*** starting iteration: 2; err: [Inf, 0.40132766027792216, 0.25953006026315484] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40132766027792216, 0.25953006026315484, 0.2412964010320313] ***
*** starting iteration: 3; err: [Inf, 0.40132766027792216, 0.25953006026315484, 0.2412964010320313] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40132766027792216, 0.25953006026315484, 0.2412964010320313, 0.23691853696435644] ***
*** finished computation of 3 references, err: [Inf, 0.40132766027792216, 0.25953006026315484, 0.2412964010320313, 0.23691853696435644] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [157, 48, 0]]
** centroid: 1, normalized-entropy: 0.7851695745756854, [(1, 157), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [265, 22, 0]]
** centroid: 2, normalized-entropy: 0.39028197470906983, [(1, 265), (2, 22)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 149, 25]]
** centroid: 3, normalized-entropy: 0.5937911148531525, [(2, 149), (3, 25)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36306967477927143] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36306967477927143, 0.2539937626961423] ***
*** starting iteration: 2; err: [Inf, 0.36306967477927143, 0.2539937626961423] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36306967477927143, 0.2539937626961423, 0.24384626673570817] ***
*** starting iteration: 3; err: [Inf, 0.36306967477927143, 0.2539937626961423, 0.24384626673570817] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36306967477927143, 0.2539937626961423, 0.24384626673570817, 0.24192824298334398] ***
*** finished computation of 3 references, err: [Inf, 0.36306967477927143, 0.2539937626961423, 0.24384626673570817, 0.24192824298334398] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [255, 6, 0]]
** centroid: 1, normalized-entropy: 0.15790637433488164, [(1, 255), (2, 6)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [30, 141, 30]]
** centroid: 2, normalized-entropy: 0.7432139472028503, [(1, 30), (2, 141), (3, 30)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [122, 83, 0]]
** centroid: 3, normalized-entropy: 0.9737326459226808, [(1, 122), (2, 83)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2635123120268983] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2635123120268983, 0.24078348658370158] ***
*** starting iteration: 2; err: [Inf, 0.2635123120268983, 0.24078348658370158] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2635123120268983, 0.24078348658370158, 0.2387142765043915] ***
*** starting iteration: 3; err: [Inf, 0.2635123120268983, 0.24078348658370158, 0.2387142765043915] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2635123120268983, 0.24078348658370158, 0.2387142765043915, 0.23883337358423304] ***
*** finished computation of 3 references, err: [Inf, 0.2635123120268983, 0.24078348658370158, 0.2387142765043915, 0.23883337358423304] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [94, 170, 29]]
** centroid: 1, normalized-entropy: 0.8278627367336814, [(1, 94), (2, 170), (3, 29)]
*** center 2: selecting labels [1] (freq >= 1) [from [197, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [104, 73, 0]]
** centroid: 3, normalized-entropy: 0.9777585247444954, [(1, 104), (2, 73)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18745133373886347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18745133373886347, 0.14521013823961532] ***
*** starting iteration: 2; err: [Inf, 0.18745133373886347, 0.14521013823961532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18745133373886347, 0.14521013823961532, 0.1429343552107702] ***
*** starting iteration: 3; err: [Inf, 0.18745133373886347, 0.14521013823961532, 0.1429343552107702] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18745133373886347, 0.14521013823961532, 0.1429343552107702, 0.14254901527256533] ***
*** finished computation of 7 references, err: [Inf, 0.18745133373886347, 0.14521013823961532, 0.1429343552107702, 0.14254901527256533] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [96, 10, 0]]
** centroid: 1, normalized-entropy: 0.4507913883546652, [(1, 96), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [112, 28, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 112), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 68, 25]]
** centroid: 3, normalized-entropy: 0.8397622740178036, [(2, 68), (3, 25)]
*** center 4: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [47, 52, 0]]
** centroid: 5, normalized-entropy: 0.9981592324817737, [(1, 47), (2, 52)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 61, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20937051550894306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20937051550894306, 0.14660342742034096] ***
*** starting iteration: 2; err: [Inf, 0.20937051550894306, 0.14660342742034096] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20937051550894306, 0.14660342742034096, 0.1428967367137211] ***
*** starting iteration: 3; err: [Inf, 0.20937051550894306, 0.14660342742034096, 0.1428967367137211] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20937051550894306, 0.14660342742034096, 0.1428967367137211, 0.14265292108259994] ***
*** finished computation of 7 references, err: [Inf, 0.20937051550894306, 0.14660342742034096, 0.1428967367137211, 0.14265292108259994] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [106, 9, 0]]
** centroid: 1, normalized-entropy: 0.39602141445150646, [(1, 106), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [76, 42, 0]]
** centroid: 2, normalized-entropy: 0.9392547207311595, [(1, 76), (2, 42)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 75, 30]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(2, 75), (3, 30)]
*** center 4: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [53, 46, 0]]
** centroid: 5, normalized-entropy: 0.9963906193677697, [(1, 53), (2, 46)]
*** center 6: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 58, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1928627133883279] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1928627133883279, 0.1503922297002125] ***
*** starting iteration: 2; err: [Inf, 0.1928627133883279, 0.1503922297002125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1928627133883279, 0.1503922297002125, 0.14755513346328147] ***
*** starting iteration: 3; err: [Inf, 0.1928627133883279, 0.1503922297002125, 0.14755513346328147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1928627133883279, 0.1503922297002125, 0.14755513346328147, 0.14657813258402083] ***
*** finished computation of 7 references, err: [Inf, 0.1928627133883279, 0.1503922297002125, 0.14755513346328147, 0.14657813258402083] ***
*** center 1: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 75, 29]]
** centroid: 2, normalized-entropy: 0.8538738465459897, [(2, 75), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [79, 16, 0]]
** centroid: 3, normalized-entropy: 0.6540800387941991, [(1, 79), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [95, 40, 0]]
** centroid: 4, normalized-entropy: 0.876716288999464, [(1, 95), (2, 40)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [48, 46, 0]]
** centroid: 5, normalized-entropy: 0.9996734260048917, [(1, 48), (2, 46)]
*** center 6: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 66, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24958265585371772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24958265585371772, 0.20209639104972552] ***
*** starting iteration: 2; err: [Inf, 0.24958265585371772, 0.20209639104972552] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24958265585371772, 0.20209639104972552, 0.19110217018964681] ***
*** starting iteration: 3; err: [Inf, 0.24958265585371772, 0.20209639104972552, 0.19110217018964681] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24958265585371772, 0.20209639104972552, 0.19110217018964681, 0.18850989780646074] ***
*** finished computation of 7 references, err: [Inf, 0.24958265585371772, 0.20209639104972552, 0.19110217018964681, 0.18850989780646074] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [116, 28, 0]]
** centroid: 1, normalized-entropy: 0.710676853856123, [(1, 116), (2, 28)]
*** center 2: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [1, 80, 0]]
** centroid: 3, normalized-entropy: 0.09597040299587173, [(1, 1), (2, 80)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [42, 51, 0]]
** centroid: 4, normalized-entropy: 0.9932338197397066, [(1, 42), (2, 51)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 43, 25]]
** centroid: 5, normalized-entropy: 0.9488482942421287, [(2, 43), (3, 25)]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [79, 17, 0]]
** centroid: 7, normalized-entropy: 0.673654715229001, [(1, 79), (2, 17)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.249893420392639] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.249893420392639, 0.21860348886490494] ***
*** starting iteration: 2; err: [Inf, 0.249893420392639, 0.21860348886490494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.249893420392639, 0.21860348886490494, 0.20553779318884038] ***
*** starting iteration: 3; err: [Inf, 0.249893420392639, 0.21860348886490494, 0.20553779318884038] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.249893420392639, 0.21860348886490494, 0.20553779318884038, 0.19998504806901962] ***
*** finished computation of 7 references, err: [Inf, 0.249893420392639, 0.21860348886490494, 0.20553779318884038, 0.19998504806901962] ***
*** center 1: selecting labels [1] (freq >= 1) [from [125, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 15, 30]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 15), (3, 30)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 71, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [107, 38, 0]]
** centroid: 4, normalized-entropy: 0.8298524482509417, [(1, 107), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [73, 33, 0]]
** centroid: 5, normalized-entropy: 0.8946921645908384, [(1, 73), (2, 33)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 54, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [102, 19, 0]]
** centroid: 7, normalized-entropy: 0.6271441658983906, [(1, 102), (2, 19)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2919341436583085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2919341436583085, 0.23162872566683762] ***
*** starting iteration: 2; err: [Inf, 0.2919341436583085, 0.23162872566683762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2919341436583085, 0.23162872566683762, 0.20162262525716643] ***
*** starting iteration: 3; err: [Inf, 0.2919341436583085, 0.23162872566683762, 0.20162262525716643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2919341436583085, 0.23162872566683762, 0.20162262525716643, 0.19304231080649675] ***
*** finished computation of 7 references, err: [Inf, 0.2919341436583085, 0.23162872566683762, 0.20162262525716643, 0.19304231080649675] ***
*** center 1: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [52, 42, 0]]
** centroid: 2, normalized-entropy: 0.9918207974218425, [(1, 52), (2, 42)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [81, 54, 0]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(1, 81), (2, 54)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [86, 35, 0]]
** centroid: 4, normalized-entropy: 0.8677584893617495, [(1, 86), (2, 35)]
*** center 5: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 112, 29]]
** centroid: 6, normalized-entropy: 0.7331314933267987, [(2, 112), (3, 29)]
*** center 7: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19235451365667242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19235451365667242, 0.1522070770557444] ***
*** starting iteration: 2; err: [Inf, 0.19235451365667242, 0.1522070770557444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19235451365667242, 0.1522070770557444, 0.14795302512549288] ***
*** starting iteration: 3; err: [Inf, 0.19235451365667242, 0.1522070770557444, 0.14795302512549288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19235451365667242, 0.1522070770557444, 0.14795302512549288, 0.1464130630487347] ***
*** finished computation of 7 references, err: [Inf, 0.19235451365667242, 0.1522070770557444, 0.14795302512549288, 0.1464130630487347] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 66, 23]]
** centroid: 1, normalized-entropy: 0.8243633538094403, [(2, 66), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [113, 20, 0]]
** centroid: 3, normalized-entropy: 0.6107802952706374, [(1, 113), (2, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [65, 25, 0]]
** centroid: 5, normalized-entropy: 0.8524051786494784, [(1, 65), (2, 25)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 83, 2]]
** centroid: 6, normalized-entropy: 0.16082302082246946, [(2, 83), (3, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [62, 25, 0]]
** centroid: 7, normalized-entropy: 0.8652817028791377, [(1, 62), (2, 25)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9410248571925219, 0.9390018761276248, 0.9149898401395408, 0.908009806213399, 0.9000257742772712, 0.8970197742652832, 0.8920297543052035, 0.8710147273021525, 0.8620177063290836, 0.8570007132881384, 0.841026655397913, 0.7439894984805164]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9410248571925219
finished with 13
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.3711749140083834] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3711749140083834, 0.3085479334644649] ***
*** finished computation of 3 references, err: [Inf, 0.3711749140083834, 0.3085479334644649] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [290, 48, 0]]
** centroid: 1, normalized-entropy: 0.5894834713740588, [(1, 290), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [117, 47, 0]]
** centroid: 2, normalized-entropy: 0.8642693935198684, [(1, 117), (2, 47)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 135, 30]]
** centroid: 3, normalized-entropy: 0.6840384356390419, [(2, 135), (3, 30)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3735582052466126] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3735582052466126, 0.310496431271332] ***
*** finished computation of 3 references, err: [Inf, 0.3735582052466126, 0.310496431271332] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [271, 51, 0]]
** centroid: 1, normalized-entropy: 0.6304321493958421, [(1, 271), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [124, 44, 0]]
** centroid: 2, normalized-entropy: 0.8296071030882032, [(1, 124), (2, 44)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 148, 29]]
** centroid: 3, normalized-entropy: 0.6434216688864769, [(2, 148), (3, 29)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36595956359181675] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36595956359181675, 0.3068969601096848] ***
*** finished computation of 3 references, err: [Inf, 0.36595956359181675, 0.3068969601096848] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [142, 162, 25]]
** centroid: 1, normalized-entropy: 0.8258914684927913, [(1, 142), (2, 162), (3, 25)]
*** center 2: selecting labels [1] (freq >= 1) [from [152, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [128, 57, 0]]
** centroid: 3, normalized-entropy: 0.8909775102060944, [(1, 128), (2, 57)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 13)
[0.9410248571925219, 0.9390018761276248, 0.9149898401395408, 0.908009806213399, 0.9000257742772712, 0.8970197742652832, 0.8920297543052035, 0.8710147273021525, 0.8620177063290836, 0.8610137083190975, 0.8570007132881384, 0.841026655397913, 0.7439894984805164]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9410248571925219
finished with 13
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9410248571925219, 0.9390018761276248, 0.9149898401395408, 0.908009806213399, 0.9000257742772712, 0.8970197742652832, 0.8920297543052035, 0.8710147273021525, 0.8620177063290836, 0.8610137083190975, 0.8570007132881384, 0.841026655397913, 0.7439894984805164]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9410248571925219
finished with 14
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.3314609829101829] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3314609829101829, 0.2383371443537272] ***
*** finished computation of 3 references, err: [Inf, 0.3314609829101829, 0.2383371443537272] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [284, 26, 0]]
** centroid: 1, normalized-entropy: 0.41567403556134064, [(1, 284), (2, 26)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 148, 30]]
** centroid: 2, normalized-entropy: 0.6543524423071835, [(2, 148), (3, 30)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [123, 56, 0]]
** centroid: 3, normalized-entropy: 0.896434996303629, [(1, 123), (2, 56)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3148890960419821] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3148890960419821, 0.25085230648162954] ***
*** finished computation of 3 references, err: [Inf, 0.3148890960419821, 0.25085230648162954] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [137, 197, 29]]
** centroid: 1, normalized-entropy: 0.820439308341059, [(1, 137), (2, 197), (3, 29)]
*** center 2: selecting labels [1] (freq >= 1) [from [158, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [100, 46, 0]]
** centroid: 3, normalized-entropy: 0.8989377852081333, [(1, 100), (2, 46)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3131480951578141] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3131480951578141, 0.24840387981315074] ***
*** finished computation of 3 references, err: [Inf, 0.3131480951578141, 0.24840387981315074] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [150, 174, 25]]
** centroid: 1, normalized-entropy: 0.8181128166032221, [(1, 150), (2, 174), (3, 25)]
*** center 2: selecting labels [1] (freq >= 1) [from [152, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [120, 45, 0]]
** centroid: 3, normalized-entropy: 0.8453509366224364, [(1, 120), (2, 45)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 14)
[0.9410248571925219, 0.9390018761276248, 0.9149898401395408, 0.908009806213399, 0.9000257742772712, 0.8970197742652832, 0.8920297543052035, 0.8710147273021525, 0.8620177063290836, 0.8610137083190975, 0.8599797402192612, 0.8570007132881384, 0.841026655397913, 0.7439894984805164]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9410248571925219
finished with 14
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9410248571925219, 0.9390018761276248, 0.9149898401395408, 0.908009806213399, 0.9000257742772712, 0.8970197742652832, 0.8920297543052035, 0.8710147273021525, 0.8620177063290836, 0.8610137083190975, 0.8599797402192612, 0.8570007132881384, 0.841026655397913, 0.7439894984805164]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9410248571925219
finished with 16
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.35855530003418046] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35855530003418046, 0.23958127510299657] ***
*** starting iteration: 2; err: [Inf, 0.35855530003418046, 0.23958127510299657] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35855530003418046, 0.23958127510299657, 0.23812750466112076] ***
*** starting iteration: 3; err: [Inf, 0.35855530003418046, 0.23958127510299657, 0.23812750466112076] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35855530003418046, 0.23958127510299657, 0.23812750466112076, 0.23784638493499163] ***
*** finished computation of 3 references, err: [Inf, 0.35855530003418046, 0.23958127510299657, 0.23812750466112076, 0.23784638493499163] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [271, 17, 0]]
** centroid: 1, normalized-entropy: 0.3235734094001077, [(1, 271), (2, 17)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 156, 30]]
** centroid: 2, normalized-entropy: 0.6373874992221911, [(2, 156), (3, 30)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [136, 57, 0]]
** centroid: 3, normalized-entropy: 0.8755157045352492, [(1, 136), (2, 57)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3518604575565596] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3518604575565596, 0.24219801946022343] ***
*** starting iteration: 2; err: [Inf, 0.3518604575565596, 0.24219801946022343] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3518604575565596, 0.24219801946022343, 0.24187160748569506] ***
*** finished computation of 3 references, err: [Inf, 0.3518604575565596, 0.24219801946022343, 0.24187160748569506] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [264, 33, 0]]
** centroid: 1, normalized-entropy: 0.5032583347756457, [(1, 264), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [131, 48, 0]]
** centroid: 2, normalized-entropy: 0.8388067647725163, [(1, 131), (2, 48)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 162, 29]]
** centroid: 3, normalized-entropy: 0.6144071038158072, [(2, 162), (3, 29)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3855092206231511] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3855092206231511, 0.3027628665501895] ***
*** starting iteration: 2; err: [Inf, 0.3855092206231511, 0.3027628665501895] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3855092206231511, 0.3027628665501895, 0.2980720938414799] ***
*** starting iteration: 3; err: [Inf, 0.3855092206231511, 0.3027628665501895, 0.2980720938414799] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3855092206231511, 0.3027628665501895, 0.2980720938414799, 0.29760236823483854] ***
*** finished computation of 3 references, err: [Inf, 0.3855092206231511, 0.3027628665501895, 0.2980720938414799, 0.29760236823483854] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [260, 20, 0]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(1, 260), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [162, 44, 0]]
** centroid: 2, normalized-entropy: 0.7482932859824888, [(1, 162), (2, 44)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 155, 25]]
** centroid: 3, normalized-entropy: 0.581321498763703, [(2, 155), (3, 25)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.44437510354899573] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44437510354899573, 0.2999183911707314] ***
*** starting iteration: 2; err: [Inf, 0.44437510354899573, 0.2999183911707314] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44437510354899573, 0.2999183911707314, 0.29909305565612115] ***
*** finished computation of 3 references, err: [Inf, 0.44437510354899573, 0.2999183911707314, 0.29909305565612115] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [248, 23, 0]]
** centroid: 1, normalized-entropy: 0.4191135802274645, [(1, 248), (2, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [159, 53, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 159), (2, 53)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 154, 30]]
** centroid: 3, normalized-entropy: 0.6415410585827175, [(2, 154), (3, 30)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4007613463599564] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4007613463599564, 0.30659588645847663] ***
*** starting iteration: 2; err: [Inf, 0.4007613463599564, 0.30659588645847663] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4007613463599564, 0.30659588645847663, 0.3045920600773937] ***
*** starting iteration: 3; err: [Inf, 0.4007613463599564, 0.30659588645847663, 0.3045920600773937] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4007613463599564, 0.30659588645847663, 0.3045920600773937, 0.30401329958121637] ***
*** finished computation of 3 references, err: [Inf, 0.4007613463599564, 0.30659588645847663, 0.3045920600773937, 0.30401329958121637] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [99, 162, 29]]
** centroid: 1, normalized-entropy: 0.8396373594498576, [(1, 99), (2, 162), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [112, 81, 0]]
** centroid: 2, normalized-entropy: 0.9813088429462864, [(1, 112), (2, 81)]
*** center 3: selecting labels [1] (freq >= 2) [from [184, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3779470849860538] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3779470849860538, 0.2396752362044433] ***
*** starting iteration: 2; err: [Inf, 0.3779470849860538, 0.2396752362044433] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3779470849860538, 0.2396752362044433, 0.2392775817038687] ***
*** finished computation of 3 references, err: [Inf, 0.3779470849860538, 0.2396752362044433, 0.2392775817038687] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [120, 142, 24]]
** centroid: 1, normalized-entropy: 0.8374007209385236, [(1, 120), (2, 142), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [123, 77, 1]]
** centroid: 2, normalized-entropy: 0.9614969508235551, [(1, 123), (2, 77)]
*** center 3: selecting labels [1] (freq >= 2) [from [179, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 16)
[0.9410248571925219, 0.9390018761276248, 0.9149898401395408, 0.908009806213399, 0.9000257742772712, 0.8980177782572992, 0.8970197742652832, 0.8920297543052035, 0.8760257263251275, 0.8710147273021525, 0.8620177063290836, 0.8610137083190975, 0.8599797402192612, 0.8570007132881384, 0.841026655397913, 0.7439894984805164]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9410248571925219
finished with 17
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.33643693832384125] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33643693832384125, 0.24272211908164235] ***
*** starting iteration: 2; err: [Inf, 0.33643693832384125, 0.24272211908164235] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33643693832384125, 0.24272211908164235, 0.23938740870297268] ***
*** starting iteration: 3; err: [Inf, 0.33643693832384125, 0.24272211908164235, 0.23938740870297268] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33643693832384125, 0.24272211908164235, 0.23938740870297268, 0.23916554115796546] ***
*** finished computation of 3 references, err: [Inf, 0.33643693832384125, 0.24272211908164235, 0.23938740870297268, 0.23916554115796546] ***
*** center 1: selecting labels [1] (freq >= 2) [from [180, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [138, 75, 0]]
** centroid: 2, normalized-entropy: 0.935940714955517, [(1, 138), (2, 75)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [104, 144, 25]]
** centroid: 3, normalized-entropy: 0.8410348245590463, [(1, 104), (2, 144), (3, 25)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31679383594706106] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31679383594706106, 0.24796130136213917] ***
*** starting iteration: 2; err: [Inf, 0.31679383594706106, 0.24796130136213917] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31679383594706106, 0.24796130136213917, 0.23899136925454081] ***
*** starting iteration: 3; err: [Inf, 0.31679383594706106, 0.24796130136213917, 0.23899136925454081] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31679383594706106, 0.24796130136213917, 0.23899136925454081, 0.23695772498108816] ***
*** starting iteration: 4; err: [Inf, 0.31679383594706106, 0.24796130136213917, 0.23899136925454081, 0.23695772498108816] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31679383594706106, 0.24796130136213917, 0.23899136925454081, 0.23695772498108816, 0.23647633997508433] ***
*** finished computation of 3 references, err: [Inf, 0.31679383594706106, 0.24796130136213917, 0.23899136925454081, 0.23695772498108816, 0.23647633997508433] ***
*** center 1: selecting labels [1] (freq >= 2) [from [200, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [121, 76, 0]]
** centroid: 2, normalized-entropy: 0.9620267294465366, [(1, 121), (2, 76)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [86, 154, 30]]
** centroid: 3, normalized-entropy: 0.8454215606794289, [(1, 86), (2, 154), (3, 30)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30219716517425055] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30219716517425055, 0.25974007317240627] ***
*** starting iteration: 2; err: [Inf, 0.30219716517425055, 0.25974007317240627] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30219716517425055, 0.25974007317240627, 0.24597552853791432] ***
*** starting iteration: 3; err: [Inf, 0.30219716517425055, 0.25974007317240627, 0.24597552853791432] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30219716517425055, 0.25974007317240627, 0.24597552853791432, 0.2429563006221399] ***
*** starting iteration: 4; err: [Inf, 0.30219716517425055, 0.25974007317240627, 0.24597552853791432, 0.2429563006221399] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30219716517425055, 0.25974007317240627, 0.24597552853791432, 0.2429563006221399, 0.24171140475542113] ***
*** starting iteration: 5; err: [Inf, 0.30219716517425055, 0.25974007317240627, 0.24597552853791432, 0.2429563006221399, 0.24171140475542113] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30219716517425055, 0.25974007317240627, 0.24597552853791432, 0.2429563006221399, 0.24171140475542113, 0.24070281162578752] ***
*** starting iteration: 6; err: [Inf, 0.30219716517425055, 0.25974007317240627, 0.24597552853791432, 0.2429563006221399, 0.24171140475542113, 0.24070281162578752] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30219716517425055, 0.25974007317240627, 0.24597552853791432, 0.2429563006221399, 0.24171140475542113, 0.24070281162578752, 0.24023339329943663] ***
*** finished computation of 3 references, err: [Inf, 0.30219716517425055, 0.25974007317240627, 0.24597552853791432, 0.2429563006221399, 0.24171140475542113, 0.24070281162578752, 0.24023339329943663] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [139, 53, 0]]
** centroid: 1, normalized-entropy: 0.8500010778023173, [(1, 139), (2, 53)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [255, 11, 0]]
** centroid: 2, normalized-entropy: 0.24846335954623086, [(1, 255), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 179, 29]]
** centroid: 3, normalized-entropy: 0.5827259056939698, [(2, 179), (3, 29)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 17)
[0.9410248571925219, 0.9390018761276248, 0.9149898401395408, 0.908009806213399, 0.9000257742772712, 0.8980177782572992, 0.8970197742652832, 0.8920297543052035, 0.8760257263251275, 0.8710147273021525, 0.8620177063290836, 0.8610137083190975, 0.8599797402192612, 0.8570007132881384, 0.841026655397913, 0.826023628418838, 0.7439894984805164]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9410248571925219
finished with 19
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.4128955154256641] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4128955154256641, 0.2997976325276396] ***
*** starting iteration: 2; err: [Inf, 0.4128955154256641, 0.2997976325276396] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4128955154256641, 0.2997976325276396, 0.2982201197280966] ***
*** starting iteration: 3; err: [Inf, 0.4128955154256641, 0.2997976325276396, 0.2982201197280966] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4128955154256641, 0.2997976325276396, 0.2982201197280966, 0.29794850369085973] ***
*** finished computation of 3 references, err: [Inf, 0.4128955154256641, 0.2997976325276396, 0.2982201197280966, 0.29794850369085973] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [97, 160, 30]]
** centroid: 1, normalized-entropy: 0.845097493708223, [(1, 97), (2, 160), (3, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [189, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [121, 70, 0]]
** centroid: 3, normalized-entropy: 0.9479405406201803, [(1, 121), (2, 70)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38216580187359284] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38216580187359284, 0.31007158282624037] ***
*** starting iteration: 2; err: [Inf, 0.38216580187359284, 0.31007158282624037] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38216580187359284, 0.31007158282624037, 0.3047099438658146] ***
*** starting iteration: 3; err: [Inf, 0.38216580187359284, 0.31007158282624037, 0.3047099438658146] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38216580187359284, 0.31007158282624037, 0.3047099438658146, 0.3034588692167231] ***
*** finished computation of 3 references, err: [Inf, 0.38216580187359284, 0.31007158282624037, 0.3047099438658146, 0.3034588692167231] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [124, 145, 25]]
** centroid: 1, normalized-entropy: 0.8395230791676584, [(1, 124), (2, 145), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [122, 74, 0]]
** centroid: 2, normalized-entropy: 0.9562940061600327, [(1, 122), (2, 74)]
*** center 3: selecting labels [1] (freq >= 1) [from [176, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3886396212411159] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3886396212411159, 0.3162497875411231] ***
*** starting iteration: 2; err: [Inf, 0.3886396212411159, 0.3162497875411231] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3886396212411159, 0.3162497875411231, 0.3057736257200075] ***
*** starting iteration: 3; err: [Inf, 0.3886396212411159, 0.3162497875411231, 0.3057736257200075] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3886396212411159, 0.3162497875411231, 0.3057736257200075, 0.30501438358399285] ***
*** finished computation of 3 references, err: [Inf, 0.3886396212411159, 0.3162497875411231, 0.3057736257200075, 0.30501438358399285] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [263, 41, 0]]
** centroid: 1, normalized-entropy: 0.5706402556369506, [(1, 263), (2, 41)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 157, 29]]
** centroid: 2, normalized-entropy: 0.6244442603839183, [(2, 157), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [132, 45, 0]]
** centroid: 3, normalized-entropy: 0.8179252501386403, [(1, 132), (2, 45)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36496597589147434] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36496597589147434, 0.23899253139373017] ***
*** starting iteration: 2; err: [Inf, 0.36496597589147434, 0.23899253139373017] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36496597589147434, 0.23899253139373017, 0.23822381567523196] ***
*** finished computation of 3 references, err: [Inf, 0.36496597589147434, 0.23899253139373017, 0.23822381567523196] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [246, 33, 0]]
** centroid: 1, normalized-entropy: 0.5243952392403632, [(1, 246), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [176, 34, 0]]
** centroid: 2, normalized-entropy: 0.6388469391771899, [(1, 176), (2, 34)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 152, 25]]
** centroid: 3, normalized-entropy: 0.5874847207734318, [(2, 152), (3, 25)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3448965534654403] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3448965534654403, 0.24173382884436015] ***
*** starting iteration: 2; err: [Inf, 0.3448965534654403, 0.24173382884436015] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3448965534654403, 0.24173382884436015, 0.2400054031538999] ***
*** starting iteration: 3; err: [Inf, 0.3448965534654403, 0.24173382884436015, 0.2400054031538999] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3448965534654403, 0.24173382884436015, 0.2400054031538999, 0.23978387811284016] ***
*** finished computation of 3 references, err: [Inf, 0.3448965534654403, 0.24173382884436015, 0.2400054031538999, 0.23978387811284016] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [102, 139, 30]]
** centroid: 1, normalized-entropy: 0.868251252593276, [(1, 102), (2, 139), (3, 30)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [116, 91, 0]]
** centroid: 2, normalized-entropy: 0.989452620818747, [(1, 116), (2, 91)]
*** center 3: selecting labels [1] (freq >= 1) [from [189, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33519307075618493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33519307075618493, 0.24309932068828075] ***
*** starting iteration: 2; err: [Inf, 0.33519307075618493, 0.24309932068828075] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33519307075618493, 0.24309932068828075, 0.24216571117358945] ***
*** finished computation of 3 references, err: [Inf, 0.33519307075618493, 0.24309932068828075, 0.24216571117358945] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [86, 175, 29]]
** centroid: 1, normalized-entropy: 0.8151426917804665, [(1, 86), (2, 175), (3, 29)]
*** center 2: selecting labels [1] (freq >= 1) [from [196, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [113, 68, 0]]
** centroid: 3, normalized-entropy: 0.9549414895255298, [(1, 113), (2, 68)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 19)
[0.9410248571925219, 0.9390018761276248, 0.9149898401395408, 0.908009806213399, 0.9000257742772712, 0.8980177782572992, 0.8970197742652832, 0.8920297543052035, 0.8760257263251275, 0.8710147273021525, 0.8620177063290836, 0.8610137083190975, 0.8599797402192612, 0.8570007132881384, 0.841026655397913, 0.826023628418838, 0.810010609411807, 0.796994599389809, 0.7439894984805164]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9410248571925219
finished with 20
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.23800885794904905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23800885794904905, 0.1881983656760143] ***
*** starting iteration: 2; err: [Inf, 0.23800885794904905, 0.1881983656760143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23800885794904905, 0.1881983656760143, 0.18294253644241631] ***
*** starting iteration: 3; err: [Inf, 0.23800885794904905, 0.1881983656760143, 0.18294253644241631] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23800885794904905, 0.1881983656760143, 0.18294253644241631, 0.18222894751769805] ***
*** finished computation of 7 references, err: [Inf, 0.23800885794904905, 0.1881983656760143, 0.18294253644241631, 0.18222894751769805] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [66, 39, 0]]
** centroid: 1, normalized-entropy: 0.9517626756348312, [(1, 66), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [79, 3, 0]]
** centroid: 2, normalized-entropy: 0.22641094842107634, [(1, 79), (2, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 73, 30]]
** centroid: 4, normalized-entropy: 0.8703460546929581, [(2, 73), (3, 30)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [66, 33, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 66), (2, 33)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [100, 5, 0]]
** centroid: 6, normalized-entropy: 0.2761954276479391, [(1, 100), (2, 5)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23657665619285437] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23657665619285437, 0.1937759626746267] ***
*** starting iteration: 2; err: [Inf, 0.23657665619285437, 0.1937759626746267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23657665619285437, 0.1937759626746267, 0.1900216026606413] ***
*** starting iteration: 3; err: [Inf, 0.23657665619285437, 0.1937759626746267, 0.1900216026606413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23657665619285437, 0.1937759626746267, 0.1900216026606413, 0.18972799903643248] ***
*** finished computation of 7 references, err: [Inf, 0.23657665619285437, 0.1937759626746267, 0.1900216026606413, 0.18972799903643248] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [55, 39, 0]]
** centroid: 1, normalized-entropy: 0.978998737002276, [(1, 55), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [85, 18, 0]]
** centroid: 2, normalized-entropy: 0.6684725699243225, [(1, 85), (2, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 80, 25]]
** centroid: 4, normalized-entropy: 0.7918583525674836, [(2, 80), (3, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [85, 8, 0]]
** centroid: 5, normalized-entropy: 0.42304881571335795, [(1, 85), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [15, 74, 0]]
** centroid: 6, normalized-entropy: 0.6543524423071835, [(1, 15), (2, 74)]
*** center 7: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21703132804248598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21703132804248598, 0.1893826053893917] ***
*** starting iteration: 2; err: [Inf, 0.21703132804248598, 0.1893826053893917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21703132804248598, 0.1893826053893917, 0.1835398336556898] ***
*** starting iteration: 3; err: [Inf, 0.21703132804248598, 0.1893826053893917, 0.1835398336556898] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21703132804248598, 0.1893826053893917, 0.1835398336556898, 0.18186235083811644] ***
*** finished computation of 7 references, err: [Inf, 0.21703132804248598, 0.1893826053893917, 0.1835398336556898, 0.18186235083811644] ***
*** center 1: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 79, 29]]
** centroid: 2, normalized-entropy: 0.8393307617496655, [(2, 79), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [90, 3, 0]]
** centroid: 3, normalized-entropy: 0.2055925081850832, [(1, 90), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [89, 39, 0]]
** centroid: 4, normalized-entropy: 0.8869456102215851, [(1, 89), (2, 39)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [45, 60, 0]]
** centroid: 5, normalized-entropy: 0.9852281360342514, [(1, 45), (2, 60)]
*** center 6: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
finished with 10 centroids; started with 7
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.18724779114266857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18724779114266857, 0.1508271274524741] ***
*** starting iteration: 2; err: [Inf, 0.18724779114266857, 0.1508271274524741] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18724779114266857, 0.1508271274524741, 0.14736684720544144] ***
*** starting iteration: 3; err: [Inf, 0.18724779114266857, 0.1508271274524741, 0.14736684720544144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18724779114266857, 0.1508271274524741, 0.14736684720544144, 0.1461897487733513] ***
*** finished computation of 7 references, err: [Inf, 0.18724779114266857, 0.1508271274524741, 0.14736684720544144, 0.1461897487733513] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [128, 63, 0]]
** centroid: 1, normalized-entropy: 0.9147658166195459, [(1, 128), (2, 63)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [131, 18, 0]]
** centroid: 2, normalized-entropy: 0.5316714518221105, [(1, 131), (2, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [132, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 94, 2]]
** centroid: 4, normalized-entropy: 0.14609425012013613, [(2, 94), (3, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [110, 40, 0]]
** centroid: 5, normalized-entropy: 0.8366407419411671, [(1, 110), (2, 40)]
*** center 6: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 131, 40]]
** centroid: 7, normalized-entropy: 0.7847791991145502, [(2, 131), (3, 40)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2054675368750468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2054675368750468, 0.14341905370447786] ***
*** starting iteration: 2; err: [Inf, 0.2054675368750468, 0.14341905370447786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2054675368750468, 0.14341905370447786, 0.1403003761228174] ***
*** starting iteration: 3; err: [Inf, 0.2054675368750468, 0.14341905370447786, 0.1403003761228174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2054675368750468, 0.14341905370447786, 0.1403003761228174, 0.13984859091509133] ***
*** finished computation of 7 references, err: [Inf, 0.2054675368750468, 0.14341905370447786, 0.1403003761228174, 0.13984859091509133] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [28, 44, 0]]
** centroid: 1, normalized-entropy: 0.9640787648082293, [(1, 28), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [87, 2, 0]]
** centroid: 2, normalized-entropy: 0.1551032721030341, [(1, 87), (2, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 49, 22]]
** centroid: 4, normalized-entropy: 0.893010810044601, [(2, 49), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [57, 27, 0]]
** centroid: 5, normalized-entropy: 0.9059282160429994, [(1, 57), (2, 27)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 44, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18613282440183684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18613282440183684, 0.15515491845458745] ***
*** starting iteration: 2; err: [Inf, 0.18613282440183684, 0.15515491845458745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18613282440183684, 0.15515491845458745, 0.15090470681339502] ***
*** starting iteration: 3; err: [Inf, 0.18613282440183684, 0.15515491845458745, 0.15090470681339502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18613282440183684, 0.15515491845458745, 0.15090470681339502, 0.14925373535044492] ***
*** finished computation of 7 references, err: [Inf, 0.18613282440183684, 0.15515491845458745, 0.15090470681339502, 0.14925373535044492] ***
*** center 1: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [46, 20, 0]]
** centroid: 2, normalized-entropy: 0.8849636363831529, [(1, 46), (2, 20)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 41, 24]]
** centroid: 3, normalized-entropy: 0.9500796252338518, [(2, 41), (3, 24)]
*** center 4: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 49, 0]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(1, 28), (2, 49)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [15, 54, 0]]
** centroid: 6, normalized-entropy: 0.7553754125614286, [(1, 15), (2, 54)]
*** center 7: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2046559658907354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2046559658907354, 0.15453349396632984] ***
*** starting iteration: 2; err: [Inf, 0.2046559658907354, 0.15453349396632984] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2046559658907354, 0.15453349396632984, 0.14862043980509043] ***
*** starting iteration: 3; err: [Inf, 0.2046559658907354, 0.15453349396632984, 0.14862043980509043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2046559658907354, 0.15453349396632984, 0.14862043980509043, 0.14692429681681096] ***
*** finished computation of 7 references, err: [Inf, 0.2046559658907354, 0.15453349396632984, 0.14862043980509043, 0.14692429681681096] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 58, 12]]
** centroid: 1, normalized-entropy: 0.6609623351442084, [(2, 58), (3, 12)]
*** center 2: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [85, 17, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 85), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [48, 20, 0]]
** centroid: 4, normalized-entropy: 0.8739810481273581, [(1, 48), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [44, 21, 0]]
** centroid: 5, normalized-entropy: 0.9076961653608385, [(1, 44), (2, 21)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 64, 5]]
** centroid: 6, normalized-entropy: 0.3750514064240124, [(2, 64), (3, 5)]
*** center 7: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20141681430488825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20141681430488825, 0.15141493892529978] ***
*** starting iteration: 2; err: [Inf, 0.20141681430488825, 0.15141493892529978] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20141681430488825, 0.15141493892529978, 0.1472847051275894] ***
*** starting iteration: 3; err: [Inf, 0.20141681430488825, 0.15141493892529978, 0.1472847051275894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20141681430488825, 0.15141493892529978, 0.1472847051275894, 0.14673277305159718] ***
*** finished computation of 7 references, err: [Inf, 0.20141681430488825, 0.15141493892529978, 0.1472847051275894, 0.14673277305159718] ***
*** center 1: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 74, 17]]
** centroid: 2, normalized-entropy: 0.6947570868163001, [(2, 74), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [62, 17, 0]]
** centroid: 3, normalized-entropy: 0.751286576718343, [(1, 62), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [51, 34, 0]]
** centroid: 4, normalized-entropy: 0.9709505944546688, [(1, 51), (2, 34)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [18, 59, 0]]
** centroid: 5, normalized-entropy: 0.7845191388986644, [(1, 18), (2, 59)]
*** center 6: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19030240239948035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19030240239948035, 0.15603011484071613] ***
*** starting iteration: 2; err: [Inf, 0.19030240239948035, 0.15603011484071613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19030240239948035, 0.15603011484071613, 0.15061069705616684] ***
*** starting iteration: 3; err: [Inf, 0.19030240239948035, 0.15603011484071613, 0.15061069705616684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19030240239948035, 0.15603011484071613, 0.15061069705616684, 0.1486399601912126] ***
*** finished computation of 7 references, err: [Inf, 0.19030240239948035, 0.15603011484071613, 0.15061069705616684, 0.1486399601912126] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 69, 20]]
** centroid: 1, normalized-entropy: 0.7686913027030167, [(2, 69), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [72, 8, 0]]
** centroid: 3, normalized-entropy: 0.46899559358928133, [(1, 72), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [41, 19, 0]]
** centroid: 4, normalized-entropy: 0.9007196798623592, [(1, 41), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [53, 14, 0]]
** centroid: 5, normalized-entropy: 0.7394809367166378, [(1, 53), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [63, 7, 0]]
** centroid: 6, normalized-entropy: 0.46899559358928133, [(1, 63), (2, 7)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 65, 0]]
** centroid: 7, normalized-entropy: 0.19364280468389852, [(1, 2), (2, 65)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19026163348183037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19026163348183037, 0.15168555666133762] ***
*** starting iteration: 2; err: [Inf, 0.19026163348183037, 0.15168555666133762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19026163348183037, 0.15168555666133762, 0.14570593539997936] ***
*** starting iteration: 3; err: [Inf, 0.19026163348183037, 0.15168555666133762, 0.14570593539997936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19026163348183037, 0.15168555666133762, 0.14570593539997936, 0.1432371858227998] ***
*** finished computation of 7 references, err: [Inf, 0.19026163348183037, 0.15168555666133762, 0.14570593539997936, 0.1432371858227998] ***
*** center 1: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 48, 16]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 48), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [84, 20, 0]]
** centroid: 3, normalized-entropy: 0.7062740891876008, [(1, 84), (2, 20)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [4, 52, 0]]
** centroid: 4, normalized-entropy: 0.3712323266408756, [(1, 4), (2, 52)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [29, 46, 0]]
** centroid: 5, normalized-entropy: 0.9626147059982517, [(1, 29), (2, 46)]
*** center 6: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [67, 1, 0]]
** centroid: 7, normalized-entropy: 0.11058084476988722, [(1, 67), (2, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20189931975770742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20189931975770742, 0.14275712412595748] ***
*** starting iteration: 2; err: [Inf, 0.20189931975770742, 0.14275712412595748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20189931975770742, 0.14275712412595748, 0.139911654593423] ***
*** starting iteration: 3; err: [Inf, 0.20189931975770742, 0.14275712412595748, 0.139911654593423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20189931975770742, 0.14275712412595748, 0.139911654593423, 0.13963665558584035] ***
*** finished computation of 7 references, err: [Inf, 0.20189931975770742, 0.14275712412595748, 0.139911654593423, 0.13963665558584035] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [47, 40, 0]]
** centroid: 1, normalized-entropy: 0.9953251070631713, [(1, 47), (2, 40)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 59, 23]]
** centroid: 2, normalized-entropy: 0.8561146277685725, [(2, 59), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [65, 29, 0]]
** centroid: 3, normalized-entropy: 0.8914467590654126, [(1, 65), (2, 29)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [71, 7, 0]]
** centroid: 4, normalized-entropy: 0.4356133734874324, [(1, 71), (2, 7)]
*** center 5: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 44, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19259323511458934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19259323511458934, 0.14846090829465539] ***
*** starting iteration: 2; err: [Inf, 0.19259323511458934, 0.14846090829465539] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19259323511458934, 0.14846090829465539, 0.1437014460992068] ***
*** starting iteration: 3; err: [Inf, 0.19259323511458934, 0.14846090829465539, 0.1437014460992068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19259323511458934, 0.14846090829465539, 0.1437014460992068, 0.14235680553503335] ***
*** finished computation of 7 references, err: [Inf, 0.19259323511458934, 0.14846090829465539, 0.1437014460992068, 0.14235680553503335] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [1, 52, 0]]
** centroid: 1, normalized-entropy: 0.13503620280212753, [(1, 1), (2, 52)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [68, 17, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 68), (2, 17)]
*** center 3: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 72, 17]]
** centroid: 5, normalized-entropy: 0.7035821005719904, [(2, 72), (3, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [47, 34, 0]]
** centroid: 6, normalized-entropy: 0.9813387358307915, [(1, 47), (2, 34)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [59, 2, 0]]
** centroid: 7, normalized-entropy: 0.20818094555717087, [(1, 59), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19353332561068237] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19353332561068237, 0.1496274771047756] ***
*** starting iteration: 2; err: [Inf, 0.19353332561068237, 0.1496274771047756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19353332561068237, 0.1496274771047756, 0.14642322171665728] ***
*** starting iteration: 3; err: [Inf, 0.19353332561068237, 0.1496274771047756, 0.14642322171665728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19353332561068237, 0.1496274771047756, 0.14642322171665728, 0.1457065139748156] ***
*** finished computation of 7 references, err: [Inf, 0.19353332561068237, 0.1496274771047756, 0.14642322171665728, 0.1457065139748156] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [86, 8, 0]]
** centroid: 1, normalized-entropy: 0.4199210973757179, [(1, 86), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [81, 11, 0]]
** centroid: 2, normalized-entropy: 0.5281098034628294, [(1, 81), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 28, 20]]
** centroid: 3, normalized-entropy: 0.9798687566511527, [(2, 28), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [47, 19, 0]]
** centroid: 5, normalized-entropy: 0.8659653498997099, [(1, 47), (2, 19)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 51, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 49, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18281058641709388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18281058641709388, 0.1493509428827092] ***
*** starting iteration: 2; err: [Inf, 0.18281058641709388, 0.1493509428827092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18281058641709388, 0.1493509428827092, 0.14651091558486223] ***
*** starting iteration: 3; err: [Inf, 0.18281058641709388, 0.1493509428827092, 0.14651091558486223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18281058641709388, 0.1493509428827092, 0.14651091558486223, 0.14580205987207592] ***
*** finished computation of 7 references, err: [Inf, 0.18281058641709388, 0.1493509428827092, 0.14651091558486223, 0.14580205987207592] ***
*** center 1: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 47, 25]]
** centroid: 2, normalized-entropy: 0.9315627684809641, [(2, 47), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [68, 18, 0]]
** centroid: 3, normalized-entropy: 0.7401470427139037, [(1, 68), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [3, 37, 0]]
** centroid: 4, normalized-entropy: 0.3843115441264972, [(1, 3), (2, 37)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 59, 0]]
** centroid: 5, normalized-entropy: 0.9063701886077911, [(1, 28), (2, 59)]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1992337845657021] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1992337845657021, 0.15057495817262678] ***
*** starting iteration: 2; err: [Inf, 0.1992337845657021, 0.15057495817262678] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1992337845657021, 0.15057495817262678, 0.14709796615503729] ***
*** starting iteration: 3; err: [Inf, 0.1992337845657021, 0.15057495817262678, 0.14709796615503729] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1992337845657021, 0.15057495817262678, 0.14709796615503729, 0.14663867349550128] ***
*** finished computation of 7 references, err: [Inf, 0.1992337845657021, 0.15057495817262678, 0.14709796615503729, 0.14663867349550128] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [59, 12, 0]]
** centroid: 1, normalized-entropy: 0.6554444445609846, [(1, 59), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [74, 27, 0]]
** centroid: 2, normalized-entropy: 0.837602456861142, [(1, 74), (2, 27)]
*** center 3: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 46, 21]]
** centroid: 4, normalized-entropy: 0.8970964164730478, [(2, 46), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [45, 23, 0]]
** centroid: 5, normalized-entropy: 0.9231199835423002, [(1, 45), (2, 23)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 59, 0]]
** centroid: 6, normalized-entropy: 0.12229159706937456, [(1, 1), (2, 59)]
*** center 7: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20282511456869542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20282511456869542, 0.14695200981013476] ***
*** starting iteration: 2; err: [Inf, 0.20282511456869542, 0.14695200981013476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20282511456869542, 0.14695200981013476, 0.14407971915975212] ***
*** starting iteration: 3; err: [Inf, 0.20282511456869542, 0.14695200981013476, 0.14407971915975212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20282511456869542, 0.14695200981013476, 0.14407971915975212, 0.14342058622930198] ***
*** finished computation of 7 references, err: [Inf, 0.20282511456869542, 0.14695200981013476, 0.14407971915975212, 0.14342058622930198] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [43, 28, 0]]
** centroid: 1, normalized-entropy: 0.9675594819018211, [(1, 43), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [47, 3, 0]]
** centroid: 2, normalized-entropy: 0.3274449191544762, [(1, 47), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 64, 19]]
** centroid: 3, normalized-entropy: 0.776116265618875, [(2, 64), (3, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [70, 22, 0]]
** centroid: 5, normalized-entropy: 0.7935912300117066, [(1, 70), (2, 22)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 59, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18818216001987456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18818216001987456, 0.15049342527985574] ***
*** starting iteration: 2; err: [Inf, 0.18818216001987456, 0.15049342527985574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18818216001987456, 0.15049342527985574, 0.14494315135851502] ***
*** starting iteration: 3; err: [Inf, 0.18818216001987456, 0.15049342527985574, 0.14494315135851502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18818216001987456, 0.15049342527985574, 0.14494315135851502, 0.14392999242059887] ***
*** finished computation of 7 references, err: [Inf, 0.18818216001987456, 0.15049342527985574, 0.14494315135851502, 0.14392999242059887] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [2, 73, 0]]
** centroid: 1, normalized-entropy: 0.1773894531859976, [(1, 2), (2, 73)]
*** center 2: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 24, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 48), (2, 24)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [69, 36, 0]]
** centroid: 4, normalized-entropy: 0.927526588431676, [(1, 69), (2, 36)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 1, 0]]
** centroid: 5, normalized-entropy: 0.1274185117923586, [(1, 56), (2, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [60, 3, 0]]
** centroid: 6, normalized-entropy: 0.2761954276479391, [(1, 60), (2, 3)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 42, 17]]
** centroid: 7, normalized-entropy: 0.8663006754980497, [(2, 42), (3, 17)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1940314931180328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1940314931180328, 0.14293681262340396] ***
*** starting iteration: 2; err: [Inf, 0.1940314931180328, 0.14293681262340396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1940314931180328, 0.14293681262340396, 0.14056690091779456] ***
*** starting iteration: 3; err: [Inf, 0.1940314931180328, 0.14293681262340396, 0.14056690091779456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1940314931180328, 0.14293681262340396, 0.14056690091779456, 0.1401108400383964] ***
*** finished computation of 7 references, err: [Inf, 0.1940314931180328, 0.14293681262340396, 0.14056690091779456, 0.1401108400383964] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [55, 33, 0]]
** centroid: 1, normalized-entropy: 0.954434002924965, [(1, 55), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [74, 1, 0]]
** centroid: 2, normalized-entropy: 0.10215803640865054, [(1, 74), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 66, 15]]
** centroid: 4, normalized-entropy: 0.6912898694057888, [(2, 66), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [40, 32, 0]]
** centroid: 5, normalized-entropy: 0.9910760598382222, [(1, 40), (2, 32)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 52, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19152738289162516] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19152738289162516, 0.15015402299072594] ***
*** starting iteration: 2; err: [Inf, 0.19152738289162516, 0.15015402299072594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19152738289162516, 0.15015402299072594, 0.14447746528685093] ***
*** starting iteration: 3; err: [Inf, 0.19152738289162516, 0.15015402299072594, 0.14447746528685093] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19152738289162516, 0.15015402299072594, 0.14447746528685093, 0.14248649180680514] ***
*** finished computation of 7 references, err: [Inf, 0.19152738289162516, 0.15015402299072594, 0.14447746528685093, 0.14248649180680514] ***
*** center 1: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 64, 19]]
** centroid: 2, normalized-entropy: 0.776116265618875, [(2, 64), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [58, 1, 0]]
** centroid: 3, normalized-entropy: 0.12394986771100755, [(1, 58), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [75, 30, 0]]
** centroid: 4, normalized-entropy: 0.8631205685666311, [(1, 75), (2, 30)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [39, 38, 0]]
** centroid: 5, normalized-entropy: 0.9998783322990061, [(1, 39), (2, 38)]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 43, 0]]
** centroid: 7, normalized-entropy: 0.1564910629057016, [(1, 1), (2, 43)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20277624435536562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20277624435536562, 0.14364808328170328] ***
*** starting iteration: 2; err: [Inf, 0.20277624435536562, 0.14364808328170328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20277624435536562, 0.14364808328170328, 0.14069339323416352] ***
*** starting iteration: 3; err: [Inf, 0.20277624435536562, 0.14364808328170328, 0.14069339323416352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20277624435536562, 0.14364808328170328, 0.14069339323416352, 0.14021538767125458] ***
*** finished computation of 7 references, err: [Inf, 0.20277624435536562, 0.14364808328170328, 0.14069339323416352, 0.14021538767125458] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [55, 3, 0]]
** centroid: 1, normalized-entropy: 0.29367630985136944, [(1, 55), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [68, 32, 0]]
** centroid: 2, normalized-entropy: 0.9043814577244941, [(1, 68), (2, 32)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 54, 21]]
** centroid: 3, normalized-entropy: 0.8554508105601307, [(2, 54), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [32, 34, 0]]
** centroid: 5, normalized-entropy: 0.9993375041688846, [(1, 32), (2, 34)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 46, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1787602992411703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1787602992411703, 0.14199199417233468] ***
*** starting iteration: 2; err: [Inf, 0.1787602992411703, 0.14199199417233468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1787602992411703, 0.14199199417233468, 0.140054793109186] ***
*** starting iteration: 3; err: [Inf, 0.1787602992411703, 0.14199199417233468, 0.140054793109186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1787602992411703, 0.14199199417233468, 0.140054793109186, 0.13971429998055102] ***
*** finished computation of 7 references, err: [Inf, 0.1787602992411703, 0.14199199417233468, 0.140054793109186, 0.13971429998055102] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [78, 5, 0]]
** centroid: 1, normalized-entropy: 0.32840071392894665, [(1, 78), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [80, 20, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 80), (2, 20)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 46, 20]]
** centroid: 3, normalized-entropy: 0.8849636363831529, [(2, 46), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 47, 0]]
** centroid: 5, normalized-entropy: 0.9531971725430559, [(1, 28), (2, 47)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 55, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19460034809261562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19460034809261562, 0.15016284228861332] ***
*** starting iteration: 2; err: [Inf, 0.19460034809261562, 0.15016284228861332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19460034809261562, 0.15016284228861332, 0.1475370729258284] ***
*** starting iteration: 3; err: [Inf, 0.19460034809261562, 0.15016284228861332, 0.1475370729258284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19460034809261562, 0.15016284228861332, 0.1475370729258284, 0.14723998915217817] ***
*** finished computation of 7 references, err: [Inf, 0.19460034809261562, 0.15016284228861332, 0.1475370729258284, 0.14723998915217817] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [74, 6, 0]]
** centroid: 1, normalized-entropy: 0.3843115441264972, [(1, 74), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 48, 24]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 48), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 14, 0]]
** centroid: 3, normalized-entropy: 0.6944460704939805, [(1, 61), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [71, 31, 0]]
** centroid: 4, normalized-entropy: 0.8860318997477157, [(1, 71), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [10, 66, 0]]
** centroid: 5, normalized-entropy: 0.5617526078313283, [(1, 10), (2, 66)]
*** center 6: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19196549381501973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19196549381501973, 0.14800899339001625] ***
*** starting iteration: 2; err: [Inf, 0.19196549381501973, 0.14800899339001625] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19196549381501973, 0.14800899339001625, 0.14560392171982675] ***
*** starting iteration: 3; err: [Inf, 0.19196549381501973, 0.14800899339001625, 0.14560392171982675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19196549381501973, 0.14800899339001625, 0.14560392171982675, 0.14519013573694975] ***
*** finished computation of 7 references, err: [Inf, 0.19196549381501973, 0.14800899339001625, 0.14560392171982675, 0.14519013573694975] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 60, 20]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 60), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 14, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 56), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [11, 52, 0]]
** centroid: 6, normalized-entropy: 0.6681273338436138, [(1, 11), (2, 52)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 49, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2051240198239684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2051240198239684, 0.14742557787336408] ***
*** starting iteration: 2; err: [Inf, 0.2051240198239684, 0.14742557787336408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2051240198239684, 0.14742557787336408, 0.14364707529824228] ***
*** starting iteration: 3; err: [Inf, 0.2051240198239684, 0.14742557787336408, 0.14364707529824228] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2051240198239684, 0.14742557787336408, 0.14364707529824228, 0.1431288084667176] ***
*** finished computation of 7 references, err: [Inf, 0.2051240198239684, 0.14742557787336408, 0.14364707529824228, 0.1431288084667176] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 79, 22]]
** centroid: 1, normalized-entropy: 0.756170148929897, [(2, 79), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [52, 22, 0]]
** centroid: 3, normalized-entropy: 0.8779620013943914, [(1, 52), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [52, 29, 0]]
** centroid: 4, normalized-entropy: 0.9410313090323237, [(1, 52), (2, 29)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [35, 36, 0]]
** centroid: 5, normalized-entropy: 0.9998568991526107, [(1, 35), (2, 36)]
*** center 6: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1993915710784495] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1993915710784495, 0.1511489206291735] ***
*** starting iteration: 2; err: [Inf, 0.1993915710784495, 0.1511489206291735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1993915710784495, 0.1511489206291735, 0.14664755006320773] ***
*** starting iteration: 3; err: [Inf, 0.1993915710784495, 0.1511489206291735, 0.14664755006320773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1993915710784495, 0.1511489206291735, 0.14664755006320773, 0.14548272491106765] ***
*** finished computation of 7 references, err: [Inf, 0.1993915710784495, 0.1511489206291735, 0.14664755006320773, 0.14548272491106765] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [16, 59, 0]]
** centroid: 1, normalized-entropy: 0.7478061583312324, [(1, 16), (2, 59)]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 25, 0]]
** centroid: 3, normalized-entropy: 0.8739810481273581, [(1, 60), (2, 25)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [42, 32, 0]]
** centroid: 4, normalized-entropy: 0.9867867202680318, [(1, 42), (2, 32)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 57, 21]]
** centroid: 5, normalized-entropy: 0.8403586716091169, [(2, 57), (3, 21)]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18395152934640646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18395152934640646, 0.1529439864642918] ***
*** starting iteration: 2; err: [Inf, 0.18395152934640646, 0.1529439864642918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18395152934640646, 0.1529439864642918, 0.14749960215575994] ***
*** starting iteration: 3; err: [Inf, 0.18395152934640646, 0.1529439864642918, 0.14749960215575994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18395152934640646, 0.1529439864642918, 0.14749960215575994, 0.14594273455440998] ***
*** finished computation of 7 references, err: [Inf, 0.18395152934640646, 0.1529439864642918, 0.14749960215575994, 0.14594273455440998] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 82, 17]]
** centroid: 1, normalized-entropy: 0.6616179061408356, [(2, 82), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 1, 0]]
** centroid: 3, normalized-entropy: 0.1274185117923586, [(1, 56), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [48, 24, 0]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(1, 48), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [69, 7, 0]]
** centroid: 5, normalized-entropy: 0.4434581453896789, [(1, 69), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [55, 17, 0]]
** centroid: 6, normalized-entropy: 0.7885131605379784, [(1, 55), (2, 17)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 50, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2041452474426478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2041452474426478, 0.14845324229821563] ***
*** starting iteration: 2; err: [Inf, 0.2041452474426478, 0.14845324229821563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2041452474426478, 0.14845324229821563, 0.14551885834801942] ***
*** starting iteration: 3; err: [Inf, 0.2041452474426478, 0.14845324229821563, 0.14551885834801942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2041452474426478, 0.14845324229821563, 0.14551885834801942, 0.1451604643687606] ***
*** finished computation of 7 references, err: [Inf, 0.2041452474426478, 0.14845324229821563, 0.14551885834801942, 0.1451604643687606] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [73, 3, 0]]
** centroid: 1, normalized-entropy: 0.23987382528036535, [(1, 73), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 38, 0]]
** centroid: 2, normalized-entropy: 0.9733854352299557, [(1, 56), (2, 38)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 53, 21]]
** centroid: 3, normalized-entropy: 0.8605553930586318, [(2, 53), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [41, 28, 0]]
** centroid: 5, normalized-entropy: 0.9742408334889756, [(1, 41), (2, 28)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 57, 0]]
** centroid: 6, normalized-entropy: 0.12565805017256745, [(1, 1), (2, 57)]
*** center 7: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1920058435574174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1920058435574174, 0.1532531541455537] ***
*** starting iteration: 2; err: [Inf, 0.1920058435574174, 0.1532531541455537] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1920058435574174, 0.1532531541455537, 0.14917370236478747] ***
*** starting iteration: 3; err: [Inf, 0.1920058435574174, 0.1532531541455537, 0.14917370236478747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1920058435574174, 0.1532531541455537, 0.14917370236478747, 0.14857190032396467] ***
*** finished computation of 7 references, err: [Inf, 0.1920058435574174, 0.1532531541455537, 0.14917370236478747, 0.14857190032396467] ***
*** center 1: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 52, 21]]
** centroid: 2, normalized-entropy: 0.8656939941993219, [(2, 52), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [51, 8, 0]]
** centroid: 3, normalized-entropy: 0.572580465623769, [(1, 51), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [79, 7, 0]]
** centroid: 4, normalized-entropy: 0.40707680632541937, [(1, 79), (2, 7)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [21, 53, 0]]
** centroid: 5, normalized-entropy: 0.8605553930586318, [(1, 21), (2, 53)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 49, 0]]
** centroid: 6, normalized-entropy: 0.3860189005698936, [(1, 4), (2, 49)]
*** center 7: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18006370503641664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18006370503641664, 0.14620014451164753] ***
*** starting iteration: 2; err: [Inf, 0.18006370503641664, 0.14620014451164753] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18006370503641664, 0.14620014451164753, 0.14252765662688763] ***
*** starting iteration: 3; err: [Inf, 0.18006370503641664, 0.14620014451164753, 0.14252765662688763] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18006370503641664, 0.14620014451164753, 0.14252765662688763, 0.14113001330941916] ***
*** finished computation of 7 references, err: [Inf, 0.18006370503641664, 0.14620014451164753, 0.14252765662688763, 0.14113001330941916] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [60, 36, 0]]
** centroid: 1, normalized-entropy: 0.954434002924965, [(1, 60), (2, 36)]
*** center 2: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 65, 26]]
** centroid: 4, normalized-entropy: 0.8631205685666311, [(2, 65), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [53, 31, 0]]
** centroid: 5, normalized-entropy: 0.9499380214234903, [(1, 53), (2, 31)]
*** center 6: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 52, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18476968478038908] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18476968478038908, 0.15137953798659146] ***
*** starting iteration: 2; err: [Inf, 0.18476968478038908, 0.15137953798659146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18476968478038908, 0.15137953798659146, 0.14814104109909385] ***
*** starting iteration: 3; err: [Inf, 0.18476968478038908, 0.15137953798659146, 0.14814104109909385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18476968478038908, 0.15137953798659146, 0.14814104109909385, 0.1472494191713631] ***
*** finished computation of 7 references, err: [Inf, 0.18476968478038908, 0.15137953798659146, 0.14814104109909385, 0.1472494191713631] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [63, 36, 0]]
** centroid: 1, normalized-entropy: 0.9456603046006401, [(1, 63), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 26, 0]]
** centroid: 2, normalized-entropy: 0.9011701959974223, [(1, 56), (2, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 66, 20]]
** centroid: 4, normalized-entropy: 0.7824441294066888, [(2, 66), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [25, 47, 0]]
** centroid: 5, normalized-entropy: 0.9315627684809641, [(1, 25), (2, 47)]
*** center 6: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19565077865123748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19565077865123748, 0.14592448167782276] ***
*** starting iteration: 2; err: [Inf, 0.19565077865123748, 0.14592448167782276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19565077865123748, 0.14592448167782276, 0.1430787426419556] ***
*** starting iteration: 3; err: [Inf, 0.19565077865123748, 0.14592448167782276, 0.1430787426419556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19565077865123748, 0.14592448167782276, 0.1430787426419556, 0.14156242352165282] ***
*** finished computation of 7 references, err: [Inf, 0.19565077865123748, 0.14592448167782276, 0.1430787426419556, 0.14156242352165282] ***
*** center 1: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 51, 21]]
** centroid: 2, normalized-entropy: 0.8708644692353648, [(2, 51), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 36, 0]]
** centroid: 3, normalized-entropy: 0.9515388458648668, [(1, 61), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [80, 5, 0]]
** centroid: 4, normalized-entropy: 0.32275695889739825, [(1, 80), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [41, 38, 0]]
** centroid: 5, normalized-entropy: 0.9989595114657399, [(1, 41), (2, 38)]
*** center 6: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 46, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1893499156795442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1893499156795442, 0.15262503433041275] ***
*** starting iteration: 2; err: [Inf, 0.1893499156795442, 0.15262503433041275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1893499156795442, 0.15262503433041275, 0.1471273212004453] ***
*** starting iteration: 3; err: [Inf, 0.1893499156795442, 0.15262503433041275, 0.1471273212004453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1893499156795442, 0.15262503433041275, 0.1471273212004453, 0.14636649260204285] ***
*** finished computation of 7 references, err: [Inf, 0.1893499156795442, 0.15262503433041275, 0.1471273212004453, 0.14636649260204285] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [60, 32, 0]]
** centroid: 1, normalized-entropy: 0.9321115676166747, [(1, 60), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [62, 14, 0]]
** centroid: 2, normalized-entropy: 0.6892019851173655, [(1, 62), (2, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 39, 19]]
** centroid: 4, normalized-entropy: 0.912441179764541, [(2, 39), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 16, 0]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(1, 56), (2, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 66, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1877701010555029] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1877701010555029, 0.14660438292846084] ***
*** starting iteration: 2; err: [Inf, 0.1877701010555029, 0.14660438292846084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1877701010555029, 0.14660438292846084, 0.14158898096904157] ***
*** starting iteration: 3; err: [Inf, 0.1877701010555029, 0.14660438292846084, 0.14158898096904157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1877701010555029, 0.14660438292846084, 0.14158898096904157, 0.14012459715455772] ***
*** finished computation of 7 references, err: [Inf, 0.1877701010555029, 0.14660438292846084, 0.14158898096904157, 0.14012459715455772] ***
*** center 1: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 65, 20]]
** centroid: 2, normalized-entropy: 0.787126586201269, [(2, 65), (3, 20)]
*** center 3: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [78, 27, 0]]
** centroid: 4, normalized-entropy: 0.8224042259549892, [(1, 78), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 39, 0]]
** centroid: 5, normalized-entropy: 0.9804679314541813, [(1, 28), (2, 39)]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 50, 0]]
** centroid: 7, normalized-entropy: 0.13923299905509884, [(1, 1), (2, 50)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1866583296470344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1866583296470344, 0.14361994001828135] ***
*** starting iteration: 2; err: [Inf, 0.1866583296470344, 0.14361994001828135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1866583296470344, 0.14361994001828135, 0.14057475658599286] ***
*** starting iteration: 3; err: [Inf, 0.1866583296470344, 0.14361994001828135, 0.14057475658599286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1866583296470344, 0.14361994001828135, 0.14057475658599286, 0.13976041106693446] ***
*** finished computation of 7 references, err: [Inf, 0.1866583296470344, 0.14361994001828135, 0.14057475658599286, 0.13976041106693446] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [62, 22, 0]]
** centroid: 1, normalized-entropy: 0.8296071030882032, [(1, 62), (2, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 65, 21]]
** centroid: 4, normalized-entropy: 0.8019325020834525, [(2, 65), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [46, 35, 0]]
** centroid: 5, normalized-entropy: 0.9866554896538049, [(1, 46), (2, 35)]
*** center 6: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 44, 0]]
** centroid: 7, normalized-entropy: 0.1537421803287618, [(1, 1), (2, 44)]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 346,3 => 42,1 => 612), Dict(2 => 380,3 => 39,1 => 581))
[ Info: ===== scores for single classifier: {"micro_f1":0.915,"precision":0.915,"recall":0.915,"macro_recall":0.9369704381435516,"macro_f1":0.8856215169556246,"accuracy":0.915,"class_f1":{"2":0.8868175765645805,"3":0.8297872340425533,"1":0.9402597402597402},"class_precision":{"2":0.8975741239892183,"3":0.7090909090909091,"1":0.945993031358885},"class_recall":{"2":0.8763157894736842,"3":1.0,"1":0.9345955249569707}}
[ Info: ===== scores for 1: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.9824183953860555,"macro_f1":0.9759100025613846,"accuracy":0.972,"class_f1":{"2":0.9640102827763496,"3":0.9873417721518987,"1":0.9763779527559056},"class_precision":{"2":0.9422110552763819,"3":0.975,"1":0.9928825622775801},"class_recall":{"2":0.9868421052631579,"3":1.0,"1":0.9604130808950087}}
[ Info: ===== scores for 5: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9838693118338013,"macro_f1":0.9735217383474625,"accuracy":0.974,"class_f1":{"2":0.9665809768637531,"3":0.975,"1":0.978984238178634},"class_precision":{"2":0.9447236180904522,"3":0.9512195121951219,"1":0.9964349376114082},"class_recall":{"2":0.9894736842105263,"3":1.0,"1":0.9621342512908778}}
[ Info: ===== scores for 7: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9832623727994685,"macro_f1":0.9697612984840905,"accuracy":0.974,"class_f1":{"2":0.9664082687338501,"3":0.962962962962963,"1":0.9799126637554585},"class_precision":{"2":0.949238578680203,"3":0.9285714285714286,"1":0.9946808510638298},"class_recall":{"2":0.9842105263157894,"3":1.0,"1":0.9655765920826161}}
[ Info: ===== scores for 9: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9800570703868104,"macro_f1":0.9596882904607548,"accuracy":0.97,"class_f1":{"2":0.961139896373057,"3":0.9397590361445783,"1":0.9781659388646288},"class_precision":{"2":0.9464285714285714,"3":0.8863636363636364,"1":0.9929078014184397},"class_recall":{"2":0.9763157894736842,"3":1.0,"1":0.963855421686747}}
[ Info: ===== scores for 11: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.9788764078871878,"macro_f1":0.9521308522728259,"accuracy":0.969,"class_f1":{"2":0.9596879063719115,"3":0.9176470588235294,"1":0.9790575916230367},"class_precision":{"2":0.9485861182519281,"3":0.8478260869565217,"1":0.9929203539823008},"class_recall":{"2":0.9710526315789474,"3":1.0,"1":0.9655765920826161}}
(score = 0.968, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.976,"k":3,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.976,"precision":0.976,"recall":0.976,"macro_recall":0.9672493714979447,"macro_f1":0.9629578225757748,"accuracy":0.976,"class_f1":{"2":0.968586387434555,"3":0.9367088607594937,"1":0.9835782195332757},"class_precision":{"2":0.9635416666666666,"3":0.925,"1":0.9878472222222222},"class_recall":{"2":0.9736842105263158,"3":0.9487179487179487,"1":0.9793459552495697}}
Test Summary: | Pass  Total
AKNC          |    8      8
[182, 1, 7, 1, 10, 3, 4, 19, 5, 3, 2, 3, 7, 10, 4, 2, 2, 1, 5, 2, 4, 13, 6, 9, 4, 6, 1, 3, 5, 5, 7, 3, 9, 2, 11, 1, 2, 36, 3, 8, 47, 2, 1, 10, 44, 3, 3, 3, 5, 6, 11, 7, 14, 7, 15, 34, 12, 24, 1, 47, 7, 3, 8, 10, 1, 8, 19, 4, 4, 13, 3, 28, 11, 4, 2, 10, 536, 7, 5, 38, 26, 6, 49, 5, 19, 29, 66, 10, 1, 6, 40, 16, 8, 25, 16, 10, 26, 97, 29, 5, 41, 9, 80, 6, 22, 10, 69, 11, 7, 2, 8, 10, 17, 176, 11, 16, 20, 11, 23, 19, 29, 7, 2, 7, 23, 16, 14, 28, 16, 2, 7, 1, 15, 4, 7, 70, 6, 12, 12, 5, 3, 48, 16, 1, 99, 3, 4, 10, 15, 12, 11, 18, 25, 2, 15, 134, 6, 8, 487, 49, 4, 3, 78, 41, 20, 6, 9, 36, 31, 19, 62, 15, 634, 3, 9, 20, 31, 21, 4, 4, 11, 19, 8, 4, 9, 29, 83, 5, 31, 14, 6, 20, 78, 31, 22, 13, 26, 71, 5, 802, 15, 41, 7, 39, 69, 36, 21, 48, 42, 54, 19, 130, 4, 61, 15, 18, 11, 6, 14, 3, 21, 16, 16, 36, 21, 8, 6, 11, 107, 13, 12, 9, 18, 22, 105, 109, 98, 6, 69, 42, 16, 18, 5, 220, 25, 19, 106, 16, 36, 69, 41, 70, 59, 28, 78, 23, 21, 64, 78, 14, 116, 49, 102, 7, 12, 106, 40, 17, 29, 8, 13, 96, 3, 75, 10, 29, 8, 52, 9, 4, 32, 3, 18, 126, 84, 2, 48, 10, 27, 7, 186, 40, 5, 22, 43, 2, 12, 13, 57, 3]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6699999999999998, speedup = 0.2767341358278107, eval_ratio = 0.084365)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.45746527777777773,"recall":0.4522569444444445,"f1":null,"seconds":0.00024056248366832733,"exhaustive_search_seconds":0.0004247725009918213,"evaluations":527.734375,"distances_sum":1776.3653477644539}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.6119791666666665,"recall":0.6119791666666665,"f1":null,"seconds":0.0003204960376024246,"exhaustive_search_seconds":0.0004247725009918213,"evaluations":665.984375,"distances_sum":1709.2368920592828}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6953124999999994,"recall":0.6953124999999994,"f1":null,"seconds":0.00037629157304763794,"exhaustive_search_seconds":0.0004247725009918213,"evaluations":761.9296875,"distances_sum":1667.0662263084812}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7404513888888885,"recall":0.7404513888888885,"f1":null,"seconds":0.000439327210187912,"exhaustive_search_seconds":0.0004247725009918213,"evaluations":849.640625,"distances_sum":1645.8239588504682}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7977430555555551,"recall":0.7977430555555551,"f1":null,"seconds":0.0005491077899932861,"exhaustive_search_seconds":0.0004247725009918213,"evaluations":958.75,"distances_sum":1626.3401475323706}
KCenters.DeloneInvIndex> reached performance {"precision":0.8402777777777772,"recall":0.8402777777777772,"f1":null,"seconds":0.000759374350309372,"exhaustive_search_seconds":0.0004247725009918213,"evaluations":1057.6328125,"distances_sum":1611.571983110239}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8340000000000002, speedup = 0.5320978387654921, eval_ratio = 0.117593)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
