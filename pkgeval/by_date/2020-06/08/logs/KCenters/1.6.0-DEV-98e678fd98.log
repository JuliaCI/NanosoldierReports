Julia Version 1.6.0-DEV.186
Commit 98e678fd98 (2020-06-06 18:34 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Reexport ──────────────────── v0.2.0
  Installed DataAPI ───────────────────── v1.3.0
  Installed TableTraits ───────────────── v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.5
  Installed CategoricalArrays ─────────── v0.7.7
  Installed JSON ──────────────────────── v0.21.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed InvertedIndices ───────────── v1.0.0
  Installed OrderedCollections ────────── v1.2.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed Tables ────────────────────── v1.0.4
  Installed Missings ──────────────────── v0.4.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed DataStructures ────────────── v0.17.17
  Installed SimilaritySearch ──────────── v0.3.19
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Compat ────────────────────── v3.11.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed DataFrames ────────────────── v0.20.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed MLDataPattern ─────────────── v0.5.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.11.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.5
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_nqWGZN/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_nqWGZN/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.11.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.5
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9364293802777927
[ Info: 0.8302954188982645
[ Info: 0.5541281573474407
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33364159616331257
mean(cdnet.distances) = 0.3887697290380796
mean(crand.distances) = 0.33210217458506425
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.421875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.421875,"f1":null,"seconds":4.949048161506653e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":5.9140625,"distances_sum":1253.362248423489}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.23828125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.23828125,"f1":null,"seconds":2.9634684324264526e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":5.796875,"distances_sum":714.8602788257814}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.421875,"state":{"ssize":2,"bsize":2},"perf":{"precision":null,"recall":0.421875,"f1":null,"seconds":4.949048161506653e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":5.9140625,"distances_sum":1253.362248423489}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9033971237096244,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.4140625,"distances_sum":2747.953899533806}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8349609375,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.8349609375,"f1":0.9033971237096244,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.4140625,"distances_sum":2747.953899533806}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9250744047619055,"seconds":6.627291440963745e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.4921875,"distances_sum":2939.6202651958233}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87109375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.87109375,"f1":0.9250744047619055,"seconds":6.627291440963745e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.4921875,"distances_sum":2939.6202651958233}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.87109375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.87109375,"f1":0.9250744047619055,"seconds":6.627291440963745e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.4921875,"distances_sum":2939.6202651958233}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7852744477744484,"seconds":5.21540641784668e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.0,"distances_sum":1881.4834901621266}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7001953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7001953125,"f1":0.8119852369852378,"seconds":4.848465323448181e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.078125,"distances_sum":2010.4362973302877}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7001953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.7001953125,"f1":0.8119852369852378,"seconds":4.848465323448181e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.078125,"distances_sum":2010.4362973302877}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9034772519147527,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.78125,"distances_sum":2583.2919244108753}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9308410339660343,"seconds":6.981194019317627e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.7734375,"distances_sum":2902.465541728882}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8784913003663014,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.484375,"distances_sum":2383.701664635557}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9360061813186819,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.875,"distances_sum":2908.9768613694464}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8876953125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8876953125,"f1":0.9360061813186819,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.875,"distances_sum":2908.9768613694464}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9466746794871798,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.7890625,"distances_sum":3056.312436059146}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9360176282051286,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.859375,"distances_sum":2915.1027595377545}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9611320970695976,"seconds":6.156042218208313e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.9296875,"distances_sum":3142.509538670421}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9620077838827843,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.875,"distances_sum":3164.4045657654165}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9620077838827843,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.875,"distances_sum":3164.4045657654165}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9620077838827843,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.875,"distances_sum":3164.4045657654165}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4560546875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4560546875,"f1":null,"seconds":4.494562745094299e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":6.515625,"distances_sum":1242.8098345534258}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5947265625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5947265625,"f1":0.7307681901431908,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.1328125,"distances_sum":1596.6974887862264}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5947265625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5947265625,"f1":0.7307681901431908,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.1328125,"distances_sum":1596.6974887862264}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8997939560439566,"seconds":6.441026926040649e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.46875,"distances_sum":2532.8649617103515}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9308665293040301,"seconds":6.573274731636047e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.4765625,"distances_sum":2855.6267347178423}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9037951631701641,"seconds":6.495043635368347e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.4375,"distances_sum":2649.350975277184}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8719931110556118,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.109375,"distances_sum":2344.3220896678386}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8692193223443232,"seconds":5.95487654209137e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.0546875,"distances_sum":2311.3833528401037}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8072880244755253,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.734375,"distances_sum":1938.9270134648325}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8818359375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8818359375,"f1":0.9308665293040301,"seconds":6.573274731636047e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.4765625,"distances_sum":2855.6267347178423}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9556776556776563,"seconds":6.8694353103637695e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.7421875,"distances_sum":3076.697919987004}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9554372710622714,"seconds":6.75395131111145e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.71875,"distances_sum":3106.323469092659}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9364125457875464,"seconds":6.340444087982178e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.5,"distances_sum":2889.661524762348}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9467204670329673,"seconds":6.448477506637573e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.6953125,"distances_sum":3034.92669968741}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9620192307692312,"seconds":6.476417183876038e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8203125,"distances_sum":3102.0155358014367}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9600274725274729,"seconds":6.502494215965271e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.796875,"distances_sum":3104.825216400038}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9620192307692312,"seconds":6.476417183876038e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8203125,"distances_sum":3102.0155358014367}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9620192307692312,"seconds":6.476417183876038e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8203125,"distances_sum":3102.0155358014367}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.59375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.59375,"f1":0.729510940448441,"seconds":4.801899194717407e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.046875,"distances_sum":1614.632378720101}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7929369241869252,"seconds":5.034729838371277e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.8125,"distances_sum":1884.2271633466453}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6806640625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6806640625,"f1":0.7929369241869252,"seconds":5.034729838371277e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.8125,"distances_sum":1884.2271633466453}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.848600011100012,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.265625,"distances_sum":2243.12077455813}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9253298784548791,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.59375,"distances_sum":2786.572696245758}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8720703125,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8720703125,"f1":0.9253298784548791,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.59375,"distances_sum":2786.572696245758}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.971560210622711,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.9296875,"distances_sum":3177.661626509397}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9408940018315024,"seconds":6.260350346565247e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.625,"distances_sum":2904.501356045802}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.937545787545788,"seconds":5.694106221199036e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.640625,"distances_sum":2900.78474367053}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.971560210622711,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.9296875,"distances_sum":3177.661626509397}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.971560210622711,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.9296875,"distances_sum":3177.661626509397}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.251953125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.251953125,"f1":null,"seconds":3.5688281059265137e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":6.5,"distances_sum":701.9829593119923}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.251953125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.251953125,"f1":null,"seconds":3.56137752532959e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":6.6015625,"distances_sum":717.2493489099334}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8076163419913428,"seconds":4.71062958240509e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.703125,"distances_sum":1968.8434283096087}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.69140625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.69140625,"f1":0.8076163419913428,"seconds":4.71062958240509e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.703125,"distances_sum":1968.8434283096087}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69921875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.69921875,"f1":0.813200688200689,"seconds":4.7869980335235596e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.71875,"distances_sum":1996.4517925714263}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9324919871794878,"seconds":6.064772605895996e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.625,"distances_sum":2842.236089781988}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.880859375,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.880859375,"f1":0.9324919871794878,"seconds":6.064772605895996e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.625,"distances_sum":2842.236089781988}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9522607600732609,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8984375,"distances_sum":3061.3929666444938}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9470295329670332,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8125,"distances_sum":2968.313948516489}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9599931318681323,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8828125,"distances_sum":3114.0087057518404}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9552515193140194,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8515625,"distances_sum":3089.396233172686}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9599931318681323,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8828125,"distances_sum":3114.0087057518404}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9599931318681323,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8828125,"distances_sum":3114.0087057518404}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5048828125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5048828125,"f1":0.6542989996115,"seconds":4.5318156480789185e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.421875,"distances_sum":1422.800913425419}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6357421875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6357421875,"f1":0.7633356227106234,"seconds":4.637986421585083e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.171875,"distances_sum":1906.9649380943276}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8716668747918755,"seconds":5.735084414482117e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.3359375,"distances_sum":2408.1264820761944}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8716668747918755,"seconds":5.735084414482117e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.3359375,"distances_sum":2408.1264820761944}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8879412254412266,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.3203125,"distances_sum":2550.779321021243}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8963630119880128,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.46875,"distances_sum":2596.782401037875}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8271484375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8271484375,"f1":0.8963630119880128,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.46875,"distances_sum":2596.782401037875}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9525526556776562,"seconds":6.26780092716217e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.671875,"distances_sum":3149.0220617421305}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9698489010989014,"seconds":6.424263119697571e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.84375,"distances_sum":3239.270069113765}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.967244734432235,"seconds":6.584450602531433e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8515625,"distances_sum":3207.10297981243}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9458822427572432,"seconds":4.723668098449707e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.609375,"distances_sum":3119.51195914247}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9698489010989014,"seconds":6.424263119697571e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.84375,"distances_sum":3239.270069113765}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9698489010989014,"seconds":6.424263119697571e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.84375,"distances_sum":3239.270069113765}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7001953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7001953125,"f1":0.8145505536130543,"seconds":4.934147000312805e-6,"exhaustive_search_seconds":1.8905848264694214e-6,"evaluations":7.9609375,"distances_sum":1178.1989564508758}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8602480852480862,"seconds":5.414709448814392e-6,"exhaustive_search_seconds":1.8905848264694214e-6,"evaluations":8.3671875,"distances_sum":1336.3656266329185}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.8602480852480862,"seconds":5.414709448814392e-6,"exhaustive_search_seconds":1.8905848264694214e-6,"evaluations":8.3671875,"distances_sum":1336.3656266329185}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9616472069597075,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.8905848264694214e-6,"evaluations":8.8828125,"distances_sum":1815.1357262802258}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9616472069597075,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.8905848264694214e-6,"evaluations":8.8828125,"distances_sum":1815.1357262802258}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9732886904761909,"seconds":6.414949893951416e-6,"exhaustive_search_seconds":1.8905848264694214e-6,"evaluations":8.9296875,"distances_sum":1880.9539348696774}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":12,"bsize":13}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9810267857142863,"seconds":6.277114152908325e-6,"exhaustive_search_seconds":1.8905848264694214e-6,"evaluations":8.96875,"distances_sum":1913.8778224951238}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":12,"bsize":13},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9810267857142863,"seconds":6.277114152908325e-6,"exhaustive_search_seconds":1.8905848264694214e-6,"evaluations":8.96875,"distances_sum":1913.8778224951238}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":12,"bsize":13},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9810267857142863,"seconds":6.277114152908325e-6,"exhaustive_search_seconds":1.8905848264694214e-6,"evaluations":8.96875,"distances_sum":1913.8778224951238}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4091796875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4091796875,"f1":null,"seconds":3.991648554801941e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":7.1328125,"distances_sum":691.2241289411141}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41796875, conf: {"ssize":4,"bsize":2}, perf: {"precision":1.0,"recall":0.41796875,"f1":0.5743117993117995,"seconds":4.8354268074035645e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":7.203125,"distances_sum":712.4221975122458}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7937666500166508,"seconds":5.81890344619751e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.203125,"distances_sum":1235.4887893883254}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6767578125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6767578125,"f1":0.7937666500166508,"seconds":5.81890344619751e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.203125,"distances_sum":1235.4887893883254}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7099609375, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.7099609375,"f1":0.8232210497835506,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.328125,"distances_sum":1327.908599980217}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8768497127872136,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.4140625,"distances_sum":1539.8690491560942}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.905952901265402,"seconds":6.8303197622299194e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.765625,"distances_sum":1702.5310123528054}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.83984375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.83984375,"f1":0.905952901265402,"seconds":6.8303197622299194e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.765625,"distances_sum":1702.5310123528054}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":12,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9085508241758249,"seconds":6.744638085365295e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.859375,"distances_sum":1680.8703799367063}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9383673618048625,"seconds":7.340684533119202e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.8359375,"distances_sum":1849.593828712904}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9131212537462545,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.859375,"distances_sum":1669.650216897221}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9383673618048625,"seconds":7.340684533119202e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.8359375,"distances_sum":1849.593828712904}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8935546875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9383673618048625,"seconds":7.340684533119202e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.8359375,"distances_sum":1849.593828712904}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.568359375,"f1":0.7083368020868027,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.8980354070663452e-6,"evaluations":7.9765625,"distances_sum":1012.4653396585796}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.568359375,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.568359375,"f1":0.7083368020868027,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.8980354070663452e-6,"evaluations":7.9765625,"distances_sum":1012.4653396585796}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.568359375,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.568359375,"f1":0.7083368020868027,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.8980354070663452e-6,"evaluations":7.9765625,"distances_sum":1012.4653396585796}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.568359375,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.568359375,"f1":0.7083368020868027,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.8980354070663452e-6,"evaluations":7.9765625,"distances_sum":1012.4653396585796}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8402170745920754,"seconds":5.036592483520508e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.9296875,"distances_sum":1655.093621312817}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5244140625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5244140625,"f1":0.6735339313464318,"seconds":4.610046744346619e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":6.640625,"distances_sum":1139.8594060528408}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7412109375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7412109375,"f1":0.8402170745920754,"seconds":5.036592483520508e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.9296875,"distances_sum":1655.093621312817}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9385760073260079,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.640625,"distances_sum":2108.748875564923}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.89453125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.9385760073260079,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.640625,"distances_sum":2108.748875564923}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9526614010989016,"seconds":6.601214408874512e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.75,"distances_sum":2173.0654466385295}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9694997710622714,"seconds":6.573274731636047e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.9140625,"distances_sum":2257.2267047569812}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9694997710622714,"seconds":6.573274731636047e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.9140625,"distances_sum":2257.2267047569812}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9694997710622714,"seconds":6.573274731636047e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.9140625,"distances_sum":2257.2267047569812}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.412109375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.412109375,"f1":null,"seconds":4.123896360397339e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":6.078125,"distances_sum":760.2581329540423}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8722355769230777,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.2578125,"distances_sum":1638.0278191171608}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.783203125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.783203125,"f1":0.8722355769230777,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.2578125,"distances_sum":1638.0278191171608}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9560325091575096,"seconds":6.15045428276062e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.8046875,"distances_sum":2126.174117819209}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.929344093406594,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.578125,"distances_sum":1934.0344192573623}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9151671245421252,"seconds":6.7148357629776e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.4375,"distances_sum":1819.6259672058998}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9560325091575096,"seconds":6.15045428276062e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.8046875,"distances_sum":2126.174117819209}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9755952380952384,"seconds":6.191432476043701e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.9375,"distances_sum":2225.411487704062}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9735691391941395,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.875,"distances_sum":2219.0511363685364}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9746108058608061,"seconds":6.275251507759094e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.890625,"distances_sum":2221.741255350724}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9655906593406598,"seconds":7.450580596923828e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.8671875,"distances_sum":2162.748522145038}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9600305944055946,"seconds":6.368383765220642e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.828125,"distances_sum":2149.8922302473006}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9623168498168502,"seconds":6.381422281265259e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.8203125,"distances_sum":2166.1304696535735}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9755952380952384,"seconds":6.191432476043701e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.9375,"distances_sum":2225.411487704062}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9755952380952384,"seconds":6.191432476043701e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.9375,"distances_sum":2225.411487704062}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.244140625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.244140625,"f1":null,"seconds":3.7159770727157593e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":5.6953125,"distances_sum":564.405586314295}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.24609375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.24609375,"f1":null,"seconds":3.6098062992095947e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":5.4765625,"distances_sum":604.0884071492237}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5869140625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5869140625,"f1":0.7257152569652576,"seconds":4.854053258895874e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":6.7734375,"distances_sum":1197.9558406294743}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5869140625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5869140625,"f1":0.7257152569652576,"seconds":4.854053258895874e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":6.7734375,"distances_sum":1197.9558406294743}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8890775890775899,"seconds":7.368624210357666e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.5,"distances_sum":1927.971560689672}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.625,"f1":0.7613745629370636,"seconds":4.928559064865112e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":7.09375,"distances_sum":1291.1959643170976}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7236328125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7236328125,"f1":0.8320034132534141,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":7.8203125,"distances_sum":1622.024271025541}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8173828125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8173828125,"f1":0.8890775890775899,"seconds":7.368624210357666e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.5,"distances_sum":1927.971560689672}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9381181318681322,"seconds":7.0855021476745605e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.65625,"distances_sum":2244.219382778707}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9668383699633706,"seconds":6.459653377532959e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.90625,"distances_sum":2373.707759730222}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9578525641025648,"seconds":6.3516199588775635e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.84375,"distances_sum":2325.1422696290474}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9544127747252754,"seconds":6.921589374542236e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.828125,"distances_sum":2296.928439295108}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9522035256410263,"seconds":7.010996341705322e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.7734375,"distances_sum":2331.7965570044466}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8950466200466209,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.453125,"distances_sum":1951.1671270140173}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9668383699633706,"seconds":6.459653377532959e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.90625,"distances_sum":2373.707759730222}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9668383699633706,"seconds":6.459653377532959e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.90625,"distances_sum":2373.707759730222}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2041015625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2041015625,"f1":null,"seconds":3.209337592124939e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":5.0390625,"distances_sum":485.0719409039488}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8672743922743932,"seconds":6.357207894325256e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.25,"distances_sum":1922.97808732894}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.779296875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.779296875,"f1":0.8672743922743932,"seconds":6.357207894325256e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.25,"distances_sum":1922.97808732894}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9195658508158514,"seconds":5.086883902549744e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.5703125,"distances_sum":2309.4140633918887}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.886322011322012,"seconds":4.988163709640503e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.4296875,"distances_sum":2077.8759758385077}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9361549908424913,"seconds":6.103888154029846e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.671875,"distances_sum":2424.3497098160583}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9361549908424913,"seconds":6.103888154029846e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.671875,"distances_sum":2424.3497098160583}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9640484515484519,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8984375,"distances_sum":2577.3161837134076}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9713198260073262,"seconds":6.385147571563721e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.90625,"distances_sum":2593.1968007961646}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9387992216117221,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.6171875,"distances_sum":2423.005836154909}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9563701923076929,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.7734375,"distances_sum":2543.505440755353}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9594207875457881,"seconds":5.986541509628296e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.796875,"distances_sum":2552.6014697614637}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9713198260073262,"seconds":6.385147571563721e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.90625,"distances_sum":2593.1968007961646}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9713198260073262,"seconds":6.385147571563721e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.90625,"distances_sum":2593.1968007961646}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8473026973026982,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.7421875,"distances_sum":1792.7633582932285}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.16015625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.16015625,"f1":null,"seconds":2.723187208175659e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":4.078125,"distances_sum":367.53512695051904}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.36328125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.36328125,"f1":null,"seconds":5.662441253662109e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":5.1796875,"distances_sum":837.951185121103}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7490234375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7490234375,"f1":0.8473026973026982,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.7421875,"distances_sum":1792.7633582932285}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9402415293040298,"seconds":5.763024091720581e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.65625,"distances_sum":2379.968436393071}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9320429570429577,"seconds":5.865469574928284e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.6484375,"distances_sum":2329.1547088715893}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9268772893772903,"seconds":4.591420292854309e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.59375,"distances_sum":2321.3410726803777}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.89453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.9402415293040298,"seconds":5.763024091720581e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.65625,"distances_sum":2379.968436393071}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9731227106227108,"seconds":6.385147571563721e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8671875,"distances_sum":2578.089714325189}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9784798534798537,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8984375,"distances_sum":2616.262738869783}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.954527243589744,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.640625,"distances_sum":2525.5946180270657}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.9813988095238098,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.90625,"distances_sum":2656.8793716722093}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9585222069597075,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.765625,"distances_sum":2510.869506690159}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9634729853479859,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7578125,"distances_sum":2535.5135334079678}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9658203125,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9813988095238098,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.90625,"distances_sum":2656.8793716722093}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9658203125,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9813988095238098,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.90625,"distances_sum":2656.8793716722093}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8626472485847493,"seconds":4.455447196960449e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.3671875,"distances_sum":1890.914646917363}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5361328125, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5361328125,"f1":0.6818523490398494,"seconds":3.814697265625e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":6.6953125,"distances_sum":1246.7726339530968}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7744140625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7744140625,"f1":0.8626472485847493,"seconds":4.455447196960449e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.3671875,"distances_sum":1890.914646917363}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9387565559440567,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.796875,"distances_sum":2406.4232912253033}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9501945970695977,"seconds":5.973502993583679e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.8828125,"distances_sum":2446.2680739489965}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9509615384615391,"seconds":6.629154086112976e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9296875,"distances_sum":2440.023920105675}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9509615384615391,"seconds":6.629154086112976e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9296875,"distances_sum":2440.023920105675}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9618360805860808,"seconds":6.690621376037598e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.921875,"distances_sum":2553.3761436800173}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9703125000000006,"seconds":6.774440407752991e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.96875,"distances_sum":2600.5558456887593}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.978405448717949,"seconds":6.932765245437622e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9921875,"distances_sum":2659.5684490891754}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9795386904761908,"seconds":6.921589374542236e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9609375,"distances_sum":2683.5392342697382}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9750400641025645,"seconds":6.3516199588775635e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.953125,"distances_sum":2655.6087949862285}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9795386904761908,"seconds":6.921589374542236e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9609375,"distances_sum":2683.5392342697382}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9795386904761908,"seconds":6.921589374542236e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9609375,"distances_sum":2683.5392342697382}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6435546875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6435546875,"f1":0.7732902514152521,"seconds":5.146488547325134e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":7.65625,"distances_sum":1537.147275347737}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.345703125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.345703125,"f1":null,"seconds":2.7958303689956665e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":5.515625,"distances_sum":780.4479766378123}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6435546875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6435546875,"f1":0.7732902514152521,"seconds":5.146488547325134e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":7.65625,"distances_sum":1537.147275347737}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9299767940392943,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.6875,"distances_sum":2349.9935700910687}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9420787545787552,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.71875,"distances_sum":2436.532788279407}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.9420787545787552,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.71875,"distances_sum":2436.532788279407}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9457734973359977,"seconds":6.234273314476013e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.7578125,"distances_sum":2445.271350335782}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9686240842490845,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8984375,"distances_sum":2579.2450277068397}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9686240842490845,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8984375,"distances_sum":2579.2450277068397}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9686240842490845,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8984375,"distances_sum":2579.2450277068397}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6474609375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6474609375,"f1":0.7713893745143752,"seconds":4.7888606786727905e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.2265625,"distances_sum":1503.7221487240572}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.65234375,"f1":0.7750447469197473,"seconds":4.829838871955872e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.3203125,"distances_sum":1549.820650016114}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.65234375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.65234375,"f1":0.7750447469197473,"seconds":4.829838871955872e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.3203125,"distances_sum":1549.820650016114}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9102309149184156,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.4453125,"distances_sum":2121.9917808831774}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73828125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.73828125,"f1":0.8388840326340335,"seconds":5.2675604820251465e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.921875,"distances_sum":1760.4481588716324}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.84375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.84375,"f1":0.9102309149184156,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.4453125,"distances_sum":2121.9917808831774}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9407108516483521,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7109375,"distances_sum":2376.7118917454573}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9252008408258415,"seconds":8.346512913703918e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.578125,"distances_sum":2264.6434019527373}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9502117673992678,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7109375,"distances_sum":2422.8023929262968}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9502117673992678,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7109375,"distances_sum":2422.8023929262968}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.912109375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9502117673992678,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7109375,"distances_sum":2422.8023929262968}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2138671875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2138671875,"f1":null,"seconds":3.205612301826477e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":5.3515625,"distances_sum":473.2432786200989}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41796875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.41796875,"f1":null,"seconds":3.723427653312683e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":5.953125,"distances_sum":897.6886029873374}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.41796875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.41796875,"f1":null,"seconds":3.723427653312683e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":5.953125,"distances_sum":897.6886029873374}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.541015625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.541015625,"f1":0.6847600316350321,"seconds":3.466382622718811e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":6.8828125,"distances_sum":1217.1643461249948}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8438681110556118,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":7.8828125,"distances_sum":1769.6014656258776}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8621966575091584,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":7.96875,"distances_sum":1827.458618110615}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.533203125, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.533203125,"f1":0.6812744547119551,"seconds":4.585832357406616e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":6.7734375,"distances_sum":1172.6273821060674}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8621966575091584,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":7.96875,"distances_sum":1827.458618110615}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.931707875457876,"seconds":6.290152668952942e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.609375,"distances_sum":2367.5061962540294}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.955339972527473,"seconds":6.4373016357421875e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.734375,"distances_sum":2519.320032713791}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9495993589743595,"seconds":6.182119250297546e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.703125,"distances_sum":2500.8723547683862}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9379750457875466,"seconds":6.584450602531433e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.6796875,"distances_sum":2375.068245825859}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9608688186813191,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.78125,"distances_sum":2558.5460510252124}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9541723901098907,"seconds":6.338581442832947e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.734375,"distances_sum":2518.0915854543414}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.8982694388944396,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.2734375,"distances_sum":2139.7435042439884}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9299081127206135,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.6640625,"distances_sum":2320.6728803080173}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9271520146520154,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.6484375,"distances_sum":2354.6932169809224}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":10,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9608688186813191,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.78125,"distances_sum":2558.5460510252124}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":10,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9608688186813191,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.4826655387878418e-6,"evaluations":8.78125,"distances_sum":2558.5460510252124}}, n: 9
mean(cfft.distances) = 0.3482515578641113
mean(cdnet.distances) = 0.4007725771980082
mean(crand.distances) = 0.3365306802826723
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8377777777777777
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8777777777777778
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8888888888888888
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9377777777777778
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8488888888888889
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8977777777777778
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9266666666666667
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9177777777777778
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9222222222222222
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9311111111111111
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9111111111111111
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8622222222222221
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8666666666666666
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8688888888888888
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8888888888888888
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9177777777777778
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8911111111111111
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8866666666666667
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9155555555555556
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 1, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 3, 2, 3, 2, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 1, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 3, 2, 3, 2, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 1, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 3, 2, 3, 2, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 1, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 3, 2, 3, 2, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 1, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 3, 2, 3, 2, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 1, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 3, 2, 3, 2, 1]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 1, normalized-entropy: 0.24988229283318547, [(2, 23), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 3, 2, 3, 2, 1]
acc = 0.96
*** finished computation of 12 references, err: [Inf, 0.594118949174881] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 29, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 8, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 11]]
** centroid: 12, normalized-entropy: 0.4138168503036336, [(2, 1), (3, 11)]
finished with 14 centroids; started with 12
acc = 0.98
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.22789123551947982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22789123551947982, 0.18715592416288188] ***
*** starting iteration: 2; err: [Inf, 0.22789123551947982, 0.18715592416288188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22789123551947982, 0.18715592416288188, 0.1844319359007022] ***
*** starting iteration: 3; err: [Inf, 0.22789123551947982, 0.18715592416288188, 0.1844319359007022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22789123551947982, 0.18715592416288188, 0.1844319359007022, 0.18284442811447574] ***
*** finished computation of 7 references, err: [Inf, 0.22789123551947982, 0.18715592416288188, 0.1844319359007022, 0.18284442811447574] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 105, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 41, 0]]
** centroid: 3, normalized-entropy: 0.988212082728797, [(1, 53), (2, 41)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [97, 4, 0]]
** centroid: 4, normalized-entropy: 0.24047340659188013, [(1, 97), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 34, 0]]
** centroid: 5, normalized-entropy: 0.9150255357249155, [(1, 69), (2, 34)]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 93, 12]]
** centroid: 7, normalized-entropy: 0.5127091420308771, [(2, 93), (3, 12)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2287704911518624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2287704911518624, 0.1921408110433656] ***
*** starting iteration: 2; err: [Inf, 0.2287704911518624, 0.1921408110433656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2287704911518624, 0.1921408110433656, 0.18661406126174926] ***
*** starting iteration: 3; err: [Inf, 0.2287704911518624, 0.1921408110433656, 0.18661406126174926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2287704911518624, 0.1921408110433656, 0.18661406126174926, 0.18544764752880946] ***
*** finished computation of 7 references, err: [Inf, 0.2287704911518624, 0.1921408110433656, 0.18661406126174926, 0.18544764752880946] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [77, 24, 0]]
** centroid: 1, normalized-entropy: 0.7910662980902586, [(1, 77), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [72, 7, 0]]
** centroid: 2, normalized-entropy: 0.43180499427520785, [(1, 72), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 96, 22]]
** centroid: 3, normalized-entropy: 0.693965967334286, [(2, 96), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 92, 0]]
** centroid: 5, normalized-entropy: 0.29292995113885967, [(1, 5), (2, 92)]
*** center 6: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [46, 28, 0]]
** centroid: 7, normalized-entropy: 0.9568886656798214, [(1, 46), (2, 28)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19118576939077908] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19118576939077908, 0.15105986433116267] ***
*** starting iteration: 2; err: [Inf, 0.19118576939077908, 0.15105986433116267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19118576939077908, 0.15105986433116267, 0.1462763733280873] ***
*** starting iteration: 3; err: [Inf, 0.19118576939077908, 0.15105986433116267, 0.1462763733280873] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19118576939077908, 0.15105986433116267, 0.1462763733280873, 0.14515168589816704] ***
*** finished computation of 7 references, err: [Inf, 0.19118576939077908, 0.15105986433116267, 0.1462763733280873, 0.14515168589816704] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [109, 9, 0]]
** centroid: 1, normalized-entropy: 0.388902232296877, [(1, 109), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [87, 2, 0]]
** centroid: 2, normalized-entropy: 0.1551032721030341, [(1, 87), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 43, 18]]
** centroid: 3, normalized-entropy: 0.8751957887407251, [(2, 43), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [77, 15, 0]]
** centroid: 5, normalized-entropy: 0.6415410585827175, [(1, 77), (2, 15)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 100, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 91, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18325607237061192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18325607237061192, 0.15027981331590087] ***
*** starting iteration: 2; err: [Inf, 0.18325607237061192, 0.15027981331590087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18325607237061192, 0.15027981331590087, 0.14639057383720375] ***
*** starting iteration: 3; err: [Inf, 0.18325607237061192, 0.15027981331590087, 0.14639057383720375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18325607237061192, 0.15027981331590087, 0.14639057383720375, 0.14541511226800094] ***
*** finished computation of 7 references, err: [Inf, 0.18325607237061192, 0.15027981331590087, 0.14639057383720375, 0.14541511226800094] ***
*** center 1: selecting labels [1] (freq >= 2) [from [122, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 62, 12]]
** centroid: 2, normalized-entropy: 0.6394571324851642, [(2, 62), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 13, 0]]
** centroid: 3, normalized-entropy: 0.6812908868842175, [(1, 59), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [81, 7, 0]]
** centroid: 4, normalized-entropy: 0.40057554263664, [(1, 81), (2, 7)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 97, 0]]
** centroid: 5, normalized-entropy: 0.6906241389199443, [(1, 22), (2, 97)]
*** center 6: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 98, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19381850108789136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19381850108789136, 0.14837263374920304] ***
*** starting iteration: 2; err: [Inf, 0.19381850108789136, 0.14837263374920304] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19381850108789136, 0.14837263374920304, 0.1443492603897378] ***
*** starting iteration: 3; err: [Inf, 0.19381850108789136, 0.14837263374920304, 0.1443492603897378] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19381850108789136, 0.14837263374920304, 0.1443492603897378, 0.14317766957632874] ***
*** finished computation of 7 references, err: [Inf, 0.19381850108789136, 0.14837263374920304, 0.1443492603897378, 0.14317766957632874] ***
*** center 1: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [94, 13, 0]]
** centroid: 2, normalized-entropy: 0.5336439173027161, [(1, 94), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 67, 22]]
** centroid: 3, normalized-entropy: 0.8067955503968327, [(2, 67), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 50, 0]]
** centroid: 5, normalized-entropy: 0.9268190639645774, [(1, 26), (2, 50)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [55, 41, 0]]
** centroid: 6, normalized-entropy: 0.98460399620868, [(1, 55), (2, 41)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 76, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24830465429174425] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24830465429174425, 0.18312052606783985] ***
*** starting iteration: 2; err: [Inf, 0.24830465429174425, 0.18312052606783985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24830465429174425, 0.18312052606783985, 0.16352441821068348] ***
*** starting iteration: 3; err: [Inf, 0.24830465429174425, 0.18312052606783985, 0.16352441821068348] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24830465429174425, 0.18312052606783985, 0.16352441821068348, 0.1544680059244213] ***
*** starting iteration: 4; err: [Inf, 0.24830465429174425, 0.18312052606783985, 0.16352441821068348, 0.1544680059244213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24830465429174425, 0.18312052606783985, 0.16352441821068348, 0.1544680059244213, 0.14956037253323193] ***
*** starting iteration: 5; err: [Inf, 0.24830465429174425, 0.18312052606783985, 0.16352441821068348, 0.1544680059244213, 0.14956037253323193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24830465429174425, 0.18312052606783985, 0.16352441821068348, 0.1544680059244213, 0.14956037253323193, 0.14733065267417905] ***
*** starting iteration: 6; err: [Inf, 0.24830465429174425, 0.18312052606783985, 0.16352441821068348, 0.1544680059244213, 0.14956037253323193, 0.14733065267417905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24830465429174425, 0.18312052606783985, 0.16352441821068348, 0.1544680059244213, 0.14956037253323193, 0.14733065267417905, 0.1460865792907864] ***
*** starting iteration: 7; err: [Inf, 0.24830465429174425, 0.18312052606783985, 0.16352441821068348, 0.1544680059244213, 0.14956037253323193, 0.14733065267417905, 0.1460865792907864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24830465429174425, 0.18312052606783985, 0.16352441821068348, 0.1544680059244213, 0.14956037253323193, 0.14733065267417905, 0.1460865792907864, 0.1454238396035871] ***
*** finished computation of 7 references, err: [Inf, 0.24830465429174425, 0.18312052606783985, 0.16352441821068348, 0.1544680059244213, 0.14956037253323193, 0.14733065267417905, 0.1460865792907864, 0.1454238396035871] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [100, 14, 0]]
** centroid: 1, normalized-entropy: 0.5373760853377334, [(1, 100), (2, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [81, 18, 0]]
** centroid: 3, normalized-entropy: 0.6840384356390419, [(1, 81), (2, 18)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 100, 15]]
** centroid: 4, normalized-entropy: 0.5586293734521991, [(2, 100), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 46, 0]]
** centroid: 5, normalized-entropy: 0.999280531064971, [(1, 49), (2, 46)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 82, 3]]
** centroid: 6, normalized-entropy: 0.22028326695127437, [(2, 82), (3, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19774723201682945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19774723201682945, 0.1613591359383699] ***
*** starting iteration: 2; err: [Inf, 0.19774723201682945, 0.1613591359383699] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19774723201682945, 0.1613591359383699, 0.154634026708598] ***
*** starting iteration: 3; err: [Inf, 0.19774723201682945, 0.1613591359383699, 0.154634026708598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19774723201682945, 0.1613591359383699, 0.154634026708598, 0.15044048647473063] ***
*** starting iteration: 4; err: [Inf, 0.19774723201682945, 0.1613591359383699, 0.154634026708598, 0.15044048647473063] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19774723201682945, 0.1613591359383699, 0.154634026708598, 0.15044048647473063, 0.14839095431428845] ***
*** starting iteration: 5; err: [Inf, 0.19774723201682945, 0.1613591359383699, 0.154634026708598, 0.15044048647473063, 0.14839095431428845] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19774723201682945, 0.1613591359383699, 0.154634026708598, 0.15044048647473063, 0.14839095431428845, 0.14736609320355945] ***
*** starting iteration: 6; err: [Inf, 0.19774723201682945, 0.1613591359383699, 0.154634026708598, 0.15044048647473063, 0.14839095431428845, 0.14736609320355945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19774723201682945, 0.1613591359383699, 0.154634026708598, 0.15044048647473063, 0.14839095431428845, 0.14736609320355945, 0.1470133927155068] ***
*** finished computation of 7 references, err: [Inf, 0.19774723201682945, 0.1613591359383699, 0.154634026708598, 0.15044048647473063, 0.14839095431428845, 0.14736609320355945, 0.1470133927155068] ***
*** center 1: selecting labels [1] (freq >= 2) [from [99, 1, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [132, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 51, 0]]
** centroid: 3, normalized-entropy: 0.998082507968892, [(1, 46), (2, 51)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [8, 69, 0]]
** centroid: 4, normalized-entropy: 0.481225663841737, [(1, 8), (2, 69)]
*** center 5: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 89, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 67, 12]]
** centroid: 7, normalized-entropy: 0.6145715612236268, [(2, 67), (3, 12)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21656023697317417] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21656023697317417, 0.16199839358236165] ***
*** starting iteration: 2; err: [Inf, 0.21656023697317417, 0.16199839358236165] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21656023697317417, 0.16199839358236165, 0.15197894861921668] ***
*** starting iteration: 3; err: [Inf, 0.21656023697317417, 0.16199839358236165, 0.15197894861921668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21656023697317417, 0.16199839358236165, 0.15197894861921668, 0.14843503883976986] ***
*** starting iteration: 4; err: [Inf, 0.21656023697317417, 0.16199839358236165, 0.15197894861921668, 0.14843503883976986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21656023697317417, 0.16199839358236165, 0.15197894861921668, 0.14843503883976986, 0.14681025478162285] ***
*** starting iteration: 5; err: [Inf, 0.21656023697317417, 0.16199839358236165, 0.15197894861921668, 0.14843503883976986, 0.14681025478162285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21656023697317417, 0.16199839358236165, 0.15197894861921668, 0.14843503883976986, 0.14681025478162285, 0.14634039693454776] ***
*** finished computation of 7 references, err: [Inf, 0.21656023697317417, 0.16199839358236165, 0.15197894861921668, 0.14843503883976986, 0.14681025478162285, 0.14634039693454776] ***
*** center 1: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 96, 22]]
** centroid: 2, normalized-entropy: 0.693965967334286, [(2, 96), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [79, 4, 0]]
** centroid: 3, normalized-entropy: 0.27866980356389914, [(1, 79), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [43, 31, 0]]
** centroid: 4, normalized-entropy: 0.9809470132751208, [(1, 43), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 24, 0]]
** centroid: 5, normalized-entropy: 0.8366407419411671, [(1, 66), (2, 24)]
*** center 6: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 92, 0]]
** centroid: 7, normalized-entropy: 0.3322866302216152, [(1, 6), (2, 92)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.34258909960901057] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34258909960901057, 0.2370892068617292] ***
*** starting iteration: 2; err: [Inf, 0.34258909960901057, 0.2370892068617292] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34258909960901057, 0.2370892068617292, 0.23329432841177816] ***
*** starting iteration: 3; err: [Inf, 0.34258909960901057, 0.2370892068617292, 0.23329432841177816] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34258909960901057, 0.2370892068617292, 0.23329432841177816, 0.2320131276092316] ***
*** starting iteration: 4; err: [Inf, 0.34258909960901057, 0.2370892068617292, 0.23329432841177816, 0.2320131276092316] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34258909960901057, 0.2370892068617292, 0.23329432841177816, 0.2320131276092316, 0.2315196659074755] ***
*** finished computation of 3 references, err: [Inf, 0.34258909960901057, 0.2370892068617292, 0.23329432841177816, 0.2320131276092316, 0.2315196659074755] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [235, 29, 0]]
** centroid: 1, normalized-entropy: 0.4994587735195349, [(1, 235), (2, 29)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 205, 18]]
** centroid: 2, normalized-entropy: 0.4047022746979817, [(2, 205), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [153, 26, 0]]
** centroid: 3, normalized-entropy: 0.5978282208193174, [(1, 153), (2, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3348249614104696] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3348249614104696, 0.235003845630747] ***
*** starting iteration: 2; err: [Inf, 0.3348249614104696, 0.235003845630747] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3348249614104696, 0.235003845630747, 0.23126984839474243] ***
*** starting iteration: 3; err: [Inf, 0.3348249614104696, 0.235003845630747, 0.23126984839474243] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3348249614104696, 0.235003845630747, 0.23126984839474243, 0.23045262752165055] ***
*** finished computation of 3 references, err: [Inf, 0.3348249614104696, 0.235003845630747, 0.23126984839474243, 0.23045262752165055] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [236, 23, 0]]
** centroid: 1, normalized-entropy: 0.4324620149502379, [(1, 236), (2, 23)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 199, 12]]
** centroid: 2, normalized-entropy: 0.31490084985960226, [(2, 199), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [142, 55, 0]]
** centroid: 3, normalized-entropy: 0.8543417929918021, [(1, 142), (2, 55)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.41791534084251436] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41791534084251436, 0.22684859101014068] ***
*** starting iteration: 2; err: [Inf, 0.41791534084251436, 0.22684859101014068] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41791534084251436, 0.22684859101014068, 0.2251236543835684] ***
*** starting iteration: 3; err: [Inf, 0.41791534084251436, 0.22684859101014068, 0.2251236543835684] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41791534084251436, 0.22684859101014068, 0.2251236543835684, 0.22427833454426507] ***
*** finished computation of 3 references, err: [Inf, 0.41791534084251436, 0.22684859101014068, 0.2251236543835684, 0.22427833454426507] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [2, 180, 22]]
** centroid: 1, normalized-entropy: 0.3604146530954926, [(1, 2), (2, 180), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [254, 5, 0]]
** centroid: 2, normalized-entropy: 0.13752044631756952, [(1, 254), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [142, 62, 0]]
** centroid: 3, normalized-entropy: 0.8860318997477157, [(1, 142), (2, 62)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.23997826982071405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23997826982071405, 0.193217169336818] ***
*** starting iteration: 2; err: [Inf, 0.23997826982071405, 0.193217169336818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23997826982071405, 0.193217169336818, 0.18834702166177714] ***
*** starting iteration: 3; err: [Inf, 0.23997826982071405, 0.193217169336818, 0.18834702166177714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23997826982071405, 0.193217169336818, 0.18834702166177714, 0.18686448981462456] ***
*** starting iteration: 4; err: [Inf, 0.23997826982071405, 0.193217169336818, 0.18834702166177714, 0.18686448981462456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23997826982071405, 0.193217169336818, 0.18834702166177714, 0.18686448981462456, 0.18655972264206466] ***
*** finished computation of 7 references, err: [Inf, 0.23997826982071405, 0.193217169336818, 0.18834702166177714, 0.18686448981462456, 0.18655972264206466] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [110, 8, 0]]
** centroid: 1, normalized-entropy: 0.3576467062456333, [(1, 110), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [82, 3, 0]]
** centroid: 2, normalized-entropy: 0.22028326695127437, [(1, 82), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 44, 18]]
** centroid: 3, normalized-entropy: 0.8691375806126381, [(2, 44), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [88, 15, 0]]
** centroid: 5, normalized-entropy: 0.5987981837442868, [(1, 88), (2, 15)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 99, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 91, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23127840354346085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23127840354346085, 0.19395442504500007] ***
*** starting iteration: 2; err: [Inf, 0.23127840354346085, 0.19395442504500007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23127840354346085, 0.19395442504500007, 0.1905579438930129] ***
*** starting iteration: 3; err: [Inf, 0.23127840354346085, 0.19395442504500007, 0.1905579438930129] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23127840354346085, 0.19395442504500007, 0.1905579438930129, 0.19031968398223528] ***
*** finished computation of 7 references, err: [Inf, 0.23127840354346085, 0.19395442504500007, 0.1905579438930129, 0.19031968398223528] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [102, 2, 0]]
** centroid: 1, normalized-entropy: 0.13709947889981755, [(1, 102), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 67, 12]]
** centroid: 2, normalized-entropy: 0.6145715612236268, [(2, 67), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [97, 10, 0]]
** centroid: 3, normalized-entropy: 0.447907858914932, [(1, 97), (2, 10)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 112, 0]]
** centroid: 5, normalized-entropy: 0.2899860470332091, [(1, 6), (2, 112)]
*** center 6: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [12, 86, 0]]
** centroid: 7, normalized-entropy: 0.5363596511250623, [(1, 12), (2, 86)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23695083688721172] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23695083688721172, 0.19131519742494357] ***
*** starting iteration: 2; err: [Inf, 0.23695083688721172, 0.19131519742494357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23695083688721172, 0.19131519742494357, 0.1878868714142507] ***
*** starting iteration: 3; err: [Inf, 0.23695083688721172, 0.19131519742494357, 0.1878868714142507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23695083688721172, 0.19131519742494357, 0.1878868714142507, 0.18724563235425387] ***
*** finished computation of 7 references, err: [Inf, 0.23695083688721172, 0.19131519742494357, 0.1878868714142507, 0.18724563235425387] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [81, 26, 0]]
** centroid: 1, normalized-entropy: 0.7999783611177544, [(1, 81), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 33, 0]]
** centroid: 2, normalized-entropy: 0.9149263727797277, [(1, 67), (2, 33)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 73, 22]]
** centroid: 3, normalized-entropy: 0.7807536250860868, [(2, 73), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [91, 17, 0]]
** centroid: 5, normalized-entropy: 0.6280710155029396, [(1, 91), (2, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 98, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24811802144014128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24811802144014128, 0.17370470745528155] ***
*** finished computation of 7 references, err: [Inf, 0.24811802144014128, 0.17370470745528155] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 20, 18]]
** centroid: 1, normalized-entropy: 0.9980008838722993, [(2, 20), (3, 18)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 48, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [164, 34, 0]]
** centroid: 3, normalized-entropy: 0.6616179061408356, [(1, 164), (2, 34)]
*** center 4: selecting labels [1] (freq >= 1) [from [139, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 8, 0]]
** centroid: 5, normalized-entropy: 0.5225593745369407, [(1, 60), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [25, 51, 0]]
** centroid: 6, normalized-entropy: 0.9138472873262908, [(1, 25), (2, 51)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 99, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17227524679958417] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17227524679958417, 0.1544104948377368] ***
*** finished computation of 7 references, err: [Inf, 0.17227524679958417, 0.1544104948377368] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [35, 15, 0]]
** centroid: 1, normalized-entropy: 0.8812908992306927, [(1, 35), (2, 15)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 108, 5]]
** centroid: 2, normalized-entropy: 0.26144010659136985, [(2, 108), (3, 5)]
*** center 3: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [123, 8, 0]]
** centroid: 4, normalized-entropy: 0.3316727407990799, [(1, 123), (2, 8)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 117, 7]]
** centroid: 5, normalized-entropy: 0.3131950471154111, [(2, 117), (3, 7)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [68, 20, 0]]
** centroid: 6, normalized-entropy: 0.7732266742876346, [(1, 68), (2, 20)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [63, 9, 0]]
** centroid: 7, normalized-entropy: 0.5435644431995963, [(1, 63), (2, 9)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2177584037140034] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2177584037140034, 0.1548101844592788] ***
*** finished computation of 7 references, err: [Inf, 0.2177584037140034, 0.1548101844592788] ***
*** center 1: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [52, 30, 0]]
** centroid: 2, normalized-entropy: 0.9474351361840305, [(1, 52), (2, 30)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [63, 48, 0]]
** centroid: 3, normalized-entropy: 0.9867867202680318, [(1, 63), (2, 48)]
*** center 4: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 83, 22]]
** centroid: 5, normalized-entropy: 0.7405715327916912, [(2, 83), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 84, 0]]
** centroid: 6, normalized-entropy: 0.0922772477445739, [(1, 1), (2, 84)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [84, 2, 0]]
** centroid: 7, normalized-entropy: 0.15935006268563429, [(1, 84), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26275891390721406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26275891390721406, 0.20238931689763795] ***
*** starting iteration: 2; err: [Inf, 0.26275891390721406, 0.20238931689763795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26275891390721406, 0.20238931689763795, 0.19213755977061764] ***
*** starting iteration: 3; err: [Inf, 0.26275891390721406, 0.20238931689763795, 0.19213755977061764] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26275891390721406, 0.20238931689763795, 0.19213755977061764, 0.1878280050740731] ***
*** finished computation of 7 references, err: [Inf, 0.26275891390721406, 0.20238931689763795, 0.19213755977061764, 0.1878280050740731] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 120, 18]]
** centroid: 1, normalized-entropy: 0.5586293734521991, [(2, 120), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [57, 35, 0]]
** centroid: 3, normalized-entropy: 0.9583485169215336, [(1, 57), (2, 35)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [12, 94, 0]]
** centroid: 4, normalized-entropy: 0.5095157180881823, [(1, 12), (2, 94)]
*** center 5: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [55, 11, 0]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(1, 55), (2, 11)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3065071913163768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3065071913163768, 0.2327926751432837] ***
*** starting iteration: 2; err: [Inf, 0.3065071913163768, 0.2327926751432837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3065071913163768, 0.2327926751432837, 0.21091048256249756] ***
*** starting iteration: 3; err: [Inf, 0.3065071913163768, 0.2327926751432837, 0.21091048256249756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3065071913163768, 0.2327926751432837, 0.21091048256249756, 0.20044139582200207] ***
*** finished computation of 7 references, err: [Inf, 0.3065071913163768, 0.2327926751432837, 0.21091048256249756, 0.20044139582200207] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [95, 15, 0]]
** centroid: 1, normalized-entropy: 0.5746356978376794, [(1, 95), (2, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [24, 98, 0]]
** centroid: 3, normalized-entropy: 0.7153220528038851, [(1, 24), (2, 98)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 100, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [59, 18, 0]]
** centroid: 6, normalized-entropy: 0.7845191388986644, [(1, 59), (2, 18)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 46, 12]]
** centroid: 7, normalized-entropy: 0.7355085815538399, [(2, 46), (3, 12)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2556889986080387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2556889986080387, 0.19662965246095046] ***
*** starting iteration: 2; err: [Inf, 0.2556889986080387, 0.19662965246095046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2556889986080387, 0.19662965246095046, 0.19239326595081604] ***
*** starting iteration: 3; err: [Inf, 0.2556889986080387, 0.19662965246095046, 0.19239326595081604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2556889986080387, 0.19662965246095046, 0.19239326595081604, 0.1904868688462288] ***
*** finished computation of 7 references, err: [Inf, 0.2556889986080387, 0.19662965246095046, 0.19239326595081604, 0.1904868688462288] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [13, 92, 0]]
** centroid: 1, normalized-entropy: 0.5402129815415571, [(1, 13), (2, 92)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [36, 41, 0]]
** centroid: 2, normalized-entropy: 0.9969562518473082, [(1, 36), (2, 41)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 77, 22]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(2, 77), (3, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [60, 35, 0]]
** centroid: 4, normalized-entropy: 0.9494520153879484, [(1, 60), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [84, 2, 0]]
** centroid: 5, normalized-entropy: 0.15935006268563429, [(1, 84), (2, 2)]
*** center 6: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24586201409946332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24586201409946332, 0.19098269374965615] ***
*** finished computation of 7 references, err: [Inf, 0.24586201409946332, 0.19098269374965615] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 6, 0]]
** centroid: 1, normalized-entropy: 0.42622865699814483, [(1, 63), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [83, 10, 0]]
** centroid: 2, normalized-entropy: 0.49241092131589825, [(1, 83), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 77, 18]]
** centroid: 3, normalized-entropy: 0.7003691487575897, [(2, 77), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 79, 0]]
** centroid: 5, normalized-entropy: 0.9450667261866617, [(1, 45), (2, 79)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 88, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22572871765632857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22572871765632857, 0.19375415349370803] ***
*** finished computation of 7 references, err: [Inf, 0.22572871765632857, 0.19375415349370803] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [8, 108, 0]]
** centroid: 1, normalized-entropy: 0.36205125173399805, [(1, 8), (2, 108)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 18, 0]]
** centroid: 2, normalized-entropy: 0.7897492536625221, [(1, 58), (2, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 116, 12]]
** centroid: 4, normalized-entropy: 0.44886448872302936, [(2, 116), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [99, 32, 0]]
** centroid: 5, normalized-entropy: 0.8020771588818675, [(1, 99), (2, 32)]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 1, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [43, 2, 0]]
** centroid: 7, normalized-entropy: 0.2623112196143368, [(1, 43), (2, 2)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21350767583246977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21350767583246977, 0.1896522839636035] ***
*** finished computation of 7 references, err: [Inf, 0.21350767583246977, 0.1896522839636035] ***
*** center 1: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 63, 22]]
** centroid: 2, normalized-entropy: 0.8249658680139929, [(2, 63), (3, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 55, 0]]
** centroid: 4, normalized-entropy: 0.9999392847706552, [(1, 54), (2, 55)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [15, 78, 0]]
** centroid: 5, normalized-entropy: 0.6373874992221911, [(1, 15), (2, 78)]
*** center 6: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 51, 0]]
** centroid: 7, normalized-entropy: 0.5313400141801669, [(1, 7), (2, 51)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39579902924233684] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39579902924233684, 0.3102984934179644] ***
*** starting iteration: 2; err: [Inf, 0.39579902924233684, 0.3102984934179644] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39579902924233684, 0.3102984934179644, 0.303608648720905] ***
*** starting iteration: 3; err: [Inf, 0.39579902924233684, 0.3102984934179644, 0.303608648720905] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39579902924233684, 0.3102984934179644, 0.303608648720905, 0.3021212487842317] ***
*** starting iteration: 4; err: [Inf, 0.39579902924233684, 0.3102984934179644, 0.303608648720905, 0.3021212487842317] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39579902924233684, 0.3102984934179644, 0.303608648720905, 0.3021212487842317, 0.3011796048006138] ***
*** finished computation of 3 references, err: [Inf, 0.39579902924233684, 0.3102984934179644, 0.303608648720905, 0.3021212487842317, 0.3011796048006138] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [72, 168, 18]]
** centroid: 1, normalized-entropy: 0.7475638551433442, [(1, 72), (2, 168), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [115, 92, 0]]
** centroid: 2, normalized-entropy: 0.9910760598382222, [(1, 115), (2, 92)]
*** center 3: selecting labels [1] (freq >= 2) [from [201, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4301304130352799] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4301304130352799, 0.300397286535069] ***
*** starting iteration: 2; err: [Inf, 0.4301304130352799, 0.300397286535069] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4301304130352799, 0.300397286535069, 0.29563386080510123] ***
*** starting iteration: 3; err: [Inf, 0.4301304130352799, 0.300397286535069, 0.29563386080510123] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4301304130352799, 0.300397286535069, 0.29563386080510123, 0.2939443022160717] ***
*** starting iteration: 4; err: [Inf, 0.4301304130352799, 0.300397286535069, 0.29563386080510123, 0.2939443022160717] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4301304130352799, 0.300397286535069, 0.29563386080510123, 0.2939443022160717, 0.29343570645960015] ***
*** finished computation of 3 references, err: [Inf, 0.4301304130352799, 0.300397286535069, 0.29563386080510123, 0.2939443022160717, 0.29343570645960015] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [226, 15, 0]]
** centroid: 1, normalized-entropy: 0.33627603979859144, [(1, 226), (2, 15)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 206, 12]]
** centroid: 2, normalized-entropy: 0.30745653299528936, [(2, 206), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [152, 56, 0]]
** centroid: 3, normalized-entropy: 0.8403586716091169, [(1, 152), (2, 56)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.417648164323647] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.417648164323647, 0.3003886571625943] ***
*** starting iteration: 2; err: [Inf, 0.417648164323647, 0.3003886571625943] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.417648164323647, 0.3003886571625943, 0.29265804108193166] ***
*** starting iteration: 3; err: [Inf, 0.417648164323647, 0.3003886571625943, 0.29265804108193166] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.417648164323647, 0.3003886571625943, 0.29265804108193166, 0.28959016625335193] ***
*** starting iteration: 4; err: [Inf, 0.417648164323647, 0.3003886571625943, 0.29265804108193166, 0.28959016625335193] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.417648164323647, 0.3003886571625943, 0.29265804108193166, 0.28959016625335193, 0.2883118699476503] ***
*** starting iteration: 5; err: [Inf, 0.417648164323647, 0.3003886571625943, 0.29265804108193166, 0.28959016625335193, 0.2883118699476503] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.417648164323647, 0.3003886571625943, 0.29265804108193166, 0.28959016625335193, 0.2883118699476503, 0.287708573573935] ***
*** finished computation of 3 references, err: [Inf, 0.417648164323647, 0.3003886571625943, 0.29265804108193166, 0.28959016625335193, 0.2883118699476503, 0.287708573573935] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [221, 19, 0]]
** centroid: 1, normalized-entropy: 0.399236060687958, [(1, 221), (2, 19)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 187, 22]]
** centroid: 2, normalized-entropy: 0.48546076074591343, [(2, 187), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [177, 41, 0]]
** centroid: 3, normalized-entropy: 0.6974237075565963, [(1, 177), (2, 41)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2090944578205501] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2090944578205501, 0.15622952075216462] ***
*** starting iteration: 2; err: [Inf, 0.2090944578205501, 0.15622952075216462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2090944578205501, 0.15622952075216462, 0.14874308224622015] ***
*** starting iteration: 3; err: [Inf, 0.2090944578205501, 0.15622952075216462, 0.14874308224622015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2090944578205501, 0.15622952075216462, 0.14874308224622015, 0.14694580280951955] ***
*** starting iteration: 4; err: [Inf, 0.2090944578205501, 0.15622952075216462, 0.14874308224622015, 0.14694580280951955] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2090944578205501, 0.15622952075216462, 0.14874308224622015, 0.14694580280951955, 0.1465878081969447] ***
*** finished computation of 7 references, err: [Inf, 0.2090944578205501, 0.15622952075216462, 0.14874308224622015, 0.14694580280951955, 0.1465878081969447] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [78, 41, 0]]
** centroid: 1, normalized-entropy: 0.9290950300256173, [(1, 78), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [8, 112, 0]]
** centroid: 2, normalized-entropy: 0.3533593350214213, [(1, 8), (2, 112)]
*** center 3: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [99, 3, 0]]
** centroid: 4, normalized-entropy: 0.1914332548141934, [(1, 99), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 9, 0]]
** centroid: 5, normalized-entropy: 0.5387379148665815, [(1, 64), (2, 9)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 95, 18]]
** centroid: 6, normalized-entropy: 0.6326131852700402, [(2, 95), (3, 18)]
*** center 7: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18590244997564684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18590244997564684, 0.15581306351999427] ***
*** starting iteration: 2; err: [Inf, 0.18590244997564684, 0.15581306351999427] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18590244997564684, 0.15581306351999427, 0.15275099450328583] ***
*** starting iteration: 3; err: [Inf, 0.18590244997564684, 0.15581306351999427, 0.15275099450328583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18590244997564684, 0.15581306351999427, 0.15275099450328583, 0.15186001307217925] ***
*** finished computation of 7 references, err: [Inf, 0.18590244997564684, 0.15581306351999427, 0.15275099450328583, 0.15186001307217925] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 69, 12]]
** centroid: 1, normalized-entropy: 0.6051865766334207, [(2, 69), (3, 12)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 18, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 54), (2, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [1, 93, 0]]
** centroid: 4, normalized-entropy: 0.0849955598367127, [(1, 1), (2, 93)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [27, 97, 0]]
** centroid: 5, normalized-entropy: 0.7560228567532862, [(1, 27), (2, 97)]
*** center 6: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20344831082534262] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20344831082534262, 0.15860096593785367] ***
*** starting iteration: 2; err: [Inf, 0.20344831082534262, 0.15860096593785367] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20344831082534262, 0.15860096593785367, 0.1525139848941119] ***
*** starting iteration: 3; err: [Inf, 0.20344831082534262, 0.15860096593785367, 0.1525139848941119] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20344831082534262, 0.15860096593785367, 0.1525139848941119, 0.1504482588195975] ***
*** starting iteration: 4; err: [Inf, 0.20344831082534262, 0.15860096593785367, 0.1525139848941119, 0.1504482588195975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20344831082534262, 0.15860096593785367, 0.1525139848941119, 0.1504482588195975, 0.14893270272802075] ***
*** starting iteration: 5; err: [Inf, 0.20344831082534262, 0.15860096593785367, 0.1525139848941119, 0.1504482588195975, 0.14893270272802075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20344831082534262, 0.15860096593785367, 0.1525139848941119, 0.1504482588195975, 0.14893270272802075, 0.14702038383921204] ***
*** starting iteration: 6; err: [Inf, 0.20344831082534262, 0.15860096593785367, 0.1525139848941119, 0.1504482588195975, 0.14893270272802075, 0.14702038383921204] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20344831082534262, 0.15860096593785367, 0.1525139848941119, 0.1504482588195975, 0.14893270272802075, 0.14702038383921204, 0.14610139269876046] ***
*** finished computation of 7 references, err: [Inf, 0.20344831082534262, 0.15860096593785367, 0.1525139848941119, 0.1504482588195975, 0.14893270272802075, 0.14702038383921204, 0.14610139269876046] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 65, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [31, 48, 0]]
** centroid: 2, normalized-entropy: 0.966334094295981, [(1, 31), (2, 48)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [78, 45, 0]]
** centroid: 3, normalized-entropy: 0.9474351361840305, [(1, 78), (2, 45)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 82, 22]]
** centroid: 4, normalized-entropy: 0.7444131797881749, [(2, 82), (3, 22)]
*** center 5: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [83, 7, 0]]
** centroid: 7, normalized-entropy: 0.39430023792747493, [(1, 83), (2, 7)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4805270035725993] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4805270035725993, 0.3588531077000405] ***
*** finished computation of 3 references, err: [Inf, 0.4805270035725993, 0.3588531077000405] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [321, 18, 0]]
** centroid: 1, normalized-entropy: 0.2994113292359872, [(1, 321), (2, 18)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [48, 190, 1]]
** centroid: 2, normalized-entropy: 0.4803418726057483, [(1, 48), (2, 190), (3, 1)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [19, 52, 17]]
** centroid: 3, normalized-entropy: 0.8733331515919018, [(1, 19), (2, 52), (3, 17)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3518679712408933] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3518679712408933, 0.304232037885916] ***
*** finished computation of 3 references, err: [Inf, 0.3518679712408933, 0.304232037885916] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [174, 97, 0]]
** centroid: 1, normalized-entropy: 0.9409545248600336, [(1, 174), (2, 97)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [204, 23, 0]]
** centroid: 2, normalized-entropy: 0.4731709773724287, [(1, 204), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 157, 12]]
** centroid: 3, normalized-entropy: 0.36966637365118243, [(2, 157), (3, 12)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5465152756285866] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5465152756285866, 0.32790915430642137] ***
*** finished computation of 3 references, err: [Inf, 0.5465152756285866, 0.32790915430642137] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [106, 193, 22]]
** centroid: 1, normalized-entropy: 0.7786824819715965, [(1, 106), (2, 193), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 51, 0]]
** centroid: 2, normalized-entropy: 0.9919924034538556, [(1, 63), (2, 51)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [229, 3, 0]]
** centroid: 3, normalized-entropy: 0.09965101678117703, [(1, 229), (2, 3)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3176805976353161] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3176805976353161, 0.24564587674872787] ***
*** starting iteration: 2; err: [Inf, 0.3176805976353161, 0.24564587674872787] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3176805976353161, 0.24564587674872787, 0.23949430465653493] ***
*** starting iteration: 3; err: [Inf, 0.3176805976353161, 0.24564587674872787, 0.23949430465653493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3176805976353161, 0.24564587674872787, 0.23949430465653493, 0.23762243721066406] ***
*** starting iteration: 4; err: [Inf, 0.3176805976353161, 0.24564587674872787, 0.23949430465653493, 0.23762243721066406] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3176805976353161, 0.24564587674872787, 0.23949430465653493, 0.23762243721066406, 0.2365304145321541] ***
*** starting iteration: 5; err: [Inf, 0.3176805976353161, 0.24564587674872787, 0.23949430465653493, 0.23762243721066406, 0.2365304145321541] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3176805976353161, 0.24564587674872787, 0.23949430465653493, 0.23762243721066406, 0.2365304145321541, 0.2359635550976247] ***
*** finished computation of 3 references, err: [Inf, 0.3176805976353161, 0.24564587674872787, 0.23949430465653493, 0.23762243721066406, 0.2365304145321541, 0.2359635550976247] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [33, 192, 18]]
** centroid: 1, normalized-entropy: 0.5917056096548898, [(1, 33), (2, 192), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [233, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [122, 68, 0]]
** centroid: 3, normalized-entropy: 0.9409217747114994, [(1, 122), (2, 68)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4130086000852365] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4130086000852365, 0.23181828909108174] ***
*** starting iteration: 2; err: [Inf, 0.4130086000852365, 0.23181828909108174] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4130086000852365, 0.23181828909108174, 0.23090385238261618] ***
*** finished computation of 3 references, err: [Inf, 0.4130086000852365, 0.23181828909108174, 0.23090385238261618] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [188, 47, 0]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(1, 188), (2, 47)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [190, 46, 0]]
** centroid: 2, normalized-entropy: 0.7116412885080164, [(1, 190), (2, 46)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 184, 12]]
** centroid: 3, normalized-entropy: 0.3322866302216152, [(2, 184), (3, 12)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31113367530515884] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31113367530515884, 0.24146158602703055] ***
*** starting iteration: 2; err: [Inf, 0.31113367530515884, 0.24146158602703055] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31113367530515884, 0.24146158602703055, 0.22704108805162482] ***
*** starting iteration: 3; err: [Inf, 0.31113367530515884, 0.24146158602703055, 0.22704108805162482] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31113367530515884, 0.24146158602703055, 0.22704108805162482, 0.22286195764590383] ***
*** starting iteration: 4; err: [Inf, 0.31113367530515884, 0.24146158602703055, 0.22704108805162482, 0.22286195764590383] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31113367530515884, 0.24146158602703055, 0.22704108805162482, 0.22286195764590383, 0.2226052255477237] ***
*** finished computation of 3 references, err: [Inf, 0.31113367530515884, 0.24146158602703055, 0.22704108805162482, 0.22286195764590383, 0.2226052255477237] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [241, 16, 0]]
** centroid: 1, normalized-entropy: 0.3363392183323188, [(1, 241), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [157, 45, 0]]
** centroid: 2, normalized-entropy: 0.76519738913387, [(1, 157), (2, 45)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 186, 22]]
** centroid: 3, normalized-entropy: 0.48702128315977294, [(2, 186), (3, 22)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.175279120870589] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.175279120870589, 0.14976774984040764] ***
*** starting iteration: 2; err: [Inf, 0.175279120870589, 0.14976774984040764] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.175279120870589, 0.14976774984040764, 0.14714320941173398] ***
*** starting iteration: 3; err: [Inf, 0.175279120870589, 0.14976774984040764, 0.14714320941173398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.175279120870589, 0.14976774984040764, 0.14714320941173398, 0.1464226512957152] ***
*** finished computation of 7 references, err: [Inf, 0.175279120870589, 0.14976774984040764, 0.14714320941173398, 0.1464226512957152] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 99, 4]]
** centroid: 1, normalized-entropy: 0.23692474671835093, [(2, 99), (3, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [76, 18, 0]]
** centroid: 2, normalized-entropy: 0.7045767128725937, [(1, 76), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 120, 14]]
** centroid: 3, normalized-entropy: 0.4830306801456181, [(2, 120), (3, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 11, 0]]
** centroid: 4, normalized-entropy: 0.6115516951951333, [(1, 62), (2, 11)]
*** center 5: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [97, 11, 0]]
** centroid: 6, normalized-entropy: 0.4748384883008607, [(1, 97), (2, 11)]
*** center 7: selecting labels [1] (freq >= 2) [from [85, 1, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.17809640398942636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17809640398942636, 0.16017816772173415] ***
*** starting iteration: 2; err: [Inf, 0.17809640398942636, 0.16017816772173415] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17809640398942636, 0.16017816772173415, 0.15496324634771497] ***
*** starting iteration: 3; err: [Inf, 0.17809640398942636, 0.16017816772173415, 0.15496324634771497] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17809640398942636, 0.16017816772173415, 0.15496324634771497, 0.15045486208584824] ***
*** starting iteration: 4; err: [Inf, 0.17809640398942636, 0.16017816772173415, 0.15496324634771497, 0.15045486208584824] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17809640398942636, 0.16017816772173415, 0.15496324634771497, 0.15045486208584824, 0.14795695882670393] ***
*** starting iteration: 5; err: [Inf, 0.17809640398942636, 0.16017816772173415, 0.15496324634771497, 0.15045486208584824, 0.14795695882670393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17809640398942636, 0.16017816772173415, 0.15496324634771497, 0.15045486208584824, 0.14795695882670393, 0.146900058073317] ***
*** starting iteration: 6; err: [Inf, 0.17809640398942636, 0.16017816772173415, 0.15496324634771497, 0.15045486208584824, 0.14795695882670393, 0.146900058073317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17809640398942636, 0.16017816772173415, 0.15496324634771497, 0.15045486208584824, 0.14795695882670393, 0.146900058073317, 0.14661917057044727] ***
*** finished computation of 7 references, err: [Inf, 0.17809640398942636, 0.16017816772173415, 0.15496324634771497, 0.15045486208584824, 0.14795695882670393, 0.146900058073317, 0.14661917057044727] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 73, 12]]
** centroid: 1, normalized-entropy: 0.5873116089977589, [(2, 73), (3, 12)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [10, 64, 0]]
** centroid: 2, normalized-entropy: 0.5713549744279549, [(1, 10), (2, 64)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 94, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 45, 0]]
** centroid: 4, normalized-entropy: 0.9884783227925916, [(1, 58), (2, 45)]
*** center 5: selecting labels [1] (freq >= 2) [from [101, 1, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.216088918259722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.216088918259722, 0.1599948759708411] ***
*** starting iteration: 2; err: [Inf, 0.216088918259722, 0.1599948759708411] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.216088918259722, 0.1599948759708411, 0.1542576165727411] ***
*** starting iteration: 3; err: [Inf, 0.216088918259722, 0.1599948759708411, 0.1542576165727411] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.216088918259722, 0.1599948759708411, 0.1542576165727411, 0.15231490057280128] ***
*** starting iteration: 4; err: [Inf, 0.216088918259722, 0.1599948759708411, 0.1542576165727411, 0.15231490057280128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.216088918259722, 0.1599948759708411, 0.1542576165727411, 0.15231490057280128, 0.15181499798789153] ***
*** finished computation of 7 references, err: [Inf, 0.216088918259722, 0.1599948759708411, 0.1542576165727411, 0.15231490057280128, 0.15181499798789153] ***
*** center 1: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 77, 15]]
** centroid: 2, normalized-entropy: 0.6415410585827175, [(2, 77), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [103, 13, 0]]
** centroid: 3, normalized-entropy: 0.5061252137852816, [(1, 103), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 41, 0]]
** centroid: 4, normalized-entropy: 0.98460399620868, [(1, 55), (2, 41)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 64, 7]]
** centroid: 5, normalized-entropy: 0.4645149440905521, [(2, 64), (3, 7)]
*** center 6: selecting labels [1] (freq >= 2) [from [135, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [32, 52, 0]]
** centroid: 7, normalized-entropy: 0.9587118829771317, [(1, 32), (2, 52)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22548468767975768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22548468767975768, 0.19131395275573115] ***
*** starting iteration: 2; err: [Inf, 0.22548468767975768, 0.19131395275573115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22548468767975768, 0.19131395275573115, 0.1873351799445814] ***
*** starting iteration: 3; err: [Inf, 0.22548468767975768, 0.19131395275573115, 0.1873351799445814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22548468767975768, 0.19131395275573115, 0.1873351799445814, 0.18641083061837735] ***
*** finished computation of 7 references, err: [Inf, 0.22548468767975768, 0.19131395275573115, 0.1873351799445814, 0.18641083061837735] ***
*** center 1: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [86, 13, 0]]
** centroid: 2, normalized-entropy: 0.5610284863400681, [(1, 86), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 78, 18]]
** centroid: 3, normalized-entropy: 0.6962122601251459, [(2, 78), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [27, 69, 0]]
** centroid: 5, normalized-entropy: 0.8571484374283717, [(1, 27), (2, 69)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [62, 3, 0]]
** centroid: 6, normalized-entropy: 0.269828447703074, [(1, 62), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 97, 0]]
** centroid: 7, normalized-entropy: 0.19439185783157603, [(1, 3), (2, 97)]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9410518302733871, 0.9350068631505758, 0.9340178501855149, 0.9300348252444062, 0.9250268232304161, 0.9210048371725018, 0.9180078281874687, 0.9179988371605138, 0.8999988011964061, 0.887989786193379, 0.877982773192354, 0.8730197263131395, 0.8660307013600427, 0.8540096983210755, 0.7960025894157631]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9410518302733871
finished with 16
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.20717620049537658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20717620049537658, 0.14844875329703294] ***
*** starting iteration: 2; err: [Inf, 0.20717620049537658, 0.14844875329703294] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20717620049537658, 0.14844875329703294, 0.1444691582938944] ***
*** starting iteration: 3; err: [Inf, 0.20717620049537658, 0.14844875329703294, 0.1444691582938944] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20717620049537658, 0.14844875329703294, 0.1444691582938944, 0.14404211620516752] ***
*** finished computation of 7 references, err: [Inf, 0.20717620049537658, 0.14844875329703294, 0.1444691582938944, 0.14404211620516752] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [37, 75, 0]]
** centroid: 1, normalized-entropy: 0.9152908478124059, [(1, 37), (2, 75)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [90, 3, 0]]
** centroid: 2, normalized-entropy: 0.2055925081850832, [(1, 90), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 77, 12]]
** centroid: 4, normalized-entropy: 0.5705411428522262, [(2, 77), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 23, 0]]
** centroid: 5, normalized-entropy: 0.8607781176165941, [(1, 58), (2, 23)]
*** center 6: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 99, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20316549524239771] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20316549524239771, 0.1567779136555935] ***
*** starting iteration: 2; err: [Inf, 0.20316549524239771, 0.1567779136555935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20316549524239771, 0.1567779136555935, 0.14882125015588696] ***
*** starting iteration: 3; err: [Inf, 0.20316549524239771, 0.1567779136555935, 0.14882125015588696] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20316549524239771, 0.1567779136555935, 0.14882125015588696, 0.14621121213735044] ***
*** finished computation of 7 references, err: [Inf, 0.20316549524239771, 0.1567779136555935, 0.14882125015588696, 0.14621121213735044] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [43, 56, 0]]
** centroid: 1, normalized-entropy: 0.9875257101057102, [(1, 43), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [75, 14, 0]]
** centroid: 2, normalized-entropy: 0.6278191534832795, [(1, 75), (2, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 86, 18]]
** centroid: 4, normalized-entropy: 0.6646953053493416, [(2, 86), (3, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 98, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [85, 6, 0]]
** centroid: 7, normalized-entropy: 0.35056382068186565, [(1, 85), (2, 6)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2001448387791147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2001448387791147, 0.14953862709541996] ***
*** starting iteration: 2; err: [Inf, 0.2001448387791147, 0.14953862709541996] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2001448387791147, 0.14953862709541996, 0.14476993731662877] ***
*** starting iteration: 3; err: [Inf, 0.2001448387791147, 0.14953862709541996, 0.14476993731662877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2001448387791147, 0.14953862709541996, 0.14476993731662877, 0.14422514334019423] ***
*** finished computation of 7 references, err: [Inf, 0.2001448387791147, 0.14953862709541996, 0.14476993731662877, 0.14422514334019423] ***
*** center 1: selecting labels [1] (freq >= 2) [from [120, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 82, 22]]
** centroid: 2, normalized-entropy: 0.7444131797881749, [(2, 82), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 22, 0]]
** centroid: 3, normalized-entropy: 0.8158009273789572, [(1, 65), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 51, 0]]
** centroid: 4, normalized-entropy: 0.9994110647387552, [(1, 54), (2, 51)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 91, 0]]
** centroid: 5, normalized-entropy: 0.29518174309075856, [(1, 5), (2, 91)]
*** center 6: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9410518302733871, 0.9350068631505758, 0.9340178501855149, 0.9300348252444062, 0.9250268232304161, 0.922011832191473, 0.9210048371725018, 0.9180078281874687, 0.9179988371605138, 0.8999988011964061, 0.887989786193379, 0.877982773192354, 0.8730197263131395, 0.8660307013600427, 0.8540096983210755, 0.7960025894157631]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9410518302733871
finished with 16
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9410518302733871, 0.9350068631505758, 0.9340178501855149, 0.9300348252444062, 0.9250268232304161, 0.922011832191473, 0.9210048371725018, 0.9180078281874687, 0.9179988371605138, 0.8999988011964061, 0.887989786193379, 0.877982773192354, 0.8730197263131395, 0.8660307013600427, 0.8540096983210755, 0.7960025894157631]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9410518302733871
finished with 17
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.23188550942633357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23188550942633357, 0.19900778282780546] ***
*** starting iteration: 2; err: [Inf, 0.23188550942633357, 0.19900778282780546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23188550942633357, 0.19900778282780546, 0.19297256994595355] ***
*** starting iteration: 3; err: [Inf, 0.23188550942633357, 0.19900778282780546, 0.19297256994595355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23188550942633357, 0.19900778282780546, 0.19297256994595355, 0.19087485728405035] ***
*** starting iteration: 4; err: [Inf, 0.23188550942633357, 0.19900778282780546, 0.19297256994595355, 0.19087485728405035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23188550942633357, 0.19900778282780546, 0.19297256994595355, 0.19087485728405035, 0.18912000613784916] ***
*** starting iteration: 5; err: [Inf, 0.23188550942633357, 0.19900778282780546, 0.19297256994595355, 0.19087485728405035, 0.18912000613784916] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23188550942633357, 0.19900778282780546, 0.19297256994595355, 0.19087485728405035, 0.18912000613784916, 0.18695170559442123] ***
*** starting iteration: 6; err: [Inf, 0.23188550942633357, 0.19900778282780546, 0.19297256994595355, 0.19087485728405035, 0.18912000613784916, 0.18695170559442123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23188550942633357, 0.19900778282780546, 0.19297256994595355, 0.19087485728405035, 0.18912000613784916, 0.18695170559442123, 0.18425453134725714] ***
*** starting iteration: 7; err: [Inf, 0.23188550942633357, 0.19900778282780546, 0.19297256994595355, 0.19087485728405035, 0.18912000613784916, 0.18695170559442123, 0.18425453134725714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23188550942633357, 0.19900778282780546, 0.19297256994595355, 0.19087485728405035, 0.18912000613784916, 0.18695170559442123, 0.18425453134725714, 0.18345101001356412] ***
*** finished computation of 7 references, err: [Inf, 0.23188550942633357, 0.19900778282780546, 0.19297256994595355, 0.19087485728405035, 0.18912000613784916, 0.18695170559442123, 0.18425453134725714, 0.18345101001356412] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 75, 4]]
** centroid: 1, normalized-entropy: 0.2890794597316462, [(2, 75), (3, 4)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 75, 14]]
** centroid: 2, normalized-entropy: 0.6278191534832795, [(2, 75), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [68, 24, 0]]
** centroid: 3, normalized-entropy: 0.828055725379504, [(1, 68), (2, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 58, 0]]
** centroid: 5, normalized-entropy: 0.9786239947589973, [(1, 41), (2, 58)]
*** center 6: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [86, 28, 0]]
** centroid: 7, normalized-entropy: 0.8042522359016421, [(1, 86), (2, 28)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3101268300711215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3101268300711215, 0.21579588084297346] ***
*** starting iteration: 2; err: [Inf, 0.3101268300711215, 0.21579588084297346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3101268300711215, 0.21579588084297346, 0.20056288005753437] ***
*** starting iteration: 3; err: [Inf, 0.3101268300711215, 0.21579588084297346, 0.20056288005753437] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3101268300711215, 0.21579588084297346, 0.20056288005753437, 0.1946505445238577] ***
*** starting iteration: 4; err: [Inf, 0.3101268300711215, 0.21579588084297346, 0.20056288005753437, 0.1946505445238577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3101268300711215, 0.21579588084297346, 0.20056288005753437, 0.1946505445238577, 0.19238545282253774] ***
*** starting iteration: 5; err: [Inf, 0.3101268300711215, 0.21579588084297346, 0.20056288005753437, 0.1946505445238577, 0.19238545282253774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3101268300711215, 0.21579588084297346, 0.20056288005753437, 0.1946505445238577, 0.19238545282253774, 0.1917237461484533] ***
*** finished computation of 7 references, err: [Inf, 0.3101268300711215, 0.21579588084297346, 0.20056288005753437, 0.1946505445238577, 0.19238545282253774, 0.1917237461484533] ***
*** center 1: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [112, 17, 0]]
** centroid: 3, normalized-entropy: 0.5623077238596306, [(1, 112), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [42, 48, 0]]
** centroid: 4, normalized-entropy: 0.9967916319816367, [(1, 42), (2, 48)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [59, 36, 0]]
** centroid: 5, normalized-entropy: 0.9572951876544017, [(1, 59), (2, 36)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 88, 12]]
** centroid: 6, normalized-entropy: 0.5293608652873645, [(2, 88), (3, 12)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 88, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24625918634914454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24625918634914454, 0.20266127641378404] ***
*** starting iteration: 2; err: [Inf, 0.24625918634914454, 0.20266127641378404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24625918634914454, 0.20266127641378404, 0.19467012353124155] ***
*** starting iteration: 3; err: [Inf, 0.24625918634914454, 0.20266127641378404, 0.19467012353124155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24625918634914454, 0.20266127641378404, 0.19467012353124155, 0.19189254850246196] ***
*** starting iteration: 4; err: [Inf, 0.24625918634914454, 0.20266127641378404, 0.19467012353124155, 0.19189254850246196] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24625918634914454, 0.20266127641378404, 0.19467012353124155, 0.19189254850246196, 0.1899048955859742] ***
*** starting iteration: 5; err: [Inf, 0.24625918634914454, 0.20266127641378404, 0.19467012353124155, 0.19189254850246196, 0.1899048955859742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24625918634914454, 0.20266127641378404, 0.19467012353124155, 0.19189254850246196, 0.1899048955859742, 0.18895107236826258] ***
*** finished computation of 7 references, err: [Inf, 0.24625918634914454, 0.20266127641378404, 0.19467012353124155, 0.19189254850246196, 0.1899048955859742, 0.18895107236826258] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [86, 2, 0]]
** centroid: 2, normalized-entropy: 0.1564910629057016, [(1, 86), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 92, 0]]
** centroid: 5, normalized-entropy: 0.3322866302216152, [(1, 6), (2, 92)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [16, 76, 0]]
** centroid: 6, normalized-entropy: 0.6665783579949205, [(1, 16), (2, 76)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 77, 22]]
** centroid: 7, normalized-entropy: 0.7642045065086204, [(2, 77), (3, 22)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 17)
[0.9410518302733871, 0.9350068631505758, 0.9340178501855149, 0.9300348252444062, 0.9250268232304161, 0.922011832191473, 0.9210048371725018, 0.9180078281874687, 0.9179988371605138, 0.9070357782932633, 0.8999988011964061, 0.887989786193379, 0.877982773192354, 0.8730197263131395, 0.8660307013600427, 0.8540096983210755, 0.7960025894157631]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9410518302733871
finished with 17
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9410518302733871, 0.9350068631505758, 0.9340178501855149, 0.9300348252444062, 0.9250268232304161, 0.922011832191473, 0.9210048371725018, 0.9180078281874687, 0.9179988371605138, 0.9070357782932633, 0.8999988011964061, 0.887989786193379, 0.877982773192354, 0.8730197263131395, 0.8660307013600427, 0.8540096983210755, 0.7960025894157631]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9410518302733871
finished with 17
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9410518302733871, 0.9350068631505758, 0.9340178501855149, 0.9300348252444062, 0.9250268232304161, 0.922011832191473, 0.9210048371725018, 0.9180078281874687, 0.9179988371605138, 0.9070357782932633, 0.8999988011964061, 0.887989786193379, 0.877982773192354, 0.8730197263131395, 0.8660307013600427, 0.8540096983210755, 0.7960025894157631]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9410518302733871
finished with 17
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9410518302733871, 0.9350068631505758, 0.9340178501855149, 0.9300348252444062, 0.9250268232304161, 0.922011832191473, 0.9210048371725018, 0.9180078281874687, 0.9179988371605138, 0.9070357782932633, 0.8999988011964061, 0.887989786193379, 0.877982773192354, 0.8730197263131395, 0.8660307013600427, 0.8540096983210755, 0.7960025894157631]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9410518302733871
finished with 18
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.2257575498575504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2257575498575504, 0.19426680173629943] ***
*** starting iteration: 2; err: [Inf, 0.2257575498575504, 0.19426680173629943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2257575498575504, 0.19426680173629943, 0.19004181755671412] ***
*** starting iteration: 3; err: [Inf, 0.2257575498575504, 0.19426680173629943, 0.19004181755671412] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2257575498575504, 0.19426680173629943, 0.19004181755671412, 0.18871147766698157] ***
*** finished computation of 7 references, err: [Inf, 0.2257575498575504, 0.19426680173629943, 0.19004181755671412, 0.18871147766698157] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [9, 88, 0]]
** centroid: 1, normalized-entropy: 0.44569317772256106, [(1, 9), (2, 88)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 30, 0]]
** centroid: 2, normalized-entropy: 0.9034535552068337, [(1, 64), (2, 30)]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 112, 12]]
** centroid: 4, normalized-entropy: 0.45868581620054033, [(2, 112), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 47, 0]]
** centroid: 5, normalized-entropy: 0.9878444130876813, [(1, 61), (2, 47)]
*** center 6: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21364425233629597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21364425233629597, 0.18988975269759112] ***
*** starting iteration: 2; err: [Inf, 0.21364425233629597, 0.18988975269759112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21364425233629597, 0.18988975269759112, 0.1878033015651869] ***
*** starting iteration: 3; err: [Inf, 0.21364425233629597, 0.18988975269759112, 0.1878033015651869] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21364425233629597, 0.18988975269759112, 0.1878033015651869, 0.18675644873842798] ***
*** finished computation of 7 references, err: [Inf, 0.21364425233629597, 0.18988975269759112, 0.1878033015651869, 0.18675644873842798] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 104, 1]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 31, 0]]
** centroid: 2, normalized-entropy: 0.9360814319397586, [(1, 57), (2, 31)]
*** center 3: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 91, 17]]
** centroid: 4, normalized-entropy: 0.6280710155029396, [(2, 91), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [83, 11, 0]]
** centroid: 5, normalized-entropy: 0.5207375686265202, [(1, 83), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [81, 3, 0]]
** centroid: 6, normalized-entropy: 0.2222848306856879, [(1, 81), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [74, 20, 0]]
** centroid: 7, normalized-entropy: 0.7467366074830678, [(1, 74), (2, 20)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22989302676316278] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22989302676316278, 0.19008196897614843] ***
*** starting iteration: 2; err: [Inf, 0.22989302676316278, 0.19008196897614843] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22989302676316278, 0.19008196897614843, 0.18648043511200812] ***
*** starting iteration: 3; err: [Inf, 0.22989302676316278, 0.19008196897614843, 0.18648043511200812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22989302676316278, 0.19008196897614843, 0.18648043511200812, 0.18454132092672623] ***
*** finished computation of 7 references, err: [Inf, 0.22989302676316278, 0.19008196897614843, 0.18648043511200812, 0.18454132092672623] ***
*** center 1: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [86, 11, 0]]
** centroid: 2, normalized-entropy: 0.5100930822965021, [(1, 86), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 63, 22]]
** centroid: 3, normalized-entropy: 0.8249658680139929, [(2, 63), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [125, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [31, 55, 0]]
** centroid: 5, normalized-entropy: 0.9430685934712909, [(1, 31), (2, 55)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [48, 45, 0]]
** centroid: 6, normalized-entropy: 0.9992492479956566, [(1, 48), (2, 45)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 73, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 18)
[0.9410518302733871, 0.9350068631505758, 0.9340178501855149, 0.9300348252444062, 0.9260428092763422, 0.9250268232304161, 0.922011832191473, 0.9210048371725018, 0.9180078281874687, 0.9179988371605138, 0.9070357782932633, 0.8999988011964061, 0.887989786193379, 0.877982773192354, 0.8730197263131395, 0.8660307013600427, 0.8540096983210755, 0.7960025894157631]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9410518302733871
finished with 19
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.18717013493548895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18717013493548895, 0.15303418524472553] ***
*** starting iteration: 2; err: [Inf, 0.18717013493548895, 0.15303418524472553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18717013493548895, 0.15303418524472553, 0.1498000050226095] ***
*** starting iteration: 3; err: [Inf, 0.18717013493548895, 0.15303418524472553, 0.1498000050226095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18717013493548895, 0.15303418524472553, 0.1498000050226095, 0.148629121998998] ***
*** starting iteration: 4; err: [Inf, 0.18717013493548895, 0.15303418524472553, 0.1498000050226095, 0.148629121998998] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18717013493548895, 0.15303418524472553, 0.1498000050226095, 0.148629121998998, 0.14802233229294934] ***
*** finished computation of 7 references, err: [Inf, 0.18717013493548895, 0.15303418524472553, 0.1498000050226095, 0.148629121998998, 0.14802233229294934] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 121, 12]]
** centroid: 1, normalized-entropy: 0.4372222722013413, [(2, 121), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [61, 43, 0]]
** centroid: 3, normalized-entropy: 0.9782823907994933, [(1, 61), (2, 43)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 6, 0]]
** centroid: 4, normalized-entropy: 0.4441260450795996, [(1, 59), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [104, 12, 0]]
** centroid: 5, normalized-entropy: 0.47983202361612853, [(1, 104), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [80, 5, 0]]
** centroid: 6, normalized-entropy: 0.32275695889739825, [(1, 80), (2, 5)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 90, 0]]
** centroid: 7, normalized-entropy: 0.2055925081850832, [(1, 3), (2, 90)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19657884852809682] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19657884852809682, 0.149364000573676] ***
*** starting iteration: 2; err: [Inf, 0.19657884852809682, 0.149364000573676] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19657884852809682, 0.149364000573676, 0.14472549159622364] ***
*** starting iteration: 3; err: [Inf, 0.19657884852809682, 0.149364000573676, 0.14472549159622364] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19657884852809682, 0.149364000573676, 0.14472549159622364, 0.14391524530527694] ***
*** finished computation of 7 references, err: [Inf, 0.19657884852809682, 0.149364000573676, 0.14472549159622364, 0.14391524530527694] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [68, 9, 0]]
** centroid: 1, normalized-entropy: 0.5203346157857599, [(1, 68), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [85, 19, 0]]
** centroid: 2, normalized-entropy: 0.6859315226878925, [(1, 85), (2, 19)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 75, 17]]
** centroid: 3, normalized-entropy: 0.6904285855304167, [(2, 75), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [38, 59, 0]]
** centroid: 5, normalized-entropy: 0.9659212398860464, [(1, 38), (2, 59)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 98, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20267675310579958] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20267675310579958, 0.14625339889745304] ***
*** starting iteration: 2; err: [Inf, 0.20267675310579958, 0.14625339889745304] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20267675310579958, 0.14625339889745304, 0.14240829774626773] ***
*** starting iteration: 3; err: [Inf, 0.20267675310579958, 0.14625339889745304, 0.14240829774626773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20267675310579958, 0.14625339889745304, 0.14240829774626773, 0.14182325677787033] ***
*** finished computation of 7 references, err: [Inf, 0.20267675310579958, 0.14625339889745304, 0.14240829774626773, 0.14182325677787033] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [69, 7, 0]]
** centroid: 1, normalized-entropy: 0.4434581453896789, [(1, 69), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [90, 21, 0]]
** centroid: 2, normalized-entropy: 0.699772221773307, [(1, 90), (2, 21)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 72, 22]]
** centroid: 3, normalized-entropy: 0.7849920887641585, [(2, 72), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [17, 73, 0]]
** centroid: 5, normalized-entropy: 0.6991413063352633, [(1, 17), (2, 73)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 74, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
finished with 11 centroids; started with 7
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.18167138569825328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18167138569825328, 0.1675916747362353] ***
*** starting iteration: 2; err: [Inf, 0.18167138569825328, 0.1675916747362353] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18167138569825328, 0.1675916747362353, 0.16179551176936366] ***
*** starting iteration: 3; err: [Inf, 0.18167138569825328, 0.1675916747362353, 0.16179551176936366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18167138569825328, 0.1675916747362353, 0.16179551176936366, 0.15781923173973336] ***
*** starting iteration: 4; err: [Inf, 0.18167138569825328, 0.1675916747362353, 0.16179551176936366, 0.15781923173973336] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18167138569825328, 0.1675916747362353, 0.16179551176936366, 0.15781923173973336, 0.15506225455226377] ***
*** starting iteration: 5; err: [Inf, 0.18167138569825328, 0.1675916747362353, 0.16179551176936366, 0.15781923173973336, 0.15506225455226377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18167138569825328, 0.1675916747362353, 0.16179551176936366, 0.15781923173973336, 0.15506225455226377, 0.15376081694616006] ***
*** starting iteration: 6; err: [Inf, 0.18167138569825328, 0.1675916747362353, 0.16179551176936366, 0.15781923173973336, 0.15506225455226377, 0.15376081694616006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18167138569825328, 0.1675916747362353, 0.16179551176936366, 0.15781923173973336, 0.15506225455226377, 0.15376081694616006, 0.1528740900424309] ***
*** finished computation of 7 references, err: [Inf, 0.18167138569825328, 0.1675916747362353, 0.16179551176936366, 0.15781923173973336, 0.15506225455226377, 0.15376081694616006, 0.1528740900424309] ***
*** center 1: selecting labels [1] (freq >= 1) [from [224, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 70, 25]]
** centroid: 2, normalized-entropy: 0.8314743880097292, [(2, 70), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [149, 7, 0]]
** centroid: 3, normalized-entropy: 0.26419969320029135, [(1, 149), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [51, 90, 0]]
** centroid: 4, normalized-entropy: 0.9440870182837795, [(1, 51), (2, 90)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 85, 1]]
** centroid: 5, normalized-entropy: 0.09140162014739266, [(2, 85), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [136, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [22, 140, 0]]
** centroid: 7, normalized-entropy: 0.5731393980555147, [(1, 22), (2, 140)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19120189204718918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19120189204718918, 0.1520324892513454] ***
*** starting iteration: 2; err: [Inf, 0.19120189204718918, 0.1520324892513454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19120189204718918, 0.1520324892513454, 0.15012312293238939] ***
*** starting iteration: 3; err: [Inf, 0.19120189204718918, 0.1520324892513454, 0.15012312293238939] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19120189204718918, 0.1520324892513454, 0.15012312293238939, 0.1495285552535206] ***
*** finished computation of 7 references, err: [Inf, 0.19120189204718918, 0.1520324892513454, 0.15012312293238939, 0.1495285552535206] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [36, 31, 0]]
** centroid: 1, normalized-entropy: 0.995978956518722, [(1, 36), (2, 31)]
*** center 2: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 46, 2]]
** centroid: 3, normalized-entropy: 0.24988229283318547, [(2, 46), (3, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [54, 4, 0]]
** centroid: 4, normalized-entropy: 0.36205125173399805, [(1, 54), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [25, 44, 0]]
** centroid: 5, normalized-entropy: 0.9445911819316588, [(1, 25), (2, 44)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [69, 11, 0]]
** centroid: 6, normalized-entropy: 0.5776539033535634, [(1, 69), (2, 11)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 62, 10]]
** centroid: 7, normalized-entropy: 0.581321498763703, [(2, 62), (3, 10)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18171518952958285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18171518952958285, 0.14816517222020775] ***
*** starting iteration: 2; err: [Inf, 0.18171518952958285, 0.14816517222020775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18171518952958285, 0.14816517222020775, 0.1451893505724147] ***
*** starting iteration: 3; err: [Inf, 0.18171518952958285, 0.14816517222020775, 0.1451893505724147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18171518952958285, 0.14816517222020775, 0.1451893505724147, 0.14445761772291735] ***
*** finished computation of 7 references, err: [Inf, 0.18171518952958285, 0.14816517222020775, 0.1451893505724147, 0.14445761772291735] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 41, 15]]
** centroid: 1, normalized-entropy: 0.8383729377099398, [(2, 41), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [17, 70, 0]]
** centroid: 2, normalized-entropy: 0.7126368350739763, [(1, 17), (2, 70)]
*** center 3: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 8, 0]]
** centroid: 4, normalized-entropy: 0.5328350630342235, [(1, 58), (2, 8)]
*** center 5: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 66, 0]]
** centroid: 6, normalized-entropy: 0.11190990870168394, [(1, 1), (2, 66)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [64, 5, 0]]
** centroid: 7, normalized-entropy: 0.3750514064240124, [(1, 64), (2, 5)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1885699425339699] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1885699425339699, 0.173723808018025] ***
*** starting iteration: 2; err: [Inf, 0.1885699425339699, 0.173723808018025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1885699425339699, 0.173723808018025, 0.16318849405646324] ***
*** starting iteration: 3; err: [Inf, 0.1885699425339699, 0.173723808018025, 0.16318849405646324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1885699425339699, 0.173723808018025, 0.16318849405646324, 0.1531999520510435] ***
*** starting iteration: 4; err: [Inf, 0.1885699425339699, 0.173723808018025, 0.16318849405646324, 0.1531999520510435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1885699425339699, 0.173723808018025, 0.16318849405646324, 0.1531999520510435, 0.14836164162214846] ***
*** starting iteration: 5; err: [Inf, 0.1885699425339699, 0.173723808018025, 0.16318849405646324, 0.1531999520510435, 0.14836164162214846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1885699425339699, 0.173723808018025, 0.16318849405646324, 0.1531999520510435, 0.14836164162214846, 0.14628267452307045] ***
*** starting iteration: 6; err: [Inf, 0.1885699425339699, 0.173723808018025, 0.16318849405646324, 0.1531999520510435, 0.14836164162214846, 0.14628267452307045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1885699425339699, 0.173723808018025, 0.16318849405646324, 0.1531999520510435, 0.14836164162214846, 0.14628267452307045, 0.14577404685411602] ***
*** finished computation of 7 references, err: [Inf, 0.1885699425339699, 0.173723808018025, 0.16318849405646324, 0.1531999520510435, 0.14836164162214846, 0.14628267452307045, 0.14577404685411602] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [77, 4, 0]]
** centroid: 1, normalized-entropy: 0.2837689703721877, [(1, 77), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 25, 0]]
** centroid: 2, normalized-entropy: 0.9271587399898307, [(1, 48), (2, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [18, 54, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 18), (2, 54)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 63, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 50, 14]]
** centroid: 6, normalized-entropy: 0.7578784625383954, [(2, 50), (3, 14)]
*** center 7: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2027687391359359] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2027687391359359, 0.1531291480138898] ***
*** starting iteration: 2; err: [Inf, 0.2027687391359359, 0.1531291480138898] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2027687391359359, 0.1531291480138898, 0.14763027734775097] ***
*** starting iteration: 3; err: [Inf, 0.2027687391359359, 0.1531291480138898, 0.14763027734775097] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2027687391359359, 0.1531291480138898, 0.14763027734775097, 0.1424980414621532] ***
*** starting iteration: 4; err: [Inf, 0.2027687391359359, 0.1531291480138898, 0.14763027734775097, 0.1424980414621532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2027687391359359, 0.1531291480138898, 0.14763027734775097, 0.1424980414621532, 0.1413074196362868] ***
*** starting iteration: 5; err: [Inf, 0.2027687391359359, 0.1531291480138898, 0.14763027734775097, 0.1424980414621532, 0.1413074196362868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2027687391359359, 0.1531291480138898, 0.14763027734775097, 0.1424980414621532, 0.1413074196362868, 0.14104836792871356] ***
*** finished computation of 7 references, err: [Inf, 0.2027687391359359, 0.1531291480138898, 0.14763027734775097, 0.1424980414621532, 0.1413074196362868, 0.14104836792871356] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [2, 75, 0]]
** centroid: 1, normalized-entropy: 0.17378132267943294, [(1, 2), (2, 75)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 40, 12]]
** centroid: 2, normalized-entropy: 0.7793498372920851, [(2, 40), (3, 12)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 71, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [76, 7, 0]]
** centroid: 4, normalized-entropy: 0.4172806906708316, [(1, 76), (2, 7)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 4, 0]]
** centroid: 5, normalized-entropy: 0.38094658570539014, [(1, 50), (2, 4)]
*** center 6: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [88, 2, 0]]
** centroid: 7, normalized-entropy: 0.1537421803287618, [(1, 88), (2, 2)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18973311775864568] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18973311775864568, 0.15670762319117784] ***
*** starting iteration: 2; err: [Inf, 0.18973311775864568, 0.15670762319117784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18973311775864568, 0.15670762319117784, 0.1498046180587262] ***
*** starting iteration: 3; err: [Inf, 0.18973311775864568, 0.15670762319117784, 0.1498046180587262] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18973311775864568, 0.15670762319117784, 0.1498046180587262, 0.14601834416156634] ***
*** starting iteration: 4; err: [Inf, 0.18973311775864568, 0.15670762319117784, 0.1498046180587262, 0.14601834416156634] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18973311775864568, 0.15670762319117784, 0.1498046180587262, 0.14601834416156634, 0.14498912769556047] ***
*** starting iteration: 5; err: [Inf, 0.18973311775864568, 0.15670762319117784, 0.1498046180587262, 0.14601834416156634, 0.14498912769556047] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18973311775864568, 0.15670762319117784, 0.1498046180587262, 0.14601834416156634, 0.14498912769556047, 0.14477608822844923] ***
*** finished computation of 7 references, err: [Inf, 0.18973311775864568, 0.15670762319117784, 0.1498046180587262, 0.14601834416156634, 0.14498912769556047, 0.14477608822844923] ***
*** center 1: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 65, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 13, 0]]
** centroid: 4, normalized-entropy: 0.698124573139618, [(1, 56), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [70, 3, 0]]
** centroid: 5, normalized-entropy: 0.24729443986205674, [(1, 70), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 80, 0]]
** centroid: 6, normalized-entropy: 0.2243269603450881, [(1, 3), (2, 80)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 36, 16]]
** centroid: 7, normalized-entropy: 0.8904916402194913, [(2, 36), (3, 16)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22109677607007325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22109677607007325, 0.16225954890064895] ***
*** starting iteration: 2; err: [Inf, 0.22109677607007325, 0.16225954890064895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22109677607007325, 0.16225954890064895, 0.15421309560444205] ***
*** starting iteration: 3; err: [Inf, 0.22109677607007325, 0.16225954890064895, 0.15421309560444205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22109677607007325, 0.16225954890064895, 0.15421309560444205, 0.15176349986344576] ***
*** starting iteration: 4; err: [Inf, 0.22109677607007325, 0.16225954890064895, 0.15421309560444205, 0.15176349986344576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22109677607007325, 0.16225954890064895, 0.15421309560444205, 0.15176349986344576, 0.1500849878732115] ***
*** starting iteration: 5; err: [Inf, 0.22109677607007325, 0.16225954890064895, 0.15421309560444205, 0.15176349986344576, 0.1500849878732115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22109677607007325, 0.16225954890064895, 0.15421309560444205, 0.15176349986344576, 0.1500849878732115, 0.14914921284094454] ***
*** finished computation of 7 references, err: [Inf, 0.22109677607007325, 0.16225954890064895, 0.15421309560444205, 0.15176349986344576, 0.1500849878732115, 0.14914921284094454] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [3, 63, 0]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(1, 3), (2, 63)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 66, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [58, 7, 0]]
** centroid: 3, normalized-entropy: 0.49291577961610966, [(1, 58), (2, 7)]
*** center 4: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [87, 11, 0]]
** centroid: 6, normalized-entropy: 0.5066503344840895, [(1, 87), (2, 11)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 44, 12]]
** centroid: 7, normalized-entropy: 0.7495952572594798, [(2, 44), (3, 12)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24927996202372016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24927996202372016, 0.1680032702172175] ***
*** starting iteration: 2; err: [Inf, 0.24927996202372016, 0.1680032702172175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24927996202372016, 0.1680032702172175, 0.15833647078089416] ***
*** starting iteration: 3; err: [Inf, 0.24927996202372016, 0.1680032702172175, 0.15833647078089416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24927996202372016, 0.1680032702172175, 0.15833647078089416, 0.15503820679336786] ***
*** starting iteration: 4; err: [Inf, 0.24927996202372016, 0.1680032702172175, 0.15833647078089416, 0.15503820679336786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24927996202372016, 0.1680032702172175, 0.15833647078089416, 0.15503820679336786, 0.15350149888545275] ***
*** starting iteration: 5; err: [Inf, 0.24927996202372016, 0.1680032702172175, 0.15833647078089416, 0.15503820679336786, 0.15350149888545275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24927996202372016, 0.1680032702172175, 0.15833647078089416, 0.15503820679336786, 0.15350149888545275, 0.1520912912832573] ***
*** starting iteration: 6; err: [Inf, 0.24927996202372016, 0.1680032702172175, 0.15833647078089416, 0.15503820679336786, 0.15350149888545275, 0.1520912912832573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24927996202372016, 0.1680032702172175, 0.15833647078089416, 0.15503820679336786, 0.15350149888545275, 0.1520912912832573, 0.15110456884978338] ***
*** finished computation of 7 references, err: [Inf, 0.24927996202372016, 0.1680032702172175, 0.15833647078089416, 0.15503820679336786, 0.15350149888545275, 0.1520912912832573, 0.15110456884978338] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [40, 9, 0]]
** centroid: 1, normalized-entropy: 0.6880476235340797, [(1, 40), (2, 9)]
*** center 2: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [16, 64, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 16), (2, 64)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 45, 16]]
** centroid: 5, normalized-entropy: 0.8301899714180444, [(2, 45), (3, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1886449561342597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1886449561342597, 0.16194621039321647] ***
*** starting iteration: 2; err: [Inf, 0.1886449561342597, 0.16194621039321647] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1886449561342597, 0.16194621039321647, 0.15594462481047958] ***
*** starting iteration: 3; err: [Inf, 0.1886449561342597, 0.16194621039321647, 0.15594462481047958] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1886449561342597, 0.16194621039321647, 0.15594462481047958, 0.15269246278330684] ***
*** starting iteration: 4; err: [Inf, 0.1886449561342597, 0.16194621039321647, 0.15594462481047958, 0.15269246278330684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1886449561342597, 0.16194621039321647, 0.15594462481047958, 0.15269246278330684, 0.1498378014303744] ***
*** starting iteration: 5; err: [Inf, 0.1886449561342597, 0.16194621039321647, 0.15594462481047958, 0.15269246278330684, 0.1498378014303744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1886449561342597, 0.16194621039321647, 0.15594462481047958, 0.15269246278330684, 0.1498378014303744, 0.14887884154357017] ***
*** finished computation of 7 references, err: [Inf, 0.1886449561342597, 0.16194621039321647, 0.15594462481047958, 0.15269246278330684, 0.1498378014303744, 0.14887884154357017] ***
*** center 1: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 79, 11]]
** centroid: 2, normalized-entropy: 0.5357150195407704, [(2, 79), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [11, 79, 0]]
** centroid: 3, normalized-entropy: 0.5357150195407704, [(1, 11), (2, 79)]
*** center 4: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [37, 45, 0]]
** centroid: 6, normalized-entropy: 0.9931231770192241, [(1, 37), (2, 45)]
*** center 7: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20395850462280213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20395850462280213, 0.1564351858664304] ***
*** starting iteration: 2; err: [Inf, 0.20395850462280213, 0.1564351858664304] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20395850462280213, 0.1564351858664304, 0.14826717183552682] ***
*** starting iteration: 3; err: [Inf, 0.20395850462280213, 0.1564351858664304, 0.14826717183552682] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20395850462280213, 0.1564351858664304, 0.14826717183552682, 0.1453230646327138] ***
*** starting iteration: 4; err: [Inf, 0.20395850462280213, 0.1564351858664304, 0.14826717183552682, 0.1453230646327138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20395850462280213, 0.1564351858664304, 0.14826717183552682, 0.1453230646327138, 0.14431719348393382] ***
*** starting iteration: 5; err: [Inf, 0.20395850462280213, 0.1564351858664304, 0.14826717183552682, 0.1453230646327138, 0.14431719348393382] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20395850462280213, 0.1564351858664304, 0.14826717183552682, 0.1453230646327138, 0.14431719348393382, 0.1439539546277374] ***
*** finished computation of 7 references, err: [Inf, 0.20395850462280213, 0.1564351858664304, 0.14826717183552682, 0.1453230646327138, 0.14431719348393382, 0.1439539546277374] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [66, 38, 0]]
** centroid: 1, normalized-entropy: 0.9470622432515328, [(1, 66), (2, 38)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [34, 16, 0]]
** centroid: 2, normalized-entropy: 0.9043814577244941, [(1, 34), (2, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [51, 22, 0]]
** centroid: 4, normalized-entropy: 0.8829589691462253, [(1, 51), (2, 22)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 59, 18]]
** centroid: 5, normalized-entropy: 0.7845191388986644, [(2, 59), (3, 18)]
*** center 6: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 58, 0]]
** centroid: 7, normalized-entropy: 0.12394986771100755, [(1, 1), (2, 58)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23260637466982007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23260637466982007, 0.1645409373883158] ***
*** starting iteration: 2; err: [Inf, 0.23260637466982007, 0.1645409373883158] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23260637466982007, 0.1645409373883158, 0.15694913194933907] ***
*** starting iteration: 3; err: [Inf, 0.23260637466982007, 0.1645409373883158, 0.15694913194933907] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23260637466982007, 0.1645409373883158, 0.15694913194933907, 0.15263181288167835] ***
*** starting iteration: 4; err: [Inf, 0.23260637466982007, 0.1645409373883158, 0.15694913194933907, 0.15263181288167835] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23260637466982007, 0.1645409373883158, 0.15694913194933907, 0.15263181288167835, 0.15036256705503911] ***
*** starting iteration: 5; err: [Inf, 0.23260637466982007, 0.1645409373883158, 0.15694913194933907, 0.15263181288167835, 0.15036256705503911] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23260637466982007, 0.1645409373883158, 0.15694913194933907, 0.15263181288167835, 0.15036256705503911, 0.1492337374985218] ***
*** starting iteration: 6; err: [Inf, 0.23260637466982007, 0.1645409373883158, 0.15694913194933907, 0.15263181288167835, 0.15036256705503911, 0.1492337374985218] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23260637466982007, 0.1645409373883158, 0.15694913194933907, 0.15263181288167835, 0.15036256705503911, 0.1492337374985218, 0.14857658223249018] ***
*** finished computation of 7 references, err: [Inf, 0.23260637466982007, 0.1645409373883158, 0.15694913194933907, 0.15263181288167835, 0.15036256705503911, 0.1492337374985218, 0.14857658223249018] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [7, 67, 0]]
** centroid: 1, normalized-entropy: 0.45162282218200417, [(1, 7), (2, 67)]
*** center 2: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [39, 25, 0]]
** centroid: 4, normalized-entropy: 0.9652016987500656, [(1, 39), (2, 25)]
*** center 5: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 83, 17]]
** centroid: 6, normalized-entropy: 0.6577047787442196, [(2, 83), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [50, 29, 0]]
** centroid: 7, normalized-entropy: 0.9484103893488014, [(1, 50), (2, 29)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24866583226248623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24866583226248623, 0.18237149295024574] ***
*** starting iteration: 2; err: [Inf, 0.24866583226248623, 0.18237149295024574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24866583226248623, 0.18237149295024574, 0.16566816322412342] ***
*** starting iteration: 3; err: [Inf, 0.24866583226248623, 0.18237149295024574, 0.16566816322412342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24866583226248623, 0.18237149295024574, 0.16566816322412342, 0.15744992538914085] ***
*** starting iteration: 4; err: [Inf, 0.24866583226248623, 0.18237149295024574, 0.16566816322412342, 0.15744992538914085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24866583226248623, 0.18237149295024574, 0.16566816322412342, 0.15744992538914085, 0.15184738495014607] ***
*** starting iteration: 5; err: [Inf, 0.24866583226248623, 0.18237149295024574, 0.16566816322412342, 0.15744992538914085, 0.15184738495014607] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24866583226248623, 0.18237149295024574, 0.16566816322412342, 0.15744992538914085, 0.15184738495014607, 0.14883335532061756] ***
*** starting iteration: 6; err: [Inf, 0.24866583226248623, 0.18237149295024574, 0.16566816322412342, 0.15744992538914085, 0.15184738495014607, 0.14883335532061756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24866583226248623, 0.18237149295024574, 0.16566816322412342, 0.15744992538914085, 0.15184738495014607, 0.14883335532061756, 0.14686527634598315] ***
*** starting iteration: 7; err: [Inf, 0.24866583226248623, 0.18237149295024574, 0.16566816322412342, 0.15744992538914085, 0.15184738495014607, 0.14883335532061756, 0.14686527634598315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24866583226248623, 0.18237149295024574, 0.16566816322412342, 0.15744992538914085, 0.15184738495014607, 0.14883335532061756, 0.14686527634598315, 0.14569602615572513] ***
*** starting iteration: 8; err: [Inf, 0.24866583226248623, 0.18237149295024574, 0.16566816322412342, 0.15744992538914085, 0.15184738495014607, 0.14883335532061756, 0.14686527634598315, 0.14569602615572513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24866583226248623, 0.18237149295024574, 0.16566816322412342, 0.15744992538914085, 0.15184738495014607, 0.14883335532061756, 0.14686527634598315, 0.14569602615572513, 0.1448398403506726] ***
*** finished computation of 7 references, err: [Inf, 0.24866583226248623, 0.18237149295024574, 0.16566816322412342, 0.15744992538914085, 0.15184738495014607, 0.14883335532061756, 0.14686527634598315, 0.14569602615572513, 0.1448398403506726] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 78, 16]]
** centroid: 1, normalized-entropy: 0.6581912658132184, [(2, 78), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [2, 73, 0]]
** centroid: 2, normalized-entropy: 0.1773894531859976, [(1, 2), (2, 73)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [39, 36, 0]]
** centroid: 3, normalized-entropy: 0.998845535995202, [(1, 39), (2, 36)]
*** center 4: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [65, 26, 0]]
** centroid: 6, normalized-entropy: 0.8631205685666311, [(1, 65), (2, 26)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [44, 1, 0]]
** centroid: 7, normalized-entropy: 0.1537421803287618, [(1, 44), (2, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2184329681172967] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2184329681172967, 0.1769062396455556] ***
*** starting iteration: 2; err: [Inf, 0.2184329681172967, 0.1769062396455556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2184329681172967, 0.1769062396455556, 0.1619851124417037] ***
*** starting iteration: 3; err: [Inf, 0.2184329681172967, 0.1769062396455556, 0.1619851124417037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2184329681172967, 0.1769062396455556, 0.1619851124417037, 0.15686417906358838] ***
*** starting iteration: 4; err: [Inf, 0.2184329681172967, 0.1769062396455556, 0.1619851124417037, 0.15686417906358838] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2184329681172967, 0.1769062396455556, 0.1619851124417037, 0.15686417906358838, 0.1536462915856391] ***
*** starting iteration: 5; err: [Inf, 0.2184329681172967, 0.1769062396455556, 0.1619851124417037, 0.15686417906358838, 0.1536462915856391] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2184329681172967, 0.1769062396455556, 0.1619851124417037, 0.15686417906358838, 0.1536462915856391, 0.15149423524946906] ***
*** starting iteration: 6; err: [Inf, 0.2184329681172967, 0.1769062396455556, 0.1619851124417037, 0.15686417906358838, 0.1536462915856391, 0.15149423524946906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2184329681172967, 0.1769062396455556, 0.1619851124417037, 0.15686417906358838, 0.1536462915856391, 0.15149423524946906, 0.1502717901885044] ***
*** starting iteration: 7; err: [Inf, 0.2184329681172967, 0.1769062396455556, 0.1619851124417037, 0.15686417906358838, 0.1536462915856391, 0.15149423524946906, 0.1502717901885044] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2184329681172967, 0.1769062396455556, 0.1619851124417037, 0.15686417906358838, 0.1536462915856391, 0.15149423524946906, 0.1502717901885044, 0.14971726644877345] ***
*** finished computation of 7 references, err: [Inf, 0.2184329681172967, 0.1769062396455556, 0.1619851124417037, 0.15686417906358838, 0.1536462915856391, 0.15149423524946906, 0.1502717901885044, 0.14971726644877345] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [76, 4, 0]]
** centroid: 1, normalized-entropy: 0.2863969571159561, [(1, 76), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [7, 63, 0]]
** centroid: 2, normalized-entropy: 0.46899559358928133, [(1, 7), (2, 63)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [38, 14, 0]]
** centroid: 3, normalized-entropy: 0.8403586716091169, [(1, 38), (2, 14)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 79, 14]]
** centroid: 4, normalized-entropy: 0.6111841012714984, [(2, 79), (3, 14)]
*** center 5: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [39, 39, 0]]
** centroid: 7, normalized-entropy: 1.0, [(1, 39), (2, 39)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.195771898037754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.195771898037754, 0.1574443726874888] ***
*** starting iteration: 2; err: [Inf, 0.195771898037754, 0.1574443726874888] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.195771898037754, 0.1574443726874888, 0.1513772481419146] ***
*** starting iteration: 3; err: [Inf, 0.195771898037754, 0.1574443726874888, 0.1513772481419146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.195771898037754, 0.1574443726874888, 0.1513772481419146, 0.14958875736221672] ***
*** starting iteration: 4; err: [Inf, 0.195771898037754, 0.1574443726874888, 0.1513772481419146, 0.14958875736221672] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.195771898037754, 0.1574443726874888, 0.1513772481419146, 0.14958875736221672, 0.1485333839468658] ***
*** starting iteration: 5; err: [Inf, 0.195771898037754, 0.1574443726874888, 0.1513772481419146, 0.14958875736221672, 0.1485333839468658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.195771898037754, 0.1574443726874888, 0.1513772481419146, 0.14958875736221672, 0.1485333839468658, 0.14749649442359805] ***
*** starting iteration: 6; err: [Inf, 0.195771898037754, 0.1574443726874888, 0.1513772481419146, 0.14958875736221672, 0.1485333839468658, 0.14749649442359805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.195771898037754, 0.1574443726874888, 0.1513772481419146, 0.14958875736221672, 0.1485333839468658, 0.14749649442359805, 0.14634180699847638] ***
*** starting iteration: 7; err: [Inf, 0.195771898037754, 0.1574443726874888, 0.1513772481419146, 0.14958875736221672, 0.1485333839468658, 0.14749649442359805, 0.14634180699847638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.195771898037754, 0.1574443726874888, 0.1513772481419146, 0.14958875736221672, 0.1485333839468658, 0.14749649442359805, 0.14634180699847638, 0.14530971849150956] ***
*** starting iteration: 8; err: [Inf, 0.195771898037754, 0.1574443726874888, 0.1513772481419146, 0.14958875736221672, 0.1485333839468658, 0.14749649442359805, 0.14634180699847638, 0.14530971849150956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.195771898037754, 0.1574443726874888, 0.1513772481419146, 0.14958875736221672, 0.1485333839468658, 0.14749649442359805, 0.14634180699847638, 0.14530971849150956, 0.14432588457502424] ***
*** finished computation of 7 references, err: [Inf, 0.195771898037754, 0.1574443726874888, 0.1513772481419146, 0.14958875736221672, 0.1485333839468658, 0.14749649442359805, 0.14634180699847638, 0.14530971849150956, 0.14432588457502424] ***
*** center 1: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 54, 13]]
** centroid: 2, normalized-entropy: 0.709825885194168, [(2, 54), (3, 13)]
*** center 3: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [40, 33, 0]]
** centroid: 4, normalized-entropy: 0.9933570282728464, [(1, 40), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [8, 81, 0]]
** centroid: 5, normalized-entropy: 0.43609466429612137, [(1, 8), (2, 81)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [51, 23, 0]]
** centroid: 6, normalized-entropy: 0.8941071841443881, [(1, 51), (2, 23)]
*** center 7: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20127954358421266] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20127954358421266, 0.15872297491133214] ***
*** starting iteration: 2; err: [Inf, 0.20127954358421266, 0.15872297491133214] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20127954358421266, 0.15872297491133214, 0.15326906433328985] ***
*** starting iteration: 3; err: [Inf, 0.20127954358421266, 0.15872297491133214, 0.15326906433328985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20127954358421266, 0.15872297491133214, 0.15326906433328985, 0.1511721004527062] ***
*** starting iteration: 4; err: [Inf, 0.20127954358421266, 0.15872297491133214, 0.15326906433328985, 0.1511721004527062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20127954358421266, 0.15872297491133214, 0.15326906433328985, 0.1511721004527062, 0.1497573682498187] ***
*** starting iteration: 5; err: [Inf, 0.20127954358421266, 0.15872297491133214, 0.15326906433328985, 0.1511721004527062, 0.1497573682498187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20127954358421266, 0.15872297491133214, 0.15326906433328985, 0.1511721004527062, 0.1497573682498187, 0.14850080160377546] ***
*** starting iteration: 6; err: [Inf, 0.20127954358421266, 0.15872297491133214, 0.15326906433328985, 0.1511721004527062, 0.1497573682498187, 0.14850080160377546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20127954358421266, 0.15872297491133214, 0.15326906433328985, 0.1511721004527062, 0.1497573682498187, 0.14850080160377546, 0.14756717629916966] ***
*** finished computation of 7 references, err: [Inf, 0.20127954358421266, 0.15872297491133214, 0.15326906433328985, 0.1511721004527062, 0.1497573682498187, 0.14850080160377546, 0.14756717629916966] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [39, 38, 0]]
** centroid: 1, normalized-entropy: 0.9998783322990061, [(1, 39), (2, 38)]
*** center 2: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 48, 16]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(2, 48), (3, 16)]
*** center 5: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [82, 7, 0]]
** centroid: 6, normalized-entropy: 0.3974104103699249, [(1, 82), (2, 7)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [22, 29, 0]]
** centroid: 7, normalized-entropy: 0.9863676072907089, [(1, 22), (2, 29)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18442303448542952] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18442303448542952, 0.14863287143595516] ***
*** starting iteration: 2; err: [Inf, 0.18442303448542952, 0.14863287143595516] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18442303448542952, 0.14863287143595516, 0.14537201995961369] ***
*** starting iteration: 3; err: [Inf, 0.18442303448542952, 0.14863287143595516, 0.14537201995961369] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18442303448542952, 0.14863287143595516, 0.14537201995961369, 0.1438070681989193] ***
*** starting iteration: 4; err: [Inf, 0.18442303448542952, 0.14863287143595516, 0.14537201995961369, 0.1438070681989193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18442303448542952, 0.14863287143595516, 0.14537201995961369, 0.1438070681989193, 0.14301920513063668] ***
*** finished computation of 7 references, err: [Inf, 0.18442303448542952, 0.14863287143595516, 0.14537201995961369, 0.1438070681989193, 0.14301920513063668] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [24, 35, 0]]
** centroid: 1, normalized-entropy: 0.9747785474909672, [(1, 24), (2, 35)]
*** center 2: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [45, 7, 0]]
** centroid: 3, normalized-entropy: 0.5699613760403499, [(1, 45), (2, 7)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 63, 12]]
** centroid: 4, normalized-entropy: 0.634309554640566, [(2, 63), (3, 12)]
*** center 5: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 82, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [66, 13, 0]]
** centroid: 7, normalized-entropy: 0.6451006442088483, [(1, 66), (2, 13)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2414696505703032] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2414696505703032, 0.17279651996912435] ***
*** starting iteration: 2; err: [Inf, 0.2414696505703032, 0.17279651996912435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2414696505703032, 0.17279651996912435, 0.15131111619621515] ***
*** starting iteration: 3; err: [Inf, 0.2414696505703032, 0.17279651996912435, 0.15131111619621515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2414696505703032, 0.17279651996912435, 0.15131111619621515, 0.14874693425465374] ***
*** starting iteration: 4; err: [Inf, 0.2414696505703032, 0.17279651996912435, 0.15131111619621515, 0.14874693425465374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2414696505703032, 0.17279651996912435, 0.15131111619621515, 0.14874693425465374, 0.1479753244621679] ***
*** finished computation of 7 references, err: [Inf, 0.2414696505703032, 0.17279651996912435, 0.15131111619621515, 0.14874693425465374, 0.1479753244621679] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 53, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 48, 12]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 48), (3, 12)]
*** center 3: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [62, 10, 0]]
** centroid: 4, normalized-entropy: 0.581321498763703, [(1, 62), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 15, 0]]
** centroid: 5, normalized-entropy: 0.743898745288434, [(1, 56), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [27, 58, 0]]
** centroid: 6, normalized-entropy: 0.9018043446575508, [(1, 27), (2, 58)]
*** center 7: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1704734273739159] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1704734273739159, 0.1607851055599749] ***
*** starting iteration: 2; err: [Inf, 0.1704734273739159, 0.1607851055599749] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1704734273739159, 0.1607851055599749, 0.16022781880013645] ***
*** finished computation of 7 references, err: [Inf, 0.1704734273739159, 0.1607851055599749, 0.16022781880013645] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 61, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [80, 7, 0]]
** centroid: 2, normalized-entropy: 0.40379715049939235, [(1, 80), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [49, 9, 0]]
** centroid: 3, normalized-entropy: 0.6226343162547099, [(1, 49), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [41, 32, 0]]
** centroid: 4, normalized-entropy: 0.9890076795739703, [(1, 41), (2, 32)]
*** center 5: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 36, 10]]
** centroid: 6, normalized-entropy: 0.7553754125614286, [(2, 36), (3, 10)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [27, 48, 0]]
** centroid: 7, normalized-entropy: 0.9426831892554921, [(1, 27), (2, 48)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2298559238538146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2298559238538146, 0.1651846295045689] ***
*** starting iteration: 2; err: [Inf, 0.2298559238538146, 0.1651846295045689] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2298559238538146, 0.1651846295045689, 0.1581272447584197] ***
*** starting iteration: 3; err: [Inf, 0.2298559238538146, 0.1651846295045689, 0.1581272447584197] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2298559238538146, 0.1651846295045689, 0.1581272447584197, 0.15522318072989583] ***
*** starting iteration: 4; err: [Inf, 0.2298559238538146, 0.1651846295045689, 0.1581272447584197, 0.15522318072989583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2298559238538146, 0.1651846295045689, 0.1581272447584197, 0.15522318072989583, 0.15316796100325883] ***
*** starting iteration: 5; err: [Inf, 0.2298559238538146, 0.1651846295045689, 0.1581272447584197, 0.15522318072989583, 0.15316796100325883] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2298559238538146, 0.1651846295045689, 0.1581272447584197, 0.15522318072989583, 0.15316796100325883, 0.15094071468058973] ***
*** starting iteration: 6; err: [Inf, 0.2298559238538146, 0.1651846295045689, 0.1581272447584197, 0.15522318072989583, 0.15316796100325883, 0.15094071468058973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2298559238538146, 0.1651846295045689, 0.1581272447584197, 0.15522318072989583, 0.15316796100325883, 0.15094071468058973, 0.14872074391692877] ***
*** starting iteration: 7; err: [Inf, 0.2298559238538146, 0.1651846295045689, 0.1581272447584197, 0.15522318072989583, 0.15316796100325883, 0.15094071468058973, 0.14872074391692877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2298559238538146, 0.1651846295045689, 0.1581272447584197, 0.15522318072989583, 0.15316796100325883, 0.15094071468058973, 0.14872074391692877, 0.1479913818258792] ***
*** finished computation of 7 references, err: [Inf, 0.2298559238538146, 0.1651846295045689, 0.1581272447584197, 0.15522318072989583, 0.15316796100325883, 0.15094071468058973, 0.14872074391692877, 0.1479913818258792] ***
*** center 1: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 51, 13]]
** centroid: 2, normalized-entropy: 0.7281342378690551, [(2, 51), (3, 13)]
*** center 3: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 59, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [28, 37, 0]]
** centroid: 6, normalized-entropy: 0.9861260846302384, [(1, 28), (2, 37)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [34, 44, 0]]
** centroid: 7, normalized-entropy: 0.98811083652183, [(1, 34), (2, 44)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17646881387755275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17646881387755275, 0.15626236426737158] ***
*** starting iteration: 2; err: [Inf, 0.17646881387755275, 0.15626236426737158] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17646881387755275, 0.15626236426737158, 0.15145476518478246] ***
*** starting iteration: 3; err: [Inf, 0.17646881387755275, 0.15626236426737158, 0.15145476518478246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17646881387755275, 0.15626236426737158, 0.15145476518478246, 0.14862339299172164] ***
*** starting iteration: 4; err: [Inf, 0.17646881387755275, 0.15626236426737158, 0.15145476518478246, 0.14862339299172164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17646881387755275, 0.15626236426737158, 0.15145476518478246, 0.14862339299172164, 0.14652111754380168] ***
*** starting iteration: 5; err: [Inf, 0.17646881387755275, 0.15626236426737158, 0.15145476518478246, 0.14862339299172164, 0.14652111754380168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17646881387755275, 0.15626236426737158, 0.15145476518478246, 0.14862339299172164, 0.14652111754380168, 0.14562184677273035] ***
*** finished computation of 7 references, err: [Inf, 0.17646881387755275, 0.15626236426737158, 0.15145476518478246, 0.14862339299172164, 0.14652111754380168, 0.14562184677273035] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 58, 13]]
** centroid: 1, normalized-entropy: 0.6868088934028034, [(2, 58), (3, 13)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 64, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [27, 46, 0]]
** centroid: 3, normalized-entropy: 0.9505668528932193, [(1, 27), (2, 46)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [79, 2, 0]]
** centroid: 4, normalized-entropy: 0.16702680404522793, [(1, 79), (2, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [48, 32, 0]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(1, 48), (2, 32)]
*** center 7: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17164292037300766] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17164292037300766, 0.1467984701320529] ***
*** starting iteration: 2; err: [Inf, 0.17164292037300766, 0.1467984701320529] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17164292037300766, 0.1467984701320529, 0.14351919118873774] ***
*** starting iteration: 3; err: [Inf, 0.17164292037300766, 0.1467984701320529, 0.14351919118873774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17164292037300766, 0.1467984701320529, 0.14351919118873774, 0.1422311736131087] ***
*** starting iteration: 4; err: [Inf, 0.17164292037300766, 0.1467984701320529, 0.14351919118873774, 0.1422311736131087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17164292037300766, 0.1467984701320529, 0.14351919118873774, 0.1422311736131087, 0.14125823059678078] ***
*** finished computation of 7 references, err: [Inf, 0.17164292037300766, 0.1467984701320529, 0.14351919118873774, 0.1422311736131087, 0.14125823059678078] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [11, 63, 0]]
** centroid: 1, normalized-entropy: 0.6064481901491525, [(1, 11), (2, 63)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 26, 0]]
** centroid: 2, normalized-entropy: 0.9352691398683568, [(1, 48), (2, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [43, 23, 0]]
** centroid: 4, normalized-entropy: 0.9327076126690367, [(1, 43), (2, 23)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 75, 13]]
** centroid: 5, normalized-entropy: 0.6041234581483739, [(2, 75), (3, 13)]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17778674666397273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17778674666397273, 0.15485143223777414] ***
*** starting iteration: 2; err: [Inf, 0.17778674666397273, 0.15485143223777414] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17778674666397273, 0.15485143223777414, 0.14759466945938765] ***
*** starting iteration: 3; err: [Inf, 0.17778674666397273, 0.15485143223777414, 0.14759466945938765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17778674666397273, 0.15485143223777414, 0.14759466945938765, 0.14404963303823023] ***
*** starting iteration: 4; err: [Inf, 0.17778674666397273, 0.15485143223777414, 0.14759466945938765, 0.14404963303823023] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17778674666397273, 0.15485143223777414, 0.14759466945938765, 0.14404963303823023, 0.14235326780192553] ***
*** starting iteration: 5; err: [Inf, 0.17778674666397273, 0.15485143223777414, 0.14759466945938765, 0.14404963303823023, 0.14235326780192553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17778674666397273, 0.15485143223777414, 0.14759466945938765, 0.14404963303823023, 0.14235326780192553, 0.14113422356918454] ***
*** starting iteration: 6; err: [Inf, 0.17778674666397273, 0.15485143223777414, 0.14759466945938765, 0.14404963303823023, 0.14235326780192553, 0.14113422356918454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17778674666397273, 0.15485143223777414, 0.14759466945938765, 0.14404963303823023, 0.14235326780192553, 0.14113422356918454, 0.14073147518187762] ***
*** finished computation of 7 references, err: [Inf, 0.17778674666397273, 0.15485143223777414, 0.14759466945938765, 0.14404963303823023, 0.14235326780192553, 0.14113422356918454, 0.14073147518187762] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [62, 9, 0]]
** centroid: 1, normalized-entropy: 0.5484866088431741, [(1, 62), (2, 9)]
*** center 2: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 60, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 60, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 20), (2, 60)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [54, 7, 0]]
** centroid: 6, normalized-entropy: 0.5140912790181233, [(1, 54), (2, 7)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 54, 16]]
** centroid: 7, normalized-entropy: 0.775512658133148, [(2, 54), (3, 16)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22752646756079048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22752646756079048, 0.1632784858699888] ***
*** starting iteration: 2; err: [Inf, 0.22752646756079048, 0.1632784858699888] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22752646756079048, 0.1632784858699888, 0.15210161203332245] ***
*** starting iteration: 3; err: [Inf, 0.22752646756079048, 0.1632784858699888, 0.15210161203332245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22752646756079048, 0.1632784858699888, 0.15210161203332245, 0.14871195757202804] ***
*** starting iteration: 4; err: [Inf, 0.22752646756079048, 0.1632784858699888, 0.15210161203332245, 0.14871195757202804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22752646756079048, 0.1632784858699888, 0.15210161203332245, 0.14871195757202804, 0.14707177290786058] ***
*** starting iteration: 5; err: [Inf, 0.22752646756079048, 0.1632784858699888, 0.15210161203332245, 0.14871195757202804, 0.14707177290786058] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22752646756079048, 0.1632784858699888, 0.15210161203332245, 0.14871195757202804, 0.14707177290786058, 0.14648886483721435] ***
*** finished computation of 7 references, err: [Inf, 0.22752646756079048, 0.1632784858699888, 0.15210161203332245, 0.14871195757202804, 0.14707177290786058, 0.14648886483721435] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [44, 22, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 44), (2, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [45, 29, 0]]
** centroid: 5, normalized-entropy: 0.966009606256856, [(1, 45), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [35, 32, 0]]
** centroid: 6, normalized-entropy: 0.9985532860835362, [(1, 35), (2, 32)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 106, 11]]
** centroid: 7, normalized-entropy: 0.4497380872012732, [(2, 106), (3, 11)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24788472198136152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24788472198136152, 0.17137569224555046] ***
*** starting iteration: 2; err: [Inf, 0.24788472198136152, 0.17137569224555046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24788472198136152, 0.17137569224555046, 0.16124328470230104] ***
*** starting iteration: 3; err: [Inf, 0.24788472198136152, 0.17137569224555046, 0.16124328470230104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24788472198136152, 0.17137569224555046, 0.16124328470230104, 0.15624726369744166] ***
*** starting iteration: 4; err: [Inf, 0.24788472198136152, 0.17137569224555046, 0.16124328470230104, 0.15624726369744166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24788472198136152, 0.17137569224555046, 0.16124328470230104, 0.15624726369744166, 0.15331116900779307] ***
*** starting iteration: 5; err: [Inf, 0.24788472198136152, 0.17137569224555046, 0.16124328470230104, 0.15624726369744166, 0.15331116900779307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24788472198136152, 0.17137569224555046, 0.16124328470230104, 0.15624726369744166, 0.15331116900779307, 0.15046444670297204] ***
*** starting iteration: 6; err: [Inf, 0.24788472198136152, 0.17137569224555046, 0.16124328470230104, 0.15624726369744166, 0.15331116900779307, 0.15046444670297204] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24788472198136152, 0.17137569224555046, 0.16124328470230104, 0.15624726369744166, 0.15331116900779307, 0.15046444670297204, 0.14828675176482647] ***
*** starting iteration: 7; err: [Inf, 0.24788472198136152, 0.17137569224555046, 0.16124328470230104, 0.15624726369744166, 0.15331116900779307, 0.15046444670297204, 0.14828675176482647] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24788472198136152, 0.17137569224555046, 0.16124328470230104, 0.15624726369744166, 0.15331116900779307, 0.15046444670297204, 0.14828675176482647, 0.14679350708425046] ***
*** starting iteration: 8; err: [Inf, 0.24788472198136152, 0.17137569224555046, 0.16124328470230104, 0.15624726369744166, 0.15331116900779307, 0.15046444670297204, 0.14828675176482647, 0.14679350708425046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24788472198136152, 0.17137569224555046, 0.16124328470230104, 0.15624726369744166, 0.15331116900779307, 0.15046444670297204, 0.14828675176482647, 0.14679350708425046, 0.1458705808604136] ***
*** finished computation of 7 references, err: [Inf, 0.24788472198136152, 0.17137569224555046, 0.16124328470230104, 0.15624726369744166, 0.15331116900779307, 0.15046444670297204, 0.14828675176482647, 0.14679350708425046, 0.1458705808604136] ***
*** center 1: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [62, 1, 0]]
** centroid: 3, normalized-entropy: 0.11759466565886466, [(1, 62), (2, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 82, 14]]
** centroid: 4, normalized-entropy: 0.5993142373098089, [(2, 82), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [51, 22, 0]]
** centroid: 5, normalized-entropy: 0.8829589691462253, [(1, 51), (2, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 75, 0]]
** centroid: 6, normalized-entropy: 0.10106696361212422, [(1, 1), (2, 75)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [41, 24, 0]]
** centroid: 7, normalized-entropy: 0.9500796252338518, [(1, 41), (2, 24)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1837599351638928] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1837599351638928, 0.1517007843181491] ***
*** starting iteration: 2; err: [Inf, 0.1837599351638928, 0.1517007843181491] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1837599351638928, 0.1517007843181491, 0.1496004821602255] ***
*** starting iteration: 3; err: [Inf, 0.1837599351638928, 0.1517007843181491, 0.1496004821602255] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1837599351638928, 0.1517007843181491, 0.1496004821602255, 0.14922354925051332] ***
*** finished computation of 7 references, err: [Inf, 0.1837599351638928, 0.1517007843181491, 0.1496004821602255, 0.14922354925051332] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [7, 71, 0]]
** centroid: 1, normalized-entropy: 0.4356133734874324, [(1, 7), (2, 71)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 63, 13]]
** centroid: 2, normalized-entropy: 0.6601070987550468, [(2, 63), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [58, 18, 0]]
** centroid: 3, normalized-entropy: 0.7897492536625221, [(1, 58), (2, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [14, 56, 0]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(1, 14), (2, 56)]
*** center 7: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.16220346560515464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16220346560515464, 0.14538523191027344] ***
*** starting iteration: 2; err: [Inf, 0.16220346560515464, 0.14538523191027344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16220346560515464, 0.14538523191027344, 0.14463946504890918] ***
*** finished computation of 7 references, err: [Inf, 0.16220346560515464, 0.14538523191027344, 0.14463946504890918] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [9, 62, 0]]
** centroid: 1, normalized-entropy: 0.5484866088431741, [(1, 9), (2, 62)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [9, 65, 0]]
** centroid: 2, normalized-entropy: 0.5340042729285396, [(1, 9), (2, 65)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 45, 13]]
** centroid: 3, normalized-entropy: 0.7676515870125797, [(2, 45), (3, 13)]
*** center 4: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [45, 6, 0]]
** centroid: 5, normalized-entropy: 0.5225593745369407, [(1, 45), (2, 6)]
*** center 6: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [72, 8, 0]]
** centroid: 7, normalized-entropy: 0.46899559358928133, [(1, 72), (2, 8)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20205692505277692] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20205692505277692, 0.15834762027673424] ***
*** starting iteration: 2; err: [Inf, 0.20205692505277692, 0.15834762027673424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20205692505277692, 0.15834762027673424, 0.15279706823034211] ***
*** starting iteration: 3; err: [Inf, 0.20205692505277692, 0.15834762027673424, 0.15279706823034211] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20205692505277692, 0.15834762027673424, 0.15279706823034211, 0.15036282453685998] ***
*** starting iteration: 4; err: [Inf, 0.20205692505277692, 0.15834762027673424, 0.15279706823034211, 0.15036282453685998] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20205692505277692, 0.15834762027673424, 0.15279706823034211, 0.15036282453685998, 0.14852944622281938] ***
*** starting iteration: 5; err: [Inf, 0.20205692505277692, 0.15834762027673424, 0.15279706823034211, 0.15036282453685998, 0.14852944622281938] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20205692505277692, 0.15834762027673424, 0.15279706823034211, 0.15036282453685998, 0.14852944622281938, 0.14700149869546295] ***
*** starting iteration: 6; err: [Inf, 0.20205692505277692, 0.15834762027673424, 0.15279706823034211, 0.15036282453685998, 0.14852944622281938, 0.14700149869546295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20205692505277692, 0.15834762027673424, 0.15279706823034211, 0.15036282453685998, 0.14852944622281938, 0.14700149869546295, 0.14553781068883836] ***
*** starting iteration: 7; err: [Inf, 0.20205692505277692, 0.15834762027673424, 0.15279706823034211, 0.15036282453685998, 0.14852944622281938, 0.14700149869546295, 0.14553781068883836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20205692505277692, 0.15834762027673424, 0.15279706823034211, 0.15036282453685998, 0.14852944622281938, 0.14700149869546295, 0.14553781068883836, 0.14458947875350714] ***
*** finished computation of 7 references, err: [Inf, 0.20205692505277692, 0.15834762027673424, 0.15279706823034211, 0.15036282453685998, 0.14852944622281938, 0.14700149869546295, 0.14553781068883836, 0.14458947875350714] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [50, 7, 0]]
** centroid: 1, normalized-entropy: 0.5373760853377334, [(1, 50), (2, 7)]
*** center 2: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 76, 0]]
** centroid: 5, normalized-entropy: 0.23292785546981223, [(1, 3), (2, 76)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 56, 14]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(2, 56), (3, 14)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [13, 56, 0]]
** centroid: 7, normalized-entropy: 0.698124573139618, [(1, 13), (2, 56)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20038177308067678] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20038177308067678, 0.15347734640352428] ***
*** starting iteration: 2; err: [Inf, 0.20038177308067678, 0.15347734640352428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20038177308067678, 0.15347734640352428, 0.14433478634245694] ***
*** starting iteration: 3; err: [Inf, 0.20038177308067678, 0.15347734640352428, 0.14433478634245694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20038177308067678, 0.15347734640352428, 0.14433478634245694, 0.14162014895305036] ***
*** starting iteration: 4; err: [Inf, 0.20038177308067678, 0.15347734640352428, 0.14433478634245694, 0.14162014895305036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20038177308067678, 0.15347734640352428, 0.14433478634245694, 0.14162014895305036, 0.14072571317758412] ***
*** finished computation of 7 references, err: [Inf, 0.20038177308067678, 0.15347734640352428, 0.14433478634245694, 0.14162014895305036, 0.14072571317758412] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [77, 16, 0]]
** centroid: 1, normalized-entropy: 0.6623570516079519, [(1, 77), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 7, 0]]
** centroid: 2, normalized-entropy: 0.48791799258948565, [(1, 59), (2, 7)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 61, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [14, 66, 0]]
** centroid: 6, normalized-entropy: 0.6690158350565576, [(1, 14), (2, 66)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 39, 13]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 39), (3, 13)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18061955092288554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18061955092288554, 0.1541579794101417] ***
*** starting iteration: 2; err: [Inf, 0.18061955092288554, 0.1541579794101417] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18061955092288554, 0.1541579794101417, 0.14835751227103175] ***
*** starting iteration: 3; err: [Inf, 0.18061955092288554, 0.1541579794101417, 0.14835751227103175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18061955092288554, 0.1541579794101417, 0.14835751227103175, 0.14595831537246703] ***
*** starting iteration: 4; err: [Inf, 0.18061955092288554, 0.1541579794101417, 0.14835751227103175, 0.14595831537246703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18061955092288554, 0.1541579794101417, 0.14835751227103175, 0.14595831537246703, 0.1451576555836946] ***
*** finished computation of 7 references, err: [Inf, 0.18061955092288554, 0.1541579794101417, 0.14835751227103175, 0.14595831537246703, 0.1451576555836946] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [21, 44, 0]]
** centroid: 1, normalized-entropy: 0.9076961653608385, [(1, 21), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 31, 0]]
** centroid: 2, normalized-entropy: 0.966334094295981, [(1, 48), (2, 31)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 62, 1]]
** centroid: 3, normalized-entropy: 0.11759466565886466, [(2, 62), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 66, 9]]
** centroid: 6, normalized-entropy: 0.5293608652873645, [(2, 66), (3, 9)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [58, 5, 0]]
** centroid: 7, normalized-entropy: 0.39993804743902767, [(1, 58), (2, 5)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27048240408487617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27048240408487617, 0.19419252160564066] ***
*** starting iteration: 2; err: [Inf, 0.27048240408487617, 0.19419252160564066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27048240408487617, 0.19419252160564066, 0.16073093406111003] ***
*** starting iteration: 3; err: [Inf, 0.27048240408487617, 0.19419252160564066, 0.16073093406111003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27048240408487617, 0.19419252160564066, 0.16073093406111003, 0.15236398872360588] ***
*** starting iteration: 4; err: [Inf, 0.27048240408487617, 0.19419252160564066, 0.16073093406111003, 0.15236398872360588] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27048240408487617, 0.19419252160564066, 0.16073093406111003, 0.15236398872360588, 0.15002441620081663] ***
*** starting iteration: 5; err: [Inf, 0.27048240408487617, 0.19419252160564066, 0.16073093406111003, 0.15236398872360588, 0.15002441620081663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27048240408487617, 0.19419252160564066, 0.16073093406111003, 0.15236398872360588, 0.15002441620081663, 0.14936363047361373] ***
*** finished computation of 7 references, err: [Inf, 0.27048240408487617, 0.19419252160564066, 0.16073093406111003, 0.15236398872360588, 0.15002441620081663, 0.14936363047361373] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [37, 27, 0]]
** centroid: 1, normalized-entropy: 0.9823166080205502, [(1, 37), (2, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [43, 39, 0]]
** centroid: 3, normalized-entropy: 0.9982828462300607, [(1, 43), (2, 39)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [47, 31, 0]]
** centroid: 4, normalized-entropy: 0.9694309156463241, [(1, 47), (2, 31)]
*** center 5: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 91, 15]]
** centroid: 6, normalized-entropy: 0.5881782735046225, [(2, 91), (3, 15)]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24360190692543984] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24360190692543984, 0.17941153034567833] ***
*** starting iteration: 2; err: [Inf, 0.24360190692543984, 0.17941153034567833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24360190692543984, 0.17941153034567833, 0.1684010666999966] ***
*** starting iteration: 3; err: [Inf, 0.24360190692543984, 0.17941153034567833, 0.1684010666999966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24360190692543984, 0.17941153034567833, 0.1684010666999966, 0.16216879262682052] ***
*** starting iteration: 4; err: [Inf, 0.24360190692543984, 0.17941153034567833, 0.1684010666999966, 0.16216879262682052] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24360190692543984, 0.17941153034567833, 0.1684010666999966, 0.16216879262682052, 0.15756053988542407] ***
*** starting iteration: 5; err: [Inf, 0.24360190692543984, 0.17941153034567833, 0.1684010666999966, 0.16216879262682052, 0.15756053988542407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24360190692543984, 0.17941153034567833, 0.1684010666999966, 0.16216879262682052, 0.15756053988542407, 0.1524116342701018] ***
*** starting iteration: 6; err: [Inf, 0.24360190692543984, 0.17941153034567833, 0.1684010666999966, 0.16216879262682052, 0.15756053988542407, 0.1524116342701018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24360190692543984, 0.17941153034567833, 0.1684010666999966, 0.16216879262682052, 0.15756053988542407, 0.1524116342701018, 0.14812957177869976] ***
*** starting iteration: 7; err: [Inf, 0.24360190692543984, 0.17941153034567833, 0.1684010666999966, 0.16216879262682052, 0.15756053988542407, 0.1524116342701018, 0.14812957177869976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24360190692543984, 0.17941153034567833, 0.1684010666999966, 0.16216879262682052, 0.15756053988542407, 0.1524116342701018, 0.14812957177869976, 0.1456811599098146] ***
*** starting iteration: 8; err: [Inf, 0.24360190692543984, 0.17941153034567833, 0.1684010666999966, 0.16216879262682052, 0.15756053988542407, 0.1524116342701018, 0.14812957177869976, 0.1456811599098146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24360190692543984, 0.17941153034567833, 0.1684010666999966, 0.16216879262682052, 0.15756053988542407, 0.1524116342701018, 0.14812957177869976, 0.1456811599098146, 0.14431791087053716] ***
*** starting iteration: 9; err: [Inf, 0.24360190692543984, 0.17941153034567833, 0.1684010666999966, 0.16216879262682052, 0.15756053988542407, 0.1524116342701018, 0.14812957177869976, 0.1456811599098146, 0.14431791087053716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24360190692543984, 0.17941153034567833, 0.1684010666999966, 0.16216879262682052, 0.15756053988542407, 0.1524116342701018, 0.14812957177869976, 0.1456811599098146, 0.14431791087053716, 0.14355574271082877] ***
*** finished computation of 7 references, err: [Inf, 0.24360190692543984, 0.17941153034567833, 0.1684010666999966, 0.16216879262682052, 0.15756053988542407, 0.1524116342701018, 0.14812957177869976, 0.1456811599098146, 0.14431791087053716, 0.14355574271082877] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 59, 16]]
** centroid: 1, normalized-entropy: 0.7478061583312324, [(2, 59), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [62, 33, 0]]
** centroid: 2, normalized-entropy: 0.9316958485118404, [(1, 62), (2, 33)]
*** center 3: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [2, 66, 0]]
** centroid: 5, normalized-entropy: 0.1914332548141934, [(1, 2), (2, 66)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [43, 30, 0]]
** centroid: 6, normalized-entropy: 0.9770012394218561, [(1, 43), (2, 30)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [49, 8, 0]]
** centroid: 7, normalized-entropy: 0.5851569902762294, [(1, 49), (2, 8)]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 392,3 => 26,1 => 582), Dict(2 => 398,3 => 39,1 => 563))
[ Info: ===== scores for single classifier: {"micro_f1":0.935,"precision":0.935,"recall":0.935,"macro_recall":0.9370148933552095,"macro_f1":0.9073514796288497,"accuracy":0.935,"class_f1":{"2":0.917825537294564,"3":0.8505747126436781,"1":0.9536541889483067},"class_precision":{"2":0.9236641221374046,"3":0.7708333333333334,"1":0.9570661896243292},"class_recall":{"2":0.9120603015075377,"3":0.9487179487179487,"1":0.9502664298401421}}
[ Info: ===== scores for 1: {"micro_f1":0.976,"precision":0.976,"recall":0.976,"macro_recall":0.973908192264628,"macro_f1":0.9710112001562535,"accuracy":0.976,"class_f1":{"2":0.9695431472081218,"3":0.9620253164556962,"1":0.9814651368049426},"class_precision":{"2":0.9794871794871794,"3":0.95,"1":0.9754385964912281},"class_recall":{"2":0.9597989949748744,"3":0.9743589743589743,"1":0.9875666074600356}}
[ Info: ===== scores for 5: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9703282927976556,"macro_f1":0.9684693788142065,"accuracy":0.978,"class_f1":{"2":0.9729064039408868,"3":0.9487179487179487,"1":0.9837837837837838},"class_precision":{"2":0.9541062801932367,"3":0.9487179487179487,"1":0.9981718464351006},"class_recall":{"2":0.992462311557789,"3":0.9487179487179487,"1":0.9698046181172292}}
[ Info: ===== scores for 7: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.974730837164676,"macro_f1":0.9683766765875307,"accuracy":0.972,"class_f1":{"2":0.9657701711491443,"3":0.9620253164556962,"1":0.9773345421577516},"class_precision":{"2":0.9404761904761905,"3":0.95,"1":0.9981481481481481},"class_recall":{"2":0.992462311557789,"3":0.9743589743589743,"1":0.9573712255772646}}
[ Info: ===== scores for 9: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9735467045418223,"macro_f1":0.9669722632796983,"accuracy":0.97,"class_f1":{"2":0.9634146341463414,"3":0.9620253164556962,"1":0.9754768392370572},"class_precision":{"2":0.9360189573459715,"3":0.95,"1":0.9981412639405205},"class_recall":{"2":0.992462311557789,"3":0.9743589743589743,"1":0.9538188277087034}}
[ Info: ===== scores for 11: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9750774488495062,"macro_f1":0.965352228668721,"accuracy":0.973,"class_f1":{"2":0.9668711656441717,"3":0.9500000000000001,"1":0.979185520361991},"class_precision":{"2":0.9448441247002398,"3":0.926829268292683,"1":0.9981549815498155},"class_recall":{"2":0.9899497487437185,"3":0.9743589743589743,"1":0.9609236234458259}}
(score = 0.977, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.982,"k":3,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.982,"precision":0.982,"recall":0.982,"macro_recall":0.9794242271459619,"macro_f1":0.9716552968874952,"accuracy":0.982,"class_f1":{"2":0.9774436090225564,"3":0.9500000000000001,"1":0.9875222816399287},"class_precision":{"2":0.975,"3":0.926829268292683,"1":0.9910554561717353},"class_recall":{"2":0.9798994974874372,"3":0.9743589743589743,"1":0.9840142095914742}}
Test Summary: | Pass  Total
AKNC          |    8      8
[843, 2, 2, 5, 1, 4, 3, 2, 2, 3, 2, 3, 5, 2, 10, 3, 15, 4, 3, 10, 2, 4, 11, 8, 6, 14, 9, 2, 5, 1, 7, 15, 8, 2, 14, 2, 12, 4, 12, 17, 18, 7, 11, 16, 11, 2, 3, 24, 3, 43, 13, 6, 16, 35, 5, 5, 13, 5, 34, 9, 7, 42, 20, 4, 37, 1, 2, 31, 3, 7, 21, 43, 9, 10, 9, 5, 34, 7, 3, 24, 13, 15, 2, 31, 16, 6, 13, 61, 19, 15, 7, 5, 4, 6, 6, 11, 59, 10, 4, 42, 7, 10, 14, 53, 34, 55, 9, 13, 6, 10, 24, 6, 12, 22, 6, 3, 33, 8, 32, 7, 18, 69, 71, 3, 8, 24, 18, 4, 10, 81, 854, 38, 11, 21, 3, 15, 17, 9, 23, 2, 13, 2, 5, 84, 2, 4, 2, 2, 1, 32, 54, 37, 8, 34, 32, 10, 10, 5, 45, 28, 10, 11, 20, 17, 91, 6, 8, 1, 8, 6, 17, 25, 25, 14, 5, 4, 56, 27, 5, 1, 48, 9, 109, 99, 7, 11, 52, 61, 24, 188, 63, 49, 22, 13, 108, 178, 20, 15, 23, 3, 107, 15, 21, 37, 23, 17, 15, 106, 11, 34, 40, 12, 39, 40, 5, 3, 34, 17, 75, 19, 21, 12, 8, 2, 8, 37, 41, 13, 2, 110, 2, 109, 63, 140, 38, 4, 9, 35, 19, 4, 44, 16, 7, 51, 6, 62, 13, 1, 5, 17, 12, 9, 3, 11, 31, 496, 7, 5, 69, 9, 20, 35, 73, 30, 6, 51, 224, 23, 70, 45, 1, 8, 197, 179, 38, 61, 8, 164, 152, 130, 90, 7, 89, 69, 22, 74, 7, 6, 21, 6, 6, 8, 153, 3, 5, 34, 12, 3, 60, 35]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.701, speedup = 0.25638326671415457, eval_ratio = 0.09237100000000001)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4202876984126985,"recall":0.41406250000000006,"f1":null,"seconds":0.00019980408251285553,"exhaustive_search_seconds":0.0003787744790315628,"evaluations":533.875,"distances_sum":1667.388388429689}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5659722222222223,"recall":0.5659722222222223,"f1":null,"seconds":0.0003692023456096649,"exhaustive_search_seconds":0.0003787744790315628,"evaluations":716.96875,"distances_sum":1609.9746162970555}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6701388888888882,"recall":0.6701388888888882,"f1":null,"seconds":0.00046303868293762207,"exhaustive_search_seconds":0.0003787744790315628,"evaluations":872.265625,"distances_sum":1567.0857289183566}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7473958333333333,"recall":0.7473958333333333,"f1":null,"seconds":0.0007488839328289032,"exhaustive_search_seconds":0.0003787744790315628,"evaluations":1017.8125,"distances_sum":1540.6648977247512}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7934027777777773,"recall":0.7934027777777773,"f1":null,"seconds":0.0006258804351091385,"exhaustive_search_seconds":0.0003787744790315628,"evaluations":1158.1875,"distances_sum":1523.7946445667062}
KCenters.DeloneInvIndex> reached performance {"precision":0.8428819444444436,"recall":0.8428819444444436,"f1":0.8428819444444436,"seconds":0.0008121579885482788,"exhaustive_search_seconds":0.0003787744790315628,"evaluations":1299.9765625,"distances_sum":1508.8678241111868}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8510000000000001, speedup = 0.5320699525447561, eval_ratio = 0.127844)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
