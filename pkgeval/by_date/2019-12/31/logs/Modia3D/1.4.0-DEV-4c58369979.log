Julia Version 1.4.0-DEV.672
Commit 4c58369979 (2019-12-30 22:17 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed Reexport ──────────────────── v0.2.0
 Installed InvertedIndices ───────────── v1.0.0
 Installed MuladdMacro ───────────────── v0.2.1
 Installed TableTraits ───────────────── v1.0.0
 Installed MacroTools ────────────────── v0.5.3
 Installed JSON ──────────────────────── v0.21.0
 Installed Sundials ──────────────────── v3.8.1
 Installed ArrayInterface ────────────── v2.3.1
 Installed SortingAlgorithms ─────────── v0.3.1
 Installed RecursiveFactorization ────── v0.1.0
 Installed DiffEqBase ────────────────── v6.10.0
 Installed ModiaMath ─────────────────── v0.5.2
 Installed CategoricalArrays ─────────── v0.7.5
 Installed StaticArrays ──────────────── v0.12.1
 Installed RecursiveArrayTools ───────── v1.2.0
 Installed Parameters ────────────────── v0.12.0
 Installed FunctionWrappers ──────────── v1.0.0
 Installed Roots ─────────────────────── v0.8.4
 Installed Missings ──────────────────── v0.4.3
 Installed IterativeSolvers ──────────── v0.8.1
 Installed Unitful ───────────────────── v0.18.0
 Installed DataValueInterfaces ───────── v1.0.0
 Installed BinaryProvider ────────────── v0.5.8
 Installed Tables ────────────────────── v0.2.11
 Installed DocStringExtensions ───────── v0.8.1
 Installed Parsers ───────────────────── v0.3.10
 Installed OrderedCollections ────────── v1.1.0
 Installed DataAPI ───────────────────── v1.1.0
 Installed Compat ────────────────────── v2.2.0
 Installed DiffEqDiffTools ───────────── v1.7.0
 Installed TreeViews ─────────────────── v0.3.0
 Installed RecipesBase ───────────────── v0.7.0
 Installed DataStructures ────────────── v0.17.6
 Installed DataFrames ────────────────── v0.20.0
 Installed Requires ──────────────────── v0.5.2
 Installed ZygoteRules ───────────────── v0.2.0
 Installed ConstructionBase ──────────── v1.0.0
 Installed PooledArrays ──────────────── v0.5.3
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed Modia3D ───────────────────── v0.4.0
  Updating `~/.julia/environments/v1.4/Project.toml`
  [07f2c1e0] + Modia3D v0.4.0
  Updating `~/.julia/environments/v1.4/Manifest.toml`
  [4fba245c] + ArrayInterface v2.3.1
  [b99e7846] + BinaryProvider v0.5.8
  [324d7699] + CategoricalArrays v0.7.5
  [34da2185] + Compat v2.2.0
  [187b0558] + ConstructionBase v1.0.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.6
  [e2d170a0] + DataValueInterfaces v1.0.0
  [2b5f629d] + DiffEqBase v6.10.0
  [01453d9d] + DiffEqDiffTools v1.7.0
  [ffbed154] + DocStringExtensions v0.8.1
  [069b7b12] + FunctionWrappers v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [42fd0dbc] + IterativeSolvers v0.8.1
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [1914dd2f] + MacroTools v0.5.3
  [e1d29d7a] + Missings v0.4.3
  [07f2c1e0] + Modia3D v0.4.0
  [67ccffd1] + ModiaMath v0.5.2
  [46d2c3a1] + MuladdMacro v0.2.1
  [bac558e1] + OrderedCollections v1.1.0
  [d96e819e] + Parameters v0.12.0
  [69de0a69] + Parsers v0.3.10
  [2dfb63ee] + PooledArrays v0.5.3
  [3cdcf5f2] + RecipesBase v0.7.0
  [731186ca] + RecursiveArrayTools v1.2.0
  [f2c3362d] + RecursiveFactorization v0.1.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v0.5.2
  [f2b01f46] + Roots v0.8.4
  [a2af1166] + SortingAlgorithms v0.3.1
  [90137ffa] + StaticArrays v0.12.1
  [c3572dad] + Sundials v3.8.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [a2a6695c] + TreeViews v0.3.0
  [1986cc42] + Unitful v0.18.0
  [700de1a5] + ZygoteRules v0.2.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [4607b0f0] + SuiteSparse 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building Sundials → `~/.julia/packages/Sundials/MllUG/deps/build.log`
  Updating `/tmp/jl_YPFchz/Project.toml`
 [no changes]
  Updating `/tmp/jl_YPFchz/Manifest.toml`
 [no changes]
   Testing Modia3D
  Updating `/tmp/jl_rwIy8j/Project.toml`
 [no changes]
  Updating `/tmp/jl_rwIy8j/Manifest.toml`
 [no changes]
Running sandbox
Status `/tmp/jl_rwIy8j/Project.toml`
  [a93c6f00] DataFrames v0.20.0
  [864edb3b] DataStructures v0.17.6
  [682c06a0] JSON v0.21.0
  [07f2c1e0] Modia3D v0.4.0
  [67ccffd1] ModiaMath v0.5.2
  [90137ffa] StaticArrays v0.12.1
  [1986cc42] Unitful v0.18.0
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [de0858da] Printf 
  [8dfed614] Test 

Importing Modia3D Version 0.4.0 (2019-09-27)
 
Importing ModiaMath Version 0.5.2 (2019-07-10)
WARNING: Method definition ldiv!(AbstractArray{T, N} where N where T, AbstractArray{T, 2} where T, AbstractArray{T, N} where N where T) in module LinearAlgebra at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/generic.jl:247 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/8fdjX/src/init.jl:6.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition ldiv!(AbstractArray{T, N} where N where T, LinearAlgebra.Diagonal{T, V} where V<:AbstractArray{T, 1} where T, AbstractArray{T, N} where N where T) in module LinearAlgebra at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/diagonal.jl:430 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/8fdjX/src/init.jl:7.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition ldiv!(AbstractArray{T, N} where N where T, LinearAlgebra.Diagonal{T, V} where V<:AbstractArray{T, 1} where T, AbstractArray{T, N} where N where T) in module LinearAlgebra at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/diagonal.jl:430 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/8fdjX/src/init.jl:7.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition ldiv!(AbstractArray{T, N} where N where T, AbstractArray{T, 2} where T, AbstractArray{T, N} where N where T) in module LinearAlgebra at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/generic.jl:247 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/8fdjX/src/init.jl:6.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition ldiv!(AbstractArray{T, N} where N where T, LinearAlgebra.Diagonal{T, V} where V<:AbstractArray{T, 1} where T, AbstractArray{T, N} where N where T) in module LinearAlgebra at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/diagonal.jl:430 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/8fdjX/src/init.jl:7.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition ldiv!(AbstractArray{T, N} where N where T, AbstractArray{T, 2} where T, AbstractArray{T, N} where N where T) in module LinearAlgebra at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/generic.jl:247 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/8fdjX/src/init.jl:6.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition ldiv!(AbstractArray{T, N} where N where T, LinearAlgebra.Diagonal{T, V} where V<:AbstractArray{T, 1} where T, AbstractArray{T, N} where N where T) in module LinearAlgebra at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/diagonal.jl:430 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/8fdjX/src/init.jl:7.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition ldiv!(AbstractArray{T, N} where N where T, AbstractArray{T, 2} where T, AbstractArray{T, N} where N where T) in module LinearAlgebra at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/generic.jl:247 overwritten in module DiffEqBase at /home/pkgeval/.julia/packages/DiffEqBase/8fdjX/src/init.jl:6.
  ** incremental compilation may be fatally broken for this module **

    PyPlot not available (plot commands will be ignored).
    Try to install PyPlot. See hints here:
    https://github.com/ModiaSim/ModiaMath.jl/wiki/Installing-PyPlot-in-a-robust-way.
┌ Warning: 
│ Environment variable "DLR_VISUALIZATION" not defined.
│ Include ENV["DLR_VISUALIZATION"] = <path-to-Visualization/Extras/SimVis> into your HOME/.julia/config/startup.jl file.
│ 
│ No Renderer is used in Modia3D (so, animation is switched off).
└ @ Modia3D.DLR_Visualization ~/.julia/packages/Modia3D/r9s9x/src/renderer/DLR_Visualization/renderer.jl:87
... success of test_solidProperties.jl!
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Pendulum
      Initialization at time = 0.0 s
        initial values:
          │ x │ name    │ start   │ fixed │ nominal │
          ├───┼─────────┼─────────┼───────┼─────────┤
          │ 1 │ rev.phi │ 0.0     │ 1     │ 1.0     │
          │ 2 │ rev.w   │ 0.0     │ 1     │ 1.0     │

        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started
      progress: integrated up to time = 0.002 s

      Simulation is terminated at time = 4.5 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 10 s (init: 8.9 s, integration: 1.1 s)
        startTime      = 0.0 s
        stopTime       = 4.5 s
        interval       = 0.002 s
        tolerance      = 1.0e-6
        nEquations     = 2 (includes 0 constraints)
        nResults       = 2251
        nSteps         = 272
        nResidues      = 339 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 26
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 2
        h0             = 5.8e-09 s
        hMin           = 5.8e-09 s
        hMax           = 0.021 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Simulate_Pendulum.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Simulate_DoublePendulum.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Simulate_ControllerDamper.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Simulate_DamperMacro.jl!
... Revolute joint connecting Fourbar.bar3.frame2 with Fourbar.bar2.frame2 is a cut-joint

... Cut-joint rev4 pushed on scene.cutJoints vector
... success of Simulate_FourBar.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... pos_angle2(time=0.5) = 2.24
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Pendulum
      Initialization at time = 0.0 s
        initial values:
          │ x │ name    │ start   │ fixed │ nominal │
          ├───┼─────────┼─────────┼───────┼─────────┤
          │ 1 │ rev.phi │ 0.0     │ 1     │ 1.0     │
          │ 2 │ rev.w   │ 0.0     │ 1     │ 1.0     │

        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      Simulation is terminated at time = 4.5 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.083 s (init: 0.0019 s, integration: 0.081 s)
        startTime      = 0.0 s
        stopTime       = 4.5 s
        interval       = 0.002 s
        tolerance      = 1.0e-6
        nEquations     = 2 (includes 0 constraints)
        nResults       = 2251
        nSteps         = 206
        nResidues      = 267 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 23
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 2
        h0             = 1.2e-08 s
        hMin           = 1.2e-08 s
        hMax           = 0.049 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Simulate_PendulumWithFixedJoint.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Test_2Rev_ZylZ_BarX.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Test_3Rev_ZylZ_BarX_BarY.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Test_InertiaTensor.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Test_KinematicRevoluteJoints.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Test_Dynamic_Pendulum_xAxis.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Test_Dynamic_Pendulum_yAxis.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Test_Dynamic_Pendulum_zAxis.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Test_Prismatic_xAxis.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Test_Prismatic_yAxis.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Test_Prismatic_zAxis.jl!
... Revolute joint connecting Fourbar.bar3.frame2 with Fourbar.bar2.frame2 is a cut-joint

... Cut-joint fourbar.rev4 pushed on scene.cutJoints vector
... success of Move_FourBar_xAxis.jl!
... Revolute joint connecting Fourbar.bar3.frame2 with Fourbar.bar2.frame2 is a cut-joint

... Cut-joint fourbar.rev4 pushed on scene.cutJoints vector
... success of Move_FourBar_yAxis.jl!
... Revolute joint connecting Fourbar.bar3.frame2 with Fourbar.bar2.frame2 is a cut-joint

... Cut-joint fourbar.rev4 pushed on scene.cutJoints vector
... success of Move_FourBar_zAxis.jl!
... Revolute joint connecting Fourbar.bar3.frame2 with Fourbar.bar2.frame2 is a cut-joint

... Cut-joint rev4 pushed on scene.cutJoints vector
... success of Move_FourBar_noMacros.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of test_massComputation.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Test_Signal1Assembly.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Test_Signal4Assemblies.jl!
WARNING: replacing module test_massComputation.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of test_massComputation.jl!
... success of volume_computation3D_obj.jl!
initAnalysis!(world::Object3D, scene::Scene)
... success of Move_Pendulum.jl!
initAnalysis!(world::Object3D, scene::Scene)
... success of Visualize_Beam.jl!

 ...test_Examples finished!
WARNING: replacing module TestExamples.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of examples/collisions/Simulate_Billiards_OneBall!
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: BouncingBall1
      Initialization at time = 0.0 s
        initial values:
          │ x │ name   │ start   │ fixed │ nominal │
          ├───┼────────┼─────────┼───────┼─────────┤
          │ 1 │ h      │ 0.2     │ 0     │ 0.2     │
          │ 2 │ v      │ 0.0     │ 0     │ 1.0     │

... h0 = 0.2
        flying = true
        -h = -0.2 (became <= 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      State event (zero-crossing) at time = 0.2019275108811498 s (z[1] > 0)
        -h = 1.6181500583911657e-14 (became > 0)
... v = 1.3866362172208557
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 0.484626025952448 s (z[1] > 0)
        -h = 2.71657696337968e-14 (became > 0)
... v = 0.9706453509400057
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 0.682514985967628 s (z[1] > 0)
        -h = 1.3320941572025902e-14 (became > 0)
... v = 0.6794517427662368
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 0.8210372566626214 s (z[1] > 0)
        -h = 6.938893903907228e-18 (became > 0)
... v = 0.47561621292614215
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 0.9180028433604212 s (z[1] > 0)
        -h = 2.3418766925686896e-17 (became > 0)
... v = 0.3329313347031544
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 0.9858787506124347 s (z[1] > 0)
        -h = 3.80034545499619e-15 (became > 0)
... v = 0.23305186965963645
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      Simulation is terminated at time = 1.0 s

      BouncingBall model is terminated (flying = true)

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 1 s (init: 0.8 s, integration: 0.22 s)
        startTime      = 0.0 s
        stopTime       = 1.0 s
        interval       = 0.02 s
        tolerance      = 0.0001
        nEquations     = 2 (includes 0 constraints)
        nResults       = 63
        nSteps         = 125
        nResidues      = 345 (includes residue calls for Jacobian)
        nZeroCrossings = 237
        nJac           = 110
        nTimeEvents    = 0
        nStateEvents   = 6
        nRestartEvents = 6
        nErrTestFails  = 0
        h0             = 7.2e-07 s
        hMin           = 7.2e-07 s
        hMax           = 0.27 s
        orderMax       = 3
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of examples/collisions/Simulate_BouncingBall.jl
... success of examples/collisions/Simulate_NewtonsCradle.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of examples/collisions/Simulate_SlidingAndRollingBall.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of examples/collisions/Simulate_TwoCollidingBalls.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: YouBot
      Initialization at time = 0.0 s
        initial values:
          │ x  │ name                          │ start   │ fixed │ nominal │
          ├────┼───────────────────────────────┼─────────┼───────┼─────────┤
          │ 1  │ link1.rev.rev.phi             │ 0.0     │ 1     │ 1.0     │
          │ 2  │ link1.rev.controller.PI_x     │ 0.0     │ 0     │ 1.0     │
          │ 3  │ link2.rev.rev.phi             │ 0.0     │ 1     │ 1.0     │
          │ 4  │ link2.rev.controller.PI_x     │ 0.0     │ 0     │ 1.0     │
          │ 5  │ link3.rev.rev.phi             │ 1.5708  │ 1     │ 1.5708  │
          │ 6  │ link3.rev.controller.PI_x     │ 0.0     │ 0     │ 1.0     │
          │ 7  │ link4.rev.rev.phi             │ 0.0     │ 1     │ 1.0     │
          │ 8  │ link4.rev.controller.PI_x     │ 0.0     │ 0     │ 1.0     │
          │ 9  │ link5.rev.rev.phi             │ 0.0     │ 1     │ 1.0     │
          │ 10 │ link5.rev.controller.PI_x     │ 0.0     │ 0     │ 1.0     │
          │ 11 │ gripper.prism.prism.s         │ 0.0     │ 1     │ 1.0     │
          │ 12 │ gripper.prism.controller.PI_x │ 0.0     │ 0     │ 1.0     │
          │ 13 │ sphere.r[1]                   │ -0.125  │ 1     │ 1.0     │
          │ 14 │ sphere.r[2]                   │ 0.0     │ 1     │ 1.0     │
          │ 15 │ sphere.r[3]                   │ 0.03    │ 1     │ 1.0     │
          │ 16 │ link1.rev.rev.w               │ 0.0     │ 1     │ 1.0     │
          │ 17 │ link2.rev.rev.w               │ 0.0     │ 1     │ 1.0     │
          │ 18 │ link3.rev.rev.w               │ 0.0     │ 1     │ 1.0     │
          │ 19 │ link4.rev.rev.w               │ 0.0     │ 1     │ 1.0     │
          │ 20 │ link5.rev.rev.w               │ 0.0     │ 1     │ 1.0     │
          │ 21 │ gripper.prism.prism.v         │ 0.0     │ 1     │ 1.0     │
          │ 22 │ sphere.v[1]                   │ 0.0     │ 1     │ 1.0     │
          │ 23 │ sphere.v[2]                   │ 0.0     │ 1     │ 1.0     │
          │ 24 │ sphere.v[3]                   │ 0.0     │ 1     │ 1.0     │
          │ 25 │ sphere.q[1]                   │ 0.0     │ 0     │ 1.0     │
          │ 26 │ sphere.q[2]                   │ 0.0     │ 0     │ 1.0     │
          │ 27 │ sphere.q[3]                   │ 0.0     │ 0     │ 1.0     │
          │ 28 │ sphere.q[4]                   │ 1.0     │ 0     │ 1.0     │
          │ 29 │ sphere.w[1]                   │ 0.0     │ 1     │ 1.0     │
          │ 30 │ sphere.w[2]                   │ 0.0     │ 1     │ 1.0     │
          │ 31 │ sphere.w[3]                   │ 0.0     │ 1     │ 1.0     │

        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
      Simulation started

      State event (zero-crossing) at time = 7.261196339086959e-5 s (z[2] < 0)
        distance(table.plate,sphere) = -2.000000003744737e-8 became < 0
            contact normal = [4.51e-08,6.28e-08,1], contact position = [0.585,-1.57e-09,0.375], c_res=1.24e+06, d_res=1e+03
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.4173138190720484 s (z[2] < 0)
        distance(sphere,gripper.gripper_right_finger) = -2.0000000031077077e-8 became < 0
            contact normal = [-1,-0.00507,-2.05e-05], contact position = [0.56,-0.000127,0.4], c_res=1.24e+06, d_res=9.39
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.4173142226300906 s (z[2] < 0)
        distance(sphere,gripper.gripper_left_finger) = -2.0000005203813682e-8 became < 0
            contact normal = [-1,0.00702,2.02e-05], contact position = [0.56,0.000175,0.4], c_res=1.24e+06, d_res=9.39
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart
      progress: integrated up to time = 0.42 s

      State event (zero-crossing) at time = 0.421975283679707 s (z[1] > 0)
        distance(sphere,gripper.gripper_left_finger)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.42197611448867994 s (z[1] > 0)
        distance(sphere,gripper.gripper_right_finger)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart
      progress: integrated up to time = 0.42 s
      progress: integrated up to time = 0.45 s
      progress: integrated up to time = 1.3 s
      progress: integrated up to time = 2.1 s
      progress: integrated up to time = 2.2 s
      progress: integrated up to time = 2.2 s
      progress: integrated up to time = 2.3 s
      progress: integrated up to time = 2.3 s
      progress: integrated up to time = 2.4 s
      progress: integrated up to time = 2.5 s
      progress: integrated up to time = 2.5 s
      progress: integrated up to time = 2.6 s
      progress: integrated up to time = 2.6 s
      progress: integrated up to time = 2.6 s
      progress: integrated up to time = 2.7 s
      progress: integrated up to time = 2.7 s
      progress: integrated up to time = 2.7 s
      progress: integrated up to time = 3.4 s
      progress: integrated up to time = 3.4 s
      progress: integrated up to time = 3.4 s
      progress: integrated up to time = 3.4 s
      progress: integrated up to time = 3.4 s
      progress: integrated up to time = 3.4 s
      progress: integrated up to time = 3.4 s
      progress: integrated up to time = 3.5 s
      progress: integrated up to time = 3.5 s
      progress: integrated up to time = 3.5 s
      progress: integrated up to time = 3.5 s
      progress: integrated up to time = 3.5 s
      progress: integrated up to time = 3.5 s
      progress: integrated up to time = 3.5 s
      progress: integrated up to time = 3.5 s
      progress: integrated up to time = 3.5 s
      progress: integrated up to time = 3.5 s
      progress: integrated up to time = 3.5 s
      progress: integrated up to time = 3.5 s
      progress: integrated up to time = 3.5 s
      progress: integrated up to time = 3.5 s
      progress: integrated up to time = 3.5 s

      State event (zero-crossing) at time = 3.544617622188206 s (z[1] > 0)
        distance(table.plate,sphere)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 3.772200055689489 s (z[2] < 0)
        distance(ground,sphere) = -2.0000000125895976e-8 became < 0
            contact normal = [-5.5e-07,-3e-06,1], contact position = [0.939,-0.000237,-3.46e-06], c_res=1.24e+06, d_res=0.32
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart
      progress: integrated up to time = 3.8 s

      State event (zero-crossing) at time = 3.7872166075457345 s (z[1] > 0)
        distance(ground,sphere)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 4.1257567277726865 s (z[2] < 0)
        distance(ground,sphere) = -2.000007642161648e-8 became < 0
            contact normal = [-5.51e-07,-3e-06,1], contact position = [1.03,-0.000263,-3.4e-06], c_res=1.24e+06, d_res=0.519
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 4.1424548393819105 s (z[1] > 0)
        distance(ground,sphere)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart
      progress: integrated up to time = 4.3 s

      State event (zero-crossing) at time = 4.347262213017979 s (z[2] < 0)
        distance(ground,sphere) = -2.000000016462577e-8 became < 0
            contact normal = [-5.52e-07,-3e-06,1], contact position = [1.09,-0.00028,-3.37e-06], c_res=1.24e+06, d_res=0.858
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 4.36606207058098 s (z[1] > 0)
        distance(ground,sphere)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 4.485362669299116 s (z[2] < 0)
        distance(ground,sphere) = -2.0000000202700083e-8 became < 0
            contact normal = [-5.53e-07,-2.99e-06,1], contact position = [1.13,-0.00029,-3.34e-06], c_res=1.24e+06, d_res=1.47
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 4.507110210077004 s (z[1] > 0)
        distance(ground,sphere)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 4.57059029797964 s (z[2] < 0)
        distance(ground,sphere) = -2.0000014307970196e-8 became < 0
            contact normal = [-5.53e-07,-2.99e-06,1], contact position = [1.15,-0.000297,-3.33e-06], c_res=1.24e+06, d_res=2.77
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart
      progress: integrated up to time = 4.6 s

      State event (zero-crossing) at time = 4.597984915155498 s (z[1] > 0)
        distance(ground,sphere)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 4.621542207497235 s (z[2] < 0)
        distance(ground,sphere) = -2.000000008959269e-8 became < 0
            contact normal = [-5.53e-07,-2.99e-06,1], contact position = [1.17,-0.000302,-3.32e-06], c_res=1.24e+06, d_res=7.51
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 2.4e+02 s (init: 0.31 s, integration: 2.4e+02 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.001 s
        tolerance      = 1.0e-5
        nEquations     = 31 (includes 1 constraints)
        nResults       = 5035
        nSteps         = 6101
        nResidues      = 146739 (includes residue calls for Jacobian)
        nZeroCrossings = 11263
        nJac           = 4306
        nTimeEvents    = 0
        nStateEvents   = 17
        nRestartEvents = 17
        nErrTestFails  = 1741
        h0             = 9e-09 s
        hMin           = 9e-09 s
        hMax           = 0.053 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of examples/collisions/Simulate_YouBot.jl
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Collision_3Elements.jl!
... success of Test_Collision.jl!
... success of Test_Collision_moreRevolutes.jl!
... success of Test_Collision_StarSetting.jl!
... success of Test_MiniBsp.jl!
... success of Test_Solids.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Simulate_ContactBoxOnTable.jl!
WARNING: replacing module Simulate_YouBot.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Simulate_YouBotBoxOnTable.jl!
... success of collision_2_boxes.jl!
... success of collision_ballWithBall.jl!
... success of collision_ballWithBox.jl!
... success of collision_ballWithBox_45Deg.jl!
... success of collision_BallWithBox_Prismatic.jl!
WARNING: replacing module collision_ballWithBox_45Deg.
... success of collision_ballWithBox_45Deg.jl!
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: NewtonsCradle
      Initialization at time = 0.0 s
        initial values:
          │ x  │ name     │ start   │ fixed │ nominal │
          ├────┼──────────┼─────────┼───────┼─────────┤
          │ 1  │ rev1.phi │ -1.0472 │ 1     │ 1.0472  │
          │ 2  │ rev2.phi │ -1.0472 │ 1     │ 1.0472  │
          │ 3  │ rev3.phi │ 0.0     │ 1     │ 1.0     │
          │ 4  │ rev4.phi │ 1.0472  │ 1     │ 1.0472  │
          │ 5  │ rev5.phi │ 1.0472  │ 1     │ 1.0472  │
          │ 6  │ rev1.w   │ 0.0     │ 1     │ 1.0     │
          │ 7  │ rev2.w   │ 0.0     │ 1     │ 1.0     │
          │ 8  │ rev3.w   │ 0.0     │ 1     │ 1.0     │
          │ 9  │ rev4.w   │ 0.0     │ 1     │ 1.0     │
          │ 10 │ rev5.w   │ 0.0     │ 1     │ 1.0     │

        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      State event (zero-crossing) at time = 1.0878031474718333 s (z[2] < 0)
        distance(pendulum4.sphere,pendulum3.sphere) = -2.0000077594062304e-8 became < 0
            contact normal = [0,-1,-0.000313], contact position = [0,0.5,-4], c_res=1.1e+11, d_res=0.11
        distance(pendulum3.sphere,pendulum2.sphere) = -2.0000077260995397e-8 became < 0
            contact normal = [0,-1,0.000313], contact position = [0,-0.5,-4], c_res=1.1e+11, d_res=0.11
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 1.0908094518650024 s (z[1] > 0)
        distance(pendulum4.sphere,pendulum3.sphere)  became > 0
        distance(pendulum3.sphere,pendulum2.sphere)  became > 0
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 1.0938480230542378 s (z[2] < 0)
        distance(pendulum1.sphere,pendulum2.sphere) = -2.0000232248129635e-8 became < 0
            contact normal = [0,1,-0.000784], contact position = [0,-1.51,-4], c_res=1.1e+11, d_res=0.0667
        distance(pendulum5.sphere,pendulum4.sphere) = -2.000023202608503e-8 became < 0
            contact normal = [0,-1,-0.000784], contact position = [0,1.51,-4], c_res=1.1e+11, d_res=0.0667
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 1.0958883290568509 s (z[1] > 0)
        distance(pendulum1.sphere,pendulum2.sphere)  became > 0
        distance(pendulum5.sphere,pendulum4.sphere)  became > 0
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 1.0985275695684327 s (z[2] < 0)
        distance(pendulum4.sphere,pendulum3.sphere) = -2.0000000211517488e-8 became < 0
            contact normal = [0,-1,-0.000313], contact position = [0,0.5,-4], c_res=1.1e+11, d_res=0.169
        distance(pendulum3.sphere,pendulum2.sphere) = -1.9999999101294463e-8 became < 0
            contact normal = [0,-1,0.000313], contact position = [0,-0.5,-4], c_res=1.1e+11, d_res=0.169
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 1.1018053667261674 s (z[1] > 0)
        distance(pendulum4.sphere,pendulum3.sphere)  became > 0
        distance(pendulum3.sphere,pendulum2.sphere)  became > 0
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 3.1750114228447495 s (z[2] < 0)
        distance(pendulum4.sphere,pendulum3.sphere) = -1.9999989109287242e-8 became < 0
            contact normal = [0,-1,-0.000313], contact position = [0,0.5,-4], c_res=1.1e+11, d_res=0.262
        distance(pendulum3.sphere,pendulum2.sphere) = -2.0000000766629e-8 became < 0
            contact normal = [0,-1,0.000313], contact position = [0,-0.5,-4], c_res=1.1e+11, d_res=0.262
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 3.1785879880615164 s (z[1] > 0)
        distance(pendulum4.sphere,pendulum3.sphere)  became > 0
        distance(pendulum3.sphere,pendulum2.sphere)  became > 0
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 3.1930977548240014 s (z[2] < 0)
        distance(pendulum1.sphere,pendulum2.sphere) = -2.0000009426368592e-8 became < 0
            contact normal = [0,1,-0.00063], contact position = [0,-1.52,-4], c_res=1.1e+11, d_res=0.147
        distance(pendulum5.sphere,pendulum4.sphere) = -2.0000012757037666e-8 became < 0
            contact normal = [0,-1,-0.00063], contact position = [0,1.52,-4], c_res=1.1e+11, d_res=0.147
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 3.1954887018752087 s (z[1] > 0)
        distance(pendulum1.sphere,pendulum2.sphere)  became > 0
        distance(pendulum5.sphere,pendulum4.sphere)  became > 0
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 3.2073414785973235 s (z[2] < 0)
        distance(pendulum4.sphere,pendulum3.sphere) = -1.999992316203958e-8 became < 0
            contact normal = [0,-1,-0.000313], contact position = [0,0.5,-4], c_res=1.1e+11, d_res=0.347
        distance(pendulum3.sphere,pendulum2.sphere) = -2.0000000100495186e-8 became < 0
            contact normal = [0,-1,0.000313], contact position = [0,-0.5,-4], c_res=1.1e+11, d_res=0.347
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 3.211125697316102 s (z[1] > 0)
        distance(pendulum4.sphere,pendulum3.sphere)  became > 0
        distance(pendulum3.sphere,pendulum2.sphere)  became > 0
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 5.306987610498805 s (z[2] < 0)
        distance(pendulum4.sphere,pendulum3.sphere) = -2.0000038292167233e-8 became < 0
            contact normal = [0,-1,-0.000313], contact position = [0,0.5,-4], c_res=1.1e+11, d_res=0.537
        distance(pendulum3.sphere,pendulum2.sphere) = -1.9998782851970986e-8 became < 0
            contact normal = [0,-1,0.000313], contact position = [0,-0.5,-4], c_res=1.1e+11, d_res=0.537
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 5.311116540157841 s (z[1] > 0)
        distance(pendulum4.sphere,pendulum3.sphere)  became > 0
        distance(pendulum3.sphere,pendulum2.sphere)  became > 0
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 5.3389794846640575 s (z[2] < 0)
        distance(pendulum1.sphere,pendulum2.sphere) = -2.0000039291367955e-8 became < 0
            contact normal = [0,1,-0.00065], contact position = [0,-1.52,-4], c_res=1.1e+11, d_res=0.336
        distance(pendulum5.sphere,pendulum4.sphere) = -1.99989548255175e-8 became < 0
            contact normal = [0,-1,-0.00065], contact position = [0,1.52,-4], c_res=1.1e+11, d_res=0.336
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 5.341800682588432 s (z[1] > 0)
        distance(pendulum1.sphere,pendulum2.sphere)  became > 0
        distance(pendulum5.sphere,pendulum4.sphere)  became > 0
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 5.371038706105848 s (z[2] < 0)
        distance(pendulum4.sphere,pendulum3.sphere) = -2.0000006983877938e-8 became < 0
            contact normal = [0,-1,-0.000313], contact position = [0,0.5,-4], c_res=1.1e+11, d_res=0.886
        distance(pendulum3.sphere,pendulum2.sphere) = -1.9988123378666955e-8 became < 0
            contact normal = [0,-1,0.000313], contact position = [0,-0.5,-4], c_res=1.1e+11, d_res=0.886
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 5.375601280236619 s (z[1] > 0)
        distance(pendulum4.sphere,pendulum3.sphere)  became > 0
        distance(pendulum3.sphere,pendulum2.sphere)  became > 0
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 7.586849755374663 s (z[2] < 0)
        distance(pendulum4.sphere,pendulum3.sphere) = -1.9609640355966462e-8 became < 0
            contact normal = [0,-1,-0.000313], contact position = [0,0.5,-4], c_res=1.1e+11, d_res=1.37
        distance(pendulum3.sphere,pendulum2.sphere) = -2.0000080924731378e-8 became < 0
            contact normal = [0,-1,0.000313], contact position = [0,-0.5,-4], c_res=1.1e+11, d_res=1.37
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 7.591827089433919 s (z[1] > 0)
        distance(pendulum4.sphere,pendulum3.sphere)  became > 0
        distance(pendulum3.sphere,pendulum2.sphere)  became > 0
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 7.623516942618943 s (z[2] < 0)
        distance(pendulum1.sphere,pendulum2.sphere) = -1.96331674251482e-8 became < 0
            contact normal = [0,1,-0.000809], contact position = [0,-1.51,-4], c_res=1.1e+11, d_res=0.73
        distance(pendulum5.sphere,pendulum4.sphere) = -2.0000000100495186e-8 became < 0
            contact normal = [0,-1,-0.000809], contact position = [0,1.51,-4], c_res=1.1e+11, d_res=0.73
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 7.626809172298678 s (z[1] > 0)
        distance(pendulum1.sphere,pendulum2.sphere)  became > 0
        distance(pendulum5.sphere,pendulum4.sphere)  became > 0
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 7.651102476406292 s (z[2] < 0)
        distance(pendulum4.sphere,pendulum3.sphere) = -1.694994378187431e-8 became < 0
            contact normal = [0,-1,-0.000313], contact position = [0,0.5,-4], c_res=1.1e+11, d_res=1.68
        distance(pendulum3.sphere,pendulum2.sphere) = -2.0000034739453554e-8 became < 0
            contact normal = [0,-1,0.000313], contact position = [0,-0.5,-4], c_res=1.1e+11, d_res=1.68
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 7.656286321908144 s (z[1] > 0)
        distance(pendulum4.sphere,pendulum3.sphere)  became > 0
        distance(pendulum3.sphere,pendulum2.sphere)  became > 0
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart
      progress: integrated up to time = 9.2 s

      Simulation is terminated at time = 10.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 5.3 s (init: 0.0049 s, integration: 5.3 s)
        startTime      = 0.0 s
        stopTime       = 10.0 s
        interval       = 0.001 s
        tolerance      = 1.0e-8
        nEquations     = 10 (includes 0 constraints)
        nResults       = 10049
        nSteps         = 3394
        nResidues      = 11111 (includes residue calls for Jacobian)
        nZeroCrossings = 13578
        nJac           = 644
        nTimeEvents    = 0
        nStateEvents   = 24
        nRestartEvents = 24
        nErrTestFails  = 183
        h0             = 3.7e-10 s
        hMin           = 3.7e-10 s
        hMax           = 0.046 s
        orderMax       = 5
        sparseSolver   = false
... success of collision_newtons_cradle.jl!


variables: . Omitted printing of 12 columns
│ Row │ name                │ ValueType                    │ unit    │
│     │ Symbol              │ Symbol                       │ String  │
├─────┼─────────────────────┼──────────────────────────────┼─────────┤
│ 1   │ time                │ Float64                      │ s       │
│ 2   │ boxMoving.r         │ SArray{Tuple{3},Float64,1,3} │ m       │
│ 3   │ boxMoving.v         │ SArray{Tuple{3},Float64,1,3} │ m/s     │
│ 4   │ boxMoving.a         │ SArray{Tuple{3},Float64,1,3} │ m/s^2   │
│ 5   │ boxMoving.q         │ SArray{Tuple{4},Float64,1,4} │         │
│ 6   │ boxMoving.derq      │ SArray{Tuple{4},Float64,1,4} │ 1/s     │
│ 7   │ boxMoving.w         │ SArray{Tuple{3},Float64,1,3} │ rad/s   │
│ 8   │ boxMoving.z         │ SArray{Tuple{3},Float64,1,3} │ rad/s^2 │
│ 9   │ boxMoving.residue_w │ SArray{Tuple{3},Float64,1,3} │         │
│ 10  │ boxMoving.residue_f │ SArray{Tuple{3},Float64,1,3} │         │
│ 11  │ boxMoving.residue_t │ SArray{Tuple{3},Float64,1,3} │         │
│ 12  │ boxMoving.residue_q │ Float64                      │         │


x vector: 
│ Row │ x        │ name        │ fixed │ start                │
│     │ Symbol   │ Symbol      │ Bool  │ Union…               │
├─────┼──────────┼─────────────┼───────┼──────────────────────┤
│ 1   │ x[1:3]   │ boxMoving.r │ 1     │ [1.0, 0.0, 0.15]     │
│ 2   │ x[4:6]   │ boxMoving.v │ 1     │ [0.0, 0.0, 0.0]      │
│ 3   │ x[7:10]  │ boxMoving.q │ 0     │ [0.0, 0.0, 0.0, 1.0] │
│ 4   │ x[11:13] │ boxMoving.w │ 1     │ [0.0, 0.0, 0.0]      │


copy to variables: 
│ Row │ source      │ target         │
│     │ Symbol      │ Symbol         │
├─────┼─────────────┼────────────────┤
│ 1   │ x[1:3]      │ boxMoving.r    │
│ 2   │ x[4:6]      │ boxMoving.v    │
│ 3   │ x[7:10]     │ boxMoving.q    │
│ 4   │ x[11:13]    │ boxMoving.w    │
│ 5   │ derx[4:6]   │ boxMoving.a    │
│ 6   │ derx[7:10]  │ boxMoving.derq │
│ 7   │ derx[11:13] │ boxMoving.z    │


copy to residue vector: 
│ Row │ source                  │ target         │
│     │ Symbol                  │ Symbol         │
├─────┼─────────────────────────┼────────────────┤
│ 1   │ derx[1:3] - boxMoving.v │ residue[1:3]   │
│ 2   │ boxMoving.residue_w     │ residue[4:6]   │
│ 3   │ boxMoving.residue_f     │ residue[7:9]   │
│ 4   │ boxMoving.residue_t     │ residue[10:12] │
│ 5   │ boxMoving.residue_q     │ residue[13]    │


copy to results: 
│ Row │ source         │ target        │ start                │
│     │ Symbol         │ Symbol        │ Union…               │
├─────┼────────────────┼───────────────┼──────────────────────┤
│ 1   │ time           │ result[1]     │ 0.0                  │
│ 2   │ boxMoving.r    │ result[2:4]   │ [1.0, 0.0, 0.15]     │
│ 3   │ boxMoving.v    │ result[5:7]   │ [0.0, 0.0, 0.0]      │
│ 4   │ boxMoving.a    │ result[8:10]  │ [0.0, 0.0, 0.0]      │
│ 5   │ boxMoving.q    │ result[11:14] │ [0.0, 0.0, 0.0, 1.0] │
│ 6   │ boxMoving.derq │ result[15:18] │ [0.0, 0.0, 0.0, 0.0] │
│ 7   │ boxMoving.w    │ result[19:21] │ [0.0, 0.0, 0.0]      │
│ 8   │ boxMoving.z    │ result[22:24] │ [0.0, 0.0, 0.0]      │
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: ThreeDFiles
      Initialization at time = 0.0 s
        initial values:
          │ x  │ name           │ start   │ fixed │ nominal │
          ├────┼────────────────┼─────────┼───────┼─────────┤
          │ 1  │ boxMoving.r[1] │ 1.0     │ 1     │ 1.0     │
          │ 2  │ boxMoving.r[2] │ 0.0     │ 1     │ 1.0     │
          │ 3  │ boxMoving.r[3] │ 0.15    │ 1     │ 1.0     │
          │ 4  │ boxMoving.v[1] │ 0.0     │ 1     │ 1.0     │
          │ 5  │ boxMoving.v[2] │ 0.0     │ 1     │ 1.0     │
          │ 6  │ boxMoving.v[3] │ 0.0     │ 1     │ 1.0     │
          │ 7  │ boxMoving.q[1] │ 0.0     │ 0     │ 1.0     │
          │ 8  │ boxMoving.q[2] │ 0.0     │ 0     │ 1.0     │
          │ 9  │ boxMoving.q[3] │ 0.0     │ 0     │ 1.0     │
          │ 10 │ boxMoving.q[4] │ 1.0     │ 0     │ 1.0     │
          │ 11 │ boxMoving.w[1] │ 0.0     │ 1     │ 1.0     │
          │ 12 │ boxMoving.w[2] │ 0.0     │ 1     │ 1.0     │
          │ 13 │ boxMoving.w[3] │ 0.0     │ 1     │ 1.0     │

        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
      Simulation started

      Simulation is terminated at time = 2.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.46 s (init: 0.0045 s, integration: 0.46 s)
        startTime      = 0.0 s
        stopTime       = 2.0 s
        interval       = 0.001 s
        tolerance      = 1.0e-8
        nEquations     = 13 (includes 1 constraints)
        nResults       = 2001
        nSteps         = 22
        nResidues      = 282 (includes residue calls for Jacobian)
        nZeroCrossings = 2022
        nJac           = 20
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 0
        h0             = 1e-06 s
        hMin           = 1e-06 s
        hMax           = 0.95 s
        orderMax       = 2
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of contactForceLaw_2_boxes.jl!


variables: . Omitted printing of 9 columns
│ Row │ name          │ ValueType │ unit   │ numericType │ vec     │ vecIndex │
│     │ Symbol        │ Symbol    │ String │ ModiaMat…   │ Symbol  │ Any      │
├─────┼───────────────┼───────────┼────────┼─────────────┼─────────┼──────────┤
│ 1   │ time          │ Float64   │ s      │ TIME        │         │ 0        │
│ 2   │ prisX.s       │ Float64   │ m      │ XD_EXP      │ x       │ 1        │
│ 3   │ prisX.v       │ Float64   │ m/s    │ XD_IMP      │ x       │ 4        │
│ 4   │ prisX.a       │ Float64   │ m/s^2  │ DER_XD_IMP  │ derx    │ 4        │
│ 5   │ prisX.f       │ Float64   │ N      │ WR          │         │ 0        │
│ 6   │ prisX.residue │ Float64   │        │ FD_IMP      │ residue │ 4        │
│ 7   │ prisX.P       │ Float64   │ J      │ WC          │         │ 0        │
⋮
│ 12  │ prisY.residue │ Float64   │        │ FD_IMP      │ residue │ 5        │
│ 13  │ prisY.P       │ Float64   │ J      │ WC          │         │ 0        │
│ 14  │ prisZ.s       │ Float64   │ m      │ XD_EXP      │ x       │ 3        │
│ 15  │ prisZ.v       │ Float64   │ m/s    │ XD_IMP      │ x       │ 6        │
│ 16  │ prisZ.a       │ Float64   │ m/s^2  │ DER_XD_IMP  │ derx    │ 6        │
│ 17  │ prisZ.f       │ Float64   │ N      │ WR          │         │ 0        │
│ 18  │ prisZ.residue │ Float64   │        │ FD_IMP      │ residue │ 6        │
│ 19  │ prisZ.P       │ Float64   │ J      │ WC          │         │ 0        │


x vector: 
│ Row │ x      │ name    │ fixed │ start  │
│     │ Symbol │ Symbol  │ Bool  │ Union… │
├─────┼────────┼─────────┼───────┼────────┤
│ 1   │ x[1]   │ prisX.s │ 1     │ 0.0    │
│ 2   │ x[2]   │ prisY.s │ 1     │ 0.0    │
│ 3   │ x[3]   │ prisZ.s │ 1     │ 0.0    │
│ 4   │ x[4]   │ prisX.v │ 1     │ -6.0   │
│ 5   │ x[5]   │ prisY.v │ 1     │ 2.0    │
│ 6   │ x[6]   │ prisZ.v │ 1     │ 4.0    │


copy to variables: 
│ Row │ source  │ target  │
│     │ Symbol  │ Symbol  │
├─────┼─────────┼─────────┤
│ 1   │ x[1]    │ prisX.s │
│ 2   │ x[2]    │ prisY.s │
│ 3   │ x[3]    │ prisZ.s │
│ 4   │ x[4]    │ prisX.v │
│ 5   │ x[5]    │ prisY.v │
│ 6   │ x[6]    │ prisZ.v │
│ 7   │ derx[4] │ prisX.a │
│ 8   │ derx[5] │ prisY.a │
│ 9   │ derx[6] │ prisZ.a │


copy to residue vector: 
│ Row │ source            │ target     │
│     │ Symbol            │ Symbol     │
├─────┼───────────────────┼────────────┤
│ 1   │ derx[1] - prisX.v │ residue[1] │
│ 2   │ derx[2] - prisY.v │ residue[2] │
│ 3   │ derx[3] - prisZ.v │ residue[3] │
│ 4   │ prisX.residue     │ residue[4] │
│ 5   │ prisY.residue     │ residue[5] │
│ 6   │ prisZ.residue     │ residue[6] │


copy to results: 
│ Row │ source  │ target     │ start  │
│     │ Symbol  │ Symbol     │ Union… │
├─────┼─────────┼────────────┼────────┤
│ 1   │ time    │ result[1]  │ 0.0    │
│ 2   │ prisX.s │ result[2]  │ 0.0    │
│ 3   │ prisX.v │ result[3]  │ -6.0   │
│ 4   │ prisX.a │ result[4]  │ 0.0    │
│ 5   │ prisX.f │ result[5]  │ 0.0    │
│ 6   │ prisX.P │ result[6]  │ 0.0    │
│ 7   │ prisY.s │ result[7]  │ 0.0    │
│ 8   │ prisY.v │ result[8]  │ 2.0    │
│ 9   │ prisY.a │ result[9]  │ 0.0    │
│ 10  │ prisY.f │ result[10] │ 0.0    │
│ 11  │ prisY.P │ result[11] │ 0.0    │
│ 12  │ prisZ.s │ result[12] │ 0.0    │
│ 13  │ prisZ.v │ result[13] │ 4.0    │
│ 14  │ prisZ.a │ result[14] │ 0.0    │
│ 15  │ prisZ.f │ result[15] │ 0.0    │
│ 16  │ prisZ.P │ result[16] │ 0.0    │
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of contactForceLaw_2_boxes_Prismatic.jl!


variables: . Omitted printing of 12 columns
│ Row │ name                    │ ValueType                    │ unit    │
│     │ Symbol                  │ Symbol                       │ String  │
├─────┼─────────────────────────┼──────────────────────────────┼─────────┤
│ 1   │ time                    │ Float64                      │ s       │
│ 2   │ boxMoving.box.r         │ SArray{Tuple{3},Float64,1,3} │ m       │
│ 3   │ boxMoving.box.v         │ SArray{Tuple{3},Float64,1,3} │ m/s     │
│ 4   │ boxMoving.box.a         │ SArray{Tuple{3},Float64,1,3} │ m/s^2   │
│ 5   │ boxMoving.box.q         │ SArray{Tuple{4},Float64,1,4} │         │
│ 6   │ boxMoving.box.derq      │ SArray{Tuple{4},Float64,1,4} │ 1/s     │
│ 7   │ boxMoving.box.w         │ SArray{Tuple{3},Float64,1,3} │ rad/s   │
│ 8   │ boxMoving.box.z         │ SArray{Tuple{3},Float64,1,3} │ rad/s^2 │
│ 9   │ boxMoving.box.residue_w │ SArray{Tuple{3},Float64,1,3} │         │
│ 10  │ boxMoving.box.residue_f │ SArray{Tuple{3},Float64,1,3} │         │
│ 11  │ boxMoving.box.residue_t │ SArray{Tuple{3},Float64,1,3} │         │
│ 12  │ boxMoving.box.residue_q │ Float64                      │         │


x vector: 
│ Row │ x        │ name            │ fixed │ start                │
│     │ Symbol   │ Symbol          │ Bool  │ Union…               │
├─────┼──────────┼─────────────────┼───────┼──────────────────────┤
│ 1   │ x[1:3]   │ boxMoving.box.r │ 1     │ [0.3, 0.3, 0.4]      │
│ 2   │ x[4:6]   │ boxMoving.box.v │ 1     │ [0.0, 0.0, 0.0]      │
│ 3   │ x[7:10]  │ boxMoving.box.q │ 0     │ [0.0, 0.0, 0.0, 1.0] │
│ 4   │ x[11:13] │ boxMoving.box.w │ 1     │ [0.0, 0.0, 0.0]      │


copy to variables: 
│ Row │ source      │ target             │
│     │ Symbol      │ Symbol             │
├─────┼─────────────┼────────────────────┤
│ 1   │ x[1:3]      │ boxMoving.box.r    │
│ 2   │ x[4:6]      │ boxMoving.box.v    │
│ 3   │ x[7:10]     │ boxMoving.box.q    │
│ 4   │ x[11:13]    │ boxMoving.box.w    │
│ 5   │ derx[4:6]   │ boxMoving.box.a    │
│ 6   │ derx[7:10]  │ boxMoving.box.derq │
│ 7   │ derx[11:13] │ boxMoving.box.z    │


copy to residue vector: 
│ Row │ source                      │ target         │
│     │ Symbol                      │ Symbol         │
├─────┼─────────────────────────────┼────────────────┤
│ 1   │ derx[1:3] - boxMoving.box.v │ residue[1:3]   │
│ 2   │ boxMoving.box.residue_w     │ residue[4:6]   │
│ 3   │ boxMoving.box.residue_f     │ residue[7:9]   │
│ 4   │ boxMoving.box.residue_t     │ residue[10:12] │
│ 5   │ boxMoving.box.residue_q     │ residue[13]    │


copy to results: 
│ Row │ source             │ target        │ start                │
│     │ Symbol             │ Symbol        │ Union…               │
├─────┼────────────────────┼───────────────┼──────────────────────┤
│ 1   │ time               │ result[1]     │ 0.0                  │
│ 2   │ boxMoving.box.r    │ result[2:4]   │ [0.3, 0.3, 0.4]      │
│ 3   │ boxMoving.box.v    │ result[5:7]   │ [0.0, 0.0, 0.0]      │
│ 4   │ boxMoving.box.a    │ result[8:10]  │ [0.0, 0.0, 0.0]      │
│ 5   │ boxMoving.box.q    │ result[11:14] │ [0.0, 0.0, 0.0, 1.0] │
│ 6   │ boxMoving.box.derq │ result[15:18] │ [0.0, 0.0, 0.0, 0.0] │
│ 7   │ boxMoving.box.w    │ result[19:21] │ [0.0, 0.0, 0.0]      │
│ 8   │ boxMoving.box.z    │ result[22:24] │ [0.0, 0.0, 0.0]      │
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: ThreeDFiles
      Initialization at time = 0.0 s
        initial values:
          │ x  │ name               │ start   │ fixed │ nominal │
          ├────┼────────────────────┼─────────┼───────┼─────────┤
          │ 1  │ boxMoving.box.r[1] │ 0.3     │ 1     │ 1.0     │
          │ 2  │ boxMoving.box.r[2] │ 0.3     │ 1     │ 1.0     │
          │ 3  │ boxMoving.box.r[3] │ 0.4     │ 1     │ 1.0     │
          │ 4  │ boxMoving.box.v[1] │ 0.0     │ 1     │ 1.0     │
          │ 5  │ boxMoving.box.v[2] │ 0.0     │ 1     │ 1.0     │
          │ 6  │ boxMoving.box.v[3] │ 0.0     │ 1     │ 1.0     │
          │ 7  │ boxMoving.box.q[1] │ 0.0     │ 0     │ 1.0     │
          │ 8  │ boxMoving.box.q[2] │ 0.0     │ 0     │ 1.0     │
          │ 9  │ boxMoving.box.q[3] │ 0.0     │ 0     │ 1.0     │
          │ 10 │ boxMoving.box.q[4] │ 1.0     │ 0     │ 1.0     │
          │ 11 │ boxMoving.box.w[1] │ 0.0     │ 1     │ 1.0     │
          │ 12 │ boxMoving.box.w[2] │ 0.0     │ 1     │ 1.0     │
          │ 13 │ boxMoving.box.w[3] │ 0.0     │ 1     │ 1.0     │

        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
      Simulation started

      State event (zero-crossing) at time = 0.24731005616100146 s (z[2] < 0)
        distance(box,boxMoving.ball8) = -2.000004734248911e-8 became < 0
            contact normal = [-2.26e-06,-1.71e-06,1], contact position = [0.201,0.201,-8.94e-07], c_res=6.55e+09, d_res=0.44
        distance(box,boxMoving.ball7) = -2.0000047342488728e-8 became < 0
            contact normal = [1.71e-06,-2.26e-06,1], contact position = [0.399,0.201,-8.94e-07], c_res=6.55e+09, d_res=0.44
        distance(box,boxMoving.ball6) = -2.0000047342489152e-8 became < 0
            contact normal = [-1.71e-06,2.26e-06,1], contact position = [0.201,0.399,-8.94e-07], c_res=6.55e+09, d_res=0.44
        distance(box,boxMoving.ball5) = -2.0000047342488728e-8 became < 0
            contact normal = [2.26e-06,1.71e-06,1], contact position = [0.399,0.399,-8.94e-07], c_res=6.55e+09, d_res=0.44
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.24811256605713514 s (z[1] > 0)
        distance(box,boxMoving.ball8)  became > 0
        distance(box,boxMoving.ball7)  became > 0
        distance(box,boxMoving.ball6)  became > 0
        distance(box,boxMoving.ball5)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.5331965875313578 s (z[2] < 0)
        distance(box,boxMoving.ball8) = -2.0000053829714512e-8 became < 0
            contact normal = [-2.24e-06,-4.19e-07,1], contact position = [0.201,0.201,-8.29e-07], c_res=6.55e+09, d_res=0.763
        distance(box,boxMoving.ball7) = -2.0000052961080954e-8 became < 0
            contact normal = [4.19e-07,-2.24e-06,1], contact position = [0.399,0.201,-8.29e-07], c_res=6.55e+09, d_res=0.763
        distance(box,boxMoving.ball6) = -2.000005323904371e-8 became < 0
            contact normal = [-4.19e-07,2.24e-06,1], contact position = [0.201,0.399,-8.29e-07], c_res=6.55e+09, d_res=0.763
        distance(box,boxMoving.ball5) = -2.0000052370410364e-8 became < 0
            contact normal = [2.24e-06,4.19e-07,1], contact position = [0.399,0.399,-8.29e-07], c_res=6.55e+09, d_res=0.763
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.5340932462934279 s (z[1] > 0)
        distance(box,boxMoving.ball8)  became > 0
        distance(box,boxMoving.ball7)  became > 0
        distance(box,boxMoving.ball6)  became > 0
        distance(box,boxMoving.ball5)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.6981642429215671 s (z[2] < 0)
        distance(box,boxMoving.ball8) = -1.99997494879268e-8 became < 0
            contact normal = [-2.24e-06,-4.19e-07,1], contact position = [0.201,0.201,-8.29e-07], c_res=6.55e+09, d_res=1.33
        distance(box,boxMoving.ball7) = -1.999990914271078e-8 became < 0
            contact normal = [4.19e-07,-2.24e-06,1], contact position = [0.399,0.201,-8.29e-07], c_res=6.55e+09, d_res=1.33
        distance(box,boxMoving.ball6) = -1.99998613331054e-8 became < 0
            contact normal = [-4.19e-07,2.24e-06,1], contact position = [0.201,0.399,-8.29e-07], c_res=6.55e+09, d_res=1.33
        distance(box,boxMoving.ball5) = -2.000002098788915e-8 became < 0
            contact normal = [2.24e-06,4.19e-07,1], contact position = [0.399,0.399,-8.29e-07], c_res=6.55e+09, d_res=1.33
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.6991670861029298 s (z[1] > 0)
        distance(box,boxMoving.ball8)  became > 0
        distance(box,boxMoving.ball7)  became > 0
        distance(box,boxMoving.ball6)  became > 0
        distance(box,boxMoving.ball5)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.7933203482723291 s (z[2] < 0)
        distance(box,boxMoving.ball8) = -2.0000015613892785e-8 became < 0
            contact normal = [-2.24e-06,-4.19e-07,1], contact position = [0.201,0.201,-8.29e-07], c_res=6.55e+09, d_res=2.31
        distance(box,boxMoving.ball7) = -1.998535284357674e-8 became < 0
            contact normal = [4.19e-07,-2.24e-06,1], contact position = [0.399,0.201,-8.29e-07], c_res=6.55e+09, d_res=2.31
        distance(box,boxMoving.ball6) = -1.9989737847527275e-8 became < 0
            contact normal = [-4.19e-07,2.24e-06,1], contact position = [0.201,0.399,-8.29e-07], c_res=6.55e+09, d_res=2.31
        distance(box,boxMoving.ball5) = -1.997507507793743e-8 became < 0
            contact normal = [2.24e-06,4.19e-07,1], contact position = [0.399,0.399,-8.29e-07], c_res=6.55e+09, d_res=2.31
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.7944441334050762 s (z[1] > 0)
        distance(box,boxMoving.ball8)  became > 0
        distance(box,boxMoving.ball7)  became > 0
        distance(box,boxMoving.ball6)  became > 0
        distance(box,boxMoving.ball5)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.8481667628460017 s (z[2] < 0)
        distance(box,boxMoving.ball8) = -1.8883445996158144e-8 became < 0
            contact normal = [-2.24e-06,-4.19e-07,1], contact position = [0.201,0.201,-8.29e-07], c_res=6.55e+09, d_res=4.05
        distance(box,boxMoving.ball7) = -1.9539959612297196e-8 became < 0
            contact normal = [4.19e-07,-2.24e-06,1], contact position = [0.399,0.201,-8.29e-07], c_res=6.55e+09, d_res=4.05
        distance(box,boxMoving.ball6) = -1.934348639361537e-8 became < 0
            contact normal = [-4.19e-07,2.24e-06,1], contact position = [0.201,0.399,-8.29e-07], c_res=6.55e+09, d_res=4.05
        distance(box,boxMoving.ball5) = -2.000000000997641e-8 became < 0
            contact normal = [2.24e-06,4.19e-07,1], contact position = [0.399,0.399,-8.29e-07], c_res=6.55e+09, d_res=4.05
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.8494309894540912 s (z[1] > 0)
        distance(box,boxMoving.ball8)  became > 0
        distance(box,boxMoving.ball7)  became > 0
        distance(box,boxMoving.ball6)  became > 0
        distance(box,boxMoving.ball5)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.8797327057455632 s (z[2] < 0)
        distance(box,boxMoving.ball8) = -2.0000003745583985e-8 became < 0
            contact normal = [-2.24e-06,-4.19e-07,1], contact position = [0.201,0.201,-8.29e-07], c_res=6.55e+09, d_res=7.18
        distance(box,boxMoving.ball6) = -1.0459074092430378e-8 became < 0
            contact normal = [-4.19e-07,2.24e-06,1], contact position = [0.201,0.399,-8.3e-07], c_res=6.55e+09, d_res=7.18
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.8797327423372343 s (z[2] < 0)
        distance(box,boxMoving.ball7) = -2.0000001635799402e-8 became < 0
            contact normal = [4.19e-07,-2.24e-06,1], contact position = [0.399,0.201,-8.29e-07], c_res=6.55e+09, d_res=7.18
        distance(box,boxMoving.ball5) = -1.0459060818735033e-8 became < 0
            contact normal = [2.24e-06,4.19e-07,1], contact position = [0.399,0.399,-8.3e-07], c_res=6.55e+09, d_res=7.18
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.8811664555399191 s (z[1] > 0)
        distance(box,boxMoving.ball8)  became > 0
        distance(box,boxMoving.ball7)  became > 0
        distance(box,boxMoving.ball6)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.881166529093545 s (z[1] > 0)
        distance(box,boxMoving.ball5)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.8978461032439364 s (z[2] < 0)
        distance(box,boxMoving.ball5) = -2.00000021027033e-8 became < 0
            contact normal = [2.24e-06,4.19e-07,1], contact position = [0.399,0.399,-8.29e-07], c_res=6.55e+09, d_res=13
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.8978465231054804 s (z[2] < 0)
        distance(box,boxMoving.ball7) = -2.0000002036654078e-8 became < 0
            contact normal = [4.19e-07,-2.24e-06,1], contact position = [0.399,0.201,-8.29e-07], c_res=6.55e+09, d_res=13
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.8978466898184074 s (z[2] < 0)
        distance(box,boxMoving.ball6) = -2.0000002036643847e-8 became < 0
            contact normal = [-4.19e-07,2.24e-06,1], contact position = [0.201,0.399,-8.29e-07], c_res=6.55e+09, d_res=13
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.897847109677757 s (z[2] < 0)
        distance(box,boxMoving.ball8) = -2.0000002047102296e-8 became < 0
            contact normal = [-2.24e-06,-4.19e-07,1], contact position = [0.201,0.201,-8.29e-07], c_res=6.55e+09, d_res=13
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.8995017222895608 s (z[1] > 0)
        distance(box,boxMoving.ball5)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.8995021930697616 s (z[1] > 0)
        distance(box,boxMoving.ball7)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.8995023800796185 s (z[1] > 0)
        distance(box,boxMoving.ball6)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.8995028512556387 s (z[1] > 0)
        distance(box,boxMoving.ball8)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.9081743999047381 s (z[2] < 0)
        distance(box,boxMoving.ball8) = -2.0000001090798283e-8 became < 0
            contact normal = [-2.24e-06,-4.19e-07,1], contact position = [0.201,0.201,-8.29e-07], c_res=6.55e+09, d_res=25.1
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.9081770083373217 s (z[2] < 0)
        distance(box,boxMoving.ball6) = -2.0000000996666817e-8 became < 0
            contact normal = [-4.19e-07,2.24e-06,1], contact position = [0.201,0.399,-8.29e-07], c_res=6.55e+09, d_res=25.1
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.9081780461460133 s (z[2] < 0)
        distance(box,boxMoving.ball7) = -2.0000000011988114e-8 became < 0
            contact normal = [4.19e-07,-2.24e-06,1], contact position = [0.399,0.201,-8.29e-07], c_res=6.55e+09, d_res=25.1
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.9081806541695954 s (z[2] < 0)
        distance(box,boxMoving.ball5) = -2.0000001911987627e-8 became < 0
            contact normal = [2.24e-06,4.19e-07,1], contact position = [0.399,0.399,-8.29e-07], c_res=6.55e+09, d_res=25.1
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.9101822738954305 s (z[1] > 0)
        distance(box,boxMoving.ball8)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.9101850202640465 s (z[1] > 0)
        distance(box,boxMoving.ball6)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.9101861160957367 s (z[1] > 0)
        distance(box,boxMoving.ball7)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.9101888716561791 s (z[1] > 0)
        distance(box,boxMoving.ball5)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.9139767452969288 s (z[2] < 0)
        distance(box,boxMoving.ball5) = -2.0000000014555335e-8 became < 0
            contact normal = [2.24e-06,4.19e-07,1], contact position = [0.399,0.399,-8.29e-07], c_res=6.55e+09, d_res=57.4
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.9139812837877265 s (z[2] < 0)
        distance(box,boxMoving.ball7) = -2.0000000472104117e-8 became < 0
            contact normal = [4.19e-07,-2.24e-06,1], contact position = [0.399,0.201,-8.29e-07], c_res=6.55e+09, d_res=57.3
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.9139830906632025 s (z[2] < 0)
        distance(box,boxMoving.ball6) = -2.0000000002480738e-8 became < 0
            contact normal = [-4.19e-07,2.24e-06,1], contact position = [0.201,0.399,-8.29e-07], c_res=6.55e+09, d_res=57.3
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.9139876199046001 s (z[2] < 0)
        distance(box,boxMoving.ball8) = -2.000000050300253e-8 became < 0
            contact normal = [-2.24e-06,-4.19e-07,1], contact position = [0.201,0.201,-8.29e-07], c_res=6.55e+09, d_res=57.2
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      Simulation is terminated at time = 2.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 4.4 s (init: 0.0078 s, integration: 4.4 s)
        startTime      = 0.0 s
        stopTime       = 2.0 s
        interval       = 0.001 s
        tolerance      = 1.0e-8
        nEquations     = 13 (includes 1 constraints)
        nResults       = 2069
        nSteps         = 2762
        nResidues      = 12104 (includes residue calls for Jacobian)
        nZeroCrossings = 5083
        nJac           = 634
        nTimeEvents    = 0
        nStateEvents   = 34
        nRestartEvents = 34
        nErrTestFails  = 101
        h0             = 1.8e-10 s
        hMin           = 1.8e-10 s
        hMax           = 0.47 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of contactForceLaw_2_boxes2.jl!
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: ThreeDFiles
      Initialization at time = 0.0 s
        initial values:
          │ x  │ name              │ start   │ fixed │ nominal │
          ├────┼───────────────────┼─────────┼───────┼─────────┤
          │ 1  │ sphereMoving.r[1] │ 0.0     │ 1     │ 1.0     │
          │ 2  │ sphereMoving.r[2] │ 0.0     │ 1     │ 1.0     │
          │ 3  │ sphereMoving.r[3] │ 0.0     │ 1     │ 1.0     │
          │ 4  │ sphereMoving.v[1] │ 0.0     │ 1     │ 1.0     │
          │ 5  │ sphereMoving.v[2] │ 0.0     │ 1     │ 1.0     │
          │ 6  │ sphereMoving.v[3] │ 0.0     │ 1     │ 1.0     │
          │ 7  │ sphereMoving.q[1] │ 0.0     │ 0     │ 1.0     │
          │ 8  │ sphereMoving.q[2] │ 0.0     │ 0     │ 1.0     │
          │ 9  │ sphereMoving.q[3] │ 0.0     │ 0     │ 1.0     │
          │ 10 │ sphereMoving.q[4] │ 1.0     │ 0     │ 1.0     │
          │ 11 │ sphereMoving.w[1] │ 0.0     │ 1     │ 1.0     │
          │ 12 │ sphereMoving.w[2] │ 0.0     │ 1     │ 1.0     │
          │ 13 │ sphereMoving.w[3] │ 0.0     │ 1     │ 1.0     │

        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
      Simulation started

      State event (zero-crossing) at time = 0.6772856461815322 s (z[2] < 0)
        distance(box,sphereMoving) = -2.000000010322145e-8 became < 0
            contact normal = [1,3.29e-07,6.38e-08], contact position = [-2.5,-8.23e-08,-1.59e-08], c_res=1.1e+11, d_res=0.103
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 0.6805673217160505 s (z[1] > 0)
        distance(box,sphereMoving)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 1.604523787030293 s (z[2] < 0)
        distance(box,sphereMoving) = -2.0000000015017868e-8 became < 0
            contact normal = [1,2.82e-07,1.59e-07], contact position = [-2.5,1.31e-06,2.28e-07], c_res=1.1e+11, d_res=0.151
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 1.6080679141645005 s (z[1] > 0)
        distance(box,sphereMoving)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 2.2377169757480853 s (z[2] < 0)
        distance(box,sphereMoving) = -2.000000006593378e-8 became < 0
            contact normal = [1,2.82e-07,1.59e-07], contact position = [-2.5,1.86e-06,5.39e-07], c_res=1.1e+11, d_res=0.222
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 2.2415470428594424 s (z[1] > 0)
        distance(box,sphereMoving)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 2.6700005061182654 s (z[2] < 0)
        distance(box,sphereMoving) = -2.000001605328688e-8 became < 0
            contact normal = [1,2.82e-07,1.59e-07], contact position = [-2.5,2.12e-06,6.87e-07], c_res=1.1e+11, d_res=0.326
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 2.674142993270264 s (z[1] > 0)
        distance(box,sphereMoving)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 2.9650010951552574 s (z[2] < 0)
        distance(box,sphereMoving) = -2.0000011286650343e-8 became < 0
            contact normal = [1,2.82e-07,1.59e-07], contact position = [-2.5,2.26e-06,7.61e-07], c_res=1.1e+11, d_res=0.481
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 2.9694874245664495 s (z[1] > 0)
        distance(box,sphereMoving)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 3.166184348804458 s (z[2] < 0)
        distance(box,sphereMoving) = -2.000000008377676e-8 became < 0
            contact normal = [1,2.82e-07,1.59e-07], contact position = [-2.5,2.33e-06,8.01e-07], c_res=1.1e+11, d_res=0.711
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 3.171053554394586 s (z[1] > 0)
        distance(box,sphereMoving)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 3.3032418222143822 s (z[2] < 0)
        distance(box,sphereMoving) = -2.0000000035369135e-8 became < 0
            contact normal = [1,2.82e-07,1.59e-07], contact position = [-2.5,2.37e-06,8.24e-07], c_res=1.1e+11, d_res=1.06
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 3.3085455321837167 s (z[1] > 0)
        distance(box,sphereMoving)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 3.396454112727742 s (z[2] < 0)
        distance(box,sphereMoving) = -2.000000324163616e-8 became < 0
            contact normal = [1,2.82e-07,1.59e-07], contact position = [-2.5,2.39e-06,8.38e-07], c_res=1.1e+11, d_res=1.59
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 3.402266590729442 s (z[1] > 0)
        distance(box,sphereMoving)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 3.4596696774585123 s (z[2] < 0)
        distance(box,sphereMoving) = -2.0000001717996415e-8 became < 0
            contact normal = [1,2.82e-07,1.59e-07], contact position = [-2.5,2.41e-06,8.48e-07], c_res=1.1e+11, d_res=2.44
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 3.4661106876106125 s (z[1] > 0)
        distance(box,sphereMoving)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 3.5023370104431364 s (z[2] < 0)
        distance(box,sphereMoving) = -2.000000009343195e-8 became < 0
            contact normal = [1,2.82e-07,1.59e-07], contact position = [-2.5,2.42e-06,8.53e-07], c_res=1.1e+11, d_res=3.86
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 3.509635205421355 s (z[1] > 0)
        distance(box,sphereMoving)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 3.530883435301823 s (z[2] < 0)
        distance(box,sphereMoving) = -2.000000010247696e-8 became < 0
            contact normal = [1,2.82e-07,1.59e-07], contact position = [-2.5,2.43e-06,8.57e-07], c_res=1.1e+11, d_res=6.58
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 3.539642177740478 s (z[1] > 0)
        distance(box,sphereMoving)  became > 0
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      State event (zero-crossing) at time = 3.5495897320386813 s (z[2] < 0)
        distance(box,sphereMoving) = -2.000000030575503e-8 became < 0
            contact normal = [1,2.82e-07,1.59e-07], contact position = [-2.5,2.43e-06,8.6e-07], c_res=1.1e+11, d_res=14.1
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      Simulation is terminated at time = 6.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 3.4 s (init: 0.0037 s, integration: 3.4 s)
        startTime      = 0.0 s
        stopTime       = 6.0 s
        interval       = 0.001 s
        tolerance      = 1.0e-8
        nEquations     = 13 (includes 1 constraints)
        nResults       = 6047
        nSteps         = 3729
        nResidues      = 14105 (includes residue calls for Jacobian)
        nZeroCrossings = 9935
        nJac           = 653
        nTimeEvents    = 0
        nStateEvents   = 23
        nRestartEvents = 23
        nErrTestFails  = 130
        h0             = 1.8e-10 s
        hMin           = 1.8e-10 s
        hMax           = 0.89 s
        orderMax       = 5
        sparseSolver   = false
... success of contactForceLaw_Ball.jl!
... success of contactForceLaw_ballWithBall.jl!


variables: . Omitted printing of 12 columns
│ Row │ name                   │ ValueType                    │ unit    │
│     │ Symbol                 │ Symbol                       │ String  │
├─────┼────────────────────────┼──────────────────────────────┼─────────┤
│ 1   │ time                   │ Float64                      │ s       │
│ 2   │ sphereMoving.r         │ SArray{Tuple{3},Float64,1,3} │ m       │
│ 3   │ sphereMoving.v         │ SArray{Tuple{3},Float64,1,3} │ m/s     │
│ 4   │ sphereMoving.a         │ SArray{Tuple{3},Float64,1,3} │ m/s^2   │
│ 5   │ sphereMoving.q         │ SArray{Tuple{4},Float64,1,4} │         │
│ 6   │ sphereMoving.derq      │ SArray{Tuple{4},Float64,1,4} │ 1/s     │
│ 7   │ sphereMoving.w         │ SArray{Tuple{3},Float64,1,3} │ rad/s   │
│ 8   │ sphereMoving.z         │ SArray{Tuple{3},Float64,1,3} │ rad/s^2 │
│ 9   │ sphereMoving.residue_w │ SArray{Tuple{3},Float64,1,3} │         │
│ 10  │ sphereMoving.residue_f │ SArray{Tuple{3},Float64,1,3} │         │
│ 11  │ sphereMoving.residue_t │ SArray{Tuple{3},Float64,1,3} │         │
│ 12  │ sphereMoving.residue_q │ Float64                      │         │


x vector: 
│ Row │ x        │ name           │ fixed │ start                │
│     │ Symbol   │ Symbol         │ Bool  │ Union…               │
├─────┼──────────┼────────────────┼───────┼──────────────────────┤
│ 1   │ x[1:3]   │ sphereMoving.r │ 1     │ [0.0, 0.0, 0.0]      │
│ 2   │ x[4:6]   │ sphereMoving.v │ 1     │ [2.0, 0.0, -3.0]     │
│ 3   │ x[7:10]  │ sphereMoving.q │ 0     │ [0.0, 0.0, 0.0, 1.0] │
│ 4   │ x[11:13] │ sphereMoving.w │ 1     │ [0.0, 0.0, 0.0]      │


copy to variables: 
│ Row │ source      │ target            │
│     │ Symbol      │ Symbol            │
├─────┼─────────────┼───────────────────┤
│ 1   │ x[1:3]      │ sphereMoving.r    │
│ 2   │ x[4:6]      │ sphereMoving.v    │
│ 3   │ x[7:10]     │ sphereMoving.q    │
│ 4   │ x[11:13]    │ sphereMoving.w    │
│ 5   │ derx[4:6]   │ sphereMoving.a    │
│ 6   │ derx[7:10]  │ sphereMoving.derq │
│ 7   │ derx[11:13] │ sphereMoving.z    │


copy to residue vector: 
│ Row │ source                     │ target         │
│     │ Symbol                     │ Symbol         │
├─────┼────────────────────────────┼────────────────┤
│ 1   │ derx[1:3] - sphereMoving.v │ residue[1:3]   │
│ 2   │ sphereMoving.residue_w     │ residue[4:6]   │
│ 3   │ sphereMoving.residue_f     │ residue[7:9]   │
│ 4   │ sphereMoving.residue_t     │ residue[10:12] │
│ 5   │ sphereMoving.residue_q     │ residue[13]    │


copy to results: 
│ Row │ source            │ target        │ start                │
│     │ Symbol            │ Symbol        │ Union…               │
├─────┼───────────────────┼───────────────┼──────────────────────┤
│ 1   │ time              │ result[1]     │ 0.0                  │
│ 2   │ sphereMoving.r    │ result[2:4]   │ [0.0, 0.0, 0.0]      │
│ 3   │ sphereMoving.v    │ result[5:7]   │ [2.0, 0.0, -3.0]     │
│ 4   │ sphereMoving.a    │ result[8:10]  │ [0.0, 0.0, 0.0]      │
│ 5   │ sphereMoving.q    │ result[11:14] │ [0.0, 0.0, 0.0, 1.0] │
│ 6   │ sphereMoving.derq │ result[15:18] │ [0.0, 0.0, 0.0, 0.0] │
│ 7   │ sphereMoving.w    │ result[19:21] │ [0.0, 0.0, 0.0]      │
│ 8   │ sphereMoving.z    │ result[22:24] │ [0.0, 0.0, 0.0]      │
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of contactForceLaw_ballWithBox_45Deg.jl!


variables: . Omitted printing of 9 columns
│ Row │ name          │ ValueType │ unit   │ numericType │ vec     │ vecIndex │
│     │ Symbol        │ Symbol    │ String │ ModiaMat…   │ Symbol  │ Any      │
├─────┼───────────────┼───────────┼────────┼─────────────┼─────────┼──────────┤
│ 1   │ time          │ Float64   │ s      │ TIME        │         │ 0        │
│ 2   │ prisX.s       │ Float64   │ m      │ XD_EXP      │ x       │ 1        │
│ 3   │ prisX.v       │ Float64   │ m/s    │ XD_IMP      │ x       │ 4        │
│ 4   │ prisX.a       │ Float64   │ m/s^2  │ DER_XD_IMP  │ derx    │ 4        │
│ 5   │ prisX.f       │ Float64   │ N      │ WR          │         │ 0        │
│ 6   │ prisX.residue │ Float64   │        │ FD_IMP      │ residue │ 4        │
│ 7   │ prisX.P       │ Float64   │ J      │ WC          │         │ 0        │
⋮
│ 12  │ prisY.residue │ Float64   │        │ FD_IMP      │ residue │ 5        │
│ 13  │ prisY.P       │ Float64   │ J      │ WC          │         │ 0        │
│ 14  │ prisZ.s       │ Float64   │ m      │ XD_EXP      │ x       │ 3        │
│ 15  │ prisZ.v       │ Float64   │ m/s    │ XD_IMP      │ x       │ 6        │
│ 16  │ prisZ.a       │ Float64   │ m/s^2  │ DER_XD_IMP  │ derx    │ 6        │
│ 17  │ prisZ.f       │ Float64   │ N      │ WR          │         │ 0        │
│ 18  │ prisZ.residue │ Float64   │        │ FD_IMP      │ residue │ 6        │
│ 19  │ prisZ.P       │ Float64   │ J      │ WC          │         │ 0        │


x vector: 
│ Row │ x      │ name    │ fixed │ start  │
│     │ Symbol │ Symbol  │ Bool  │ Union… │
├─────┼────────┼─────────┼───────┼────────┤
│ 1   │ x[1]   │ prisX.s │ 1     │ 0.0    │
│ 2   │ x[2]   │ prisY.s │ 1     │ 0.0    │
│ 3   │ x[3]   │ prisZ.s │ 1     │ 0.0    │
│ 4   │ x[4]   │ prisX.v │ 1     │ 2.0    │
│ 5   │ x[5]   │ prisY.v │ 1     │ 0.0    │
│ 6   │ x[6]   │ prisZ.v │ 1     │ -3.0   │


copy to variables: 
│ Row │ source  │ target  │
│     │ Symbol  │ Symbol  │
├─────┼─────────┼─────────┤
│ 1   │ x[1]    │ prisX.s │
│ 2   │ x[2]    │ prisY.s │
│ 3   │ x[3]    │ prisZ.s │
│ 4   │ x[4]    │ prisX.v │
│ 5   │ x[5]    │ prisY.v │
│ 6   │ x[6]    │ prisZ.v │
│ 7   │ derx[4] │ prisX.a │
│ 8   │ derx[5] │ prisY.a │
│ 9   │ derx[6] │ prisZ.a │


copy to residue vector: 
│ Row │ source            │ target     │
│     │ Symbol            │ Symbol     │
├─────┼───────────────────┼────────────┤
│ 1   │ derx[1] - prisX.v │ residue[1] │
│ 2   │ derx[2] - prisY.v │ residue[2] │
│ 3   │ derx[3] - prisZ.v │ residue[3] │
│ 4   │ prisX.residue     │ residue[4] │
│ 5   │ prisY.residue     │ residue[5] │
│ 6   │ prisZ.residue     │ residue[6] │


copy to results: 
│ Row │ source  │ target     │ start  │
│     │ Symbol  │ Symbol     │ Union… │
├─────┼─────────┼────────────┼────────┤
│ 1   │ time    │ result[1]  │ 0.0    │
│ 2   │ prisX.s │ result[2]  │ 0.0    │
│ 3   │ prisX.v │ result[3]  │ 2.0    │
│ 4   │ prisX.a │ result[4]  │ 0.0    │
│ 5   │ prisX.f │ result[5]  │ 0.0    │
│ 6   │ prisX.P │ result[6]  │ 0.0    │
│ 7   │ prisY.s │ result[7]  │ 0.0    │
│ 8   │ prisY.v │ result[8]  │ 0.0    │
│ 9   │ prisY.a │ result[9]  │ 0.0    │
│ 10  │ prisY.f │ result[10] │ 0.0    │
│ 11  │ prisY.P │ result[11] │ 0.0    │
│ 12  │ prisZ.s │ result[12] │ 0.0    │
│ 13  │ prisZ.v │ result[13] │ -3.0   │
│ 14  │ prisZ.a │ result[14] │ 0.0    │
│ 15  │ prisZ.f │ result[15] │ 0.0    │
│ 16  │ prisZ.P │ result[16] │ 0.0    │
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: TwoBoxes
      Initialization at time = 0.0 s
        initial values:
          │ x │ name    │ start   │ fixed │ nominal │
          ├───┼─────────┼─────────┼───────┼─────────┤
          │ 1 │ prisX.s │ 0.0     │ 1     │ 1.0     │
          │ 2 │ prisY.s │ 0.0     │ 1     │ 1.0     │
          │ 3 │ prisZ.s │ 0.0     │ 1     │ 1.0     │
          │ 4 │ prisX.v │ 2.0     │ 1     │ 2.0     │
          │ 5 │ prisY.v │ 0.0     │ 1     │ 1.0     │
          │ 6 │ prisZ.v │ -3.0    │ 1     │ 3.0     │

        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      State event (zero-crossing) at time = 0.43731521721763345 s (z[2] < 0)
        distance(box,boxMoving) = -2.0000005749098553e-8 became < 0
            contact normal = [1.72e-08,-7.57e-08,1], contact position = [0.875,1.89e-08,-2.5], c_res=1.1e+11, d_res=0.0941
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 0.4425862085910625 s (z[1] > 0)
        distance(box,boxMoving)  became > 0
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      Simulation is terminated at time = 0.5 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.28 s (init: 0.0015 s, integration: 0.28 s)
        startTime      = 0.0 s
        stopTime       = 0.5 s
        interval       = 0.001 s
        tolerance      = 1.0e-8
        nEquations     = 6 (includes 0 constraints)
        nResults       = 505
        nSteps         = 461
        nResidues      = 1322 (includes residue calls for Jacobian)
        nZeroCrossings = 976
        nJac           = 96
        nTimeEvents    = 0
        nStateEvents   = 2
        nRestartEvents = 2
        nErrTestFails  = 15
        h0             = 3.4e-10 s
        hMin           = 3.4e-10 s
        hMax           = 0.18 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of contactForceLaw_ballWithBox_Prismatic.jl!
... success of contactForceLaw_newtons_cradle.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of BillardBall1_Cushion1_directHit.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of BillardBall1_Cushion4_arbitraryHit.jl!

 ...test_Examples_Collision finished!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Simulate_DoublePendulum.jl!
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: DoublePendulumWithDampers
      Initialization at time = 0.0 s
        initial values:
          │ x │ name     │ start   │ fixed │ nominal │
          ├───┼──────────┼─────────┼───────┼─────────┤
          │ 1 │ rev1.phi │ 0.0     │ 1     │ 1.0     │
          │ 2 │ rev2.phi │ 0.0     │ 1     │ 1.0     │
          │ 3 │ rev1.w   │ 0.0     │ 1     │ 1.0     │
          │ 4 │ rev2.w   │ 0.0     │ 1     │ 1.0     │

        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.42 s (init: 0.013 s, integration: 0.41 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.001 s
        tolerance      = 1.0e-6
        nEquations     = 4 (includes 0 constraints)
        nResults       = 5001
        nSteps         = 837
        nResidues      = 1322 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 56
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 20
        h0             = 2.3e-09 s
        hMin           = 2.3e-09 s
        hMax           = 0.021 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Simulate_DoublePendulumWithDampers.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Simulate_FallingBall1.jl!
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Pendulum
      Initialization at time = 0.0 s
        initial values:
          │ x │ name    │ start   │ fixed │ nominal │
          ├───┼─────────┼─────────┼───────┼─────────┤
          │ 1 │ rev.phi │ 0.0     │ 1     │ 1.0     │
          │ 2 │ rev.w   │ 0.0     │ 1     │ 1.0     │

        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      Simulation is terminated at time = 4.5 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.085 s (init: 0.00084 s, integration: 0.084 s)
        startTime      = 0.0 s
        stopTime       = 4.5 s
        interval       = 0.002 s
        tolerance      = 1.0e-6
        nEquations     = 2 (includes 0 constraints)
        nResults       = 2251
        nSteps         = 272
        nResidues      = 339 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 26
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 2
        h0             = 5.8e-09 s
        hMin           = 5.8e-09 s
        hMax           = 0.021 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Simulate_Pendulum.jl!
WARNING: replacing module Simulate_Pendulum.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Pendulum
      Initialization at time = 0.0 s
        initial values:
          │ x │ name         │ start   │ fixed │ nominal │
          ├───┼──────────────┼─────────┼───────┼─────────┤
          │ 1 │ revolute.phi │ 0.0     │ 1     │ 1.0     │
          │ 2 │ revolute.w   │ 0.0     │ 1     │ 1.0     │

        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.1 s (init: 0.0014 s, integration: 0.1 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.002 s
        tolerance      = 1.0e-6
        nEquations     = 2 (includes 0 constraints)
        nResults       = 2501
        nSteps         = 262
        nResidues      = 370 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 22
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 1
        h0             = 8.3e-09 s
        hMin           = 8.3e-09 s
        hMax           = 0.046 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Simulate_Pendulum.jl!
WARNING: replacing module Simulate_Pendulum.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Simulate_Pendulum.jl!
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: PendulumWithController
      Initialization at time = 0.0 s
        initial values:
          │ x │ name    │ start   │ fixed │ nominal │
          ├───┼─────────┼─────────┼───────┼─────────┤
          │ 1 │ rev.phi │ 0.0     │ 1     │ 1.0     │
          │ 2 │ c.PI_x  │ 0.0     │ 0     │ 1.0     │
          │ 3 │ rev.w   │ 0.0     │ 1     │ 1.0     │

        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.16 s (init: 0.038 s, integration: 0.13 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.002 s
        tolerance      = 0.0001
        nEquations     = 3 (includes 0 constraints)
        nResults       = 2501
        nSteps         = 376
        nResidues      = 568 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 25
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 7
        h0             = 7.1e-07 s
        hMin           = 7.1e-07 s
        hMax           = 0.044 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Simulate_PendulumWithController.jl!
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: PendulumWithDamper
      Initialization at time = 0.0 s
        initial values:
          │ x │ name    │ start   │ fixed │ nominal │
          ├───┼─────────┼─────────┼───────┼─────────┤
          │ 1 │ rev.phi │ 0.0     │ 1     │ 1.0     │
          │ 2 │ rev.w   │ 0.0     │ 1     │ 1.0     │

        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.022 s (init: 0.012 s, integration: 0.0099 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.1 s
        tolerance      = 0.0001
        nEquations     = 2 (includes 0 constraints)
        nResults       = 51
        nSteps         = 136
        nResidues      = 230 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 22
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 7
        h0             = 5.8e-07 s
        hMin           = 5.8e-07 s
        hMax           = 0.085 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Simulate_PendulumWithDamper.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Move_DoublePendulum.jl!
... Revolute joint connecting Fourbar.bar3.frame2 with Fourbar.bar2.frame2 is a cut-joint

... Cut-joint fourbar.rev4 pushed on scene.cutJoints vector
... success of Move_FourBar.jl!
... Revolute joint connecting Fourbar2.bar3.frame2 with Fourbar2.bar2.frame2 is a cut-joint

... Cut-joint fourbar.rev4 pushed on scene.cutJoints vector
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Move2
      Initialization at time = 0.0 s
        initial values:
          │ x │ name             │ start   │ fixed │ nominal │
          ├───┼──────────────────┼─────────┼───────┼─────────┤
          │ 1 │ fourbar.rev2.phi │ -1.5708 │ 1     │ 1.5708  │
          │ 2 │ fourbar.rev3.phi │ 1.10715 │ 1     │ 1.10715 │

        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
      Simulation started

      Simulation is terminated at time = 3.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.081 s (init: 0.018 s, integration: 0.063 s)
        startTime      = 0.0 s
        stopTime       = 3.0 s
        interval       = 0.002 s
        tolerance      = 0.0001
        nEquations     = 2 (includes 2 constraints)
        nResults       = 1501
        nSteps         = 112
        nResidues      = 219 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 19
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 4
        h0             = 2e-06 s
        hMin           = 2e-06 s
        hMax           = 0.056 s
        orderMax       = 5
        sparseSolver   = false
... success of Move_FourBar2.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Test_SignalAngle.jl!
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... success of Test_SignalTorque.jl!
... success of Move_AllVisualObjects.jl!
... success of Move_SolidFileMesh.jl!
... success of Visualize_AllVisualObjects.jl!
... success of Visualize_Assembly.jl!
... success of Visualize_GeometriesWithMaterial.jl!
... success of Visualize_GeometriesWithoutMaterial.jl!
... success of Visualize_SolidFileMesh.jl!
... success of Visualize_Solids.jl!
... success of Visualize_Text.jl!
... success of Visualize_TextFonts.jl!

... success of runexamples.jl

... success of all tests!
Test Summary: | Pass  Total
Test Modia3D  |   57     57
   Testing Modia3D tests passed 
