Julia Version 1.4.0-DEV.646
Commit ce260dc47d (2019-12-19 21:21 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed LearnBase ─────────────────── v0.2.2
 Installed Tables ────────────────────── v0.2.11
 Installed MappedArrays ──────────────── v0.2.2
 Installed Compat ────────────────────── v3.0.0
 Installed KCenters ──────────────────── v0.1.8
 Installed DataStructures ────────────── v0.17.6
 Installed StatsBase ─────────────────── v0.32.0
 Installed JSON ──────────────────────── v0.21.0
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed DataValueInterfaces ───────── v1.0.0
 Installed PooledArrays ──────────────── v0.5.2
 Installed Reexport ──────────────────── v0.2.0
 Installed InvertedIndices ───────────── v1.0.0
 Installed Parsers ───────────────────── v0.3.10
 Installed DataAPI ───────────────────── v1.1.0
 Installed SortingAlgorithms ─────────── v0.3.1
 Installed DataFrames ────────────────── v0.20.0
 Installed SimilaritySearch ──────────── v0.3.17
 Installed MLLabelUtils ──────────────── v0.5.1
 Installed Missings ──────────────────── v0.4.3
 Installed OrderedCollections ────────── v1.1.0
 Installed TableTraits ───────────────── v1.0.0
 Installed MLDataUtils ───────────────── v0.5.0
 Installed MLDataPattern ─────────────── v0.5.0
 Installed CategoricalArrays ─────────── v0.7.4
  Updating `~/.julia/environments/v1.4/Project.toml`
  [5d8de97f] + KCenters v0.1.8
  Updating `~/.julia/environments/v1.4/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.4
  [34da2185] + Compat v3.0.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.6
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.8
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.10
  [2dfb63ee] + PooledArrays v0.5.2
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.17
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Testing KCenters
Path `/home/pkgeval/.julia/packages/KCenters/ME2xN` exists and looks like the correct package. Using existing path.
  Updating `/tmp/jl_dPQ0hd/Project.toml`
  [5d8de97f] + KCenters v0.1.8 [`~/.julia/packages/KCenters/ME2xN`]
  Updating `/tmp/jl_dPQ0hd/Manifest.toml`
  [5d8de97f] ~ KCenters v0.1.8 ⇒ v0.1.8 [`~/.julia/packages/KCenters/ME2xN`]
Running sandbox
Status `/tmp/jl_dPQ0hd/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.8 [`~/.julia/packages/KCenters/ME2xN`]
  [cc2ba9b6] MLDataUtils v0.5.0
  [053f045d] SimilaritySearch v0.3.17
  [2913bbd2] StatsBase v0.32.0
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [37e2e46d] LinearAlgebra 
  [9a3f8284] Random 
  [2f01184e] SparseArrays 
  [8dfed614] Test 
WARNING: Compat.Statistics is deprecated, use Statistics instead.
  likely near /home/pkgeval/.julia/packages/CategoricalArrays/u89s1/src/extras.jl:1
Test Summary: | Pass  Total
Scores        |    9      9
[ Info: 159.16
[ Info: 90.53000000000004
[ Info: 40.76000000000002
[ Info: 25.280000000000005
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 313.64000338064864
[ Info: 547.7999992523
[ Info: 146.2399983987154
[ Info: 76.04000118347305
Test Summary:        |
Clustering with dnet | No tests
inertia(cfft.distances) = 18.396896870430066
inertia(cdnet.distances) = 33.14580892553124
inertia(crand.distances) = 20.862579359807736
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8080341533466541,"seconds":5.593523383140564e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.484375,"distances_sum":2078.195747179569}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6923828125,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6923828125,"f1":0.8080341533466541,"seconds":5.593523383140564e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.484375,"distances_sum":2078.195747179569}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9540293040293045,"seconds":7.251277565956116e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.90625,"distances_sum":3004.8142329860225}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9548420329670335,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.984375,"distances_sum":2979.8395042093866}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9540293040293045,"seconds":7.251277565956116e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.90625,"distances_sum":3004.8142329860225}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9795959249084252,"seconds":7.010996341705322e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9765625,"distances_sum":3215.836544280058}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9686584249084254,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.96875,"distances_sum":3109.8282299401517}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9743704212454216,"seconds":6.230548024177551e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9609375,"distances_sum":3159.423858493824}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9795959249084252,"seconds":7.010996341705322e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9765625,"distances_sum":3215.836544280058}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9795959249084252,"seconds":7.010996341705322e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9765625,"distances_sum":3215.836544280058}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.416015625, conf: {"ssize":5,"bsize":2}, perf: {"precision":1.0,"recall":0.416015625,"f1":0.5652736152736153,"seconds":3.684312105178833e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":6.2265625,"distances_sum":1029.9788857542035}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8541141150516158,"seconds":1.0948628187179565e-5,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.2734375,"distances_sum":2043.0880044032604}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.541015625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.541015625,"f1":0.6820828477078481,"seconds":6.861984729766846e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.671875,"distances_sum":1315.7811645049783}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7607421875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7607421875,"f1":0.8541141150516158,"seconds":1.0948628187179565e-5,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.2734375,"distances_sum":2043.0880044032604}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9530792124542131,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7890625,"distances_sum":2704.978704970958}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.937806464368965,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7265625,"distances_sum":2542.082183020842}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8634365634365643,"seconds":5.036592483520508e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.4765625,"distances_sum":2127.901781284775}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9081330128205135,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.6796875,"distances_sum":2359.362857273806}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9530792124542131,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7890625,"distances_sum":2704.978704970958}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9736435439560442,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9140625,"distances_sum":2833.1535494587124}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9594894688644694,"seconds":6.6123902797698975e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.859375,"distances_sum":2730.587132535823}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9536343864468868,"seconds":7.586553692817688e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8046875,"distances_sum":2701.680934321518}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9736435439560442,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9140625,"distances_sum":2833.1535494587124}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9736435439560442,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9140625,"distances_sum":2833.1535494587124}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6474609375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6474609375,"f1":0.7767669830169838,"seconds":4.4833868741989136e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.8046875,"distances_sum":1653.536882669881}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.16015625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.16015625,"f1":null,"seconds":3.2745301723480225e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":4.46875,"distances_sum":433.1802856755462}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6474609375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6474609375,"f1":0.7767669830169838,"seconds":4.4833868741989136e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.8046875,"distances_sum":1653.536882669881}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9542239010989017,"seconds":5.748122930526733e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.75,"distances_sum":2719.8729657280783}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9542239010989017,"seconds":5.748122930526733e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.75,"distances_sum":2719.8729657280783}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9621737637362641,"seconds":7.078051567077637e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8671875,"distances_sum":2732.8037759631247}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9616300366300372,"seconds":6.254762411117554e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.828125,"distances_sum":2719.9014965528777}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9624287171162174,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7734375,"distances_sum":2777.646372011716}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9624287171162174,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7734375,"distances_sum":2777.646372011716}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9624287171162174,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7734375,"distances_sum":2777.646372011716}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.572265625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.572265625,"f1":0.7133670149295156,"seconds":4.408881068229675e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.71875,"distances_sum":1427.956664156585}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8648903180153187,"seconds":5.213543772697449e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.59375,"distances_sum":2158.805402524385}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7744140625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7744140625,"f1":0.8648903180153187,"seconds":5.213543772697449e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.59375,"distances_sum":2158.805402524385}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9132013819513828,"seconds":5.735084414482117e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.7421875,"distances_sum":2467.535512433489}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.935296474358975,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.875,"distances_sum":2586.0965814284496}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9368048618048622,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8984375,"distances_sum":2595.2023630245767}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9368048618048622,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8984375,"distances_sum":2595.2023630245767}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9733859890109893,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.953125,"distances_sum":2895.918186940017}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9611549908424912,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9453125,"distances_sum":2809.6143683841306}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9647722069597073,"seconds":5.973502993583679e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9140625,"distances_sum":2838.1220107016607}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9733859890109893,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.953125,"distances_sum":2895.918186940017}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9733859890109893,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.953125,"distances_sum":2895.918186940017}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2314453125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2314453125,"f1":null,"seconds":3.295019268989563e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.4765625,"distances_sum":629.2009674167554}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8583421786546797,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.5859375,"distances_sum":2216.7651664925734}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76953125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.76953125,"f1":0.8583421786546797,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.5859375,"distances_sum":2216.7651664925734}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9119765651015656,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8046875,"distances_sum":2556.155814109008}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9490587537462543,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.84375,"distances_sum":2818.6150937129737}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9394064269064272,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8515625,"distances_sum":2741.964549865769}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8755130286380296,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.6953125,"distances_sum":2275.401914940321}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9490587537462543,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.84375,"distances_sum":2818.6150937129737}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9729567307692312,"seconds":6.476417183876038e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9375,"distances_sum":3002.6424972505047}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9623569139194145,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8828125,"distances_sum":2930.531333346862}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9531478937728943,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8828125,"distances_sum":2837.224050027101}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9599587912087915,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.859375,"distances_sum":2912.2062532092173}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9541723901098905,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.875,"distances_sum":2877.2438669073017}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9729567307692312,"seconds":6.476417183876038e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9375,"distances_sum":3002.6424972505047}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9729567307692312,"seconds":6.476417183876038e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9375,"distances_sum":3002.6424972505047}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":3,"bsize":4}, perf: {"precision":0.9805245535714284,"recall":0.6533203125,"f1":0.7721944288350545,"seconds":5.029141902923584e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.59375,"distances_sum":1423.3543555636923}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5244140625, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.5244140625,"f1":null,"seconds":4.557892680168152e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.25,"distances_sum":1088.5870754813086}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9865327380952381,"recall":0.73046875,"f1":0.8313166000666005,"seconds":4.895031452178955e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.7578125,"distances_sum":1661.2486151758553}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":4,"bsize":5}, perf: {"precision":0.9805338541666666,"recall":0.7392578125,"f1":0.8361061464577094,"seconds":5.129724740982056e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.8671875,"distances_sum":1686.8243783155956}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7392578125,"state":{"ssize":4,"bsize":5},"perf":{"precision":0.9805338541666666,"recall":0.7392578125,"f1":0.8361061464577094,"seconds":5.129724740982056e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.8671875,"distances_sum":1686.8243783155956}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":6,"bsize":6}, perf: {"precision":0.987788318452381,"recall":0.810546875,"f1":0.8831211106601737,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.0859375,"distances_sum":1924.8395277091317}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9756231398809524,"recall":0.8994140625,"f1":0.9325084420787549,"seconds":6.156042218208313e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.875,"distances_sum":2208.320544902021}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":3,"bsize":9}, perf: {"precision":0.9796502976190475,"recall":0.9287109375,"f1":0.9514623397435901,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9296875,"distances_sum":2312.233767544945}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":4,"bsize":9}, perf: {"precision":0.9844401041666666,"recall":0.9287109375,"f1":0.9531457474816853,"seconds":4.2378902435302734e-5,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.90625,"distances_sum":2295.4444558149216}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":4,"bsize":7}, perf: {"precision":0.9859095982142856,"recall":0.8837890625,"f1":0.925804859203297,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6875,"distances_sum":2132.1233113551552}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.806640625, conf: {"ssize":4,"bsize":6}, perf: {"precision":0.982719494047619,"recall":0.806640625,"f1":0.8781896488927744,"seconds":5.4836273193359375e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.140625,"distances_sum":1888.7094458621893}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":3,"bsize":9},"perf":{"precision":0.9796502976190475,"recall":0.9287109375,"f1":0.9514623397435901,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9296875,"distances_sum":2312.233767544945}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":6,"bsize":12}, perf: {"precision":0.9775111607142858,"recall":0.9423828125,"f1":0.9582689445970698,"seconds":6.3963234424591064e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.96875,"distances_sum":2372.2844349365655}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":13}, perf: {"precision":0.9794177827380952,"recall":0.94921875,"f1":0.9628341059981687,"seconds":6.584450602531433e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.984375,"distances_sum":2387.705845849008}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":6,"bsize":8}, perf: {"precision":0.9814174107142858,"recall":0.931640625,"f1":0.9532637934981685,"seconds":6.284564733505249e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.8984375,"distances_sum":2334.615312461516}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":8,"bsize":8}, perf: {"precision":0.982793898809524,"recall":0.9365234375,"f1":0.9569039033882789,"seconds":6.251037120819092e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.953125,"distances_sum":2334.7542071051844}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":2,"bsize":9}, perf: {"precision":0.9894903273809524,"recall":0.9375,"f1":0.960938930860806,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.953125,"distances_sum":2316.801297487504}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":1,"bsize":13},"perf":{"precision":0.9794177827380952,"recall":0.94921875,"f1":0.9628341059981687,"seconds":6.584450602531433e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.984375,"distances_sum":2387.705845849008}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":1,"bsize":13},"perf":{"precision":0.9794177827380952,"recall":0.94921875,"f1":0.9628341059981687,"seconds":6.584450602531433e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.984375,"distances_sum":2387.705845849008}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8651504745254752,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":7.984375,"distances_sum":1653.0867479831254}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1904296875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1904296875,"f1":null,"seconds":2.868473529815674e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":5.71875,"distances_sum":381.0192485465704}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.7939699189699196,"seconds":4.291534423828125e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":7.625,"distances_sum":1412.216974139007}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.8651504745254752,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":7.984375,"distances_sum":1653.0867479831254}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9522951007326013,"seconds":5.3513795137405396e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.765625,"distances_sum":2157.7163535425275}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9386478105228112,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.625,"distances_sum":2107.4271123612707}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9522951007326013,"seconds":5.3513795137405396e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.765625,"distances_sum":2157.7163535425275}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9762648809523812,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.875,"distances_sum":2310.840301144054}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9730483058608062,"seconds":5.593523383140564e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.8828125,"distances_sum":2275.833966880216}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9762648809523812,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.875,"distances_sum":2310.840301144054}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9762648809523812,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.875,"distances_sum":2310.840301144054}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.18359375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.18359375,"f1":null,"seconds":2.6747584342956543e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":5.0,"distances_sum":416.62070324328727}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6279296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6279296875,"f1":0.7569824272949282,"seconds":4.190951585769653e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":7.1953125,"distances_sum":1241.6447662592018}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6279296875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6279296875,"f1":0.7569824272949282,"seconds":4.190951585769653e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":7.1953125,"distances_sum":1241.6447662592018}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9262081668331672,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.4375,"distances_sum":2087.1391688936983}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9471871878121885,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.6875,"distances_sum":2201.6931808768777}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9471871878121885,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.6875,"distances_sum":2201.6931808768777}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9761561355311356,"seconds":5.751848220825195e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.90625,"distances_sum":2344.7672037735488}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.972699175824176,"seconds":5.500391125679016e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.9140625,"distances_sum":2316.7799894442214}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9663919413919417,"seconds":5.379319190979004e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.8203125,"distances_sum":2298.5348347374975}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9580815018315023,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.75,"distances_sum":2255.984772596039}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9761561355311356,"seconds":5.751848220825195e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.90625,"distances_sum":2344.7672037735488}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9761561355311356,"seconds":5.751848220825195e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.90625,"distances_sum":2344.7672037735488}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5390625, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5390625,"f1":null,"seconds":3.978610038757324e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.140625,"distances_sum":1033.7445616508169}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8648070679320687,"seconds":5.04031777381897e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.140625,"distances_sum":1674.662639111177}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.36328125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.36328125,"f1":null,"seconds":3.209337592124939e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":5.6015625,"distances_sum":660.8555539130933}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.8648070679320687,"seconds":5.04031777381897e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.140625,"distances_sum":1674.662639111177}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8745421245421254,"seconds":4.988163709640503e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.140625,"distances_sum":1714.8460839248341}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.918858745421246,"seconds":5.194917321205139e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.5703125,"distances_sum":1941.8283772723305}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8583984375,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.8583984375,"f1":0.918858745421246,"seconds":5.194917321205139e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.5703125,"distances_sum":1941.8283772723305}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.939222756410257,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.78125,"distances_sum":2106.2745050634308}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9449862637362643,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7734375,"distances_sum":2131.2780799117154}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9411916208791213,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7109375,"distances_sum":2143.99322597582}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9599358974358979,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.859375,"distances_sum":2240.928119852123}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9341059981684989,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.84375,"distances_sum":2053.4542955314014}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9599358974358979,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.859375,"distances_sum":2240.928119852123}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.927734375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9599358974358979,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.859375,"distances_sum":2240.928119852123}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.529296875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.529296875,"f1":0.674726835664336,"seconds":4.382804036140442e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":6.6328125,"distances_sum":1105.5990168225926}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.529296875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.529296875,"f1":0.674726835664336,"seconds":4.382804036140442e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":6.6328125,"distances_sum":1105.5990168225926}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.7976138444888453,"seconds":4.421919584274292e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.4765625,"distances_sum":1471.53012570937}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6865234375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6865234375,"f1":0.7976138444888453,"seconds":4.421919584274292e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.4765625,"distances_sum":1471.53012570937}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8700408966033977,"seconds":4.9620866775512695e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.9375,"distances_sum":1749.1834726289533}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9022378663003671,"seconds":5.170702934265137e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.3203125,"distances_sum":1956.4234233635216}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8491976773226783,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.8359375,"distances_sum":1674.7873688013815}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9153044871794879,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.3828125,"distances_sum":2031.836678563307}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.85546875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.85546875,"f1":0.9153044871794879,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.3828125,"distances_sum":2031.836678563307}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.85546875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.85546875,"f1":0.9153044871794879,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.3828125,"distances_sum":2031.836678563307}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.201171875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.201171875,"f1":null,"seconds":3.1776726245880127e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":6.5078125,"distances_sum":416.66421883267935}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.19921875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.19921875,"f1":null,"seconds":3.209337592124939e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":6.6953125,"distances_sum":366.0732919702204}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.201171875,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.201171875,"f1":null,"seconds":3.1776726245880127e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":6.5078125,"distances_sum":416.66421883267935}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.212890625, conf: {"ssize":9,"bsize":1}, perf: {"precision":null,"recall":0.212890625,"f1":null,"seconds":3.421679139137268e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":6.9609375,"distances_sum":454.06333675527276}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.203125, conf: {"ssize":8,"bsize":1}, perf: {"precision":null,"recall":0.203125,"f1":null,"seconds":3.3471733331680298e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":6.7265625,"distances_sum":410.3424594229205}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8642669830169838,"seconds":5.152076482772827e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.1015625,"distances_sum":1759.546208923307}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7783203125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7783203125,"f1":0.8642669830169838,"seconds":5.152076482772827e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.1015625,"distances_sum":1759.546208923307}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9143210955710962,"seconds":5.545094609260559e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.4375,"distances_sum":2035.9186881156704}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9586366758241763,"seconds":6.414949893951416e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.828125,"distances_sum":2288.9877452284118}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":12,"bsize":5}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8830419580419588,"seconds":5.248934030532837e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.2109375,"distances_sum":1815.2291514534825}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9586366758241763,"seconds":6.414949893951416e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.828125,"distances_sum":2288.9877452284118}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9586366758241763,"seconds":6.414949893951416e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.828125,"distances_sum":2288.9877452284118}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.8009755869130876,"seconds":4.861503839492798e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":7.9375,"distances_sum":1466.0140059116757}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6865234375,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6865234375,"f1":0.8009755869130876,"seconds":4.861503839492798e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":7.9375,"distances_sum":1466.0140059116757}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.8989161879786883,"seconds":6.3963234424591064e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.3203125,"distances_sum":2022.7816815819533}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9386618589743595,"seconds":5.908310413360596e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.703125,"distances_sum":2239.6644076263356}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8531400890775898,"seconds":5.0496309995651245e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.0234375,"distances_sum":1746.276394539697}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9386618589743595,"seconds":5.908310413360596e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.703125,"distances_sum":2239.6644076263356}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9705586080586085,"seconds":5.953013896942139e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.90625,"distances_sum":2418.7149801020273}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9370077838827843,"seconds":6.834045052528381e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.65625,"distances_sum":2231.21519373955}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9418440934065936,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.6875,"distances_sum":2237.24699352248}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9483745421245426,"seconds":6.467103958129883e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.75,"distances_sum":2296.340842947161}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9494505494505501,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.78125,"distances_sum":2301.693736242185}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9705586080586085,"seconds":5.953013896942139e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.90625,"distances_sum":2418.7149801020273}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9705586080586085,"seconds":5.953013896942139e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.90625,"distances_sum":2418.7149801020273}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6591796875,"f1":0.7808346167721176,"seconds":9.421445429325104e-5,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.5859375,"distances_sum":1356.5685277362275}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3759765625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3759765625,"f1":null,"seconds":3.6135315895080566e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":6.421875,"distances_sum":729.61943303672}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.580078125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.580078125,"f1":0.7136443417693423,"seconds":3.993511199951172e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.59375,"distances_sum":1217.7888296626488}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6591796875,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6591796875,"f1":0.7808346167721176,"seconds":9.421445429325104e-5,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.5859375,"distances_sum":1356.5685277362275}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8684669497169507,"seconds":4.86522912979126e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.0390625,"distances_sum":1757.6690725194205}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9391998626373632,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.6015625,"distances_sum":2209.7369753213943}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9287405303030308,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.5234375,"distances_sum":2118.0940561862744}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7947854229104236,"seconds":4.2282044887542725e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.609375,"distances_sum":1406.6788295556503}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9167358682983691,"seconds":5.3532421588897705e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.296875,"distances_sum":2056.531281587019}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.896484375,"state":{"ssize":9,"bsize":7},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9391998626373632,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.6015625,"distances_sum":2209.7369753213943}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":13,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9488953754578761,"seconds":5.7462602853775024e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.7421875,"distances_sum":2256.2567229387605}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9430720321345327,"seconds":5.256384611129761e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.5859375,"distances_sum":2258.644375387219}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9438790376290382,"seconds":5.370005965232849e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.6953125,"distances_sum":2231.016402381195}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.965310210622711,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8828125,"distances_sum":2330.5294208138203}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.965310210622711,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8828125,"distances_sum":2330.5294208138203}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.965310210622711,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8828125,"distances_sum":2330.5294208138203}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.564453125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.564453125,"f1":0.7045288045288053,"seconds":4.088506102561951e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.8984375,"distances_sum":707.6486210097991}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8538917679542689,"seconds":4.818663001060486e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.5,"distances_sum":997.2269863340423}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7587890625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7587890625,"f1":0.8538917679542689,"seconds":4.818663001060486e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.5,"distances_sum":997.2269863340423}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9514766483516489,"seconds":5.578622221946716e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8828125,"distances_sum":1297.6427717361164}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8937130577755585,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8828125,"distances_sum":1114.5052222750835}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8843583499833507,"seconds":5.202367901802063e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8984375,"distances_sum":1086.4970464074345}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9514766483516489,"seconds":5.578622221946716e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8828125,"distances_sum":1297.6427717361164}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9787030677655679,"seconds":6.070360541343689e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9609375,"distances_sum":1390.1464042992548}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9685668498168505,"seconds":5.768612027168274e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.953125,"distances_sum":1349.1312813646578}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.978313873626374,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.953125,"distances_sum":1400.610150094889}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9717090201465205,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.96875,"distances_sum":1366.0715590525542}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9587485431235437,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8515625,"distances_sum":1319.2106048097178}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9787030677655679,"seconds":6.070360541343689e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9609375,"distances_sum":1390.1464042992548}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9787030677655679,"seconds":6.070360541343689e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9609375,"distances_sum":1390.1464042992548}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.28125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.28125,"f1":null,"seconds":2.9597431421279907e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":5.96875,"distances_sum":357.0050823528931}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.724609375,"f1":0.8329319985569993,"seconds":5.4817646741867065e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.0703125,"distances_sum":1078.4120341959135}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5537109375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5537109375,"f1":0.6947684260184266,"seconds":3.987923264503479e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":6.953125,"distances_sum":782.2055514905979}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8440354784104792,"seconds":4.813075065612793e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.2421875,"distances_sum":1123.7213452893204}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7451171875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7451171875,"f1":0.8440354784104792,"seconds":4.813075065612793e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.2421875,"distances_sum":1123.7213452893204}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9233344780219788,"seconds":5.370005965232849e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.921875,"distances_sum":1368.9773678394415}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9545074716949721,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.90625,"distances_sum":1497.4084004672864}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.818359375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.818359375,"f1":0.895157967032968,"seconds":5.217269062995911e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.7890625,"distances_sum":1247.3210499383197}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9280594405594411,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.875,"distances_sum":1399.1975549339784}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9545074716949721,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.90625,"distances_sum":1497.4084004672864}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9766369047619051,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9921875,"distances_sum":1575.9449314985768}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9621336996336999,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8984375,"distances_sum":1541.2167610173935}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9758012820512822,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.984375,"distances_sum":1586.4384503296383}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9658539377289382,"seconds":6.2212347984313965e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8984375,"distances_sum":1558.50642968678}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9766369047619051,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9921875,"distances_sum":1575.9449314985768}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9766369047619051,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9921875,"distances_sum":1575.9449314985768}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6513671875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6513671875,"f1":0.7803784756909764,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.6953125,"distances_sum":891.4519877041282}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6357421875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6357421875,"f1":0.7674060314685321,"seconds":5.245208740234375e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.6640625,"distances_sum":823.1218509638918}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.29296875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.29296875,"f1":null,"seconds":3.956258296966553e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":6.6484375,"distances_sum":388.20518554690653}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6513671875,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6513671875,"f1":0.7803784756909764,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.6953125,"distances_sum":891.4519877041282}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8464150432900441,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.484375,"distances_sum":1038.1923161378595}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9606799450549454,"seconds":6.744638085365295e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.890625,"distances_sum":1419.4637860200642}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9606799450549454,"seconds":6.744638085365295e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.890625,"distances_sum":1419.4637860200642}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":8,"bsize":12}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.9813988095238098,"seconds":7.0445239543914795e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":9.0,"distances_sum":1493.802676851817}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":12,"bsize":12}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9807864010989014,"seconds":6.945803761482239e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9921875,"distances_sum":1491.707226374762}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9755208333333336,"seconds":6.571412086486816e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9375,"distances_sum":1469.284649970276}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":12,"bsize":11}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9802083333333336,"seconds":6.724148988723755e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":9.0,"distances_sum":1494.9173208707475}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9630093864468869,"seconds":6.5658241510391235e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.9453125,"distances_sum":1427.1913548786067}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9658203125,"state":{"ssize":8,"bsize":12},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9813988095238098,"seconds":7.0445239543914795e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":9.0,"distances_sum":1493.802676851817}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9658203125,"state":{"ssize":8,"bsize":12},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9813988095238098,"seconds":7.0445239543914795e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":9.0,"distances_sum":1493.802676851817}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2919921875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2919921875,"f1":null,"seconds":3.844499588012695e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":6.6328125,"distances_sum":394.43954825619716}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2998046875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2998046875,"f1":null,"seconds":3.8798898458480835e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":6.734375,"distances_sum":425.34193135970594}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2998046875,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.2998046875,"f1":null,"seconds":3.8798898458480835e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":6.734375,"distances_sum":425.34193135970594}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.658203125,"f1":0.7842704170829179,"seconds":5.1390379667282104e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":7.6875,"distances_sum":972.5273284391459}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7912785131535139,"seconds":4.408881068229675e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":7.53125,"distances_sum":1000.0233143620256}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7314453125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7314453125,"f1":0.838868423243424,"seconds":4.766508936882019e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.5234375,"distances_sum":1114.6623850159083}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7314453125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7314453125,"f1":0.838868423243424,"seconds":4.766508936882019e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.5234375,"distances_sum":1114.6623850159083}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9071173618048627,"seconds":5.191192030906677e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.90625,"distances_sum":1317.0180552513375}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9122481684981694,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.90625,"distances_sum":1331.3312100581707}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8899584790209799,"seconds":5.112960934638977e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.7734375,"distances_sum":1276.3607424454942}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.845703125,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.845703125,"f1":0.9122481684981694,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.90625,"distances_sum":1331.3312100581707}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.845703125,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.845703125,"f1":0.9122481684981694,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.90625,"distances_sum":1331.3312100581707}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6474609375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6474609375,"f1":0.7734572718947726,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":7.5234375,"distances_sum":904.2832176232264}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5322265625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5322265625,"f1":0.6799332611832618,"seconds":4.716217517852783e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":7.1171875,"distances_sum":715.8145098228775}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8611268939393949,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.5,"distances_sum":1124.1794475965528}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.8611268939393949,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.5,"distances_sum":1124.1794475965528}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8983719405594416,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.8203125,"distances_sum":1212.5331259139791}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9546245421245425,"seconds":6.642192602157593e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.8984375,"distances_sum":1440.321853103713}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9263398060273067,"seconds":6.1765313148498535e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.8125,"distances_sum":1325.1101160999438}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9546245421245425,"seconds":6.642192602157593e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.8984375,"distances_sum":1440.321853103713}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9792410714285715,"seconds":6.642192602157593e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.984375,"distances_sum":1519.9186714481896}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9603110431235434,"seconds":6.681308150291443e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.9375,"distances_sum":1447.3939599180162}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.961423992673993,"seconds":6.429851055145264e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":9.0,"distances_sum":1441.0216284755081}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9792410714285715,"seconds":6.642192602157593e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.984375,"distances_sum":1519.9186714481896}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9792410714285715,"seconds":6.642192602157593e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.984375,"distances_sum":1519.9186714481896}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.7990166083916092,"seconds":5.0961971282958984e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.8046875,"distances_sum":959.0539372883187}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.44140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.44140625,"f1":null,"seconds":3.7848949432373047e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":6.015625,"distances_sum":575.9601398203471}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6787109375,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6787109375,"f1":0.7990166083916092,"seconds":5.0961971282958984e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.8046875,"distances_sum":959.0539372883187}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9221497252747262,"seconds":6.083399057388306e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.7734375,"distances_sum":1304.5966117440637}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9054201007326016,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.8203125,"distances_sum":1247.7055712851836}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.720703125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.720703125,"f1":0.8264662420912428,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.1796875,"distances_sum":1004.3415405339925}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.865234375,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.865234375,"f1":0.9221497252747262,"seconds":6.083399057388306e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.7734375,"distances_sum":1304.5966117440637}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9782738095238097,"seconds":6.726011633872986e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.984375,"distances_sum":1525.2430237826818}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9722355769230773,"seconds":6.61797821521759e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.9765625,"distances_sum":1506.233535252447}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9504521520146524,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.859375,"distances_sum":1408.7963014760535}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9439789377289384,"seconds":8.439645171165466e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.9609375,"distances_sum":1359.8563534905745}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9607200091575093,"seconds":6.46151602268219e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.9609375,"distances_sum":1453.6811065315262}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9782738095238097,"seconds":6.726011633872986e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.984375,"distances_sum":1525.2430237826818}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9782738095238097,"seconds":6.726011633872986e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.984375,"distances_sum":1525.2430237826818}}, n: 9
inertia(cfft.distances) = 18.467412809412814
inertia(cdnet.distances) = 28.404080140003234
inertia(crand.distances) = 28.147336507936515
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.9022222222222221
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9155555555555556
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9022222222222221
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9355555555555556
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9444444444444443
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8977777777777778
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8733333333333334
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8822222222222221
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8955555555555555
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8844444444444445
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9222222222222222
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9355555555555556
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9311111111111111
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9222222222222222
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9155555555555556
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9288888888888889
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9088888888888889
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8666666666666666
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8888888888888888
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.888888888888889
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8911111111111111
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9022222222222224
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.851111111111111
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9199999999999999
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8911111111111111
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [2, 1, 2, 3, 1, 3, 2, 3, 2, 3, 3, 1, 3, 3, 2, 3, 3, 2, 1, 3, 3]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 1, 3]
acc = 0.9266666666666666

*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
*** starting iteration: 1; err: [Inf, 0.3464000026192818] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3464000026192818, 0.1823734786623741] ***
*** starting iteration: 2; err: [Inf, 0.3464000026192818, 0.1823734786623741] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3464000026192818, 0.1823734786623741, 0.16499715849744712] ***
*** starting iteration: 3; err: [Inf, 0.3464000026192818, 0.1823734786623741, 0.16499715849744712] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3464000026192818, 0.1823734786623741, 0.16499715849744712, 0.16260722114150214] ***
*** starting iteration: 4; err: [Inf, 0.3464000026192818, 0.1823734786623741, 0.16499715849744712, 0.16260722114150214] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3464000026192818, 0.1823734786623741, 0.16499715849744712, 0.16260722114150214, 0.16091095648590034] ***
*** starting iteration: 5; err: [Inf, 0.3464000026192818, 0.1823734786623741, 0.16499715849744712, 0.16260722114150214, 0.16091095648590034] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3464000026192818, 0.1823734786623741, 0.16499715849744712, 0.16260722114150214, 0.16091095648590034, 0.16059129697217564] ***
*** finished computation of 12 references, err: [Inf, 0.3464000026192818, 0.1823734786623741, 0.16499715849744712, 0.16260722114150214, 0.16091095648590034, 0.16059129697217564] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 14]]
** centroid: 10, normalized-entropy: 0.6722948170756378, [(2, 3), (3, 14)]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 2]]
** centroid: 11, normalized-entropy: 1.0, [(2, 2), (3, 2)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
acc = 0.9466666666666667
Test Summary:   | Pass  Total
NearestCentroid |   10     10
iteration 1 finished
*** starting iteration: 1; err: [Inf, 2.1424999749872087] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.1424999749872087, 0.5522925228334185] ***
*** starting iteration: 2; err: [Inf, 2.1424999749872087, 0.5522925228334185] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.1424999749872087, 0.5522925228334185, 0.5429801086650075] ***
*** starting iteration: 3; err: [Inf, 2.1424999749872087, 0.5522925228334185, 0.5429801086650075] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.1424999749872087, 0.5522925228334185, 0.5429801086650075, 0.5429801086650075] ***
*** finished computation of 3 references, err: [Inf, 2.1424999749872087, 0.5522925228334185, 0.5429801086650075, 0.5429801086650075] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 24]]
** centroid: 1, normalized-entropy: 0.24229218908241482, [(2, 1), (3, 24)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 30, 12]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(2, 30), (3, 12)]
*** center 3: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8482000092912506] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8482000092912506, 0.5074641954444986] ***
*** starting iteration: 2; err: [Inf, 0.8482000092912506, 0.5074641954444986] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8482000092912506, 0.5074641954444986, 0.4997947841297976] ***
*** starting iteration: 3; err: [Inf, 0.8482000092912506, 0.5074641954444986, 0.4997947841297976] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8482000092912506, 0.5074641954444986, 0.4997947841297976, 0.49756062071903573] ***
*** finished computation of 3 references, err: [Inf, 0.8482000092912506, 0.5074641954444986, 0.4997947841297976, 0.49756062071903573] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 29, 4]]
** centroid: 1, normalized-entropy: 0.5328350630342235, [(2, 29), (3, 4)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 3, 29]]
** centroid: 2, normalized-entropy: 0.44886448872302936, [(2, 3), (3, 29)]
*** center 3: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6641999994597231] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6641999994597231, 0.5295228093391424] ***
*** starting iteration: 2; err: [Inf, 0.6641999994597231, 0.5295228093391424] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6641999994597231, 0.5295228093391424, 0.5290014394006782] ***
*** finished computation of 3 references, err: [Inf, 0.6641999994597231, 0.5295228093391424, 0.5290014394006782] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 23]]
** centroid: 1, normalized-entropy: 0.5159469300074472, [(2, 3), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 34, 8]]
** centroid: 3, normalized-entropy: 0.7024665512903904, [(2, 34), (3, 8)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.33768966230532366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33768966230532366, 0.1994734625720703] ***
*** starting iteration: 2; err: [Inf, 0.33768966230532366, 0.1994734625720703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33768966230532366, 0.1994734625720703, 0.1936689121201478] ***
*** starting iteration: 3; err: [Inf, 0.33768966230532366, 0.1994734625720703, 0.1936689121201478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33768966230532366, 0.1994734625720703, 0.1936689121201478, 0.19229267270064146] ***
*** finished computation of 7 references, err: [Inf, 0.33768966230532366, 0.1994734625720703, 0.1936689121201478, 0.19229267270064146] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 19]]
** centroid: 1, normalized-entropy: 0.5746356978376794, [(2, 3), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 4: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 17, 1]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3545848283613936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3545848283613936, 0.19027584148710683] ***
*** starting iteration: 2; err: [Inf, 0.3545848283613936, 0.19027584148710683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3545848283613936, 0.19027584148710683, 0.18246559958040973] ***
*** starting iteration: 3; err: [Inf, 0.3545848283613936, 0.19027584148710683, 0.18246559958040973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3545848283613936, 0.19027584148710683, 0.18246559958040973, 0.1785180178691384] ***
*** finished computation of 7 references, err: [Inf, 0.3545848283613936, 0.19027584148710683, 0.18246559958040973, 0.1785180178691384] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 13, 1]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 21]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 2, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 17, 4]]
** centroid: 5, normalized-entropy: 0.7024665512903904, [(2, 17), (3, 4)]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 7: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3763250206861838] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3763250206861838, 0.21958409844063337] ***
*** starting iteration: 2; err: [Inf, 0.3763250206861838, 0.21958409844063337] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3763250206861838, 0.21958409844063337, 0.20715484602004253] ***
*** starting iteration: 3; err: [Inf, 0.3763250206861838, 0.21958409844063337, 0.20715484602004253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3763250206861838, 0.21958409844063337, 0.20715484602004253, 0.20276299820309845] ***
*** finished computation of 7 references, err: [Inf, 0.3763250206861838, 0.21958409844063337, 0.20715484602004253, 0.20276299820309845] ***
*** center 1: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 3, 15]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 5, 2]]
** centroid: 4, normalized-entropy: 0.8631205685666311, [(2, 5), (3, 2)]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8959000037978393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8959000037978393, 0.34682506984292905] ***
*** starting iteration: 2; err: [Inf, 0.8959000037978393, 0.34682506984292905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8959000037978393, 0.34682506984292905, 0.29876400471930437] ***
*** starting iteration: 3; err: [Inf, 0.8959000037978393, 0.34682506984292905, 0.29876400471930437] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8959000037978393, 0.34682506984292905, 0.29876400471930437, 0.290536760126792] ***
*** finished computation of 7 references, err: [Inf, 0.8959000037978393, 0.34682506984292905, 0.29876400471930437, 0.290536760126792] ***
*** center 1: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 3, 17]]
** centroid: 2, normalized-entropy: 0.6098403047164005, [(2, 3), (3, 17)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 18]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 12, 1]]
*** center 5: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.9291999769178628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9291999769178628, 0.5128154980632473] ***
*** starting iteration: 2; err: [Inf, 0.9291999769178628, 0.5128154980632473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9291999769178628, 0.5128154980632473, 0.4789903233474517] ***
*** starting iteration: 3; err: [Inf, 0.9291999769178628, 0.5128154980632473, 0.4789903233474517] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9291999769178628, 0.5128154980632473, 0.4789903233474517, 0.463844884926706] ***
*** finished computation of 7 references, err: [Inf, 0.9291999769178628, 0.5128154980632473, 0.4789903233474517, 0.463844884926706] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 25, 2]]
** centroid: 1, normalized-entropy: 0.38094658570539014, [(2, 25), (3, 2)]
*** center 2: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 7, 31]]
** centroid: 7, normalized-entropy: 0.6892019851173655, [(2, 7), (3, 31)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6208000042733404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6208000042733404, 0.30721426910157673] ***
*** starting iteration: 2; err: [Inf, 0.6208000042733404, 0.30721426910157673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6208000042733404, 0.30721426910157673, 0.26993634929192273] ***
*** starting iteration: 3; err: [Inf, 0.6208000042733404, 0.30721426910157673, 0.26993634929192273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6208000042733404, 0.30721426910157673, 0.26993634929192273, 0.26276387314894667] ***
*** finished computation of 7 references, err: [Inf, 0.6208000042733404, 0.30721426910157673, 0.26993634929192273, 0.26276387314894667] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 9, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 10]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 12, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 14, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 10]]
*** center 7: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7895977075587954] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7895977075587954, 0.6609193343404361] ***
*** starting iteration: 2; err: [Inf, 0.7895977075587954, 0.6609193343404361] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7895977075587954, 0.6609193343404361, 0.6590004816127724] ***
*** starting iteration: 3; err: [Inf, 0.7895977075587954, 0.6609193343404361, 0.6590004816127724] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7895977075587954, 0.6609193343404361, 0.6590004816127724, 0.6590135909113914] ***
*** finished computation of 3 references, err: [Inf, 0.7895977075587954, 0.6609193343404361, 0.6590004816127724, 0.6590135909113914] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 29, 36]]
** centroid: 1, normalized-entropy: 0.9916178297881032, [(2, 29), (3, 36)]
*** center 2: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [18, 2, 0]]
** centroid: 3, normalized-entropy: 0.46899559358928133, [(1, 18), (2, 2)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.369463738905971] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.369463738905971, 0.8340348406039874] ***
*** starting iteration: 2; err: [Inf, 3.369463738905971, 0.8340348406039874] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.369463738905971, 0.8340348406039874, 0.35342030498931115] ***
*** starting iteration: 3; err: [Inf, 3.369463738905971, 0.8340348406039874, 0.35342030498931115] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.369463738905971, 0.8340348406039874, 0.35342030498931115, 0.3425098914147931] ***
*** finished computation of 3 references, err: [Inf, 3.369463738905971, 0.8340348406039874, 0.35342030498931115, 0.3425098914147931] ***
*** center 1: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 3, 29]]
** centroid: 2, normalized-entropy: 0.44886448872302936, [(2, 3), (3, 29)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 29, 4]]
** centroid: 3, normalized-entropy: 0.5328350630342235, [(2, 29), (3, 4)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 4.123684510371482] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 4.123684510371482, 0.5099055116626847] ***
*** starting iteration: 2; err: [Inf, 4.123684510371482, 0.5099055116626847] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 4.123684510371482, 0.5099055116626847, 0.3714215518341989] ***
*** starting iteration: 3; err: [Inf, 4.123684510371482, 0.5099055116626847, 0.3714215518341989] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 4.123684510371482, 0.5099055116626847, 0.3714215518341989, 0.3708547411586201] ***
*** finished computation of 3 references, err: [Inf, 4.123684510371482, 0.5099055116626847, 0.3714215518341989, 0.3708547411586201] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 2, 21]]
** centroid: 1, normalized-entropy: 0.42622865699814483, [(2, 2), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 35, 10]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(2, 35), (3, 10)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.3871806803011975] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3871806803011975, 0.5014361985927543] ***
*** finished computation of 3 references, err: [Inf, 1.3871806803011975, 0.5014361985927543] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 15, 35]]
** centroid: 1, normalized-entropy: 0.8812908992306927, [(2, 15), (3, 35)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 16, 1]]
** centroid: 2, normalized-entropy: 0.32275695889739825, [(2, 16), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.939449854515502] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.939449854515502, 0.6136774454578802] ***
*** finished computation of 3 references, err: [Inf, 0.939449854515502, 0.6136774454578802] ***
*** center 1: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 31, 33]]
** centroid: 2, normalized-entropy: 0.9992954443621548, [(2, 31), (3, 33)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [25, 1, 0]]
** centroid: 3, normalized-entropy: 0.23519338181924157, [(1, 25), (2, 1)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.3505381002708954] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.3505381002708954, 0.7707517622930342] ***
*** finished computation of 3 references, err: [Inf, 3.3505381002708954, 0.7707517622930342] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 33, 12]]
** centroid: 2, normalized-entropy: 0.8366407419411671, [(2, 33), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [32, 4, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 32), (2, 4)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0093999983914714] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0093999983914714, 0.6051860188825132] ***
*** starting iteration: 2; err: [Inf, 1.0093999983914714, 0.6051860188825132] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0093999983914714, 0.6051860188825132, 0.5568059937429701] ***
*** starting iteration: 3; err: [Inf, 1.0093999983914714, 0.6051860188825132, 0.5568059937429701] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0093999983914714, 0.6051860188825132, 0.5568059937429701, 0.5429801086650075] ***
*** finished computation of 3 references, err: [Inf, 1.0093999983914714, 0.6051860188825132, 0.5568059937429701, 0.5429801086650075] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 24]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 30, 12]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(2, 30), (3, 12)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.2897000096394555] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2897000096394555, 0.6072859743924318] ***
*** starting iteration: 2; err: [Inf, 1.2897000096394555, 0.6072859743924318] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2897000096394555, 0.6072859743924318, 0.49739288237212587] ***
*** starting iteration: 3; err: [Inf, 1.2897000096394555, 0.6072859743924318, 0.49739288237212587] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2897000096394555, 0.6072859743924318, 0.49739288237212587, 0.49623965720972324] ***
*** finished computation of 3 references, err: [Inf, 1.2897000096394555, 0.6072859743924318, 0.49739288237212587, 0.49623965720972324] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 29, 5]]
** centroid: 1, normalized-entropy: 0.6024308020404452, [(2, 29), (3, 5)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 3, 28]]
** centroid: 2, normalized-entropy: 0.45868581620054033, [(2, 3), (3, 28)]
*** center 3: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.4379000216570625] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4379000216570625, 0.663531875278349] ***
*** starting iteration: 2; err: [Inf, 1.4379000216570625, 0.663531875278349] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4379000216570625, 0.663531875278349, 0.5358541911723143] ***
*** starting iteration: 3; err: [Inf, 1.4379000216570625, 0.663531875278349, 0.5358541911723143] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4379000216570625, 0.663531875278349, 0.5358541911723143, 0.5295228093391424] ***
*** finished computation of 3 references, err: [Inf, 1.4379000216570625, 0.663531875278349, 0.5358541911723143, 0.5295228093391424] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 23]]
** centroid: 1, normalized-entropy: 0.5159469300074472, [(2, 3), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 34, 8]]
** centroid: 3, normalized-entropy: 0.7024665512903904, [(2, 34), (3, 8)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1191999804661916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1191999804661916, 0.609999968215147] ***
*** starting iteration: 2; err: [Inf, 1.1191999804661916, 0.609999968215147] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1191999804661916, 0.609999968215147, 0.605734713851719] ***
*** starting iteration: 3; err: [Inf, 1.1191999804661916, 0.609999968215147, 0.605734713851719] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1191999804661916, 0.609999968215147, 0.605734713851719, 0.6049678654456967] ***
*** finished computation of 3 references, err: [Inf, 1.1191999804661916, 0.609999968215147, 0.605734713851719, 0.6049678654456967] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 9, 35]]
** centroid: 3, normalized-entropy: 0.7309263775906009, [(2, 9), (3, 35)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8163000006407644] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8163000006407644, 0.6087088006054977] ***
*** starting iteration: 2; err: [Inf, 0.8163000006407644, 0.6087088006054977] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8163000006407644, 0.6087088006054977, 0.561018656142495] ***
*** starting iteration: 3; err: [Inf, 0.8163000006407644, 0.6087088006054977, 0.561018656142495] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8163000006407644, 0.6087088006054977, 0.561018656142495, 0.5118249349175202] ***
*** starting iteration: 4; err: [Inf, 0.8163000006407644, 0.6087088006054977, 0.561018656142495, 0.5118249349175202] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8163000006407644, 0.6087088006054977, 0.561018656142495, 0.5118249349175202, 0.5028298891573741] ***
*** starting iteration: 5; err: [Inf, 0.8163000006407644, 0.6087088006054977, 0.561018656142495, 0.5118249349175202, 0.5028298891573741] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8163000006407644, 0.6087088006054977, 0.561018656142495, 0.5118249349175202, 0.5028298891573741, 0.49777803362112555] ***
*** starting iteration: 6; err: [Inf, 0.8163000006407644, 0.6087088006054977, 0.561018656142495, 0.5118249349175202, 0.5028298891573741, 0.49777803362112555] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8163000006407644, 0.6087088006054977, 0.561018656142495, 0.5118249349175202, 0.5028298891573741, 0.49777803362112555, 0.4968904795256755] ***
*** finished computation of 3 references, err: [Inf, 0.8163000006407644, 0.6087088006054977, 0.561018656142495, 0.5118249349175202, 0.5028298891573741, 0.49777803362112555, 0.4968904795256755] ***
*** center 1: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 3, 27]]
** centroid: 2, normalized-entropy: 0.46899559358928133, [(2, 3), (3, 27)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 29, 6]]
** centroid: 3, normalized-entropy: 0.6609623351442084, [(2, 29), (3, 6)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0603000082048597] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0603000082048597, 0.5734885117288405] ***
*** starting iteration: 2; err: [Inf, 1.0603000082048597, 0.5734885117288405] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0603000082048597, 0.5734885117288405, 0.5528970620729694] ***
*** starting iteration: 3; err: [Inf, 1.0603000082048597, 0.5734885117288405, 0.5528970620729694] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0603000082048597, 0.5734885117288405, 0.5528970620729694, 0.5475335581303108] ***
*** starting iteration: 4; err: [Inf, 1.0603000082048597, 0.5734885117288405, 0.5528970620729694, 0.5475335581303108] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0603000082048597, 0.5734885117288405, 0.5528970620729694, 0.5475335581303108, 0.5467534378892057] ***
*** finished computation of 3 references, err: [Inf, 1.0603000082048597, 0.5734885117288405, 0.5528970620729694, 0.5475335581303108, 0.5467534378892057] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 30, 1]]
** centroid: 1, normalized-entropy: 0.2055925081850832, [(2, 30), (3, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 7, 30]]
** centroid: 2, normalized-entropy: 0.699772221773307, [(2, 7), (3, 30)]
*** center 3: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 9.190196338984645] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 9.190196338984645, 0.9332585901640185] ***
*** starting iteration: 2; err: [Inf, 9.190196338984645, 0.9332585901640185] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 9.190196338984645, 0.9332585901640185, 0.503438324002977] ***
*** starting iteration: 3; err: [Inf, 9.190196338984645, 0.9332585901640185, 0.503438324002977] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 9.190196338984645, 0.9332585901640185, 0.503438324002977, 0.42506509765874684] ***
*** finished computation of 3 references, err: [Inf, 9.190196338984645, 0.9332585901640185, 0.503438324002977, 0.42506509765874684] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 11, 35]]
** centroid: 2, normalized-entropy: 0.7935912300117066, [(2, 11), (3, 35)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 20, 1]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6912081670049858] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6912081670049858, 0.6093041136957134] ***
*** starting iteration: 2; err: [Inf, 0.6912081670049858, 0.6093041136957134] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6912081670049858, 0.6093041136957134, 0.6071312199248582] ***
*** starting iteration: 3; err: [Inf, 0.6912081670049858, 0.6093041136957134, 0.6071312199248582] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6912081670049858, 0.6093041136957134, 0.6071312199248582, 0.6071059657166507] ***
*** finished computation of 3 references, err: [Inf, 0.6912081670049858, 0.6093041136957134, 0.6071312199248582, 0.6071059657166507] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 31, 33]]
** centroid: 1, normalized-entropy: 0.9992954443621548, [(2, 31), (3, 33)]
*** center 2: selecting labels [1] (freq >= 2) [from [14, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.0930203156927205] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.0930203156927205, 0.7038718800912975] ***
*** starting iteration: 2; err: [Inf, 3.0930203156927205, 0.7038718800912975] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.0930203156927205, 0.7038718800912975, 0.37778735887147663] ***
*** starting iteration: 3; err: [Inf, 3.0930203156927205, 0.7038718800912975, 0.37778735887147663] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.0930203156927205, 0.7038718800912975, 0.37778735887147663, 0.3708893399307469] ***
*** finished computation of 3 references, err: [Inf, 3.0930203156927205, 0.7038718800912975, 0.37778735887147663, 0.3708893399307469] ***
*** center 1: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 4, 25]]
** centroid: 2, normalized-entropy: 0.5787946246321198, [(2, 4), (3, 25)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 33, 6]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(2, 33), (3, 6)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.5048000102349854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5048000102349854, 0.9994281735506944] ***
*** starting iteration: 2; err: [Inf, 1.5048000102349854, 0.9994281735506944] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5048000102349854, 0.9994281735506944, 0.9895648219556454] ***
*** starting iteration: 3; err: [Inf, 1.5048000102349854, 0.9994281735506944, 0.9895648219556454] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5048000102349854, 0.9994281735506944, 0.9895648219556454, 0.9885985045961799] ***
*** finished computation of 3 references, err: [Inf, 1.5048000102349854, 0.9994281735506944, 0.9895648219556454, 0.9885985045961799] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [21, 2, 0]]
** centroid: 1, normalized-entropy: 0.42622865699814483, [(1, 21), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 29, 36]]
** centroid: 2, normalized-entropy: 0.9916178297881032, [(2, 29), (3, 36)]
*** center 3: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 10.147699844741174] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 10.147699844741174, 1.018999620556673] ***
*** starting iteration: 2; err: [Inf, 10.147699844741174, 1.018999620556673] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 10.147699844741174, 1.018999620556673, 0.9212253583880564] ***
*** starting iteration: 3; err: [Inf, 10.147699844741174, 1.018999620556673, 0.9212253583880564] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 10.147699844741174, 1.018999620556673, 0.9212253583880564, 0.9158009342949831] ***
*** finished computation of 3 references, err: [Inf, 10.147699844741174, 1.018999620556673, 0.9212253583880564, 0.9158009342949831] ***
*** center 1: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [15, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 31, 33]]
** centroid: 3, normalized-entropy: 0.9992954443621548, [(2, 31), (3, 33)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.3157000134018504] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.3157000134018504, 1.3496205209410623] ***
*** starting iteration: 2; err: [Inf, 3.3157000134018504, 1.3496205209410623] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.3157000134018504, 1.3496205209410623, 0.6226549861794954] ***
*** starting iteration: 3; err: [Inf, 3.3157000134018504, 1.3496205209410623, 0.6226549861794954] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.3157000134018504, 1.3496205209410623, 0.6226549861794954, 0.5365909612282764] ***
*** finished computation of 3 references, err: [Inf, 3.3157000134018504, 1.3496205209410623, 0.6226549861794954, 0.5365909612282764] ***
*** center 1: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 21]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 36, 10]]
** centroid: 3, normalized-entropy: 0.7553754125614286, [(2, 36), (3, 10)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0730999956164329] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0730999956164329, 0.9845959927302311] ***
*** finished computation of 3 references, err: [Inf, 1.0730999956164329, 0.9845959927302311] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [18, 3, 0]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(1, 18), (2, 3)]
*** center 2: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 28, 36]]
** centroid: 3, normalized-entropy: 0.9886994082884974, [(2, 28), (3, 36)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 4.410499918545865] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 4.410499918545865, 0.9194388770607338] ***
*** finished computation of 3 references, err: [Inf, 4.410499918545865, 0.9194388770607338] ***
*** center 1: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 31, 33]]
** centroid: 2, normalized-entropy: 0.9992954443621548, [(2, 31), (3, 33)]
*** center 3: selecting labels [1] (freq >= 2) [from [17, 1, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8672000017079412] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8672000017079412, 0.5648113924512992] ***
*** finished computation of 3 references, err: [Inf, 0.8672000017079412, 0.5648113924512992] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 19]]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 36, 12]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 36), (3, 12)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8150328932672521] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8150328932672521, 0.40054066395456983] ***
*** starting iteration: 2; err: [Inf, 0.8150328932672521, 0.40054066395456983] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8150328932672521, 0.40054066395456983, 0.3969163855046924] ***
*** starting iteration: 3; err: [Inf, 0.8150328932672521, 0.40054066395456983, 0.3969163855046924] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8150328932672521, 0.40054066395456983, 0.3969163855046924, 0.3881480014196025] ***
*** finished computation of 3 references, err: [Inf, 0.8150328932672521, 0.40054066395456983, 0.3969163855046924, 0.3881480014196025] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 2, 25]]
** centroid: 1, normalized-entropy: 0.38094658570539014, [(2, 2), (3, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 29, 11]]
** centroid: 3, normalized-entropy: 0.8485481782946159, [(2, 29), (3, 11)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8758702280783239] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8758702280783239, 0.43398403811638653] ***
*** starting iteration: 2; err: [Inf, 0.8758702280783239, 0.43398403811638653] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8758702280783239, 0.43398403811638653, 0.3997896959805656] ***
*** starting iteration: 3; err: [Inf, 0.8758702280783239, 0.43398403811638653, 0.3997896959805656] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8758702280783239, 0.43398403811638653, 0.3997896959805656, 0.3683265970683277] ***
*** finished computation of 3 references, err: [Inf, 0.8758702280783239, 0.43398403811638653, 0.3997896959805656, 0.3683265970683277] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 32, 8]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 32), (3, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 25]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6395763146002754] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6395763146002754, 0.40458419815570823] ***
*** starting iteration: 2; err: [Inf, 0.6395763146002754, 0.40458419815570823] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6395763146002754, 0.40458419815570823, 0.38272770141027945] ***
*** starting iteration: 3; err: [Inf, 0.6395763146002754, 0.40458419815570823, 0.38272770141027945] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6395763146002754, 0.40458419815570823, 0.38272770141027945, 0.3746269120093653] ***
*** finished computation of 3 references, err: [Inf, 0.6395763146002754, 0.40458419815570823, 0.38272770141027945, 0.3746269120093653] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 7, 30]]
** centroid: 1, normalized-entropy: 0.699772221773307, [(2, 7), (3, 30)]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 30, 1]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7685299412309147] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7685299412309147, 0.4229662386929277] ***
*** finished computation of 3 references, err: [Inf, 0.7685299412309147, 0.4229662386929277] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 11, 35]]
** centroid: 1, normalized-entropy: 0.7935912300117066, [(2, 11), (3, 35)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 3, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7104002342606001] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7104002342606001, 0.40497359165635133] ***
*** finished computation of 3 references, err: [Inf, 0.7104002342606001, 0.40497359165635133] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 32, 16]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(2, 32), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9765671291765193] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9765671291765193, 0.3757920146612683] ***
*** finished computation of 3 references, err: [Inf, 0.9765671291765193, 0.3757920146612683] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 37, 11]]
** centroid: 1, normalized-entropy: 0.7765557854444601, [(2, 37), (3, 11)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 3: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.003899991450146] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.003899991450146, 0.5537069501264226] ***
*** starting iteration: 2; err: [Inf, 2.003899991450146, 0.5537069501264226] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.003899991450146, 0.5537069501264226, 0.5450537958948576] ***
*** starting iteration: 3; err: [Inf, 2.003899991450146, 0.5537069501264226, 0.5450537958948576] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.003899991450146, 0.5537069501264226, 0.5450537958948576, 0.5436003558827279] ***
*** finished computation of 3 references, err: [Inf, 2.003899991450146, 0.5537069501264226, 0.5450537958948576, 0.5436003558827279] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 24]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 30, 12]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(2, 30), (3, 12)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.5515999957444182] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5515999957444182, 0.5379234583698169] ***
*** starting iteration: 2; err: [Inf, 1.5515999957444182, 0.5379234583698169] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5515999957444182, 0.5379234583698169, 0.5087327944536372] ***
*** starting iteration: 3; err: [Inf, 1.5515999957444182, 0.5379234583698169, 0.5087327944536372] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5515999957444182, 0.5379234583698169, 0.5087327944536372, 0.5004364471249548] ***
*** finished computation of 3 references, err: [Inf, 1.5515999957444182, 0.5379234583698169, 0.5087327944536372, 0.5004364471249548] ***
*** center 1: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 27]]
** centroid: 2, normalized-entropy: 0.36205125173399805, [(2, 2), (3, 27)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 30, 6]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(2, 30), (3, 6)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9735000101472597] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9735000101472597, 0.5551882575376972] ***
*** starting iteration: 2; err: [Inf, 0.9735000101472597, 0.5551882575376972] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9735000101472597, 0.5551882575376972, 0.534649056002666] ***
*** starting iteration: 3; err: [Inf, 0.9735000101472597, 0.5551882575376972, 0.534649056002666] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9735000101472597, 0.5551882575376972, 0.534649056002666, 0.5296701630727891] ***
*** finished computation of 3 references, err: [Inf, 0.9735000101472597, 0.5551882575376972, 0.534649056002666, 0.5296701630727891] ***
*** center 1: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 21]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 36, 10]]
** centroid: 3, normalized-entropy: 0.7553754125614286, [(2, 36), (3, 10)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.5301201512420641] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5301201512420641, 0.3950794113187326] ***
*** starting iteration: 2; err: [Inf, 1.5301201512420641, 0.3950794113187326] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5301201512420641, 0.3950794113187326, 0.3825833543266553] ***
*** starting iteration: 3; err: [Inf, 1.5301201512420641, 0.3950794113187326, 0.3825833543266553] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5301201512420641, 0.3950794113187326, 0.3825833543266553, 0.3825833543266553] ***
*** finished computation of 3 references, err: [Inf, 1.5301201512420641, 0.3950794113187326, 0.3825833543266553, 0.3825833543266553] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 24]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 31, 12]]
** centroid: 3, normalized-entropy: 0.8541802051521676, [(2, 31), (3, 12)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.151815978477706] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.151815978477706, 0.36113946805535646] ***
*** starting iteration: 2; err: [Inf, 1.151815978477706, 0.36113946805535646] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.151815978477706, 0.36113946805535646, 0.3441051147524395] ***
*** starting iteration: 3; err: [Inf, 1.151815978477706, 0.36113946805535646, 0.3441051147524395] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.151815978477706, 0.36113946805535646, 0.3441051147524395, 0.3396638972862047] ***
*** starting iteration: 4; err: [Inf, 1.151815978477706, 0.36113946805535646, 0.3441051147524395, 0.3396638972862047] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.151815978477706, 0.36113946805535646, 0.3441051147524395, 0.3396638972862047, 0.3396638972862047] ***
*** finished computation of 3 references, err: [Inf, 1.151815978477706, 0.36113946805535646, 0.3441051147524395, 0.3396638972862047, 0.3396638972862047] ***
*** center 1: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 3, 29]]
** centroid: 2, normalized-entropy: 0.44886448872302936, [(2, 3), (3, 29)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 29, 4]]
** centroid: 3, normalized-entropy: 0.5328350630342235, [(2, 29), (3, 4)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6669358347504739] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6669358347504739, 0.3927379889024871] ***
*** starting iteration: 2; err: [Inf, 0.6669358347504739, 0.3927379889024871] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6669358347504739, 0.3927379889024871, 0.3797157079442133] ***
*** starting iteration: 3; err: [Inf, 0.6669358347504739, 0.3927379889024871, 0.3797157079442133] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6669358347504739, 0.3927379889024871, 0.3797157079442133, 0.3736108339737463] ***
*** starting iteration: 4; err: [Inf, 0.6669358347504739, 0.3927379889024871, 0.3797157079442133, 0.3736108339737463] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6669358347504739, 0.3927379889024871, 0.3797157079442133, 0.3736108339737463, 0.3726961301732291] ***
*** finished computation of 3 references, err: [Inf, 0.6669358347504739, 0.3927379889024871, 0.3797157079442133, 0.3736108339737463, 0.3726961301732291] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 5, 29]]
** centroid: 1, normalized-entropy: 0.6024308020404452, [(2, 5), (3, 29)]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 32, 2]]
** centroid: 3, normalized-entropy: 0.32275695889739825, [(2, 32), (3, 2)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.090699993651402] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.090699993651402, 0.6796635952298206] ***
*** finished computation of 3 references, err: [Inf, 1.090699993651402, 0.6796635952298206] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 30, 22]]
** centroid: 1, normalized-entropy: 0.9828586897127057, [(2, 30), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [33, 1, 0]]
** centroid: 2, normalized-entropy: 0.1914332548141934, [(1, 33), (2, 1)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.564799994604018] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.564799994604018, 0.5118249349175202] ***
*** finished computation of 3 references, err: [Inf, 1.564799994604018, 0.5118249349175202] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 32, 7]]
** centroid: 1, normalized-entropy: 0.6789538995185759, [(2, 32), (3, 7)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 26]]
*** center 3: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1232999977689864] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1232999977689864, 0.5424508667635208] ***
*** finished computation of 3 references, err: [Inf, 1.1232999977689864, 0.5424508667635208] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 37, 11]]
** centroid: 1, normalized-entropy: 0.7765557854444601, [(2, 37), (3, 11)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 3: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6050000022067386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6050000022067386, 0.2796394634040063] ***
*** finished computation of 7 references, err: [Inf, 0.6050000022067386, 0.2796394634040063] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 19]]
** centroid: 1, normalized-entropy: 0.2863969571159561, [(2, 1), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 8, 1]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(2, 8), (3, 1)]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 22, 7]]
** centroid: 6, normalized-entropy: 0.7973265101474423, [(2, 22), (3, 7)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5279000022700785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5279000022700785, 0.23253588075169257] ***
*** finished computation of 7 references, err: [Inf, 0.5279000022700785, 0.23253588075169257] ***
*** center 1: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 1, 4]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 1), (3, 4)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 3]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 15), (3, 3)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5330999996063686] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5330999996063686, 0.2723902929075523] ***
*** finished computation of 7 references, err: [Inf, 0.5330999996063686, 0.2723902929075523] ***
*** center 1: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 21, 2]]
** centroid: 3, normalized-entropy: 0.42622865699814483, [(2, 21), (3, 2)]
*** center 4: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 1, 18]]
** centroid: 5, normalized-entropy: 0.2974722489192896, [(2, 1), (3, 18)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 9, 3]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 9), (3, 3)]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 16)
[0.9733333333333333, 0.96, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9199999999999999, 0.9066666666666666, 0.8933333333333334, 0.8933333333333332, 0.8866666666666667, 0.8866666666666666]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.3, 2) => 0.9733333333333333
finished with 17
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.9204000083362256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9204000083362256, 0.4783496149409846] ***
*** starting iteration: 2; err: [Inf, 0.9204000083362256, 0.4783496149409846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9204000083362256, 0.4783496149409846, 0.3626271195612749] ***
*** starting iteration: 3; err: [Inf, 0.9204000083362256, 0.4783496149409846, 0.3626271195612749] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9204000083362256, 0.4783496149409846, 0.3626271195612749, 0.34000282865762654] ***
*** finished computation of 7 references, err: [Inf, 0.9204000083362256, 0.4783496149409846, 0.3626271195612749, 0.34000282865762654] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 9, 1]]
*** center 2: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 23]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 22, 12]]
** centroid: 5, normalized-entropy: 0.9366673818775627, [(2, 22), (3, 12)]
*** center 6: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5579000047088745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5579000047088745, 0.24197233522388706] ***
*** starting iteration: 2; err: [Inf, 0.5579000047088745, 0.24197233522388706] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5579000047088745, 0.24197233522388706, 0.21526634315801785] ***
*** starting iteration: 3; err: [Inf, 0.5579000047088745, 0.24197233522388706, 0.21526634315801785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5579000047088745, 0.24197233522388706, 0.21526634315801785, 0.21187616888652677] ***
*** finished computation of 7 references, err: [Inf, 0.5579000047088745, 0.24197233522388706, 0.21526634315801785, 0.21187616888652677] ***
*** center 1: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 12, 4]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 12), (3, 4)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 21]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 12, 1]]
*** center 5: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 8, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6918000157533819] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6918000157533819, 0.3715809870391996] ***
*** starting iteration: 2; err: [Inf, 0.6918000157533819, 0.3715809870391996] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6918000157533819, 0.3715809870391996, 0.29199393487627157] ***
*** starting iteration: 3; err: [Inf, 0.6918000157533819, 0.3715809870391996, 0.29199393487627157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6918000157533819, 0.3715809870391996, 0.29199393487627157, 0.24535800004123176] ***
*** finished computation of 7 references, err: [Inf, 0.6918000157533819, 0.3715809870391996, 0.29199393487627157, 0.24535800004123176] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 17, 6]]
** centroid: 1, normalized-entropy: 0.828055725379504, [(2, 17), (3, 6)]
*** center 2: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 17, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 3, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 13]]
*** center 6: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 12]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 17)
[0.9733333333333333, 0.96, 0.96, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9199999999999999, 0.9066666666666666, 0.8933333333333334, 0.8933333333333332, 0.8866666666666667, 0.8866666666666666]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.3, 2) => 0.9733333333333333
finished with 17
iteration 3 finished
generating 4 configurations using top 4 configurations, starting with 17)
[0.9733333333333333, 0.96, 0.96, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9199999999999999, 0.9066666666666666, 0.8933333333333334, 0.8933333333333332, 0.8866666666666667, 0.8866666666666666]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.3, 2) => 0.9733333333333333
finished with 17
iteration 4 finished
generating 4 configurations using top 4 configurations, starting with 17)
[0.9733333333333333, 0.96, 0.96, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9199999999999999, 0.9066666666666666, 0.8933333333333334, 0.8933333333333332, 0.8866666666666667, 0.8866666666666666]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.3, 2) => 0.9733333333333333
finished with 18
iteration 5 finished
*** starting iteration: 1; err: [Inf, 1.542199996105316] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.542199996105316, 0.5537069501264226] ***
*** starting iteration: 2; err: [Inf, 1.542199996105316, 0.5537069501264226] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.542199996105316, 0.5537069501264226, 0.5450537958948576] ***
*** starting iteration: 3; err: [Inf, 1.542199996105316, 0.5537069501264226, 0.5450537958948576] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.542199996105316, 0.5537069501264226, 0.5450537958948576, 0.5436003558827279] ***
*** starting iteration: 4; err: [Inf, 1.542199996105316, 0.5537069501264226, 0.5450537958948576, 0.5436003558827279] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.542199996105316, 0.5537069501264226, 0.5450537958948576, 0.5436003558827279, 0.5429801086650075] ***
*** finished computation of 3 references, err: [Inf, 1.542199996105316, 0.5537069501264226, 0.5450537958948576, 0.5436003558827279, 0.5429801086650075] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 24]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 30, 12]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(2, 30), (3, 12)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1551000006950487] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1551000006950487, 0.539894447440653] ***
*** starting iteration: 2; err: [Inf, 1.1551000006950487, 0.539894447440653] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1551000006950487, 0.539894447440653, 0.5232362305659062] ***
*** starting iteration: 3; err: [Inf, 1.1551000006950487, 0.539894447440653, 0.5232362305659062] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1551000006950487, 0.539894447440653, 0.5232362305659062, 0.5128767537768146] ***
*** starting iteration: 4; err: [Inf, 1.1551000006950487, 0.539894447440653, 0.5232362305659062, 0.5128767537768146] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1551000006950487, 0.539894447440653, 0.5232362305659062, 0.5128767537768146, 0.5019793476580652] ***
*** starting iteration: 5; err: [Inf, 1.1551000006950487, 0.539894447440653, 0.5232362305659062, 0.5128767537768146, 0.5019793476580652] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1551000006950487, 0.539894447440653, 0.5232362305659062, 0.5128767537768146, 0.5019793476580652, 0.49756062071903573] ***
*** starting iteration: 6; err: [Inf, 1.1551000006950487, 0.539894447440653, 0.5232362305659062, 0.5128767537768146, 0.5019793476580652, 0.49756062071903573] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1551000006950487, 0.539894447440653, 0.5232362305659062, 0.5128767537768146, 0.5019793476580652, 0.49756062071903573, 0.4967215349273242] ***
*** finished computation of 3 references, err: [Inf, 1.1551000006950487, 0.539894447440653, 0.5232362305659062, 0.5128767537768146, 0.5019793476580652, 0.49756062071903573, 0.4967215349273242] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 28]]
** centroid: 1, normalized-entropy: 0.45868581620054033, [(2, 3), (3, 28)]
*** center 2: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 29, 5]]
** centroid: 3, normalized-entropy: 0.6024308020404452, [(2, 29), (3, 5)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0084000061855556] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0084000061855556, 0.5611443904645019] ***
*** starting iteration: 2; err: [Inf, 1.0084000061855556, 0.5611443904645019] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0084000061855556, 0.5611443904645019, 0.534649056002666] ***
*** starting iteration: 3; err: [Inf, 1.0084000061855556, 0.5611443904645019, 0.534649056002666] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0084000061855556, 0.5611443904645019, 0.534649056002666, 0.5296701630727891] ***
*** starting iteration: 4; err: [Inf, 1.0084000061855556, 0.5611443904645019, 0.534649056002666, 0.5296701630727891] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0084000061855556, 0.5611443904645019, 0.534649056002666, 0.5296701630727891, 0.5269716114595725] ***
*** starting iteration: 5; err: [Inf, 1.0084000061855556, 0.5611443904645019, 0.534649056002666, 0.5296701630727891, 0.5269716114595725] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0084000061855556, 0.5611443904645019, 0.534649056002666, 0.5296701630727891, 0.5269716114595725, 0.5269716114595725] ***
*** finished computation of 3 references, err: [Inf, 1.0084000061855556, 0.5611443904645019, 0.534649056002666, 0.5296701630727891, 0.5269716114595725, 0.5269716114595725] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 36, 10]]
** centroid: 1, normalized-entropy: 0.7553754125614286, [(2, 36), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 21]]
finished with 4 centroids; started with 3
generating 4 configurations using top 4 configurations, starting with 18)
[0.9733333333333333, 0.96, 0.96, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9199999999999999, 0.9066666666666666, 0.8933333333333334, 0.8933333333333332, 0.8866666666666667, 0.8866666666666666]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.3, 2) => 0.9733333333333333
finished with 18
iteration 6 finished
generating 4 configurations using top 4 configurations, starting with 18)
[0.9733333333333333, 0.96, 0.96, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9199999999999999, 0.9066666666666666, 0.8933333333333334, 0.8933333333333332, 0.8866666666666667, 0.8866666666666666]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.3, 2) => 0.9733333333333333
finished with 18
iteration 7 finished
generating 4 configurations using top 4 configurations, starting with 18)
[0.9733333333333333, 0.96, 0.96, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9199999999999999, 0.9066666666666666, 0.8933333333333334, 0.8933333333333332, 0.8866666666666667, 0.8866666666666666]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.3, 2) => 0.9733333333333333
finished with 19
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.4387032884217929] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4387032884217929, 0.16438502321722612] ***
*** finished computation of 7 references, err: [Inf, 0.4387032884217929, 0.16438502321722612] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 13, 1]]
** centroid: 3, normalized-entropy: 0.3712323266408756, [(2, 13), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 13, 12]]
** centroid: 4, normalized-entropy: 0.998845535995202, [(2, 13), (3, 12)]
*** center 5: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.40032653497802917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.40032653497802917, 0.183993250888341] ***
*** finished computation of 7 references, err: [Inf, 0.40032653497802917, 0.183993250888341] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 2: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 12, 1]]
** centroid: 3, normalized-entropy: 0.3912435636292556, [(2, 12), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 6, 3]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(2, 6), (3, 3)]
*** center 5: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 14, 1]]
** centroid: 6, normalized-entropy: 0.3533593350214213, [(2, 14), (3, 1)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3353958368715382] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3353958368715382, 0.19633936704019844] ***
*** finished computation of 7 references, err: [Inf, 0.3353958368715382, 0.19633936704019844] ***
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 19, 6]]
** centroid: 3, normalized-entropy: 0.7950402793845225, [(2, 19), (3, 6)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 10, 3]]
** centroid: 4, normalized-entropy: 0.7793498372920851, [(2, 10), (3, 3)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
finished with 9 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 19)
[0.9733333333333333, 0.96, 0.96, 0.96, 0.9466666666666667, 0.9466666666666667, 0.94, 0.94, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9199999999999999, 0.9199999999999999, 0.9066666666666666, 0.8933333333333334, 0.8933333333333332, 0.8866666666666667, 0.8866666666666666]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.3, 2) => 0.9733333333333333
finished with 19
iteration 9 finished
[ Info: ========== BEST MODEL ==========
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.3, 2), 0.9733333333333333)
[ Info: AKNC{Array{Float64,1}}[AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[6.2, 2.966666666666667, 4.966666666666666, 1.7000000000000002], [6.215789473684211, 2.8736842105263163, 5.14736842105263, 1.952631578947368], [4.433333333333334, 2.9166666666666665, 1.3166666666666667, 0.19999999999999998], [7.106250000000001, 3.1687499999999997, 6.04375, 2.1500000000000004], [4.938888888888889, 3.283333333333333, 1.461111111111111, 0.24444444444444446], [5.3999999999999995, 3.9111111111111105, 1.5333333333333332, 0.26666666666666666], [5.4944444444444445, 2.6944444444444446, 3.9722222222222223, 1.2444444444444445], [6.472727272727273, 2.890909090909091, 4.490909090909091, 1.390909090909091]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 3, 1, 3, 1, 1, 2, 2], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.3, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[5.621428571428571, 2.5714285714285716, 4.092857142857143, 1.2857142857142858], [6.504347826086956, 3.0304347826086957, 5.439130434782608, 2.0652173913043477], [5.0, 2.15, 3.4, 1.0], [7.625, 3.4000000000000004, 6.25, 2.025], [6.382352941176471, 2.976470588235294, 4.63529411764706, 1.4588235294117644], [5.95, 2.825, 5.0, 1.7999999999999998], [7.566666666666666, 2.8666666666666667, 6.466666666666666, 2.0], [5.005714285714286, 3.425714285714286, 1.4742857142857142, 0.25142857142857145]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 3, 2, 3, 2, 3, 3, 1], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.3, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[5.0406249999999995, 3.440625, 1.4625000000000001, 0.2375], [6.166666666666667, 2.466666666666667, 4.833333333333333, 1.5333333333333332], [6.086666666666667, 2.7400000000000007, 5.173333333333333, 1.8800000000000001], [5.40909090909091, 2.4363636363636365, 3.6727272727272724, 1.1181818181818182], [6.7, 3.0400000000000005, 4.74, 1.48], [6.5, 3.1, 5.15, 2.0], [7.011764705882353, 3.01764705882353, 5.93529411764706, 2.11764705882353], [6.114285714285714, 2.9857142857142853, 4.5285714285714285, 1.442857142857143], [5.70909090909091, 2.8545454545454545, 4.20909090909091, 1.3000000000000003]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1, 2, 3, 2, 2, 3, 3, 2, 2], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :rand, 0.3, 2))]
Test Summary: | Pass  Total
AKNC          |    1      1
[68, 1, 22, 23, 10, 8, 1, 1, 2, 13, 21, 1, 1, 14, 47, 29, 2, 31, 1, 25, 32, 10, 20, 30, 38, 32, 27, 1, 30, 46, 23, 12, 27, 37, 17, 15, 19, 33, 16, 44, 43, 22, 1, 42, 38, 30, 16, 21, 26, 26, 22, 25, 36, 43, 25, 14, 48, 35, 8, 29, 26, 58, 34, 25, 28, 34, 25, 39, 15, 32, 38, 28, 45, 30, 24, 36, 9, 38, 41, 19, 46, 33, 34, 18, 41, 27, 33, 28, 40, 26, 34, 35, 33, 31, 42, 67, 3, 21, 15, 8, 43, 26, 30, 39, 53, 32, 40, 40, 27, 18, 43, 43, 41, 27, 51, 68, 28, 1, 38, 36, 25, 32, 41, 25, 35, 52, 41, 23, 17, 47, 40, 27, 41, 32, 39, 34, 24, 21, 47, 31, 31, 23, 36, 39, 41, 23, 30, 16, 11, 28, 35, 37, 22, 28, 32, 66, 30, 26, 32, 35, 42, 40, 40, 7, 39, 72, 26, 38, 37, 34, 49, 44, 29, 37, 38, 25, 40, 39, 28, 43, 47, 60, 30, 34, 73, 30, 28, 30, 27, 38, 58, 50, 39, 16, 31, 41, 45, 34, 42, 40, 58, 32, 27, 37, 31, 30, 29, 41, 39, 22, 58, 34, 38, 34, 43, 33, 47, 40, 21, 41, 44, 29, 33, 38, 67, 44, 41, 25, 31, 53, 1, 47, 1, 25, 37, 58, 27, 31, 51, 29, 27, 50, 40, 35, 52, 33, 65, 5, 63, 44, 66, 22, 43, 38, 46, 46, 52, 49, 23, 40, 38, 35, 42, 23, 33, 36, 26, 42, 49, 42, 36, 28, 46, 29, 39, 2, 25, 43, 65, 43, 48, 33, 34, 50, 34, 46, 32, 37, 29, 38, 32, 61, 46, 41, 54, 28, 46, 31, 32, 62]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6090000000000001, speedup = 0.47421893034838086, eval_ratio = 0.042251)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":null,"recall":0.38454861111111105,"f1":null,"seconds":6.889738142490387e-5,"exhaustive_search_seconds":0.00034821033477783203,"evaluations":340.453125,"distances_sum":1720.0547942590306}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5607638888888887,"recall":0.5607638888888887,"f1":0.5607638888888887,"seconds":0.00010139681398868561,"exhaustive_search_seconds":0.00034821033477783203,"evaluations":379.4375,"distances_sum":1635.2573523154772}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6623263888888886,"recall":0.6623263888888886,"f1":0.6623263888888886,"seconds":0.00013078190386295319,"exhaustive_search_seconds":0.00034821033477783203,"evaluations":417.7578125,"distances_sum":1594.8180004794488}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7326388888888883,"recall":0.7326388888888883,"f1":0.7326388888888883,"seconds":0.00020106323063373566,"exhaustive_search_seconds":0.00034821033477783203,"evaluations":457.3125,"distances_sum":1571.3010675360777}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7821180555555549,"recall":0.7821180555555549,"f1":0.7821180555555549,"seconds":0.0001947302371263504,"exhaustive_search_seconds":0.00034821033477783203,"evaluations":496.3984375,"distances_sum":1557.2748102516166}
KCenters.DeloneInvIndex> reached performance {"precision":0.8376736111111103,"recall":0.8376736111111103,"f1":0.8376736111111103,"seconds":0.00023020990192890167,"exhaustive_search_seconds":0.00034821033477783203,"evaluations":536.7890625,"distances_sum":1546.9930160285467}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8110000000000003, speedup = 1.9608542009382808, eval_ratio = 0.053867)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
   Testing KCenters tests passed 
