Julia Version 1.4.0-DEV.666
Commit 2835347ff0 (2019-12-26 15:28 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed DataAPI ─────────── v1.1.0
 Installed Reexport ────────── v0.2.0
 Installed Missings ────────── v0.4.3
 Installed Compat ──────────── v3.2.0
 Installed Parsers ─────────── v0.3.10
 Installed CategoricalArrays ─ v0.7.5
 Installed JSON ────────────── v0.21.0
  Updating `~/.julia/environments/v1.4/Project.toml`
  [324d7699] + CategoricalArrays v0.7.5
  Updating `~/.julia/environments/v1.4/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.5
  [34da2185] + Compat v3.2.0
  [9a962f9c] + DataAPI v1.1.0
  [682c06a0] + JSON v0.21.0
  [e1d29d7a] + Missings v0.4.3
  [69de0a69] + Parsers v0.3.10
  [189a3867] + Reexport v0.2.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Testing CategoricalArrays
  Updating `/tmp/jl_Kej8ru/Project.toml`
 [no changes]
  Updating `/tmp/jl_Kej8ru/Manifest.toml`
 [no changes]
Running sandbox
Status `/tmp/jl_Kej8ru/Project.toml`
  [324d7699] CategoricalArrays v0.7.5
  [34da2185] Compat v3.2.0
  [9a962f9c] DataAPI v1.1.0
  [682c06a0] JSON v0.21.0
  [e1d29d7a] Missings v0.4.3
  [189a3867] Reexport v0.2.0
  [9fa8497b] Future 
  [de0858da] Printf 
  [10745b16] Statistics 
  [8dfed614] Test 
  [4ec0a83e] Unicode 
WARNING: Compat.Test is deprecated, use Test instead.
  likely near /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/runtests.jl:11
WARNING: Compat.Test is deprecated, use Test instead.
  likely near /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/01_typedef.jl:3
┌ Warning: `eltype(x::CategoricalString)` is deprecated, use `eltype(String(x))` instead.
│   caller = macro expansion at 01_typedef.jl:56 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/01_typedef.jl:56
Test Summary: | Pass  Total
01_typedef.jl |   99     99
WARNING: Compat.Test is deprecated, use Test instead.
  likely near /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/02_buildorder.jl:3
Test Summary:    | Pass  Total
02_buildorder.jl |    6      6
WARNING: Compat.Test is deprecated, use Test instead.
  likely near /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/03_buildfields.jl:3
Test Summary:     | Pass  Total
03_buildfields.jl |    6      6
WARNING: Compat.Test is deprecated, use Test instead.
  likely near /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/04_constructors.jl:3
Test Summary:      | Pass  Total
04_constructors.jl |  121    121
WARNING: Compat.Test is deprecated, use Test instead.
  likely near /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/05_convert.jl:3
┌ Warning: `eltype(x::CategoricalString)` is deprecated, use `eltype(String(x))` instead.
│   caller = macro expansion at 05_convert.jl:76 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/05_convert.jl:76
Test Summary: | Pass  Total
05_convert.jl |  124    124
Test Summary: | Pass  Total
05_copy.jl    |   14     14
WARNING: Compat.Test is deprecated, use Test instead.
  likely near /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/06_show.jl:3
WARNING: Compat.Dates is deprecated, use Dates instead.
  likely near /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/06_show.jl:4
Test Summary: | Pass  Total
06_show.jl    |   52     52
WARNING: Compat.Test is deprecated, use Test instead.
  likely near /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/06_length.jl:3
Test Summary: | Pass  Total
06_length.jl  |    2      2
WARNING: Compat.Test is deprecated, use Test instead.
  likely near /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/07_levels.jl:3
Test Summary: | Pass  Total
07_levels.jl  |  362    362
WARNING: Compat.Test is deprecated, use Test instead.
  likely near /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/08_equality.jl:3
Test Summary:  | Pass  Total
08_equality.jl |  110    110
WARNING: Compat.Test is deprecated, use Test instead.
  likely near /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:3
WARNING: Compat.Unicode is deprecated, use Unicode instead.
  likely near /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:4
┌ Warning: `isempty(x::CategoricalString)` is deprecated, use `isempty(String(x))` instead.
│   caller = eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at Test.jl:258
└ @ Test /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:258
┌ Warning: `eltype(x::CategoricalString)` is deprecated, use `eltype(String(x))` instead.
│   caller = top-level scope at 08_string.jl:35
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:35
┌ Warning: `eltype(x::CategoricalString)` is deprecated, use `eltype(String(x))` instead.
│   caller = top-level scope at 08_string.jl:36
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:36
┌ Warning: `length(x::CategoricalString)` is deprecated, use `length(String(x))` instead.
│   caller = top-level scope at 08_string.jl:38
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:38
┌ Warning: `length(x::CategoricalString)` is deprecated, use `length(String(x))` instead.
│   caller = top-level scope at 08_string.jl:39
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:39
┌ Warning: `sizeof(x::CategoricalString)` is deprecated, use `sizeof(String(x))` instead.
│   caller = top-level scope at 08_string.jl:41
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:41
┌ Warning: `sizeof(x::CategoricalString)` is deprecated, use `sizeof(String(x))` instead.
│   caller = top-level scope at 08_string.jl:42
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:42
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:44
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:44
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:45
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:45
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:47
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:47
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:48
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:48
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = top-level scope at 08_string.jl:50
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:50
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = top-level scope at 08_string.jl:51
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:51
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = top-level scope at 08_string.jl:53
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:53
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = top-level scope at 08_string.jl:54
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:54
┌ Warning: `collect(x::CategoricalString)` is deprecated, use `collect(String(x))` instead.
│   caller = top-level scope at 08_string.jl:56
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:56
┌ Warning: `collect(x::CategoricalString)` is deprecated, use `collect(String(x))` instead.
│   caller = top-level scope at 08_string.jl:57
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:57
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:59
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:59
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:60
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:60
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:61
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:61
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:62
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:62
┌ Warning: `codeunit(x::CategoricalString, i::Integer)` is deprecated, use `codeunit(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:64
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:64
┌ Warning: `codeunit(x::CategoricalString, i::Integer)` is deprecated, use `codeunit(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:65
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:65
┌ Warning: `codeunit(x::CategoricalString, i::Integer)` is deprecated, use `codeunit(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:66
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:66
┌ Warning: `codeunit(x::CategoricalString, i::Integer)` is deprecated, use `codeunit(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:67
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:67
┌ Warning: `ascii(x::CategoricalString)` is deprecated, use `ascii(String(x))` instead.
│   caller = top-level scope at 08_string.jl:69
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:69
┌ Warning: `ascii(x::CategoricalString)` is deprecated, use `ascii(String(x))` instead.
│   caller = top-level scope at 08_string.jl:70
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:70
┌ Warning: `normalize(x::CategoricalString, s::Symbol)` is deprecated, use `normalize(String(x), s)` instead.
│   caller = top-level scope at 08_string.jl:74
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:74
┌ Warning: `graphemes(x::CategoricalString)` is deprecated, use `graphemes(String(x))` instead.
│   caller = top-level scope at 08_string.jl:76
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:76
┌ Warning: `graphemes(x::CategoricalString)` is deprecated, use `graphemes(String(x))` instead.
│   caller = top-level scope at 08_string.jl:77
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:77
┌ Warning: `isvalid(x::CategoricalString)` is deprecated, use `isvalid(String(x))` instead.
│   caller = top-level scope at 08_string.jl:79
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:79
┌ Warning: `isvalid(x::CategoricalString)` is deprecated, use `isvalid(String(x))` instead.
│   caller = top-level scope at 08_string.jl:80
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:80
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:81
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:81
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:82
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:82
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:83
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:83
┌ Warning: `length(x::CategoricalString, i::Int, j::Int)` is deprecated, use `length(String(x), i, j)` instead.
│   caller = top-level scope at 08_string.jl:85
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:85
┌ Warning: `length(x::CategoricalString, i::Int, j::Int)` is deprecated, use `length(String(x), i, j)` instead.
│   caller = top-level scope at 08_string.jl:86
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:86
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = nextind(::CategoricalArrays.CategoricalString{UInt32}, ::Int64, ::Int64) at basic.jl:521
└ @ Base ./strings/basic.jl:521
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = nextind(::CategoricalArrays.CategoricalString{UInt32}, ::Int64, ::Int64) at basic.jl:525
└ @ Base ./strings/basic.jl:525
┌ Warning: `repeat(x::CategoricalString, i::Integer)` is deprecated, use `repeat(String(x), i)` instead.
│   caller = ^ at basic.jl:680 [inlined]
└ @ Core ./strings/basic.jl:680
┌ Warning: `repeat(x::CategoricalString, i::Integer)` is deprecated, use `repeat(String(x), i)` instead.
│   caller = ^ at basic.jl:680 [inlined]
└ @ Core ./strings/basic.jl:680
┌ Warning: `repeat(x::CategoricalString, i::Integer)` is deprecated, use `repeat(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:112
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:112
┌ Warning: `repeat(x::CategoricalString, i::Integer)` is deprecated, use `repeat(String(x), i)` instead.
│   caller = top-level scope at 08_string.jl:113
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:113
┌ Warning: `eachmatch(r::Regex, x::CategoricalString; overlap = false)` is deprecated, use `eachmatch(r, String(x), overlap = overlap)` instead.
│   caller = top-level scope at 08_string.jl:115
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:115
┌ Warning: `eachmatch(r::Regex, x::CategoricalString; overlap = false)` is deprecated, use `eachmatch(r, String(x), overlap = overlap)` instead.
│   caller = top-level scope at 08_string.jl:116
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:116
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = match(::Regex, ::CategoricalArrays.CategoricalString{UInt32}) at deprecated.jl:66
└ @ CategoricalArrays ./deprecated.jl:66
┌ Warning: `match(r::Regex, s::CategoricalString, idx::Integer = firstindex(s), add_opts::UInt32 = UInt32(0); kwargs...)` is deprecated, use `match(r, String(s), idx, add_opts; kwargs...)` instead.
│   caller = match(::Regex, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at deprecated.jl:66
└ @ CategoricalArrays ./deprecated.jl:66
┌ Warning: `match(r::Regex, s::CategoricalString, idx::Integer = firstindex(s), add_opts::UInt32 = UInt32(0); kwargs...)` is deprecated, use `match(r, String(s), idx, add_opts; kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:121
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:121
┌ Warning: `eachmatch(r::Regex, x::CategoricalString; overlap = false)` is deprecated, use `eachmatch(r, String(x), overlap = overlap)` instead.
│   caller = top-level scope at 08_string.jl:123
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:123
┌ Warning: `eachmatch(r::Regex, x::CategoricalString; overlap = false)` is deprecated, use `eachmatch(r, String(x), overlap = overlap)` instead.
│   caller = top-level scope at 08_string.jl:124
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:124
┌ Warning: `eachmatch(r::Regex, x::CategoricalString; overlap = false)` is deprecated, use `eachmatch(r, String(x), overlap = overlap)` instead.
│   caller = ip:0x0
└ @ Core :-1
┌ Warning: `lpad(x::CategoricalString, n::Integer, c::Union{AbstractChar, AbstractString} = ' ')` is deprecated, use `lpad(String(x), n)` instead.
│   caller = lpad(::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at deprecated.jl:66
└ @ CategoricalArrays ./deprecated.jl:66
┌ Warning: `rpad(x::CategoricalString, n::Integer, c::Union{AbstractChar, AbstractString} = ' ')` is deprecated, use `rpad(String(x), n)` instead.
│   caller = rpad(::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at deprecated.jl:66
└ @ CategoricalArrays ./deprecated.jl:66
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = findfirst(::String, ::CategoricalArrays.CategoricalString{UInt32}) at search.jl:104
└ @ Base ./strings/search.jl:104
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = _searchindex(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64) at search.jl:145
└ @ Base ./strings/search.jl:145
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = _searchindex(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64) at search.jl:145
└ @ Base ./strings/search.jl:145
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = findnext(::Base.Fix2{typeof(isequal),Char}, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at search.jl:128
└ @ Base ./strings/search.jl:128
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = findnext(::Base.Fix2{typeof(isequal),Char}, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at search.jl:130
└ @ Base ./strings/search.jl:130
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = SubString at substring.jl:39 [inlined]
└ @ Core ./strings/substring.jl:39
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = checkbounds at basic.jl:188 [inlined]
└ @ Core ./strings/basic.jl:188
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = SubString{CategoricalArrays.CategoricalString{UInt32}}(::CategoricalArrays.CategoricalString{UInt32}, ::Int64, ::Int64) at substring.jl:31
└ @ Base ./strings/substring.jl:31
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = SubString{CategoricalArrays.CategoricalString{UInt32}}(::CategoricalArrays.CategoricalString{UInt32}, ::Int64, ::Int64) at substring.jl:32
└ @ Base ./strings/substring.jl:32
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = SubString{CategoricalArrays.CategoricalString{UInt32}}(::CategoricalArrays.CategoricalString{UInt32}, ::Int64, ::Int64) at substring.jl:34
└ @ Base ./strings/substring.jl:34
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = isvalid at substring.jl:86 [inlined]
└ @ Core ./strings/substring.jl:86
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = iterate at substring.jl:72 [inlined]
└ @ Core ./strings/substring.jl:72
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = iterate at substring.jl:72 [inlined]
└ @ Core ./strings/substring.jl:72
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = _searchindex(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64) at search.jl:152
└ @ Base ./strings/search.jl:152
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = SubString at substring.jl:39 [inlined]
└ @ Core ./strings/substring.jl:39
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = findnext(::Base.Fix2{typeof(==),Char}, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at search.jl:128
└ @ Base ./strings/search.jl:128
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = findnext(::Base.Fix2{typeof(==),Char}, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at search.jl:130
└ @ Base ./strings/search.jl:130
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = SubString at substring.jl:39 [inlined]
└ @ Core ./strings/substring.jl:39
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = iterate at substring.jl:72 [inlined]
└ @ Core ./strings/substring.jl:72
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = iterate at substring.jl:72 [inlined]
└ @ Core ./strings/substring.jl:72
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = findlast(::String, ::CategoricalArrays.CategoricalString{UInt32}) at search.jl:312
└ @ Base ./strings/search.jl:312
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = findprev(::Function, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at search.jl:339
└ @ Base ./strings/search.jl:339
┌ Warning: `reverse(x::CategoricalString)` is deprecated, use `reverse(String(x))` instead.
│   caller = findprev(::Function, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at search.jl:345
└ @ Base ./strings/search.jl:345
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = reverseind at basic.jl:650 [inlined]
└ @ Core ./strings/basic.jl:650
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = thisind(::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at basic.jl:401
└ @ Base ./strings/basic.jl:401
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = thisind(::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at basic.jl:404
└ @ Base ./strings/basic.jl:404
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = _rsearchindex(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64) at search.jl:361
└ @ Base ./strings/search.jl:361
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = getindex at substring.jl:80 [inlined]
└ @ Core ./strings/substring.jl:80
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = _rsearchindex(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64) at search.jl:368
└ @ Base ./strings/search.jl:368
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = last at basic.jl:539 [inlined]
└ @ Core ./strings/basic.jl:539
┌ Warning: `occursin(x::AbstractString, y::CategoricalString)` is deprecated, use `occursin(x, String(y))` instead.
│   caller = eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at Test.jl:258
└ @ Test /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:258
┌ Warning: `startswith(x::CategoricalString, y::AbstractString)` is deprecated, use `startswith(String(x), y)` instead.
│   caller = eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at Test.jl:258
└ @ Test /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:258
┌ Warning: `endswith(x::CategoricalString, y::AbstractString)` is deprecated, use `endswith(String(x), y)` instead.
│   caller = eval_test(::Expr, ::Expr, ::LineNumberNode, ::Bool) at Test.jl:258
└ @ Test /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:258
┌ Warning: `reverse(x::CategoricalString)` is deprecated, use `reverse(String(x))` instead.
│   caller = top-level scope at 08_string.jl:160
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:160
┌ Warning: `reverse(x::CategoricalString)` is deprecated, use `reverse(String(x))` instead.
│   caller = top-level scope at 08_string.jl:161
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:161
┌ Warning: `split(x::CategoricalString; kwargs...)` is deprecated, use `split(String(x); kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:167
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:167
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = _split(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:326
└ @ Base ./strings/util.jl:326
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = findfirst at search.jl:104 [inlined]
└ @ Core ./strings/search.jl:104
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = _split(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:329
└ @ Base ./strings/util.jl:329
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = SubString at substring.jl:39 [inlined]
└ @ Core ./strings/substring.jl:39
┌ Warning: `split(x::CategoricalString; kwargs...)` is deprecated, use `split(String(x); kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:169
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:169
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = _split(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:333
└ @ Base ./strings/util.jl:333
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = _split(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:340
└ @ Base ./strings/util.jl:340
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = iterate at substring.jl:72 [inlined]
└ @ Core ./strings/substring.jl:72
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = iterate at substring.jl:72 [inlined]
└ @ Core ./strings/substring.jl:72
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = _rsplit(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:399
└ @ Base ./strings/util.jl:399
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = findlast at search.jl:312 [inlined]
└ @ Core ./strings/search.jl:312
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = isvalid at substring.jl:86 [inlined]
└ @ Core ./strings/substring.jl:86
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = isvalid at substring.jl:86 [inlined]
└ @ Core ./strings/substring.jl:86
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = isvalid at substring.jl:86 [inlined]
└ @ Core ./strings/substring.jl:86
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = getindex at substring.jl:80 [inlined]
└ @ Core ./strings/substring.jl:80
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = _rsplit(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:403
└ @ Base ./strings/util.jl:403
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = _rsplit(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:404
└ @ Base ./strings/util.jl:404
┌ Warning: `strip(x::CategoricalString)` is deprecated, use `strip(String(x))` instead.
│   caller = top-level scope at 08_string.jl:175
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:175
┌ Warning: `strip(x::CategoricalString)` is deprecated, use `strip(String(x))` instead.
│   caller = top-level scope at 08_string.jl:176
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:176
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = iterate at basic.jl:684 [inlined]
└ @ Core ./strings/basic.jl:684
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = iterate at basic.jl:684 [inlined]
└ @ Core ./strings/basic.jl:684
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = iterate at basic.jl:684 [inlined]
└ @ Core ./strings/basic.jl:684
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = iterate at basic.jl:683 [inlined]
└ @ Core ./strings/basic.jl:683
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = iterate at basic.jl:683 [inlined]
└ @ Core ./strings/basic.jl:683
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = iterate at basic.jl:683 [inlined]
└ @ Core ./strings/basic.jl:683
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = iterate at basic.jl:683 [inlined]
└ @ Core ./strings/basic.jl:683
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = iterate at basic.jl:684 [inlined]
└ @ Core ./strings/basic.jl:684
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = iterate at basic.jl:684 [inlined]
└ @ Core ./strings/basic.jl:684
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = iterate at basic.jl:683 [inlined]
└ @ Core ./strings/basic.jl:683
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = iterate at basic.jl:683 [inlined]
└ @ Core ./strings/basic.jl:683
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = iterate at basic.jl:683 [inlined]
└ @ Core ./strings/basic.jl:683
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = isvalid at substring.jl:86 [inlined]
└ @ Core ./strings/substring.jl:86
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = iterate at substring.jl:72 [inlined]
└ @ Core ./strings/substring.jl:72
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = iterate at substring.jl:72 [inlined]
└ @ Core ./strings/substring.jl:72
┌ Warning: `lstrip(x::CategoricalString)` is deprecated, use `lstrip(String(x))` instead.
│   caller = top-level scope at 08_string.jl:179
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:179
┌ Warning: `lstrip(x::CategoricalString)` is deprecated, use `lstrip(String(x))` instead.
│   caller = top-level scope at 08_string.jl:180
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:180
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = lstrip(::Base.Fix2{typeof(in),Char}, ::CategoricalArrays.CategoricalString{UInt32}) at util.jl:158
└ @ Base ./strings/util.jl:158
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = iterate at basic.jl:540 [inlined]
└ @ Core ./strings/basic.jl:540
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = iterate at basic.jl:540 [inlined]
└ @ Core ./strings/basic.jl:540
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = iterate at basic.jl:540 [inlined]
└ @ Core ./strings/basic.jl:540
┌ Warning: `iterate(x::CategoricalString)` is deprecated, use `iterate(String(x))` instead.
│   caller = _zip_iterate_some at iterators.jl:352 [inlined]
└ @ Core ./iterators.jl:352
┌ Warning: `rstrip(x::CategoricalString)` is deprecated, use `rstrip(String(x))` instead.
│   caller = top-level scope at 08_string.jl:183
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:183
┌ Warning: `rstrip(x::CategoricalString)` is deprecated, use `rstrip(String(x))` instead.
│   caller = top-level scope at 08_string.jl:184
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:184
┌ Warning: `uppercase(x::CategoricalString)` is deprecated, use `uppercase(String(x))` instead.
│   caller = top-level scope at 08_string.jl:187
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:187
┌ Warning: `uppercase(x::CategoricalString)` is deprecated, use `uppercase(String(x))` instead.
│   caller = top-level scope at 08_string.jl:188
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:188
┌ Warning: `lowercase(x::CategoricalString)` is deprecated, use `lowercase(String(x))` instead.
│   caller = top-level scope at 08_string.jl:190
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:190
┌ Warning: `lowercase(x::CategoricalString)` is deprecated, use `lowercase(String(x))` instead.
│   caller = top-level scope at 08_string.jl:191
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:191
┌ Warning: `titlecase(x::CategoricalString)` is deprecated, use `titlecase(String(x))` instead.
│   caller = top-level scope at 08_string.jl:193
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:193
┌ Warning: `titlecase(x::CategoricalString)` is deprecated, use `titlecase(String(x))` instead.
│   caller = top-level scope at 08_string.jl:194
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:194
┌ Warning: `uppercasefirst(x::CategoricalString)` is deprecated, use `uppercasefirst(String(x))` instead.
│   caller = top-level scope at 08_string.jl:196
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:196
┌ Warning: `uppercasefirst(x::CategoricalString)` is deprecated, use `uppercasefirst(String(x))` instead.
│   caller = top-level scope at 08_string.jl:197
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:197
┌ Warning: `lowercasefirst(x::CategoricalString)` is deprecated, use `lowercasefirst(String(x))` instead.
│   caller = top-level scope at 08_string.jl:199
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:199
┌ Warning: `lowercasefirst(x::CategoricalString)` is deprecated, use `lowercasefirst(String(x))` instead.
│   caller = top-level scope at 08_string.jl:200
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:200
┌ Warning: `chop(x::CategoricalString; kwargs...)` is deprecated, use `chop(String(x); kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:206
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:206
┌ Warning: `chop(x::CategoricalString; kwargs...)` is deprecated, use `chop(String(x); kwargs...)` instead.
│   caller = top-level scope at 08_string.jl:208
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:208
┌ Warning: `chomp(x::CategoricalString)` is deprecated, use `chomp(String(x))` instead.
│   caller = top-level scope at 08_string.jl:210
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:210
┌ Warning: `chomp(x::CategoricalString)` is deprecated, use `chomp(String(x))` instead.
│   caller = top-level scope at 08_string.jl:211
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:211
┌ Warning: `textwidth(x::CategoricalString)` is deprecated, use `textwidth(String(x))` instead.
│   caller = top-level scope at 08_string.jl:213
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:213
┌ Warning: `textwidth(x::CategoricalString)` is deprecated, use `textwidth(String(x))` instead.
│   caller = top-level scope at 08_string.jl:214
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:214
┌ Warning: `isascii(x::CategoricalString)` is deprecated, use `isascii(String(x))` instead.
│   caller = top-level scope at 08_string.jl:216
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:216
┌ Warning: `isascii(x::CategoricalString)` is deprecated, use `isascii(String(x))` instead.
│   caller = top-level scope at 08_string.jl:217
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:217
┌ Warning: `escape_string(x::CategoricalString)` is deprecated, use `escape_string(String(x))` instead.
│   caller = top-level scope at 08_string.jl:219
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:219
┌ Warning: `escape_string(x::CategoricalString)` is deprecated, use `escape_string(String(x))` instead.
│   caller = top-level scope at 08_string.jl:220
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:220
┌ Warning: `collect(x::CategoricalString)` is deprecated, use `collect(String(x))` instead.
│   caller = top-level scope at 08_string.jl:222
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:222
┌ Warning: `collect(x::CategoricalString)` is deprecated, use `collect(String(x))` instead.
│   caller = top-level scope at 08_string.jl:223
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/test/08_string.jl:223
Test Summary: | Pass  Total
08_string.jl  |  151    151
WARNING: Compat.Test is deprecated, use Test instead.
  likely near /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/09_hash.jl:3
Test Summary: | Pass  Total
09_hash.jl    |   54     54
WARNING: Compat.Test is deprecated, use Test instead.
  likely near /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/10_isless.jl:3
Test Summary: | Pass  Total
10_isless.jl  |  429    429
WARNING: Compat.Test is deprecated, use Test instead.
  likely near /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/11_array.jl:3
Test Summary: | Pass  Total
11_array.jl   | 9054   9054
WARNING: Compat.Test is deprecated, use Test instead.
  likely near /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/12_missingarray.jl:3
Test Summary:      |  Pass  Total
12_missingarray.jl | 12672  12672
WARNING: Compat.Test is deprecated, use Test instead.
  likely near /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/13_arraycommon.jl:3
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copy! at array.jl:426 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/src/array.jl:426
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copyto!(::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}, ::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}) at array.jl:415
└ @ CategoricalArrays ~/.julia/packages/CategoricalArrays/a8ebZ/src/array.jl:415
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copyto!(::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}, ::Int64, ::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}, ::Int64) at abstractarray.jl:829
└ @ Base ./abstractarray.jl:829
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copy! at array.jl:426 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/src/array.jl:426
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copyto!(::SubArray{CategoricalArrays.CategoricalString{UInt32},1,CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}},Tuple{UnitRange{Int64}},true}, ::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}) at array.jl:415
└ @ CategoricalArrays ~/.julia/packages/CategoricalArrays/a8ebZ/src/array.jl:415
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copy! at array.jl:426 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/a8ebZ/src/array.jl:426
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copyto!(::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}) at array.jl:415
└ @ CategoricalArrays ~/.julia/packages/CategoricalArrays/a8ebZ/src/array.jl:415
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copyto!(::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::Int64, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::Int64) at abstractarray.jl:829
└ @ Base ./abstractarray.jl:829
show: Test Failed at /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/13_arraycommon.jl:1140
  Expression: sprint(((io, a)->begin
                show(io, "text/plain", a)
            end), x) == "3-element $(CategoricalArray){$(Union{Missing, Int}),1,UInt32}:\n 2      \n 1      \n missing"
   Evaluated: "3-element CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32}:\n 2\n 1\n missing" == "3-element CategoricalArrays.CategoricalArray{Union{Missing, Int64},1,UInt32}:\n 2      \n 1      \n missing"
Stacktrace:
 [1] top-level scope at /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/13_arraycommon.jl:1140
 [2] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1116
 [3] top-level scope at /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/13_arraycommon.jl:1132
Test Summary:                                                                                                                                                                                                                       |  Pass  Fail  Total
13_arraycommon.jl                                                                                                                                                                                                                   | 22816     1  22817
  mergelevels()                                                                                                                                                                                                                     |    23           23
  Testing Union{}                                                                                                                                                                                                                   |   346          346
  Testing Missing                                                                                                                                                                                                                   |   363          363
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                     |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                     |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1     |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2     |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                 |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                 |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1 |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2 |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                 |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                 |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1 |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2 |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272          272
  converting from array with missings to array without missings CategoricalArray fails with missings                                                                                                                                |     2            2
  in(Int64, CategoricalArray{Int64})                                                                                                                                                                                                |     5            5
  in(Union{Missing, Int64}, CategoricalArray{Union{Missing, Int64}})                                                                                                                                                                |     5            5
  comparison                                                                                                                                                                                                                        |    34           34
  summary()                                                                                                                                                                                                                         |     2            2
  vcat() takes into account element type even when array is empty                                                                                                                                                                   |     7            7
  categorical() makes a copy of pool and refs                                                                                                                                                                                       |    32           32
  collect of CategoricalArray produces Array                                                                                                                                                                                        |     4            4
  Array(::CategoricalArray{T}) produces Array{T}                                                                                                                                                                                    |     4            4
  Array{T} constructors and convert                                                                                                                                                                                                 |     8            8
  convert(AbstractArray{T}, x)                                                                                                                                                                                                      |    12           12
  new levels can't be added through assignment when levels are ordered                                                                                                                                                              |     5            5
  float() and complex()                                                                                                                                                                                                             |     6            6
  droplevels                                                                                                                                                                                                                        |     4            4
  droplevels                                                                                                                                                                                                                        |     4            4
  show                                                                                                                                                                                                                              |     1     1      2
  broadcast                                                                                                                                                                                                                         |    11           11
  broadcast                                                                                                                                                                                                                         |    11           11
  broadcast                                                                                                                                                                                                                         |    11           11
  broadcast                                                                                                                                                                                                                         |    11           11
  broadcast                                                                                                                                                                                                                         |    11           11
  append! ordered=false                                                                                                                                                                                                             |    24           24
  append! ordered=true                                                                                                                                                                                                              |    24           24
  append! ordered=false                                                                                                                                                                                                             |    36           36
  append! ordered=true                                                                                                                                                                                                              |    36           36
  deleteat!                                                                                                                                                                                                                         |     2            2
  DataAPI                                                                                                                                                                                                                           |     4            4
  optimized broadcasting with ismissing                                                                                                                                                                                             |     8            8
Test Summary:                                                                                                                                                                                                                       |  Pass  Fail  Total
13_arraycommon.jl                                                                                                                                                                                                                   | 22816     1  22817
  mergelevels()                                                                                                                                                                                                                     |    23           23
  Testing Union{}                                                                                                                                                                                                                   |   346          346
  Testing Missing                                                                                                                                                                                                                   |   363          363
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                     |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                     |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1     |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2     |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=true, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=true, ordered=false, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2    |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=true, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                 |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt32, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                 |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1 |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt32, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2 |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                 |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                 |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1 |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=UInt64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2 |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int8, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int8, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2   |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int64, T=String, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2                  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,1,V,C,U,U1} where U1 where U where C where V where T, N=1  |   272          272
  constructors and convert() between categorical arrays, ordered_orig=false, ordered=false, R=Int64, T=Union{Missing, String}, CVM2=CategoricalArrays.CategoricalArray{T,2,V,C,U,U1} where U1 where U where C where V where T, N=2  |   272          272
  converting from array with missings to array without missings CategoricalArray fails with missings                                                                                                                                |     2            2
  in(Int64, CategoricalArray{Int64})                                                                                                                                                                                                |     5            5
  in(Union{Missing, Int64}, CategoricalArray{Union{Missing, Int64}})                                                                                                                                                                |     5            5
  comparison                                                                                                                                                                                                                        |    34           34
  summary()                                                                                                                                                                                                                         |     2            2
  vcat() takes into account element type even when array is empty                                                                                                                                                                   |     7            7
  categorical() makes a copy of pool and refs                                                                                                                                                                                       |    32           32
  collect of CategoricalArray produces Array                                                                                                                                                                                        |     4            4
  Array(::CategoricalArray{T}) produces Array{T}                                                                                                                                                                                    |     4            4
  Array{T} constructors and convert                                                                                                                                                                                                 |     8            8
  convert(AbstractArray{T}, x)                                                                                                                                                                                                      |    12           12
  new levels can't be added through assignment when levels are ordered                                                                                                                                                              |     5            5
  float() and complex()                                                                                                                                                                                                             |     6            6
  droplevels                                                                                                                                                                                                                        |     4            4
  droplevels                                                                                                                                                                                                                        |     4            4
  show                                                                                                                                                                                                                              |     1     1      2
  broadcast                                                                                                                                                                                                                         |    11           11
  broadcast                                                                                                                                                                                                                         |    11           11
  broadcast                                                                                                                                                                                                                         |    11           11
  broadcast                                                                                                                                                                                                                         |    11           11
  broadcast                                                                                                                                                                                                                         |    11           11
  append! ordered=false                                                                                                                                                                                                             |    24           24
  append! ordered=true                                                                                                                                                                                                              |    24           24
  append! ordered=false                                                                                                                                                                                                             |    36           36
  append! ordered=true                                                                                                                                                                                                              |    36           36
  deleteat!                                                                                                                                                                                                                         |     2            2
  DataAPI                                                                                                                                                                                                                           |     4            4
  optimized broadcasting with ismissing                                                                                                                                                                                             |     8            8
ERROR: LoadError: Some tests did not pass: 22816 passed, 1 failed, 0 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/runtests.jl:36
caused by [exception 1]
Some tests did not pass: 22816 passed, 1 failed, 0 errored, 0 broken.
err = ProcessFailedException(Base.Process[Process(`/opt/julia/bin/julia -Cnative -J/opt/julia/lib/julia/sys.so -g1 --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --inline=yes --startup-file=no --track-allocation=none --eval 'append!(empty!(Base.DEPOT_PATH), ["/home/pkgeval/.julia", "/opt/julia/local/share/julia", "/opt/julia/share/julia", "/usr/local/share/julia"])
append!(empty!(Base.DL_LOAD_PATH), String[])

cd("/home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test")
append!(empty!(ARGS), String[])
include("/home/pkgeval/.julia/packages/CategoricalArrays/a8ebZ/test/runtests.jl")
'`, ProcessExited(1))])
ERROR: Package CategoricalArrays errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/Types.jl:54
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/Operations.jl:1471
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:313
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:300
 [5] #test#66 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:294 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:294 [inlined]
 [7] #test#65 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:293 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:293 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:292
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:292
 [11] top-level scope at none:12
