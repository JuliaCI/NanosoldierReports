Julia Version 1.4.0-DEV.666
Commit 2835347ff0 (2019-12-26 15:28 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed RBNF ─────────────── v0.1.0
 Installed PrettyPrint ──────── v0.1.0
 Installed OrderedCollections ─ v1.1.0
 Installed DataStructures ───── v0.17.6
 Installed MLStyle ──────────── v0.3.1
  Updating `~/.julia/environments/v1.4/Project.toml`
  [83ef0002] + RBNF v0.1.0
  Updating `~/.julia/environments/v1.4/Manifest.toml`
  [864edb3b] + DataStructures v0.17.6
  [d8e11817] + MLStyle v0.3.1
  [bac558e1] + OrderedCollections v1.1.0
  [8162dcfd] + PrettyPrint v0.1.0
  [83ef0002] + RBNF v0.1.0
  [2a0f44e3] + Base64 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [9a3f8284] + Random 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [8dfed614] + Test 
   Testing RBNF
  Updating `/tmp/jl_OHZds5/Project.toml`
 [no changes]
  Updating `/tmp/jl_OHZds5/Manifest.toml`
 [no changes]
Running sandbox
Status `/tmp/jl_OHZds5/Project.toml`
  [864edb3b] DataStructures v0.17.6
  [d8e11817] MLStyle v0.3.1
  [8162dcfd] PrettyPrint v0.1.0
  [83ef0002] RBNF v0.1.0
  [8dfed614] Test 
Main.QASM.Struct_mainprogram(
  ver=Token{real}(str=2.0, lineno=1, colno=1),
  prog=[
    Main.QASM.Struct_gate(
      decl=Main.QASM.Struct_gatedecl(
        id=Token{id}(str=cu1, lineno=3, colno=3),
        arglist1=Token{id}(str=lambda, lineno=3, colno=3),
        arglist2=(
          Token{id}(str=a, lineno=3, colno=3),
          Token{id}(str=b, lineno=3, colno=3),
        ),
      ),
      goplist=[
        Main.QASM.Struct_u(
          exprs=(
            (
              Token{nninteger}(str=0, lineno=5, colno=5),
              Token{nninteger}(str=0, lineno=5, colno=5),
            ),
            (
              Token{id}(str=theta, lineno=5, colno=5),
              Token{unnamed}(str=/, lineno=5, colno=5),
              Token{nninteger}(str=2, lineno=5, colno=5),
            ),
          ),
          arg=Main.QASM.Struct_argument(
            id=Token{id}(str=a, lineno=5, colno=5),
            arg=nothing,
          ),
        ),
        Main.QASM.Struct_cx(
          arg1=Main.QASM.Struct_argument(
            id=Token{id}(str=a, lineno=6, colno=6),
            arg=nothing,
          ),
          arg2=Main.QASM.Struct_argument(
            id=Token{id}(str=b, lineno=6, colno=6),
            arg=nothing,
          ),
        ),
        Main.QASM.Struct_u(
          exprs=(
            (
              Token{nninteger}(str=0, lineno=7, colno=7),
              Token{nninteger}(str=0, lineno=7, colno=7),
            ),
            Main.QASM.Struct_neg(
              value=(
                Token{id}(str=theta, lineno=7, colno=7),
                Token{unnamed}(str=/, lineno=7, colno=7),
                Token{nninteger}(str=2, lineno=7, colno=7),
              ),
            ),
          ),
          arg=Main.QASM.Struct_argument(
            id=Token{id}(str=b, lineno=7, colno=7),
            arg=nothing,
          ),
        ),
        Main.QASM.Struct_cx(
          arg1=Main.QASM.Struct_argument(
            id=Token{id}(str=a, lineno=8, colno=8),
            arg=nothing,
          ),
          arg2=Main.QASM.Struct_argument(
            id=Token{id}(str=b, lineno=8, colno=8),
            arg=nothing,
          ),
        ),
        Main.QASM.Struct_u(
          exprs=(
            (
              Token{nninteger}(str=0, lineno=9, colno=9),
              Token{nninteger}(str=0, lineno=9, colno=9),
            ),
            (
              Token{id}(str=theta, lineno=9, colno=9),
              Token{unnamed}(str=/, lineno=9, colno=9),
              Token{nninteger}(str=2, lineno=9, colno=9),
            ),
          ),
          arg=Main.QASM.Struct_argument(
            id=Token{id}(str=b, lineno=9, colno=9),
            arg=nothing,
          ),
        ),
      ],
    ),
    Main.QASM.Struct_decl(
      regtype=Token{id}(str=qreg, lineno=12, colno=12),
      id=Token{id}(str=q, lineno=12, colno=12),
      int=Token{nninteger}(str=3, lineno=12, colno=12),
    ),
    Main.QASM.Struct_decl(
      regtype=Token{id}(str=qreg, lineno=13, colno=13),
      id=Token{id}(str=a, lineno=13, colno=13),
      int=Token{nninteger}(str=2, lineno=13, colno=13),
    ),
    Main.QASM.Struct_decl(
      regtype=Token{id}(str=creg, lineno=14, colno=14),
      id=Token{id}(str=c, lineno=14, colno=14),
      int=Token{nninteger}(str=3, lineno=14, colno=14),
    ),
    Main.QASM.Struct_decl(
      regtype=Token{id}(str=creg, lineno=15, colno=15),
      id=Token{id}(str=syn, lineno=15, colno=15),
      int=Token{nninteger}(str=2, lineno=15, colno=15),
    ),
    Main.QASM.Struct_iduop(
      op=Token{id}(str=cu1, lineno=16, colno=16),
      lst1=(
        Token{id}(str=pi, lineno=16, colno=16),
        Token{unnamed}(str=/, lineno=16, colno=16),
        Token{nninteger}(str=2, lineno=16, colno=16),
      ),
      lst2=(
        Main.QASM.Struct_mixeditem(
          id=Token{id}(str=q, lineno=16, colno=16),
          arg=Token{nninteger}(str=0, lineno=16, colno=16),
        ),
        Main.QASM.Struct_mixeditem(
          id=Token{id}(str=q, lineno=16, colno=16),
          arg=Token{nninteger}(str=1, lineno=16, colno=16),
        ),
      ),
    ),
  ],
)RModule(
  hd=Token{reserved}(str=module, lineno=1, colno=1),
  name=Token{id}(str=Poly, lineno=1, colno=1),
  stmts=[
    RDefine(
      hd=Token{reserved}(str=def, lineno=2, colno=2),
      name=Token{id}(str=a, lineno=2, colno=2),
      value=RExp(
        hd=RComp(
          forall=nothing,
          value=RCall(
            fn=RAnnotate(
              value=RStr(
                value=Token{str}(str="12\"3", lineno=2, colno=2),
              ),
            ),
            args=[],
          ),
        ),
        tl=[],
      ),
    ),
    RClass(
      hd=Token{reserved}(str=class, lineno=4, colno=4),
      name=Token{id}(str=Monad, lineno=4, colno=4),
      ids=[
        Token{id}(str=m, lineno=4, colno=4),
      ],
      constrains=RConstaints(
        hd=Token{reserved}(str=that, lineno=4, colno=4),
        elts=GoodSeq{Any}(
          head=RCall(
            fn=RAnnotate(
              value=RVar(
                value=Token{id}(str=Functor, lineno=4, colno=4),
              ),
            ),
            args=[
              RAnnotate(
                value=RVar(
                  value=Token{id}(str=m, lineno=4, colno=4),
                ),
              ),
            ],
          ),
          tail=[],
        ),
      ),
      interfaces=[
        RDecl(
          hd=Token{reserved}(str=val, lineno=5, colno=5),
          name=Token{id}(str=bind, lineno=5, colno=5),
          typ=RExp(
            hd=RComp(
              forall=RForall(
                fresh=[
                  Token{id}(str=a, lineno=5, colno=5),
                  Token{id}(str=b, lineno=5, colno=5),
                ],
                constraints=nothing,
              ),
              value=RCall(
                fn=RAnnotate(
                  value=RVar(
                    value=Token{id}(str=m, lineno=5, colno=5),
                  ),
                ),
                args=[
                  RAnnotate(
                    value=RVar(
                      value=Token{id}(str=a, lineno=5, colno=5),
                    ),
                  ),
                ],
              ),
            ),
            tl=[
              [
                ROp(
                  name=nothing,
                  is_typeop=true,
                ),
                RComp(
                  forall=nothing,
                  value=RCall(
                    fn=RAnnotate(
                      value=RExp(
                        hd=RComp(
                          forall=nothing,
                          value=RCall(
                            fn=RAnnotate(
                              value=RVar(
                                value=Token{id}(str=a, lineno=5, colno=5),
                              ),
                            ),
                            args=[],
                          ),
                        ),
                        tl=[
                          [
                            ROp(
                              name=nothing,
                              is_typeop=true,
                            ),
                            RComp(
                              forall=nothing,
                              value=RCall(
                                fn=RAnnotate(
                                  value=RVar(
                                    value=Token{id}(str=b, lineno=5, colno=5),
                                  ),
                                ),
                                args=[],
                              ),
                            ),
                          ],
                        ],
                      ),
                    ),
                    args=[],
                  ),
                ),
              ],
              [
                ROp(
                  name=nothing,
                  is_typeop=true,
                ),
                RComp(
                  forall=nothing,
                  value=RCall(
                    fn=RAnnotate(
                      value=RVar(
                        value=Token{id}(str=m, lineno=5, colno=5),
                      ),
                    ),
                    args=[
                      RAnnotate(
                        value=RVar(
                          value=Token{id}(str=b, lineno=5, colno=5),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ],
          ),
        ),
      ],
    ),
    RDecl(
      hd=Token{reserved}(str=val, lineno=8, colno=8),
      name=Token{id}(str=a, lineno=8, colno=8),
      typ=RExp(
        hd=RComp(
          forall=nothing,
          value=RCall(
            fn=RAnnotate(
              value=RVar(
                value=Token{id}(str=Int, lineno=8, colno=8),
              ),
            ),
            args=[],
          ),
        ),
        tl=[],
      ),
    ),
    RDefine(
      hd=Token{reserved}(str=def, lineno=9, colno=9),
      name=Token{id}(str=a, lineno=9, colno=9),
      value=RExp(
        hd=RComp(
          forall=nothing,
          value=RCall(
            fn=RAnnotate(
              value=RStr(
                value=Token{str}(str="12345", lineno=9, colno=9),
              ),
            ),
            args=[],
          ),
        ),
        tl=[],
      ),
    ),
    RDecl(
      hd=Token{reserved}(str=val, lineno=11, colno=11),
      name=Token{id}(str=f, lineno=11, colno=11),
      typ=RExp(
        hd=RComp(
          forall=nothing,
          value=RCall(
            fn=RAnnotate(
              value=RVar(
                value=Token{id}(str=Int, lineno=11, colno=11),
              ),
            ),
            args=[],
          ),
        ),
        tl=[
          [
            ROp(
              name=nothing,
              is_typeop=true,
            ),
            RComp(
              forall=nothing,
              value=RCall(
                fn=RAnnotate(
                  value=RVar(
                    value=Token{id}(str=Int, lineno=11, colno=11),
                  ),
                ),
                args=[],
              ),
            ),
          ],
        ],
      ),
    ),
    RDefine(
      hd=Token{reserved}(str=def, lineno=12, colno=12),
      name=Token{id}(str=f, lineno=12, colno=12),
      value=RExp(
        hd=RComp(
          forall=nothing,
          value=RFun(
            hd=Token{reserved}(str=fn, lineno=12, colno=12),
            args=[
              Token{id}(str=a, lineno=12, colno=12),
            ],
            body=RExp(
              hd=RComp(
                forall=nothing,
                value=RCall(
                  fn=RAnnotate(
                    value=RVar(
                      value=Token{id}(str=a, lineno=12, colno=12),
                    ),
                  ),
                  args=[],
                ),
              ),
              tl=[
                [
                  ROp(
                    name=Token{id}(str=add, lineno=12, colno=12),
                    is_typeop=false,
                  ),
                  RComp(
                    forall=nothing,
                    value=RCall(
                      fn=RAnnotate(
                        value=RNum(
                          neg=nothing,
                          int=Token{integer}(str=1, lineno=12, colno=12),
                          float=nothing,
                        ),
                      ),
                      args=[],
                    ),
                  ),
                ],
              ],
            ),
          ),
        ),
        tl=[],
      ),
    ),
    RDecl(
      hd=Token{reserved}(str=val, lineno=14, colno=14),
      name=Token{id}(str=g, lineno=14, colno=14),
      typ=RExp(
        hd=RComp(
          forall=nothing,
          value=RCall(
            fn=RAnnotate(
              value=RVar(
                value=Token{id}(str=Int, lineno=14, colno=14),
              ),
            ),
            args=[],
          ),
        ),
        tl=[],
      ),
    ),
    RDefine(
      hd=Token{reserved}(str=def, lineno=15, colno=15),
      name=Token{id}(str=g, lineno=15, colno=15),
      value=RExp(
        hd=RComp(
          forall=nothing,
          value=RMatch(
            hd=Token{reserved}(str=match, lineno=15, colno=15),
            sc=RExp(
              hd=RComp(
                forall=nothing,
                value=RCall(
                  fn=RAnnotate(
                    value=RNum(
                      neg=nothing,
                      int=Token{integer}(str=1, lineno=15, colno=15),
                      float=nothing,
                    ),
                  ),
                  args=[],
                ),
              ),
              tl=[],
            ),
            cases=[
              (
                RComp(
                  forall=nothing,
                  value=RCall(
                    fn=RAnnotate(
                      value=RNum(
                        neg=nothing,
                        int=Token{integer}(str=1, lineno=16, colno=16),
                        float=nothing,
                      ),
                    ),
                    args=[],
                  ),
                ),
                RExp(
                  hd=RComp(
                    forall=nothing,
                    value=RCall(
                      fn=RAnnotate(
                        value=RNum(
                          neg=nothing,
                          int=Token{integer}(str=2, lineno=16, colno=16),
                          float=nothing,
                        ),
                      ),
                      args=[],
                    ),
                  ),
                  tl=[],
                ),
              ),
              (
                RComp(
                  forall=nothing,
                  value=RCall(
                    fn=RAnnotate(
                      value=RVar(
                        value=Token{id}(str=_, lineno=17, colno=17),
                      ),
                    ),
                    args=[],
                  ),
                ),
                RExp(
                  hd=RComp(
                    forall=nothing,
                    value=RCall(
                      fn=RAnnotate(
                        value=RNum(
                          neg=nothing,
                          int=Token{integer}(str=0, lineno=17, colno=17),
                          float=nothing,
                        ),
                      ),
                      args=[],
                    ),
                  ),
                  tl=[],
                ),
              ),
            ],
          ),
        ),
        tl=[],
      ),
    ),
    RDefine(
      hd=Token{reserved}(str=def, lineno=20, colno=20),
      name=Token{id}(str=z, lineno=20, colno=20),
      value=RExp(
        hd=RComp(
          forall=nothing,
          value=RFun(
            hd=Token{reserved}(str=fn, lineno=20, colno=20),
            args=[
              Token{id}(str=x, lineno=20, colno=20),
            ],
            body=RExp(
              hd=RComp(
                forall=nothing,
                value=RIf(
                  hd=Token{reserved}(str=if, lineno=20, colno=20),
                  cond=RExp(
                    hd=RComp(
                      forall=nothing,
                      value=RCall(
                        fn=RAnnotate(
                          value=RVar(
                            value=Token{id}(str=x, lineno=20, colno=20),
                          ),
                        ),
                        args=[],
                      ),
                    ),
                    tl=[
                      [
                        ROp(
                          name=Token{id}(str=equals, lineno=20, colno=20),
                          is_typeop=false,
                        ),
                        RComp(
                          forall=nothing,
                          value=RCall(
                            fn=RAnnotate(
                              value=RNum(
                                neg=nothing,
                                int=Token{integer}(str=1, lineno=20, colno=20),
                                float=nothing,
                              ),
                            ),
                            args=[],
                          ),
                        ),
                      ],
                    ],
                  ),
                  br1=RExp(
                    hd=RComp(
                      forall=nothing,
                      value=RCall(
                        fn=RAnnotate(
                          value=RNum(
                            neg=nothing,
                            int=Token{integer}(str=1, lineno=20, colno=20),
                            float=nothing,
                          ),
                        ),
                        args=[],
                      ),
                    ),
                    tl=[],
                  ),
                  br2=RExp(
                    hd=RComp(
                      forall=nothing,
                      value=RCall(
                        fn=RAnnotate(
                          value=RNum(
                            neg=nothing,
                            int=Token{integer}(str=2, lineno=20, colno=20),
                            float=nothing,
                          ),
                        ),
                        args=[],
                      ),
                    ),
                    tl=[],
                  ),
                ),
              ),
              tl=[],
            ),
          ),
        ),
        tl=[],
      ),
    ),
  ],
)   Testing RBNF tests passed 
