Julia Version 1.6.0-DEV.898
Commit eee48c58c0 (2020-09-12 15:01 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_aW8Fxu/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_aW8Fxu/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723233854621332
curgen: 20 fitness: 0.21723233854621332
curgen: 30 fitness: 0.21723331129501466
curgen: 40 fitness: 0.21723331129501466
curgen: 50 fitness: 0.21723331129501466
CoordinateCreature{Vector{Float64}}([-0.22263278016082505], -0.21723331129501466) -0.22263278016082505 -0.21723331129501466
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2577688897555865
curgen: 100 fitness: 3.257968268744569
curgen: 150 fitness: 3.2580263091665174
curgen: 200 fitness: 3.2582922790997704
curgen: 250 fitness: 3.2582922790997704
curgen: 300 fitness: 3.2582922790997704
curgen: 350 fitness: 3.258446768420264
curgen: 400 fitness: 3.258448993017757
curgen: 450 fitness: 3.258458517243126
curgen: 500 fitness: 3.2584768481384003
CoordinateCreature{Vector{Float64}}([0.22209205985370242, 0.22263683954776498, 0.22275234076310013, -0.2223542788948407, -0.22256992662685457, -0.22256481182134633, -0.22215353538436697, 0.22253767458323587, 0.22260337247841958, 0.22259412128199882, -0.22221130222484278, 0.22250152777894502, 0.22253700024806664, 0.22253292070718247, -0.22232767792211505], -3.2584768481384003) [0.22209205985370242, 0.22263683954776498, 0.22275234076310013, -0.2223542788948407, -0.22256992662685457, -0.22256481182134633, -0.22215353538436697, 0.22253767458323587, 0.22260337247841958, 0.22259412128199882, -0.22221130222484278, 0.22250152777894502, 0.22253700024806664, 0.22253292070718247, -0.22232767792211505] -3.2584768481384003
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0036032719607135277
curgen: 100 fitness: -0.002948681676002707
curgen: 150 fitness: -0.0029217130621645993
curgen: 200 fitness: -0.0029217130621645993
curgen: 250 fitness: -0.0023116995107841376
curgen: 300 fitness: -0.00230123816893979
curgen: 350 fitness: -0.00230123816893979
curgen: 400 fitness: -0.0012680548985031237
curgen: 450 fitness: -0.0012680548985031237
curgen: 500 fitness: -0.0008302466960117272
CoordinateCreature{Vector{Float64}}([-0.0008670865420287131, -0.000490240010970822, -0.00031722918996952864, 0.00017585691920465993, 4.4236934211920836e-5, 0.00020491702897558906, 0.00016196905298069484, -0.0005282612104599175, 2.683409517715337e-5, 1.2458667227937745e-6, -0.0007840853480385731, -0.00017321665788834918, 0.0011925133535279926, 0.0007538853682396466, 0.0002756201928312283], 0.0008302466960117272) [-0.0008670865420287131, -0.000490240010970822, -0.00031722918996952864, 0.00017585691920465993, 4.4236934211920836e-5, 0.00020491702897558906, 0.00016196905298069484, -0.0005282612104599175, 2.683409517715337e-5, 1.2458667227937745e-6, -0.0007840853480385731, -0.00017321665788834918, 0.0011925133535279926, 0.0007538853682396466, 0.0002756201928312283] 0.0008302466960117272
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
