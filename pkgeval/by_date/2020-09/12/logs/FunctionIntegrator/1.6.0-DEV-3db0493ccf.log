Julia Version 1.6.0-DEV.893
Commit 3db0493ccf (2020-09-11 16:08 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed SpecialFunctions ───────────── v0.10.3
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_trkKuP/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_trkKuP/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  0.825283 seconds (1.37 M allocations: 72.913 MiB, 1.35% gc time)
Running: chebyshev_quadrature with k=1
  1.616674 seconds (2.16 M allocations: 123.838 MiB, 4.35% gc time)
Running: chebyshev_quadrature with k=2
  0.235773 seconds (410.94 k allocations: 23.581 MiB, 6.46% gc time)
Running: chebyshev_quadrature with k=3
  0.304027 seconds (524.65 k allocations: 28.749 MiB)
Running: chebyshev_quadrature with k=4
  0.368448 seconds (469.05 k allocations: 25.372 MiB, 18.15% gc time)
Running: jacobi_quadrature with α=β=1
 35.580993 seconds (37.27 M allocations: 3.043 GiB, 9.03% gc time)
Running: laguerre_quadrature with k=1
  2.821796 seconds (3.20 M allocations: 177.818 MiB, 5.52% gc time)
Running: legendre_quadrature
  0.207012 seconds (207.12 k allocations: 11.864 MiB)
Running: lobatto_quadrature
  0.384776 seconds (331.88 k allocations: 19.957 MiB, 10.84% gc time)
Running: radau_quadrature
  0.245030 seconds (314.63 k allocations: 18.986 MiB)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 80.237421 seconds (100.02 M allocations: 1.491 GiB, 0.39% gc time)
Running: rectangle_rule_midpoint.
  0.147664 seconds (172.85 k allocations: 3.842 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 79.871263 seconds (100.02 M allocations: 1.491 GiB, 0.38% gc time)
Running: rombergs_method
  0.584368 seconds (726.27 k allocations: 41.883 MiB, 7.58% gc time)
Running: simpsons_rule
  0.037866 seconds (46.21 k allocations: 2.061 MiB)
Running: simpsons38_rule
  0.087456 seconds (109.95 k allocations: 5.808 MiB)
Running: trapezoidal_rule
  0.312700 seconds (1.51 M allocations: 25.708 MiB, 5.40% gc time)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.064255 seconds (31.52 k allocations: 1.885 MiB)
Running: chebyshev_quadrature with k=1
  0.335128 seconds (273.91 k allocations: 14.196 MiB)
Running: chebyshev_quadrature with k=2
  0.117437 seconds (93.97 k allocations: 2.681 MiB)
Running: chebyshev_quadrature with k=3
  0.137626 seconds (82.22 k allocations: 2.482 MiB)
Running: chebyshev_quadrature with k=4
  0.158305 seconds (64.83 k allocations: 2.128 MiB)
Running: jacobi_quadrature with α=β=1
  2.566722 seconds (500.59 k allocations: 161.645 MiB, 19.50% gc time)
Running: legendre_quadrature
  0.163662 seconds (41.79 k allocations: 2.406 MiB)
Running: lobatto_quadrature
  0.021997 seconds (16.15 k allocations: 1023.544 KiB)
Running: radau_quadrature
  0.021816 seconds (16.13 k allocations: 1023.247 KiB)
Running: rectangle_rule_left
 27.046057 seconds (471.41 M allocations: 7.025 GiB, 3.01% gc time)
Running: rectangle_rule_midpoint
  0.000034 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 27.298116 seconds (476.96 M allocations: 7.107 GiB, 2.33% gc time)
Running: rombergs_method
  0.372622 seconds (328.38 k allocations: 18.602 MiB)
Running: simpsons_rule
  0.000040 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.103797 seconds (19.27 k allocations: 1.161 MiB)
Running: trapezoidal_rule
  0.063273 seconds (17.75 k allocations: 1.067 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.031166 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.141271 seconds (2.40 k allocations: 113.328 KiB)
Running: chebyshev_quadrature with k=2
  0.110169 seconds (2.65 k allocations: 121.344 KiB)
Running: chebyshev_quadrature with k=3
  0.116168 seconds (3.08 k allocations: 133.547 KiB)
Running: chebyshev_quadrature with k=4
  0.111464 seconds (3.08 k allocations: 133.609 KiB)
Running: jacobi_quadrature with α=β=1
  0.311285 seconds (363.41 k allocations: 18.939 MiB, 7.35% gc time)
Running: legendre_quadrature
  0.069893 seconds (1.24 k allocations: 63.531 KiB)
Running: lobatto_quadrature
  0.000103 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000045 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000618 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000444 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000610 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.075591 seconds (1.01 k allocations: 54.094 KiB)
Running: simpsons_rule
  0.000057 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.025762 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.024492 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.061295 seconds (73.32 k allocations: 4.254 MiB)
Running: chebyshev_quadrature with k=1
  0.220878 seconds (231.21 k allocations: 12.989 MiB)
Running: chebyshev_quadrature with k=2
  0.259509 seconds (284.05 k allocations: 15.907 MiB, 6.83% gc time)
Running: chebyshev_quadrature with k=3
  0.195665 seconds (263.44 k allocations: 14.314 MiB)
Running: chebyshev_quadrature with k=4
  0.197110 seconds (263.46 k allocations: 14.227 MiB)
Running: jacobi_quadrature with α=β=1
  2.230621 seconds (447.44 k allocations: 163.208 MiB, 1.96% gc time)
Running: legendre_quadrature
  0.148217 seconds (186.06 k allocations: 10.714 MiB)
Running: lobatto_quadrature
  0.190046 seconds (197.00 k allocations: 11.406 MiB, 8.35% gc time)
Running: radau_quadrature
  0.181070 seconds (196.99 k allocations: 11.408 MiB)
Running: rectangle_rule_left
  1.136901 seconds (19.09 k allocations: 1.158 MiB)
Running: rectangle_rule_midpoint
  0.064553 seconds (25.05 k allocations: 1.571 MiB)
Running: rectangle_rule_right
  1.147728 seconds (17.64 k allocations: 1.073 MiB)
Running: rombergs_method
  0.124230 seconds (134.40 k allocations: 7.752 MiB)
Running: simpsons_rule
  0.029774 seconds (27.97 k allocations: 1.747 MiB)
Running: simpsons38_rule
  0.035592 seconds (43.06 k allocations: 2.705 MiB)
Running: trapezoidal_rule
  0.027577 seconds (44.46 k allocations: 1.786 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.038442 seconds (100.03 k allocations: 2.999 MiB)
Running: chebyshev_quadrature with k=1
  0.221039 seconds (237.80 k allocations: 13.033 MiB, 7.62% gc time)
Running: chebyshev_quadrature with k=2
  0.204851 seconds (291.08 k allocations: 15.886 MiB)
Running: chebyshev_quadrature with k=3
  0.196407 seconds (270.17 k allocations: 14.317 MiB)
Running: chebyshev_quadrature with k=4
  0.219379 seconds (270.19 k allocations: 14.323 MiB, 7.89% gc time)
Running: hermite_quadrature with k=2
 13.953636 seconds (20.95 M allocations: 1.088 GiB, 9.29% gc time)
Running: jacobi_quadrature with α=β=1
  0.468920 seconds (456.66 k allocations: 49.396 MiB, 14.13% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.213664 seconds (277.29 k allocations: 15.267 MiB)
Running: legendre_quadrature
  0.355606 seconds (192.63 k allocations: 11.044 MiB, 55.33% gc time)
Running: lobatto_quadrature
  0.224770 seconds (217.82 k allocations: 37.177 MiB)
Running: radau_quadrature
  0.284299 seconds (214.41 k allocations: 29.841 MiB, 5.67% gc time)
Running: rectangle_rule_left
  0.025687 seconds (22.05 k allocations: 1.306 MiB)
Running: rectangle_rule_midpoint
  0.028138 seconds (26.89 k allocations: 1.660 MiB)
Running: rectangle_rule_right
  0.025665 seconds (18.79 k allocations: 1.129 MiB)
Running: rombergs_method
  0.112552 seconds (136.88 k allocations: 7.790 MiB)
Running: simpsons_rule
  0.048716 seconds (39.87 k allocations: 2.080 MiB)
Running: simpsons38_rule
  0.033759 seconds (58.09 k allocations: 3.092 MiB)
Running: trapezoidal_rule
  0.030187 seconds (30.55 k allocations: 1.714 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.049333 seconds (60.38 k allocations: 2.298 MiB)
Running: chebyshev_quadrature with k=1
  0.230572 seconds (233.32 k allocations: 12.823 MiB, 6.95% gc time)
Running: chebyshev_quadrature with k=2
  0.226160 seconds (286.28 k allocations: 15.646 MiB)
Running: chebyshev_quadrature with k=3
  0.209369 seconds (265.58 k allocations: 14.110 MiB)
Running: chebyshev_quadrature with k=4
  0.234272 seconds (265.60 k allocations: 14.111 MiB, 7.99% gc time)
Running: hermite_quadrature with k=2
  0.168533 seconds (171.23 k allocations: 9.794 MiB)
Running: jacobi_quadrature with α=β=1
  7.767064 seconds (449.89 k allocations: 1.175 GiB, 14.41% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.209901 seconds (272.56 k allocations: 15.081 MiB)
Running: legendre_quadrature
  0.159930 seconds (188.18 k allocations: 10.822 MiB)
Running: lobatto_quadrature
  0.216862 seconds (208.57 k allocations: 22.911 MiB, 6.66% gc time)
Running: radau_quadrature
  0.182643 seconds (207.72 k allocations: 20.844 MiB)
Running: rectangle_rule_left
  0.026841 seconds (19.81 k allocations: 1.200 MiB)
Running: rectangle_rule_midpoint
  0.025435 seconds (25.76 k allocations: 1.607 MiB)
Running: rectangle_rule_right
  0.024485 seconds (17.63 k allocations: 1.073 MiB)
Running: rombergs_method
  0.105064 seconds (132.69 k allocations: 7.610 MiB)
Running: simpsons_rule
  0.033197 seconds (32.36 k allocations: 1.871 MiB)
Running: simpsons38_rule
  0.090145 seconds (48.87 k allocations: 2.851 MiB, 17.74% gc time)
Running: trapezoidal_rule
  0.024409 seconds (25.43 k allocations: 1.550 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.037132 seconds (31.33 k allocations: 1.893 MiB)
Running: chebyshev_quadrature with k=1
  0.149849 seconds (231.70 k allocations: 13.045 MiB)
Running: chebyshev_quadrature with k=2
  0.225893 seconds (284.56 k allocations: 15.989 MiB)
Running: chebyshev_quadrature with k=3
  0.229457 seconds (263.95 k allocations: 14.324 MiB, 7.82% gc time)
Running: chebyshev_quadrature with k=4
  0.209497 seconds (263.97 k allocations: 14.162 MiB)
Running: jacobi_quadrature with α=β=1
  1.412074 seconds (447.99 k allocations: 194.220 MiB, 8.87% gc time)
Running: legendre_quadrature
  0.169871 seconds (186.56 k allocations: 10.808 MiB, 8.08% gc time)
Running: lobatto_quadrature
  0.192466 seconds (197.50 k allocations: 11.499 MiB)
Running: radau_quadrature
  0.168323 seconds (197.50 k allocations: 11.446 MiB)
Running: rectangle_rule_left
  0.304149 seconds (19.61 k allocations: 1.184 MiB)
Running: rectangle_rule_midpoint
  0.030127 seconds (25.40 k allocations: 1.589 MiB)
Running: rectangle_rule_right
  0.136701 seconds (17.99 k allocations: 1.092 MiB)
Running: rombergs_method
  0.145401 seconds (145.33 k allocations: 8.496 MiB)
Running: simpsons_rule
  0.033608 seconds (28.67 k allocations: 1.776 MiB)
Running: simpsons38_rule
  0.059970 seconds (43.78 k allocations: 2.735 MiB, 37.13% gc time)
Running: trapezoidal_rule
  0.027368 seconds (45.40 k allocations: 1.820 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.033746 seconds (32.09 k allocations: 1.844 MiB)
Running: chebyshev_quadrature with k=1
  0.186401 seconds (232.29 k allocations: 12.990 MiB)
Running: chebyshev_quadrature with k=2
  0.214402 seconds (285.19 k allocations: 15.915 MiB)
Running: chebyshev_quadrature with k=3
  0.225246 seconds (264.53 k allocations: 14.247 MiB, 7.96% gc time)
Running: chebyshev_quadrature with k=4
  0.195254 seconds (264.55 k allocations: 14.326 MiB)
Running: jacobi_quadrature with α=β=1
  1.981568 seconds (448.69 k allocations: 148.905 MiB, 5.16% gc time)
Running: legendre_quadrature
  0.170553 seconds (187.15 k allocations: 10.856 MiB, 9.22% gc time)
Running: lobatto_quadrature
  0.175707 seconds (198.10 k allocations: 11.448 MiB)
Running: radau_quadrature
  0.182102 seconds (198.09 k allocations: 11.452 MiB)
Running: rectangle_rule_left
  1.193448 seconds (19.86 k allocations: 1.197 MiB)
Running: rectangle_rule_midpoint
  0.025385 seconds (25.40 k allocations: 1.589 MiB)
Running: rectangle_rule_right
  1.261176 seconds (17.95 k allocations: 1.089 MiB)
Running: rombergs_method
  0.131311 seconds (135.63 k allocations: 7.808 MiB)
Running: simpsons_rule
  0.043521 seconds (29.37 k allocations: 1.802 MiB)
Running: simpsons38_rule
  0.037754 seconds (44.48 k allocations: 2.761 MiB)
Running: trapezoidal_rule
  0.051218 seconds (57.63 k allocations: 2.020 MiB, 38.46% gc time)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.161397 seconds (147.30 k allocations: 8.778 MiB)
Running: chebyshev_quadrature with k=1
  0.181379 seconds (70.10 k allocations: 2.210 MiB, 11.10% gc time)
Running: chebyshev_quadrature with k=2
  0.162109 seconds (105.25 k allocations: 2.873 MiB)
Running: chebyshev_quadrature with k=3
  0.161641 seconds (92.74 k allocations: 2.660 MiB)
Running: chebyshev_quadrature with k=4
  0.160295 seconds (72.27 k allocations: 2.256 MiB)
Running: jacobi_quadrature with α=β=1
  1.712582 seconds (475.99 k allocations: 167.534 MiB, 4.36% gc time)
Running: legendre_quadrature
  0.112047 seconds (18.89 k allocations: 1.097 MiB)
Running: lobatto_quadrature
  0.000086 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000038 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 44.845327 seconds (590.00 M allocations: 8.792 GiB, 2.37% gc time)
Running: rectangle_rule_midpoint
  0.000035 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 42.654304 seconds (592.75 M allocations: 8.833 GiB, 2.38% gc time)
Running: rombergs_method
  0.130204 seconds (20.67 k allocations: 1.171 MiB)
Running: simpsons_rule
  0.000048 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.029460 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.022681 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 31.824520 seconds (629.33 M allocations: 9.387 GiB, 3.74% gc time)
Running: chebyshev_quadrature with k=1
  0.516740 seconds (420.90 k allocations: 23.211 MiB)
Running: chebyshev_quadrature with k=2
 14.206468 seconds (475.81 k allocations: 4.041 GiB, 4.26% gc time)
Running: chebyshev_quadrature with k=3
  6.292122 seconds (277.89 k allocations: 1.643 GiB, 4.50% gc time)
Running: chebyshev_quadrature with k=4
  8.716415 seconds (277.91 k allocations: 2.261 GiB, 2.59% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 57.212606 seconds (485.48 k allocations: 13.254 GiB, 3.36% gc time)
Running: legendre_quadrature.
  6.318860 seconds (224.34 k allocations: 1.976 GiB, 1.96% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 52.745944 seconds (8.23 M allocations: 13.383 GiB, 4.92% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 50.450766 seconds (7.23 M allocations: 13.369 GiB, 3.47% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.144635 seconds (22.55 k allocations: 1.359 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.332722 seconds (30.88 k allocations: 1.901 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.014437 seconds (22.76 k allocations: 1.369 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.215495 seconds (440.31 k allocations: 152.748 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 40.402004 seconds (600.04 M allocations: 8.943 GiB, 8.38% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 35.665969 seconds (600.05 M allocations: 8.943 GiB, 8.76% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 36.792993 seconds (600.03 M allocations: 8.943 GiB, 8.64% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.061564 seconds (180.97 k allocations: 4.427 MiB)
Running: chebyshev_quadrature with k=1
  0.209013 seconds (248.27 k allocations: 13.490 MiB)
Running: chebyshev_quadrature with k=2
  0.205460 seconds (272.84 k allocations: 14.578 MiB)
Running: chebyshev_quadrature with k=3
  0.207236 seconds (248.77 k allocations: 12.811 MiB)
Running: chebyshev_quadrature with k=4
  0.236608 seconds (248.79 k allocations: 12.804 MiB)
Running: jacobi_quadrature with α=β=1
  0.378150 seconds (388.81 k allocations: 34.930 MiB)
Running: laguerre_quadrature with k=2
  0.178686 seconds (181.10 k allocations: 10.517 MiB)
Running: legendre_quadrature
  0.123887 seconds (146.05 k allocations: 8.057 MiB)
Running: lobatto_quadrature
  0.036986 seconds (10.69 k allocations: 15.100 MiB)
Running: radau_quadrature
  0.032139 seconds (9.47 k allocations: 13.173 MiB)
Running: rectangle_rule_left
  0.057381 seconds (19.12 k allocations: 1.132 MiB)
Running: rectangle_rule_midpoint
  0.046570 seconds (25.86 k allocations: 1.591 MiB)
Running: rectangle_rule_right
  0.051293 seconds (17.73 k allocations: 1.059 MiB)
Running: rombergs_method
  0.230880 seconds (171.91 k allocations: 9.811 MiB)
Running: simpsons_rule
  0.001970 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.052429 seconds (79.55 k allocations: 3.411 MiB)
Running: trapezoidal_rule
  0.242472 seconds (2.39 M allocations: 37.705 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.002352 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.149602 seconds (2.40 k allocations: 1.688 MiB)
Running: chebyshev_quadrature with k=2
  0.149018 seconds (2.65 k allocations: 2.352 MiB)
Running: chebyshev_quadrature with k=3
  0.148357 seconds (3.08 k allocations: 2.052 MiB)
Running: chebyshev_quadrature with k=4
  0.139914 seconds (3.08 k allocations: 1.493 MiB)
Running: jacobi_quadrature with α=β=1
  7.466200 seconds (365.81 k allocations: 904.756 MiB, 5.16% gc time)
Running: legendre_quadrature
  0.066086 seconds (1.23 k allocations: 65.688 KiB)
Running: lobatto_quadrature
  0.000171 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000135 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  4.203278 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000519 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  3.880436 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.074115 seconds (959 allocations: 54.031 KiB)
Running: simpsons_rule
  0.000046 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000054 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000836 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.001289 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.155508 seconds (2.48 k allocations: 576.484 KiB)
Running: chebyshev_quadrature with k=2
  0.137266 seconds (2.73 k allocations: 777.266 KiB)
Running: chebyshev_quadrature with k=3
  0.147473 seconds (3.15 k allocations: 685.500 KiB)
Running: chebyshev_quadrature with k=4
  0.133809 seconds (3.16 k allocations: 516.062 KiB)
Running: jacobi_quadrature with α=β=1
  2.757808 seconds (372.37 k allocations: 252.867 MiB)
Running: legendre_quadrature
  0.077691 seconds (1.28 k allocations: 65.359 KiB)
Running: lobatto_quadrature
  0.000094 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000049 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 11.062910 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001401 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 10.603886 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.075602 seconds (1.18 k allocations: 62.547 KiB)
Running: simpsons_rule
  0.000083 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000080 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001746 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
