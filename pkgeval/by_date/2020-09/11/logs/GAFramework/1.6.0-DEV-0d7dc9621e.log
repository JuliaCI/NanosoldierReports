Julia Version 1.6.0-DEV.888
Commit 0d7dc9621e (2020-09-10 16:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_KGjulH/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_KGjulH/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21718361816208073
curgen: 20 fitness: 0.21723218164677194
curgen: 30 fitness: 0.21723218164677194
curgen: 40 fitness: 0.21723218164677194
curgen: 50 fitness: 0.21723218164677194
CoordinateCreature{Vector{Float64}}([0.22272900230911608], -0.21723218164677194) 0.22272900230911608 -0.21723218164677194
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2578788964885597
curgen: 100 fitness: 3.2579651045691342
curgen: 150 fitness: 3.2579768896951284
curgen: 200 fitness: 3.258402480617879
curgen: 250 fitness: 3.25840875410548
curgen: 300 fitness: 3.258423797236888
curgen: 350 fitness: 3.258433507393338
curgen: 400 fitness: 3.2584377952324206
curgen: 450 fitness: 3.2584434766583232
curgen: 500 fitness: 3.258450125567674
CoordinateCreature{Vector{Float64}}([-0.22288173603744268, 0.22244652251036232, 0.22219647593702263, 0.22249442203966877, 0.22250899607023678, -0.22248139117074583, 0.2226394168697927, -0.2230927203136996, -0.22253014040820274, 0.22195834436343775, 0.22269857514724764, 0.22225590182566146, 0.22234275868741724, 0.22288321902560382, -0.2223111500722334], -3.258450125567674) [-0.22288173603744268, 0.22244652251036232, 0.22219647593702263, 0.22249442203966877, 0.22250899607023678, -0.22248139117074583, 0.2226394168697927, -0.2230927203136996, -0.22253014040820274, 0.22195834436343775, 0.22269857514724764, 0.22225590182566146, 0.22234275868741724, 0.22288321902560382, -0.2223111500722334] -3.258450125567674
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0009247554561682136
curgen: 100 fitness: -0.0008941751230508999
curgen: 150 fitness: -0.0008941751230508999
curgen: 200 fitness: -0.0006873000242535454
curgen: 250 fitness: -0.0006873000242535454
curgen: 300 fitness: -0.0006873000242535454
curgen: 350 fitness: -0.0006873000242535454
curgen: 400 fitness: -0.0006073110437228024
curgen: 450 fitness: -0.0005444712267603791
curgen: 500 fitness: -0.0004447262576263711
CoordinateCreature{Vector{Float64}}([0.00027627909391215793, 3.0202297875716443e-5, -9.326953798014049e-5, 0.0004832996598866173, -0.0005348900679639555, -6.127872000454004e-5, 3.312631273802349e-5, 0.0004599162705571302, 0.00014412842600154322, 0.00027937246313319326, -0.0004519698479644469, -0.0009800949701797071, 0.00023056430834073903, -0.00028599926406437475, 0.00014496133042500733], 0.0004447262576263711) [0.00027627909391215793, 3.0202297875716443e-5, -9.326953798014049e-5, 0.0004832996598866173, -0.0005348900679639555, -6.127872000454004e-5, 3.312631273802349e-5, 0.0004599162705571302, 0.00014412842600154322, 0.00027937246313319326, -0.0004519698479644469, -0.0009800949701797071, 0.00023056430834073903, -0.00028599926406437475, 0.00014496133042500733] 0.0004447262576263711
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
