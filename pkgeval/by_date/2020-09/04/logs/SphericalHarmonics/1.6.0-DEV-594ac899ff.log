Julia Version 1.6.0-DEV.842
Commit 594ac899ff (2020-09-04 17:00 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed SphericalHarmonicArrays ─ v0.4.1
  Installed SphericalHarmonics ────── v0.1.0
  Installed OffsetArrays ──────────── v1.1.3
  Installed SphericalHarmonicModes ── v0.4.6
Updating `~/.julia/environments/v1.6/Project.toml`
  [c489a379] + SphericalHarmonics v0.1.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [6fe1bfb0] + OffsetArrays v1.1.3
  [9dd28c12] + SphericalHarmonicArrays v0.4.1
  [0e9554e2] + SphericalHarmonicModes v0.4.6
  [c489a379] + SphericalHarmonics v0.1.0
    Testing SphericalHarmonics
Status `/tmp/jl_PQc6iV/Project.toml`
  [9dd28c12] SphericalHarmonicArrays v0.4.1
  [0e9554e2] SphericalHarmonicModes v0.4.6
  [c489a379] SphericalHarmonics v0.1.0
  [8dfed614] Test
Status `/tmp/jl_PQc6iV/Manifest.toml`
  [6fe1bfb0] OffsetArrays v1.1.3
  [9dd28c12] SphericalHarmonicArrays v0.4.1
  [0e9554e2] SphericalHarmonicModes v0.4.6
  [c489a379] SphericalHarmonics v0.1.0
  [2a0f44e3] Base64
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [56ddb016] Logging
  [d6f4376e] Markdown
  [9a3f8284] Random
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
    Testing Running tests...
Skipping Base.active_repl
Skipping Base.active_repl_backend
Skipping Base.active_repl
Skipping Base.active_repl_backend
Test Failed at /home/pkgeval/.julia/packages/SphericalHarmonics/ovIRf/test/runtests.jl:7
  Expression: isempty(Test.detect_ambiguities(Base, Core, SphericalHarmonics))
   Evaluated: isempty(Tuple{Method, Method}[(hcat(A::Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T, Vector{T}}, LinearAlgebra.Transpose{T, Vector{T}}, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T)}...) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1122, hcat(X::Number...) in Base at abstractarray.jl:1428), (to_indices(s::SphericalHarmonicArrays.SHArray, inds::Tuple{Vararg{Integer, N} where N}) in SphericalHarmonicArrays at /home/pkgeval/.julia/packages/SphericalHarmonicArrays/doLMg/src/SphericalHarmonicArrays.jl:460, to_indices(A, I::Tuple{Vararg{Int64, N} where N}) in Base at indices.jl:326), (vcat(Xin::Union{Vector{T} where T, Matrix{T} where T, LinearAlgebra.AbstractTriangular{T, A} where A<:Union{LinearAlgebra.Adjoint{var"#s851", var"#s850"} where var"#s850"<:SparseArrays.SparseVector where var"#s851", LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{var"#s849", var"#s848"} where var"#s848"<:SparseArrays.SparseVector where var"#s849", LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector} where T, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Adjoint{var"#s851", var"#s850"} where var"#s850"<:(Vector{T} where T) where var"#s851", LinearAlgebra.Adjoint{var"#s851", var"#s850"} where var"#s850"<:SparseArrays.SparseVector where var"#s851", LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.Hermitian{T, A} where A<:Union{LinearAlgebra.Adjoint{var"#s851", var"#s850"} where var"#s850"<:SparseArrays.SparseVector where var"#s851", LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{var"#s849", var"#s848"} where var"#s848"<:SparseArrays.SparseVector where var"#s849", LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector} where T, LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T) where T, LinearAlgebra.SymTridiagonal, LinearAlgebra.Symmetric{T, A} where A<:Union{LinearAlgebra.Adjoint{var"#s851", var"#s850"} where var"#s850"<:SparseArrays.SparseVector where var"#s851", LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{var"#s849", var"#s848"} where var"#s848"<:SparseArrays.SparseVector where var"#s849", LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector} where T, LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Transpose{var"#s849", var"#s848"} where var"#s848"<:(Vector{T} where T) where var"#s849", LinearAlgebra.Transpose{var"#s849", var"#s848"} where var"#s848"<:SparseArrays.SparseVector where var"#s849", LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector}...) in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1091, vcat(rs::AbstractRange{T}...) where T in Base at range.jl:976), (convert(::Type{T}, x::T) where T in Base at essentials.jl:205, convert(::Type{T}, x) where T>:Union{Missing, Nothing} in Base at missing.jl:70), (hcat(A::Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T, Vector{T}}, LinearAlgebra.Transpose{T, Vector{T}}, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T)}...) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1122, hcat(A::Union{BitMatrix, BitVector}...) in Base at bitarray.jl:1786), (hcat(A::Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T, Vector{T}}, LinearAlgebra.Transpose{T, Vector{T}}, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T)}...) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1122, hcat(B::BitVector...) in Base at bitarray.jl:1759), (to_indices(s::SphericalHarmonicArrays.SHArray, inds::Tuple{Any}) in SphericalHarmonicArrays at /home/pkgeval/.julia/packages/SphericalHarmonicArrays/doLMg/src/SphericalHarmonicArrays.jl:457, to_indices(A, I::Tuple{Vararg{Int64, N} where N}) in Base at indices.jl:326), (convert(::Type{T}, x) where T>:Union{Missing, Nothing} in Base at missing.jl:70, convert(::Type{T}, x::T) where T>:Nothing in Base at some.jl:35), (vcat(A::Union{Vector{T} where T, Matrix{T} where T, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Adjoint{var"#s851", var"#s850"} where var"#s850"<:(Vector{T} where T) where var"#s851", LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Transpose{var"#s849", var"#s848"} where var"#s848"<:(Vector{T} where T) where var"#s849"}...) in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1115, vcat(rs::AbstractRange{T}...) where T in Base at range.jl:976), (vcat(A::Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T, Vector{T}}, LinearAlgebra.Transpose{T, Vector{T}}, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T)}...) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1121, vcat(V::BitVector...) in Base at bitarray.jl:1772), (convert(::Type{T}, x::T) where T in Base at essentials.jl:205, convert(::Type{T}, x) where T>:Missing in Base at missing.jl:69), (vcat(A::Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T, Vector{T}}, LinearAlgebra.Transpose{T, Vector{T}}, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T)}...) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1121, vcat(A::BitMatrix...) in Base at bitarray.jl:1811), (to_indices(s::SphericalHarmonicArrays.SHArray, inds::Tuple{Vararg{Union{Integer, CartesianIndex}, N} where N}) in SphericalHarmonicArrays at /home/pkgeval/.julia/packages/SphericalHarmonicArrays/doLMg/src/SphericalHarmonicArrays.jl:462, to_indices(A, I::Tuple{Vararg{Int64, N} where N}) in Base at indices.jl:326), (hvcat(rows::Tuple{Vararg{Int64, N} where N}, xs::Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T, Vector{T}}, LinearAlgebra.Transpose{T, Vector{T}}, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T)}...) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1123, hvcat(rows::Tuple{Vararg{Int64, N} where N}, xs::Number...) in Base at abstractarray.jl:1875), (convert(::Type{T}, x::T) where T>:Missing in Base at missing.jl:67, convert(::Type{T}, x) where T>:Union{Missing, Nothing} in Base at missing.jl:70), (vcat(A::Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T, Vector{T}}, LinearAlgebra.Transpose{T, Vector{T}}, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T)}...) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1121, vcat(rs::AbstractRange{T}...) where T in Base at range.jl:976), (convert(::Type{T}, x::T) where T in Base at essentials.jl:205, convert(::Type{T}, x) where T>:Nothing in Base at some.jl:36), (to_indices(s::SphericalHarmonicArrays.SHArray, inds::Tuple) in SphericalHarmonicArrays at /home/pkgeval/.julia/packages/SphericalHarmonicArrays/doLMg/src/SphericalHarmonicArrays.jl:451, to_indices(A, I::Tuple{Vararg{Int64, N} where N}) in Base at indices.jl:326), (vcat(A::Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T, Vector{T}}, LinearAlgebra.Transpose{T, Vector{T}}, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T)}...) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1121, vcat(X::Number...) in Base at abstractarray.jl:1427)])
ERROR: LoadError: There was an error during testing
in expression starting at /home/pkgeval/.julia/packages/SphericalHarmonics/ovIRf/test/runtests.jl:7
ERROR: Package SphericalHarmonics errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String, N} where N)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1580
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:328
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:315
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:19
