Julia Version 1.6.0-DEV.842
Commit 594ac899ff (2020-09-04 17:00 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_hANeud/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_hANeud/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21722845711340488
curgen: 20 fitness: 0.21722845711340488
curgen: 30 fitness: 0.2172312913962018
curgen: 40 fitness: 0.21723231610546145
curgen: 50 fitness: 0.21723231610546145
CoordinateCreature{Vector{Float64}}([-0.222720388161408], -0.21723231610546145) -0.222720388161408 -0.21723231610546145
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2577638200780403
curgen: 100 fitness: 3.2580696062452907
curgen: 150 fitness: 3.258071402725181
curgen: 200 fitness: 3.2582881294218318
curgen: 250 fitness: 3.2583161427055045
curgen: 300 fitness: 3.2583263428380347
curgen: 350 fitness: 3.258388885470262
curgen: 400 fitness: 3.258392127587597
curgen: 450 fitness: 3.2584604339782715
curgen: 500 fitness: 3.2584637870251494
CoordinateCreature{Vector{Float64}}([-0.22244219079606978, 0.2227989150107275, -0.2229832956809845, -0.2226040356787763, 0.22264675734236752, 0.22245970445082508, -0.22258938601159084, 0.2226010619455719, -0.22278963794147727, -0.2225409660405716, 0.22231395079264488, 0.22236631118383982, 0.2231049195932222, 0.22292004291723516, -0.22273914802527708], -3.2584637870251494) [-0.22244219079606978, 0.2227989150107275, -0.2229832956809845, -0.2226040356787763, 0.22264675734236752, 0.22245970445082508, -0.22258938601159084, 0.2226010619455719, -0.22278963794147727, -0.2225409660405716, 0.22231395079264488, 0.22236631118383982, 0.2231049195932222, 0.22292004291723516, -0.22273914802527708] -3.2584637870251494
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0025689055574389386
curgen: 100 fitness: -0.0025111719337473914
curgen: 150 fitness: -0.0025111719337473914
curgen: 200 fitness: -0.002318694028531354
curgen: 250 fitness: -0.002209406082414489
curgen: 300 fitness: -0.002209406082414489
curgen: 350 fitness: -0.002209406082414489
curgen: 400 fitness: -0.0016297262560840409
curgen: 450 fitness: -0.001486860023447889
curgen: 500 fitness: -0.001486860023447889
CoordinateCreature{Vector{Float64}}([-1.6495911704305066e-5, -0.001050959947121088, 0.0009543977208714413, -0.000424359669893527, 0.00028089454274500965, -0.00016745637760821322, 1.301096687318583e-5, -0.00023551729032868294, 2.8088587229268283e-5, 0.00024177676053902756, 5.008573824194767e-5, 0.0002900806724226955, 0.0002614170771527997, -0.002218198925037378, -4.0833025901346965e-5], 0.001486860023447889) [-1.6495911704305066e-5, -0.001050959947121088, 0.0009543977208714413, -0.000424359669893527, 0.00028089454274500965, -0.00016745637760821322, 1.301096687318583e-5, -0.00023551729032868294, 2.8088587229268283e-5, 0.00024177676053902756, 5.008573824194767e-5, 0.0002900806724226955, 0.0002614170771527997, -0.002218198925037378, -4.0833025901346965e-5] 0.001486860023447889
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
