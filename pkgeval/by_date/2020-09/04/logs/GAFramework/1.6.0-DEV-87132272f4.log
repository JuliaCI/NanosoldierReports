Julia Version 1.6.0-DEV.830
Commit 87132272f4 (2020-09-03 17:25 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_j12Zyd/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_j12Zyd/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723289071899002
curgen: 20 fitness: 0.21723289071899002
curgen: 30 fitness: 0.21723289071899002
curgen: 40 fitness: 0.21723289071899002
curgen: 50 fitness: 0.21723289071899002
CoordinateCreature{Vector{Float64}}([0.2224191522889698], -0.21723289071899002) 0.2224191522889698 -0.21723289071899002
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.258062939827352
curgen: 100 fitness: 3.2581435404022008
curgen: 150 fitness: 3.258161611593958
curgen: 200 fitness: 3.2584036519020003
curgen: 250 fitness: 3.2584036519020003
curgen: 300 fitness: 3.258420184836783
curgen: 350 fitness: 3.2584619025615185
curgen: 400 fitness: 3.2584619025615185
curgen: 450 fitness: 3.2584619025615185
curgen: 500 fitness: 3.258474154946435
CoordinateCreature{Vector{Float64}}([-0.22288819232674278, -0.22213100032664077, -0.22287333692231315, -0.22248650835941852, 0.22255340525912468, -0.2226527903540279, -0.22238685115461468, -0.2228128208338066, -0.222404406100652, -0.2225325204547289, 0.22233953064794412, -0.22281537591997955, -0.22266407862672455, -0.2224052809440334, -0.22245993370639963], -3.258474154946435) [-0.22288819232674278, -0.22213100032664077, -0.22287333692231315, -0.22248650835941852, 0.22255340525912468, -0.2226527903540279, -0.22238685115461468, -0.2228128208338066, -0.222404406100652, -0.2225325204547289, 0.22233953064794412, -0.22281537591997955, -0.22266407862672455, -0.2224052809440334, -0.22245993370639963] -3.258474154946435
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.010368000295670754
curgen: 100 fitness: -0.0046357964899357285
curgen: 150 fitness: -0.0046357964899357285
curgen: 200 fitness: -0.004245153136622548
curgen: 250 fitness: -0.0026474314845756908
curgen: 300 fitness: -0.001178307763183284
curgen: 350 fitness: -0.0009059122760106675
curgen: 400 fitness: -0.0009059122760106675
curgen: 450 fitness: -0.0006660041661348259
curgen: 500 fitness: -0.0004101322483336389
CoordinateCreature{Vector{Float64}}([-0.00011528965751579027, -1.770383407576439e-5, -3.746425226526431e-5, 6.676242924527108e-5, -0.00035454170669681206, -0.0005314784040814326, 0.00012868592141008857, -0.0005353483034836483, -0.0006291675047952743, 2.468641940447342e-5, 0.0007086036129237763, 0.00030723988520695933, -0.000546387223321096, -5.364422675023159e-5, -0.00020517629849587288], 0.0004101322483336389) [-0.00011528965751579027, -1.770383407576439e-5, -3.746425226526431e-5, 6.676242924527108e-5, -0.00035454170669681206, -0.0005314784040814326, 0.00012868592141008857, -0.0005353483034836483, -0.0006291675047952743, 2.468641940447342e-5, 0.0007086036129237763, 0.00030723988520695933, -0.000546387223321096, -5.364422675023159e-5, -0.00020517629849587288] 0.0004101322483336389
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
