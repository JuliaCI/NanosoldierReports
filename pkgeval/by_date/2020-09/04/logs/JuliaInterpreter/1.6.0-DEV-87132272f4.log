Julia Version 1.6.0-DEV.830
Commit 87132272f4 (2020-09-03 17:25 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed CodeTracking ───── v1.0.0
  Installed JuliaInterpreter ─ v0.7.26
Updating `~/.julia/environments/v1.6/Project.toml`
  [aa1ae85d] + JuliaInterpreter v0.7.26
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [da1fd8a2] + CodeTracking v1.0.0
  [aa1ae85d] + JuliaInterpreter v0.7.26
  [2a0f44e3] + Base64
  [b77e0a4c] + InteractiveUtils
  [d6f4376e] + Markdown
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [cf7118a7] + UUIDs
    Testing JuliaInterpreter
Status `/tmp/jl_Z9urId/Project.toml`
  [da1fd8a2] CodeTracking v1.0.0
  [a93c6f00] DataFrames v0.21.7
  [aa1ae85d] JuliaInterpreter v0.7.26
  [70df011a] TableReader v0.4.0
  [48a634ad] Tensors v1.4.3
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [37e2e46d] LinearAlgebra
  [a63ad114] Mmap
  [9a3f8284] Random
  [ea8e919c] SHA
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
Status `/tmp/jl_Z9urId/Manifest.toml`
  [324d7699] CategoricalArrays v0.8.2
  [da1fd8a2] CodeTracking v1.0.0
  [ba30903b] CodecXz v0.7.0
  [944b1d66] CodecZlib v0.7.0
  [6b39b394] CodecZstd v0.7.0
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.15.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.21.7
  [864edb3b] DataStructures v0.18.4
  [e2d170a0] DataValueInterfaces v1.0.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [f6369f11] ForwardDiff v0.10.12
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [aa1ae85d] JuliaInterpreter v0.7.26
  [1914dd2f] MacroTools v0.5.5
  [e1d29d7a] Missings v0.4.4
  [77ba4419] NaNMath v0.3.4
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.3.0
  [69de0a69] Parsers v1.0.10
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [fdea26ae] SIMD v3.1.0
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [856f2bd8] StructTypes v1.1.0
  [70df011a] TableReader v0.4.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.5
  [48a634ad] Tensors v1.4.3
  [3bb67fe8] TranscodingStreams v0.9.5
  [ffd25f8a] XZ_jll v5.2.4+3
  [83775a58] Zlib_jll v1.2.11+16
  [3161d3a3] Zstd_jll v1.4.5+1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Skipping Base.active_repl
Skipping Base.active_repl_backend
Skipping Base.active_repl
Skipping Base.active_repl_backend
Test Failed at /home/pkgeval/.julia/packages/JuliaInterpreter/CPmYX/test/runtests.jl:4
  Expression: isempty(detect_ambiguities(JuliaInterpreter, Base, Core))
   Evaluated: isempty(Tuple{Method, Method}[(vcat(A::Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T, Vector{T}}, LinearAlgebra.Transpose{T, Vector{T}}, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T)}...) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1121, vcat(rs::AbstractRange{T}...) where T in Base at range.jl:976), (convert(::Type{T}, x) where T>:Union{Missing, Nothing} in Base at missing.jl:70, convert(::Type{T}, x::T) where T>:Nothing in Base at some.jl:35), (whereis(lineinfo, method::Method) in CodeTracking at /home/pkgeval/.julia/packages/CodeTracking/lvDr0/src/CodeTracking.jl:101, whereis(frame::Frame, pc) in JuliaInterpreter at /home/pkgeval/.julia/packages/JuliaInterpreter/CPmYX/src/utils.jl:313), (vcat(A::Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T, Vector{T}}, LinearAlgebra.Transpose{T, Vector{T}}, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T)}...) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1121, vcat(A::BitMatrix...) in Base at bitarray.jl:1811), (hcat(A::Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T, Vector{T}}, LinearAlgebra.Transpose{T, Vector{T}}, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T)}...) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1122, hcat(B::BitVector...) in Base at bitarray.jl:1759), (convert(::Type{T}, x::T) where T>:Missing in Base at missing.jl:67, convert(::Type{T}, x) where T>:Union{Missing, Nothing} in Base at missing.jl:70), (vcat(A::Union{Vector{T} where T, Matrix{T} where T, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Adjoint{var"#s851", var"#s850"} where var"#s850"<:(Vector{T} where T) where var"#s851", LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Transpose{var"#s849", var"#s848"} where var"#s848"<:(Vector{T} where T) where var"#s849"}...) in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1115, vcat(rs::AbstractRange{T}...) where T in Base at range.jl:976), (hcat(A::Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T, Vector{T}}, LinearAlgebra.Transpose{T, Vector{T}}, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T)}...) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1122, hcat(A::Union{BitMatrix, BitVector}...) in Base at bitarray.jl:1786), (vcat(A::Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T, Vector{T}}, LinearAlgebra.Transpose{T, Vector{T}}, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T)}...) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1121, vcat(V::BitVector...) in Base at bitarray.jl:1772), (whereis(lineinfo, method::Method) in CodeTracking at /home/pkgeval/.julia/packages/CodeTracking/lvDr0/src/CodeTracking.jl:101, whereis(framecode::JuliaInterpreter.FrameCode, pc) in JuliaInterpreter at /home/pkgeval/.julia/packages/JuliaInterpreter/CPmYX/src/utils.jl:306), (convert(::Type{T}, x::T) where T in Base at essentials.jl:205, convert(::Type{T}, x) where T>:Nothing in Base at some.jl:36), (hvcat(rows::Tuple{Vararg{Int64, N} where N}, xs::Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T, Vector{T}}, LinearAlgebra.Transpose{T, Vector{T}}, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T)}...) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1123, hvcat(rows::Tuple{Vararg{Int64, N} where N}, xs::Number...) in Base at abstractarray.jl:1875), (convert(::Type{T}, x::T) where T in Base at essentials.jl:205, convert(::Type{T}, x) where T>:Union{Missing, Nothing} in Base at missing.jl:70), (vcat(Xin::Union{Vector{T} where T, Matrix{T} where T, LinearAlgebra.AbstractTriangular{T, A} where A<:Union{LinearAlgebra.Adjoint{var"#s851", var"#s850"} where var"#s850"<:SparseArrays.SparseVector where var"#s851", LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{var"#s849", var"#s848"} where var"#s848"<:SparseArrays.SparseVector where var"#s849", LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector} where T, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Adjoint{var"#s851", var"#s850"} where var"#s850"<:(Vector{T} where T) where var"#s851", LinearAlgebra.Adjoint{var"#s851", var"#s850"} where var"#s850"<:SparseArrays.SparseVector where var"#s851", LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.Hermitian{T, A} where A<:Union{LinearAlgebra.Adjoint{var"#s851", var"#s850"} where var"#s850"<:SparseArrays.SparseVector where var"#s851", LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{var"#s849", var"#s848"} where var"#s848"<:SparseArrays.SparseVector where var"#s849", LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector} where T, LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T) where T, LinearAlgebra.SymTridiagonal, LinearAlgebra.Symmetric{T, A} where A<:Union{LinearAlgebra.Adjoint{var"#s851", var"#s850"} where var"#s850"<:SparseArrays.SparseVector where var"#s851", LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{var"#s849", var"#s848"} where var"#s848"<:SparseArrays.SparseVector where var"#s849", LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector} where T, LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Transpose{var"#s849", var"#s848"} where var"#s848"<:(Vector{T} where T) where var"#s849", LinearAlgebra.Transpose{var"#s849", var"#s848"} where var"#s848"<:SparseArrays.SparseVector where var"#s849", LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector}...) in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1091, vcat(rs::AbstractRange{T}...) where T in Base at range.jl:976), (vcat(A::Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T, Vector{T}}, LinearAlgebra.Transpose{T, Vector{T}}, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T)}...) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1121, vcat(X::Number...) in Base at abstractarray.jl:1427), (hcat(A::Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T, Vector{T}}, LinearAlgebra.Transpose{T, Vector{T}}, LinearAlgebra.AbstractTriangular{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T, A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T, A} where A<:(Matrix{T} where T)}...) where T in SparseArrays at /opt/julia/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1122, hcat(X::Number...) in Base at abstractarray.jl:1428), (convert(::Type{T}, x::T) where T in Base at essentials.jl:205, convert(::Type{T}, x) where T>:Missing in Base at missing.jl:69)])
ERROR: LoadError: There was an error during testing
in expression starting at /home/pkgeval/.julia/packages/JuliaInterpreter/CPmYX/test/runtests.jl:4
ERROR: Package JuliaInterpreter errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String, N} where N)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1580
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:328
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:315
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:19
