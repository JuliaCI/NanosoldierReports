Julia Version 1.6.0-DEV.898
Commit eee48c58c0 (2020-09-12 15:01 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed DataAPI ────────────────────── v1.3.0
  Installed IniFile ────────────────────── v0.5.0
  Installed CodecZlib ──────────────────── v0.7.0
  Installed IteratorInterfaceExtensions ── v1.0.0
  Installed Combinatorics ──────────────── v1.0.2
  Installed FunctionalStateMachine ─────── v0.2.8
  Installed LazyJSON ───────────────────── v0.2.1
  Installed FillArrays ─────────────────── v0.9.6
  Installed RoME ───────────────────────── v0.6.4
  Installed TransformUtils ─────────────── v0.2.6
  Installed KernelDensityEstimate ──────── v0.5.2
  Installed Tables ─────────────────────── v1.0.5
  Installed DataStructures ─────────────── v0.17.20
  Installed CategoricalArrays ──────────── v0.8.2
  Installed Inflate ────────────────────── v0.1.2
  Installed TableTraits ────────────────── v1.0.0
  Installed Neo4j ──────────────────────── v2.0.0
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed JSON2 ──────────────────────── v0.3.2
  Installed ColorTypes ─────────────────── v0.10.9
  Installed OrderedCollections ─────────── v1.3.0
  Installed Missings ───────────────────── v0.4.4
  Installed Distances ──────────────────── v0.9.0
  Installed SpecialFunctions ───────────── v0.10.3
  Installed JSON ───────────────────────── v0.21.1
  Installed MetaGraphs ─────────────────── v0.6.5
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed Distributions ──────────────── v0.23.11
  Installed MacroTools ─────────────────── v0.5.5
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed MbedTLS_jll ────────────────── v2.16.8+0
  Installed ArrayInterface ─────────────── v2.12.0
  Installed MbedTLS ────────────────────── v1.0.2
  Installed SimpleTraits ───────────────── v0.9.3
  Installed Rotations ──────────────────── v1.0.1
  Installed TranscodingStreams ─────────── v0.9.5
  Installed DataFrames ─────────────────── v0.21.7
  Installed Requires ───────────────────── v1.0.2
  Installed ApproxManifoldProducts ─────── v0.1.4
  Installed Parsers ────────────────────── v1.0.10
  Installed Parameters ─────────────────── v0.12.1
  Installed InvertedIndices ────────────── v1.0.0
  Installed Rmath ──────────────────────── v0.6.1
  Installed SLEEFPirates ───────────────── v0.5.5
  Installed Optim ──────────────────────── v1.2.0
  Installed ProgressMeter ──────────────── v1.3.2
  Installed PositiveFactorizations ─────── v0.2.3
  Installed Reexport ───────────────────── v0.2.0
  Installed CpuId ──────────────────────── v0.2.2
  Installed CommonSubexpressions ───────── v0.3.0
  Installed PDMats ─────────────────────── v0.10.0
  Installed SIMDPirates ────────────────── v0.8.25
  Installed NaNMath ────────────────────── v0.3.4
  Installed Zlib_jll ───────────────────── v1.2.11+16
  Installed FiniteDiff ─────────────────── v2.6.0
  Installed Compat ─────────────────────── v3.15.0
  Installed StatsFuns ──────────────────── v0.9.5
  Installed CoordinateTransformations ──── v0.6.0
  Installed PooledArrays ───────────────── v0.5.3
  Installed FileIO ─────────────────────── v1.4.3
  Installed Graphs ─────────────────────── v0.10.3
  Installed UnPack ─────────────────────── v1.0.2
  Installed QuadGK ─────────────────────── v2.4.1
  Installed VectorizationBase ──────────── v0.12.33
  Installed Colors ─────────────────────── v0.12.4
  Installed DocStringExtensions ────────── v0.8.3
  Installed IncrementalInference ───────── v0.11.2
  Installed Nullables ──────────────────── v1.0.0
  Installed Unmarshal ──────────────────── v0.4.0
  Installed ForwardDiff ────────────────── v0.10.12
  Installed JLD2 ───────────────────────── v0.1.14
  Installed DiffResults ────────────────── v1.0.2
  Installed DiffRules ──────────────────── v1.0.1
  Installed LineSearches ───────────────── v7.1.0
  Installed NLsolve ────────────────────── v4.4.1
  Installed StaticArrays ───────────────── v0.12.4
  Installed DistributedFactorGraphs ────── v0.7.7
  Installed LightGraphs ────────────────── v1.3.3
  Installed Rmath_jll ──────────────────── v0.2.2+1
  Installed NLSolversBase ──────────────── v7.7.0
  Installed StructTypes ────────────────── v1.1.0
  Installed StatsBase ──────────────────── v0.33.1
  Installed FixedPointNumbers ──────────── v0.8.4
  Installed ArnoldiMethod ──────────────── v0.0.4
  Installed DataValueInterfaces ────────── v1.0.0
  Installed HTTP ───────────────────────── v0.8.17
Updating `~/.julia/environments/v1.6/Project.toml`
  [91fb55c2] + RoME v0.6.4
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [9bbbb610] + ApproxManifoldProducts v0.1.4
  [ec485272] + ArnoldiMethod v0.0.4
  [4fba245c] + ArrayInterface v2.12.0
  [324d7699] + CategoricalArrays v0.8.2
  [944b1d66] + CodecZlib v0.7.0
  [3da002f7] + ColorTypes v0.10.9
  [5ae59095] + Colors v0.12.4
  [861a8166] + Combinatorics v1.0.2
  [bbf7d656] + CommonSubexpressions v0.3.0
  [34da2185] + Compat v3.15.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [150eb455] + CoordinateTransformations v0.6.0
  [adafc99b] + CpuId v0.2.2
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.21.7
  [864edb3b] + DataStructures v0.17.20
  [e2d170a0] + DataValueInterfaces v1.0.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [b4f34e82] + Distances v0.9.0
  [b5cc3c7e] + DistributedFactorGraphs v0.7.7
  [31c24e10] + Distributions v0.23.11
  [ffbed154] + DocStringExtensions v0.8.3
  [5789e2e9] + FileIO v1.4.3
  [1a297f60] + FillArrays v0.9.6
  [6a86dc24] + FiniteDiff v2.6.0
  [53c48c17] + FixedPointNumbers v0.8.4
  [f6369f11] + ForwardDiff v0.10.12
  [3e9e306e] + FunctionalStateMachine v0.2.8
  [86223c79] + Graphs v0.10.3
  [cd3eb016] + HTTP v0.8.17
  [904591bb] + IncrementalInference v0.11.2
  [d25df0c9] + Inflate v0.1.2
  [83e8ac13] + IniFile v0.5.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [033835bb] + JLD2 v0.1.14
  [682c06a0] + JSON v0.21.1
  [2535ab7d] + JSON2 v0.3.2
  [2472808a] + KernelDensityEstimate v0.5.2
  [fc18253b] + LazyJSON v0.2.1
  [093fc24a] + LightGraphs v1.3.3
  [d3d80556] + LineSearches v7.1.0
  [1914dd2f] + MacroTools v0.5.5
  [739be429] + MbedTLS v1.0.2
  [c8ffd9c3] + MbedTLS_jll v2.16.8+0
  [626554b9] + MetaGraphs v0.6.5
  [e1d29d7a] + Missings v0.4.4
  [d41bc354] + NLSolversBase v7.7.0
  [2774e3e8] + NLsolve v4.4.1
  [77ba4419] + NaNMath v0.3.4
  [d2adbeaf] + Neo4j v2.0.0
  [4d1e1d77] + Nullables v1.0.0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [429524aa] + Optim v1.2.0
  [bac558e1] + OrderedCollections v1.3.0
  [90014a1f] + PDMats v0.10.0
  [d96e819e] + Parameters v0.12.1
  [69de0a69] + Parsers v1.0.10
  [2dfb63ee] + PooledArrays v0.5.3
  [85a6dd25] + PositiveFactorizations v0.2.3
  [92933f4c] + ProgressMeter v1.3.2
  [1fd47b50] + QuadGK v2.4.1
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.2
  [79098fc4] + Rmath v0.6.1
  [f50d1b31] + Rmath_jll v0.2.2+1
  [91fb55c2] + RoME v0.6.4
  [6038ab10] + Rotations v1.0.1
  [21efa798] + SIMDPirates v0.8.25
  [476501e8] + SLEEFPirates v0.5.5
  [699a6c99] + SimpleTraits v0.9.3
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [2913bbd2] + StatsBase v0.33.1
  [4c63d2b9] + StatsFuns v0.9.5
  [856f2bd8] + StructTypes v1.1.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.5
  [3bb67fe8] + TranscodingStreams v0.9.5
  [9b8138ad] + TransformUtils v0.2.6
  [3a884ed6] + UnPack v1.0.2
  [cbff2730] + Unmarshal v0.4.0
  [3d5dd08c] + VectorizationBase v0.12.33
  [83775a58] + Zlib_jll v1.2.11+16
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building SLEEFPirates → `~/.julia/packages/SLEEFPirates/jGsib/deps/build.log`
    Testing RoME
Status `/tmp/jl_QT1RSb/Project.toml`
  [9bbbb610] ApproxManifoldProducts v0.1.4
  [150eb455] CoordinateTransformations v0.6.0
  [b5cc3c7e] DistributedFactorGraphs v0.7.7
  [31c24e10] Distributions v0.23.11
  [ffbed154] DocStringExtensions v0.8.3
  [5789e2e9] FileIO v1.4.3
  [86223c79] Graphs v0.10.3
  [904591bb] IncrementalInference v0.11.2
  [033835bb] JLD2 v0.1.14
  [2472808a] KernelDensityEstimate v0.5.2
  [429524aa] Optim v1.2.0
  [92933f4c] ProgressMeter v1.3.2
  [189a3867] Reexport v0.2.0
  [91fb55c2] RoME v0.6.4
  [6038ab10] Rotations v1.0.1
  [9b8138ad] TransformUtils v0.2.6
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_QT1RSb/Manifest.toml`
  [9bbbb610] ApproxManifoldProducts v0.1.4
  [ec485272] ArnoldiMethod v0.0.4
  [4fba245c] ArrayInterface v2.12.0
  [324d7699] CategoricalArrays v0.8.2
  [944b1d66] CodecZlib v0.7.0
  [3da002f7] ColorTypes v0.10.9
  [5ae59095] Colors v0.12.4
  [861a8166] Combinatorics v1.0.2
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.15.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [150eb455] CoordinateTransformations v0.6.0
  [adafc99b] CpuId v0.2.2
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.21.7
  [864edb3b] DataStructures v0.17.20
  [e2d170a0] DataValueInterfaces v1.0.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.9.0
  [b5cc3c7e] DistributedFactorGraphs v0.7.7
  [31c24e10] Distributions v0.23.11
  [ffbed154] DocStringExtensions v0.8.3
  [5789e2e9] FileIO v1.4.3
  [1a297f60] FillArrays v0.9.6
  [6a86dc24] FiniteDiff v2.6.0
  [53c48c17] FixedPointNumbers v0.8.4
  [f6369f11] ForwardDiff v0.10.12
  [3e9e306e] FunctionalStateMachine v0.2.8
  [86223c79] Graphs v0.10.3
  [cd3eb016] HTTP v0.8.17
  [904591bb] IncrementalInference v0.11.2
  [d25df0c9] Inflate v0.1.2
  [83e8ac13] IniFile v0.5.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [033835bb] JLD2 v0.1.14
  [682c06a0] JSON v0.21.1
  [2535ab7d] JSON2 v0.3.2
  [2472808a] KernelDensityEstimate v0.5.2
  [fc18253b] LazyJSON v0.2.1
  [093fc24a] LightGraphs v1.3.3
  [d3d80556] LineSearches v7.1.0
  [1914dd2f] MacroTools v0.5.5
  [739be429] MbedTLS v1.0.2
  [c8ffd9c3] MbedTLS_jll v2.16.8+0
  [626554b9] MetaGraphs v0.6.5
  [e1d29d7a] Missings v0.4.4
  [d41bc354] NLSolversBase v7.7.0
  [2774e3e8] NLsolve v4.4.1
  [77ba4419] NaNMath v0.3.4
  [d2adbeaf] Neo4j v2.0.0
  [4d1e1d77] Nullables v1.0.0
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [429524aa] Optim v1.2.0
  [bac558e1] OrderedCollections v1.3.0
  [90014a1f] PDMats v0.10.0
  [d96e819e] Parameters v0.12.1
  [69de0a69] Parsers v1.0.10
  [2dfb63ee] PooledArrays v0.5.3
  [85a6dd25] PositiveFactorizations v0.2.3
  [92933f4c] ProgressMeter v1.3.2
  [1fd47b50] QuadGK v2.4.1
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.2
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+1
  [91fb55c2] RoME v0.6.4
  [6038ab10] Rotations v1.0.1
  [21efa798] SIMDPirates v0.8.25
  [476501e8] SLEEFPirates v0.5.5
  [699a6c99] SimpleTraits v0.9.3
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.1
  [4c63d2b9] StatsFuns v0.9.5
  [856f2bd8] StructTypes v1.1.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.5
  [3bb67fe8] TranscodingStreams v0.9.5
  [9b8138ad] TransformUtils v0.2.6
  [3a884ed6] UnPack v1.0.2
  [cbff2730] Unmarshal v0.4.0
  [3d5dd08c] VectorizationBase v0.12.33
  [83775a58] Zlib_jll v1.2.11+16
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
[ Info: Multithreaded  convolutions possible, Threads.nthreads()=2.  See `addFactor!(.;threadmodel=MultiThreaded)`.
[ Info: KernelDensityEstimate.FORCE_EVAL_DIRECT = true
[ Info: KernelDensityEstimate.FORCE_EVAL_DIRECT = true
WARNING: ignoring conflicting import of DistributedFactorGraphs.compare into RoME
WARNING: Rotations.Quat is deprecated, use UnitQuaternion instead.
  likely near /home/pkgeval/.julia/packages/RoME/wZUKA/src/RobotUtils.jl:10
WARNING: Rotations.Quat is deprecated, use UnitQuaternion instead.
  likely near /home/pkgeval/.julia/packages/RoME/wZUKA/src/RobotUtils.jl:13
WARNING: Rotations.Quat is deprecated, use UnitQuaternion instead.
  likely near /home/pkgeval/.julia/packages/RoME/wZUKA/src/RobotUtils.jl:24
[ Info: FunctionalStateMachine.jl is adding Graphs.jl related tools (Visualization).
┌ Error: must restore testG2oParser.jl
└ @ Main ~/.julia/packages/RoME/wZUKA/test/runtests.jl:8
[TEST] testPoint2Point2WorldBearing.jl
[ Info: try doautoinit! of x0
[ Info: x0 is not initialized, and will do so now...
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1, :x2x1f1]
[ Info: do init of x1
[ Info: [2x0p,d2,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0, :x2]
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
[ Info: Looking at x0x2f1
[ Info:    - Breaking link x0x2f1->x2...
[ Info:      - Original links: [:x0, :x2]
[ Info:      - New links: [:x0]
[ Info: x0x2f1 still has links to other variables, readding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Looking at x0f3
[ Info:    - Breaking link x0f3->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f3 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x2 to tree...
[ Info: Adding x1 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| x0,x2,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x2, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0 0; 1 0 1; 0 1 0; 0 1 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x2, :x1]
FSM , iter=9 -- exitStateMachine
[ Info: Finished tree based init-inference
Test Summary:                                   | Pass  Total
test Point2Point2WorldBearing factor is working |    6      6
[SUCCESS]



[TEST] testBeehive2D_CliqByCliq.jl
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
STEP 1: Driving around a bit
psym = Symbol("x$(i)") = :x0
nsym = Symbol("x$(i + 1)") = :x1
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
psym = Symbol("x$(i)") = :x1
nsym = Symbol("x$(i + 1)") = :x2
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
psym = Symbol("x$(i)") = :x2
nsym = Symbol("x$(i + 1)") = :x3
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
psym = Symbol("x$(i)") = :x3
nsym = Symbol("x$(i + 1)") = :x4
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
psym = Symbol("x$(i)") = :x4
nsym = Symbol("x$(i + 1)") = :x5
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
psym = Symbol("x$(i)") = :x5
nsym = Symbol("x$(i + 1)") = :x6
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
┌ Error: Note tree init test has been reduced as part of v0.9.0 upgrade and will be restored as a dedidicated effort later.
└ @ Main ~/.julia/packages/RoME/wZUKA/test/testBeehive2D_CliqByCliq.jl:18
[ Info: ensure all initialized (using graphinit)
[ Info: x0 is not initialized, and will do so now...
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: x3 is not initialized, and will do so now...
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1]
[ Info: do init of x3
[ Info: x4 is not initialized, and will do so now...
[ Info: try doautoinit! of x4
[ Info: init with useinitfct [:x3x4f1]
[ Info: do init of x4
[ Info: x5 is not initialized, and will do so now...
[ Info: try doautoinit! of x5
[ Info: init with useinitfct [:x4x5f1]
[ Info: do init of x5
[ Info: x6 is not initialized, and will do so now...
[ Info: try doautoinit! of x6
[ Info: init with useinitfct [:x5x6f1]
[ Info: do init of x6
[ Info: l1 is not initialized, and will do so now...
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x0l1f1, :x6l1f1]
[ Info: do init of l1
[ Info: [2x0p,d2,N100],
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x3
[ Info: ===============
[ Info: 
[ Info:  - Removing x3
Si = [:x2, :x4]
[ Info: 
[ Info: Eliminating x5
[ Info: ===============
[ Info: 
[ Info:  - Removing x5
Si = [:x4, :x6]
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
Si = [:x0, :x6]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0, :x2]
[ Info: 
[ Info: Eliminating x6
[ Info: ===============
[ Info: 
[ Info:  - Removing x6
[ Info: Looking at x4x6f1
[ Info:    - Breaking link x4x6f1->x6...
[ Info:      - Original links: [:x4, :x6]
[ Info:      - New links: [:x4]
[ Info: x4x6f1 still has links to other variables, readding it back...
[ Info: Looking at x0x6f1
[ Info:    - Breaking link x0x6f1->x6...
[ Info:      - Original links: [:x0, :x6]
[ Info:      - New links: [:x0]
[ Info: x0x6f1 still has links to other variables, readding it back...
Si = [:x4, :x0]
[ Info: 
[ Info: Eliminating x4
[ Info: ===============
[ Info: 
[ Info:  - Removing x4
[ Info: Looking at x2x4f1
[ Info:    - Breaking link x2x4f1->x4...
[ Info:      - Original links: [:x2, :x4]
[ Info:      - New links: [:x2]
[ Info: x2x4f1 still has links to other variables, readding it back...
[ Info: Looking at x4f1
[ Info:    - Breaking link x4f1->x4...
[ Info:      - Original links: [:x4]
[ Info:      - New links: Symbol[]
[ Info: x4f1 doesn't have any other links, not adding it back...
[ Info: Looking at x4x0f1
[ Info:    - Breaking link x4x0f1->x4...
[ Info:      - Original links: [:x4, :x0]
[ Info:      - New links: [:x0]
[ Info: x4x0f1 still has links to other variables, readding it back...
Si = [:x2, :x0]
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
[ Info: Looking at x0x2f1
[ Info:    - Breaking link x0x2f1->x2...
[ Info:      - Original links: [:x0, :x2]
[ Info:      - New links: [:x0]
[ Info: x0x2f1 still has links to other variables, readding it back...
[ Info: Looking at x2f1
[ Info:    - Breaking link x2f1->x2...
[ Info:      - Original links: [:x2]
[ Info:      - New links: Symbol[]
[ Info: x2f1 doesn't have any other links, not adding it back...
[ Info: Looking at x2x0f1
[ Info:    - Breaking link x2x0f1->x2...
[ Info:      - Original links: [:x2, :x0]
[ Info:      - New links: [:x0]
[ Info: x2x0f1 still has links to other variables, readding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Looking at x0f3
[ Info:    - Breaking link x0f3->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f3 doesn't have any other links, not adding it back...
[ Info: Looking at x0f4
[ Info:    - Breaking link x0f4->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f4 doesn't have any other links, not adding it back...
[ Info: Looking at x0f5
[ Info:    - Breaking link x0f5->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f5 doesn't have any other links, not adding it back...
[ Info: Looking at x0f6
[ Info:    - Breaking link x0f6->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f6 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x2 to tree...
[ Info: Adding x4 to tree...
[ Info: Adding x6 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding l1 to tree...
[ Info: Adding x5 to tree...
[ Info: Adding x3 to tree...
Find potential functions for each clique
[ Info: Get potentials 4| l1,: x0,x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (4, [:l1], [:x0, :x6])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 5| x5,: x4,x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (5, [:x5], [:x4, :x6])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 2| x6,: x4,x0,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=2 adding factor that is not in separator, x5
[ Info: cliq=2 adding factor that is not in separator, l1
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x6], [:x4, :x0])
mat = getCliqMat(cliq) = Bool[0 0 1; 1 0 0; 0 1 0; 1 0 0]
[ Info: Get potentials 3| x1,: x0,x2,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (3, [:x1], [:x0, :x2])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 6| x3,: x2,x4,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (6, [:x3], [:x2, :x4])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 1| x0,x2,x4,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, l1
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, x3
[ Info: cliq=1 adding factor that is not in separator, x3
[ Info: cliq=1 adding factor that is not in separator, x5
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x2, :x4], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0 0; 0 0 1; 1 0 0; 1 0 0; 0 1 0; 0 1 0; 0 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=1 -- testCliqCanRecycled_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x0, :x2]

FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=1 -- testCliqCanRecycled_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x0, :x6]

FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=1 -- testCliqCanRecycled_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x4, :x6]

WARNING: both Optim and ApproxManifoldProducts export "Manifold"; uses of it in module IncrementalInference must be qualified
WARNING: both LinearAlgebra and ApproxManifoldProducts export "rotate!"; uses of it in module IncrementalInference must be qualified
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x2, :x4]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=9 -- finishCliqSolveCheck_StateMachine
FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x4, :x0]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=9 -- finishCliqSolveCheck_StateMachine
FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=Symbol[]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x2, :x4]
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=9 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
[ Info: Finished tree based init-inference
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x3
[ Info: ===============
[ Info: 
[ Info:  - Removing x3
Si = [:x2, :x4]
[ Info: 
[ Info: Eliminating x5
[ Info: ===============
[ Info: 
[ Info:  - Removing x5
Si = [:x4, :x6]
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
Si = [:x0, :x6]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0, :x2]
[ Info: 
[ Info: Eliminating x6
[ Info: ===============
[ Info: 
[ Info:  - Removing x6
[ Info: Looking at x4x6f1
[ Info:    - Breaking link x4x6f1->x6...
[ Info:      - Original links: [:x4, :x6]
[ Info:      - New links: [:x4]
[ Info: x4x6f1 still has links to other variables, readding it back...
[ Info: Looking at x0x6f1
[ Info:    - Breaking link x0x6f1->x6...
[ Info:      - Original links: [:x0, :x6]
[ Info:      - New links: [:x0]
[ Info: x0x6f1 still has links to other variables, readding it back...
Si = [:x4, :x0]
[ Info: 
[ Info: Eliminating x4
[ Info: ===============
[ Info: 
[ Info:  - Removing x4
[ Info: Looking at x2x4f1
[ Info:    - Breaking link x2x4f1->x4...
[ Info:      - Original links: [:x2, :x4]
[ Info:      - New links: [:x2]
[ Info: x2x4f1 still has links to other variables, readding it back...
[ Info: Looking at x4f1
[ Info:    - Breaking link x4f1->x4...
[ Info:      - Original links: [:x4]
[ Info:      - New links: Symbol[]
[ Info: x4f1 doesn't have any other links, not adding it back...
[ Info: Looking at x4x0f1
[ Info:    - Breaking link x4x0f1->x4...
[ Info:      - Original links: [:x4, :x0]
[ Info:      - New links: [:x0]
[ Info: x4x0f1 still has links to other variables, readding it back...
Si = [:x2, :x0]
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
[ Info: Looking at x0x2f1
[ Info:    - Breaking link x0x2f1->x2...
[ Info:      - Original links: [:x0, :x2]
[ Info:      - New links: [:x0]
[ Info: x0x2f1 still has links to other variables, readding it back...
[ Info: Looking at x2f1
[ Info:    - Breaking link x2f1->x2...
[ Info:      - Original links: [:x2]
[ Info:      - New links: Symbol[]
[ Info: x2f1 doesn't have any other links, not adding it back...
[ Info: Looking at x2x0f1
[ Info:    - Breaking link x2x0f1->x2...
[ Info:      - Original links: [:x2, :x0]
[ Info:      - New links: [:x0]
[ Info: x2x0f1 still has links to other variables, readding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Looking at x0f3
[ Info:    - Breaking link x0f3->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f3 doesn't have any other links, not adding it back...
[ Info: Looking at x0f4
[ Info:    - Breaking link x0f4->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f4 doesn't have any other links, not adding it back...
[ Info: Looking at x0f5
[ Info:    - Breaking link x0f5->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f5 doesn't have any other links, not adding it back...
[ Info: Looking at x0f6
[ Info:    - Breaking link x0f6->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f6 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x2 to tree...
[ Info: Adding x4 to tree...
[ Info: Adding x6 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding l1 to tree...
[ Info: Adding x5 to tree...
[ Info: Adding x3 to tree...
Find potential functions for each clique
[ Info: Get potentials 4| l1,: x0,x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (4, [:l1], [:x0, :x6])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 5| x5,: x4,x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (5, [:x5], [:x4, :x6])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 2| x6,: x4,x0,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=2 adding factor that is not in separator, x5
[ Info: cliq=2 adding factor that is not in separator, l1
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x6], [:x4, :x0])
mat = getCliqMat(cliq) = Bool[0 0 1; 1 0 0; 0 1 0; 1 0 0]
[ Info: Get potentials 3| x1,: x0,x2,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (3, [:x1], [:x0, :x2])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 6| x3,: x2,x4,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (6, [:x3], [:x2, :x4])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 1| x0,x2,x4,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, l1
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, x3
[ Info: cliq=1 adding factor that is not in separator, x3
[ Info: cliq=1 adding factor that is not in separator, x5
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x2, :x4], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0 0; 0 0 1; 1 0 0; 1 0 0; 0 1 0; 0 1 0; 0 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=1 -- testCliqCanRecycled_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x0, :x2]

FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=1 -- testCliqCanRecycled_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x0, :x6]

FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=1 -- testCliqCanRecycled_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x4, :x6]

FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x2, :x4]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=9 -- finishCliqSolveCheck_StateMachine
FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x4, :x0]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=9 -- finishCliqSolveCheck_StateMachine
FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=Symbol[]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x2, :x4]
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=9 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
[ Info: Finished tree based init-inference
Test Summary:               | Pass  Total
sanity check on Hex example |   22     22
[SUCCESS]



[TEST] testhigherdimroots.jl
Test Summary:                         | Pass  Total
Increased dimension root finding test |    2      2
Test Summary:                    | Pass  Total
test CommonConvWrapper functions |   55     55
[SUCCESS]



[TEST] testManifoldsPose2Equivalent.jl
Test Summary:                                           |
Testing hand constructed product of SE(2) equivalent... | No tests
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1, :x1f2]
[ Info: do init of x1
[ Info: [2x0p,d3,N100],
[ Info: [2x0p,d3,N100],
Test Summary:                                                    | Pass  Total
Factor graph based test of SE(2) equivalent using only Priors... |    3      3
┌ Warning: not implemented yet
└ @ Main ~/.julia/packages/RoME/wZUKA/test/testManifoldsPose2Equivalent.jl:202
Test Summary:                                                                           |
Factor graph based test of SE(2) equivalent using Priors and Conditional Likelihoods... | No tests
[SUCCESS]



[TEST] testDidsonFunctions.jl
zDim = size(measurement[1], 1) = 3
  0.348637 seconds (120.21 k allocations: 6.428 MiB)
  0.266079 seconds (203.78 k allocations: 10.363 MiB)
  0.385301 seconds (740.31 k allocations: 55.452 MiB, 7.87% gc time)
┌ Warning: still need to insert kld(..) test to ensure this is working
└ @ Main ~/.julia/packages/RoME/wZUKA/test/testDidsonFunctions.jl:46
Test back projection from 
  0.000068 seconds (17 allocations: 1.625 KiB)
  0.000046 seconds (15 allocations: 1.312 KiB)
  0.570626 seconds (1.28 M allocations: 102.898 MiB, 12.51% gc time)
┌ Warning: Breaks if not set to 100
└ @ Main ~/.julia/packages/RoME/wZUKA/test/testDidsonFunctions.jl:103
Adding PriorPose3 to graph...
[ Info: try doautoinit! of x1
Adding LinearRangeBearingElevation to graph...
  0.011085 seconds (46 allocations: 3.047 KiB)
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of l1
[ Info: l1 is not initialized, and will do so now...
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x1l1f1]
[ Info: do init of l1
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
Si = [:x1]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
[ Info: Looking at x1f2
[ Info:    - Breaking link x1f2->x1...
[ Info:      - Original links: [:x1]
[ Info:      - New links: Symbol[]
[ Info: x1f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x1 to tree...
[ Info: Adding l1 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| x1,l1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x1, :l1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x1, :l1]
FSM , iter=9 -- exitStateMachine
[ Info: Finished tree based init-inference
[SUCCESS]



[TEST] testPoint2Point2.jl
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: ensure all initialized (using graphinit)
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
FSM , iter=9 -- exitStateMachine
[ Info: Finished tree based init-inference
Test Summary:           | Pass  Total
basic Point2Point2 test |    2      2
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of l1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x0l1f1, :x1l1f1]
[ Info: do init of l1
[ Info: [2x0p,d2,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:l1]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
Si = [:l1]
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
[ Info: Looking at l1f1
[ Info:    - Breaking link l1f1->l1...
[ Info:      - Original links: [:l1]
[ Info:      - New links: Symbol[]
[ Info: l1f1 doesn't have any other links, not adding it back...
[ Info: Looking at l1f2
[ Info:    - Breaking link l1f2->l1...
[ Info:      - Original links: [:l1]
[ Info:      - New links: Symbol[]
[ Info: l1f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding l1 to tree...
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
Find potential functions for each clique
[ Info: Get potentials 2| x1,: l1,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x1], [:l1])
mat = getCliqMat(cliq) = Bool[1 0; 1 1]
[ Info: Get potentials 1| l1,x0,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x1
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:l1, :x0], Symbol[])
mat = getCliqMat(cliq) = Bool[1 1; 0 1; 1 0]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:l1]
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=Symbol[]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:l1, :x0]
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=9 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
[ Info: Finished tree based init-inference
Test Summary:                | Pass  Total
test Point2Point2Range{T}... |    8      8
[SUCCESS]



[TEST] testPoint2Point2Init.jl
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
[ Info: ensure all initialized (using graphinit)
[ Info: x0 is not initialized, and will do so now...
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
[ Info: l1 is not initialized, and will do so now...
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x0l1f1, :x1l1f1]
[ Info: do init of l1
[ Info: [2x0p,d2,N100],
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:l1]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
Si = [:l1]
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
[ Info: Looking at l1f1
[ Info:    - Breaking link l1f1->l1...
[ Info:      - Original links: [:l1]
[ Info:      - New links: Symbol[]
[ Info: l1f1 doesn't have any other links, not adding it back...
[ Info: Looking at l1f2
[ Info:    - Breaking link l1f2->l1...
[ Info:      - Original links: [:l1]
[ Info:      - New links: Symbol[]
[ Info: l1f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding l1 to tree...
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
Find potential functions for each clique
[ Info: Get potentials 2| x1,: l1,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x1], [:l1])
mat = getCliqMat(cliq) = Bool[1 0; 1 1]
[ Info: Get potentials 1| l1,x0,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x1
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:l1, :x0], Symbol[])
mat = getCliqMat(cliq) = Bool[1 1; 0 1; 1 0]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:l1]
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=Symbol[]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:l1, :x0]
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=9 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
[ Info: Finished tree based init-inference
Test Summary:                                                     | Pass  Total
test tree based autoinit on small bimodal point2 trilateration... |   16     16
[SUCCESS]



[TEST] testBasicPose2Stationary.jl
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
Si = [:x1]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
[ Info: Looking at x1f1
[ Info:    - Breaking link x1f1->x1...
[ Info:      - Original links: [:x1]
[ Info:      - New links: Symbol[]
[ Info: x1f1 doesn't have any other links, not adding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x2 to tree...
Find potential functions for each clique
[ Info: Get potentials 2| x2,: x1,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x2], [:x1])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x2
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1; 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:x1]
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=Symbol[]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
FSM , iter=11 -- doCliqDownSolve_StateMachine
┌ Warning: PPE 'default' does not exist, adding
└ @ DistributedFactorGraphs ~/.julia/packages/DistributedFactorGraphs/27qHU/src/services/DFGVariable.jl:535
FSM , iter=9 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
[ Info: Finished tree based init-inference
Test Summary:                                        | Pass  Total
basic pose2 trivial case without forcing autoinit... |    9      9
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
Si = [:x1]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
[ Info: Looking at x1f1
[ Info:    - Breaking link x1f1->x1...
[ Info:      - Original links: [:x1]
[ Info:      - New links: Symbol[]
[ Info: x1f1 doesn't have any other links, not adding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x2 to tree...
Find potential functions for each clique
[ Info: Get potentials 2| x2,: x1,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x2], [:x1])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x2
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1; 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:x1]
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=Symbol[]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=9 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
[ Info: Finished tree based init-inference
Test Summary:                                  | Pass  Total
basic pose2 with forcing bad initialization... |    9      9
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
[ Info: ensure all initialized (using graphinit)
[ Info: x0 is not initialized, and will do so now...
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
FSM , iter=9 -- exitStateMachine
[ Info: Finished tree based init-inference
Test Summary:                | Pass  Total
test basic banana (split)... |    6      6
[SUCCESS]



[TEST] TestPoseAndPoint2Constraints.jl
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: ensure all initialized (using graphinit)
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
FSM , iter=9 -- exitStateMachine
[ Info: Finished tree based init-inference
[ Info: try doautoinit! of x2
[ Info: ensure all initialized (using graphinit)
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
Si = [:x1]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
[ Info: Looking at x1f1
[ Info:    - Breaking link x1f1->x1...
[ Info:      - Original links: [:x1]
[ Info:      - New links: Symbol[]
[ Info: x1f1 doesn't have any other links, not adding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x2 to tree...
Find potential functions for each clique
[ Info: Get potentials 2| x2,: x1,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x2], [:x1])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x2
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1; 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:x1]
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=Symbol[]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=9 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
[ Info: Finished tree based init-inference
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
Si = [:x1]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
[ Info: Looking at x1f1
[ Info:    - Breaking link x1f1->x1...
[ Info:      - Original links: [:x1]
[ Info:      - New links: Symbol[]
[ Info: x1f1 doesn't have any other links, not adding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x2 to tree...
Find potential functions for each clique
[ Info: Get potentials 2| x2,: x1,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x2], [:x1])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x2
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1; 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:x1]
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=Symbol[]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=9 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
[ Info: Finished tree based init-inference
test bearing range evaluations
[ Info: try doautoinit! of l1
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x0l1f1, :l1f1]
[ Info: do init of l1
[ Info: [2x0p,d2,N100],
Test Summary:                       | Pass  Total
test pose and point combinations... |   18     18
[SUCCESS]



[TEST] testDynPoint2D.jl
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
FSM , iter=9 -- exitStateMachine
[ Info: Finished tree based init-inference
┌ Warning: `getVertKDE(dfg::AbstractDFG, lbl::Symbol)` is deprecated, use `getKDE(dfg, lbl)` instead.
│   caller = top-level scope at show.jl:892
└ @ Core show.jl:892
global x0 = getKDEMax(getVertKDE(fg, :x0)) = [0.07886766832234979, 0.14119648999276085, 9.806798634584954, 9.850254612224376]
┌ Warning: `getVertKDE(dfg::AbstractDFG, lbl::Symbol)` is deprecated, use `getKDE(dfg, lbl)` instead.
│   caller = top-level scope at show.jl:892
└ @ Core show.jl:892
global x1 = getKDEMax(getVertKDE(fg, :x1)) = [19.814187912961103, 20.093575297664803, 9.943572392522094, 9.795983854040394]
Test Summary:     | Pass  Total
test DynPoint2... |    4      4
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
Si = [:x1]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
[ Info: Looking at x1f1
[ Info:    - Breaking link x1f1->x1...
[ Info:      - Original links: [:x1]
[ Info:      - New links: Symbol[]
[ Info: x1f1 doesn't have any other links, not adding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x2 to tree...
Find potential functions for each clique
[ Info: Get potentials 2| x2,: x1,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x2], [:x1])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x2
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1; 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:x1]
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=Symbol[]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=9 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
[ Info: Finished tree based init-inference
┌ Warning: `getVertKDE(dfg::AbstractDFG, lbl::Symbol)` is deprecated, use `getKDE(dfg, lbl)` instead.
│   caller = top-level scope at show.jl:892
└ @ Core show.jl:892
global x0 = getKDEMax(getVertKDE(fg, :x0)) = [-0.13197489869314105, 0.0012054990351701095, 9.961084201021066, 10.042368567506402]
┌ Warning: `getVertKDE(dfg::AbstractDFG, lbl::Symbol)` is deprecated, use `getKDE(dfg, lbl)` instead.
│   caller = top-level scope at show.jl:892
└ @ Core show.jl:892
global x1 = getKDEMax(getVertKDE(fg, :x1)) = [9.90203627544126, 10.098856455768297, 10.021435745880142, 9.80971322607711]
┌ Warning: `getVertKDE(dfg::AbstractDFG, lbl::Symbol)` is deprecated, use `getKDE(dfg, lbl)` instead.
│   caller = top-level scope at show.jl:892
└ @ Core show.jl:892
global x2 = getKDEMax(getVertKDE(fg, :x2)) = [19.92964419252615, 19.996351268338728, 9.893913540201442, 9.953463180284428]
Test Summary:                  | Pass  Total
test DynPoint2VelocityPrior... |    9      9
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
Test Summary:           | Pass  Total
test VelPoint2VelPoint2 |    9      9
[SUCCESS]



[TEST] testBearingRange2D.jl
Test Summary:                             | Pass  Total
test sampling from BearingRange factor... |    4      4
res = [0.0, 0.0]
res = [1.4997597826618579e-30, 0.0]
res = [1.4997597826618579e-30, 0.0]
res = [0.0, 0.0]
Test Summary:                                 | Pass  Total
test BearingRange factor residual function... |    4      4
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
Test Summary:                                             | Pass  Total
test unimodal bearing range factor, solve for landmark... |    5      5
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
abs.(Statistics.mean(pts, dims = 2)) = [0.2183242771072039; 0.1304978384371523; 0.011388527348582972]
Statistics.std(pts, dims = 2) = [0.9209327399483667; 0.5604094557462458; 0.07970021750417629]
Test Summary:                                         | Pass  Total
test unimodal bearing range factor, solve for pose... |    3      3
Test Summary:                                         | Pass  Total
Testing Pose2Point2Bearing Initialization and Packing |    2      2
[SUCCESS]



[TEST] testDeltaOdo.jl
Test Summary:                                           | Pass  Total
test odometry accumulation MutablePose2Pose2Gaussian... |    2      2
[SUCCESS]



[TEST] testFixedLagFG.jl
STEP 1: Driving around a bit
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of x3
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1]
[ Info: do init of x3
[ Info: try doautoinit! of x4
[ Info: try doautoinit! of x4
[ Info: init with useinitfct [:x3x4f1]
[ Info: do init of x4
[ Info: try doautoinit! of x5
[ Info: try doautoinit! of x5
[ Info: init with useinitfct [:x4x5f1]
[ Info: do init of x5
[ Info: try doautoinit! of x6
[ Info: try doautoinit! of l1
STEP 2: Solve graph when shorter than fixed length
[ Info: ensure all initialized (using graphinit)
[ Info: x6 is not initialized, and will do so now...
[ Info: try doautoinit! of x6
[ Info: init with useinitfct [:x5x6f1]
[ Info: do init of x6
[ Info: l1 is not initialized, and will do so now...
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x0l1f1]
[ Info: do init of l1
[ Info: Solving over the Bayes (Junction) tree.
[ Info: Quasi fixed-lag is enabled (a feature currently in testing)!
[ Info: [fifoFreeze] QFL - Freezing nodes x0 -> x1.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x6
[ Info: ===============
[ Info: 
[ Info:  - Removing x6
Si = [:x5]
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
Si = [:x0]
[ Info: 
[ Info: Eliminating x3
[ Info: ===============
[ Info: 
[ Info:  - Removing x3
Si = [:x2, :x4]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0, :x2]
[ Info: 
[ Info: Eliminating x5
[ Info: ===============
[ Info: 
[ Info:  - Removing x5
[ Info: Looking at x5f1
[ Info:    - Breaking link x5f1->x5...
[ Info:      - Original links: [:x5]
[ Info:      - New links: Symbol[]
[ Info: x5f1 doesn't have any other links, not adding it back...
Si = [:x4]
[ Info: 
[ Info: Eliminating x4
[ Info: ===============
[ Info: 
[ Info:  - Removing x4
[ Info: Looking at x2x4f1
[ Info:    - Breaking link x2x4f1->x4...
[ Info:      - Original links: [:x2, :x4]
[ Info:      - New links: [:x2]
[ Info: x2x4f1 still has links to other variables, readding it back...
[ Info: Looking at x4f1
[ Info:    - Breaking link x4f1->x4...
[ Info:      - Original links: [:x4]
[ Info:      - New links: Symbol[]
[ Info: x4f1 doesn't have any other links, not adding it back...
Si = [:x2]
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
[ Info: Looking at x0x2f1
[ Info:    - Breaking link x0x2f1->x2...
[ Info:      - Original links: [:x0, :x2]
[ Info:      - New links: [:x0]
[ Info: x0x2f1 still has links to other variables, readding it back...
[ Info: Looking at x2f1
[ Info:    - Breaking link x2f1->x2...
[ Info:      - Original links: [:x2]
[ Info:      - New links: Symbol[]
[ Info: x2f1 doesn't have any other links, not adding it back...
[ Info: Looking at x2f2
[ Info:    - Breaking link x2f2->x2...
[ Info:      - Original links: [:x2]
[ Info:      - New links: Symbol[]
[ Info: x2f2 doesn't have any other links, not adding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f3
[ Info:    - Breaking link x0f3->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f3 doesn't have any other links, not adding it back...
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Looking at x0f4
[ Info:    - Breaking link x0f4->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f4 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x2 to tree...
[ Info: Adding x4 to tree...
[ Info: Adding x5 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x3 to tree...
[ Info: Adding l1 to tree...
[ Info: Adding x6 to tree...
Find potential functions for each clique
[ Info: Get potentials 5| x6,: x5,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (5, [:x6], [:x5])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 3| x5,: x4,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=3 adding factor that is not in separator, x6
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (3, [:x5], [:x4])
mat = getCliqMat(cliq) = Bool[1 1; 1 0]
[ Info: Get potentials 2| x4,x3,: x2,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=2 adding factor that is not in separator, x5
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x4, :x3], [:x2])
mat = getCliqMat(cliq) = Bool[1 1 0; 0 1 1; 1 0 0]
[ Info: Get potentials 4| l1,: x0,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (4, [:l1], [:x0])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 1| x0,x2,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, l1
[ Info: cliq=1 adding factor that is not in separator, x3
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x2, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0 0; 1 0 1; 0 1 1; 0 1 0; 1 0 0]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=1 -- testCliqCanRecycled_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x0]

FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:x5]
FSM , iter=9 -- finishCliqSolveCheck_StateMachine
FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x4]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x2]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=Symbol[]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x2, :x1]
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=9 -- exitStateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
[ Info: Finished tree based init-inference
STEP 3: Drive a couple more, longer than fixed lag window
[ Info: try doautoinit! of x7
[ Info: try doautoinit! of x7
[ Info: init with useinitfct [:x6x7f1]
[ Info: do init of x7
[ Info: try doautoinit! of x8
[ Info: try doautoinit! of x8
[ Info: init with useinitfct [:x7x8f1]
[ Info: do init of x8
[ Info: try doautoinit! of x9
[ Info: try doautoinit! of x9
[ Info: init with useinitfct [:x8x9f1]
[ Info: do init of x9
[ Info: try doautoinit! of x10
[ Info: try doautoinit! of x10
[ Info: init with useinitfct [:x9x10f1]
[ Info: do init of x10
[ Info: try doautoinit! of x11
[ Info: try doautoinit! of x11
[ Info: init with useinitfct [:x10x11f1]
[ Info: do init of x11
[ Info: try doautoinit! of x12
[ Info: [fifoFreeze] QFL - Freezing nodes x0 -> l1.
STEP 4: Solve graph when shorter than fixed length, and show time to solve
[ Info: ensure all initialized (using graphinit)
[ Info: x12 is not initialized, and will do so now...
[ Info: try doautoinit! of x12
[ Info: init with useinitfct [:x11x12f1]
[ Info: do init of x12
[ Info: Solving over the Bayes (Junction) tree.
[ Info: Quasi fixed-lag is enabled (a feature currently in testing)!
[ Info: [fifoFreeze] QFL - Freezing nodes x0 -> l1.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x12
[ Info: ===============
[ Info: 
[ Info:  - Removing x12
Si = [:x11]
[ Info: 
[ Info: Eliminating x3
[ Info: ===============
[ Info: 
[ Info:  - Removing x3
Si = [:x2, :x4]
[ Info: 
[ Info: Eliminating x8
[ Info: ===============
[ Info: 
[ Info:  - Removing x8
Si = [:x7, :x9]
[ Info: 
[ Info: Eliminating x5
[ Info: ===============
[ Info: 
[ Info:  - Removing x5
Si = [:x4, :x6]
[ Info: 
[ Info: Eliminating x10
[ Info: ===============
[ Info: 
[ Info:  - Removing x10
Si = [:x9, :x11]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0, :x2]
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
Si = [:x0, :x6]
[ Info: 
[ Info: Eliminating x7
[ Info: ===============
[ Info: 
[ Info:  - Removing x7
[ Info: Looking at x7x9f1
[ Info:    - Breaking link x7x9f1->x7...
[ Info:      - Original links: [:x7, :x9]
[ Info:      - New links: [:x9]
[ Info: x7x9f1 still has links to other variables, readding it back...
Si = [:x6, :x9]
[ Info: 
[ Info: Eliminating x4
[ Info: ===============
[ Info: 
[ Info:  - Removing x4
[ Info: Looking at x2x4f1
[ Info:    - Breaking link x2x4f1->x4...
[ Info:      - Original links: [:x2, :x4]
[ Info:      - New links: [:x2]
[ Info: x2x4f1 still has links to other variables, readding it back...
[ Info: Looking at x4x6f1
[ Info:    - Breaking link x4x6f1->x4...
[ Info:      - Original links: [:x4, :x6]
[ Info:      - New links: [:x6]
[ Info: x4x6f1 still has links to other variables, readding it back...
Si = [:x2, :x6]
[ Info: 
[ Info: Eliminating x11
[ Info: ===============
[ Info: 
[ Info:  - Removing x11
[ Info: Looking at x11f1
[ Info:    - Breaking link x11f1->x11...
[ Info:      - Original links: [:x11]
[ Info:      - New links: Symbol[]
[ Info: x11f1 doesn't have any other links, not adding it back...
[ Info: Looking at x9x11f1
[ Info:    - Breaking link x9x11f1->x11...
[ Info:      - Original links: [:x9, :x11]
[ Info:      - New links: [:x9]
[ Info: x9x11f1 still has links to other variables, readding it back...
Si = [:x9]
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
[ Info: Looking at x2x6f1
[ Info:    - Breaking link x2x6f1->x2...
[ Info:      - Original links: [:x2, :x6]
[ Info:      - New links: [:x6]
[ Info: x2x6f1 still has links to other variables, readding it back...
[ Info: Looking at x2f1
[ Info:    - Breaking link x2f1->x2...
[ Info:      - Original links: [:x2]
[ Info:      - New links: Symbol[]
[ Info: x2f1 doesn't have any other links, not adding it back...
[ Info: Looking at x0x2f1
[ Info:    - Breaking link x0x2f1->x2...
[ Info:      - Original links: [:x0, :x2]
[ Info:      - New links: [:x0]
[ Info: x0x2f1 still has links to other variables, readding it back...
Si = [:x6, :x0]
[ Info: 
[ Info: Eliminating x9
[ Info: ===============
[ Info: 
[ Info:  - Removing x9
[ Info: Looking at x9f3
[ Info:    - Breaking link x9f3->x9...
[ Info:      - Original links: [:x9]
[ Info:      - New links: Symbol[]
[ Info: x9f3 doesn't have any other links, not adding it back...
[ Info: Looking at x6x9f1
[ Info:    - Breaking link x6x9f1->x9...
[ Info:      - Original links: [:x6, :x9]
[ Info:      - New links: [:x6]
[ Info: x6x9f1 still has links to other variables, readding it back...
[ Info: Looking at x9f2
[ Info:    - Breaking link x9f2->x9...
[ Info:      - Original links: [:x9]
[ Info:      - New links: Symbol[]
[ Info: x9f2 doesn't have any other links, not adding it back...
[ Info: Looking at x9f1
[ Info:    - Breaking link x9f1->x9...
[ Info:      - Original links: [:x9]
[ Info:      - New links: Symbol[]
[ Info: x9f1 doesn't have any other links, not adding it back...
Si = [:x6]
[ Info: 
[ Info: Eliminating x6
[ Info: ===============
[ Info: 
[ Info:  - Removing x6
[ Info: Looking at x6x0f1
[ Info:    - Breaking link x6x0f1->x6...
[ Info:      - Original links: [:x6, :x0]
[ Info:      - New links: [:x0]
[ Info: x6x0f1 still has links to other variables, readding it back...
[ Info: Looking at x0x6f1
[ Info:    - Breaking link x0x6f1->x6...
[ Info:      - Original links: [:x0, :x6]
[ Info:      - New links: [:x0]
[ Info: x0x6f1 still has links to other variables, readding it back...
[ Info: Looking at x6f2
[ Info:    - Breaking link x6f2->x6...
[ Info:      - Original links: [:x6]
[ Info:      - New links: Symbol[]
[ Info: x6f2 doesn't have any other links, not adding it back...
[ Info: Looking at x6f1
[ Info:    - Breaking link x6f1->x6...
[ Info:      - Original links: [:x6]
[ Info:      - New links: Symbol[]
[ Info: x6f1 doesn't have any other links, not adding it back...
[ Info: Looking at x6f3
[ Info:    - Breaking link x6f3->x6...
[ Info:      - Original links: [:x6]
[ Info:      - New links: Symbol[]
[ Info: x6f3 doesn't have any other links, not adding it back...
[ Info: Looking at x6f4
[ Info:    - Breaking link x6f4->x6...
[ Info:      - Original links: [:x6]
[ Info:      - New links: Symbol[]
[ Info: x6f4 doesn't have any other links, not adding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f4
[ Info:    - Breaking link x0f4->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f4 doesn't have any other links, not adding it back...
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Looking at x0f3
[ Info:    - Breaking link x0f3->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f3 doesn't have any other links, not adding it back...
[ Info: Looking at x0f5
[ Info:    - Breaking link x0f5->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f5 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x6 to tree...
[ Info: Adding x9 to tree...
[ Info: Adding x2 to tree...
[ Info: Adding x11 to tree...
[ Info: Adding x4 to tree...
[ Info: Adding x7 to tree...
[ Info: Adding l1 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x10 to tree...
[ Info: Adding x5 to tree...
[ Info: Adding x8 to tree...
[ Info: Adding x3 to tree...
[ Info: Adding x12 to tree...
Find potential functions for each clique
[ Info: Get potentials 10| x12,: x11,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (10, [:x12], [:x11])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 3| x11,x10,: x9,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=3 adding factor that is not in separator, x12
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (3, [:x11, :x10], [:x9])
mat = getCliqMat(cliq) = Bool[1 1 0; 0 1 1; 1 0 0]
[ Info: Get potentials 8| x8,: x7,x9,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (8, [:x8], [:x7, :x9])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 2| x9,x7,: x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=2 adding factor that is not in separator, x8
[ Info: cliq=2 adding factor that is not in separator, x10
[ Info: cliq=2 adding factor that is not in separator, x8
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x9, :x7], [:x6])
mat = getCliqMat(cliq) = Bool[0 1 1; 1 0 0; 0 1 0; 1 0 0]
[ Info: Get potentials 7| x5,: x4,x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (7, [:x5], [:x4, :x6])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 9| x3,: x2,x4,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (9, [:x3], [:x2, :x4])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 4| x4,: x2,x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=4 adding factor that is not in separator, x3
[ Info: cliq=4 adding factor that is not in separator, x5
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (4, [:x4], [:x2, :x6])
mat = getCliqMat(cliq) = Bool[1 0 0; 0 0 1; 0 1 0; 1 0 0]
[ Info: Get potentials 5| l1,: x0,x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (5, [:l1], [:x0, :x6])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 6| x1,: x0,x2,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (6, [:x1], [:x0, :x2])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 1| x0,x6,x2,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, l1
[ Info: cliq=1 adding factor that is not in separator, x5
[ Info: cliq=1 adding factor that is not in separator, l1
[ Info: cliq=1 adding factor that is not in separator, x7
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, x3
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x6, :x2], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0 0; 0 1 0; 0 0 1; 0 1 0; 1 0 0; 0 1 0; 1 0 0; 0 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
[ Info: prepCliqInitMsgsUp, seps=[:x4, :x6]
[ Info: prepCliqInitMsgsUp, seps=[:x2, :x6]
[ Info: prepCliqInitMsgsUp, seps=[:x2, :x4]
[ Info: prepCliqInitMsgsUp, seps=[:x0, :x6]
[ Info: prepCliqInitMsgsUp, seps=[:x0, :x2]
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- determineCliqIfDownSolve_StateMachine
FSM , iter=4 -- buildCliqSubgraphForDown_StateMachine
┌ Warning: buildSubgraphFromLabels! is deprecated use copyGraph, buildSubgraph or buildCliqueSubgraph!(IIF)
│   caller = buildCliqSubgraphForDown_StateMachine(csmc::CliqStateMachineContainer{BayesTreeNodeData, LightDFG{SolverParams, DistributedFactorGraphs.DFGVariable, DistributedFactorGraphs.DFGFactor}, LightDFG{SolverParams, DistributedFactorGraphs.DFGVariable, DistributedFactorGraphs.DFGFactor}, BayesTree}) at CliqStateMachine.jl:683
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/CliqStateMachine.jl:683
FSM , iter=1 -- testCliqCanRecycled_StateMachine┌ Warning: getSubgraphAroundNode is deprecated use buildSubgraph
│   caller = ip:0x0
└ @ Core :-1

┌ Warning: _copyIntoGraph! is deprecated use copyGraph/deepcopyGraph[!]
│   caller = getSubgraphAroundNode(dfg::LightDFG{SolverParams, DistributedFactorGraphs.DFGVariable, DistributedFactorGraphs.DFGFactor}, node::DistributedFactorGraphs.DFGVariable{Pose2}, distance::Int64, includeOrphanFactors::Bool, addToDFG::LightDFG{SolverParams, DistributedFactorGraphs.DFGVariable, DistributedFactorGraphs.DFGFactor}; solvable::Int64) at Deprecated.jl:195
└ @ DistributedFactorGraphs ~/.julia/packages/DistributedFactorGraphs/27qHU/src/Deprecated.jl:195
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x6, :x2]
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=1 -- testCliqCanRecycled_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x7, :x9]

FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=6 -- exitStateMachine[ Info: prepCliqInitMsgsUp, seps=[:x11]

FSM , iter=3 -- determineCliqIfDownSolve_StateMachine
FSM , iter=4 -- buildCliqSubgraphForDown_StateMachine
FSM , iter=5 -- determineCliqIfDownSolve_StateMachine
FSM , iter=6 -- doCliqDownSolve_StateMachine
FSM , iter=3 -- determineCliqIfDownSolve_StateMachine
FSM , iter=4 -- buildCliqSubgraphForDown_StateMachine
┌ Warning: _copyIntoGraph! is deprecated use copyGraph/deepcopyGraph[!]
│   caller = getSubgraphAroundNode(dfg::LightDFG{SolverParams, DistributedFactorGraphs.DFGVariable, DistributedFactorGraphs.DFGFactor}, node::DistributedFactorGraphs.DFGVariable{Point2}, distance::Int64, includeOrphanFactors::Bool, addToDFG::LightDFG{SolverParams, DistributedFactorGraphs.DFGVariable, DistributedFactorGraphs.DFGFactor}; solvable::Int64) at Deprecated.jl:195
└ @ DistributedFactorGraphs ~/.julia/packages/DistributedFactorGraphs/27qHU/src/Deprecated.jl:195
FSM , iter=3 -- determineCliqIfDownSolve_StateMachine
FSM , iter=4 -- buildCliqSubgraphForDown_StateMachine
FSM , iter=5 -- determineCliqIfDownSolve_StateMachine
FSM , iter=6 -- doCliqDownSolve_StateMachine
FSM , iter=3 -- determineCliqIfDownSolve_StateMachine
FSM , iter=4 -- buildCliqSubgraphForDown_StateMachine
FSM , iter=5 -- determineCliqIfDownSolve_StateMachine
FSM , iter=6 -- doCliqDownSolve_StateMachine
FSM , iter=9 -- finishCliqSolveCheck_StateMachine
FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=7 -- exitStateMachine
FSM , iter=5 -- determineCliqIfDownSolve_StateMachine
FSM , iter=6 -- doCliqDownSolve_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=3 -- determineCliqIfDownSolve_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x9]

FSM , iter=4 -- buildCliqSubgraphForDown_StateMachine
FSM , iter=5 -- determineCliqIfDownSolve_StateMachine
FSM , iter=6 -- doCliqDownSolve_StateMachine
FSM , iter=9 -- finishCliqSolveCheck_StateMachine
FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=7 -- exitStateMachine
FSM , iter=7 -- exitStateMachine
FSM , iter=7 -- exitStateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=7 -- exitStateMachine[ Info: prepCliqInitMsgsUp, seps=[:x6]

FSM , iter=9 -- finishCliqSolveCheck_StateMachine
FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=9 -- finishCliqSolveCheck_StateMachine
FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
[ Info: Finished tree based init-inference
Test Summary:                      | Pass  Total
test basic fixed lag operations... |    6      6
[SUCCESS]



[TEST] testMultimodalRangeBearing.jl
[ Info: try doautoinit! of l1
[ Info: try doautoinit! of l2
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: [0x1p,d3,N100],
[ Info: try doautoinit! of l1
[ Info: allowing init from incomplete set of previously initialized hypotheses, fct=x0l1l2f1
[ Info: init with useinitfct [:l1f1, :x0l1l2f1]
[ Info: do init of l1
[ Info: not all hypotheses initialized, but at least one available -- see #427
[ Info: [2x0p,d2,N100],
[ Info: try doautoinit! of l2
[ Info: init with useinitfct [:l2f1, :x0l1l2f1]
[ Info: do init of l2
[ Info: [2x0p,d2,N100],
[ Info: [1x1p,d3,N100],
Test Summary:                                          |
test standard multimodal range bearing factor setup... | No tests
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating l2
[ Info: ===============
[ Info: 
[ Info:  - Removing l2
Si = [:x0, :l1]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0l1f1
[ Info:    - Breaking link x0l1f1->x0...
[ Info:      - Original links: [:x0, :l1]
[ Info:      - New links: [:l1]
[ Info: x0l1f1 still has links to other variables, readding it back...
Si = [:l1]
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
[ Info: Looking at l1f2
[ Info:    - Breaking link l1f2->l1...
[ Info:      - Original links: [:l1]
[ Info:      - New links: Symbol[]
[ Info: l1f2 doesn't have any other links, not adding it back...
[ Info: Looking at l1f3
[ Info:    - Breaking link l1f3->l1...
[ Info:      - Original links: [:l1]
[ Info:      - New links: Symbol[]
[ Info: l1f3 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding l1 to tree...
[ Info: Adding x0 to tree...
[ Info: Adding l2 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| l1,x0,l2,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:l1, :x0, :l2], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0 0; 1 1 1; 0 1 0; 0 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:l1, :x0, :l2]
FSM , iter=9 -- exitStateMachine
[ Info: Finished tree based init-inference
Test Summary:                                                             | Pass  Total
test multimodal bearing range factors calculate pose position properly... |    3      3
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of l1
[ Info: try doautoinit! of l2
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of l1
[ Info: allowing init from incomplete set of previously initialized hypotheses, fct=x0l1l2f1
[ Info: init with useinitfct [:l1f1, :x0l1l2f1]
[ Info: do init of l1
[ Info: not all hypotheses initialized, but at least one available -- see #427
[ Info: [2x0p,d2,N100],
[ Info: try doautoinit! of l2
[ Info: init with useinitfct [:l2f1, :x0l1l2f1]
[ Info: do init of l2
[ Info: [1x1p,d2,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating l2
[ Info: ===============
[ Info: 
[ Info:  - Removing l2
Si = [:x0, :l1]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0l1f1
[ Info:    - Breaking link x0l1f1->x0...
[ Info:      - Original links: [:x0, :l1]
[ Info:      - New links: [:l1]
[ Info: x0l1f1 still has links to other variables, readding it back...
Si = [:l1]
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
[ Info: Looking at l1f2
[ Info:    - Breaking link l1f2->l1...
[ Info:      - Original links: [:l1]
[ Info:      - New links: Symbol[]
[ Info: l1f2 doesn't have any other links, not adding it back...
[ Info: Looking at l1f3
[ Info:    - Breaking link l1f3->l1...
[ Info:      - Original links: [:l1]
[ Info:      - New links: Symbol[]
[ Info: l1f3 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding l1 to tree...
[ Info: Adding x0 to tree...
[ Info: Adding l2 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| l1,x0,l2,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:l1, :x0, :l2], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0 0; 1 1 1; 0 1 0; 0 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:l1, :x0, :l2]
FSM , iter=9 -- exitStateMachine
[ Info: Finished tree based init-inference
Test Summary:                                                | Pass  Total
test multimodal landmark locations are computed correclty... |    5      5
[SUCCESS]



[TEST] testDynPose2D.jl
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: ensure all initialized (using graphinit)
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
FSM , iter=9 -- exitStateMachine
[ Info: Finished tree based init-inference
Test Summary:                 | Pass  Total
test DynPose2 and velocity... |    5      5
Test Summary:                          | Pass  Total
test distribution compare functions... |    3      3
Test Summary:                       | Pass  Total
test DynPose2 packing converters... |    2      2
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of x3
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1]
[ Info: do init of x3
[ Info: try doautoinit! of x4
[ Info: try doautoinit! of x4
[ Info: init with useinitfct [:x3x4f1]
[ Info: do init of x4
[ Info: try doautoinit! of x5
[ Info: try doautoinit! of x5
[ Info: init with useinitfct [:x4x5f1]
[ Info: do init of x5
[ Info: try doautoinit! of x6
[ Info: try doautoinit! of x6
[ Info: init with useinitfct [:x5x6f1]
[ Info: do init of x6
[ Info: try doautoinit! of x7
[ Info: try doautoinit! of x7
[ Info: init with useinitfct [:x6x7f1]
[ Info: do init of x7
[ Info: try doautoinit! of x8
[ Info: try doautoinit! of x8
[ Info: init with useinitfct [:x7x8f1]
[ Info: do init of x8
[ Info: try doautoinit! of x9
[ Info: try doautoinit! of x9
[ Info: init with useinitfct [:x8x9f1]
[ Info: do init of x9
[ Info: try doautoinit! of x10
[ Info: x10 is not initialized, and will do so now...
[ Info: try doautoinit! of x10
[ Info: init with useinitfct [:x9x10f1]
[ Info: do init of x10
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x10
[ Info: ===============
[ Info: 
[ Info:  - Removing x10
Si = [:x9]
[ Info: 
[ Info: Eliminating x5
[ Info: ===============
[ Info: 
[ Info:  - Removing x5
Si = [:x4, :x6]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0, :x2]
[ Info: 
[ Info: Eliminating x8
[ Info: ===============
[ Info: 
[ Info:  - Removing x8
Si = [:x7, :x9]
[ Info: 
[ Info: Eliminating x3
[ Info: ===============
[ Info: 
[ Info:  - Removing x3
Si = [:x2, :x4]
[ Info: 
[ Info: Eliminating x6
[ Info: ===============
[ Info: 
[ Info:  - Removing x6
[ Info: Looking at x4x6f1
[ Info:    - Breaking link x4x6f1->x6...
[ Info:      - Original links: [:x4, :x6]
[ Info:      - New links: [:x4]
[ Info: x4x6f1 still has links to other variables, readding it back...
Si = [:x7, :x4]
[ Info: 
[ Info: Eliminating x7
[ Info: ===============
[ Info: 
[ Info:  - Removing x7
[ Info: Looking at x7x9f1
[ Info:    - Breaking link x7x9f1->x7...
[ Info:      - Original links: [:x7, :x9]
[ Info:      - New links: [:x9]
[ Info: x7x9f1 still has links to other variables, readding it back...
[ Info: Looking at x7x4f1
[ Info:    - Breaking link x7x4f1->x7...
[ Info:      - Original links: [:x7, :x4]
[ Info:      - New links: [:x4]
[ Info: x7x4f1 still has links to other variables, readding it back...
Si = [:x9, :x4]
[ Info: 
[ Info: Eliminating x4
[ Info: ===============
[ Info: 
[ Info:  - Removing x4
[ Info: Looking at x2x4f1
[ Info:    - Breaking link x2x4f1->x4...
[ Info:      - Original links: [:x2, :x4]
[ Info:      - New links: [:x2]
[ Info: x2x4f1 still has links to other variables, readding it back...
[ Info: Looking at x4f1
[ Info:    - Breaking link x4f1->x4...
[ Info:      - Original links: [:x4]
[ Info:      - New links: Symbol[]
[ Info: x4f1 doesn't have any other links, not adding it back...
[ Info: Looking at x4f2
[ Info:    - Breaking link x4f2->x4...
[ Info:      - Original links: [:x4]
[ Info:      - New links: Symbol[]
[ Info: x4f2 doesn't have any other links, not adding it back...
[ Info: Looking at x9x4f1
[ Info:    - Breaking link x9x4f1->x4...
[ Info:      - Original links: [:x9, :x4]
[ Info:      - New links: [:x9]
[ Info: x9x4f1 still has links to other variables, readding it back...
Si = [:x2, :x9]
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
[ Info: Looking at x2f1
[ Info:    - Breaking link x2f1->x2...
[ Info:      - Original links: [:x2]
[ Info:      - New links: Symbol[]
[ Info: x2f1 doesn't have any other links, not adding it back...
[ Info: Looking at x0x2f1
[ Info:    - Breaking link x0x2f1->x2...
[ Info:      - Original links: [:x0, :x2]
[ Info:      - New links: [:x0]
[ Info: x0x2f1 still has links to other variables, readding it back...
[ Info: Looking at x2x9f1
[ Info:    - Breaking link x2x9f1->x2...
[ Info:      - Original links: [:x2, :x9]
[ Info:      - New links: [:x9]
[ Info: x2x9f1 still has links to other variables, readding it back...
Si = [:x0, :x9]
[ Info: 
[ Info: Eliminating x9
[ Info: ===============
[ Info: 
[ Info:  - Removing x9
[ Info: Looking at x9f1
[ Info:    - Breaking link x9f1->x9...
[ Info:      - Original links: [:x9]
[ Info:      - New links: Symbol[]
[ Info: x9f1 doesn't have any other links, not adding it back...
[ Info: Looking at x9f3
[ Info:    - Breaking link x9f3->x9...
[ Info:      - Original links: [:x9]
[ Info:      - New links: Symbol[]
[ Info: x9f3 doesn't have any other links, not adding it back...
[ Info: Looking at x9f2
[ Info:    - Breaking link x9f2->x9...
[ Info:      - Original links: [:x9]
[ Info:      - New links: Symbol[]
[ Info: x9f2 doesn't have any other links, not adding it back...
[ Info: Looking at x9f4
[ Info:    - Breaking link x9f4->x9...
[ Info:      - Original links: [:x9]
[ Info:      - New links: Symbol[]
[ Info: x9f4 doesn't have any other links, not adding it back...
[ Info: Looking at x0x9f1
[ Info:    - Breaking link x0x9f1->x9...
[ Info:      - Original links: [:x0, :x9]
[ Info:      - New links: [:x0]
[ Info: x0x9f1 still has links to other variables, readding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Looking at x0f3
[ Info:    - Breaking link x0f3->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f3 doesn't have any other links, not adding it back...
[ Info: Looking at x0f4
[ Info:    - Breaking link x0f4->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f4 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x9 to tree...
[ Info: Adding x2 to tree...
[ Info: Adding x4 to tree...
[ Info: Adding x7 to tree...
[ Info: Adding x6 to tree...
[ Info: Adding x3 to tree...
[ Info: Adding x8 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x5 to tree...
[ Info: Adding x10 to tree...
Find potential functions for each clique
[ Info: Get potentials 8| x5,: x4,x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (8, [:x5], [:x4, :x6])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 4| x6,: x7,x4,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=4 adding factor that is not in separator, x5
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (4, [:x6], [:x7, :x4])
mat = getCliqMat(cliq) = Bool[1 1 0; 0 0 1; 1 0 0]
[ Info: Get potentials 6| x8,: x7,x9,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (6, [:x8], [:x7, :x9])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 3| x7,: x9,x4,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=3 adding factor that is not in separator, x6
[ Info: cliq=3 adding factor that is not in separator, x8
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (3, [:x7], [:x9, :x4])
mat = getCliqMat(cliq) = Bool[1 0 0; 0 0 1; 1 0 0; 0 1 0]
[ Info: Get potentials 5| x3,: x2,x4,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (5, [:x3], [:x2, :x4])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 2| x4,: x2,x9,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=2 adding factor that is not in separator, x3
[ Info: cliq=2 adding factor that is not in separator, x5
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x4], [:x2, :x9])
mat = getCliqMat(cliq) = Bool[0 0 1; 1 0 0; 0 1 0; 1 0 0]
[ Info: Get potentials 7| x1,: x0,x2,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (7, [:x1], [:x0, :x2])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 9| x10,: x9,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (9, [:x10], [:x9])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 1| x0,x9,x2,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, x8
[ Info: cliq=1 adding factor that is not in separator, x10
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, x3
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x9, :x2], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0 0; 0 0 1; 0 1 0; 1 0 0; 0 0 1; 0 1 0]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=1 -- testCliqCanRecycled_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x2, :x4]

FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=1 -- testCliqCanRecycled_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x7, :x9]

FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=1 -- testCliqCanRecycled_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x0, :x2]

FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=1 -- testCliqCanRecycled_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x4, :x6]

FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x9]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=9 -- finishCliqSolveCheck_StateMachine
FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=9 -- finishCliqSolveCheck_StateMachine
FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=9 -- finishCliqSolveCheck_StateMachine
FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:x7, :x4]
FSM , iter=9 -- finishCliqSolveCheck_StateMachine
FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x9, :x4]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x2, :x9]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=Symbol[]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x9, :x2]
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=9 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
[ Info: Finished tree based init-inference
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x5
[ Info: ===============
[ Info: 
[ Info:  - Removing x5
Si = [:x4, :x6]
[ Info: 
[ Info: Eliminating x8
[ Info: ===============
[ Info: 
[ Info:  - Removing x8
Si = [:x7, :x9]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0, :x2]
[ Info: 
[ Info: Eliminating x3
[ Info: ===============
[ Info: 
[ Info:  - Removing x3
Si = [:x2, :x4]
[ Info: 
[ Info: Eliminating x6
[ Info: ===============
[ Info: 
[ Info:  - Removing x6
[ Info: Looking at x4x6f1
[ Info:    - Breaking link x4x6f1->x6...
[ Info:      - Original links: [:x4, :x6]
[ Info:      - New links: [:x4]
[ Info: x4x6f1 still has links to other variables, readding it back...
Si = [:x7, :x4]
[ Info: 
[ Info: Eliminating x10
[ Info: ===============
[ Info: 
[ Info:  - Removing x10
Si = [:x9]
[ Info: 
[ Info: Eliminating x7
[ Info: ===============
[ Info: 
[ Info:  - Removing x7
[ Info: Looking at x7x9f1
[ Info:    - Breaking link x7x9f1->x7...
[ Info:      - Original links: [:x7, :x9]
[ Info:      - New links: [:x9]
[ Info: x7x9f1 still has links to other variables, readding it back...
[ Info: Looking at x7x4f1
[ Info:    - Breaking link x7x4f1->x7...
[ Info:      - Original links: [:x7, :x4]
[ Info:      - New links: [:x4]
[ Info: x7x4f1 still has links to other variables, readding it back...
Si = [:x9, :x4]
[ Info: 
[ Info: Eliminating x4
[ Info: ===============
[ Info: 
[ Info:  - Removing x4
[ Info: Looking at x2x4f1
[ Info:    - Breaking link x2x4f1->x4...
[ Info:      - Original links: [:x2, :x4]
[ Info:      - New links: [:x2]
[ Info: x2x4f1 still has links to other variables, readding it back...
[ Info: Looking at x4f1
[ Info:    - Breaking link x4f1->x4...
[ Info:      - Original links: [:x4]
[ Info:      - New links: Symbol[]
[ Info: x4f1 doesn't have any other links, not adding it back...
[ Info: Looking at x4f2
[ Info:    - Breaking link x4f2->x4...
[ Info:      - Original links: [:x4]
[ Info:      - New links: Symbol[]
[ Info: x4f2 doesn't have any other links, not adding it back...
[ Info: Looking at x9x4f1
[ Info:    - Breaking link x9x4f1->x4...
[ Info:      - Original links: [:x9, :x4]
[ Info:      - New links: [:x9]
[ Info: x9x4f1 still has links to other variables, readding it back...
Si = [:x2, :x9]
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
[ Info: Looking at x0x2f1
[ Info:    - Breaking link x0x2f1->x2...
[ Info:      - Original links: [:x0, :x2]
[ Info:      - New links: [:x0]
[ Info: x0x2f1 still has links to other variables, readding it back...
[ Info: Looking at x2f1
[ Info:    - Breaking link x2f1->x2...
[ Info:      - Original links: [:x2]
[ Info:      - New links: Symbol[]
[ Info: x2f1 doesn't have any other links, not adding it back...
[ Info: Looking at x2x9f1
[ Info:    - Breaking link x2x9f1->x2...
[ Info:      - Original links: [:x2, :x9]
[ Info:      - New links: [:x9]
[ Info: x2x9f1 still has links to other variables, readding it back...
Si = [:x0, :x9]
[ Info: 
[ Info: Eliminating x9
[ Info: ===============
[ Info: 
[ Info:  - Removing x9
[ Info: Looking at x9f2
[ Info:    - Breaking link x9f2->x9...
[ Info:      - Original links: [:x9]
[ Info:      - New links: Symbol[]
[ Info: x9f2 doesn't have any other links, not adding it back...
[ Info: Looking at x9f1
[ Info:    - Breaking link x9f1->x9...
[ Info:      - Original links: [:x9]
[ Info:      - New links: Symbol[]
[ Info: x9f1 doesn't have any other links, not adding it back...
[ Info: Looking at x9f3
[ Info:    - Breaking link x9f3->x9...
[ Info:      - Original links: [:x9]
[ Info:      - New links: Symbol[]
[ Info: x9f3 doesn't have any other links, not adding it back...
[ Info: Looking at x9f4
[ Info:    - Breaking link x9f4->x9...
[ Info:      - Original links: [:x9]
[ Info:      - New links: Symbol[]
[ Info: x9f4 doesn't have any other links, not adding it back...
[ Info: Looking at x0x9f1
[ Info:    - Breaking link x0x9f1->x9...
[ Info:      - Original links: [:x0, :x9]
[ Info:      - New links: [:x0]
[ Info: x0x9f1 still has links to other variables, readding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Looking at x0f3
[ Info:    - Breaking link x0f3->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f3 doesn't have any other links, not adding it back...
[ Info: Looking at x0f4
[ Info:    - Breaking link x0f4->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f4 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x9 to tree...
[ Info: Adding x2 to tree...
[ Info: Adding x4 to tree...
[ Info: Adding x7 to tree...
[ Info: Adding x10 to tree...
[ Info: Adding x6 to tree...
[ Info: Adding x3 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x8 to tree...
[ Info: Adding x5 to tree...
Find potential functions for each clique
[ Info: Get potentials 9| x5,: x4,x6,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (9, [:x5], [:x4, :x6])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 5| x6,: x7,x4,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=5 adding factor that is not in separator, x5
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (5, [:x6], [:x7, :x4])
mat = getCliqMat(cliq) = Bool[1 1 0; 0 0 1; 1 0 0]
[ Info: Get potentials 8| x8,: x7,x9,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (8, [:x8], [:x7, :x9])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 3| x7,: x9,x4,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=3 adding factor that is not in separator, x6
[ Info: cliq=3 adding factor that is not in separator, x8
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (3, [:x7], [:x9, :x4])
mat = getCliqMat(cliq) = Bool[1 0 0; 0 0 1; 1 0 0; 0 1 0]
[ Info: Get potentials 6| x3,: x2,x4,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (6, [:x3], [:x2, :x4])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 2| x4,: x2,x9,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=2 adding factor that is not in separator, x3
[ Info: cliq=2 adding factor that is not in separator, x5
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x4], [:x2, :x9])
mat = getCliqMat(cliq) = Bool[0 0 1; 1 0 0; 0 1 0; 1 0 0]
[ Info: Get potentials 4| x10,: x9,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (4, [:x10], [:x9])
mat = getCliqMat(cliq) = Bool[1 1; 1 0]
[ Info: Get potentials 7| x1,: x0,x2,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (7, [:x1], [:x0, :x2])
mat = getCliqMat(cliq) = Bool[1 1 0; 1 0 1]
[ Info: Get potentials 1| x0,x9,x2,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, x8
[ Info: cliq=1 adding factor that is not in separator, x10
[ Info: cliq=1 adding factor that is not in separator, x1
[ Info: cliq=1 adding factor that is not in separator, x3
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x9, :x2], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0 0; 0 0 1; 0 1 0; 0 1 0; 1 0 0; 0 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=1 -- testCliqCanRecycled_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x9]

FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=1 -- testCliqCanRecycled_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x2, :x4]

FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=1 -- testCliqCanRecycled_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x0, :x2]

FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=1 -- testCliqCanRecycled_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x7, :x9]

FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x4, :x6]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=9 -- finishCliqSolveCheck_StateMachine
FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=9 -- finishCliqSolveCheck_StateMachine
FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=9 -- finishCliqSolveCheck_StateMachine
FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x7, :x4]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x9, :x4]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x2, :x9]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=Symbol[]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x9, :x2]
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=9 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
[ Info: Finished tree based init-inference
(sym, round.(XX, digits = 5)) = (:x2, [0.15455, -0.02323, 0.00298, -0.04432, 0.02751])
(sym, round.(XX, digits = 5)) = (:x3, [0.25352, -0.03783, -0.00182, 0.00256, -0.00313])
(sym, round.(XX, digits = 5)) = (:x4, [0.03788, -0.08095, -0.01133, 0.04824, -0.01561])
(sym, round.(XX, digits = 5)) = (:x5, [-0.04049, -0.0528, -0.00938, -0.05161, -0.01005])
(sym, round.(XX, digits = 5)) = (:x6, [-0.22959, -0.02926, -0.00636, -0.04339, 0.00375])
(sym, round.(XX, digits = 5)) = (:x7, [0.03735, 0.00539, -0.00194, 0.01489, -0.00612])
(sym, round.(XX, digits = 5)) = (:x8, [2.94271, 0.05046, -0.00515, 0.99182, 0.00308])
(sym, round.(XX, digits = 5)) = (:x9, [5.73685, 0.03827, 0.00482, 0.55901, -0.00192])
Test Summary:                                       | Pass  Total
test many DynPose2 chain stationary and 'pulled'... |   65     65
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1, :x0x1f1]
[ Info: do init of x1
[ Info: [2x0p,d5,N100],
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x1 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| x0,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1; 0 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x1]
FSM , iter=9 -- exitStateMachine
[ Info: Finished tree based init-inference
Test Summary:                           | Pass  Total
test many DynPose2 sideways velocity... |   10     10
[SUCCESS]



[TEST] threeDimLinearProductTest.jl
[ Info: try doautoinit! of x1
Test Summary:                 |
Adding PriorPose3 to graph... | No tests
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
muX1 = Statistics.mean(getVal(fg, :x1), dims = 2) = [-0.0748570065370148; 0.06745627299198521; 0.12655489224380004; 0.0025797072139646356; -0.0060457957756195205; -0.00641068935453607]
stdX1 = Statistics.std(getVal(fg, :x1), dims = 2) = [0.9954484189555045; 1.0415833395890355; 1.0516873666348767; 0.09363175133981468; 0.09514148089848865; 0.09363709650768592]
Test Summary:                      | Pass  Total
Ensure vertex initialized properly |    5      5
Test Summary:                    | Pass  Total
Testing PriorPose3 evaluation... |    2      2
[ Info: try doautoinit! of x2
Test Summary:                 |
Adding Pose3Pose3 to graph... | No tests
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
X1ptsMean = [0.24203700721894406; 0.09805290436244862; 0.23482716507130647; 0.014267916990584197; -0.023876155805316688; -0.0042916846860590625]
Test Summary:                    | Pass  Total
Testing Pose3Pose3 evaluation... |    3      3
[ Info: ensure all initialized (using graphinit)
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
Si = [:x1]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
[ Info: Looking at x1f2
[ Info:    - Breaking link x1f2->x1...
[ Info:      - Original links: [:x1]
[ Info:      - New links: Symbol[]
[ Info: x1f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x1 to tree...
[ Info: Adding x2 to tree...
Find potential functions for each clique
[ Info: Get potentials 1| x1,x2,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x1, :x2], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0; 1 1]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=Symbol[]
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x1, :x2]
FSM , iter=9 -- exitStateMachine
[ Info: Finished tree based init-inference
Test Summary:                                 | Pass  Total
Construct Bayes tree and perform inference... |    1      1
stdX1[4:6] = [0.06825516626490478, 0.11081773655672185, 0.08906262881278067]
muX2[1:3] - [10.0; 0; 0] = [-0.19155754820775606, 0.24698323053373797, 0.3028935422949737]
previous test failure 0.75 .< [1.34, 1.56, 1.46] .< 2.25
previous test failure 0.05 .< [0.13, 0.14, 0.14] .< 0.35
Test Summary:                                       | Pass  Total
Ensure basic parameters on x1,x2 after inference... |    8      8
[SUCCESS]



[TEST] testPose3Pose3NH.jl
Test Summary:                                       | Pass  Total
Test syntax for null hypothesis matrix substitution |    1      1
Test if null hypothesis occurs as expected...
Adding PriorPose3 to graph...
┌ Warning: autoinit deprecated, use graphinit instead
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1008
[ Info: try doautoinit! of x1
[ Info: x1 is not initialized, and will do so now...
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
Ensure vertex initialized properly
Testing PriorPose3 evaluation...
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of x3
Testing Pose3Pose3 evaluation...
[ Info: ensure all initialized (using graphinit)
[ Info: x3 is not initialized, and will do so now...
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1]
[ Info: do init of x3
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x3
[ Info: ===============
[ Info: 
[ Info:  - Removing x3
Si = [:x2]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x2]
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
[ Info: Looking at x2f1
[ Info:    - Breaking link x2f1->x2...
[ Info:      - Original links: [:x2]
[ Info:      - New links: Symbol[]
[ Info: x2f1 doesn't have any other links, not adding it back...
[ Info: Looking at x2f2
[ Info:    - Breaking link x2f2->x2...
[ Info:      - Original links: [:x2]
[ Info:      - New links: Symbol[]
[ Info: x2f2 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x2 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x3 to tree...
Find potential functions for each clique
[ Info: Get potentials 2| x3,: x2,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x3], [:x2])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 1| x2,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, x3
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x2, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 1; 0 1; 1 0]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:x2]
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=Symbol[]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x2, :x1]
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=9 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
[ Info: Finished tree based init-inference
Adding Pose3Pose3NH to graph...
┌ Warning: `getVariableIds(dfg::AbstractDFG, regexFilter::Union{Nothing, Regex} = nothing; tags::Vector{Symbol} = Symbol[], solvable::Int = 0)` is deprecated, use `listVariables(dfg, regexFilter, tags = tags, solvable = solvable)` instead.
│   caller = getVariableIds(dfg::LightDFG{SolverParams, DistributedFactorGraphs.DFGVariable, DistributedFactorGraphs.DFGFactor}) at deprecated.jl:71
└ @ DistributedFactorGraphs ./deprecated.jl:71
┌ Warning: FunctorPairwiseNH will be deprecated in favor of common `nullhypo=` interface.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/ApproxConv.jl:285
┌ Warning: this assembleNullHypothesis method has been updated for e.g. `addFactor!(; nullhypo=0.1)` instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/ApproxConv.jl:237
┌ Warning: FunctorPairwiseNH will be deprecated in favor of common `nullhypo=` interface.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/ApproxConv.jl:285
┌ Warning: this assembleNullHypothesis method has been updated for e.g. `addFactor!(; nullhypo=0.1)` instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/ApproxConv.jl:237
Test Summary:                        | Pass  Total
loading validation data for testing. |    2      2
[SUCCESS]



[TEST] testPartialXYH.jl
WARNING: using Rotations.⊕ in module Main conflicts with an existing identifier.
WARNING: Rotations.Quat is deprecated, use UnitQuaternion instead.
  likely near /home/pkgeval/.julia/packages/RoME/wZUKA/test/testPartialXYH.jl:8
WARNING: Rotations.Quat is deprecated, use UnitQuaternion instead.
  likely near /home/pkgeval/.julia/packages/RoME/wZUKA/test/testPartialXYH.jl:8
Test Summary:           | Pass  Total
test x translation case |    4      4
WARNING: Rotations.Quat is deprecated, use UnitQuaternion instead.
  likely near /home/pkgeval/.julia/packages/RoME/wZUKA/test/testPartialXYH.jl:56
WARNING: Rotations.Quat is deprecated, use UnitQuaternion instead.
  likely near /home/pkgeval/.julia/packages/RoME/wZUKA/test/testPartialXYH.jl:56
Test Summary:           | Pass  Total
test z translation case |    4      4
WARNING: Rotations.Quat is deprecated, use UnitQuaternion instead.
  likely near /home/pkgeval/.julia/packages/RoME/wZUKA/test/testPartialXYH.jl:99
WARNING: Rotations.Quat is deprecated, use UnitQuaternion instead.
  likely near /home/pkgeval/.julia/packages/RoME/wZUKA/test/testPartialXYH.jl:99
res = [-1.7763568394002505e-15, 0.0, 0.0, 0.0, 0.0, 0.0]
Test Summary:                  | Pass  Total
test roll and translate case 1 |    4      4
WARNING: Rotations.Quat is deprecated, use UnitQuaternion instead.
  likely near /home/pkgeval/.julia/packages/RoME/wZUKA/test/testPartialXYH.jl:145
WARNING: Rotations.Quat is deprecated, use UnitQuaternion instead.
  likely near /home/pkgeval/.julia/packages/RoME/wZUKA/test/testPartialXYH.jl:145
res = [0.0, 2.220446049250313e-15, 1.7763568394002505e-15, 0.0, 0.0, 0.0]
Test Summary:                  | Pass  Total
test roll and translate case 2 |    4      4
WARNING: Rotations.Quat is deprecated, use UnitQuaternion instead.
  likely near /home/pkgeval/.julia/packages/RoME/wZUKA/test/testPartialXYH.jl:193
res = [8.881784197001252e-16, 0.0, 0.0, 0.0, -2.102094367686146e-17, 0.0]
res = [0.0, 0.0, -0.0]
Test Summary:                   | Pass  Total
test pitch and translate case 1 |    4      4
WARNING: Rotations.Quat is deprecated, use UnitQuaternion instead.
  likely near /home/pkgeval/.julia/packages/RoME/wZUKA/test/testPartialXYH.jl:240
res = [0.0, 0.0, 0.0, 0.0, -2.102094367686146e-17, 0.0]
res = [0.0, 0.0, -0.0]
Test Summary:                   | Pass  Total
test pitch and translate case 2 |    4      4
WARNING: Rotations.Quat is deprecated, use UnitQuaternion instead.
  likely near /home/pkgeval/.julia/packages/RoME/wZUKA/test/testPartialXYH.jl:289
res = [8.881784197001252e-16, 0.0, 1.7763568394002505e-15, 0.0, -2.102094367686146e-17, 0.0]
res = [6.835808657661922e-16, 0.0, -0.0]
Test Summary:                   | Pass  Total
test pitch and translate case 3 |    4      4
WARNING: Rotations.Quat is deprecated, use UnitQuaternion instead.
  likely near /home/pkgeval/.julia/packages/RoME/wZUKA/test/testPartialXYH.jl:339
res = [8.881784197001252e-16, 0.0, 1.7763568394002505e-15, 0.0, -2.102094367686146e-17, 0.0]
res = [6.835808657661922e-16, 0.0, -0.0]
Test Summary:                   | Pass  Total
test pitch and translate case 4 |    4      4
WARNING: Rotations.Quat is deprecated, use UnitQuaternion instead.
  likely near /home/pkgeval/.julia/packages/RoME/wZUKA/test/testPartialXYH.jl:393
res = [-1.110223024625155e-15, -1.7763568394002505e-15, 0.0, 0.0, 0.0, -1.2325951644078318e-32]
res = [-6.123233995736765e-16, -0.0, -0.0]
Test Summary:                 | Pass  Total
test yaw and translate case 1 |    4      4
[SUCCESS]



[TEST] testpartialpose3.jl
[ Info: try doautoinit! of x1
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
┌ Warning: autoinit keyword argument deprecated, use graphinit instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/FactorGraph.jl:1052
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
[ Info: x2 is not initialized, and will do so now...
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x2f1, :x1x2f1]
[ Info: do init of x2
[ Info: [0x6p,d6,N50],
Test Summary:                           | Pass  Total
test PartialPriorRollPitchZ evaluations |   11     11
Test Summary:                               | Pass  Total
test residual function of PartialPose3XYYaw |    5      5
mu2 = [20.0, 5.0, 1.5707963267948966]
Statistics.mean(pts[newdims, :], dims = 2) = [19.924869882238994; 5.022454266127418; 1.577212565987998]
Test Summary:                      | Pass  Total
test PartialPose3XYYaw evaluations |    6      6
[ Info: [0x6p,d6,N50],
Test Summary:                         | Pass  Total
test predictbelief with two functions |    5      5
[SUCCESS]



[TEST] testpackingconverters.jl
Test Summary:    | Pass  Total
test PriorPoint2 |    2      2
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
Test Summary:                  | Pass  Total
test conversions of PriorPose2 |    4      4
Test Summary:                  | Pass  Total
test conversions of Pose2Pose2 |    2      2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of l1
Test Summary:                               | Pass  Total
test conversions of Pose2Point2BearingRange |    4      4
[ Info: try doautoinit! of x1
┌ Warning: threadmodel is not defined, fix with DFG
└ @ Main ~/.julia/packages/RoME/wZUKA/test/testpackingconverters.jl:156
Test Summary:                  | Pass  Total
test conversions of PriorPose3 |   10     10
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
Test Summary:                  | Pass  Total
test conversions of Pose3Pose3 |    3      3
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1, :x1x2f2]
[ Info: do init of x2
┌ Warning: FunctorPairwiseNH will be deprecated in favor of common `nullhypo=` interface.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/ApproxConv.jl:285
┌ Warning: this assembleNullHypothesis method has been updated for e.g. `addFactor!(; nullhypo=0.1)` instead.
└ @ IncrementalInference ~/.julia/packages/IncrementalInference/440wl/src/ApproxConv.jl:237
[ Info: [2x0p,d6,N100],
Test Summary:                    | Pass  Total
test conversions of Pose3Pose3NH |    4      4
Test Summary:                              | Pass  Total
test conversions of PartialPriorRollPitchZ |    1      1
Test Summary:                         | Pass  Total
test conversions of PartialPose3XYYaw |    1      1
Test Summary:                           | Pass  Total
test conversions of PartialPose3XYYawNH |    1      1
Test Summary:             | Pass  Total
test PriorPoint2DensityNH |    2      2
[SUCCESS]



[TEST] TestDefaultFGInitialization.jl
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
Test Summary:              |
Basic Pose2 initialization | No tests
[ Info: try doautoinit! of x0
Test Summary:             | Pass  Total
Base Pose3 initialization |    1      1
[SUCCESS]



[TEST] testAccumulateFactors.jl
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
Test Summary:                        | Pass  Total
Test parametric mean accumulation... |    1      1
[SUCCESS]



[TEST] testDeadReckoningTether.jl
WARNING: using IncrementalInference.compare in module Main conflicts with an existing identifier.
[ Info: try doautoinit! of x0
[ Info: try doautoinit! of x0
[ Info: init with useinitfct [:x0f1]
[ Info: do init of x0
[ Info: try doautoinit! of x1
[ Info: try doautoinit! of x1
[ Info: init with useinitfct [:x0x1f1]
[ Info: do init of x1
[ Info: try doautoinit! of x2
[ Info: try doautoinit! of x2
[ Info: init with useinitfct [:x1x2f1]
[ Info: do init of x2
[ Info: try doautoinit! of x3
[ Info: try doautoinit! of x3
[ Info: init with useinitfct [:x2x3f1]
[ Info: do init of x3
[ Info: try doautoinit! of x4
[ Info: try doautoinit! of x4
[ Info: init with useinitfct [:x3x4f1]
[ Info: do init of x4
[ Info: try doautoinit! of x5
[ Info: try doautoinit! of x5
[ Info: init with useinitfct [:x4x5f1]
[ Info: do init of x5
[ Info: try doautoinit! of x6
[ Info: try doautoinit! of l1
[ Info: try doautoinit! of deadreckon_x0

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x6
[ Info: ===============
[ Info: 
[ Info:  - Removing x6
Si = [:x5]
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
Si = [:x0]
[ Info: 
[ Info: Eliminating x3
[ Info: ===============
[ Info: 
[ Info:  - Removing x3
Si = [:x2, :x4]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0, :x2]
[ Info: 
[ Info: Eliminating x5
[ Info: ===============
[ Info: 
[ Info:  - Removing x5
[ Info: Looking at x5f1
[ Info:    - Breaking link x5f1->x5...
[ Info:      - Original links: [:x5]
[ Info:      - New links: Symbol[]
[ Info: x5f1 doesn't have any other links, not adding it back...
Si = [:x4]
[ Info: 
[ Info: Eliminating x4
[ Info: ===============
[ Info: 
[ Info:  - Removing x4
[ Info: Looking at x2x4f1
[ Info:    - Breaking link x2x4f1->x4...
[ Info:      - Original links: [:x2, :x4]
[ Info:      - New links: [:x2]
[ Info: x2x4f1 still has links to other variables, readding it back...
[ Info: Looking at x4f1
[ Info:    - Breaking link x4f1->x4...
[ Info:      - Original links: [:x4]
[ Info:      - New links: Symbol[]
[ Info: x4f1 doesn't have any other links, not adding it back...
Si = [:x2]
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
[ Info: Looking at x0x2f1
[ Info:    - Breaking link x0x2f1->x2...
[ Info:      - Original links: [:x0, :x2]
[ Info:      - New links: [:x0]
[ Info: x0x2f1 still has links to other variables, readding it back...
[ Info: Looking at x2f1
[ Info:    - Breaking link x2f1->x2...
[ Info:      - Original links: [:x2]
[ Info:      - New links: Symbol[]
[ Info: x2f1 doesn't have any other links, not adding it back...
[ Info: Looking at x2f2
[ Info:    - Breaking link x2f2->x2...
[ Info:      - Original links: [:x2]
[ Info:      - New links: Symbol[]
[ Info: x2f2 doesn't have any other links, not adding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f3
[ Info:    - Breaking link x0f3->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f3 doesn't have any other links, not adding it back...
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Looking at x0f4
[ Info:    - Breaking link x0f4->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f4 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x2 to tree...
[ Info: Adding x4 to tree...
[ Info: Adding x5 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x3 to tree...
[ Info: Adding l1 to tree...
[ Info: Adding x6 to tree...
Find potential functions for each clique
[ Info: Get potentials 5| x6,: x5,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (5, [:x6], [:x5])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 3| x5,: x4,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=3 adding factor that is not in separator, x6
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (3, [:x5], [:x4])
mat = getCliqMat(cliq) = Bool[1 1; 1 0]
[ Info: Get potentials 2| x4,x3,: x2,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=2 adding factor that is not in separator, x5
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x4, :x3], [:x2])
mat = getCliqMat(cliq) = Bool[1 1 0; 0 1 1; 1 0 0]
[ Info: Get potentials 4| l1,: x0,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (4, [:l1], [:x0])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 1| x0,x2,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, l1
[ Info: cliq=1 adding factor that is not in separator, x3
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x2, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0 0; 1 0 1; 0 1 1; 0 1 0; 1 0 0]
[ Info: ensure all initialized (using graphinit)
[ Info: x6 is not initialized, and will do so now...
[ Info: try doautoinit! of x6
[ Info: init with useinitfct [:x5x6f1]
[ Info: do init of x6
[ Info: l1 is not initialized, and will do so now...
[ Info: try doautoinit! of l1
[ Info: init with useinitfct [:x0l1f1]
[ Info: do init of l1
[ Info: Solving over the Bayes (Junction) tree.

[ Info: Building Bayes net...
[ Info: 
[ Info: Eliminating x6
[ Info: ===============
[ Info: 
[ Info:  - Removing x6
Si = [:x5]
[ Info: 
[ Info: Eliminating l1
[ Info: ===============
[ Info: 
[ Info:  - Removing l1
Si = [:x0]
[ Info: 
[ Info: Eliminating x3
[ Info: ===============
[ Info: 
[ Info:  - Removing x3
Si = [:x2, :x4]
[ Info: 
[ Info: Eliminating x1
[ Info: ===============
[ Info: 
[ Info:  - Removing x1
Si = [:x0, :x2]
[ Info: 
[ Info: Eliminating x5
[ Info: ===============
[ Info: 
[ Info:  - Removing x5
[ Info: Looking at x5f1
[ Info:    - Breaking link x5f1->x5...
[ Info:      - Original links: [:x5]
[ Info:      - New links: Symbol[]
[ Info: x5f1 doesn't have any other links, not adding it back...
Si = [:x4]
[ Info: 
[ Info: Eliminating x4
[ Info: ===============
[ Info: 
[ Info:  - Removing x4
[ Info: Looking at x2x4f1
[ Info:    - Breaking link x2x4f1->x4...
[ Info:      - Original links: [:x2, :x4]
[ Info:      - New links: [:x2]
[ Info: x2x4f1 still has links to other variables, readding it back...
[ Info: Looking at x4f1
[ Info:    - Breaking link x4f1->x4...
[ Info:      - Original links: [:x4]
[ Info:      - New links: Symbol[]
[ Info: x4f1 doesn't have any other links, not adding it back...
Si = [:x2]
[ Info: 
[ Info: Eliminating x2
[ Info: ===============
[ Info: 
[ Info:  - Removing x2
[ Info: Looking at x0x2f1
[ Info:    - Breaking link x0x2f1->x2...
[ Info:      - Original links: [:x0, :x2]
[ Info:      - New links: [:x0]
[ Info: x0x2f1 still has links to other variables, readding it back...
[ Info: Looking at x2f1
[ Info:    - Breaking link x2f1->x2...
[ Info:      - Original links: [:x2]
[ Info:      - New links: Symbol[]
[ Info: x2f1 doesn't have any other links, not adding it back...
[ Info: Looking at x2f2
[ Info:    - Breaking link x2f2->x2...
[ Info:      - Original links: [:x2]
[ Info:      - New links: Symbol[]
[ Info: x2f2 doesn't have any other links, not adding it back...
Si = [:x0]
[ Info: 
[ Info: Eliminating x0
[ Info: ===============
[ Info: 
[ Info:  - Removing x0
[ Info: Looking at x0f3
[ Info:    - Breaking link x0f3->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f3 doesn't have any other links, not adding it back...
[ Info: Looking at x0f2
[ Info:    - Breaking link x0f2->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f2 doesn't have any other links, not adding it back...
[ Info: Looking at x0f4
[ Info:    - Breaking link x0f4->x0...
[ Info:      - Original links: [:x0]
[ Info:      - New links: Symbol[]
[ Info: x0f4 doesn't have any other links, not adding it back...
[ Info: Staring the Bayes tree construction from Bayes net
[ Info: Adding x0 to tree...
[ Info: Adding x2 to tree...
[ Info: Adding x4 to tree...
[ Info: Adding x5 to tree...
[ Info: Adding x1 to tree...
[ Info: Adding x3 to tree...
[ Info: Adding l1 to tree...
[ Info: Adding x6 to tree...
Find potential functions for each clique
[ Info: Get potentials 5| x6,: x5,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (5, [:x6], [:x5])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 3| x5,: x4,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=3 adding factor that is not in separator, x6
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (3, [:x5], [:x4])
mat = getCliqMat(cliq) = Bool[1 1; 1 0]
[ Info: Get potentials 2| x4,x3,: x2,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=2 adding factor that is not in separator, x5
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (2, [:x4, :x3], [:x2])
mat = getCliqMat(cliq) = Bool[1 1 0; 0 1 1; 1 0 0]
[ Info: Get potentials 4| l1,: x0,
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (4, [:l1], [:x0])
mat = getCliqMat(cliq) = Bool[1 1]
[ Info: Get potentials 1| x0,x2,x1,: 
[ Info: using all factors connected to frontals and attached to separator
[ Info: finding all frontals for down WIP
[ Info: cliq=1 adding factor that is not in separator, l1
[ Info: cliq=1 adding factor that is not in separator, x3
(cliq.index, getCliqFrontalVarIds(cliq), getCliqSeparatorVarIds(cliq)) = (1, [:x0, :x2, :x1], Symbol[])
mat = getCliqMat(cliq) = Bool[1 0 0; 1 0 1; 0 1 1; 0 1 0; 1 0 0]
Bayes Tree
[ Info: Do tree based init-inference on tree
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=1 -- testCliqCanRecycled_StateMachine
FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=1 -- testCliqCanRecycled_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x0]

FSM , iter=2 -- isCliqUpSolved_StateMachine
FSM , iter=3 -- buildCliqSubgraph_StateMachine
FSM , iter=4 -- isCliqNull_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
[ Info: prepCliqInitMsgsUp, seps=[:x5]
FSM , iter=9 -- finishCliqSolveCheck_StateMachine
FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x4]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=5 -- doesCliqNeeddownmsg_StateMachine
FSM , iter=6 -- blockCliqSiblingsParentChildrenNeedDown_StateMachine
FSM , iter=7 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=8 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=[:x2]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=5 -- determineCliqNeedDownMsg_StateMachine
FSM , iter=6 -- attemptCliqInitUp_StateMachine
[ Info: Outgoing msg density on: 
FSM , iter=9 -- finishCliqSolveCheck_StateMachine[ Info: prepCliqInitMsgsUp, seps=Symbol[]

FSM , iter=10 -- determineCliqIfDownSolve_StateMachine
FSM , iter=7 -- finishCliqSolveCheck_StateMachine
FSM , iter=8 -- determineCliqIfDownSolve_StateMachine
[ Info: transferUpdateSubGraph! -- syms=[:x0, :x2, :x1]
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=9 -- exitStateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=11 -- doCliqDownSolve_StateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
FSM , iter=12 -- exitStateMachine
[ Info: Finished tree based init-inference
Test Summary:               | Pass  Total
testing against solvable... |    7      7
[SUCCESS]



    Testing RoME tests passed 
