Julia Version 1.6.0-DEV.898
Commit eee48c58c0 (2020-09-12 15:01 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed SpecialFunctions ───────────── v0.10.3
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_5FCoPX/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_5FCoPX/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  0.789900 seconds (1.37 M allocations: 72.866 MiB, 1.67% gc time)
Running: chebyshev_quadrature with k=1
  1.647526 seconds (2.16 M allocations: 124.101 MiB, 6.53% gc time)
Running: chebyshev_quadrature with k=2
  0.305012 seconds (410.94 k allocations: 23.585 MiB, 7.15% gc time)
Running: chebyshev_quadrature with k=3
  0.343741 seconds (524.65 k allocations: 28.749 MiB)
Running: chebyshev_quadrature with k=4
  0.364381 seconds (469.05 k allocations: 25.369 MiB, 11.85% gc time)
Running: jacobi_quadrature with α=β=1
 33.821735 seconds (37.28 M allocations: 3.043 GiB, 10.13% gc time)
Running: laguerre_quadrature with k=1
  2.880741 seconds (3.20 M allocations: 177.880 MiB, 6.92% gc time)
Running: legendre_quadrature
  0.259607 seconds (207.18 k allocations: 11.871 MiB, 21.62% gc time)
Running: lobatto_quadrature
  0.299739 seconds (332.28 k allocations: 20.010 MiB)
Running: radau_quadrature
  0.258620 seconds (315.12 k allocations: 19.046 MiB)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 77.872879 seconds (100.02 M allocations: 1.491 GiB, 0.55% gc time)
Running: rectangle_rule_midpoint.
  0.141399 seconds (172.85 k allocations: 3.842 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 72.854488 seconds (100.02 M allocations: 1.491 GiB, 0.47% gc time)
Running: rombergs_method
  0.511638 seconds (726.33 k allocations: 41.826 MiB, 5.36% gc time)
Running: simpsons_rule
  0.037438 seconds (46.21 k allocations: 2.061 MiB)
Running: simpsons38_rule
  0.078231 seconds (109.83 k allocations: 5.801 MiB)
Running: trapezoidal_rule
  0.220968 seconds (1.51 M allocations: 25.702 MiB, 4.95% gc time)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.068544 seconds (31.53 k allocations: 1.886 MiB)
Running: chebyshev_quadrature with k=1
  0.336206 seconds (274.41 k allocations: 14.257 MiB)
Running: chebyshev_quadrature with k=2
  0.119405 seconds (93.97 k allocations: 2.681 MiB)
Running: chebyshev_quadrature with k=3
  0.142965 seconds (82.22 k allocations: 2.482 MiB)
Running: chebyshev_quadrature with k=4
  0.119879 seconds (64.83 k allocations: 2.128 MiB)
Running: jacobi_quadrature with α=β=1
  2.148588 seconds (500.63 k allocations: 161.668 MiB, 9.34% gc time)
Running: legendre_quadrature
  0.120103 seconds (41.85 k allocations: 2.412 MiB)
Running: lobatto_quadrature
  0.020374 seconds (16.21 k allocations: 1.006 MiB)
Running: radau_quadrature
  0.013466 seconds (16.19 k allocations: 1.006 MiB)
Running: rectangle_rule_left
 24.246477 seconds (471.41 M allocations: 7.025 GiB, 5.12% gc time)
Running: rectangle_rule_midpoint
  0.000056 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 21.624534 seconds (476.96 M allocations: 7.107 GiB, 5.19% gc time)
Running: rombergs_method
  0.282621 seconds (328.44 k allocations: 18.609 MiB)
Running: simpsons_rule
  0.000027 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.044116 seconds (19.27 k allocations: 1.161 MiB)
Running: trapezoidal_rule
  0.036485 seconds (17.75 k allocations: 1.068 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.018994 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.079801 seconds (2.40 k allocations: 113.328 KiB)
Running: chebyshev_quadrature with k=2
  0.078561 seconds (2.65 k allocations: 121.344 KiB)
Running: chebyshev_quadrature with k=3
  0.072081 seconds (3.08 k allocations: 133.547 KiB)
Running: chebyshev_quadrature with k=4
  0.078105 seconds (3.08 k allocations: 133.609 KiB)
Running: jacobi_quadrature with α=β=1
  0.207136 seconds (363.41 k allocations: 18.938 MiB)
Running: legendre_quadrature
  0.056743 seconds (1.24 k allocations: 63.531 KiB)
Running: lobatto_quadrature
  0.000076 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000037 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000319 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000235 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000333 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.047027 seconds (1.01 k allocations: 54.094 KiB)
Running: simpsons_rule
  0.000035 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.025990 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.017185 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.038962 seconds (73.32 k allocations: 4.254 MiB)
Running: chebyshev_quadrature with k=1
  0.165460 seconds (231.21 k allocations: 12.989 MiB, 11.81% gc time)
Running: chebyshev_quadrature with k=2
  0.138283 seconds (284.06 k allocations: 15.923 MiB)
Running: chebyshev_quadrature with k=3
  0.148330 seconds (263.44 k allocations: 14.315 MiB)
Running: chebyshev_quadrature with k=4
  0.158173 seconds (263.46 k allocations: 14.227 MiB, 16.44% gc time)
Running: jacobi_quadrature with α=β=1
  2.332303 seconds (447.44 k allocations: 163.207 MiB, 10.74% gc time)
Running: legendre_quadrature
  0.098868 seconds (186.06 k allocations: 10.718 MiB)
Running: lobatto_quadrature
  0.217839 seconds (197.00 k allocations: 11.410 MiB, 52.18% gc time)
Running: radau_quadrature
  0.107171 seconds (196.99 k allocations: 11.408 MiB)
Running: rectangle_rule_left
  0.682013 seconds (19.09 k allocations: 1.158 MiB)
Running: rectangle_rule_midpoint
  0.015858 seconds (25.05 k allocations: 1.571 MiB)
Running: rectangle_rule_right
  0.763121 seconds (17.64 k allocations: 1.073 MiB)
Running: rombergs_method
  0.087088 seconds (134.40 k allocations: 7.752 MiB)
Running: simpsons_rule
  0.021971 seconds (27.97 k allocations: 1.747 MiB)
Running: simpsons38_rule
  0.026671 seconds (43.06 k allocations: 2.705 MiB)
Running: trapezoidal_rule
  0.017127 seconds (44.46 k allocations: 1.786 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.136804 seconds (100.03 k allocations: 2.999 MiB, 79.64% gc time)
Running: chebyshev_quadrature with k=1
  0.138942 seconds (237.80 k allocations: 13.033 MiB)
Running: chebyshev_quadrature with k=2
  0.144820 seconds (291.08 k allocations: 15.887 MiB)
Running: chebyshev_quadrature with k=3
  0.151159 seconds (270.17 k allocations: 14.313 MiB)
Running: chebyshev_quadrature with k=4
  0.169651 seconds (270.19 k allocations: 14.323 MiB, 6.47% gc time)
Running: hermite_quadrature with k=2
  9.518019 seconds (20.95 M allocations: 1.089 GiB, 9.85% gc time)
Running: jacobi_quadrature with α=β=1
  0.333495 seconds (456.66 k allocations: 49.397 MiB, 11.70% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.198846 seconds (277.29 k allocations: 15.259 MiB, 14.86% gc time)
Running: legendre_quadrature
  0.106159 seconds (192.63 k allocations: 11.043 MiB)
Running: lobatto_quadrature
  0.181489 seconds (217.82 k allocations: 37.178 MiB)
Running: radau_quadrature
  0.173980 seconds (214.41 k allocations: 29.841 MiB, 10.11% gc time)
Running: rectangle_rule_left
  0.022810 seconds (22.05 k allocations: 1.306 MiB)
Running: rectangle_rule_midpoint
  0.015872 seconds (26.89 k allocations: 1.660 MiB)
Running: rectangle_rule_right
  0.015865 seconds (18.79 k allocations: 1.129 MiB)
Running: rombergs_method
  0.083525 seconds (136.88 k allocations: 7.791 MiB)
Running: simpsons_rule
  0.023465 seconds (39.87 k allocations: 2.080 MiB)
Running: simpsons38_rule
  0.039248 seconds (58.09 k allocations: 3.092 MiB)
Running: trapezoidal_rule
  0.019089 seconds (30.55 k allocations: 1.714 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.043733 seconds (60.38 k allocations: 2.298 MiB, 38.84% gc time)
Running: chebyshev_quadrature with k=1
  0.146086 seconds (233.33 k allocations: 12.889 MiB)
Running: chebyshev_quadrature with k=2
  0.152336 seconds (286.28 k allocations: 15.646 MiB)
Running: chebyshev_quadrature with k=3
  0.156703 seconds (265.58 k allocations: 14.114 MiB)
Running: chebyshev_quadrature with k=4
  0.175565 seconds (265.60 k allocations: 14.111 MiB, 14.51% gc time)
Running: hermite_quadrature with k=2
  0.087995 seconds (171.23 k allocations: 9.790 MiB)
Running: jacobi_quadrature with α=β=1
  6.980008 seconds (449.90 k allocations: 1.175 GiB, 16.10% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.161193 seconds (272.56 k allocations: 15.081 MiB)
Running: legendre_quadrature
  0.113188 seconds (188.18 k allocations: 10.822 MiB)
Running: lobatto_quadrature
  0.163737 seconds (208.57 k allocations: 22.910 MiB, 10.38% gc time)
Running: radau_quadrature
  0.130418 seconds (207.72 k allocations: 20.843 MiB)
Running: rectangle_rule_left
  0.016161 seconds (19.81 k allocations: 1.200 MiB)
Running: rectangle_rule_midpoint
  0.015620 seconds (25.76 k allocations: 1.607 MiB)
Running: rectangle_rule_right
  0.015268 seconds (17.63 k allocations: 1.073 MiB)
Running: rombergs_method
  0.069057 seconds (132.69 k allocations: 7.610 MiB)
Running: simpsons_rule
  0.020797 seconds (32.36 k allocations: 1.871 MiB)
Running: simpsons38_rule
  0.056567 seconds (48.87 k allocations: 2.851 MiB)
Running: trapezoidal_rule
  0.017871 seconds (25.43 k allocations: 1.550 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.020970 seconds (31.33 k allocations: 1.893 MiB)
Running: chebyshev_quadrature with k=1
  0.150310 seconds (231.70 k allocations: 13.049 MiB, 12.79% gc time)
Running: chebyshev_quadrature with k=2
  0.149104 seconds (284.56 k allocations: 15.989 MiB)
Running: chebyshev_quadrature with k=3
  0.151741 seconds (263.95 k allocations: 14.387 MiB)
Running: chebyshev_quadrature with k=4
  0.154209 seconds (263.97 k allocations: 14.162 MiB, 8.43% gc time)
Running: jacobi_quadrature with α=β=1
  2.259233 seconds (447.99 k allocations: 194.217 MiB, 9.18% gc time)
Running: legendre_quadrature
  0.118686 seconds (186.56 k allocations: 10.746 MiB)
Running: lobatto_quadrature
  0.136375 seconds (197.50 k allocations: 11.437 MiB, 10.39% gc time)
Running: radau_quadrature
  0.138731 seconds (197.50 k allocations: 11.431 MiB)
Running: rectangle_rule_left
  0.299923 seconds (19.61 k allocations: 1.184 MiB)
Running: rectangle_rule_midpoint
  0.017195 seconds (25.40 k allocations: 1.589 MiB)
Running: rectangle_rule_right
  0.092380 seconds (17.99 k allocations: 1.092 MiB)
Running: rombergs_method
  0.102024 seconds (145.33 k allocations: 8.496 MiB)
Running: simpsons_rule
  0.022485 seconds (28.67 k allocations: 1.776 MiB)
Running: simpsons38_rule
  0.027379 seconds (43.78 k allocations: 2.735 MiB)
Running: trapezoidal_rule
  0.028172 seconds (45.40 k allocations: 1.820 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.023911 seconds (32.09 k allocations: 1.844 MiB)
Running: chebyshev_quadrature with k=1
  0.160268 seconds (232.29 k allocations: 12.990 MiB, 8.61% gc time)
Running: chebyshev_quadrature with k=2
  0.150472 seconds (285.19 k allocations: 15.915 MiB)
Running: chebyshev_quadrature with k=3
  0.160403 seconds (264.53 k allocations: 14.310 MiB)
Running: chebyshev_quadrature with k=4
  0.166531 seconds (264.55 k allocations: 14.326 MiB, 10.16% gc time)
Running: jacobi_quadrature with α=β=1
  1.475149 seconds (448.69 k allocations: 148.905 MiB, 10.87% gc time)
Running: legendre_quadrature
  0.119276 seconds (187.15 k allocations: 10.793 MiB)
Running: lobatto_quadrature
  0.161806 seconds (198.10 k allocations: 11.449 MiB, 8.03% gc time)
Running: radau_quadrature
  0.157580 seconds (198.09 k allocations: 11.452 MiB)
Running: rectangle_rule_left
  0.830144 seconds (19.86 k allocations: 1.197 MiB)
Running: rectangle_rule_midpoint
  0.016598 seconds (25.40 k allocations: 1.589 MiB)
Running: rectangle_rule_right
  0.835464 seconds (17.95 k allocations: 1.089 MiB)
Running: rombergs_method
  0.115381 seconds (135.63 k allocations: 7.808 MiB)
Running: simpsons_rule
  0.022418 seconds (29.37 k allocations: 1.802 MiB)
Running: simpsons38_rule
  0.023741 seconds (44.48 k allocations: 2.761 MiB)
Running: trapezoidal_rule
  0.027621 seconds (57.63 k allocations: 2.020 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.119744 seconds (147.32 k allocations: 8.781 MiB)
Running: chebyshev_quadrature with k=1
  0.113948 seconds (70.10 k allocations: 2.211 MiB)
Running: chebyshev_quadrature with k=2
  0.112702 seconds (105.25 k allocations: 2.873 MiB)
Running: chebyshev_quadrature with k=3
  0.116601 seconds (92.74 k allocations: 2.660 MiB)
Running: chebyshev_quadrature with k=4
  0.143504 seconds (72.27 k allocations: 2.256 MiB, 16.62% gc time)
Running: jacobi_quadrature with α=β=1
  2.443219 seconds (475.97 k allocations: 167.533 MiB, 3.39% gc time)
Running: legendre_quadrature
  0.108442 seconds (18.89 k allocations: 1.097 MiB)
Running: lobatto_quadrature
  0.000099 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000062 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 41.959224 seconds (590.00 M allocations: 8.792 GiB, 3.08% gc time)
Running: rectangle_rule_midpoint
  0.000023 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 43.861257 seconds (592.75 M allocations: 8.833 GiB, 2.89% gc time)
Running: rombergs_method
  0.132955 seconds (20.67 k allocations: 1.171 MiB)
Running: simpsons_rule
  0.000113 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.033536 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.026250 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 30.034744 seconds (629.33 M allocations: 9.387 GiB, 4.51% gc time)
Running: chebyshev_quadrature with k=1
  0.477641 seconds (420.96 k allocations: 23.217 MiB)
Running: chebyshev_quadrature with k=2
 13.589042 seconds (475.87 k allocations: 4.041 GiB, 4.16% gc time)
Running: chebyshev_quadrature with k=3
  5.640014 seconds (277.89 k allocations: 1.643 GiB, 4.91% gc time)
Running: chebyshev_quadrature with k=4
  7.626370 seconds (277.91 k allocations: 2.261 GiB, 2.65% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 49.726610 seconds (485.54 k allocations: 13.254 GiB, 4.19% gc time)
Running: legendre_quadrature.
  5.629033 seconds (224.40 k allocations: 1.976 GiB, 2.95% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 52.650275 seconds (8.23 M allocations: 13.383 GiB, 4.27% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 42.825316 seconds (7.23 M allocations: 13.369 GiB, 3.80% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.911222 seconds (22.55 k allocations: 1.359 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.805295 seconds (30.88 k allocations: 1.901 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.970056 seconds (22.76 k allocations: 1.369 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  0.869316 seconds (440.37 k allocations: 152.759 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 31.947147 seconds (600.04 M allocations: 8.943 GiB, 8.78% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 36.109391 seconds (600.05 M allocations: 8.943 GiB, 8.34% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 36.126716 seconds (600.03 M allocations: 8.943 GiB, 7.77% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.053007 seconds (180.97 k allocations: 4.428 MiB)
Running: chebyshev_quadrature with k=1
  0.157543 seconds (248.27 k allocations: 13.740 MiB)
Running: chebyshev_quadrature with k=2
  0.137977 seconds (272.84 k allocations: 14.515 MiB)
Running: chebyshev_quadrature with k=3
  0.130591 seconds (248.77 k allocations: 12.811 MiB)
Running: chebyshev_quadrature with k=4
  0.134954 seconds (248.79 k allocations: 12.804 MiB)
Running: jacobi_quadrature with α=β=1
  0.265492 seconds (388.81 k allocations: 34.930 MiB)
Running: laguerre_quadrature with k=2
  0.130611 seconds (181.10 k allocations: 10.514 MiB)
Running: legendre_quadrature
  0.093096 seconds (146.05 k allocations: 8.058 MiB)
Running: lobatto_quadrature
  0.033846 seconds (10.69 k allocations: 15.100 MiB)
Running: radau_quadrature
  0.030664 seconds (9.47 k allocations: 13.173 MiB)
Running: rectangle_rule_left
  0.046267 seconds (19.12 k allocations: 1.132 MiB)
Running: rectangle_rule_midpoint
  0.028895 seconds (25.86 k allocations: 1.591 MiB)
Running: rectangle_rule_right
  0.030073 seconds (17.73 k allocations: 1.059 MiB)
Running: rombergs_method
  0.159904 seconds (172.59 k allocations: 9.846 MiB)
Running: simpsons_rule
  0.001479 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.032127 seconds (79.55 k allocations: 3.411 MiB)
Running: trapezoidal_rule
  0.158911 seconds (2.39 M allocations: 37.705 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.001396 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.077947 seconds (2.40 k allocations: 1.688 MiB)
Running: chebyshev_quadrature with k=2
  0.083165 seconds (2.65 k allocations: 2.352 MiB)
Running: chebyshev_quadrature with k=3
  0.078946 seconds (3.08 k allocations: 2.052 MiB)
Running: chebyshev_quadrature with k=4
  0.076468 seconds (3.08 k allocations: 1.493 MiB)
Running: jacobi_quadrature with α=β=1
  6.534088 seconds (365.81 k allocations: 904.756 MiB, 4.24% gc time)
Running: legendre_quadrature
  0.065629 seconds (1.23 k allocations: 65.688 KiB)
Running: lobatto_quadrature
  0.000183 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000125 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  2.601683 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000468 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  2.677472 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.043908 seconds (959 allocations: 54.031 KiB)
Running: simpsons_rule
  0.000025 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000030 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000482 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000506 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.080684 seconds (2.48 k allocations: 576.484 KiB)
Running: chebyshev_quadrature with k=2
  0.074482 seconds (2.73 k allocations: 777.266 KiB)
Running: chebyshev_quadrature with k=3
  0.092793 seconds (3.15 k allocations: 685.500 KiB)
Running: chebyshev_quadrature with k=4
  0.090781 seconds (3.16 k allocations: 516.062 KiB)
Running: jacobi_quadrature with α=β=1
  2.065903 seconds (372.37 k allocations: 252.867 MiB)
Running: legendre_quadrature
  0.064092 seconds (1.28 k allocations: 65.359 KiB)
Running: lobatto_quadrature
  0.000083 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000037 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
  8.873775 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000790 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
  9.696988 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.083630 seconds (1.18 k allocations: 62.547 KiB)
Running: simpsons_rule
  0.000059 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000055 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001696 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
