Julia Version 1.6.0-DEV.898
Commit eee48c58c0 (2020-09-12 15:01 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_aHiGR3/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_aHiGR3/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.217227242806687
curgen: 20 fitness: 0.21723009928977935
curgen: 30 fitness: 0.21723009928977935
curgen: 40 fitness: 0.21723248772256032
curgen: 50 fitness: 0.21723248772256032
CoordinateCreature{Vector{Float64}}([-0.22238774662200617], -0.21723248772256032) -0.22238774662200617 -0.21723248772256032
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257986495491035
curgen: 100 fitness: 3.258200681751263
curgen: 150 fitness: 3.258252249847374
curgen: 200 fitness: 3.2583204530552368
curgen: 250 fitness: 3.2583777896404897
curgen: 300 fitness: 3.258434797930527
curgen: 350 fitness: 3.2584428860587846
curgen: 400 fitness: 3.258474906261345
curgen: 450 fitness: 3.258479350145498
curgen: 500 fitness: 3.258479350145498
CoordinateCreature{Vector{Float64}}([-0.22258563730817366, 0.22248888837784106, -0.22222699023908293, 0.22260836436104672, -0.22264374553058916, -0.22285257594129762, -0.22260309667885717, 0.22247921911386032, 0.22270245099472397, 0.22271815359182867, 0.2223798114519942, -0.2226498698482819, 0.2226596189396528, 0.2222721400123398, -0.2221426161765646], -3.258479350145498) [-0.22258563730817366, 0.22248888837784106, -0.22222699023908293, 0.22260836436104672, -0.22264374553058916, -0.22285257594129762, -0.22260309667885717, 0.22247921911386032, 0.22270245099472397, 0.22271815359182867, 0.2223798114519942, -0.2226498698482819, 0.2226596189396528, 0.2222721400123398, -0.2221426161765646] -3.258479350145498
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.003013362017554755
curgen: 100 fitness: -0.0009405174136531969
curgen: 150 fitness: -0.0009367010675589427
curgen: 200 fitness: -0.0009367010675589427
curgen: 250 fitness: -0.0009367010675589427
curgen: 300 fitness: -0.0009367010675589427
curgen: 350 fitness: -0.0009367010675589427
curgen: 400 fitness: -0.0009186026188672258
curgen: 450 fitness: -0.0008804793162653368
curgen: 500 fitness: -0.0008804793162653368
CoordinateCreature{Vector{Float64}}([-0.0008345382509392157, 0.00019834062291804427, 4.21084582164019e-5, 9.516546330754709e-5, 0.00037028208996552764, -0.0008870900017223632, 4.0934641991731746e-5, 0.00014610691976518796, -4.691104780982615e-5, 0.0006230260911585916, -0.0007806433101253558, 0.0008137465922242503, 0.0006512923133532929, 0.00016979491882747956, 0.0007933730405225145], 0.0008804793162653368) [-0.0008345382509392157, 0.00019834062291804427, 4.21084582164019e-5, 9.516546330754709e-5, 0.00037028208996552764, -0.0008870900017223632, 4.0934641991731746e-5, 0.00014610691976518796, -4.691104780982615e-5, 0.0006230260911585916, -0.0007806433101253558, 0.0008137465922242503, 0.0006512923133532929, 0.00016979491882747956, 0.0007933730405225145] 0.0008804793162653368
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
