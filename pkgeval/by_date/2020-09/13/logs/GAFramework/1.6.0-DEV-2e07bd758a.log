Julia Version 1.6.0-DEV.910
Commit 2e07bd758a (2020-09-13 14:10 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_AdBMoc/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_AdBMoc/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2172145111821338
curgen: 20 fitness: 0.2172145111821338
curgen: 30 fitness: 0.217221078919475
curgen: 40 fitness: 0.21723221702843407
curgen: 50 fitness: 0.21723221702843407
CoordinateCreature{Vector{Float64}}([0.22236973204556704], -0.21723221702843407) 0.22236973204556704 -0.21723221702843407
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2573856591511836
curgen: 100 fitness: 3.2582231830285466
curgen: 150 fitness: 3.2582448628997316
curgen: 200 fitness: 3.2582884123227434
curgen: 250 fitness: 3.258297715469846
curgen: 300 fitness: 3.2583941058850288
curgen: 350 fitness: 3.2584042666965205
curgen: 400 fitness: 3.258426864291159
curgen: 450 fitness: 3.258426864291159
curgen: 500 fitness: 3.2584274348290103
CoordinateCreature{Vector{Float64}}([0.22319720548954217, -0.222412028448087, 0.22205234115454617, 0.22260071602691614, 0.2223739355825014, 0.22314311600690487, 0.22248621096581528, -0.22243993177856056, -0.2225419998069817, -0.22298797673064147, 0.22279763309795955, 0.22256027996196623, 0.22263699724995234, 0.2229729786402005, 0.22256669842586912], -3.258436690896294) [0.22319720548954217, -0.222412028448087, 0.22205234115454617, 0.22260071602691614, 0.2223739355825014, 0.22314311600690487, 0.22248621096581528, -0.22243993177856056, -0.2225419998069817, -0.22298797673064147, 0.22279763309795955, 0.22256027996196623, 0.22263699724995234, 0.2229729786402005, 0.22256669842586912] -3.258436690896294
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0027758894449618765
curgen: 100 fitness: -0.0008166534405518178
curgen: 150 fitness: -0.0008166534405518178
curgen: 200 fitness: -0.0008039319929480371
curgen: 250 fitness: -0.0008039319929480371
curgen: 300 fitness: -0.0008039319929480371
curgen: 350 fitness: -0.0004852267379078512
curgen: 400 fitness: -0.0004423087895304434
curgen: 450 fitness: -0.0004269793356854734
curgen: 500 fitness: -0.0004249140386605177
CoordinateCreature{Vector{Float64}}([0.0010762739796084907, -0.00012151740464404789, 0.00021166942685892442, 0.0005829292692222238, 0.00015591155421957497, -0.00029421243231040196, 0.0002722500253249001, -9.763783044541813e-7, -0.0001071572914245771, 2.699631828669249e-5, -0.000575178782613546, 0.00010321762986850898, 0.00021123381301185653, 1.666814899780201e-5, 2.1629598325160385e-5], 0.0004249140386605177) [0.0010762739796084907, -0.00012151740464404789, 0.00021166942685892442, 0.0005829292692222238, 0.00015591155421957497, -0.00029421243231040196, 0.0002722500253249001, -9.763783044541813e-7, -0.0001071572914245771, 2.699631828669249e-5, -0.000575178782613546, 0.00010321762986850898, 0.00021123381301185653, 1.666814899780201e-5, 2.1629598325160385e-5] 0.0004249140386605177
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
