Julia Version 1.6.0-DEV.1007
Commit f6a8dcbbd3* (2020-09-22 17:36 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SIMD ─ v3.1.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [fdea26ae] + SIMD v3.1.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [fdea26ae] + SIMD v3.1.0
    Testing SIMD
Status `/tmp/jl_d8usip/Project.toml`
  [fdea26ae] SIMD v3.1.0
  [b77e0a4c] InteractiveUtils
  [8dfed614] Test
Status `/tmp/jl_d8usip/Manifest.toml`
  [fdea26ae] SIMD v3.1.0
  [2a0f44e3] Base64
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [56ddb016] Logging
  [d6f4376e] Markdown
  [9a3f8284] Random
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
    Testing Running tests...
Test Summary:   | Pass  Total
Type properties |   10     10
Test Summary:   | Pass  Total
Type conversion |    8      8
Test Summary:                   | Pass  Total
Conversion and reinterpretation |    4      4
Test Summary:       | Pass  Total
Element-wise access |   22     22
Test Summary:                | Pass  Total
Integer arithmetic functions |  108    108
Test Summary: | Pass  Total
saturation    |    4      4
Test Summary:       | Pass  Total
overflow arithmetic |   24     24
Test Summary:                       | Pass  Total
Floating point arithmetic functions |  101    101
Test Summary:  | Pass  Total
Type promotion |   88     88
Test Summary:        | Pass  Total
Reduction operations |   19     19
Test Summary:            | Pass  Total
Load and store functions |   60     60
Test Summary: | Pass  Total
fastmath      |    5      5
Test Summary:               | Pass  Total
Gather and scatter function |   84     84
Test Summary: | Pass  Total
expandload    |   10     10
Test Summary: | Pass  Total
compressstore |   10     10
Test Summary:          | Pass  Total
Index-based load/store |  104    104

;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:650 within `vsum'
define double @julia_vsum_4170({ {}*, [1 x [2 x i64]], i64, i64 }* nocapture nonnull readonly align 8 dereferenceable(40)) {
top:
  %1 = alloca {}*, align 8
  %2 = alloca [1 x [1 x i64]], align 8
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:651 within `vsum'
; ┌ @ abstractarray.jl:206 within `length'
; │┌ @ subarray.jl:63 within `size'
; ││┌ @ subarray.jl:426 within `axes'
; │││┌ @ subarray.jl:431 within `_indices_sub'
; ││││┌ @ abstractarray.jl:99 within `unsafe_indices'
; │││││┌ @ range.jl:546 within `unsafe_length'
; ││││││┌ @ range.jl:600 within `last'
; │││││││┌ @ Base.jl:33 within `getproperty'
          %3 = getelementptr inbounds { {}*, [1 x [2 x i64]], i64, i64 }, { {}*, [1 x [2 x i64]], i64, i64 }* %0, i64 0, i32 1, i64 0, i64 1
; ││││││└└
; ││││││┌ @ range.jl:595 within `first'
; │││││││┌ @ Base.jl:33 within `getproperty'
          %4 = getelementptr inbounds { {}*, [1 x [2 x i64]], i64, i64 }, { {}*, [1 x [2 x i64]], i64, i64 }* %0, i64 0, i32 1, i64 0, i64 0
; ││││││└└
; ││││││┌ @ int.jl:86 within `-'
         %5 = load i64, i64* %3, align 8
         %6 = load i64, i64* %4, align 8
         %7 = sub i64 %5, %6
; ││││││└
; ││││││┌ @ int.jl:87 within `+'
         %8 = add i64 %7, 1
; │││││└└
; │││││┌ @ range.jl:330 within `OneTo' @ range.jl:321
; ││││││┌ @ promotion.jl:402 within `max'
         %9 = icmp sgt i64 %8, 0
         %10 = select i1 %9, i64 %8, i64 0
; └└└└└└└
; ┌ @ int.jl:262 within `rem'
   %11 = and i64 %10, 3
; └
; ┌ @ promotion.jl:391 within `=='
   %12 = icmp eq i64 %11, 0
; └
  br i1 %12, label %L14, label %L102

L14:                                              ; preds = %top
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:654 within `vsum'
; ┌ @ range.jl:22 within `Colon'
; │┌ @ range.jl:24 within `_colon'
; ││┌ @ range.jl:260 within `StepRange' @ range.jl:208
     %13 = call i64 @j_steprange_last_4173(i64 1, i64 4, i64 %10)
; └└└
; ┌ @ range.jl:623 within `iterate'
   %14 = icmp sgt i64 %13, 0
   %15 = or i1 %14, icmp eq ({}* inttoptr (i64 140412894220176 to {}*), {}* inttoptr (i64 140412894876816 to {}*))
; └
  br i1 %15, label %L41.preheader, label %L98

L41.preheader:                                    ; preds = %L14
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:655 within `vsum'
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:285 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl within `_preprocessindices'
    %16 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %2, i64 0, i64 0, i64 0
; └└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:286 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:277 within `_pointer'
; ││┌ @ subarray.jl:412 within `pointer'
; │││┌ @ Base.jl within `getproperty'
      %17 = bitcast { {}*, [1 x [2 x i64]], i64, i64 }* %0 to i8***
      %18 = load atomic i8**, i8*** %17 unordered, align 8
      %19 = getelementptr inbounds { {}*, [1 x [2 x i64]], i64, i64 }, { {}*, [1 x [2 x i64]], i64, i64 }* %0, i64 0, i32 2
; │││└
; │││┌ @ int.jl within `+'
      %20 = load i64, i64* %19, align 8
; └└└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:285 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:263 within `_preprocessindices'
; ││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; │││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:212 within `checkindex'
      br label %L41

L41:                                              ; preds = %L71, %L41.preheader
      %value_phi3 = phi i64 [ %32, %L71 ], [ 1, %L41.preheader ]
      %value_phi5 = phi <4 x double> [ %30, %L71 ], [ zeroinitializer, %L41.preheader ]
; ││││┌ @ int.jl:442 within `<='
       %21 = icmp slt i64 %value_phi3, 1
; ││││└
; ││││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:206 within `last'
; │││││┌ @ int.jl:86 within `-'
        %22 = add nuw i64 %value_phi3, 3
; ││││└└
; ││││┌ @ int.jl:442 within `<='
       %23 = icmp sgt i64 %22, %10
; ││││└
      %or.cond = or i1 %21, %23
      br i1 %or.cond, label %L67, label %L71

L67:                                              ; preds = %L41
; ││└└
    store i64 %value_phi3, i64* %16, align 8
; ││┌ @ abstractarray.jl:566 within `checkbounds'
     %24 = call nonnull {}* @j_throw_boundserror_4177({ {}*, [1 x [2 x i64]], i64, i64 }* nocapture nonnull readonly %0, [1 x [1 x i64]]* nocapture readonly %2)
     call void @llvm.trap()
     unreachable

L71:                                              ; preds = %L41
; └└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:286 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:277 within `_pointer'
; ││┌ @ subarray.jl:412 within `pointer'
; │││┌ @ int.jl:87 within `+'
      %25 = add i64 %20, %value_phi3
; │││└
; │││ @ subarray.jl:412 within `pointer' @ abstractarray.jl:1069
; │││┌ @ pointer.jl:65 within `unsafe_convert'
      %26 = load i8*, i8** %18, align 8
; │││└
; │││┌ @ abstractarray.jl:1073 within `_memory_offset'
; ││││┌ @ int.jl:88 within `*'
       %27 = shl i64 %25, 3
       %28 = add i64 %27, -8
; │││└└
; │││┌ @ pointer.jl:159 within `+'
      %29 = getelementptr i8, i8* %26, i64 %28
; │└└└
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:45 within `vload' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:45 @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:46
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:427 within `load'
; │││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:436 within `macro expansion'
      %ptr.i = bitcast i8* %29 to <4 x double>*
      %res.i = load <4 x double>, <4 x double>* %ptr.i, align 8
; └└└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/simdvec.jl:253 within `+'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:197 within `fadd' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:197
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:206 within `macro expansion'
     %30 = fadd <4 x double> %value_phi5, %res.i
; └└└
; ┌ @ range.jl:627 within `iterate'
; │┌ @ promotion.jl:391 within `=='
    %31 = icmp eq i64 %value_phi3, %13
; │└
   %32 = add nuw i64 %value_phi3, 4
; └
  br i1 %31, label %L98.loopexit, label %L41

L98.loopexit:                                     ; preds = %L71
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:285 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:263 within `_preprocessindices'
    store i64 %13, i64* %16, align 8
; └└└
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:657 within `vsum'
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/simdvec.jl:468 within `sum'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/simdvec.jl:458 within `reduce'
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:787 within `reduce_fadd'
; │││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:802 within `macro expansion'
      br label %L98

L98:                                              ; preds = %L98.loopexit, %L14
      %value_phi10 = phi <4 x double> [ zeroinitializer, %L14 ], [ %30, %L98.loopexit ]
      %res.i13 = call double @llvm.experimental.vector.reduce.v2.fadd.f64.v4f64(double 0.000000e+00, <4 x double> %value_phi10)
; └└└└
  ret double %res.i13

L102:                                             ; preds = %top
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:651 within `vsum'
  store {}* inttoptr (i64 140412818984272 to {}*), {}** %1, align 8
  %33 = call nonnull {}* @jl_apply_generic({}* inttoptr (i64 140412901149040 to {}*), {}** nonnull %1, i32 1)
  call void @jl_throw({}* %33)
  unreachable
}
	.text
; ┌ @ runtests.jl:651 within `vsum'
; │┌ @ abstractarray.jl:206 within `length'
; ││┌ @ subarray.jl:63 within `size'
; │││┌ @ subarray.jl:426 within `axes'
; ││││┌ @ subarray.jl:431 within `_indices_sub'
; │││││┌ @ abstractarray.jl:99 within `unsafe_indices'
; ││││││┌ @ range.jl:546 within `unsafe_length'
; │││││││┌ @ runtests.jl:650 within `-'
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$16, %rsp
; │││││││└
; │││││││┌ @ int.jl:86 within `-'
	movq	16(%rdi), %rax
	subq	8(%rdi), %rax
; │││││││└
; │││││││┌ @ int.jl:87 within `+'
	incq	%rax
; ││││││└└
; ││││││┌ @ range.jl:330 within `OneTo' @ range.jl:321
; │││││││┌ @ promotion.jl:402 within `max'
	movq	%rax, %rcx
	sarq	$63, %rcx
	andnq	%rax, %rcx, %r15
; │└└└└└└└
; │┌ @ promotion.jl:391 within `=='
	testb	$3, %r15b
; │└
	jne	L254
; └
; ┌ @ runtests.jl within `vsum'
	movq	%rdi, %r14
; └
; ┌ @ runtests.jl:654 within `vsum'
; │┌ @ range.jl:22 within `Colon'
; ││┌ @ range.jl:24 within `_colon'
; │││┌ @ range.jl:260 within `StepRange' @ range.jl:208
	movabsq	$steprange_last, %rax
	movl	$4, %ebx
	movl	$1, %edi
	movl	$4, %esi
	movq	%r15, %rdx
	callq	*%rax
; │└└└
; │┌ @ range.jl:623 within `iterate'
	testq	%rax, %rax
; │└
	jg	L90
; └
; ┌ @ runtests.jl within `vsum'
	vxorpd	%xmm0, %xmm0, %xmm0
	movb	$1, %cl
; └
; ┌ @ runtests.jl:654 within `vsum'
	testb	%cl, %cl
	jne	L176
; └
; ┌ @ runtests.jl:655 within `vsum'
; │┌ @ arrayops.jl:286 within `getindex'
; ││┌ @ arrayops.jl:277 within `_pointer'
; │││┌ @ subarray.jl:412 within `pointer'
; ││││┌ @ Base.jl within `getproperty'
L90:
	movq	(%r14), %rcx
	movq	24(%r14), %rdx
; │└└└└
; │┌ @ arrayops.jl:285 within `getindex'
; ││┌ @ arrayops.jl:263 within `_preprocessindices'
; │││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; ││││┌ @ arrayops.jl:212 within `checkindex'
	shlq	$3, %rdx
	movq	$-3, %rsi
	subq	%rax, %rsi
	vxorpd	%xmm0, %xmm0, %xmm0
	nopw	%cs:(%rax,%rax)
	nopl	(%rax)
; │││││┌ @ int.jl:442 within `<='
L128:
	leaq	-3(%rbx), %rdi
	testq	%rdi, %rdi
; │││││└
	jle	L227
	cmpq	%r15, %rbx
	jg	L227
; │└└└└
; │┌ @ arrayops.jl within `getindex'
	movq	(%rcx), %rdi
; │└
; │┌ @ arrayops.jl:286 within `getindex'
; ││┌ @ arrayops.jl:45 within `vload' @ arrayops.jl:45 @ arrayops.jl:46
; │││┌ @ LLVM_intrinsics.jl:427 within `load'
; ││││┌ @ LLVM_intrinsics.jl:436 within `macro expansion'
	addq	%rdx, %rdi
; │└└└└
; │┌ @ simdvec.jl:253 within `+'
; ││┌ @ LLVM_intrinsics.jl:197 within `fadd' @ LLVM_intrinsics.jl:197
; │││┌ @ LLVM_intrinsics.jl:206 within `macro expansion'
	vaddpd	-32(%rdi,%rbx,8), %ymm0, %ymm0
; │└└└
; │┌ @ range.jl:627 within `iterate'
; ││┌ @ promotion.jl:391 within `=='
	leaq	(%rsi,%rbx), %rdi
	addq	$4, %rdi
	addq	$4, %rbx
	cmpq	$4, %rdi
; │└└
	jne	L128
; │┌ @ arrayops.jl:285 within `getindex'
; ││┌ @ arrayops.jl:263 within `_preprocessindices'
	movq	%rax, (%rsp)
; └└└
; ┌ @ arrayops.jl within `vsum'
L176:
	vxorpd	%xmm1, %xmm1, %xmm1
; └
; ┌ @ runtests.jl:657 within `vsum'
; │┌ @ simdvec.jl:468 within `sum'
; ││┌ @ simdvec.jl:458 within `reduce'
; │││┌ @ LLVM_intrinsics.jl:787 within `reduce_fadd'
; ││││┌ @ LLVM_intrinsics.jl:802 within `macro expansion'
	vaddsd	%xmm1, %xmm0, %xmm1
	vpermilpd	$1, %xmm0, %xmm2 # xmm2 = xmm0[1,0]
	vaddsd	%xmm2, %xmm1, %xmm1
	vextractf128	$1, %ymm0, %xmm0
	vaddsd	%xmm0, %xmm1, %xmm1
	vpermilpd	$1, %xmm0, %xmm0 # xmm0 = xmm0[1,0]
	vaddsd	%xmm0, %xmm1, %xmm0
; │└└└└
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	vzeroupper
	retq
; └
; ┌ @ runtests.jl:655 within `vsum'
; │┌ @ arrayops.jl:285 within `getindex'
; ││┌ @ arrayops.jl:263 within `_preprocessindices'
L227:
	movq	%rdi, (%rsp)
; │││┌ @ abstractarray.jl:566 within `checkbounds'
	movabsq	$throw_boundserror, %rax
	movq	%rsp, %rsi
	movq	%r14, %rdi
	vzeroupper
	callq	*%rax
	ud2
; └└└└
; ┌ @ abstractarray.jl within `vsum'
L254:
	movabsq	$140412818984272, %rax  # imm = 0x7FB468328D50
; └
; ┌ @ runtests.jl:651 within `vsum'
	movq	%rax, 8(%rsp)
	movabsq	$jl_apply_generic, %rax
	movabsq	$jl_system_image_data, %rdi
	leaq	8(%rsp), %rsi
	movl	$1, %edx
	callq	*%rax
	movabsq	$jl_throw, %rcx
	movq	%rax, %rdi
	callq	*%rcx
	nopl	(%rax)
; └

;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:723 within `vcompress!'
define nonnull {}* @"japi1_vcompress!_4256"({}*, {}**, i32) #0 {
top:
  %3 = alloca {}*, align 8
  %4 = alloca {}**, align 8
  store volatile {}** %1, {}*** %4, align 8
  %5 = alloca [1 x [1 x i64]], align 8
  %6 = alloca [1 x [1 x [1 x i64]]], align 8
  %7 = alloca [1 x i64], align 8
  %8 = alloca [1 x [1 x i64]], align 8
  %9 = alloca [1 x [1 x [1 x i64]]], align 8
  %10 = alloca [1 x i64], align 8
  %11 = alloca [1 x [2 x i64]], align 8
  %12 = load {}*, {}** %1, align 8
  %13 = getelementptr inbounds {}*, {}** %1, i64 1
  %14 = load {}*, {}** %13, align 8
  %15 = getelementptr inbounds {}*, {}** %1, i64 2
  %16 = load {}*, {}** %15, align 8
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724
; ┌ @ abstractarray.jl:75 within `axes'
; │┌ @ array.jl:155 within `size'
    %17 = bitcast {}* %16 to {}**
    %18 = getelementptr inbounds {}*, {}** %17, i64 3
    %19 = bitcast {}** %18 to i64*
    %20 = load i64, i64* %19, align 8
    %21 = bitcast {}* %12 to {}**
    %22 = getelementptr inbounds {}*, {}** %21, i64 3
    %23 = bitcast {}** %22 to i64*
    %24 = load i64, i64* %23, align 8
; └└
; ┌ @ tuple.jl:328 within `=='
; │┌ @ tuple.jl:332 within `_eq'
; ││┌ @ range.jl:755 within `=='
     switch i64 %24, label %L16 [
    i64 0, label %L9
    i64 1, label %L13
  ]

L9:                                               ; preds = %top
; │││┌ @ range.jl:506 within `isempty'
; ││││┌ @ operators.jl:303 within `>'
; │││││┌ @ int.jl:83 within `<'
        %25 = icmp eq i64 %20, 0
; │││└└└
     br label %L19

L13:                                              ; preds = %top
; ││└
; ││┌ @ range.jl:756 within `=='
; │││┌ @ range.jl:769 within `_has_length_one'
; ││││┌ @ promotion.jl:391 within `=='
       %26 = icmp eq i64 %20, 1
; │││└└
     br label %L19

L16:                                              ; preds = %top
; ││└
; ││┌ @ range.jl:757 within `==' @ promotion.jl:391
     %27 = icmp eq i64 %24, %20
; │││ @ range.jl:757 within `=='
     br label %L19

L19:                                              ; preds = %L16, %L13, %L9
     %value_phi.in = phi i1 [ %25, %L9 ], [ %26, %L13 ], [ %27, %L16 ]
; │└└
; │┌ @ tuple.jl:333 within `_eq'
    %28 = and i1 %value_phi.in, icmp ne ({}* inttoptr (i64 140412894876816 to {}*), {}* inttoptr (i64 140412894220176 to {}*))
; └└
  br i1 %28, label %L27, label %L234

L27:                                              ; preds = %L19
; ┌ @ abstractarray.jl:75 within `axes'
; │┌ @ array.jl:155 within `size'
    %29 = bitcast {}* %14 to {}**
    %30 = getelementptr inbounds {}*, {}** %29, i64 3
    %31 = bitcast {}** %30 to i64*
    %32 = load i64, i64* %31, align 8
; └└
; ┌ @ tuple.jl:328 within `=='
; │┌ @ tuple.jl:332 within `_eq'
; ││┌ @ range.jl:755 within `=='
     switch i64 %20, label %L39 [
    i64 0, label %L32
    i64 1, label %L36
  ]

L32:                                              ; preds = %L27
; │││┌ @ range.jl:506 within `isempty'
; ││││┌ @ operators.jl:303 within `>'
; │││││┌ @ int.jl:83 within `<'
        %33 = icmp eq i64 %32, 0
; │││└└└
     br label %L42

L36:                                              ; preds = %L27
; ││└
; ││┌ @ range.jl:756 within `=='
; │││┌ @ range.jl:769 within `_has_length_one'
; ││││┌ @ promotion.jl:391 within `=='
       %34 = icmp eq i64 %32, 1
; │││└└
     br label %L42

L39:                                              ; preds = %L27
; ││└
; ││┌ @ range.jl:757 within `==' @ promotion.jl:391
     %35 = icmp eq i64 %20, %32
; │││ @ range.jl:757 within `=='
     br label %L42

L42:                                              ; preds = %L39, %L36, %L32
     %value_phi2.in = phi i1 [ %33, %L32 ], [ %34, %L36 ], [ %35, %L39 ]
; │└└
; │┌ @ tuple.jl:333 within `_eq'
    %36 = and i1 %value_phi2.in, icmp ne ({}* inttoptr (i64 140412894876816 to {}*), {}* inttoptr (i64 140412894220176 to {}*))
; └└
  br i1 %36, label %L53, label %L234

L53:                                              ; preds = %L42
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:725
; ┌ @ int.jl:87 within `+'
   %37 = add nsw i64 %20, -3
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:729
; ┌ @ int.jl:442 within `<='
   %38 = icmp slt i64 %37, 1
; └
  br i1 %38, label %L218.preheader, label %L64.lr.ph

L64.lr.ph:                                        ; preds = %L53
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:730
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:285 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl within `_preprocessindices'
    %39 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %5, i64 0, i64 0, i64 0
; └└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:286 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:273 within `_pointer'
; ││┌ @ indices.jl:457 within `LinearIndices' @ indices.jl:448 @ indices.jl:0
     %.sroa.026.0..sroa_idx = getelementptr inbounds [1 x [1 x [1 x i64]]], [1 x [1 x [1 x i64]]]* %6, i64 0, i64 0, i64 0, i64 0
; ││└
; ││┌ @ indices.jl within `getindex'
     %40 = getelementptr inbounds [1 x i64], [1 x i64]* %7, i64 0, i64 0
; └└└
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:731
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:285 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl within `_preprocessindices'
    %41 = getelementptr inbounds [1 x [1 x i64]], [1 x [1 x i64]]* %8, i64 0, i64 0, i64 0
; └└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:286 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:273 within `_pointer'
; ││┌ @ indices.jl:457 within `LinearIndices' @ indices.jl:448 @ indices.jl:0
     %.sroa.023.0..sroa_idx = getelementptr inbounds [1 x [1 x [1 x i64]]], [1 x [1 x [1 x i64]]]* %9, i64 0, i64 0, i64 0, i64 0
; ││└
; ││┌ @ indices.jl within `getindex'
     %42 = getelementptr inbounds [1 x i64], [1 x i64]* %10, i64 0, i64 0
; └└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl within `vstorec'
   %.sroa.0.0..sroa_idx = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %11, i64 0, i64 0, i64 0
   %.sroa.2.0..sroa_idx22 = getelementptr inbounds [1 x [2 x i64]], [1 x [2 x i64]]* %11, i64 0, i64 0, i64 1
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:729
  br label %L74

L60.L218.preheader_crit_edge:                     ; preds = %L197
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:730
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:285 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:263 within `_preprocessindices'
    store i64 %value_phi654, i64* %39, align 8
; └└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:286 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:273 within `_pointer'
; ││┌ @ indices.jl:457 within `LinearIndices' @ indices.jl:448 @ indices.jl:448
     store i64 %60, i64* %.sroa.026.0..sroa_idx, align 8
; ││└
; ││┌ @ indices.jl:476 within `getindex'
     store i64 %value_phi654, i64* %40, align 8
; └└└
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:731
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:285 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:263 within `_preprocessindices'
    store i64 %value_phi654, i64* %41, align 8
; └└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:286 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:273 within `_pointer'
; ││┌ @ indices.jl:457 within `LinearIndices' @ indices.jl:448 @ indices.jl:448
     store i64 %70, i64* %.sroa.023.0..sroa_idx, align 8
; ││└
; ││┌ @ indices.jl:476 within `getindex'
     store i64 %value_phi654, i64* %42, align 8
; └└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:101 within `vstorec'
   store i64 %value_phi553, i64* %.sroa.0.0..sroa_idx, align 8
   store i64 %76, i64* %.sroa.2.0..sroa_idx22, align 8
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:735
; ┌ @ abstractarray.jl:303 within `lastindex'
; │┌ @ abstractarray.jl:268 within `eachindex'
; ││┌ @ abstractarray.jl:95 within `axes1'
; │││┌ @ abstractarray.jl:75 within `axes'
; ││││┌ @ array.jl:155 within `size'
       %.pre = load i64, i64* %19, align 8
; └└└└└
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:729
  br label %L218.preheader

L218.preheader:                                   ; preds = %L60.L218.preheader_crit_edge, %L53
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:735
; ┌ @ abstractarray.jl:303 within `lastindex'
; │┌ @ abstractarray.jl:268 within `eachindex'
; ││┌ @ abstractarray.jl:95 within `axes1'
; │││┌ @ abstractarray.jl:75 within `axes'
; ││││┌ @ array.jl:155 within `size'
       %43 = phi i64 [ %.pre, %L60.L218.preheader_crit_edge ], [ %20, %L53 ]
       %value_phi5.lcssa = phi i64 [ %98, %L60.L218.preheader_crit_edge ], [ 1, %L53 ]
       %value_phi6.lcssa = phi i64 [ %99, %L60.L218.preheader_crit_edge ], [ 1, %L53 ]
; └└└└└
; ┌ @ int.jl:442 within `<='
   %44 = icmp sgt i64 %value_phi6.lcssa, %43
; └
  br i1 %44, label %L237, label %L225.lr.ph

L225.lr.ph:                                       ; preds = %L218.preheader
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:736
; ┌ @ array.jl within `getindex'
   %45 = bitcast {}* %14 to { i8*, i64, i16, i16, i32 }*
   %46 = getelementptr inbounds { i8*, i64, i16, i16, i32 }, { i8*, i64, i16, i16, i32 }* %45, i64 0, i32 1
   %47 = load i64, i64* %46, align 8
   %48 = bitcast {}* %14 to i8**
   %49 = load i8*, i8** %48, align 8
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:737
; ┌ @ array.jl within `getindex'
   %50 = bitcast {}* %16 to { i8*, i64, i16, i16, i32 }*
   %51 = getelementptr inbounds { i8*, i64, i16, i16, i32 }, { i8*, i64, i16, i16, i32 }* %50, i64 0, i32 1
   %52 = load i64, i64* %51, align 8
; └
; ┌ @ array.jl within `setindex!'
   %53 = bitcast {}* %12 to { i8*, i64, i16, i16, i32 }*
   %54 = getelementptr inbounds { i8*, i64, i16, i16, i32 }, { i8*, i64, i16, i16, i32 }* %53, i64 0, i32 1
   %55 = load i64, i64* %54, align 8
; └
; ┌ @ array.jl within `getindex'
   %56 = bitcast {}* %16 to double**
   %57 = load double*, double** %56, align 8
; └
; ┌ @ array.jl within `setindex!'
   %58 = bitcast {}* %12 to double**
   %59 = load double*, double** %58, align 8
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:735
  br label %L225

L74:                                              ; preds = %L197.L74_crit_edge, %L64.lr.ph
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:730
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:285 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:263 within `_preprocessindices'
; ││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; │││┌ @ abstractarray.jl:268 within `eachindex'
; ││││┌ @ abstractarray.jl:95 within `axes1'
; │││││┌ @ abstractarray.jl:75 within `axes'
; ││││││┌ @ array.jl:155 within `size'
         %60 = phi i64 [ %32, %L64.lr.ph ], [ %.pre228, %L197.L74_crit_edge ]
         %value_phi654 = phi i64 [ 1, %L64.lr.ph ], [ %99, %L197.L74_crit_edge ]
         %value_phi553 = phi i64 [ 1, %L64.lr.ph ], [ %98, %L197.L74_crit_edge ]
; │││└└└└
; │││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:212 within `checkindex'
; ││││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:206 within `last'
; │││││┌ @ int.jl:86 within `-'
        %61 = add nuw nsw i64 %value_phi654, 3
; ││││└└
; ││││┌ @ int.jl:442 within `<='
       %62 = icmp ugt i64 %61, %60
; │││└└
; │││ @ abstractarray.jl:566 within `checkbounds'
     br i1 %62, label %L83, label %L87

L83:                                              ; preds = %L74
; ││└
    store i64 %value_phi654, i64* %39, align 8
; ││┌ @ abstractarray.jl:566 within `checkbounds'
     %63 = call nonnull {}* @j_throw_boundserror_4265({}* nonnull %14, [1 x [1 x i64]]* nocapture readonly %5)
     call void @llvm.trap()
     unreachable

L87:                                              ; preds = %L74
; └└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:286 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:273 within `_pointer'
; ││┌ @ indices.jl:476 within `getindex'
; │││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; ││││┌ @ abstractarray.jl:623 within `checkindex'
; │││││┌ @ int.jl:442 within `<='
        %64 = icmp ugt i64 %value_phi654, %60
; ││││└└
; ││││ @ abstractarray.jl:566 within `checkbounds'
      br i1 %64, label %L102, label %L106

L102:                                             ; preds = %L87
; ││└└
; ││┌ @ indices.jl:457 within `LinearIndices' @ indices.jl:448 @ indices.jl:448
     store i64 %60, i64* %.sroa.026.0..sroa_idx, align 8
; ││└
; ││┌ @ indices.jl:476 within `getindex'
     store i64 %value_phi654, i64* %40, align 8
; │││┌ @ abstractarray.jl:566 within `checkbounds'
      %65 = call nonnull {}* @j_throw_boundserror_4264([1 x [1 x [1 x i64]]]* nocapture readonly %6, [1 x i64]* nocapture readonly %7)
      call void @llvm.trap()
      unreachable

L106:                                             ; preds = %L87
; ││└└
; ││┌ @ abstractarray.jl:1069 within `pointer'
; │││┌ @ pointer.jl:65 within `unsafe_convert'
      %66 = bitcast {}* %14 to i8**
      %67 = load i8*, i8** %66, align 8
; │││└
; │││┌ @ abstractarray.jl:1073 within `_memory_offset'
; ││││┌ @ int.jl:86 within `-'
       %68 = add nsw i64 %value_phi654, -1
; │││└└
; │││┌ @ pointer.jl:159 within `+'
      %69 = getelementptr i8, i8* %67, i64 %68
; │└└└
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:45 within `vload' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:45 @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:46
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:427 within `load'
; │││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:436 within `macro expansion'
      %ptr.i = bitcast i8* %69 to <4 x i8>*
      %res.i = load <4 x i8>, <4 x i8>* %ptr.i, align 1
; └└└└
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:731
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:285 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:263 within `_preprocessindices'
; ││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; │││┌ @ abstractarray.jl:268 within `eachindex'
; ││││┌ @ abstractarray.jl:95 within `axes1'
; │││││┌ @ abstractarray.jl:75 within `axes'
; ││││││┌ @ array.jl:155 within `size'
         %70 = load i64, i64* %19, align 8
; │││└└└└
; │││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:212 within `checkindex'
; ││││┌ @ int.jl:442 within `<='
       %71 = icmp ugt i64 %61, %70
; │││└└
; │││ @ abstractarray.jl:566 within `checkbounds'
     br i1 %71, label %L137, label %L141

L137:                                             ; preds = %L106
; ││└
    store i64 %value_phi654, i64* %41, align 8
; ││┌ @ abstractarray.jl:566 within `checkbounds'
     %72 = call nonnull {}* @j_throw_boundserror_4263({}* nonnull %16, [1 x [1 x i64]]* nocapture readonly %8)
     call void @llvm.trap()
     unreachable

L141:                                             ; preds = %L106
; └└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:286 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:273 within `_pointer'
; ││┌ @ indices.jl:476 within `getindex'
; │││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; ││││┌ @ abstractarray.jl:623 within `checkindex'
; │││││┌ @ int.jl:442 within `<='
        %73 = icmp ugt i64 %value_phi654, %70
; ││││└└
; ││││ @ abstractarray.jl:566 within `checkbounds'
      br i1 %73, label %L156, label %L160

L156:                                             ; preds = %L141
; ││└└
; ││┌ @ indices.jl:457 within `LinearIndices' @ indices.jl:448 @ indices.jl:448
     store i64 %70, i64* %.sroa.023.0..sroa_idx, align 8
; ││└
; ││┌ @ indices.jl:476 within `getindex'
     store i64 %value_phi654, i64* %42, align 8
; │││┌ @ abstractarray.jl:566 within `checkbounds'
      %74 = call nonnull {}* @j_throw_boundserror_4262([1 x [1 x [1 x i64]]]* nocapture readonly %9, [1 x i64]* nocapture readonly %10)
      call void @llvm.trap()
      unreachable

L160:                                             ; preds = %L141
; └└└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:101 within `vstorec'
; │┌ @ range.jl:5 within `Colon'
; ││┌ @ range.jl:284 within `UnitRange'
; │││┌ @ range.jl:289 within `unitrange_last'
; ││││┌ @ operators.jl:350 within `>='
; │││││┌ @ int.jl:442 within `<='
        %75 = icmp sgt i64 %value_phi553, 9223372036854775804
; ││││└└
      %.v = select i1 %75, i64 -1, i64 3
      %76 = add i64 %.v, %value_phi553
; │└└└
; │┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; ││┌ @ abstractarray.jl:268 within `eachindex'
; │││┌ @ abstractarray.jl:95 within `axes1'
; ││││┌ @ abstractarray.jl:75 within `axes'
; │││││┌ @ array.jl:155 within `size'
        %77 = load i64, i64* %23, align 8
; ││└└└└
; ││┌ @ abstractarray.jl:628 within `checkindex'
; │││┌ @ range.jl:506 within `isempty'
; ││││┌ @ operators.jl:303 within `>'
; │││││┌ @ int.jl:83 within `<'
        %78 = icmp slt i64 %76, %value_phi553
; │││└└└
; │││ @ abstractarray.jl:628 within `checkindex' @ abstractarray.jl:623
; │││┌ @ int.jl:442 within `<='
      %79 = icmp sgt i64 %value_phi553, 0
      %80 = icmp sle i64 %value_phi553, %77
; │││└
; │││┌ @ bool.jl:36 within `&'
      %81 = and i1 %79, %80
; │││└
; │││┌ @ int.jl:442 within `<='
      %82 = icmp sgt i64 %76, 0
      %83 = icmp sle i64 %76, %77
; │││└
; │││┌ @ bool.jl:36 within `&'
      %84 = and i1 %82, %83
; │││└
; │││ @ abstractarray.jl:628 within `checkindex'
; │││┌ @ bool.jl:36 within `&'
      %85 = and i1 %81, %84
; │││└
; │││┌ @ bool.jl:37 within `|'
      %86 = or i1 %78, %85
; ││└└
; ││ @ abstractarray.jl:566 within `checkbounds'
    br i1 %86, label %L197, label %L194

L194:                                             ; preds = %L160
; │└
   store i64 %value_phi553, i64* %.sroa.0.0..sroa_idx, align 8
   store i64 %76, i64* %.sroa.2.0..sroa_idx22, align 8
; │┌ @ abstractarray.jl:566 within `checkbounds'
    %87 = call nonnull {}* @j_throw_boundserror_4261({}* nonnull %12, [1 x [2 x i64]]* nocapture readonly %11)
    call void @llvm.trap()
    unreachable

L197:                                             ; preds = %L160
; └└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:286 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:273 within `_pointer'
; ││┌ @ abstractarray.jl:1069 within `pointer'
; │││┌ @ pointer.jl:65 within `unsafe_convert'
      %88 = bitcast {}* %16 to i8**
      %89 = load i8*, i8** %88, align 8
; │││└
; │││┌ @ abstractarray.jl:1073 within `_memory_offset'
; ││││┌ @ int.jl:88 within `*'
       %90 = shl i64 %value_phi654, 3
       %91 = add nsw i64 %90, -8
; │││└└
; │││┌ @ pointer.jl:159 within `+'
      %92 = getelementptr i8, i8* %89, i64 %91
; │└└└
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:45 within `vload' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:45 @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:46
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:427 within `load'
; │││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:436 within `macro expansion'
      %ptr.i29 = bitcast i8* %92 to <4 x double>*
      %res.i30 = load <4 x double>, <4 x double>* %ptr.i29, align 8
; └└└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:103 within `vstorec'
; │┌ @ abstractarray.jl:1069 within `pointer'
; ││┌ @ pointer.jl:65 within `unsafe_convert'
     %93 = bitcast {}* %12 to i8**
     %94 = load i8*, i8** %93, align 8
; ││└
; ││┌ @ abstractarray.jl:1073 within `_memory_offset'
; │││┌ @ int.jl:88 within `*'
      %95 = shl i64 %value_phi553, 3
      %96 = add i64 %95, -8
; ││└└
; ││┌ @ pointer.jl:159 within `+'
     %97 = getelementptr i8, i8* %94, i64 %96
; └└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:104 within `vstorec' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:96
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:519 within `maskedcompressstore'
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:536 within `macro expansion'
     %mask.i32 = trunc <4 x i8> %res.i to <4 x i1>
     %ptr.i33 = bitcast i8* %97 to double*
     call void @llvm.masked.compressstore.v4f64(<4 x double> %res.i30, double* %ptr.i33, <4 x i1> %mask.i32)
; └└└
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:732
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/simdvec.jl:468 within `sum'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/simdvec.jl:458 within `reduce'
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:808 within `reduce_add'
; │││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:838 within `macro expansion'
      %maski.i = bitcast <4 x i1> %mask.i32 to i4
      %maskipopcnt.i = call i4 @llvm.ctpop.i4(i4 %maski.i)
      %res.i31 = zext i4 %maskipopcnt.i to i64
; └└└└
; ┌ @ int.jl:87 within `+'
   %98 = add i64 %value_phi553, %res.i31
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:733
; ┌ @ int.jl:87 within `+'
   %99 = add nuw nsw i64 %value_phi654, 4
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:729
; ┌ @ int.jl:442 within `<='
   %100 = icmp sgt i64 %99, %37
; └
  br i1 %100, label %L60.L218.preheader_crit_edge, label %L197.L74_crit_edge

L197.L74_crit_edge:                               ; preds = %L197
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:730
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:285 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:263 within `_preprocessindices'
; ││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; │││┌ @ abstractarray.jl:268 within `eachindex'
; ││││┌ @ abstractarray.jl:95 within `axes1'
; │││││┌ @ abstractarray.jl:75 within `axes'
; ││││││┌ @ array.jl:155 within `size'
         %.pre228 = load i64, i64* %31, align 8
; └└└└└└└
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:729
  br label %L74

L225:                                             ; preds = %L230, %L225.lr.ph
  %value_phi1451 = phi i64 [ %value_phi6.lcssa, %L225.lr.ph ], [ %104, %L230 ]
  %value_phi1350 = phi i64 [ %value_phi5.lcssa, %L225.lr.ph ], [ %value_phi19, %L230 ]
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:736
; ┌ @ array.jl:809 within `getindex'
   %101 = add i64 %value_phi1451, -1
   %102 = icmp ult i64 %101, %47
   br i1 %102, label %idxend, label %oob

L227:                                             ; preds = %idxend
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:737
; ┌ @ array.jl:809 within `getindex'
   %103 = icmp ult i64 %101, %52
   br i1 %103, label %idxend16, label %oob15

L230:                                             ; preds = %idxend18, %idxend
   %value_phi19 = phi i64 [ %121, %idxend18 ], [ %value_phi1350, %idxend ]
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:740
; ┌ @ int.jl:87 within `+'
   %104 = add nuw i64 %value_phi1451, 1
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:735
; ┌ @ int.jl:442 within `<='
   %105 = icmp sgt i64 %104, %43
; └
  br i1 %105, label %L237, label %L225

L234:                                             ; preds = %L42, %L19
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724
  store {}* inttoptr (i64 140412839735792 to {}*), {}** %3, align 8
  %106 = call nonnull {}* @jl_apply_generic({}* inttoptr (i64 140412901149040 to {}*), {}** nonnull %3, i32 1)
  call void @jl_throw({}* %106)
  unreachable

L237:                                             ; preds = %L230, %L218.preheader
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!'
  ret {}* %12

oob:                                              ; preds = %L225
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:736
; ┌ @ array.jl:809 within `getindex'
   %107 = alloca i64, align 8
   store i64 %value_phi1451, i64* %107, align 8
   call void @jl_bounds_error_ints({}* %14, i64* nonnull %107, i64 1)
   unreachable

idxend:                                           ; preds = %L225
   %108 = getelementptr inbounds i8, i8* %49, i64 %101
   %109 = load i8, i8* %108, align 1
   %110 = and i8 %109, 1
   %111 = icmp eq i8 %110, 0
; └
  br i1 %111, label %L230, label %L227

oob15:                                            ; preds = %L227
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:737
; ┌ @ array.jl:809 within `getindex'
   %112 = alloca i64, align 8
   store i64 %value_phi1451, i64* %112, align 8
   call void @jl_bounds_error_ints({}* %16, i64* nonnull %112, i64 1)
   unreachable

idxend16:                                         ; preds = %L227
; └
; ┌ @ array.jl:847 within `setindex!'
   %113 = add i64 %value_phi1350, -1
   %114 = icmp ult i64 %113, %55
   br i1 %114, label %idxend18, label %oob17

oob17:                                            ; preds = %idxend16
   %115 = alloca i64, align 8
   store i64 %value_phi1350, i64* %115, align 8
   call void @jl_bounds_error_ints({}* %12, i64* nonnull %115, i64 1)
   unreachable

idxend18:                                         ; preds = %idxend16
; └
; ┌ @ array.jl:809 within `getindex'
   %116 = getelementptr inbounds double, double* %57, i64 %101
   %117 = bitcast double* %116 to i64*
   %118 = load i64, i64* %117, align 8
; └
; ┌ @ array.jl:847 within `setindex!'
   %119 = getelementptr inbounds double, double* %59, i64 %113
   %120 = bitcast double* %119 to i64*
   store i64 %118, i64* %120, align 8
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:738
; ┌ @ int.jl:87 within `+'
   %121 = add i64 %value_phi1350, 1
   br label %L230
; └
}
	.text
; ┌ @ runtests.jl:723 within `vcompress!'
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	movq	%rsi, -128(%rbp)
	movq	(%rsi), %rbx
	movq	8(%rsi), %rax
	movq	16(%rsi), %rdi
; └
; ┌ @ runtests.jl:724 within `vcompress!' @ runtests.jl:724
; │┌ @ abstractarray.jl:75 within `axes'
; ││┌ @ array.jl:155 within `size'
	movq	24(%rdi), %r8
	movq	24(%rbx), %rcx
; │└└
; │┌ @ tuple.jl:328 within `=='
; ││┌ @ tuple.jl:332 within `_eq'
; │││┌ @ range.jl:755 within `=='
	cmpq	$1, %rcx
	je	L66
	testq	%rcx, %rcx
	jne	L82
; ││││┌ @ range.jl:506 within `isempty'
; │││││┌ @ operators.jl:303 within `>'
; ││││││┌ @ int.jl:83 within `<'
	testq	%r8, %r8
	sete	%cl
; │└└└└└└
	testb	%cl, %cl
	jne	L96
	jmp	L882
; │┌ @ tuple.jl:328 within `=='
; ││┌ @ tuple.jl:332 within `_eq'
; │││┌ @ range.jl:756 within `=='
; ││││┌ @ range.jl:769 within `_has_length_one'
; │││││┌ @ promotion.jl:391 within `=='
L66:
	cmpq	$1, %r8
	sete	%cl
; │└└└└└
	testb	%cl, %cl
	jne	L96
	jmp	L882
; │┌ @ tuple.jl:328 within `=='
; ││┌ @ tuple.jl:332 within `_eq'
; │││┌ @ range.jl:757 within `==' @ promotion.jl:391
L82:
	cmpq	%r8, %rcx
	sete	%cl
; │└└└
	testb	%cl, %cl
	je	L882
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:0
L96:
	xorl	%ecx, %ecx
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:724
	testb	%cl, %cl
	jne	L882
; │┌ @ abstractarray.jl:75 within `axes'
; ││┌ @ array.jl:155 within `size'
	movq	24(%rax), %r11
; │└└
; │┌ @ tuple.jl:328 within `=='
; ││┌ @ tuple.jl:332 within `_eq'
; │││┌ @ range.jl:755 within `=='
	cmpq	$1, %r8
	je	L136
	testq	%r8, %r8
	jne	L152
; ││││┌ @ range.jl:506 within `isempty'
; │││││┌ @ operators.jl:303 within `>'
; ││││││┌ @ int.jl:83 within `<'
	testq	%r11, %r11
	sete	%cl
; │└└└└└└
	testb	%cl, %cl
	jne	L166
	jmp	L882
; │┌ @ tuple.jl:328 within `=='
; ││┌ @ tuple.jl:332 within `_eq'
; │││┌ @ range.jl:756 within `=='
; ││││┌ @ range.jl:769 within `_has_length_one'
; │││││┌ @ promotion.jl:391 within `=='
L136:
	cmpq	$1, %r11
	sete	%cl
; │└└└└└
	testb	%cl, %cl
	jne	L166
	jmp	L882
; │┌ @ tuple.jl:328 within `=='
; ││┌ @ tuple.jl:332 within `_eq'
; │││┌ @ range.jl:757 within `==' @ promotion.jl:391
L152:
	cmpq	%r11, %r8
	sete	%cl
; │└└└
	testb	%cl, %cl
	je	L882
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:0
L166:
	xorl	%ecx, %ecx
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:724
	testb	%cl, %cl
	jne	L882
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:729
; │┌ @ int.jl:442 within `<='
	movq	%r8, %rcx
	addq	$-3, %rcx
	movq	%rcx, -112(%rbp)
; │└
	jle	L471
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:0
	movl	$1, %r8d
	movl	$4, %esi
	nopl	(%rax)
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:730
; │┌ @ arrayops.jl:285 within `getindex'
; ││┌ @ arrayops.jl:263 within `_preprocessindices'
; │││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; ││││┌ @ arrayops.jl:212 within `checkindex'
; │││││┌ @ arrayops.jl:206 within `last'
; ││││││┌ @ int.jl:86 within `-'
L208:
	leaq	-3(%rsi), %r15
; │││││└└
; │││││┌ @ int.jl:442 within `<='
	cmpq	%r11, %rsi
; ││││└└
; ││││ @ abstractarray.jl:566 within `checkbounds'
	ja	L617
; │└└└
; │┌ @ arrayops.jl:286 within `getindex'
; ││┌ @ arrayops.jl:273 within `_pointer'
; │││┌ @ indices.jl:476 within `getindex'
; ││││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; │││││┌ @ abstractarray.jl:623 within `checkindex'
; ││││││┌ @ int.jl:442 within `<='
	cmpq	%r11, %r15
; │││││└└
; │││││ @ abstractarray.jl:566 within `checkbounds'
	ja	L645
; │└└└└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:731
; │┌ @ arrayops.jl:285 within `getindex'
; ││┌ @ arrayops.jl:263 within `_preprocessindices'
; │││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; ││││┌ @ abstractarray.jl:268 within `eachindex'
; │││││┌ @ abstractarray.jl:95 within `axes1'
; ││││││┌ @ abstractarray.jl:75 within `axes'
; │││││││┌ @ array.jl:155 within `size'
	movq	24(%rdi), %r9
; ││││└└└└
; ││││┌ @ arrayops.jl:212 within `checkindex'
; │││││┌ @ int.jl:442 within `<='
	cmpq	%r9, %rsi
; ││││└└
; ││││ @ abstractarray.jl:566 within `checkbounds'
	ja	L678
; │└└└
; │┌ @ arrayops.jl:286 within `getindex'
; ││┌ @ arrayops.jl:273 within `_pointer'
; │││┌ @ indices.jl:476 within `getindex'
; ││││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; │││││┌ @ abstractarray.jl:623 within `checkindex'
; ││││││┌ @ int.jl:442 within `<='
	cmpq	%r9, %r15
; │││││└└
; │││││ @ abstractarray.jl:566 within `checkbounds'
	ja	L703
; │└└└└
; │ @ runtests.jl:724 within `vcompress!' @ abstractarray.jl:0
	movq	%rax, %r10
	movq	(%rax), %rcx
	vpmovzxbd	-4(%rcx,%rsi), %xmm0 # xmm0 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:731
; │┌ @ arrayops.jl:101 within `vstorec'
; ││┌ @ range.jl:5 within `Colon'
; │││┌ @ range.jl:284 within `UnitRange'
; ││││┌ @ range.jl:289 within `unitrange_last'
; │││││┌ @ operators.jl:350 within `>='
; ││││││┌ @ int.jl:442 within `<='
	xorl	%ecx, %ecx
	movabsq	$9223372036854775805, %rax # imm = 0x7FFFFFFFFFFFFFFD
	cmpq	%rax, %r8
	setl	%cl
; │││││└└
	leaq	(%r8,%rcx,4), %r12
	addq	$-1, %r12
	movq	%rbx, %rax
; ││└└└
; ││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; │││┌ @ abstractarray.jl:268 within `eachindex'
; ││││┌ @ abstractarray.jl:95 within `axes1'
; │││││┌ @ abstractarray.jl:75 within `axes'
; ││││││┌ @ array.jl:155 within `size'
	movq	24(%rbx), %rbx
; │││└└└└
; │││┌ @ abstractarray.jl:628 within `checkindex' @ abstractarray.jl:623
; ││││┌ @ int.jl:442 within `<='
	testq	%r8, %r8
	setg	%cl
	cmpq	%rbx, %r8
	setle	%r13b
	testq	%r12, %r12
	setg	%dl
	cmpq	%rbx, %r12
	setle	%r14b
; ││││└
; ││││ @ abstractarray.jl:628 within `checkindex'
; ││││┌ @ range.jl:506 within `isempty'
; │││││┌ @ operators.jl:303 within `>'
; ││││││┌ @ int.jl:83 within `<'
	cmpq	%r8, %r12
; │││└└└└
; │││ @ abstractarray.jl:566 within `checkbounds'
	jl	L343
; ││└
; ││┌ @ abstractarray.jl within `checkbounds'
	andb	%r13b, %cl
	andb	%r14b, %dl
	andb	%cl, %dl
; ││└
; ││┌ @ abstractarray.jl:566 within `checkbounds'
	je	L736
; │└└
; │┌ @ arrayops.jl:286 within `getindex'
; ││┌ @ arrayops.jl:273 within `_pointer'
; │││┌ @ abstractarray.jl:1069 within `pointer'
; ││││┌ @ pointer.jl:65 within `unsafe_convert'
L343:
	movq	(%rdi), %rcx
; ││└└└
; ││┌ @ arrayops.jl:45 within `vload' @ arrayops.jl:45 @ arrayops.jl:46
; │││┌ @ LLVM_intrinsics.jl:427 within `load'
; ││││┌ @ LLVM_intrinsics.jl:436 within `macro expansion'
	vmovdqu	-32(%rcx,%rsi,8), %ymm1
	movq	%rax, %rbx
; │└└└└
; │┌ @ arrayops.jl:103 within `vstorec'
; ││┌ @ abstractarray.jl:1069 within `pointer'
; │││┌ @ pointer.jl:65 within `unsafe_convert'
	movq	(%rax), %rcx
; │└└└
; │┌ @ arrayops.jl:104 within `vstorec' @ arrayops.jl:96
; ││┌ @ LLVM_intrinsics.jl:519 within `maskedcompressstore'
; │││┌ @ LLVM_intrinsics.jl:536 within `macro expansion'
	vpslld	$31, %xmm0, %xmm0
	vpmovd2m	%xmm0, %k1
	vcompresspd	%ymm1, -8(%rcx,%r8,8) {%k1}
; │└└└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:732
; │┌ @ simdvec.jl:468 within `sum'
; ││┌ @ simdvec.jl:458 within `reduce'
; │││┌ @ LLVM_intrinsics.jl:808 within `reduce_add'
; ││││┌ @ LLVM_intrinsics.jl:838 within `macro expansion'
	kmovd	%k1, %ecx
	andb	$15, %cl
	movzbl	%cl, %ecx
	xorl	%edx, %edx
	popcntl	%ecx, %edx
; │└└└└
; │┌ @ int.jl:87 within `+'
	addq	%r8, %rdx
; │└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:729
; │┌ @ int.jl:442 within `<='
	leaq	1(%rsi), %rcx
	cmpq	-112(%rbp), %rcx
; │└
	jg	L425
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:0
	movq	%r10, %rax
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:730
; │┌ @ arrayops.jl:285 within `getindex'
; ││┌ @ arrayops.jl:263 within `_preprocessindices'
; │││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; ││││┌ @ abstractarray.jl:268 within `eachindex'
; │││││┌ @ abstractarray.jl:95 within `axes1'
; ││││││┌ @ abstractarray.jl:75 within `axes'
; │││││││┌ @ array.jl:155 within `size'
	movq	24(%r10), %r11
; │└└└└└└└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:729
	addq	$4, %rsi
	movq	%rdx, %r8
	jmp	L208
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:730
; │┌ @ arrayops.jl:285 within `getindex'
; ││┌ @ arrayops.jl:263 within `_preprocessindices'
L425:
	movq	%r15, -88(%rbp)
; │└└
; │┌ @ arrayops.jl:286 within `getindex'
; ││┌ @ arrayops.jl:273 within `_pointer'
; │││┌ @ indices.jl:457 within `LinearIndices' @ indices.jl:448 @ indices.jl:448
	movq	%r11, -80(%rbp)
; │││└
; │││┌ @ indices.jl:476 within `getindex'
	movq	%r15, -72(%rbp)
; │└└└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:731
; │┌ @ arrayops.jl:285 within `getindex'
; ││┌ @ arrayops.jl:263 within `_preprocessindices'
	movq	%r15, -64(%rbp)
; │└└
; │┌ @ arrayops.jl:286 within `getindex'
; ││┌ @ arrayops.jl:273 within `_pointer'
; │││┌ @ indices.jl:457 within `LinearIndices' @ indices.jl:448 @ indices.jl:448
	movq	%r9, -56(%rbp)
; │││└
; │││┌ @ indices.jl:476 within `getindex'
	movq	%r15, -48(%rbp)
; │└└└
; │┌ @ arrayops.jl:101 within `vstorec'
	movq	%r8, -104(%rbp)
	movq	%r12, -96(%rbp)
; │└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:735
; │┌ @ abstractarray.jl:303 within `lastindex'
; ││┌ @ abstractarray.jl:268 within `eachindex'
; │││┌ @ abstractarray.jl:95 within `axes1'
; ││││┌ @ abstractarray.jl:75 within `axes'
; │││││┌ @ array.jl:155 within `size'
	movq	24(%rdi), %r8
	movq	%r10, %rax
; │└└└└└
; │┌ @ int.jl:442 within `<='
	cmpq	%r8, %rcx
; │└
	jg	L596
	jmp	L486
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:0
L471:
	movl	$1, %edx
	movl	$1, %ecx
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:735
; │┌ @ int.jl:442 within `<='
	cmpq	%r8, %rcx
; │└
	jg	L596
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:736
; │┌ @ array.jl within `getindex'
L486:
	movq	(%rax), %r9
	movq	8(%rax), %r12
	movq	(%rdi), %r10
	movq	8(%rdi), %r11
	movq	(%rbx), %r14
	movq	8(%rbx), %r15
; │└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:735
	decq	%rcx
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:736
; │┌ @ array.jl:809 within `getindex'
	cmpq	%r12, %rcx
	jb	L553
	jmp	L768
	nopl	(%rax,%rax)
; │└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:735
; │┌ @ int.jl:442 within `<='
L528:
	leaq	1(%rcx), %rsi
	addq	$2, %rcx
	cmpq	%r8, %rcx
	movq	%rsi, %rcx
; │└
	jg	L596
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:736
; │┌ @ array.jl:809 within `getindex'
	cmpq	%r12, %rcx
	jae	L768
L553:
	testb	$1, (%r9,%rcx)
; │└
	je	L528
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:737
; │┌ @ array.jl:809 within `getindex'
	cmpq	%r11, %rcx
	jae	L808
; │└
; │┌ @ array.jl:847 within `setindex!'
	leaq	-1(%rdx), %rsi
	cmpq	%r15, %rsi
	jae	L845
; │└
; │┌ @ array.jl:809 within `getindex'
	movq	(%r10,%rcx,8), %rsi
; │└
; │┌ @ array.jl:847 within `setindex!'
	movq	%rsi, -8(%r14,%rdx,8)
; │└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:738
; │┌ @ int.jl:87 within `+'
	incq	%rdx
	jmp	L528
; │└
; │ @ runtests.jl:724 within `vcompress!'
L596:
	movq	%rbx, %rax
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	vzeroupper
	retq
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:730
; │┌ @ arrayops.jl:285 within `getindex'
; ││┌ @ arrayops.jl:263 within `_preprocessindices'
L617:
	movq	%r15, -88(%rbp)
; │││┌ @ abstractarray.jl:566 within `checkbounds'
	movabsq	$throw_boundserror, %rcx
	leaq	-88(%rbp), %rsi
	movq	%rax, %rdi
	vzeroupper
	callq	*%rcx
	ud2
; │└└└
; │┌ @ arrayops.jl:286 within `getindex'
; ││┌ @ arrayops.jl:273 within `_pointer'
; │││┌ @ indices.jl:457 within `LinearIndices' @ indices.jl:448 @ indices.jl:448
L645:
	movq	%r11, -80(%rbp)
; │││└
; │││┌ @ indices.jl:476 within `getindex'
	movq	%r15, -72(%rbp)
; ││││┌ @ abstractarray.jl:566 within `checkbounds'
	movabsq	$throw_boundserror, %rax
	leaq	-80(%rbp), %rdi
	leaq	-72(%rbp), %rsi
	vzeroupper
	callq	*%rax
	ud2
; │└└└└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:731
; │┌ @ arrayops.jl:285 within `getindex'
; ││┌ @ arrayops.jl:263 within `_preprocessindices'
L678:
	movq	%r15, -64(%rbp)
; │││┌ @ abstractarray.jl:566 within `checkbounds'
	movabsq	$throw_boundserror, %rax
	leaq	-64(%rbp), %rsi
	vzeroupper
	callq	*%rax
	ud2
; │└└└
; │┌ @ arrayops.jl:286 within `getindex'
; ││┌ @ arrayops.jl:273 within `_pointer'
; │││┌ @ indices.jl:457 within `LinearIndices' @ indices.jl:448 @ indices.jl:448
L703:
	movq	%r9, -56(%rbp)
; │││└
; │││┌ @ indices.jl:476 within `getindex'
	movq	%r15, -48(%rbp)
; ││││┌ @ abstractarray.jl:566 within `checkbounds'
	movabsq	$throw_boundserror, %rax
	leaq	-56(%rbp), %rdi
	leaq	-48(%rbp), %rsi
	vzeroupper
	callq	*%rax
	ud2
; │└└└└
; │┌ @ arrayops.jl:101 within `vstorec'
L736:
	movq	%r8, -104(%rbp)
	movq	%r12, -96(%rbp)
; ││┌ @ abstractarray.jl:566 within `checkbounds'
	movabsq	$throw_boundserror, %rcx
	leaq	-104(%rbp), %rsi
	movq	%rax, %rdi
	vzeroupper
	callq	*%rcx
	ud2
; │└└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:736
; │┌ @ array.jl:809 within `getindex'
L768:
	movq	%rsp, %rdx
	leaq	-16(%rdx), %rsi
	movq	%rsi, %rsp
	incq	%rcx
	movq	%rcx, -16(%rdx)
	movabsq	$jl_bounds_error_ints, %rcx
	movl	$1, %edx
	movq	%rax, %rdi
	vzeroupper
	callq	*%rcx
; │└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:737
; │┌ @ array.jl:809 within `getindex'
L808:
	movq	%rsp, %rax
	leaq	-16(%rax), %rsi
	movq	%rsi, %rsp
	incq	%rcx
	movq	%rcx, -16(%rax)
	movabsq	$jl_bounds_error_ints, %rax
	movl	$1, %edx
	vzeroupper
	callq	*%rax
; │└
; │┌ @ array.jl:847 within `setindex!'
L845:
	movq	%rsp, %rcx
	leaq	-16(%rcx), %rsi
	movq	%rsi, %rsp
	movq	%rdx, -16(%rcx)
	movabsq	$jl_bounds_error_ints, %rcx
	movl	$1, %edx
	movq	%rbx, %rdi
	vzeroupper
	callq	*%rcx
; │└
; │ @ runtests.jl:724 within `vcompress!' @ array.jl:0
L882:
	movabsq	$140412839735792, %rax  # imm = 0x7FB4696F31F0
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:724
	movq	%rax, -120(%rbp)
	movabsq	$jl_apply_generic, %rax
	movabsq	$jl_system_image_data, %rdi
	leaq	-120(%rbp), %rsi
	movl	$1, %edx
	callq	*%rax
	movabsq	$jl_throw, %rcx
	movq	%rax, %rdi
	callq	*%rcx
; └
Test Summary:       | Pass  Total
Real-world examples |   17     17
Test Summary:   | Pass  Total
Vector shuffles |  202    202
    Testing SIMD tests passed 
