Julia Version 1.6.0-DEV.846
Commit b36515781c (2020-09-05 13:16 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_Cq0vic/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_Cq0vic/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723272184838013
curgen: 20 fitness: 0.21723272184838013
curgen: 30 fitness: 0.21723272184838013
curgen: 40 fitness: 0.2172327521511712
curgen: 50 fitness: 0.2172327521511712
CoordinateCreature{Vector{Float64}}([0.22268887641747542], -0.2172327521511712) 0.22268887641747542 -0.2172327521511712
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257454473399316
curgen: 100 fitness: 3.25765038316771
curgen: 150 fitness: 3.2580765273057537
curgen: 200 fitness: 3.2583339377570093
curgen: 250 fitness: 3.258344811669573
curgen: 300 fitness: 3.2583458162198524
curgen: 350 fitness: 3.258352149107247
curgen: 400 fitness: 3.2583818261751354
curgen: 450 fitness: 3.2584296584053405
curgen: 500 fitness: 3.258435354640213
CoordinateCreature{Vector{Float64}}([0.2233914332365826, -0.22275513807424527, 0.2224587174774774, 0.22274319709924056, -0.2225076283615403, -0.22254520536994407, 0.2224578344920547, 0.22274725561709796, 0.22270539663788402, 0.22261156773315402, -0.2224255995245305, -0.22268640422775304, -0.22232413145916824, -0.2223539035432948, 0.22328764406985852], -3.2584361881968418) [0.2233914332365826, -0.22275513807424527, 0.2224587174774774, 0.22274319709924056, -0.2225076283615403, -0.22254520536994407, 0.2224578344920547, 0.22274725561709796, 0.22270539663788402, 0.22261156773315402, -0.2224255995245305, -0.22268640422775304, -0.22232413145916824, -0.2223539035432948, 0.22328764406985852] -3.2584361881968418
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.005014996869704191
curgen: 100 fitness: -0.004440380666380861
curgen: 150 fitness: -0.001989771119156103
curgen: 200 fitness: -0.001989771119156103
curgen: 250 fitness: -0.0019415623795566717
curgen: 300 fitness: -0.0019266689287462668
curgen: 350 fitness: -0.0018038148192260905
curgen: 400 fitness: -0.0018038148192260905
curgen: 450 fitness: -0.0009731479729282455
curgen: 500 fitness: -0.0006552649319644388
CoordinateCreature{Vector{Float64}}([3.6707779895416015e-7, -0.0005678031482186321, 5.446515891152919e-5, 0.00034625885970848355, 0.0003533344080517871, -0.0003195483656118575, 0.0009999767865045582, -0.00011523851558856803, -0.0003781329934559527, 0.0002534543475975046, 0.00033008668271217905, 0.0001435652765153445, 0.0002962302300393128, 0.0002149482544757371, 0.0010708349656621194], 0.0006552649319644388) [3.6707779895416015e-7, -0.0005678031482186321, 5.446515891152919e-5, 0.00034625885970848355, 0.0003533344080517871, -0.0003195483656118575, 0.0009999767865045582, -0.00011523851558856803, -0.0003781329934559527, 0.0002534543475975046, 0.00033008668271217905, 0.0001435652765153445, 0.0002962302300393128, 0.0002149482544757371, 0.0010708349656621194] 0.0006552649319644388
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
