Julia Version 1.6.0-DEV.842
Commit 594ac899ff (2020-09-04 17:00 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_E6elgg/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_E6elgg/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21720157862339545
curgen: 20 fitness: 0.21720157862339545
curgen: 30 fitness: 0.21723164016859606
curgen: 40 fitness: 0.21723164016859606
curgen: 50 fitness: 0.21723337113206567
CoordinateCreature{Vector{Float64}}([0.22247197969800273], -0.21723337113206567) 0.22247197969800273 -0.21723337113206567
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.258157351017732
curgen: 100 fitness: 3.2584037800499503
curgen: 150 fitness: 3.258431801091589
curgen: 200 fitness: 3.2584535549800764
curgen: 250 fitness: 3.258457877194064
curgen: 300 fitness: 3.258460438820829
curgen: 350 fitness: 3.2584673483687996
curgen: 400 fitness: 3.2584673483687996
curgen: 450 fitness: 3.2584673483687996
curgen: 500 fitness: 3.258475902262482
CoordinateCreature{Vector{Float64}}([-0.22268999250511595, -0.2223549766566614, -0.22248157594202383, -0.22268850564574266, -0.2225711730160066, -0.2228416856960531, 0.22258408827711482, 0.22253584706857119, -0.2224755674598942, 0.2226794568049864, 0.22297923015922244, 0.22217562564356494, -0.22275601975892076, -0.22253119322948575, -0.222838558764798], -3.258475902262482) [-0.22268999250511595, -0.2223549766566614, -0.22248157594202383, -0.22268850564574266, -0.2225711730160066, -0.2228416856960531, 0.22258408827711482, 0.22253584706857119, -0.2224755674598942, 0.2226794568049864, 0.22297923015922244, 0.22217562564356494, -0.22275601975892076, -0.22253119322948575, -0.222838558764798] -3.258475902262482
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.002091437790170403
curgen: 100 fitness: -0.001577448002365145
curgen: 150 fitness: -0.0013122468115511765
curgen: 200 fitness: -0.0007718441616759719
curgen: 250 fitness: -0.0007718441616759719
curgen: 300 fitness: -0.0007296145082875682
curgen: 350 fitness: -0.0005946040949424969
curgen: 400 fitness: -0.0005946040949424969
curgen: 450 fitness: -0.0005946040949424969
curgen: 500 fitness: -0.0004529612690760132
CoordinateCreature{Vector{Float64}}([-0.0004602492150159971, -0.0006571014095862662, -0.00012920450936772666, 0.00036022274437322603, 0.00026410495838072225, 0.00047642976314173194, -0.00018044516057082532, 0.0002626507190490847, 0.00018114763471982487, -0.0003685119882982531, -0.0001790633132375955, -0.00019229120604417592, 0.00037818067065426323, 0.000794820258758922, -0.00028705577256106247], 0.0004529612690760132) [-0.0004602492150159971, -0.0006571014095862662, -0.00012920450936772666, 0.00036022274437322603, 0.00026410495838072225, 0.00047642976314173194, -0.00018044516057082532, 0.0002626507190490847, 0.00018114763471982487, -0.0003685119882982531, -0.0001790633132375955, -0.00019229120604417592, 0.00037818067065426323, 0.000794820258758922, -0.00028705577256106247] 0.0004529612690760132
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
