Julia Version 1.6.0-DEV.952
Commit 4ef8313c94 (2020-09-17 11:39 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_qjTb5a/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_qjTb5a/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21722415038622048
curgen: 20 fitness: 0.21722749935215796
curgen: 30 fitness: 0.21722749935215796
curgen: 40 fitness: 0.21722749935215796
curgen: 50 fitness: 0.21723362808404395
CoordinateCreature{Vector{Float64}}([0.22254985320171314], -0.21723362808404395) 0.22254985320171314 -0.21723362808404395
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257335063309299
curgen: 100 fitness: 3.2577566552756267
curgen: 150 fitness: 3.2581500245435593
curgen: 200 fitness: 3.2583946338599095
curgen: 250 fitness: 3.2584407376974722
curgen: 300 fitness: 3.258447608799966
curgen: 350 fitness: 3.258455029256532
curgen: 400 fitness: 3.258463272686421
curgen: 450 fitness: 3.258475999718414
curgen: 500 fitness: 3.258475999718414
CoordinateCreature{Vector{Float64}}([-0.22228269872259152, -0.22254192446584536, -0.22270020939134388, -0.2225555049296686, 0.22256807794234623, -0.2227899887273509, -0.22263681287003914, 0.2224976015960808, 0.22280137543986345, 0.22246284948849612, 0.22270048485300936, -0.22241454329228144, 0.22261043709233322, 0.2226418502769265, -0.2225179293139466], -3.258491631089461) [-0.22228269872259152, -0.22254192446584536, -0.22270020939134388, -0.2225555049296686, 0.22256807794234623, -0.2227899887273509, -0.22263681287003914, 0.2224976015960808, 0.22280137543986345, 0.22246284948849612, 0.22270048485300936, -0.22241454329228144, 0.22261043709233322, 0.2226418502769265, -0.2225179293139466] -3.258491631089461
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.00038235989688928385
curgen: 100 fitness: -0.00038235989688928385
curgen: 150 fitness: -0.00020709076727598585
curgen: 200 fitness: -0.00020709076727598585
curgen: 250 fitness: -0.00015192615694559208
curgen: 300 fitness: -0.00015192615694559208
curgen: 350 fitness: -0.00015192615694559208
curgen: 400 fitness: -0.00015192615694559208
curgen: 450 fitness: -0.00015192615694559208
curgen: 500 fitness: -0.00015192615694559208
CoordinateCreature{Vector{Float64}}([0.00015752648648798538, 0.0002807232567651951, 0.00023798972304332018, -0.00016023339399132044, 0.0003367354725873368, -0.00039996318147897977, 0.00030740660139491984, -0.00025139182206601596, -8.246459645745718e-5, -0.00022916541162521423, -0.00011152488445564937, 9.421803143663801e-6, -0.00026813629856402234, 2.0341908985419162e-5, 6.812483467572544e-5], 0.00015192615694559208) [0.00015752648648798538, 0.0002807232567651951, 0.00023798972304332018, -0.00016023339399132044, 0.0003367354725873368, -0.00039996318147897977, 0.00030740660139491984, -0.00025139182206601596, -8.246459645745718e-5, -0.00022916541162521423, -0.00011152488445564937, 9.421803143663801e-6, -0.00026813629856402234, 2.0341908985419162e-5, 6.812483467572544e-5] 0.00015192615694559208
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
