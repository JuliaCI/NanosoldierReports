Julia Version 1.6.0-DEV.929
Commit a7ce2a2de7 (2020-09-16 16:46 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_o5oWMk/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_o5oWMk/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723041405637553
curgen: 20 fitness: 0.21723041405637553
curgen: 30 fitness: 0.21723041405637553
curgen: 40 fitness: 0.21723041405637553
curgen: 50 fitness: 0.21723041405637553
CoordinateCreature{Vector{Float64}}([0.22281779822290648], -0.21723041405637553) 0.22281779822290648 -0.21723041405637553
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257912014006394
curgen: 100 fitness: 3.258068408228111
curgen: 150 fitness: 3.2581772616284153
curgen: 200 fitness: 3.258195882077295
curgen: 250 fitness: 3.258247780355655
curgen: 300 fitness: 3.2583435393252422
curgen: 350 fitness: 3.2583837620404292
curgen: 400 fitness: 3.2583837620404292
curgen: 450 fitness: 3.2583843277777764
curgen: 500 fitness: 3.258452903016674
CoordinateCreature{Vector{Float64}}([0.22282892127976822, -0.22291763088655484, -0.22309359895785708, -0.22253713997715735, -0.22246218141914703, -0.22225668252620887, 0.22238107992514994, 0.22248922550983197, -0.22257496281246958, 0.22265138994580136, -0.2224870430474991, 0.22305276060126691, -0.222389855141067, 0.22296362189224397, 0.2227969927631806], -3.258452903016674) [0.22282892127976822, -0.22291763088655484, -0.22309359895785708, -0.22253713997715735, -0.22246218141914703, -0.22225668252620887, 0.22238107992514994, 0.22248922550983197, -0.22257496281246958, 0.22265138994580136, -0.2224870430474991, 0.22305276060126691, -0.222389855141067, 0.22296362189224397, 0.2227969927631806] -3.258452903016674
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0024434307844103387
curgen: 100 fitness: -0.0011782434499991723
curgen: 150 fitness: -0.0011782434499991723
curgen: 200 fitness: -0.0011782434499991723
curgen: 250 fitness: -0.0009488846052647659
curgen: 300 fitness: -0.0009422102470182381
curgen: 350 fitness: -0.0009422102470182381
curgen: 400 fitness: -0.0009422102470182381
curgen: 450 fitness: -0.0009422102470182381
curgen: 500 fitness: -0.0009422102470182381
CoordinateCreature{Vector{Float64}}([-0.00017755433860339008, -0.00034111960956319384, 0.00014032295426585686, -0.0002497860249130193, 0.0002095314644133758, 0.0001308516393012278, 0.0004214291496830308, -4.1784756515162585e-5, -0.0008540694781340893, -0.0002933489390412186, 0.00019701067127185642, 0.000546924337720607, 0.0014338968328641468, 7.190856129712591e-5, 0.0010316240980618226], 0.0009422102470182381) [-0.00017755433860339008, -0.00034111960956319384, 0.00014032295426585686, -0.0002497860249130193, 0.0002095314644133758, 0.0001308516393012278, 0.0004214291496830308, -4.1784756515162585e-5, -0.0008540694781340893, -0.0002933489390412186, 0.00019701067127185642, 0.000546924337720607, 0.0014338968328641468, 7.190856129712591e-5, 0.0010316240980618226] 0.0009422102470182381
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
