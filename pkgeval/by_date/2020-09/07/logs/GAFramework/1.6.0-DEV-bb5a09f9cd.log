Julia Version 1.6.0-DEV.854
Commit bb5a09f9cd (2020-09-07 12:33 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_g5iCGP/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_g5iCGP/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2172330420074006
curgen: 20 fitness: 0.2172330420074006
curgen: 30 fitness: 0.2172330420074006
curgen: 40 fitness: 0.2172330420074006
curgen: 50 fitness: 0.2172330420074006
CoordinateCreature{Vector{Float64}}([0.22266325798789663], -0.2172330420074006) 0.22266325798789663 -0.2172330420074006
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257959979803489
curgen: 100 fitness: 3.2581530484527335
curgen: 150 fitness: 3.2582457640337545
curgen: 200 fitness: 3.258260491537855
curgen: 250 fitness: 3.25829964630901
curgen: 300 fitness: 3.2583492496059328
curgen: 350 fitness: 3.2583723372819295
curgen: 400 fitness: 3.258381915064785
curgen: 450 fitness: 3.258410456863711
curgen: 500 fitness: 3.2584166933147065
CoordinateCreature{Vector{Float64}}([0.22195931097147295, 0.22280914268375912, 0.22255790126115169, -0.22240114893795396, 0.22329052824320905, -0.22263088369707937, -0.22233876766894672, 0.22305331945418216, 0.22250989702849203, -0.22252983072681742, 0.22291764671434205, 0.2227917441193571, -0.2219698358311494, -0.22281951099007322, 0.2228371540775602], -3.2584166933147065) [0.22195931097147295, 0.22280914268375912, 0.22255790126115169, -0.22240114893795396, 0.22329052824320905, -0.22263088369707937, -0.22233876766894672, 0.22305331945418216, 0.22250989702849203, -0.22252983072681742, 0.22291764671434205, 0.2227917441193571, -0.2219698358311494, -0.22281951099007322, 0.2228371540775602] -3.2584166933147065
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.00594013621338263
curgen: 100 fitness: -0.003960793204356605
curgen: 150 fitness: -0.0032670963739462877
curgen: 200 fitness: -0.003263661477944879
curgen: 250 fitness: -0.00288503692223685
curgen: 300 fitness: -0.00288503692223685
curgen: 350 fitness: -0.0021983277394781453
curgen: 400 fitness: -0.0006917081709048034
curgen: 450 fitness: -0.0005851533107659179
curgen: 500 fitness: -0.0005848760940807551
CoordinateCreature{Vector{Float64}}([0.00012793503593493865, 0.00035012459656187656, -0.00012164862675377933, 0.00032999438910160403, -0.0010707868775715155, -0.00011562763097902086, 2.6989249003809144e-5, 2.2252997952251167e-5, 7.5918623849785e-5, -2.548026903133934e-5, 0.000273791986128162, 0.0010962765310676124, 8.264069884682094e-5, 0.0004570800903190473, -0.0001591068250983501], 0.0005848760940807551) [0.00012793503593493865, 0.00035012459656187656, -0.00012164862675377933, 0.00032999438910160403, -0.0010707868775715155, -0.00011562763097902086, 2.6989249003809144e-5, 2.2252997952251167e-5, 7.5918623849785e-5, -2.548026903133934e-5, 0.000273791986128162, 0.0010962765310676124, 8.264069884682094e-5, 0.0004570800903190473, -0.0001591068250983501] 0.0005848760940807551
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
