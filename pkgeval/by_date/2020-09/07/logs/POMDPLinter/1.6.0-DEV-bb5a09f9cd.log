Julia Version 1.6.0-DEV.854
Commit bb5a09f9cd (2020-09-07 12:33 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed POMDPLinter ─ v0.1.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [f3bd98c0] + POMDPLinter v0.1.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [f3bd98c0] + POMDPLinter v0.1.1
  [56ddb016] + Logging
    Testing POMDPLinter
Status `/tmp/jl_8k20gI/Project.toml`
  [f3bd98c0] POMDPLinter v0.1.1
  [a93abf59] POMDPs v0.9.1
  [56ddb016] Logging
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_8k20gI/Manifest.toml`
  [ec485272] ArnoldiMethod v0.0.4
  [34da2185] Compat v3.15.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.18.4
  [31c24e10] Distributions v0.23.11
  [1a297f60] FillArrays v0.9.6
  [d25df0c9] Inflate v0.1.2
  [093fc24a] LightGraphs v1.3.0
  [1914dd2f] MacroTools v0.5.5
  [e1d29d7a] Missings v0.4.4
  [d9ec5142] NamedTupleTools v0.13.6
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.3.0
  [90014a1f] PDMats v0.10.0
  [f3bd98c0] POMDPLinter v0.1.1
  [a93abf59] POMDPs v0.9.1
  [1fd47b50] QuadGK v2.4.1
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+1
  [699a6c99] SimpleTraits v0.9.3
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.1
  [4c63d2b9] StatsFuns v0.9.5
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
There should be a warning about no @reqs here:
┌ Warning: No @req or @subreq found in @POMDP_requirements block.
└ @ POMDPLinter ~/.julia/packages/POMDPLinter/OSyYC/src/requirements_internals.jl:45
INFO: POMDPLinter requirements for solve(::CoolSolver, ::POMDP) and dependencies. ([✔] = implemented correctly; [X] = not implemented; [?] = could not determine)

For solve(::CoolSolver, ::POMDP):
  [X] states(::SimplePOMDP)
  [✔] actions(::SimplePOMDP)
  [X] transition(::SimplePOMDP, ::Float64, ::Bool)
  WARNING: Some requirements may not be shown because a MethodError was thrown.
For util2(::POMDP) (in solve(::CoolSolver, ::POMDP)):
  [X] observations(::SimplePOMDP)
Note: Missing methods are often due to incorrect importing. You must explicitly import POMDPs functions to add new methods.

Throwing the first exception (from processing solve(::CoolSolver, ::POMDP) requirements):

INFO: POMDPLinter requirements for solve(::CoolSolver, ::POMDP) and dependencies. ([✔] = implemented correctly; [X] = not implemented; [?] = could not determine)

For solve(::CoolSolver, ::POMDP):
  [✔] states(::SimplePOMDP)
  [✔] actions(::SimplePOMDP)
  [✔] transition(::SimplePOMDP, ::Float64, ::Bool)
  [✔] rand(::AbstractRNG, ::SimpleDistribution)
  [✔] gen(::DDNOut{:o}, ::SimplePOMDP, ::Float64, ::Bool, ::MersenneTwister)
For util2(::POMDP) (in solve(::CoolSolver, ::POMDP)):
  [X] observations(::SimplePOMDP)
For util1(::Float64) (in solve(::CoolSolver, ::POMDP)):
  [No requirements specified]
Note: Missing methods are often due to incorrect importing. You must explicitly import POMDPs functions to add new methods.

INFO: POMDPLinter requirements for solve(::CoolSolver, ::POMDP) and dependencies. ([✔] = implemented correctly; [X] = not implemented; [?] = could not determine)

For solve(::CoolSolver, ::POMDP):
  [✔] states(::SimplePOMDP)
  [✔] actions(::SimplePOMDP)
  [✔] transition(::SimplePOMDP, ::Float64, ::Bool)
  [✔] rand(::AbstractRNG, ::SimpleDistribution)
  [✔] gen(::DDNOut{:o}, ::SimplePOMDP, ::Float64, ::Bool, ::MersenneTwister)
For util2(::POMDP) (in solve(::CoolSolver, ::POMDP)):
  [✔] observations(::SimplePOMDP)
For util1(::Float64) (in solve(::CoolSolver, ::POMDP)):
  [No requirements specified]
Test Summary:     | Pass  Total
show_requirements |    1      1
Test Summary:     | Broken  Total
requirements_info |      1      1
Test Summary: | Pass  Broken  Total
implement     |   18       4     22
    Testing POMDPLinter tests passed 
