Julia Version 1.6.0-DEV.854
Commit bb5a09f9cd (2020-09-07 12:33 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_Xcuk2C/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_Xcuk2C/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723362609844507
curgen: 20 fitness: 0.21723362609844507
curgen: 30 fitness: 0.21723362609844507
curgen: 40 fitness: 0.21723362609844507
curgen: 50 fitness: 0.21723362609844507
CoordinateCreature{Vector{Float64}}([-0.22255506617407908], -0.21723362609844507) -0.22255506617407908 -0.21723362609844507
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2582024304964543
curgen: 100 fitness: 3.2582398810834796
curgen: 150 fitness: 3.2582410753030486
curgen: 200 fitness: 3.258341513649934
curgen: 250 fitness: 3.2583641831166874
curgen: 300 fitness: 3.2583670571107644
curgen: 350 fitness: 3.2583924040258085
curgen: 400 fitness: 3.25840376142238
curgen: 450 fitness: 3.258422040573102
curgen: 500 fitness: 3.25842477001209
CoordinateCreature{Vector{Float64}}([0.22299196045040545, 0.22249936887806476, 0.2224431208235931, -0.22280020081068613, -0.2236292406347922, 0.22266836920417807, 0.22263034674360493, -0.222580163058772, -0.22230139145535435, -0.22255572146859182, 0.22228188842121588, -0.22261359806039624, -0.22217085794376734, 0.22234379199422727, 0.22269443637354544], -3.25842477001209) [0.22299196045040545, 0.22249936887806476, 0.2224431208235931, -0.22280020081068613, -0.2236292406347922, 0.22266836920417807, 0.22263034674360493, -0.222580163058772, -0.22230139145535435, -0.22255572146859182, 0.22228188842121588, -0.22261359806039624, -0.22217085794376734, 0.22234379199422727, 0.22269443637354544] -3.25842477001209
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0023635421621861497
curgen: 100 fitness: -0.002043267920441849
curgen: 150 fitness: -0.0018359776058218813
curgen: 200 fitness: -0.0005273461289334591
curgen: 250 fitness: -0.00044986774094013526
curgen: 300 fitness: -0.00044986774094013526
curgen: 350 fitness: -0.00038634021569805554
curgen: 400 fitness: -0.00038634021569805554
curgen: 450 fitness: -0.0002350029495516992
curgen: 500 fitness: -0.0002350029495516992
CoordinateCreature{Vector{Float64}}([0.00024716495304523845, 8.788231234344804e-5, -0.00012862333349214256, 0.000267602105199315, -6.553645371183795e-5, 0.0006316835992351963, 1.8583652812987608e-5, -5.617516017226119e-5, 0.0001459093310929077, 0.000391210970797074, -9.311685440676644e-5, 0.0006437678177607248, 5.764420172080253e-5, 1.2841890263155162e-5, -0.00014078056514113145], 0.0002350029495516992) [0.00024716495304523845, 8.788231234344804e-5, -0.00012862333349214256, 0.000267602105199315, -6.553645371183795e-5, 0.0006316835992351963, 1.8583652812987608e-5, -5.617516017226119e-5, 0.0001459093310929077, 0.000391210970797074, -9.311685440676644e-5, 0.0006437678177607248, 5.764420172080253e-5, 1.2841890263155162e-5, -0.00014078056514113145] 0.0002350029495516992
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
