Julia Version 1.6.0-DEV.861
Commit dbd3d4cd07 (2020-09-08 15:20 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed SIMD ─ v3.1.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [fdea26ae] + SIMD v3.1.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [fdea26ae] + SIMD v3.1.0
    Testing SIMD
Status `/tmp/jl_CEp3gG/Project.toml`
  [fdea26ae] SIMD v3.1.0
  [b77e0a4c] InteractiveUtils
  [8dfed614] Test
Status `/tmp/jl_CEp3gG/Manifest.toml`
  [fdea26ae] SIMD v3.1.0
  [2a0f44e3] Base64
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [56ddb016] Logging
  [d6f4376e] Markdown
  [9a3f8284] Random
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
    Testing Running tests...
Test Summary:   | Pass  Total
Type properties |   10     10
Test Summary:   | Pass  Total
Type conversion |    8      8
Test Summary:                   | Pass  Total
Conversion and reinterpretation |    4      4
Test Summary:       | Pass  Total
Element-wise access |   22     22
Test Summary:                | Pass  Total
Integer arithmetic functions |  108    108
Test Summary: | Pass  Total
saturation    |    4      4
Test Summary:       | Pass  Total
overflow arithmetic |   24     24
Test Summary:                       | Pass  Total
Floating point arithmetic functions |  101    101
Test Summary:  | Pass  Total
Type promotion |   88     88
Test Summary:        | Pass  Total
Reduction operations |   19     19
Test Summary:            | Pass  Total
Load and store functions |   60     60
Test Summary: | Pass  Total
fastmath      |    5      5
Test Summary:               | Pass  Total
Gather and scatter function |   84     84
Test Summary: | Pass  Total
expandload    |   10     10
Test Summary: | Pass  Total
compressstore |   10     10
Test Summary:          | Pass  Total
Index-based load/store |  104    104

;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:650 within `vsum'
define double @julia_vsum_4129({ {}*, [1 x [2 x i64]], i64, i64 }* nocapture nonnull readonly align 8 dereferenceable(40)) {
top:
  %1 = alloca [2 x {}*], align 8
  %gcframe22 = alloca [4 x {}*], align 16
  %gcframe22.sub = getelementptr inbounds [4 x {}*], [4 x {}*]* %gcframe22, i64 0, i64 0
  %.sub = getelementptr inbounds [2 x {}*], [2 x {}*]* %1, i64 0, i64 0
  %2 = bitcast [4 x {}*]* %gcframe22 to i8*
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 %2, i8 0, i32 32, i1 false)
  %thread_ptr = call i8* asm "movq %fs:0, $0", "=r"() #7
  %ptls_i8 = getelementptr i8, i8* %thread_ptr, i64 -15784
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:651 within `vsum'
; ┌ @ abstractarray.jl:206 within `length'
; │┌ @ subarray.jl:63 within `size'
; ││┌ @ subarray.jl:426 within `axes'
; │││┌ @ subarray.jl:431 within `_indices_sub'
; ││││┌ @ abstractarray.jl:99 within `unsafe_indices'
; │││││┌ @ range.jl:546 within `unsafe_length'
; ││││││┌ @ range.jl:600 within `last'
; │││││││┌ @ Base.jl:33 within `getproperty'
          %3 = bitcast [4 x {}*]* %gcframe22 to i64*
          store i64 8, i64* %3, align 16
          %4 = getelementptr inbounds [4 x {}*], [4 x {}*]* %gcframe22, i64 0, i64 1
          %5 = bitcast i8* %ptls_i8 to i64*
          %6 = load i64, i64* %5, align 8
          %7 = bitcast {}** %4 to i64*
          store i64 %6, i64* %7, align 8
          %8 = bitcast i8* %ptls_i8 to {}***
          store {}** %gcframe22.sub, {}*** %8, align 8
          %9 = getelementptr inbounds { {}*, [1 x [2 x i64]], i64, i64 }, { {}*, [1 x [2 x i64]], i64, i64 }* %0, i64 0, i32 1, i64 0, i64 1
; ││││││└└
; ││││││┌ @ range.jl:595 within `first'
; │││││││┌ @ Base.jl:33 within `getproperty'
          %10 = getelementptr inbounds { {}*, [1 x [2 x i64]], i64, i64 }, { {}*, [1 x [2 x i64]], i64, i64 }* %0, i64 0, i32 1, i64 0, i64 0
; ││││││└└
; ││││││┌ @ int.jl:86 within `-'
         %11 = load i64, i64* %9, align 8
         %12 = load i64, i64* %10, align 8
         %13 = sub i64 %11, %12
; ││││││└
; ││││││┌ @ int.jl:87 within `+'
         %14 = add i64 %13, 1
; │││││└└
; │││││┌ @ range.jl:330 within `OneTo' @ range.jl:321
; ││││││┌ @ promotion.jl:402 within `max'
         %15 = icmp sgt i64 %14, 0
         %16 = select i1 %15, i64 %14, i64 0
; └└└└└└└
; ┌ @ int.jl:262 within `rem'
   %17 = and i64 %16, 3
; └
; ┌ @ promotion.jl:391 within `=='
   %18 = icmp eq i64 %17, 0
; └
  br i1 %18, label %L14, label %L102

L14:                                              ; preds = %top
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:654 within `vsum'
; ┌ @ range.jl:22 within `Colon'
; │┌ @ range.jl:24 within `_colon'
; ││┌ @ range.jl:260 within `StepRange' @ range.jl:208
     %19 = call i64 @j_steprange_last_4132(i64 1, i64 4, i64 %16)
; └└└
; ┌ @ range.jl:623 within `iterate'
   %20 = icmp sgt i64 %19, 0
   %21 = or i1 %20, icmp eq ({}* inttoptr (i64 140356108267024 to {}*), {}* inttoptr (i64 140356108263776 to {}*))
; └
  br i1 %21, label %L41.preheader, label %L98

L41.preheader:                                    ; preds = %L14
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:655 within `vsum'
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:286 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:277 within `_pointer'
; ││┌ @ subarray.jl:412 within `pointer'
; │││┌ @ Base.jl within `getproperty'
      %22 = bitcast { {}*, [1 x [2 x i64]], i64, i64 }* %0 to i8***
      %23 = load atomic i8**, i8*** %22 unordered, align 8
      %24 = getelementptr inbounds { {}*, [1 x [2 x i64]], i64, i64 }, { {}*, [1 x [2 x i64]], i64, i64 }* %0, i64 0, i32 2
; │││└
; │││┌ @ int.jl within `+'
      %25 = load i64, i64* %24, align 8
; └└└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:285 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:263 within `_preprocessindices'
; ││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; │││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:212 within `checkindex'
      br label %L41

L41:                                              ; preds = %L71, %L41.preheader
      %value_phi3 = phi i64 [ %48, %L71 ], [ 1, %L41.preheader ]
      %value_phi5 = phi <4 x double> [ %46, %L71 ], [ zeroinitializer, %L41.preheader ]
; ││││┌ @ int.jl:442 within `<='
       %26 = icmp slt i64 %value_phi3, 1
; ││││└
; ││││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:206 within `last'
; │││││┌ @ int.jl:86 within `-'
        %27 = add nuw i64 %value_phi3, 3
; ││││└└
; ││││┌ @ int.jl:442 within `<='
       %28 = icmp sgt i64 %27, %16
; ││││└
      %or.cond = or i1 %26, %28
      br i1 %or.cond, label %L67, label %L71

L67:                                              ; preds = %L41
; │││└
; │││ @ abstractarray.jl:566 within `checkbounds'
     %29 = call noalias nonnull {}* @jl_gc_pool_alloc(i8* %ptls_i8, i32 1448, i32 48) #1
     %30 = bitcast {}* %29 to i64*
     %31 = getelementptr inbounds i64, i64* %30, i64 -1
     store atomic i64 140356035552368, i64* %31 unordered, align 8
     %32 = bitcast {}* %29 to i8*
     %33 = bitcast { {}*, [1 x [2 x i64]], i64, i64 }* %0 to i8*
     call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %32, i8* nonnull align 8 %33, i64 40, i1 false)
     %34 = getelementptr inbounds [4 x {}*], [4 x {}*]* %gcframe22, i64 0, i64 3
     store {}* %29, {}** %34, align 8
     %35 = call noalias nonnull {}* @jl_gc_pool_alloc(i8* %ptls_i8, i32 1400, i32 16) #1
     %36 = bitcast {}* %35 to i64*
     %37 = getelementptr inbounds i64, i64* %36, i64 -1
     store atomic i64 140356044936752, i64* %37 unordered, align 8
     store i64 %value_phi3, i64* %36, align 8
     %38 = getelementptr inbounds [4 x {}*], [4 x {}*]* %gcframe22, i64 0, i64 2
     store {}* %35, {}** %38, align 16
     store {}* %29, {}** %.sub, align 8
     %39 = getelementptr inbounds [2 x {}*], [2 x {}*]* %1, i64 0, i64 1
     store {}* %35, {}** %39, align 8
     %40 = call nonnull {}* @jl_apply_generic({}* inttoptr (i64 140356137625776 to {}*), {}** nonnull %.sub, i32 2)
     call void @llvm.trap()
     unreachable

L71:                                              ; preds = %L41
; └└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:286 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:277 within `_pointer'
; ││┌ @ subarray.jl:412 within `pointer'
; │││┌ @ int.jl:87 within `+'
      %41 = add i64 %25, %value_phi3
; │││└
; │││ @ subarray.jl:412 within `pointer' @ abstractarray.jl:1069
; │││┌ @ pointer.jl:65 within `unsafe_convert'
      %42 = load i8*, i8** %23, align 8
; │││└
; │││┌ @ abstractarray.jl:1073 within `_memory_offset'
; ││││┌ @ int.jl:88 within `*'
       %43 = shl i64 %41, 3
       %44 = add i64 %43, -8
; │││└└
; │││┌ @ pointer.jl:159 within `+'
      %45 = getelementptr i8, i8* %42, i64 %44
; │└└└
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:45 within `vload' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:45 @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:46
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:427 within `load'
; │││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:436 within `macro expansion'
      %ptr.i = bitcast i8* %45 to <4 x double>*
      %res.i = load <4 x double>, <4 x double>* %ptr.i, align 8
; └└└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/simdvec.jl:253 within `+'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:197 within `fadd' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:197
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:206 within `macro expansion'
     %46 = fadd <4 x double> %value_phi5, %res.i
; └└└
; ┌ @ range.jl:627 within `iterate'
; │┌ @ promotion.jl:391 within `=='
    %47 = icmp eq i64 %value_phi3, %19
; │└
   %48 = add nuw i64 %value_phi3, 4
; └
  br i1 %47, label %L98, label %L41

L98:                                              ; preds = %L71, %L14
  %value_phi10 = phi <4 x double> [ zeroinitializer, %L14 ], [ %46, %L71 ]
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:657 within `vsum'
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/simdvec.jl:468 within `sum'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/simdvec.jl:458 within `reduce'
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:787 within `reduce_fadd'
; │││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:802 within `macro expansion'
      %res.i14 = call double @llvm.experimental.vector.reduce.v2.fadd.f64.v4f64(double 0.000000e+00, <4 x double> %value_phi10)
      %49 = bitcast {}** %4 to i64*
      %50 = load i64, i64* %49, align 8
      %51 = bitcast i8* %ptls_i8 to i64*
      store i64 %50, i64* %51, align 8
; └└└└
  ret double %res.i14

L102:                                             ; preds = %top
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:651 within `vsum'
  store {}* inttoptr (i64 140356068292112 to {}*), {}** %.sub, align 8
  %52 = call nonnull {}* @jl_apply_generic({}* inttoptr (i64 140356108478432 to {}*), {}** nonnull %.sub, i32 1)
  call void @jl_throw({}* %52)
  unreachable
}
	.text
; ┌ @ runtests.jl:650 within `vsum'
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	andq	$-32, %rsp
	subq	$96, %rsp
	vxorpd	%xmm0, %xmm0, %xmm0
	vmovapd	%ymm0, 32(%rsp)
	movq	%fs:0, %r15
; └
; ┌ @ runtests.jl:651 within `vsum'
; │┌ @ abstractarray.jl:206 within `length'
; ││┌ @ subarray.jl:63 within `size'
; │││┌ @ subarray.jl:426 within `axes'
; ││││┌ @ subarray.jl:431 within `_indices_sub'
; │││││┌ @ abstractarray.jl:99 within `unsafe_indices'
; ││││││┌ @ range.jl:546 within `unsafe_length'
; │││││││┌ @ range.jl:600 within `last'
; ││││││││┌ @ Base.jl:33 within `getproperty'
	movq	$8, 32(%rsp)
	movq	-15784(%r15), %rax
	movq	%rax, 40(%rsp)
	leaq	32(%rsp), %rax
	movq	%rax, -15784(%r15)
; │││││││└└
; │││││││┌ @ int.jl:86 within `-'
	movq	16(%rdi), %rax
	subq	8(%rdi), %rax
; │││││││└
; │││││││┌ @ int.jl:87 within `+'
	incq	%rax
; ││││││└└
; ││││││┌ @ range.jl:330 within `OneTo' @ range.jl:321
; │││││││┌ @ promotion.jl:402 within `max'
	movq	%rax, %rcx
	sarq	$63, %rcx
	andnq	%rax, %rcx, %r12
; │└└└└└└└
; │┌ @ promotion.jl:391 within `=='
	testb	$3, %r12b
; │└
	jne	L451
; └
; ┌ @ runtests.jl within `vsum'
	movq	%rdi, %r14
	addq	$-15784, %r15           # imm = 0xC258
; └
; ┌ @ runtests.jl:654 within `vsum'
; │┌ @ range.jl:22 within `Colon'
; ││┌ @ range.jl:24 within `_colon'
; │││┌ @ range.jl:260 within `StepRange' @ range.jl:208
	movabsq	$steprange_last, %rax
	movl	$4, %ebx
	movl	$1, %edi
	movl	$4, %esi
	movq	%r12, %rdx
	vzeroupper
	callq	*%rax
; │└└└
; │┌ @ range.jl:623 within `iterate'
	testq	%rax, %rax
	vxorpd	%xmm2, %xmm2, %xmm2
; │└
	jg	L164
; └
; ┌ @ runtests.jl within `vsum'
	movb	$1, %cl
; └
; ┌ @ runtests.jl:654 within `vsum'
	testb	%cl, %cl
	jne	L236
; └
; ┌ @ runtests.jl:655 within `vsum'
; │┌ @ arrayops.jl:286 within `getindex'
; ││┌ @ arrayops.jl:277 within `_pointer'
; │││┌ @ subarray.jl:412 within `pointer'
; ││││┌ @ Base.jl within `getproperty'
L164:
	movq	(%r14), %rcx
	movq	24(%r14), %rdx
; │└└└└
; │┌ @ arrayops.jl:285 within `getindex'
; ││┌ @ arrayops.jl:263 within `_preprocessindices'
; │││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; ││││┌ @ arrayops.jl:212 within `checkindex'
	shlq	$3, %rdx
	movq	$-3, %rsi
	subq	%rax, %rsi
	vxorpd	%xmm2, %xmm2, %xmm2
	nopl	(%rax)
; │││││┌ @ int.jl:442 within `<='
L192:
	leaq	-3(%rbx), %r13
	testq	%r13, %r13
; │││││└
	jle	L300
	cmpq	%r12, %rbx
	jg	L300
; │└└└└
; │┌ @ arrayops.jl within `getindex'
	movq	(%rcx), %rax
; │└
; │┌ @ arrayops.jl:286 within `getindex'
; ││┌ @ arrayops.jl:45 within `vload' @ arrayops.jl:45 @ arrayops.jl:46
; │││┌ @ LLVM_intrinsics.jl:427 within `load'
; ││││┌ @ LLVM_intrinsics.jl:436 within `macro expansion'
	addq	%rdx, %rax
; │└└└└
; │┌ @ simdvec.jl:253 within `+'
; ││┌ @ LLVM_intrinsics.jl:197 within `fadd' @ LLVM_intrinsics.jl:197
; │││┌ @ LLVM_intrinsics.jl:206 within `macro expansion'
	vaddpd	-32(%rax,%rbx,8), %ymm2, %ymm2
; │└└└
; │┌ @ range.jl:627 within `iterate'
; ││┌ @ promotion.jl:391 within `=='
	leaq	(%rsi,%rbx), %rax
	addq	$4, %rax
	addq	$4, %rbx
	cmpq	$4, %rax
; │└└
	jne	L192
; └
; ┌ @ runtests.jl within `vsum'
L236:
	vxorpd	%xmm0, %xmm0, %xmm0
; └
; ┌ @ runtests.jl:657 within `vsum'
; │┌ @ simdvec.jl:468 within `sum'
; ││┌ @ simdvec.jl:458 within `reduce'
; │││┌ @ LLVM_intrinsics.jl:787 within `reduce_fadd'
; ││││┌ @ LLVM_intrinsics.jl:802 within `macro expansion'
	vaddsd	%xmm0, %xmm2, %xmm0
	vpermilpd	$1, %xmm2, %xmm1 # xmm1 = xmm2[1,0]
	vaddsd	%xmm1, %xmm0, %xmm0
	vextractf128	$1, %ymm2, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vpermilpd	$1, %xmm1, %xmm1 # xmm1 = xmm1[1,0]
	vaddsd	%xmm1, %xmm0, %xmm0
	movq	40(%rsp), %rax
	movq	%rax, (%r15)
; │└└└└
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	vzeroupper
	retq
; └
; ┌ @ runtests.jl:655 within `vsum'
; │┌ @ arrayops.jl:285 within `getindex'
; ││┌ @ arrayops.jl:263 within `_preprocessindices'
; │││┌ @ abstractarray.jl:566 within `checkbounds'
L300:
	movabsq	$jl_gc_pool_alloc, %rbx
	movq	%r15, %rdi
	movl	$1448, %esi             # imm = 0x5A8
	movl	$48, %edx
	vzeroupper
	callq	*%rbx
	movq	%rbx, %rcx
	movq	%rax, %rbx
	movabsq	$140356035552368, %r12  # imm = 0x7FA72FA42470
	movq	%r12, -8(%rax)
	movq	32(%r14), %rax
	movq	%rax, 32(%rbx)
	vmovups	(%r14), %ymm0
	vmovups	%ymm0, (%rbx)
	movq	%rbx, 56(%rsp)
	movq	%r15, %rdi
	movl	$1400, %esi             # imm = 0x578
	movl	$16, %edx
	vzeroupper
	callq	*%rcx
	addq	$9384384, %r12          # imm = 0x8F31C0
	movq	%r12, -8(%rax)
	movq	%r13, (%rax)
	movq	%rax, 48(%rsp)
	movq	%rbx, 16(%rsp)
	movq	%rax, 24(%rsp)
	movabsq	$jl_apply_generic, %rax
	movabsq	$jl_system_image_data, %rdi
	leaq	16(%rsp), %rsi
	movl	$2, %edx
	callq	*%rax
	ud2
; └└└└
; ┌ @ abstractarray.jl within `vsum'
L451:
	movabsq	$140356068292112, %rax  # imm = 0x7FA73197B610
; └
; ┌ @ runtests.jl:651 within `vsum'
	movq	%rax, 16(%rsp)
	movabsq	$jl_apply_generic, %rax
	movabsq	$jl_system_image_data, %rdi
	leaq	16(%rsp), %rsi
	movl	$1, %edx
	vzeroupper
	callq	*%rax
	movabsq	$jl_throw, %rcx
	movq	%rax, %rdi
	callq	*%rcx
	nopw	%cs:(%rax,%rax)
	nop
; └

;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:723 within `vcompress!'
define nonnull {}* @"japi1_vcompress!_4200"({}*, {}**, i32) #0 {
top:
  %3 = alloca [2 x {}*], align 8
  %gcframe161 = alloca [4 x {}*], align 16
  %gcframe161.sub = getelementptr inbounds [4 x {}*], [4 x {}*]* %gcframe161, i64 0, i64 0
  %.sub = getelementptr inbounds [2 x {}*], [2 x {}*]* %3, i64 0, i64 0
  %4 = bitcast [4 x {}*]* %gcframe161 to i8*
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 %4, i8 0, i32 32, i1 false)
  %5 = alloca {}**, align 8
  store volatile {}** %1, {}*** %5, align 8
  %thread_ptr = call i8* asm "movq %fs:0, $0", "=r"() #8
  %ptls_i8 = getelementptr i8, i8* %thread_ptr, i64 -15784
  %6 = bitcast [4 x {}*]* %gcframe161 to i64*
  store i64 8, i64* %6, align 16
  %7 = getelementptr inbounds [4 x {}*], [4 x {}*]* %gcframe161, i64 0, i64 1
  %8 = bitcast i8* %ptls_i8 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast {}** %7 to i64*
  store i64 %9, i64* %10, align 8
  %11 = bitcast i8* %ptls_i8 to {}***
  store {}** %gcframe161.sub, {}*** %11, align 8
  %12 = load {}*, {}** %1, align 8
  %13 = getelementptr inbounds {}*, {}** %1, i64 1
  %14 = load {}*, {}** %13, align 8
  %15 = getelementptr inbounds {}*, {}** %1, i64 2
  %16 = load {}*, {}** %15, align 8
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724
; ┌ @ abstractarray.jl:75 within `axes'
; │┌ @ array.jl:155 within `size'
    %17 = bitcast {}* %16 to {}**
    %18 = getelementptr inbounds {}*, {}** %17, i64 3
    %19 = bitcast {}** %18 to i64*
    %20 = load i64, i64* %19, align 8
    %21 = bitcast {}* %12 to {}**
    %22 = getelementptr inbounds {}*, {}** %21, i64 3
    %23 = bitcast {}** %22 to i64*
    %24 = load i64, i64* %23, align 8
; └└
; ┌ @ tuple.jl:328 within `=='
; │┌ @ tuple.jl:332 within `_eq'
; ││┌ @ range.jl:755 within `=='
     switch i64 %24, label %L16 [
    i64 0, label %L9
    i64 1, label %L13
  ]

L9:                                               ; preds = %top
; │││┌ @ range.jl:506 within `isempty'
; ││││┌ @ operators.jl:303 within `>'
; │││││┌ @ int.jl:83 within `<'
        %25 = icmp eq i64 %20, 0
; │││└└└
     br label %L19

L13:                                              ; preds = %top
; ││└
; ││┌ @ range.jl:756 within `=='
; │││┌ @ range.jl:769 within `_has_length_one'
; ││││┌ @ promotion.jl:391 within `=='
       %26 = icmp eq i64 %20, 1
; │││└└
     br label %L19

L16:                                              ; preds = %top
; ││└
; ││┌ @ range.jl:757 within `==' @ promotion.jl:391
     %27 = icmp eq i64 %24, %20
; │││ @ range.jl:757 within `=='
     br label %L19

L19:                                              ; preds = %L16, %L13, %L9
     %value_phi.in = phi i1 [ %25, %L9 ], [ %26, %L13 ], [ %27, %L16 ]
; │└└
; │┌ @ tuple.jl:333 within `_eq'
    %28 = and i1 %value_phi.in, icmp ne ({}* inttoptr (i64 140356108263776 to {}*), {}* inttoptr (i64 140356108267024 to {}*))
; └└
  br i1 %28, label %L27, label %L234

L27:                                              ; preds = %L19
; ┌ @ abstractarray.jl:75 within `axes'
; │┌ @ array.jl:155 within `size'
    %29 = bitcast {}* %14 to {}**
    %30 = getelementptr inbounds {}*, {}** %29, i64 3
    %31 = bitcast {}** %30 to i64*
    %32 = load i64, i64* %31, align 8
; └└
; ┌ @ tuple.jl:328 within `=='
; │┌ @ tuple.jl:332 within `_eq'
; ││┌ @ range.jl:755 within `=='
     switch i64 %20, label %L39 [
    i64 0, label %L32
    i64 1, label %L36
  ]

L32:                                              ; preds = %L27
; │││┌ @ range.jl:506 within `isempty'
; ││││┌ @ operators.jl:303 within `>'
; │││││┌ @ int.jl:83 within `<'
        %33 = icmp eq i64 %32, 0
; │││└└└
     br label %L42

L36:                                              ; preds = %L27
; ││└
; ││┌ @ range.jl:756 within `=='
; │││┌ @ range.jl:769 within `_has_length_one'
; ││││┌ @ promotion.jl:391 within `=='
       %34 = icmp eq i64 %32, 1
; │││└└
     br label %L42

L39:                                              ; preds = %L27
; ││└
; ││┌ @ range.jl:757 within `==' @ promotion.jl:391
     %35 = icmp eq i64 %20, %32
; │││ @ range.jl:757 within `=='
     br label %L42

L42:                                              ; preds = %L39, %L36, %L32
     %value_phi2.in = phi i1 [ %33, %L32 ], [ %34, %L36 ], [ %35, %L39 ]
; │└└
; │┌ @ tuple.jl:333 within `_eq'
    %36 = and i1 %value_phi2.in, icmp ne ({}* inttoptr (i64 140356108263776 to {}*), {}* inttoptr (i64 140356108267024 to {}*))
; └└
  br i1 %36, label %L53, label %L234

L53:                                              ; preds = %L42
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:725
; ┌ @ int.jl:87 within `+'
   %37 = add nsw i64 %20, -3
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:729
; ┌ @ int.jl:442 within `<='
   %38 = icmp slt i64 %37, 1
; └
  br i1 %38, label %L218.preheader, label %L74

L60.L218.preheader_crit_edge:                     ; preds = %L197
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:735
; ┌ @ abstractarray.jl:303 within `lastindex'
; │┌ @ abstractarray.jl:268 within `eachindex'
; ││┌ @ abstractarray.jl:95 within `axes1'
; │││┌ @ abstractarray.jl:75 within `axes'
; ││││┌ @ array.jl:155 within `size'
       %.pre = load i64, i64* %19, align 8
; └└└└└
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:729
  br label %L218.preheader

L218.preheader:                                   ; preds = %L60.L218.preheader_crit_edge, %L53
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:735
; ┌ @ abstractarray.jl:303 within `lastindex'
; │┌ @ abstractarray.jl:268 within `eachindex'
; ││┌ @ abstractarray.jl:95 within `axes1'
; │││┌ @ abstractarray.jl:75 within `axes'
; ││││┌ @ array.jl:155 within `size'
       %39 = phi i64 [ %.pre, %L60.L218.preheader_crit_edge ], [ %20, %L53 ]
       %value_phi5.lcssa = phi i64 [ %127, %L60.L218.preheader_crit_edge ], [ 1, %L53 ]
       %value_phi6.lcssa = phi i64 [ %128, %L60.L218.preheader_crit_edge ], [ 1, %L53 ]
; └└└└└
; ┌ @ int.jl:442 within `<='
   %40 = icmp sgt i64 %value_phi6.lcssa, %39
; └
  br i1 %40, label %L237, label %L225.lr.ph

L225.lr.ph:                                       ; preds = %L218.preheader
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:736
; ┌ @ array.jl within `getindex'
   %41 = bitcast {}* %14 to { i8*, i64, i16, i16, i32 }*
   %42 = getelementptr inbounds { i8*, i64, i16, i16, i32 }, { i8*, i64, i16, i16, i32 }* %41, i64 0, i32 1
   %43 = load i64, i64* %42, align 8
   %44 = bitcast {}* %14 to i8**
   %45 = load i8*, i8** %44, align 8
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:737
; ┌ @ array.jl within `getindex'
   %46 = bitcast {}* %16 to { i8*, i64, i16, i16, i32 }*
   %47 = getelementptr inbounds { i8*, i64, i16, i16, i32 }, { i8*, i64, i16, i16, i32 }* %46, i64 0, i32 1
   %48 = load i64, i64* %47, align 8
; └
; ┌ @ array.jl within `setindex!'
   %49 = bitcast {}* %12 to { i8*, i64, i16, i16, i32 }*
   %50 = getelementptr inbounds { i8*, i64, i16, i16, i32 }, { i8*, i64, i16, i16, i32 }* %49, i64 0, i32 1
   %51 = load i64, i64* %50, align 8
; └
; ┌ @ array.jl within `getindex'
   %52 = bitcast {}* %16 to double**
   %53 = load double*, double** %52, align 8
; └
; ┌ @ array.jl within `setindex!'
   %54 = bitcast {}* %12 to double**
   %55 = load double*, double** %54, align 8
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:735
  br label %L225

L74:                                              ; preds = %L197.L74_crit_edge, %L53
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:730
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:285 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:263 within `_preprocessindices'
; ││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; │││┌ @ abstractarray.jl:268 within `eachindex'
; ││││┌ @ abstractarray.jl:95 within `axes1'
; │││││┌ @ abstractarray.jl:75 within `axes'
; ││││││┌ @ array.jl:155 within `size'
         %56 = phi i64 [ %.pre160, %L197.L74_crit_edge ], [ %32, %L53 ]
         %value_phi670 = phi i64 [ %128, %L197.L74_crit_edge ], [ 1, %L53 ]
         %value_phi569 = phi i64 [ %127, %L197.L74_crit_edge ], [ 1, %L53 ]
; │││└└└└
; │││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:212 within `checkindex'
; ││││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:206 within `last'
; │││││┌ @ int.jl:86 within `-'
        %57 = add nuw nsw i64 %value_phi670, 3
; ││││└└
; ││││┌ @ int.jl:442 within `<='
       %58 = icmp ugt i64 %57, %56
; │││└└
; │││ @ abstractarray.jl:566 within `checkbounds'
     br i1 %58, label %L83, label %L87

L83:                                              ; preds = %L74
     %59 = call noalias nonnull {}* @jl_gc_pool_alloc(i8* %ptls_i8, i32 1400, i32 16) #3
     %60 = bitcast {}* %59 to i64*
     %61 = getelementptr inbounds i64, i64* %60, i64 -1
     store atomic i64 140356044936752, i64* %61 unordered, align 8
     store i64 %value_phi670, i64* %60, align 8
     %62 = getelementptr inbounds [4 x {}*], [4 x {}*]* %gcframe161, i64 0, i64 2
     store {}* %59, {}** %62, align 16
     store {}* %14, {}** %.sub, align 8
     %63 = getelementptr inbounds [2 x {}*], [2 x {}*]* %3, i64 0, i64 1
     store {}* %59, {}** %63, align 8
     %64 = call nonnull {}* @jl_apply_generic({}* inttoptr (i64 140356137625776 to {}*), {}** nonnull %.sub, i32 2)
     call void @llvm.trap()
     unreachable

L87:                                              ; preds = %L74
; └└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:286 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:273 within `_pointer'
; ││┌ @ indices.jl:476 within `getindex'
; │││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; ││││┌ @ abstractarray.jl:623 within `checkindex'
; │││││┌ @ int.jl:442 within `<='
        %65 = icmp ugt i64 %value_phi670, %56
; ││││└└
; ││││ @ abstractarray.jl:566 within `checkbounds'
      br i1 %65, label %L102, label %L106

L102:                                             ; preds = %L87
      %66 = call noalias nonnull {}* @jl_gc_pool_alloc(i8* %ptls_i8, i32 1400, i32 16) #3
      %67 = bitcast {}* %66 to i64*
      %68 = getelementptr inbounds i64, i64* %67, i64 -1
      store atomic i64 140356109421360, i64* %68 unordered, align 8
      store i64 %56, i64* %67, align 8
      %69 = getelementptr inbounds [4 x {}*], [4 x {}*]* %gcframe161, i64 0, i64 3
      store {}* %66, {}** %69, align 8
      %70 = call noalias nonnull {}* @jl_gc_pool_alloc(i8* %ptls_i8, i32 1400, i32 16) #3
      %71 = bitcast {}* %70 to i64*
      %72 = getelementptr inbounds i64, i64* %71, i64 -1
      store atomic i64 140356108266768, i64* %72 unordered, align 8
      store i64 %value_phi670, i64* %71, align 8
      %73 = getelementptr inbounds [4 x {}*], [4 x {}*]* %gcframe161, i64 0, i64 2
      store {}* %70, {}** %73, align 16
      store {}* %66, {}** %.sub, align 8
      %74 = getelementptr inbounds [2 x {}*], [2 x {}*]* %3, i64 0, i64 1
      store {}* %70, {}** %74, align 8
      %75 = call nonnull {}* @jl_apply_generic({}* inttoptr (i64 140356137625776 to {}*), {}** nonnull %.sub, i32 2)
      call void @llvm.trap()
      unreachable

L106:                                             ; preds = %L87
; ││└└
; ││┌ @ abstractarray.jl:1069 within `pointer'
; │││┌ @ pointer.jl:65 within `unsafe_convert'
      %76 = bitcast {}* %14 to i8**
      %77 = load i8*, i8** %76, align 8
; │││└
; │││┌ @ abstractarray.jl:1073 within `_memory_offset'
; ││││┌ @ int.jl:86 within `-'
       %78 = add nsw i64 %value_phi670, -1
; │││└└
; │││┌ @ pointer.jl:159 within `+'
      %79 = getelementptr i8, i8* %77, i64 %78
; │└└└
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:45 within `vload' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:45 @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:46
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:427 within `load'
; │││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:436 within `macro expansion'
      %ptr.i = bitcast i8* %79 to <4 x i8>*
      %res.i = load <4 x i8>, <4 x i8>* %ptr.i, align 1
; └└└└
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:731
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:285 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:263 within `_preprocessindices'
; ││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; │││┌ @ abstractarray.jl:268 within `eachindex'
; ││││┌ @ abstractarray.jl:95 within `axes1'
; │││││┌ @ abstractarray.jl:75 within `axes'
; ││││││┌ @ array.jl:155 within `size'
         %80 = load i64, i64* %19, align 8
; │││└└└└
; │││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:212 within `checkindex'
; ││││┌ @ int.jl:442 within `<='
       %81 = icmp ugt i64 %57, %80
; │││└└
; │││ @ abstractarray.jl:566 within `checkbounds'
     br i1 %81, label %L137, label %L141

L137:                                             ; preds = %L106
     %82 = call noalias nonnull {}* @jl_gc_pool_alloc(i8* %ptls_i8, i32 1400, i32 16) #3
     %83 = bitcast {}* %82 to i64*
     %84 = getelementptr inbounds i64, i64* %83, i64 -1
     store atomic i64 140356044936752, i64* %84 unordered, align 8
     store i64 %value_phi670, i64* %83, align 8
     %85 = getelementptr inbounds [4 x {}*], [4 x {}*]* %gcframe161, i64 0, i64 2
     store {}* %82, {}** %85, align 16
     store {}* %16, {}** %.sub, align 8
     %86 = getelementptr inbounds [2 x {}*], [2 x {}*]* %3, i64 0, i64 1
     store {}* %82, {}** %86, align 8
     %87 = call nonnull {}* @jl_apply_generic({}* inttoptr (i64 140356137625776 to {}*), {}** nonnull %.sub, i32 2)
     call void @llvm.trap()
     unreachable

L141:                                             ; preds = %L106
; └└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:286 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:273 within `_pointer'
; ││┌ @ indices.jl:476 within `getindex'
; │││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; ││││┌ @ abstractarray.jl:623 within `checkindex'
; │││││┌ @ int.jl:442 within `<='
        %88 = icmp ugt i64 %value_phi670, %80
; ││││└└
; ││││ @ abstractarray.jl:566 within `checkbounds'
      br i1 %88, label %L156, label %L160

L156:                                             ; preds = %L141
      %89 = call noalias nonnull {}* @jl_gc_pool_alloc(i8* %ptls_i8, i32 1400, i32 16) #3
      %90 = bitcast {}* %89 to i64*
      %91 = getelementptr inbounds i64, i64* %90, i64 -1
      store atomic i64 140356109421360, i64* %91 unordered, align 8
      store i64 %80, i64* %90, align 8
      %92 = getelementptr inbounds [4 x {}*], [4 x {}*]* %gcframe161, i64 0, i64 3
      store {}* %89, {}** %92, align 8
      %93 = call noalias nonnull {}* @jl_gc_pool_alloc(i8* %ptls_i8, i32 1400, i32 16) #3
      %94 = bitcast {}* %93 to i64*
      %95 = getelementptr inbounds i64, i64* %94, i64 -1
      store atomic i64 140356108266768, i64* %95 unordered, align 8
      store i64 %value_phi670, i64* %94, align 8
      %96 = getelementptr inbounds [4 x {}*], [4 x {}*]* %gcframe161, i64 0, i64 2
      store {}* %93, {}** %96, align 16
      store {}* %89, {}** %.sub, align 8
      %97 = getelementptr inbounds [2 x {}*], [2 x {}*]* %3, i64 0, i64 1
      store {}* %93, {}** %97, align 8
      %98 = call nonnull {}* @jl_apply_generic({}* inttoptr (i64 140356137625776 to {}*), {}** nonnull %.sub, i32 2)
      call void @llvm.trap()
      unreachable

L160:                                             ; preds = %L141
; └└└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:101 within `vstorec'
; │┌ @ range.jl:5 within `Colon'
; ││┌ @ range.jl:284 within `UnitRange'
; │││┌ @ range.jl:289 within `unitrange_last'
; ││││┌ @ operators.jl:350 within `>='
; │││││┌ @ int.jl:442 within `<='
        %99 = icmp sgt i64 %value_phi569, 9223372036854775804
; ││││└└
      %.v = select i1 %99, i64 -1, i64 3
      %100 = add i64 %.v, %value_phi569
; │└└└
; │┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; ││┌ @ abstractarray.jl:268 within `eachindex'
; │││┌ @ abstractarray.jl:95 within `axes1'
; ││││┌ @ abstractarray.jl:75 within `axes'
; │││││┌ @ array.jl:155 within `size'
        %101 = load i64, i64* %23, align 8
; ││└└└└
; ││┌ @ abstractarray.jl:628 within `checkindex'
; │││┌ @ range.jl:506 within `isempty'
; ││││┌ @ operators.jl:303 within `>'
; │││││┌ @ int.jl:83 within `<'
        %102 = icmp slt i64 %100, %value_phi569
; │││└└└
; │││ @ abstractarray.jl:628 within `checkindex' @ abstractarray.jl:623
; │││┌ @ int.jl:442 within `<='
      %103 = icmp sgt i64 %value_phi569, 0
      %104 = icmp sle i64 %value_phi569, %101
; │││└
; │││┌ @ bool.jl:36 within `&'
      %105 = and i1 %103, %104
; │││└
; │││┌ @ int.jl:442 within `<='
      %106 = icmp sgt i64 %100, 0
      %107 = icmp sle i64 %100, %101
; │││└
; │││┌ @ bool.jl:36 within `&'
      %108 = and i1 %106, %107
; │││└
; │││ @ abstractarray.jl:628 within `checkindex'
; │││┌ @ bool.jl:36 within `&'
      %109 = and i1 %105, %108
; │││└
; │││┌ @ bool.jl:37 within `|'
      %110 = or i1 %102, %109
; ││└└
; ││ @ abstractarray.jl:566 within `checkbounds'
    br i1 %110, label %L197, label %L194

L194:                                             ; preds = %L160
    %111 = call noalias nonnull {}* @jl_gc_pool_alloc(i8* %ptls_i8, i32 1424, i32 32) #3
    %112 = bitcast {}* %111 to i64*
    %113 = getelementptr inbounds i64, i64* %112, i64 -1
    store atomic i64 140356108264000, i64* %113 unordered, align 8
    %.sroa.0.0..sroa_raw_cast = bitcast {}* %111 to i8*
    store i64 %value_phi569, i64* %112, align 8
    %.sroa.0.sroa.2.0..sroa.0.0..sroa_raw_cast.sroa_idx = getelementptr inbounds i8, i8* %.sroa.0.0..sroa_raw_cast, i64 8
    %.sroa.0.sroa.2.0..sroa.0.0..sroa_raw_cast.sroa_cast = bitcast i8* %.sroa.0.sroa.2.0..sroa.0.0..sroa_raw_cast.sroa_idx to i64*
    store i64 %100, i64* %.sroa.0.sroa.2.0..sroa.0.0..sroa_raw_cast.sroa_cast, align 8
    %114 = getelementptr inbounds [4 x {}*], [4 x {}*]* %gcframe161, i64 0, i64 2
    store {}* %111, {}** %114, align 16
    store {}* %12, {}** %.sub, align 8
    %115 = getelementptr inbounds [2 x {}*], [2 x {}*]* %3, i64 0, i64 1
    store {}* %111, {}** %115, align 8
    %116 = call nonnull {}* @jl_apply_generic({}* inttoptr (i64 140356137625776 to {}*), {}** nonnull %.sub, i32 2)
    call void @llvm.trap()
    unreachable

L197:                                             ; preds = %L160
; └└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:286 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:273 within `_pointer'
; ││┌ @ abstractarray.jl:1069 within `pointer'
; │││┌ @ pointer.jl:65 within `unsafe_convert'
      %117 = bitcast {}* %16 to i8**
      %118 = load i8*, i8** %117, align 8
; │││└
; │││┌ @ abstractarray.jl:1073 within `_memory_offset'
; ││││┌ @ int.jl:88 within `*'
       %119 = shl i64 %value_phi670, 3
       %120 = add nsw i64 %119, -8
; │││└└
; │││┌ @ pointer.jl:159 within `+'
      %121 = getelementptr i8, i8* %118, i64 %120
; │└└└
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:45 within `vload' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:45 @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:46
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:427 within `load'
; │││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:436 within `macro expansion'
      %ptr.i38 = bitcast i8* %121 to <4 x double>*
      %res.i39 = load <4 x double>, <4 x double>* %ptr.i38, align 8
; └└└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:103 within `vstorec'
; │┌ @ abstractarray.jl:1069 within `pointer'
; ││┌ @ pointer.jl:65 within `unsafe_convert'
     %122 = bitcast {}* %12 to i8**
     %123 = load i8*, i8** %122, align 8
; ││└
; ││┌ @ abstractarray.jl:1073 within `_memory_offset'
; │││┌ @ int.jl:88 within `*'
      %124 = shl i64 %value_phi569, 3
      %125 = add i64 %124, -8
; ││└└
; ││┌ @ pointer.jl:159 within `+'
     %126 = getelementptr i8, i8* %123, i64 %125
; └└└
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:104 within `vstorec' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:96
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:519 within `maskedcompressstore'
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:536 within `macro expansion'
     %mask.i41 = trunc <4 x i8> %res.i to <4 x i1>
     %ptr.i42 = bitcast i8* %126 to double*
     call void @llvm.masked.compressstore.v4f64(<4 x double> %res.i39, double* %ptr.i42, <4 x i1> %mask.i41)
; └└└
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:732
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/simdvec.jl:468 within `sum'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/simdvec.jl:458 within `reduce'
; ││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:808 within `reduce_add'
; │││┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/LLVM_intrinsics.jl:838 within `macro expansion'
      %maski.i = bitcast <4 x i1> %mask.i41 to i4
      %maskipopcnt.i = call i4 @llvm.ctpop.i4(i4 %maski.i)
      %res.i40 = zext i4 %maskipopcnt.i to i64
; └└└└
; ┌ @ int.jl:87 within `+'
   %127 = add i64 %value_phi569, %res.i40
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:733
; ┌ @ int.jl:87 within `+'
   %128 = add nuw nsw i64 %value_phi670, 4
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:729
; ┌ @ int.jl:442 within `<='
   %129 = icmp sgt i64 %128, %37
; └
  br i1 %129, label %L60.L218.preheader_crit_edge, label %L197.L74_crit_edge

L197.L74_crit_edge:                               ; preds = %L197
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:730
; ┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:285 within `getindex'
; │┌ @ /home/pkgeval/.julia/packages/SIMD/e6GgT/src/arrayops.jl:263 within `_preprocessindices'
; ││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; │││┌ @ abstractarray.jl:268 within `eachindex'
; ││││┌ @ abstractarray.jl:95 within `axes1'
; │││││┌ @ abstractarray.jl:75 within `axes'
; ││││││┌ @ array.jl:155 within `size'
         %.pre160 = load i64, i64* %31, align 8
; └└└└└└└
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:729
  br label %L74

L225:                                             ; preds = %L230, %L225.lr.ph
  %value_phi1467 = phi i64 [ %value_phi6.lcssa, %L225.lr.ph ], [ %133, %L230 ]
  %value_phi1366 = phi i64 [ %value_phi5.lcssa, %L225.lr.ph ], [ %value_phi19, %L230 ]
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:736
; ┌ @ array.jl:809 within `getindex'
   %130 = add i64 %value_phi1467, -1
   %131 = icmp ult i64 %130, %43
   br i1 %131, label %idxend, label %oob

L227:                                             ; preds = %idxend
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:737
; ┌ @ array.jl:809 within `getindex'
   %132 = icmp ult i64 %130, %48
   br i1 %132, label %idxend16, label %oob15

L230:                                             ; preds = %idxend18, %idxend
   %value_phi19 = phi i64 [ %153, %idxend18 ], [ %value_phi1366, %idxend ]
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:740
; ┌ @ int.jl:87 within `+'
   %133 = add nuw i64 %value_phi1467, 1
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:735
; ┌ @ int.jl:442 within `<='
   %134 = icmp sgt i64 %133, %39
; └
  br i1 %134, label %L237, label %L225

L234:                                             ; preds = %L42, %L19
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724
  store {}* inttoptr (i64 140356056766000 to {}*), {}** %.sub, align 8
  %135 = call nonnull {}* @jl_apply_generic({}* inttoptr (i64 140356108478432 to {}*), {}** nonnull %.sub, i32 1)
  call void @jl_throw({}* %135)
  unreachable

L237:                                             ; preds = %L230, %L218.preheader
  %136 = bitcast {}** %7 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = bitcast i8* %ptls_i8 to i64*
  store i64 %137, i64* %138, align 8
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!'
  ret {}* %12

oob:                                              ; preds = %L225
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:736
; ┌ @ array.jl:809 within `getindex'
   %139 = alloca i64, align 8
   store i64 %value_phi1467, i64* %139, align 8
   call void @jl_bounds_error_ints({}* %14, i64* nonnull %139, i64 1)
   unreachable

idxend:                                           ; preds = %L225
   %140 = getelementptr inbounds i8, i8* %45, i64 %130
   %141 = load i8, i8* %140, align 1
   %142 = and i8 %141, 1
   %143 = icmp eq i8 %142, 0
; └
  br i1 %143, label %L230, label %L227

oob15:                                            ; preds = %L227
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:737
; ┌ @ array.jl:809 within `getindex'
   %144 = alloca i64, align 8
   store i64 %value_phi1467, i64* %144, align 8
   call void @jl_bounds_error_ints({}* %16, i64* nonnull %144, i64 1)
   unreachable

idxend16:                                         ; preds = %L227
; └
; ┌ @ array.jl:847 within `setindex!'
   %145 = add i64 %value_phi1366, -1
   %146 = icmp ult i64 %145, %51
   br i1 %146, label %idxend18, label %oob17

oob17:                                            ; preds = %idxend16
   %147 = alloca i64, align 8
   store i64 %value_phi1366, i64* %147, align 8
   call void @jl_bounds_error_ints({}* %12, i64* nonnull %147, i64 1)
   unreachable

idxend18:                                         ; preds = %idxend16
; └
; ┌ @ array.jl:809 within `getindex'
   %148 = getelementptr inbounds double, double* %53, i64 %130
   %149 = bitcast double* %148 to i64*
   %150 = load i64, i64* %149, align 8
; └
; ┌ @ array.jl:847 within `setindex!'
   %151 = getelementptr inbounds double, double* %55, i64 %145
   %152 = bitcast double* %151 to i64*
   store i64 %150, i64* %152, align 8
; └
;  @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:724 within `vcompress!' @ /home/pkgeval/.julia/packages/SIMD/e6GgT/test/runtests.jl:738
; ┌ @ int.jl:87 within `+'
   %153 = add i64 %value_phi1366, 1
   br label %L230
; └
}
	.text
; ┌ @ runtests.jl:723 within `vcompress!'
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	andq	$-32, %rsp
	subq	$96, %rsp
	movq	%rsp, %rbx
	vpxor	%xmm0, %xmm0, %xmm0
	vmovdqa	%ymm0, 32(%rbx)
	movq	%rsi, 64(%rbx)
	movq	%fs:0, %r8
	movq	$8, 32(%rbx)
	movq	-15784(%r8), %rax
	movq	%rax, 40(%rbx)
	leaq	32(%rbx), %rax
	movq	%rax, -15784(%r8)
	movq	(%rsi), %rax
	movq	8(%rsi), %rdx
	movq	16(%rsi), %r13
; └
; ┌ @ runtests.jl:724 within `vcompress!' @ runtests.jl:724
; │┌ @ abstractarray.jl:75 within `axes'
; ││┌ @ array.jl:155 within `size'
	movq	24(%r13), %r12
	movq	%rax, 24(%rbx)
	movq	24(%rax), %rcx
; │└└
; │┌ @ tuple.jl:328 within `=='
; ││┌ @ tuple.jl:332 within `_eq'
; │││┌ @ range.jl:755 within `=='
	cmpq	$1, %rcx
	je	L125
	testq	%rcx, %rcx
	jne	L141
; ││││┌ @ range.jl:506 within `isempty'
; │││││┌ @ operators.jl:303 within `>'
; ││││││┌ @ int.jl:83 within `<'
	testq	%r12, %r12
	sete	%cl
; │└└└└└└
	testb	%cl, %cl
	jne	L155
	jmp	L1349
; │┌ @ tuple.jl:328 within `=='
; ││┌ @ tuple.jl:332 within `_eq'
; │││┌ @ range.jl:756 within `=='
; ││││┌ @ range.jl:769 within `_has_length_one'
; │││││┌ @ promotion.jl:391 within `=='
L125:
	cmpq	$1, %r12
	sete	%cl
; │└└└└└
	testb	%cl, %cl
	jne	L155
	jmp	L1349
; │┌ @ tuple.jl:328 within `=='
; ││┌ @ tuple.jl:332 within `_eq'
; │││┌ @ range.jl:757 within `==' @ promotion.jl:391
L141:
	cmpq	%r12, %rcx
	sete	%cl
; │└└└
	testb	%cl, %cl
	je	L1349
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:0
L155:
	xorl	%ecx, %ecx
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:724
	testb	%cl, %cl
	jne	L1349
; │┌ @ abstractarray.jl:75 within `axes'
; ││┌ @ array.jl:155 within `size'
	movq	24(%rdx), %r15
; │└└
; │┌ @ tuple.jl:328 within `=='
; ││┌ @ tuple.jl:332 within `_eq'
; │││┌ @ range.jl:755 within `=='
	cmpq	$1, %r12
	je	L195
	testq	%r12, %r12
	jne	L211
; ││││┌ @ range.jl:506 within `isempty'
; │││││┌ @ operators.jl:303 within `>'
; ││││││┌ @ int.jl:83 within `<'
	testq	%r15, %r15
	sete	%cl
; │└└└└└└
	testb	%cl, %cl
	jne	L225
	jmp	L1349
; │┌ @ tuple.jl:328 within `=='
; ││┌ @ tuple.jl:332 within `_eq'
; │││┌ @ range.jl:756 within `=='
; ││││┌ @ range.jl:769 within `_has_length_one'
; │││││┌ @ promotion.jl:391 within `=='
L195:
	cmpq	$1, %r15
	sete	%cl
; │└└└└└
	testb	%cl, %cl
	jne	L225
	jmp	L1349
; │┌ @ tuple.jl:328 within `=='
; ││┌ @ tuple.jl:332 within `_eq'
; │││┌ @ range.jl:757 within `==' @ promotion.jl:391
L211:
	cmpq	%r15, %r12
	sete	%cl
; │└└└
	testb	%cl, %cl
	je	L1349
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:0
L225:
	xorl	%ecx, %ecx
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:724
	testb	%cl, %cl
	jne	L1349
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:0
	addq	$-15784, %r8            # imm = 0xC258
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:729
; │┌ @ int.jl:442 within `<='
	movq	%r12, %r10
	addq	$-3, %r10
	movq	%rdx, %rdi
; │└
	jle	L507
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:0
	movq	%r8, (%rbx)
	movl	$1, %r14d
	movl	$4, %eax
	movabsq	$9223372036854775805, %r8 # imm = 0x7FFFFFFFFFFFFFFD
	nopw	(%rax,%rax)
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:730
; │┌ @ arrayops.jl:285 within `getindex'
; ││┌ @ arrayops.jl:263 within `_preprocessindices'
; │││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; ││││┌ @ arrayops.jl:212 within `checkindex'
; │││││┌ @ arrayops.jl:206 within `last'
; ││││││┌ @ int.jl:86 within `-'
L288:
	leaq	-3(%rax), %r12
; │││││└└
; │││││┌ @ int.jl:442 within `<='
	cmpq	%r15, %rax
; ││││└└
; ││││ @ abstractarray.jl:566 within `checkbounds'
	ja	L672
; │└└└
; │┌ @ arrayops.jl:286 within `getindex'
; ││┌ @ arrayops.jl:273 within `_pointer'
; │││┌ @ indices.jl:476 within `getindex'
; ││││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; │││││┌ @ abstractarray.jl:623 within `checkindex'
; ││││││┌ @ int.jl:442 within `<='
	cmpq	%r15, %r12
; │││││└└
; │││││ @ abstractarray.jl:566 within `checkbounds'
	ja	L765
; │└└└└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:731
; │┌ @ arrayops.jl:285 within `getindex'
; ││┌ @ arrayops.jl:263 within `_preprocessindices'
; │││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; ││││┌ @ abstractarray.jl:268 within `eachindex'
; │││││┌ @ abstractarray.jl:95 within `axes1'
; ││││││┌ @ abstractarray.jl:75 within `axes'
; │││││││┌ @ array.jl:155 within `size'
	movq	24(%r13), %r15
; ││││└└└└
; ││││┌ @ arrayops.jl:212 within `checkindex'
; │││││┌ @ int.jl:442 within `<='
	cmpq	%r15, %rax
; ││││└└
; ││││ @ abstractarray.jl:566 within `checkbounds'
	ja	L902
; │└└└
; │┌ @ arrayops.jl:286 within `getindex'
; ││┌ @ arrayops.jl:273 within `_pointer'
; │││┌ @ indices.jl:476 within `getindex'
; ││││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; │││││┌ @ abstractarray.jl:623 within `checkindex'
; ││││││┌ @ int.jl:442 within `<='
	cmpq	%r15, %r12
; │││││└└
; │││││ @ abstractarray.jl:566 within `checkbounds'
	ja	L992
; │└└└└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:0
	movq	(%rdx), %rcx
	vpmovzxbd	-4(%rcx,%rax), %xmm0 # xmm0 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:731
; │┌ @ arrayops.jl:101 within `vstorec'
; ││┌ @ range.jl:5 within `Colon'
; │││┌ @ range.jl:284 within `UnitRange'
; ││││┌ @ range.jl:289 within `unitrange_last'
; │││││┌ @ operators.jl:350 within `>='
; ││││││┌ @ int.jl:442 within `<='
	xorl	%ecx, %ecx
	cmpq	%r8, %r14
	setl	%cl
; │││││└└
	leaq	(%r14,%rcx,4), %r15
	addq	$-1, %r15
	movq	24(%rbx), %rcx
; ││└└└
; ││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; │││┌ @ abstractarray.jl:268 within `eachindex'
; ││││┌ @ abstractarray.jl:95 within `axes1'
; │││││┌ @ abstractarray.jl:75 within `axes'
; ││││││┌ @ array.jl:155 within `size'
	movq	24(%rcx), %rsi
; │││└└└└
; │││┌ @ abstractarray.jl:628 within `checkindex' @ abstractarray.jl:623
; ││││┌ @ int.jl:442 within `<='
	testq	%r14, %r14
	setg	%dl
	cmpq	%rsi, %r14
	setle	%r11b
	testq	%r15, %r15
	setg	%cl
	cmpq	%rsi, %r15
	setle	%r9b
; ││││└
; ││││ @ abstractarray.jl:628 within `checkindex'
; ││││┌ @ range.jl:506 within `isempty'
; │││││┌ @ operators.jl:303 within `>'
; ││││││┌ @ int.jl:83 within `<'
	cmpq	%r14, %r15
; │││└└└└
; │││ @ abstractarray.jl:566 within `checkbounds'
	jl	L411
; ││└
; ││┌ @ abstractarray.jl within `checkbounds'
	andb	%r11b, %dl
	andb	%r9b, %cl
	andb	%dl, %cl
; ││└
; ││┌ @ abstractarray.jl:566 within `checkbounds'
	je	L1129
; │└└
; │┌ @ arrayops.jl:286 within `getindex'
; ││┌ @ arrayops.jl:273 within `_pointer'
; │││┌ @ abstractarray.jl:1069 within `pointer'
; ││││┌ @ pointer.jl:65 within `unsafe_convert'
L411:
	movq	(%r13), %rcx
; ││└└└
; ││┌ @ arrayops.jl:45 within `vload' @ arrayops.jl:45 @ arrayops.jl:46
; │││┌ @ LLVM_intrinsics.jl:427 within `load'
; ││││┌ @ LLVM_intrinsics.jl:436 within `macro expansion'
	vmovdqu	-32(%rcx,%rax,8), %ymm1
	movq	24(%rbx), %rcx
; │└└└└
; │┌ @ arrayops.jl:103 within `vstorec'
; ││┌ @ abstractarray.jl:1069 within `pointer'
; │││┌ @ pointer.jl:65 within `unsafe_convert'
	movq	(%rcx), %rcx
; │└└└
; │┌ @ arrayops.jl:104 within `vstorec' @ arrayops.jl:96
; ││┌ @ LLVM_intrinsics.jl:519 within `maskedcompressstore'
; │││┌ @ LLVM_intrinsics.jl:536 within `macro expansion'
	vpslld	$31, %xmm0, %xmm0
	vpmovd2m	%xmm0, %k1
	vcompresspd	%ymm1, -8(%rcx,%r14,8) {%k1}
; │└└└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:732
; │┌ @ simdvec.jl:468 within `sum'
; ││┌ @ simdvec.jl:458 within `reduce'
; │││┌ @ LLVM_intrinsics.jl:808 within `reduce_add'
; ││││┌ @ LLVM_intrinsics.jl:838 within `macro expansion'
	kmovd	%k1, %ecx
	andb	$15, %cl
	movzbl	%cl, %ecx
	popcntl	%ecx, %ecx
; │└└└└
; │┌ @ int.jl:87 within `+'
	addq	%rcx, %r14
; │└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:729
; │┌ @ int.jl:442 within `<='
	leaq	1(%rax), %rcx
	cmpq	%r10, %rcx
; │└
	jg	L489
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:0
	movq	%rdi, %rdx
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:730
; │┌ @ arrayops.jl:285 within `getindex'
; ││┌ @ arrayops.jl:263 within `_preprocessindices'
; │││┌ @ abstractarray.jl:566 within `checkbounds' @ abstractarray.jl:551
; ││││┌ @ abstractarray.jl:268 within `eachindex'
; │││││┌ @ abstractarray.jl:95 within `axes1'
; ││││││┌ @ abstractarray.jl:75 within `axes'
; │││││││┌ @ array.jl:155 within `size'
	movq	24(%rdi), %r15
; │└└└└└└└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:729
	addq	$4, %rax
	jmp	L288
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:735
; │┌ @ abstractarray.jl:303 within `lastindex'
; ││┌ @ abstractarray.jl:268 within `eachindex'
; │││┌ @ abstractarray.jl:95 within `axes1'
; ││││┌ @ abstractarray.jl:75 within `axes'
; │││││┌ @ array.jl:155 within `size'
L489:
	movq	24(%r13), %r12
	movq	(%rbx), %r15
; │└└└└└
; │┌ @ int.jl:442 within `<='
	cmpq	%r12, %rcx
; │└
	jg	L643
	jmp	L526
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:0
L507:
	movq	%r8, %r15
	movl	$1, %r14d
	movl	$1, %ecx
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:735
; │┌ @ int.jl:442 within `<='
	cmpq	%r12, %rcx
; │└
	jg	L643
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:0
L526:
	movq	%rdi, %rdx
	movq	(%rdi), %rax
	movq	8(%rdi), %rdx
	movq	(%r13), %r8
	movq	8(%r13), %r9
	movq	24(%rbx), %rsi
	movq	(%rsi), %r10
	movq	8(%rsi), %r11
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:735
	decq	%rcx
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:736
; │┌ @ array.jl:809 within `getindex'
	cmpq	%rdx, %rcx
	jb	L601
	jmp	L1234
	nopl	(%rax,%rax)
; │└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:735
; │┌ @ int.jl:442 within `<='
L576:
	leaq	1(%rcx), %rsi
	addq	$2, %rcx
	cmpq	%r12, %rcx
	movq	%rsi, %rcx
; │└
	jg	L643
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:736
; │┌ @ array.jl:809 within `getindex'
	cmpq	%rdx, %rcx
	jae	L1234
L601:
	testb	$1, (%rax,%rcx)
; │└
	je	L576
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:737
; │┌ @ array.jl:809 within `getindex'
	cmpq	%r9, %rcx
	jae	L1271
; │└
; │┌ @ array.jl:847 within `setindex!'
	leaq	-1(%r14), %rsi
	cmpq	%r11, %rsi
	jae	L1311
; │└
; │┌ @ array.jl:809 within `getindex'
	movq	(%r8,%rcx,8), %rsi
; │└
; │┌ @ array.jl:847 within `setindex!'
	movq	%rsi, -8(%r10,%r14,8)
; │└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:738
; │┌ @ int.jl:87 within `+'
	incq	%r14
	jmp	L576
; └└
; ┌ @ int.jl within `vcompress!'
L643:
	movq	40(%rbx), %rax
	movq	%rax, (%r15)
	movq	24(%rbx), %rax
; └
; ┌ @ runtests.jl:724 within `vcompress!'
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	vzeroupper
	retq
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:730
; │┌ @ arrayops.jl:285 within `getindex'
; ││┌ @ arrayops.jl:263 within `_preprocessindices'
; │││┌ @ abstractarray.jl:566 within `checkbounds'
L672:
	movabsq	$jl_gc_pool_alloc, %rax
	movq	(%rbx), %rdi
	movl	$1400, %esi             # imm = 0x578
	movq	%rdx, %r14
	movl	$16, %edx
	vzeroupper
	callq	*%rax
	movabsq	$140356044936752, %rcx  # imm = 0x7FA730335630
	movq	%rcx, -8(%rax)
	movq	%r12, (%rax)
	movq	%rax, 48(%rbx)
	movq	%r14, 8(%rbx)
	movq	%rax, 16(%rbx)
	movabsq	$jl_apply_generic, %rax
	movabsq	$jl_system_image_data, %rdi
	leaq	8(%rbx), %rsi
	movl	$2, %edx
	callq	*%rax
	ud2
; │└└└
; │┌ @ arrayops.jl:286 within `getindex'
; ││┌ @ arrayops.jl:273 within `_pointer'
; │││┌ @ indices.jl:476 within `getindex'
; ││││┌ @ abstractarray.jl:566 within `checkbounds'
L765:
	movabsq	$jl_gc_pool_alloc, %r14
	movq	(%rbx), %rdi
	movl	$1400, %esi             # imm = 0x578
	movl	$16, %edx
	vzeroupper
	callq	*%r14
	movq	%r14, %rcx
	movq	%rax, %r14
	movabsq	$140356044936752, %r13  # imm = 0x7FA730335630
	leaq	64484608(%r13), %rax
	movq	%rax, -8(%r14)
	movq	%r15, (%r14)
	movq	%r14, 56(%rbx)
	movq	(%rbx), %rdi
	movl	$1400, %esi             # imm = 0x578
	movl	$16, %edx
	callq	*%rcx
	addq	$63330016, %r13         # imm = 0x3C656E0
	movq	%r13, -8(%rax)
	movq	%r12, (%rax)
	movq	%rax, 48(%rbx)
	movq	%r14, 8(%rbx)
	movq	%rax, 16(%rbx)
	movabsq	$jl_apply_generic, %rax
	movabsq	$jl_system_image_data, %rdi
	leaq	8(%rbx), %rsi
	movl	$2, %edx
	callq	*%rax
	ud2
; │└└└└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:731
; │┌ @ arrayops.jl:285 within `getindex'
; ││┌ @ arrayops.jl:263 within `_preprocessindices'
; │││┌ @ abstractarray.jl:566 within `checkbounds'
L902:
	movabsq	$jl_gc_pool_alloc, %rax
	movq	(%rbx), %rdi
	movl	$1400, %esi             # imm = 0x578
	movl	$16, %edx
	vzeroupper
	callq	*%rax
	movabsq	$140356044936752, %rcx  # imm = 0x7FA730335630
	movq	%rcx, -8(%rax)
	movq	%r12, (%rax)
	movq	%rax, 48(%rbx)
	movq	%r13, 8(%rbx)
	movq	%rax, 16(%rbx)
	movabsq	$jl_apply_generic, %rax
	movabsq	$jl_system_image_data, %rdi
	leaq	8(%rbx), %rsi
	movl	$2, %edx
	callq	*%rax
	ud2
; │└└└
; │┌ @ arrayops.jl:286 within `getindex'
; ││┌ @ arrayops.jl:273 within `_pointer'
; │││┌ @ indices.jl:476 within `getindex'
; ││││┌ @ abstractarray.jl:566 within `checkbounds'
L992:
	movabsq	$jl_gc_pool_alloc, %r14
	movq	(%rbx), %rdi
	movl	$1400, %esi             # imm = 0x578
	movl	$16, %edx
	vzeroupper
	callq	*%r14
	movq	%r14, %rcx
	movq	%rax, %r14
	movabsq	$140356044936752, %r13  # imm = 0x7FA730335630
	leaq	64484608(%r13), %rax
	movq	%rax, -8(%r14)
	movq	%r15, (%r14)
	movq	%r14, 56(%rbx)
	movq	(%rbx), %rdi
	movl	$1400, %esi             # imm = 0x578
	movl	$16, %edx
	callq	*%rcx
	addq	$63330016, %r13         # imm = 0x3C656E0
	movq	%r13, -8(%rax)
	movq	%r12, (%rax)
	movq	%rax, 48(%rbx)
	movq	%r14, 8(%rbx)
	movq	%rax, 16(%rbx)
	movabsq	$jl_apply_generic, %rax
	movabsq	$jl_system_image_data, %rdi
	leaq	8(%rbx), %rsi
	movl	$2, %edx
	callq	*%rax
	ud2
; │└└└└
; │┌ @ arrayops.jl:101 within `vstorec'
; ││┌ @ abstractarray.jl:566 within `checkbounds'
L1129:
	movabsq	$jl_gc_pool_alloc, %rax
	movq	(%rbx), %rdi
	movl	$1424, %esi             # imm = 0x590
	movl	$32, %edx
	vzeroupper
	callq	*%rax
	movabsq	$140356044936752, %rcx  # imm = 0x7FA730335630
	addq	$63327248, %rcx         # imm = 0x3C64C10
	movq	%rcx, -8(%rax)
	movq	%r14, (%rax)
	movq	%r15, 8(%rax)
	movq	%rax, 48(%rbx)
	movq	24(%rbx), %rcx
	movq	%rcx, 8(%rbx)
	movq	%rax, 16(%rbx)
	movabsq	$jl_apply_generic, %rax
	movabsq	$jl_system_image_data, %rdi
	leaq	8(%rbx), %rsi
	movl	$2, %edx
	callq	*%rax
	ud2
; │└└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:736
; │┌ @ array.jl:809 within `getindex'
L1234:
	movq	%rsp, %rax
	leaq	-16(%rax), %rsi
	movq	%rsi, %rsp
	incq	%rcx
	movq	%rcx, -16(%rax)
	movabsq	$jl_bounds_error_ints, %rax
	movl	$1, %edx
	vzeroupper
	callq	*%rax
; │└
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:737
; │┌ @ array.jl:809 within `getindex'
L1271:
	movq	%rsp, %rax
	leaq	-16(%rax), %rsi
	movq	%rsi, %rsp
	incq	%rcx
	movq	%rcx, -16(%rax)
	movabsq	$jl_bounds_error_ints, %rax
	movl	$1, %edx
	movq	%r13, %rdi
	vzeroupper
	callq	*%rax
; │└
; │┌ @ array.jl:847 within `setindex!'
L1311:
	movq	%rsp, %rax
	leaq	-16(%rax), %rsi
	movq	%rsi, %rsp
	movq	%r14, -16(%rax)
	movabsq	$jl_bounds_error_ints, %rax
	movl	$1, %edx
	movq	24(%rbx), %rdi
	vzeroupper
	callq	*%rax
; │└
; │ @ runtests.jl:724 within `vcompress!' @ array.jl:0
L1349:
	movabsq	$140356056766000, %rax  # imm = 0x7FA730E7D630
; │ @ runtests.jl:724 within `vcompress!' @ runtests.jl:724
	movq	%rax, 8(%rbx)
	movabsq	$jl_apply_generic, %rax
	movabsq	$jl_system_image_data, %rdi
	leaq	8(%rbx), %rsi
	movl	$1, %edx
	vzeroupper
	callq	*%rax
	movabsq	$jl_throw, %rcx
	movq	%rax, %rdi
	callq	*%rcx
; └
Test Summary:       | Pass  Total
Real-world examples |   17     17
Test Summary:   | Pass  Total
Vector shuffles |  202    202
    Testing SIMD tests passed 
