Julia Version 1.6.0-DEV.807
Commit a3430e7ec1 (2020-09-01 17:29 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed MicrosoftMPI_jll ───────────── v10.1.2+3
  Installed NaNMath ────────────────────── v0.3.4
  Installed CodecBzip2 ─────────────────── v0.7.2
  Installed Parsers ────────────────────── v1.0.10
  Installed MbedTLS ────────────────────── v1.0.2
  Installed DualDecomposition ──────────── v0.1.1
  Installed SpecialFunctions ───────────── v0.10.3
  Installed MPI ────────────────────────── v0.15.1
  Installed MbedTLS_jll ────────────────── v2.16.6+1
  Installed IniFile ────────────────────── v0.5.0
  Installed DiffResults ────────────────── v1.0.2
  Installed ZipFile ────────────────────── v0.9.2
  Installed DataStructures ─────────────── v0.17.20
  Installed DiffRules ──────────────────── v1.0.1
  Installed MutableArithmetics ─────────── v0.2.10
  Installed MacroTools ─────────────────── v0.5.5
  Installed Calculus ───────────────────── v0.5.1
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed ForwardDiff ────────────────── v0.10.12
  Installed Zlib_jll ───────────────────── v1.2.11+16
  Installed CommonSubexpressions ───────── v0.3.0
  Installed JSONSchema ─────────────────── v0.3.2
  Installed HTTP ───────────────────────── v0.8.17
  Installed StaticArrays ───────────────── v0.12.4
  Installed BenchmarkTools ─────────────── v0.5.0
  Installed TranscodingStreams ─────────── v0.9.5
  Installed DocStringExtensions ────────── v0.8.3
  Installed JuMP ───────────────────────── v0.21.3
  Installed MathOptInterface ───────────── v0.9.14
  Installed BundleMethod ───────────────── v0.1.4
  Installed Requires ───────────────────── v1.0.2
  Installed MPICH_jll ──────────────────── v3.3.2+10
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed CodecZlib ──────────────────── v0.7.0
  Installed OrderedCollections ─────────── v1.3.0
  Installed Bzip2_jll ──────────────────── v1.0.6+4
  Installed JSON ───────────────────────── v0.21.0
  Installed OpenMPI_jll ────────────────── v4.0.2+2
Updating `~/.julia/environments/v1.6/Project.toml`
  [d0e446f1] + DualDecomposition v0.1.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [6e4b80f9] + BenchmarkTools v0.5.0
  [e8a6717a] + BundleMethod v0.1.4
  [6e34b625] + Bzip2_jll v1.0.6+4
  [49dc2e85] + Calculus v0.5.1
  [523fee87] + CodecBzip2 v0.7.2
  [944b1d66] + CodecZlib v0.7.0
  [bbf7d656] + CommonSubexpressions v0.3.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [864edb3b] + DataStructures v0.17.20
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [ffbed154] + DocStringExtensions v0.8.3
  [d0e446f1] + DualDecomposition v0.1.1
  [f6369f11] + ForwardDiff v0.10.12
  [cd3eb016] + HTTP v0.8.17
  [83e8ac13] + IniFile v0.5.0
  [682c06a0] + JSON v0.21.0
  [7d188eb4] + JSONSchema v0.3.2
  [4076af6c] + JuMP v0.21.3
  [da04e1cc] + MPI v0.15.1
  [7cb0a576] + MPICH_jll v3.3.2+10
  [1914dd2f] + MacroTools v0.5.5
  [b8f27783] + MathOptInterface v0.9.14
  [739be429] + MbedTLS v1.0.2
  [c8ffd9c3] + MbedTLS_jll v2.16.6+1
  [9237b28f] + MicrosoftMPI_jll v10.1.2+3
  [d8a4904e] + MutableArithmetics v0.2.10
  [77ba4419] + NaNMath v0.3.4
  [fe0851c0] + OpenMPI_jll v4.0.2+2
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.3.0
  [69de0a69] + Parsers v1.0.10
  [ae029012] + Requires v1.0.2
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [3bb67fe8] + TranscodingStreams v0.9.5
  [a5390f91] + ZipFile v0.9.2
  [83775a58] + Zlib_jll v1.2.11+16
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building MPI → `~/.julia/packages/MPI/z1lDn/deps/build.log`
    Testing DualDecomposition
Status `/tmp/jl_O9D6aU/Project.toml`
  [e8a6717a] BundleMethod v0.1.4
  [d0e446f1] DualDecomposition v0.1.1
  [60bf3e95] GLPK v0.13.0
  [b6b21f68] Ipopt v0.6.3
  [4076af6c] JuMP v0.21.3
  [da04e1cc] MPI v0.15.1
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_O9D6aU/Manifest.toml`
  [ae81ac8f] ASL_jll v0.1.1+3
  [6e4b80f9] BenchmarkTools v0.5.0
  [b99e7846] BinaryProvider v0.5.10
  [e8a6717a] BundleMethod v0.1.4
  [6e34b625] Bzip2_jll v1.0.6+4
  [49dc2e85] Calculus v0.5.1
  [523fee87] CodecBzip2 v0.7.2
  [944b1d66] CodecZlib v0.7.0
  [bbf7d656] CommonSubexpressions v0.3.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [864edb3b] DataStructures v0.17.20
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [ffbed154] DocStringExtensions v0.8.3
  [d0e446f1] DualDecomposition v0.1.1
  [f6369f11] ForwardDiff v0.10.12
  [60bf3e95] GLPK v0.13.0
  [e8aa6df9] GLPK_jll v4.64.0+0
  [781609d7] GMP_jll v6.2.0+1
  [cd3eb016] HTTP v0.8.17
  [83e8ac13] IniFile v0.5.0
  [b6b21f68] Ipopt v0.6.3
  [9cc047cb] Ipopt_jll v3.13.2+0
  [682c06a0] JSON v0.21.0
  [7d188eb4] JSONSchema v0.3.2
  [4076af6c] JuMP v0.21.3
  [d00139f3] METIS_jll v5.1.0+4
  [da04e1cc] MPI v0.15.1
  [7cb0a576] MPICH_jll v3.3.2+10
  [d7ed1dd3] MUMPS_seq_jll v5.2.1+3
  [1914dd2f] MacroTools v0.5.5
  [b8f27783] MathOptInterface v0.9.14
  [fdba3010] MathProgBase v0.7.8
  [739be429] MbedTLS v1.0.2
  [c8ffd9c3] MbedTLS_jll v2.16.6+1
  [9237b28f] MicrosoftMPI_jll v10.1.2+3
  [d8a4904e] MutableArithmetics v0.2.10
  [77ba4419] NaNMath v0.3.4
  [656ef2d0] OpenBLAS32_jll v0.3.9+4
  [fe0851c0] OpenMPI_jll v4.0.2+2
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.3.0
  [69de0a69] Parsers v1.0.10
  [ae029012] Requires v1.0.2
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [3bb67fe8] TranscodingStreams v0.9.5
  [a5390f91] ZipFile v0.9.2
  [83775a58] Zlib_jll v1.2.11+16
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

Iter 0: ncols 12, nrows 6, fx0 1.154000e+05, fx1 0.000000e+00, fy 1.154000e+05, v -1.332200e+05, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 1.154000e+05, fx1 1.154000e+05, fy 5.735333e+05, v -1.315373e+04, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 1.154000e+05, fx1 1.154000e+05, fy 1.524635e+05, v -8.707668e+03, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.102523e+05, v -2.551334e+03, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.138567e+05, v -1.867371e+03, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 16, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -4.494681e+01, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -3.990977e+01, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 22, fx0 1.083900e+05, fx1 1.083900e+05, fy 1.083900e+05, v -9.584044e-04, u 3.583181e-01, i -1
TERMINATION: Optimal: v = -0.0009584043637005379
DD.dual_objective_value(algo) = -108389.99987454197
DD.dual_solution(algo) = [40.11111070986341, 23.444444210029587, -63.555554919893076, -16.77777760986265, -28.11111083003394, 44.88888843989639, -23.333333100000758, 4.66666662000435, 18.666666479996685]
Iter 0: ncols 12, nrows 24, Δ 1.000000e+01, fx0 1.154000e+05, m 1.127700e+05, fy 1.154000e+05
Iter 1: ncols 12, nrows 24, Δ 1.500000e+01, fx0 1.132200e+05, m 1.088250e+05, fy 1.132200e+05
Iter 2: ncols 12, nrows 27, Δ 7.500000e+00, fx0 1.132200e+05, m 1.108083e+05, fy 1.148917e+05
Iter 3: ncols 12, nrows 30, Δ 3.750000e+00, fx0 1.132200e+05, m 1.126083e+05, fy 1.123833e+05
Iter 4: ncols 12, nrows 30, Δ 1.187500e+01, fx0 1.126083e+05, m 1.111833e+05, fy 1.126083e+05
Iter 5: ncols 12, nrows 30, Δ 1.593750e+01, fx0 1.111833e+05, m 1.095896e+05, fy 1.111833e+05
Iter 6: ncols 12, nrows 30, Δ 1.796875e+01, fx0 1.095896e+05, m 1.077927e+05, fy 1.095896e+05
Iter 7: ncols 12, nrows 33, Δ 8.984375e+00, fx0 1.095896e+05, m 1.086911e+05, fy 1.124115e+05
Iter 8: ncols 12, nrows 33, Δ 1.449219e+01, fx0 1.086911e+05, m 1.083900e+05, fy 1.086911e+05
Iter 9: ncols 12, nrows 33, Δ 1.724609e+01, fx0 1.083900e+05, m 1.083900e+05, fy 1.083900e+05
TERMINATION: Optimal
DD.dual_objective_value(algo) = -108390.00000000003
DD.dual_solution(algo) = [38.62760416666661, 21.960937500000117, -65.03906250000007, -18.869791666666693, -30.203125000000117, 42.79687499999997, -19.757812499999915, 8.2421875, 22.2421875000001]
objval = 96480.08276953863
Iter 0: ncols 12, nrows 6, fx0 -9.643955e+04, fx1 0.000000e+00, fy -9.643955e+04, v -6.182148e+00, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 -9.644548e+04, fx1 -9.644548e+04, fy -9.644548e+04, v -4.352687e+00, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 -9.644969e+04, fx1 -9.644969e+04, fy -9.644969e+04, v -3.463396e+00, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 -9.645287e+04, fx1 -9.645287e+04, fy -9.645287e+04, v -2.914920e+00, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 -9.645530e+04, fx1 -9.645530e+04, fy -9.645530e+04, v -2.579865e+00, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 17, fx0 -9.645720e+04, fx1 -9.645720e+04, fy -9.645720e+04, v -2.379253e+00, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 -9.645869e+04, fx1 -9.645869e+04, fy -9.645869e+04, v -2.263398e+00, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 21, fx0 -9.645987e+04, fx1 -9.645987e+04, fy -9.645987e+04, v -2.200725e+00, u 3.583181e-01, i -1
Iter 8: ncols 12, nrows 23, fx0 -9.646081e+04, fx1 -9.646081e+04, fy -9.646081e+04, v -2.171054e+00, u 4.299817e-01, i -1
Iter 9: ncols 12, nrows 25, fx0 -9.646157e+04, fx1 -9.646157e+04, fy -9.646157e+04, v -2.161458e+00, u 5.159780e-01, i -1
Iter 10: ncols 12, nrows 27, fx0 -9.646219e+04, fx1 -9.646219e+04, fy -9.646219e+04, v -2.163669e+00, u 6.191736e-01, i -1
Iter 11: ncols 12, nrows 29, fx0 -9.646269e+04, fx1 -9.646269e+04, fy -9.646269e+04, v -2.172433e+00, u 7.430084e-01, i -1
Iter 12: ncols 12, nrows 32, fx0 -9.646310e+04, fx1 -9.646310e+04, fy -9.646310e+04, v -2.743598e-01, u 8.916100e-01, i -1
Iter 13: ncols 12, nrows 33, fx0 -9.646337e+04, fx1 -9.646337e+04, fy -9.646337e+04, v -2.273735e-01, u 1.069932e+00, i -1
Iter 14: ncols 12, nrows 34, fx0 -9.646359e+04, fx1 -9.646359e+04, fy -9.646359e+04, v -1.897052e-01, u 1.283918e+00, i -1
Iter 15: ncols 12, nrows 35, fx0 -9.646378e+04, fx1 -9.646378e+04, fy -9.646378e+04, v -1.593354e-01, u 1.540702e+00, i -1
Iter 16: ncols 12, nrows 36, fx0 -9.646393e+04, fx1 -9.646393e+04, fy -9.646393e+04, v -1.347288e-01, u 1.848843e+00, i -1
Iter 17: ncols 12, nrows 37, fx0 -9.646406e+04, fx1 -9.646406e+04, fy -9.646406e+04, v -1.147045e-01, u 2.218611e+00, i -1
Iter 18: ncols 12, nrows 38, fx0 -9.646416e+04, fx1 -9.646416e+04, fy -9.646416e+04, v -9.835334e-02, u 2.662333e+00, i -1
Iter 19: ncols 12, nrows 39, fx0 -9.646425e+04, fx1 -9.646425e+04, fy -9.646425e+04, v -8.495774e-02, u 3.194800e+00, i -1
TERMINATION: Optimal: v = -0.08495773745380575
DD.dual_objective_value(algo) = 96464.24834260828
DD.dual_solution(algo) = [18.67625609933159, 13.864330323209106, 14.239644102211328, 0.8134823955022574, 0.40791317556711976, 0.373313528915692, -19.489738494833848, -14.272243498776225, -14.61295763112702]
Iter 0: ncols 12, nrows 24, Δ 1.000000e+01, fx0 -9.643955e+04, m -9.645850e+04, fy -9.643955e+04
Iter 1: ncols 12, nrows 24, Δ 1.500000e+01, fx0 -9.645627e+04, m -9.648693e+04, fy -9.645627e+04
Iter 2: ncols 12, nrows 24, Δ 1.750000e+01, fx0 -9.647299e+04, m -9.652009e+04, fy -9.647299e+04
Iter 3: ncols 12, nrows 27, Δ 8.750000e+00, fx0 -9.647299e+04, m -9.648092e+04, fy -9.647983e+04
Iter 4: ncols 12, nrows 30, Δ 4.375000e+00, fx0 -9.647299e+04, m -9.647868e+04, fy -9.646963e+04
Iter 5: ncols 12, nrows 30, Δ 1.218750e+01, fx0 -9.647598e+04, m -9.648095e+04, fy -9.647598e+04
Iter 6: ncols 12, nrows 33, Δ 6.093750e+00, fx0 -9.647598e+04, m -9.648004e+04, fy -9.647663e+04
Iter 7: ncols 12, nrows 36, Δ 3.046875e+00, fx0 -9.647598e+04, m -9.647793e+04, fy -9.647692e+04
Iter 8: ncols 12, nrows 36, Δ 1.152344e+01, fx0 -9.647756e+04, m -9.648054e+04, fy -9.647756e+04
Iter 9: ncols 12, nrows 36, Δ 1.576172e+01, fx0 -9.647926e+04, m -9.648159e+04, fy -9.647926e+04
Iter 10: ncols 12, nrows 39, Δ 7.880859e+00, fx0 -9.647926e+04, m -9.648097e+04, fy -9.647796e+04
Iter 11: ncols 12, nrows 42, Δ 3.940430e+00, fx0 -9.647926e+04, m -9.648056e+04, fy -9.647944e+04
Iter 12: ncols 12, nrows 45, Δ 1.970215e+00, fx0 -9.647926e+04, m -9.647993e+04, fy -9.647949e+04
Iter 13: ncols 12, nrows 45, Δ 1.098511e+01, fx0 -9.647969e+04, m -9.648076e+04, fy -9.647969e+04
Iter 14: ncols 12, nrows 48, Δ 5.492554e+00, fx0 -9.647969e+04, m -9.648051e+04, fy -9.647954e+04
Iter 15: ncols 12, nrows 48, Δ 1.274628e+01, fx0 -9.648005e+04, m -9.648051e+04, fy -9.648005e+04
Iter 16: ncols 12, nrows 51, Δ 6.373138e+00, fx0 -9.648005e+04, m -9.648023e+04, fy -9.648005e+04
Iter 17: ncols 12, nrows 54, Δ 3.186569e+00, fx0 -9.648005e+04, m -9.648019e+04, fy -9.647966e+04
Iter 18: ncols 12, nrows 57, Δ 1.593285e+00, fx0 -9.648005e+04, m -9.648013e+04, fy -9.648001e+04
TERMINATION: Optimal
DD.dual_objective_value(algo) = 96480.04965574063
DD.dual_solution(algo) = [38.4308148554463, 41.22571441254453, 49.5539103340924, 5.31876480329002e-9, 1.7304124804286927e-8, 8.878615227037662e-9, -38.43081486076507, -41.22571442984865, -49.553910342971015]
Test Summary: | Pass  Total
farmer        |    5      5
Test Summary:             | Pass  Total
combine_dict with 1 procs |    9      9
Test Summary:             |
combine_dict with 2 procs | No tests
Test Summary:             | Pass  Total
combine_dict with 2 procs |   18     18
Test Summary:             |
Test Summary:             |
combine_dict with 3 procs | No tests
combine_dict with 3 procs | No tests
Test Summary:             | Pass  Total
combine_dict with 3 procs |   27     27

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

Iter 0: ncols 12, nrows 6, fx0 1.154000e+05, fx1 0.000000e+00, fy 1.154000e+05, v -1.332200e+05, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 1.154000e+05, fx1 1.154000e+05, fy 5.735333e+05, v -1.315373e+04, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 1.154000e+05, fx1 1.154000e+05, fy 1.524635e+05, v -8.707668e+03, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.102523e+05, v -2.551334e+03, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.138567e+05, v -1.867371e+03, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 16, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -4.494681e+01, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -3.990977e+01, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 22, fx0 1.083900e+05, fx1 1.083900e+05, fy 1.083900e+05, v -9.584044e-04, u 3.583181e-01, i -1
TERMINATION: Optimal: v = -0.0009584043637005379

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

Iter 0: ncols 12, nrows 6, fx0 1.154000e+05, fx1 0.000000e+00, fy 1.154000e+05, v -1.332200e+05, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 1.154000e+05, fx1 1.154000e+05, fy 5.735333e+05, v -1.315373e+04, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 1.154000e+05, fx1 1.154000e+05, fy 1.524635e+05, v -8.707668e+03, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.102523e+05, v -2.551334e+03, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.138567e+05, v -1.867371e+03, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 16, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -4.494681e+01, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -3.990977e+01, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 22, fx0 1.083900e+05, fx1 1.083900e+05, fy 1.083900e+05, v -9.584043e-04, u 3.583181e-01, i -1
TERMINATION: Optimal: v = -0.0009584043473296333

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

Iter 0: ncols 12, nrows 6, fx0 1.154000e+05, fx1 0.000000e+00, fy 1.154000e+05, v -1.332200e+05, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 1.154000e+05, fx1 1.154000e+05, fy 5.735333e+05, v -1.315373e+04, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 1.154000e+05, fx1 1.154000e+05, fy 1.524635e+05, v -8.707668e+03, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.102523e+05, v -2.551334e+03, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.138567e+05, v -1.867371e+03, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 16, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -4.494681e+01, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -3.990977e+01, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 22, fx0 1.083900e+05, fx1 1.083900e+05, fy 1.083900e+05, v -9.584044e-04, u 3.583181e-01, i -1
TERMINATION: Optimal: v = -0.0009584043637005379
Test Summary: |
MPI tests     | No tests
Iter 0: ncols 160, nrows 79, fx0 1.790400e+02, fx1 0.000000e+00, fy 1.790400e+02, v -2.329989e+06, u 1.000000e-01, i 0
Iter 1: ncols 160, nrows 95, fx0 1.790400e+02, fx1 1.790400e+02, fy 2.263167e+06, v -2.736868e+02, u 1.200000e-01, i -1
Iter 2: ncols 160, nrows 103, fx0 1.790400e+02, fx1 1.790400e+02, fy 1.961183e+04, v -7.290002e+00, u 1.440000e-01, i -1
Iter 3: ncols 160, nrows 119, fx0 1.726358e+02, fx1 1.726358e+02, fy 1.726358e+02, v -8.858075e-01, u 1.728000e-01, i -1
Iter 4: ncols 160, nrows 135, fx0 1.719165e+02, fx1 1.719165e+02, fy 1.719165e+02, v -1.664715e-01, u 2.073600e-01, i -1
Iter 5: ncols 160, nrows 149, fx0 1.717788e+02, fx1 1.717788e+02, fy 1.717788e+02, v -2.875979e-02, u 2.488320e-01, i -1
Iter 6: ncols 160, nrows 160, fx0 1.717500e+02, fx1 1.717500e+02, fy 1.717500e+02, v -1.425825e-06, u 2.985984e-01, i -1
TERMINATION: Optimal: v = -1.425824740053372e-6
DD.dual_objective_value(algo) = -171.74999993134588
DD.dual_solution(algo) = [-0.0009710593165259824, 0.0010811527724035553, -0.00011009345583185549, -0.0009132068115485192, 0.0010233002674670398, -0.00011009345583185549, -0.0009437472046326024, 0.0010538406605558371, -0.00011009345583185549, -0.000889299820191763, 0.0009993932759677661, -0.00011009345583185549, 0.0031288222848172304, -0.003018728829113715, -0.00011009345583185549, 0.0029757776707126315, -0.0028656842148718094, -0.00011009345583185549, 0.0030369453133391364, -0.0029268518573131916, -0.00011009345583185549, 0.002891141609853062, -0.0027810481540843407, -0.00011009345583185549, -0.003025233200999854, 0.003135326656808555, -0.00011009345583185549, -0.0028419092104512204, 0.0029520026661469844, -0.00011009345583185549, -0.0029484756421855962, 0.0030585690980779747, -0.00011009345583185549, -0.0027766950203303204, 0.002886788476165018, -0.00011009345583185549, 0.0008446696325182908, -0.0012061087582513647, 0.00036143912568122944, 0.000804772283598735, -0.0011370684801986538, 0.00033229619647462855, 0.0008190195094728094, -0.0011737571587116826, 0.00035473764926493515, 0.0008084779225539625, -0.0010811264210479712, 0.00027264849856147336, -0.0009342827704873643, 0.0010260050508623534, -0.00012400216949301374, 0.003038261121309879, -0.002835745688401876, -0.00012400216949301374, -0.002921350227356038, 0.002956061765264515, -0.00012400216949301374, 0.0008173718765335234, -0.0011463211277249919, 0.0003720065084790412, -0.0008303068541249812, 0.0010047441633302173, -7.8384903087145e-5, 0.0026727132474690988, -0.0028483246875219176, -7.8384903087145e-5, -0.0025898450185998325, 0.0029239520168117903, -7.8384903087145e-5, 0.0007474386252557149, -0.0010803714926200898, 0.00023515470926143496, -0.0009221458788389634, 0.0009797941357233275, -0.00013265633754607698, 0.0030295061452992166, -0.0026519055081016454, -0.00013265633754607698, -0.0029050937375714697, 0.002787861345982292, -0.00013265633754607698, 0.0007977334711112167, -0.0011157499736039738, 0.0003979690126382309, -0.0008335005211570799, 0.0009547777655270841, -8.760937511679202e-5, 0.002688814354893139, -0.0026818447971448983, -8.760937511679202e-5, -0.002595611452988522, 0.002772165074687073, -8.760937511679202e-5, 0.0007402976192524629, -0.001045098043069259, 0.000262828125350376, -5.825429694903537e-24, 9.374955837696087e-23, -1.8819095155136186e-23, -2.708671737066315e-23, 1.316633826331299e-22, -1.3572349023799588e-25, -8.894549474687925e-23, 4.8150173075126055e-23, 9.238127552499588e-24, 5.852969466285888e-24, 1.6707362569448386e-22, -1.2740180347920847e-22, -6.487661152333939e-24, 2.040989928218772e-24, 2.500214925629017e-26, 1.1865354017279929e-24, 7.14056115712015e-24, -2.1598066531154864e-24, -3.6136699571740874e-23, 3.3836949035493224e-25, 4.577918879012727e-28, -1.7631410037400564e-23, 1.2057520417924136e-23, 1.0552019701190273e-24, -5.270860038704e-24, 2.0885779434963428e-23, 8.182810966819875e-25, 4.2892436413096184e-24, -1.437304682295088e-23, -1.4946857506085076e-25, 5.201650051284128e-24, -3.8543089189194126e-23, -1.446661718290411e-23, 7.740415158690985e-24, -6.499356174650649e-23, 9.704501627943657e-23, 2.833162176438968e-23, 3.9634535077099564e-25, 7.566648646533985e-26, 1.1445360109201097e-24, 1.496131902792991e-23, 1.3158094263668065e-23, -7.270787768123288e-25, 4.7597000086234536e-27, 1.4201495404223698e-21, 4.35861501514558e-25, -1.4289304344104713e-23, -1.1028264912387163e-24]
Iter 0: ncols 160, nrows 367, Δ 1.000000e+01, fx0 1.790400e+02, m -3.793274e+04, fy 1.790400e+02
Iter 1: ncols 160, nrows 383, Δ 5.000000e+00, fx0 1.790400e+02, m -6.181201e+00, fy 3.731425e+04
Iter 2: ncols 160, nrows 399, Δ 2.500000e+00, fx0 1.790400e+02, m 1.717500e+02, fy 1.635598e+04
Iter 3: ncols 160, nrows 399, Δ 1.125000e+01, fx0 1.720515e+02, m 1.717500e+02, fy 1.720515e+02
Iter 4: ncols 160, nrows 415, Δ 5.625000e+00, fx0 1.720515e+02, m 1.717500e+02, fy 1.720515e+02
Iter 5: ncols 160, nrows 431, Δ 2.812500e+00, fx0 1.720515e+02, m 1.717500e+02, fy 3.748477e+02
Iter 6: ncols 160, nrows 431, Δ 1.140625e+01, fx0 1.717500e+02, m 1.717500e+02, fy 1.717500e+02
TERMINATION: Optimal
DD.dual_objective_value(algo) = -171.75000116416902
DD.dual_solution(algo) = [0.0007180330001062177, 0.0027478289775005583, -0.0034341742393101497, 0.00010827835617315524, 0.0020474653514709704, -0.0021241383294891367, 0.0004301857867528635, 0.002417203906610766, -0.0028157019765091733, -0.000518081473166217, 0.0014009370243343426, -0.0008511667687721357, 0.003419709289820328, -0.0026591155116993987, -0.0007288843808838423, 0.0027509847898005662, -0.003089525659514139, 0.0003702164215958833, 0.003018249272253877, -0.002917505715637186, -6.905126958943369e-5, 0.0020531041031347052, -0.0037168172998300335, 0.0017121426394812041, -0.0019765614577042295, 0.004115007039656374, -0.002106704639272967, -0.0025087134328762107, 0.0032964265165884763, -0.0007560192024082284, -0.002199385307942324, 0.0037722565788709983, -0.0015411844904166705, -0.003076657418559319, 0.0026800007746788663, 0.00042834276194702865, -0.0006672745336499691, -0.0027009715015082424, 0.0027988187616159446, -0.000477917652609357, -0.002437213163006013, 0.0030488063865739727, -0.0004951606671189488, -0.0024887331469756273, 0.0030011752625605545, -0.0005787926544151376, -0.002467244171540713, 0.0030675230628771488, -0.00016449193536942643, 0.001818213281245784, -0.0016610738807029451, 0.0029465216209909914, -0.0029301511306282935, 5.507778049979474e-5, -0.0025582854657290295, 0.0033296975697170517, -0.0008508726748896958, -0.00022374421989253547, -0.0022177597203345417, 0.002456868775092846, -4.373829140782752e-5, 0.0017225813938470033, -0.001540653062921279, 0.002683645898662907, -0.0028383445817860386, -0.00010083133247418489, -0.002268883719186111, 0.0032168661138367253, -0.0006762720070619293, -0.00037102388806896846, -0.0021011029258976898, 0.0023177564024573927, -0.00017854784424981495, 0.0017923841408722223, -0.0016571398733222851, 0.002908523656700372, -0.00278411083173231, 0.0001122590496563958, -0.002523505449654837, 0.0032048531096409596, -0.0009163079738143837, -0.00020647036279571978, -0.0022131264187808717, 0.002461188797480273, -0.000281067683490642, 0.0014901221425578618, -0.0013494988347466843, 0.0021245226017587195, -0.003228682470682901, 0.0011302896289184224, -0.0026212092017645025, 0.002747356099908278, -1.2120417167980057e-5, 0.0007777542834964248, -0.0010087957717832387, 0.00023132962299624195, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.4398932925293273e-23, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -8.089168783867065e-18, 0.0, 0.0, -7.390037997350644e-21, 0.0, 0.0, -2.0508191755490184e-17, 0.0, 0.0, 0.0]
Test Summary: | Pass  Total
investment    |    2      2
    Testing DualDecomposition tests passed 
