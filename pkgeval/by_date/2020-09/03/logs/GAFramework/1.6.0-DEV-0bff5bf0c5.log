Julia Version 1.6.0-DEV.818
Commit 0bff5bf0c5 (2020-09-02 13:42 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_v2kqKK/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_v2kqKK/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2172330409926763
curgen: 20 fitness: 0.2172330409926763
curgen: 30 fitness: 0.2172330409926763
curgen: 40 fitness: 0.2172330409926763
curgen: 50 fitness: 0.2172330845094344
CoordinateCreature{Vector{Float64}}([-0.22265900549014492], -0.2172330845094344) -0.22265900549014492 -0.2172330845094344
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2580708570406034
curgen: 100 fitness: 3.2582616912079465
curgen: 150 fitness: 3.2583305523684962
curgen: 200 fitness: 3.2583482535092188
curgen: 250 fitness: 3.258399094324242
curgen: 300 fitness: 3.2583999830525063
curgen: 350 fitness: 3.2584683078651953
curgen: 400 fitness: 3.258469896808649
curgen: 450 fitness: 3.2584762439762
curgen: 500 fitness: 3.2584818186897664
CoordinateCreature{Vector{Float64}}([0.22289099002722768, 0.22252775305223418, -0.22253722483101215, -0.2227749206473218, 0.2223621994432788, -0.22254904262336037, -0.22242398515314557, -0.22257630977163192, -0.22282102201450277, -0.22256168315577746, -0.2225708456365428, -0.22237648201343876, 0.2225559160008562, 0.22239076767386345, -0.22214728401714873], -3.2584818186897664) [0.22289099002722768, 0.22252775305223418, -0.22253722483101215, -0.2227749206473218, 0.2223621994432788, -0.22254904262336037, -0.22242398515314557, -0.22257630977163192, -0.22282102201450277, -0.22256168315577746, -0.2225708456365428, -0.22237648201343876, 0.2225559160008562, 0.22239076767386345, -0.22214728401714873] -3.2584818186897664
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.004520041643019113
curgen: 100 fitness: -0.003254614099404307
curgen: 150 fitness: -0.0031428214619211303
curgen: 200 fitness: -0.003016366739757359
curgen: 250 fitness: -0.002852647153105181
curgen: 300 fitness: -0.001890246468406076
curgen: 350 fitness: -0.001890246468406076
curgen: 400 fitness: -0.001758762924310986
curgen: 450 fitness: -0.001758762924310986
curgen: 500 fitness: -0.0011202620426331578
CoordinateCreature{Vector{Float64}}([0.00037612954443477667, 0.0006976683117605675, 0.0005716998599032538, -0.0003915683698527176, -0.00010466203868982971, 0.000553735914138315, -0.00015066504574391085, -0.0005141049567042239, 0.001650396986235186, -0.00038006653392585674, -0.0001066315395339204, 0.0006859003098913973, -0.0007308008483982455, 9.416512464326178e-5, -0.00020185472870129324], 0.0011202620426331578) [0.00037612954443477667, 0.0006976683117605675, 0.0005716998599032538, -0.0003915683698527176, -0.00010466203868982971, 0.000553735914138315, -0.00015066504574391085, -0.0005141049567042239, 0.001650396986235186, -0.00038006653392585674, -0.0001066315395339204, 0.0006859003098913973, -0.0007308008483982455, 9.416512464326178e-5, -0.00020185472870129324] 0.0011202620426331578
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
