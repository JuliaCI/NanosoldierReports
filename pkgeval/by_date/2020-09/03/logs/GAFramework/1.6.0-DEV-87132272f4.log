Julia Version 1.6.0-DEV.830
Commit 87132272f4 (2020-09-03 17:25 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_d9gcmx/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_d9gcmx/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21718122141311902
curgen: 20 fitness: 0.21718122141311902
curgen: 30 fitness: 0.21718122141311902
curgen: 40 fitness: 0.21722715374976076
curgen: 50 fitness: 0.21722715374976076
CoordinateCreature{Vector{Float64}}([-0.22216620979458607], -0.21722715374976076) -0.22216620979458607 -0.21722715374976076
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2577086516206237
curgen: 100 fitness: 3.2581568758745907
curgen: 150 fitness: 3.2582659590793344
curgen: 200 fitness: 3.258366365952672
curgen: 250 fitness: 3.2583733695880612
curgen: 300 fitness: 3.2583754626945196
curgen: 350 fitness: 3.258425732385059
curgen: 400 fitness: 3.258425732385059
curgen: 450 fitness: 3.2584316230392245
curgen: 500 fitness: 3.2584434448375963
CoordinateCreature{Vector{Float64}}([0.2221759595633358, 0.2222349787062419, -0.22260425846648835, -0.22235123921346953, 0.22231312045075924, 0.22191536822463942, 0.22263164026593782, -0.22293304235160474, -0.2222223931811548, 0.22261892240153924, -0.22276558270454186, -0.2225552191734, 0.22253242058866374, 0.22239909825913085, 0.22199684760547667], -3.2584434448375963) [0.2221759595633358, 0.2222349787062419, -0.22260425846648835, -0.22235123921346953, 0.22231312045075924, 0.22191536822463942, 0.22263164026593782, -0.22293304235160474, -0.2222223931811548, 0.22261892240153924, -0.22276558270454186, -0.2225552191734, 0.22253242058866374, 0.22239909825913085, 0.22199684760547667] -3.2584434448375963
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0027009592787123893
curgen: 100 fitness: -0.002104708581299519
curgen: 150 fitness: -0.002104708581299519
curgen: 200 fitness: -0.002104708581299519
curgen: 250 fitness: -0.002062029018333078
curgen: 300 fitness: -0.002062029018333078
curgen: 350 fitness: -0.0019351662979829598
curgen: 400 fitness: -0.0016539486832130024
curgen: 450 fitness: -0.000960296921078907
curgen: 500 fitness: -0.000960296921078907
CoordinateCreature{Vector{Float64}}([-8.882477692033242e-5, 0.00024414631925015647, -0.0001966771837793044, -0.0006631196709219076, 0.000193900561390941, 0.00015398160638093654, -5.923557052293742e-5, -0.00013070338553763288, 2.460293887668666e-5, 0.00017522835835934885, -0.0016444732951205032, -0.00043765139644349235, -0.0006393888250093721, 0.0008948882839284148, -0.0002753819959911397], 0.000960296921078907) [-8.882477692033242e-5, 0.00024414631925015647, -0.0001966771837793044, -0.0006631196709219076, 0.000193900561390941, 0.00015398160638093654, -5.923557052293742e-5, -0.00013070338553763288, 2.460293887668666e-5, 0.00017522835835934885, -0.0016444732951205032, -0.00043765139644349235, -0.0006393888250093721, 0.0008948882839284148, -0.0002753819959911397] 0.000960296921078907
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
