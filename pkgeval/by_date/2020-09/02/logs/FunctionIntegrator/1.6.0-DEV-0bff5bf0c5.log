Julia Version 1.6.0-DEV.818
Commit 0bff5bf0c5 (2020-09-02 13:42 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_vMwFIc/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_vMwFIc/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  1.101073 seconds (1.51 M allocations: 81.793 MiB, 5.63% gc time)
Running: chebyshev_quadrature with k=1
  1.713001 seconds (2.22 M allocations: 128.082 MiB, 3.01% gc time)
Running: chebyshev_quadrature with k=2
  0.272647 seconds (417.62 k allocations: 24.072 MiB)
Running: chebyshev_quadrature with k=3
  0.361117 seconds (533.13 k allocations: 29.427 MiB, 3.90% gc time)
Running: chebyshev_quadrature with k=4
  0.320135 seconds (476.58 k allocations: 25.982 MiB)
Running: jacobi_quadrature with α=β=1
 46.972268 seconds (38.20 M allocations: 3.109 GiB, 9.58% gc time)
Running: laguerre_quadrature with k=1
  3.380531 seconds (3.27 M allocations: 182.635 MiB, 5.75% gc time)
Running: legendre_quadrature
  0.207535 seconds (211.85 k allocations: 12.187 MiB)
Running: lobatto_quadrature
  0.397538 seconds (343.02 k allocations: 20.724 MiB)
Running: radau_quadrature
  0.428407 seconds (325.65 k allocations: 19.745 MiB, 6.25% gc time)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 84.752113 seconds (100.02 M allocations: 1.491 GiB, 0.39% gc time)
Running: rectangle_rule_midpoint.
  0.134081 seconds (173.41 k allocations: 3.870 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 79.524122 seconds (100.02 M allocations: 1.491 GiB, 0.24% gc time)
Running: rombergs_method
  0.539260 seconds (742.80 k allocations: 42.970 MiB, 5.83% gc time)
Running: simpsons_rule
  0.045738 seconds (46.84 k allocations: 2.094 MiB)
Running: simpsons38_rule
  0.102045 seconds (112.42 k allocations: 5.957 MiB)
Running: trapezoidal_rule
  0.302240 seconds (1.52 M allocations: 25.810 MiB)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.109137 seconds (32.19 k allocations: 1.920 MiB, 25.81% gc time)
Running: chebyshev_quadrature with k=1
  0.437125 seconds (282.83 k allocations: 14.856 MiB)
Running: chebyshev_quadrature with k=2
  0.159272 seconds (94.44 k allocations: 2.707 MiB)
Running: chebyshev_quadrature with k=3
  0.158216 seconds (82.66 k allocations: 2.507 MiB)
Running: chebyshev_quadrature with k=4
  0.160773 seconds (65.27 k allocations: 2.153 MiB)
Running: jacobi_quadrature with α=β=1
  2.011062 seconds (513.69 k allocations: 162.457 MiB, 11.22% gc time)
Running: legendre_quadrature
  0.162766 seconds (43.31 k allocations: 2.507 MiB)
Running: lobatto_quadrature
  0.022368 seconds (17.15 k allocations: 1.069 MiB)
Running: radau_quadrature
  0.021435 seconds (17.14 k allocations: 1.068 MiB)
Running: rectangle_rule_left
 27.604784 seconds (471.41 M allocations: 7.025 GiB, 2.26% gc time)
Running: rectangle_rule_midpoint
  0.000074 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 26.715391 seconds (476.96 M allocations: 7.107 GiB, 2.29% gc time)
Running: rombergs_method
  0.355087 seconds (336.08 k allocations: 19.122 MiB)
Running: simpsons_rule
  0.000023 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.068714 seconds (19.60 k allocations: 1.179 MiB)
Running: trapezoidal_rule
  0.059203 seconds (18.06 k allocations: 1.084 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.029988 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.106264 seconds (2.40 k allocations: 113.328 KiB)
Running: chebyshev_quadrature with k=2
  0.099640 seconds (2.65 k allocations: 121.344 KiB)
Running: chebyshev_quadrature with k=3
  0.151834 seconds (3.08 k allocations: 133.547 KiB, 19.47% gc time)
Running: chebyshev_quadrature with k=4
  0.120852 seconds (3.08 k allocations: 133.609 KiB)
Running: jacobi_quadrature with α=β=1
  0.321995 seconds (370.63 k allocations: 19.507 MiB)
Running: legendre_quadrature
  0.073882 seconds (1.24 k allocations: 63.531 KiB)
Running: lobatto_quadrature
  0.000085 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000040 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000579 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000404 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000583 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.076702 seconds (1.01 k allocations: 54.094 KiB)
Running: simpsons_rule
  0.000041 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.026432 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.023480 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.062810 seconds (74.72 k allocations: 4.345 MiB)
Running: chebyshev_quadrature with k=1
  0.200817 seconds (235.52 k allocations: 13.308 MiB)
Running: chebyshev_quadrature with k=2
  0.254880 seconds (289.34 k allocations: 16.309 MiB, 8.63% gc time)
Running: chebyshev_quadrature with k=3
  0.210184 seconds (268.22 k allocations: 14.694 MiB)
Running: chebyshev_quadrature with k=4
  0.204668 seconds (268.24 k allocations: 14.608 MiB)
Running: jacobi_quadrature with α=β=1
  2.271942 seconds (456.18 k allocations: 163.817 MiB, 4.55% gc time)
Running: legendre_quadrature
  0.151928 seconds (189.81 k allocations: 10.961 MiB)
Running: lobatto_quadrature
  0.199927 seconds (201.36 k allocations: 11.685 MiB, 9.56% gc time)
Running: radau_quadrature
  0.180807 seconds (201.35 k allocations: 11.699 MiB)
Running: rectangle_rule_left
  1.159513 seconds (19.49 k allocations: 1.179 MiB)
Running: rectangle_rule_midpoint
  0.024218 seconds (25.61 k allocations: 1.598 MiB)
Running: rectangle_rule_right
  1.096938 seconds (18.01 k allocations: 1.091 MiB)
Running: rombergs_method
  0.126203 seconds (137.28 k allocations: 7.946 MiB)
Running: simpsons_rule
  0.038216 seconds (28.59 k allocations: 1.779 MiB)
Running: simpsons38_rule
  0.037820 seconds (44.06 k allocations: 2.757 MiB)
Running: trapezoidal_rule
  0.024401 seconds (44.96 k allocations: 1.811 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.036019 seconds (100.78 k allocations: 3.043 MiB)
Running: chebyshev_quadrature with k=1
  0.216153 seconds (242.25 k allocations: 13.369 MiB, 15.17% gc time)
Running: chebyshev_quadrature with k=2
  0.202052 seconds (296.51 k allocations: 16.309 MiB)
Running: chebyshev_quadrature with k=3
  0.225757 seconds (275.08 k allocations: 14.711 MiB)
Running: chebyshev_quadrature with k=4
  0.230338 seconds (275.11 k allocations: 14.720 MiB, 8.19% gc time)
Running: hermite_quadrature with k=2
 15.444942 seconds (21.40 M allocations: 1.122 GiB, 7.36% gc time)
Running: jacobi_quadrature with α=β=1
  0.498827 seconds (465.54 k allocations: 50.137 MiB, 8.55% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.271486 seconds (282.56 k allocations: 15.650 MiB, 14.75% gc time)
Running: legendre_quadrature
  0.157738 seconds (196.51 k allocations: 11.307 MiB)
Running: lobatto_quadrature
  0.245391 seconds (222.18 k allocations: 37.467 MiB, 11.62% gc time)
Running: radau_quadrature
  0.222020 seconds (218.76 k allocations: 30.132 MiB)
Running: rectangle_rule_left
  0.029951 seconds (22.54 k allocations: 1.334 MiB)
Running: rectangle_rule_midpoint
  0.041664 seconds (27.52 k allocations: 1.693 MiB)
Running: rectangle_rule_right
  0.036797 seconds (19.19 k allocations: 1.150 MiB)
Running: rombergs_method
  0.135649 seconds (139.82 k allocations: 7.996 MiB)
Running: simpsons_rule
  0.050326 seconds (40.62 k allocations: 2.125 MiB)
Running: simpsons38_rule
  0.058359 seconds (59.22 k allocations: 3.157 MiB)
Running: trapezoidal_rule
  0.080541 seconds (31.16 k allocations: 1.749 MiB, 51.06% gc time)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.045923 seconds (61.05 k allocations: 2.335 MiB)
Running: chebyshev_quadrature with k=1
  0.203366 seconds (237.68 k allocations: 13.146 MiB)
Running: chebyshev_quadrature with k=2
  0.240018 seconds (291.62 k allocations: 16.054 MiB)
Running: chebyshev_quadrature with k=3
  0.246311 seconds (270.41 k allocations: 14.496 MiB)
Running: chebyshev_quadrature with k=4
  0.282021 seconds (270.43 k allocations: 14.497 MiB, 24.75% gc time)
Running: hermite_quadrature with k=2
  0.152617 seconds (174.66 k allocations: 10.022 MiB)
Running: jacobi_quadrature with α=β=1
  8.461395 seconds (458.69 k allocations: 1.175 GiB, 13.14% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.254070 seconds (277.75 k allocations: 15.523 MiB)
Running: legendre_quadrature
  0.216516 seconds (191.98 k allocations: 11.137 MiB, 14.65% gc time)
Running: lobatto_quadrature
  0.219481 seconds (212.84 k allocations: 23.191 MiB)
Running: radau_quadrature
  0.221125 seconds (211.99 k allocations: 21.123 MiB, 7.33% gc time)
Running: rectangle_rule_left
  0.028041 seconds (20.20 k allocations: 1.220 MiB)
Running: rectangle_rule_midpoint
  0.028820 seconds (26.34 k allocations: 1.636 MiB)
Running: rectangle_rule_right
  0.025246 seconds (18.00 k allocations: 1.092 MiB)
Running: rombergs_method
  0.122048 seconds (135.54 k allocations: 7.806 MiB)
Running: simpsons_rule
  0.044987 seconds (33.03 k allocations: 1.906 MiB)
Running: simpsons38_rule
  0.040527 seconds (49.92 k allocations: 2.907 MiB)
Running: trapezoidal_rule
  0.030920 seconds (25.97 k allocations: 1.578 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.094383 seconds (32.00 k allocations: 1.929 MiB)
Running: chebyshev_quadrature with k=1
  0.243275 seconds (236.02 k allocations: 13.364 MiB)
Running: chebyshev_quadrature with k=2
  0.280659 seconds (289.86 k allocations: 16.392 MiB, 11.29% gc time)
Running: chebyshev_quadrature with k=3
  0.240405 seconds (268.74 k allocations: 14.707 MiB)
Running: chebyshev_quadrature with k=4
  0.253916 seconds (268.76 k allocations: 14.545 MiB)
Running: jacobi_quadrature with α=β=1
  2.624326 seconds (456.74 k allocations: 194.880 MiB, 5.01% gc time)
Running: legendre_quadrature
  0.149846 seconds (190.32 k allocations: 10.995 MiB)
Running: lobatto_quadrature
  0.172607 seconds (201.87 k allocations: 11.718 MiB)
Running: radau_quadrature
  0.195513 seconds (201.87 k allocations: 11.708 MiB, 9.32% gc time)
Running: rectangle_rule_left
  0.301053 seconds (20.04 k allocations: 1.207 MiB)
Running: rectangle_rule_midpoint
  0.027367 seconds (25.97 k allocations: 1.617 MiB)
Running: rectangle_rule_right
  0.111477 seconds (18.37 k allocations: 1.111 MiB)
Running: rombergs_method
  0.131495 seconds (148.46 k allocations: 8.688 MiB)
Running: simpsons_rule
  0.033238 seconds (29.31 k allocations: 1.811 MiB)
Running: simpsons38_rule
  0.037459 seconds (44.80 k allocations: 2.789 MiB)
Running: trapezoidal_rule
  0.035917 seconds (45.92 k allocations: 1.846 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.035286 seconds (32.73 k allocations: 1.879 MiB)
Running: chebyshev_quadrature with k=1
  0.193764 seconds (236.62 k allocations: 13.312 MiB)
Running: chebyshev_quadrature with k=2
  0.263363 seconds (290.50 k allocations: 16.308 MiB, 15.79% gc time)
Running: chebyshev_quadrature with k=3
  0.196045 seconds (269.33 k allocations: 14.709 MiB)
Running: chebyshev_quadrature with k=4
  0.196548 seconds (269.35 k allocations: 14.737 MiB)
Running: jacobi_quadrature with α=β=1
  1.520505 seconds (457.46 k allocations: 149.567 MiB, 6.78% gc time)
Running: legendre_quadrature
  0.150283 seconds (190.92 k allocations: 11.039 MiB)
Running: lobatto_quadrature
  0.166053 seconds (202.48 k allocations: 11.727 MiB)
Running: radau_quadrature
  0.190808 seconds (202.47 k allocations: 11.730 MiB, 10.24% gc time)
Running: rectangle_rule_left
  1.214599 seconds (20.29 k allocations: 1.219 MiB)
Running: rectangle_rule_midpoint
  0.031876 seconds (25.96 k allocations: 1.617 MiB)
Running: rectangle_rule_right
  1.186427 seconds (18.35 k allocations: 1.110 MiB)
Running: rombergs_method
  0.138819 seconds (138.53 k allocations: 8.005 MiB)
Running: simpsons_rule
  0.041014 seconds (30.02 k allocations: 1.838 MiB)
Running: simpsons38_rule
  0.036650 seconds (45.51 k allocations: 2.816 MiB)
Running: trapezoidal_rule
  0.030479 seconds (58.16 k allocations: 2.046 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.146889 seconds (150.68 k allocations: 8.976 MiB)
Running: chebyshev_quadrature with k=1
  0.128493 seconds (70.53 k allocations: 2.233 MiB)
Running: chebyshev_quadrature with k=2
  0.135457 seconds (105.73 k allocations: 2.899 MiB)
Running: chebyshev_quadrature with k=3
  0.132108 seconds (93.17 k allocations: 2.685 MiB)
Running: chebyshev_quadrature with k=4
  0.127654 seconds (72.70 k allocations: 2.281 MiB)
Running: jacobi_quadrature with α=β=1
  2.391347 seconds (487.25 k allocations: 168.242 MiB, 5.26% gc time)
Running: legendre_quadrature
  0.136994 seconds (19.33 k allocations: 1.119 MiB)
Running: lobatto_quadrature
  0.000146 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000103 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 41.987917 seconds (590.00 M allocations: 8.792 GiB, 2.59% gc time)
Running: rectangle_rule_midpoint
  0.000040 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 41.525596 seconds (592.75 M allocations: 8.833 GiB, 2.42% gc time)
Running: rombergs_method
  0.139942 seconds (21.10 k allocations: 1.194 MiB)
Running: simpsons_rule
  0.000085 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.032806 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.025989 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 30.488134 seconds (629.33 M allocations: 9.387 GiB, 3.75% gc time)
Running: chebyshev_quadrature with k=1
  0.498217 seconds (431.09 k allocations: 23.930 MiB)
Running: chebyshev_quadrature with k=2
 13.370800 seconds (487.03 k allocations: 4.041 GiB, 3.85% gc time)
Running: chebyshev_quadrature with k=3
  7.006526 seconds (282.89 k allocations: 1.643 GiB, 4.93% gc time)
Running: chebyshev_quadrature with k=4
  7.901223 seconds (282.91 k allocations: 2.262 GiB, 2.74% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 60.784167 seconds (495.71 k allocations: 13.255 GiB, 3.35% gc time)
Running: legendre_quadrature.
  6.454942 seconds (229.41 k allocations: 1.976 GiB, 2.33% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 58.965368 seconds (8.24 M allocations: 13.384 GiB, 4.32% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 57.854033 seconds (7.24 M allocations: 13.369 GiB, 3.06% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.021479 seconds (23.05 k allocations: 1.386 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.998937 seconds (31.59 k allocations: 1.938 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.007268 seconds (23.26 k allocations: 1.396 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.131500 seconds (450.03 k allocations: 153.434 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 39.249302 seconds (600.04 M allocations: 8.943 GiB, 8.52% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 38.601417 seconds (600.05 M allocations: 8.944 GiB, 8.06% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 39.652779 seconds (600.03 M allocations: 8.943 GiB, 8.42% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.068607 seconds (181.75 k allocations: 4.480 MiB)
Running: chebyshev_quadrature with k=1
  0.228652 seconds (252.81 k allocations: 13.843 MiB)
Running: chebyshev_quadrature with k=2
  0.210899 seconds (277.71 k allocations: 14.915 MiB)
Running: chebyshev_quadrature with k=3
  0.203189 seconds (253.10 k allocations: 13.185 MiB)
Running: chebyshev_quadrature with k=4
  0.197328 seconds (253.12 k allocations: 13.179 MiB)
Running: jacobi_quadrature with α=β=1
  0.369745 seconds (396.15 k allocations: 35.520 MiB)
Running: laguerre_quadrature with k=2
  0.186003 seconds (184.81 k allocations: 10.762 MiB)
Running: legendre_quadrature
  0.129728 seconds (148.90 k allocations: 8.267 MiB)
Running: lobatto_quadrature
  0.035720 seconds (10.55 k allocations: 15.097 MiB)
Running: radau_quadrature
  0.033032 seconds (9.33 k allocations: 13.171 MiB)
Running: rectangle_rule_left
  0.057690 seconds (19.51 k allocations: 1.155 MiB)
Running: rectangle_rule_midpoint
  0.048850 seconds (26.44 k allocations: 1.622 MiB)
Running: rectangle_rule_right
  0.051210 seconds (18.10 k allocations: 1.080 MiB)
Running: rombergs_method
  0.243470 seconds (178.45 k allocations: 10.202 MiB)
Running: simpsons_rule
  0.001920 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.053893 seconds (80.61 k allocations: 3.476 MiB)
Running: trapezoidal_rule
  0.198547 seconds (2.39 M allocations: 37.737 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.002025 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.120206 seconds (2.40 k allocations: 1.688 MiB)
Running: chebyshev_quadrature with k=2
  0.120594 seconds (2.65 k allocations: 2.352 MiB)
Running: chebyshev_quadrature with k=3
  0.117244 seconds (3.08 k allocations: 2.052 MiB)
Running: chebyshev_quadrature with k=4
  0.115645 seconds (3.08 k allocations: 1.493 MiB)
Running: jacobi_quadrature with α=β=1
  8.603732 seconds (372.84 k allocations: 905.309 MiB, 3.66% gc time)
Running: legendre_quadrature
  0.070077 seconds (1.23 k allocations: 65.688 KiB)
Running: lobatto_quadrature
  0.000187 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000141 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  4.158556 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000492 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  4.053601 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.078349 seconds (959 allocations: 54.031 KiB)
Running: simpsons_rule
  0.000047 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000056 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000986 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000952 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.118493 seconds (2.48 k allocations: 576.484 KiB)
Running: chebyshev_quadrature with k=2
  0.117162 seconds (2.73 k allocations: 777.266 KiB)
Running: chebyshev_quadrature with k=3
  0.122366 seconds (3.15 k allocations: 685.500 KiB)
Running: chebyshev_quadrature with k=4
  0.125920 seconds (3.16 k allocations: 516.062 KiB)
Running: jacobi_quadrature with α=β=1
  3.675621 seconds (379.51 k allocations: 253.437 MiB)
Running: legendre_quadrature
  0.130337 seconds (1.28 k allocations: 65.359 KiB)
Running: lobatto_quadrature
  0.000128 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000043 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 11.426545 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001076 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 10.763278 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.102989 seconds (1.18 k allocations: 62.547 KiB)
Running: simpsons_rule
  0.000072 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000052 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001929 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
