Julia Version 1.6.0-DEV.807
Commit a3430e7ec1 (2020-09-01 17:29 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_B0ZwWW/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_B0ZwWW/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21721161583866216
curgen: 20 fitness: 0.21721161583866216
curgen: 30 fitness: 0.21721161583866216
curgen: 40 fitness: 0.21721161583866216
curgen: 50 fitness: 0.21721161583866216
CoordinateCreature{Vector{Float64}}([-0.22184456864435287], -0.21721161583866216) -0.22184456864435287 -0.21721161583866216
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2575872118301366
curgen: 100 fitness: 3.25774893245324
curgen: 150 fitness: 3.25798617774513
curgen: 200 fitness: 3.258190175069262
curgen: 250 fitness: 3.2583152382534832
curgen: 300 fitness: 3.258319323479144
curgen: 350 fitness: 3.2583345776497694
curgen: 400 fitness: 3.258335637912812
curgen: 450 fitness: 3.258335637912812
curgen: 500 fitness: 3.2584305245144223
CoordinateCreature{Vector{Float64}}([0.22223420980693356, -0.22318644534967103, -0.22245313728672372, -0.22242645749514503, 0.22265626527486815, -0.2227021996660694, -0.22168757625846602, 0.22228467552592918, 0.22261035247435607, -0.22221709790916547, 0.22257468113253984, -0.22282014326086622, 0.2224922391334913, -0.22253723449404414, -0.22286410371303284], -3.2584305245144223) [0.22223420980693356, -0.22318644534967103, -0.22245313728672372, -0.22242645749514503, 0.22265626527486815, -0.2227021996660694, -0.22168757625846602, 0.22228467552592918, 0.22261035247435607, -0.22221709790916547, 0.22257468113253984, -0.22282014326086622, 0.2224922391334913, -0.22253723449404414, -0.22286410371303284] -3.2584305245144223
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.002358271741172757
curgen: 100 fitness: -0.0022204420945968195
curgen: 150 fitness: -0.002169358708670188
curgen: 200 fitness: -0.0010749749864089608
curgen: 250 fitness: -0.0010656655963998674
curgen: 300 fitness: -0.0010656655963998674
curgen: 350 fitness: -0.0010570875825237636
curgen: 400 fitness: -0.0010570875825237636
curgen: 450 fitness: -0.0010570875825237636
curgen: 500 fitness: -0.0010570875825237636
CoordinateCreature{Vector{Float64}}([-7.229606770204334e-5, -7.661544452129972e-5, 0.00024006134922711025, -0.000503513249183192, -0.0009877207638403392, 0.00016261645713226084, -0.00022293772860846857, -0.0007845349763899477, 0.0011871631750379956, -0.001183205809764768, 0.0001757427850902515, -0.00011577696812780522, -8.471608039337737e-5, -0.000665707181505848, -0.0001866641126483091], 0.0010570875825237636) [-7.229606770204334e-5, -7.661544452129972e-5, 0.00024006134922711025, -0.000503513249183192, -0.0009877207638403392, 0.00016261645713226084, -0.00022293772860846857, -0.0007845349763899477, 0.0011871631750379956, -0.001183205809764768, 0.0001757427850902515, -0.00011577696812780522, -8.471608039337737e-5, -0.000665707181505848, -0.0001866641126483091] 0.0010570875825237636
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
