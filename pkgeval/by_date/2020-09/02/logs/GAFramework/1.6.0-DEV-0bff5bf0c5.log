Julia Version 1.6.0-DEV.818
Commit 0bff5bf0c5 (2020-09-02 13:42 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_NAVRjQ/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_NAVRjQ/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723162111988564
curgen: 20 fitness: 0.21723162111988564
curgen: 30 fitness: 0.21723162111988564
curgen: 40 fitness: 0.21723230650468747
curgen: 50 fitness: 0.21723230650468747
CoordinateCreature{Vector{Float64}}([-0.2227210174478889], -0.21723230650468747) -0.2227210174478889 -0.21723230650468747
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2582076372610564
curgen: 100 fitness: 3.2583392282721437
curgen: 150 fitness: 3.2583704231928414
curgen: 200 fitness: 3.2583704231928414
curgen: 250 fitness: 3.2583716042332025
curgen: 300 fitness: 3.258401301032303
curgen: 350 fitness: 3.2584037460988675
curgen: 400 fitness: 3.2584037460988675
curgen: 450 fitness: 3.2584419517890386
curgen: 500 fitness: 3.2584455718384184
CoordinateCreature{Vector{Float64}}([-0.22185378415843549, -0.22231349685452514, -0.2225580468235082, -0.2224689786825953, 0.22265845502814707, -0.22241706742891668, -0.22221175452556863, 0.22255883384921482, 0.2226624407249183, -0.22260928336028532, 0.22279678519462584, -0.22206799036308428, 0.2226345072402553, 0.2224556222574469, 0.22311017420212495], -3.2584455718384184) [-0.22185378415843549, -0.22231349685452514, -0.2225580468235082, -0.2224689786825953, 0.22265845502814707, -0.22241706742891668, -0.22221175452556863, 0.22255883384921482, 0.2226624407249183, -0.22260928336028532, 0.22279678519462584, -0.22206799036308428, 0.2226345072402553, 0.2224556222574469, 0.22311017420212495] -3.2584455718384184
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0036335606368140816
curgen: 100 fitness: -0.003536255735667737
curgen: 150 fitness: -0.003534733411441948
curgen: 200 fitness: -0.00327232702605329
curgen: 250 fitness: -0.00327232702605329
curgen: 300 fitness: -0.00327232702605329
curgen: 350 fitness: -0.0032489593997979682
curgen: 400 fitness: -0.0030679881765536265
curgen: 450 fitness: -0.0030679881765536265
curgen: 500 fitness: -0.0030679881765536265
CoordinateCreature{Vector{Float64}}([-0.0035875026784133804, 0.00023791134256750474, -0.00033892713682337093, 0.0009642244875304948, 0.0009282411927213959, -0.00022970995620928865, -0.0005192088781736763, 0.00016638902291512235, 0.00010722206611193907, -3.8733305254724e-5, -0.00022309804267364852, 2.6079899369574147e-5, -0.00021583211030152486, -0.00034821099459320955, -0.00022470242832428838], 0.0030679881765536265) [-0.0035875026784133804, 0.00023791134256750474, -0.00033892713682337093, 0.0009642244875304948, 0.0009282411927213959, -0.00022970995620928865, -0.0005192088781736763, 0.00016638902291512235, 0.00010722206611193907, -3.8733305254724e-5, -0.00022309804267364852, 2.6079899369574147e-5, -0.00021583211030152486, -0.00034821099459320955, -0.00022470242832428838] 0.0030679881765536265
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
