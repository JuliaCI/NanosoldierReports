Julia Version 1.6.0-DEV.888
Commit 0d7dc9621e (2020-09-10 16:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed Compat ───── v3.15.0
  Installed IterTools ── v1.3.0
  Installed MacroTools ─ v0.5.5
  Installed LightQuery ─ v0.7.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [a6f99520] + LightQuery v0.7.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [34da2185] + Compat v3.15.0
  [c8e1da08] + IterTools v1.3.0
  [a6f99520] + LightQuery v0.7.0
  [1914dd2f] + MacroTools v0.5.5
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing LightQuery
Status `/tmp/jl_u7i5aP/Project.toml`
  [336ed68f] CSV v0.7.7
  [34da2185] Compat v3.15.0
  [e30172f5] Documenter v0.25.2
  [c8e1da08] IterTools v1.3.0
  [a6f99520] LightQuery v0.7.0
  [1914dd2f] MacroTools v0.5.5
  [bd369af6] Tables v1.0.5
  [f269a46b] TimeZones v1.3.2
  [1986cc42] Unitful v1.4.0
  [ade2ca70] Dates
  [d6f4376e] Markdown
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_u7i5aP/Manifest.toml`
  [336ed68f] CSV v0.7.7
  [324d7699] CategoricalArrays v0.8.2
  [34da2185] Compat v3.15.0
  [187b0558] ConstructionBase v1.0.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.21.7
  [864edb3b] DataStructures v0.18.4
  [e2d170a0] DataValueInterfaces v1.0.0
  [ffbed154] DocStringExtensions v0.8.3
  [e30172f5] Documenter v0.25.2
  [e2ba6199] ExprTools v0.1.2
  [8f5d6c58] EzXML v1.1.0
  [41ab1584] InvertedIndices v1.0.0
  [c8e1da08] IterTools v1.3.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.1
  [94ce4f54] Libiconv_jll v1.16.0+6
  [a6f99520] LightQuery v0.7.0
  [1914dd2f] MacroTools v0.5.5
  [e1d29d7a] Missings v0.4.4
  [78c3b35d] Mocking v0.7.1
  [bac558e1] OrderedCollections v1.3.0
  [69de0a69] Parsers v1.0.10
  [2dfb63ee] PooledArrays v0.5.3
  [3cdcf5f2] RecipesBase v1.1.0
  [189a3867] Reexport v0.2.0
  [91c51154] SentinelArrays v1.2.15
  [a2af1166] SortingAlgorithms v0.3.1
  [856f2bd8] StructTypes v1.1.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.5
  [f269a46b] TimeZones v1.3.2
  [1986cc42] Unitful v1.4.0
  [02c8fc9c] XML2_jll v2.9.10+2
  [83775a58] Zlib_jll v1.2.11+16
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
[ Info: SetupBuildDirectory: setting up build directory.
[ Info: Doctest: running doctests.
┌ Error: doctest failure in ~/.julia/packages/LightQuery/U9mHU/src/make_columns.jl:51-72
│ 
│ ```jldoctest Rows
│ julia> using LightQuery
│ 
│ 
│ julia> using Test: @inferred
│ 
│ 
│ julia> lazy = @inferred Rows(a = [1, 2], b = [1.0, 2.0])
│ 2-element Rows{NamedTuple{(:a, :b),Tuple{Int64,Float64}},1,Tuple{Array{Int64,1},Array{Float64,1}},Tuple{Name{:a},Name{:b}}}:
│  (a = 1, b = 1.0)
│  (a = 2, b = 2.0)
│ 
│ julia> @inferred collect(lazy)
│ 2-element Array{NamedTuple{(:a, :b),Tuple{Int64,Float64}},1}:
│  (a = 1, b = 1.0)
│  (a = 2, b = 2.0)
│ 
│ julia> @inferred Rows(a = [1, 2])
│ 2-element Rows{NamedTuple{(:a,),Tuple{Int64}},1,Tuple{Array{Int64,1}},Tuple{Name{:a}}}:
│  (a = 1,)
│  (a = 2,)
│ ```
│ 
│ Subexpression:
│ 
│ lazy = @inferred Rows(a = [1, 2], b = [1.0, 2.0])
│ 
│ Evaluated output:
│ 
│ 2-element Rows{NamedTuple{(:a, :b), Tuple{Int64, Float64}}, 1, Tuple{Vector{Int64}, Vector{Float64}}, Tuple{Name{:a}, Name{:b}}}:
│  (a = 1, b = 1.0)
│  (a = 2, b = 2.0)
│ 
│ Expected output:
│ 
│ 2-element Rows{NamedTuple{(:a, :b),Tuple{Int64,Float64}},1,Tuple{Array{Int64,1},Array{Float64,1}},Tuple{Name{:a},Name{:b}}}:
│  (a = 1, b = 1.0)
│  (a = 2, b = 2.0)
│ 
│   diff =
│    Warning: Diff output requires color.
│    2-element Rows{NamedTuple{(:a, :b),Tuple{Int64,Float64}},1,Tuple{Array{Int64,1},Array{Float64,1}},Tuple{Name{:a},Name{:b}}}:
│     :b), Tuple{Int64, Float64}}, 1, Tuple{Vector{Int64}, Vector{Float64}}, Tuple{Name{:a}, Name{:b}}}:
│     (a = 1, b = 1.0)
│     (a = 2, b = 2.0)
└ @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/LightQuery/U9mHU/src/make_columns.jl:51-72
│ 
│ ```jldoctest Rows
│ julia> using LightQuery
│ 
│ 
│ julia> using Test: @inferred
│ 
│ 
│ julia> lazy = @inferred Rows(a = [1, 2], b = [1.0, 2.0])
│ 2-element Rows{NamedTuple{(:a, :b),Tuple{Int64,Float64}},1,Tuple{Array{Int64,1},Array{Float64,1}},Tuple{Name{:a},Name{:b}}}:
│  (a = 1, b = 1.0)
│  (a = 2, b = 2.0)
│ 
│ julia> @inferred collect(lazy)
│ 2-element Array{NamedTuple{(:a, :b),Tuple{Int64,Float64}},1}:
│  (a = 1, b = 1.0)
│  (a = 2, b = 2.0)
│ 
│ julia> @inferred Rows(a = [1, 2])
│ 2-element Rows{NamedTuple{(:a,),Tuple{Int64}},1,Tuple{Array{Int64,1}},Tuple{Name{:a}}}:
│  (a = 1,)
│  (a = 2,)
│ ```
│ 
│ Subexpression:
│ 
│ @inferred collect(lazy)
│ 
│ Evaluated output:
│ 
│ 2-element Vector{NamedTuple{(:a, :b), Tuple{Int64, Float64}}}:
│  (a = 1, b = 1.0)
│  (a = 2, b = 2.0)
│ 
│ Expected output:
│ 
│ 2-element Array{NamedTuple{(:a, :b),Tuple{Int64,Float64}},1}:
│  (a = 1, b = 1.0)
│  (a = 2, b = 2.0)
│ 
│   diff =
│    Warning: Diff output requires color.
│    2-element Array{NamedTuple{(:a, :b),Tuple{Int64,Float64}},1}:
│     Vector{NamedTuple{(:a, :b), Tuple{Int64, Float64}}}:
│     (a = 1, b = 1.0)
│     (a = 2, b = 2.0)
└ @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/LightQuery/U9mHU/src/make_columns.jl:51-72
│ 
│ ```jldoctest Rows
│ julia> using LightQuery
│ 
│ 
│ julia> using Test: @inferred
│ 
│ 
│ julia> lazy = @inferred Rows(a = [1, 2], b = [1.0, 2.0])
│ 2-element Rows{NamedTuple{(:a, :b),Tuple{Int64,Float64}},1,Tuple{Array{Int64,1},Array{Float64,1}},Tuple{Name{:a},Name{:b}}}:
│  (a = 1, b = 1.0)
│  (a = 2, b = 2.0)
│ 
│ julia> @inferred collect(lazy)
│ 2-element Array{NamedTuple{(:a, :b),Tuple{Int64,Float64}},1}:
│  (a = 1, b = 1.0)
│  (a = 2, b = 2.0)
│ 
│ julia> @inferred Rows(a = [1, 2])
│ 2-element Rows{NamedTuple{(:a,),Tuple{Int64}},1,Tuple{Array{Int64,1}},Tuple{Name{:a}}}:
│  (a = 1,)
│  (a = 2,)
│ ```
│ 
│ Subexpression:
│ 
│ @inferred Rows(a = [1, 2])
│ 
│ Evaluated output:
│ 
│ 2-element Rows{NamedTuple{(:a,), Tuple{Int64}}, 1, Tuple{Vector{Int64}}, Tuple{Name{:a}}}:
│  (a = 1,)
│  (a = 2,)
│ 
│ Expected output:
│ 
│ 2-element Rows{NamedTuple{(:a,),Tuple{Int64}},1,Tuple{Array{Int64,1}},Tuple{Name{:a}}}:
│  (a = 1,)
│  (a = 2,)
│ 
│   diff =
│    Warning: Diff output requires color.
│    2-element Rows{NamedTuple{(:a,),Tuple{Int64}},1,Tuple{Array{Int64,1}},Tuple{Name{:a}}}:
│     Rows{NamedTuple{(:a,), Tuple{Int64}}, 1, Tuple{Vector{Int64}}, Tuple{Name{:a}}}:
│     (a = 1,)
│     (a = 2,)
└ @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/LightQuery/U9mHU/src/rows.jl:6-17
│ 
│ ```jldoctest
│ julia> using LightQuery
│ 
│ 
│ julia> using Test: @inferred
│ 
│ 
│ julia> @inferred collect(Enumerate(Iterators.filter(iseven, [4, 3, 2, 1])))
│ 2-element Array{Tuple{Int64,Int64},1}:
│  (1, 4)
│  (3, 2)
│ ```
│ 
│ Subexpression:
│ 
│ @inferred collect(Enumerate(Iterators.filter(iseven, [4, 3, 2, 1])))
│ 
│ Evaluated output:
│ 
│ 2-element Vector{Tuple{Int64, Int64}}:
│  (1, 4)
│  (3, 2)
│ 
│ Expected output:
│ 
│ 2-element Array{Tuple{Int64,Int64},1}:
│  (1, 4)
│  (3, 2)
│ 
│   diff =
│    Warning: Diff output requires color.
│    2-element Array{Tuple{Int64,Int64},1}:
│     Vector{Tuple{Int64, Int64}}:
│     (1, 4)
│     (3, 2)
└ @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/LightQuery/U9mHU/src/rows.jl:251-266
│ 
│ ```jldoctest
│ julia> using LightQuery
│ 
│ 
│ julia> using Test: @inferred
│ 
│ 
│ julia> @inferred collect(Group(By([1, -1, -2, 2, 3, -3], abs)))
│ 3-element Array{Tuple{Int64,SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}},1}:
│  (1, [1, -1])
│  (2, [-2, 2])
│  (3, [3, -3])
│ 
│ julia> (@inferred collect(Group(By(Int[], abs)))) == []
│ true
│ ```
│ 
│ Subexpression:
│ 
│ @inferred collect(Group(By([1, -1, -2, 2, 3, -3], abs)))
│ 
│ Evaluated output:
│ 
│ 3-element Vector{Tuple{Int64, SubArray{Int64, 1, Vector{Int64}, Tuple{UnitRange{Int64}}, true}}}:
│  (1, [1, -1])
│  (2, [-2, 2])
│  (3, [3, -3])
│ 
│ Expected output:
│ 
│ 3-element Array{Tuple{Int64,SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}},1}:
│  (1, [1, -1])
│  (2, [-2, 2])
│  (3, [3, -3])
│ 
│   diff =
│    Warning: Diff output requires color.
│    3-element Array{Tuple{Int64,SubArray{Int64,1,Array{Int64,1},Tuple{UnitRange{Int64}},true}},1}:
│     Vector{Tuple{Int64, SubArray{Int64, 1, Vector{Int64}, Tuple{UnitRange{Int64}}, true}}}:
│     (1, [1, -1])
│     (2, [-2, 2])
│     (3, [3, -3])
└ @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/LightQuery/U9mHU/src/rows.jl:270-287
│ 
│ ```jldoctest
│ julia> using LightQuery
│ 
│ 
│ julia> using Test: @inferred
│ 
│ 
│ julia> first_group = @> [2, 1, 2, 1] |> order(_, identity) |> Group(By(_, identity)) |> first;
│ 
│ 
│ julia> key(first_group)
│ 1
│ 
│ julia> collect(value(first_group))
│ 2-element Array{Int64,1}:
│  1
│  1
│ ```
│ 
│ Subexpression:
│ 
│ collect(value(first_group))
│ 
│ Evaluated output:
│ 
│ 2-element Vector{Int64}:
│  1
│  1
│ 
│ Expected output:
│ 
│ 2-element Array{Int64,1}:
│  1
│  1
│ 
│   diff =
│    Warning: Diff output requires color.
│    2-element Array{Int64,1}:
│     Vector{Int64}:
│     1
│     1
└ @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/LightQuery/U9mHU/src/rows.jl:81-92
│ 
│ ```jldoctest
│ julia> using LightQuery
│ 
│ 
│ julia> using Test: @inferred
│ 
│ 
│ julia> collect(@inferred order([-2, 1], abs))
│ 2-element Array{Int64,1}:
│   1
│  -2
│ ```
│ 
│ Subexpression:
│ 
│ collect(@inferred order([-2, 1], abs))
│ 
│ Evaluated output:
│ 
│ 2-element Vector{Int64}:
│   1
│  -2
│ 
│ Expected output:
│ 
│ 2-element Array{Int64,1}:
│   1
│  -2
│ 
│   diff =
│    Warning: Diff output requires color.
│    2-element Array{Int64,1}:
│      Vector{Int64}:
│      1
│     -2
└ @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/LightQuery/U9mHU/src/rows.jl:189-203
│ 
│ ```jldoctest
│ julia> using LightQuery
│ 
│ 
│ julia> using Test: @inferred
│ 
│ 
│ julia> result = @inferred index([-2, 1], abs)
│ LightQuery.Indexed{Int64,Int64,Array{Int64,1},Dict{Int64,Int64}} with 2 entries:
│   2 => -2
│   1 => 1
│ 
│ julia> @inferred result[2]
│ -2
│ ```
│ 
│ Subexpression:
│ 
│ result = @inferred index([-2, 1], abs)
│ 
│ Evaluated output:
│ 
│ LightQuery.Indexed{Int64, Int64, Vector{Int64}, Dict{Int64, Int64}} with 2 entries:
│   2 => -2
│   1 => 1
│ 
│ Expected output:
│ 
│ LightQuery.Indexed{Int64,Int64,Array{Int64,1},Dict{Int64,Int64}} with 2 entries:
│   2 => -2
│   1 => 1
│ 
│   diff =
│    Warning: Diff output requires color.
│    LightQuery.Indexed{Int64,Int64,Array{Int64,1},Dict{Int64,Int64}} LightQuery.Indexed{Int64, Int64, Vector{Int64}, Dict{Int64, Int64}} with 2 entries:
│      2 => -2
│      1 => 1
└ @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/LightQuery/U9mHU/src/rows.jl:431-451
│ 
│ ```jldoctest
│ julia> using LightQuery
│ 
│ 
│ julia> collect(LeftJoin(By([1, -2, 5, -6], abs), By([-1, 3, -4, 6], abs)))
│ 4-element Array{Tuple{Int64,Union{Missing, Int64}},1}:
│  (1, -1)
│  (-2, missing)
│  (5, missing)
│  (-6, 6)
│ 
│ julia> collect(LeftJoin(By(Int[], abs), By(Int[], abs))) == []
│ true
│ 
│ julia> collect(LeftJoin(By([1], abs), By(Int[], abs)))
│ 1-element Array{Tuple{Int64,Union{Missing, Int64}},1}:
│  (1, missing)
│ 
│ julia> collect(LeftJoin(By(Int[], abs), By([1], abs))) == []
│ true
│ ```
│ 
│ Subexpression:
│ 
│ collect(LeftJoin(By([1, -2, 5, -6], abs), By([-1, 3, -4, 6], abs)))
│ 
│ Evaluated output:
│ 
│ 4-element Vector{Tuple{Int64, Union{Missing, Int64}}}:
│  (1, -1)
│  (-2, missing)
│  (5, missing)
│  (-6, 6)
│ 
│ Expected output:
│ 
│ 4-element Array{Tuple{Int64,Union{Missing, Int64}},1}:
│  (1, -1)
│  (-2, missing)
│  (5, missing)
│  (-6, 6)
│ 
│   diff =
│    Warning: Diff output requires color.
│    4-element Array{Tuple{Int64,Union{Missing, Int64}},1}:
│     Vector{Tuple{Int64, Union{Missing, Int64}}}:
│     (1, -1)
│     (-2, missing)
│     (5, missing)
│     (-6, 6)
└ @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/LightQuery/U9mHU/src/rows.jl:431-451
│ 
│ ```jldoctest
│ julia> using LightQuery
│ 
│ 
│ julia> collect(LeftJoin(By([1, -2, 5, -6], abs), By([-1, 3, -4, 6], abs)))
│ 4-element Array{Tuple{Int64,Union{Missing, Int64}},1}:
│  (1, -1)
│  (-2, missing)
│  (5, missing)
│  (-6, 6)
│ 
│ julia> collect(LeftJoin(By(Int[], abs), By(Int[], abs))) == []
│ true
│ 
│ julia> collect(LeftJoin(By([1], abs), By(Int[], abs)))
│ 1-element Array{Tuple{Int64,Union{Missing, Int64}},1}:
│  (1, missing)
│ 
│ julia> collect(LeftJoin(By(Int[], abs), By([1], abs))) == []
│ true
│ ```
│ 
│ Subexpression:
│ 
│ collect(LeftJoin(By([1], abs), By(Int[], abs)))
│ 
│ Evaluated output:
│ 
│ 1-element Vector{Tuple{Int64, Union{Missing, Int64}}}:
│  (1, missing)
│ 
│ Expected output:
│ 
│ 1-element Array{Tuple{Int64,Union{Missing, Int64}},1}:
│  (1, missing)
│ 
│   diff =
│    Warning: Diff output requires color.
│    1-element Array{Tuple{Int64,Union{Missing, Int64}},1}:
│     Vector{Tuple{Int64, Union{Missing, Int64}}}:
│     (1, missing)
└ @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/LightQuery/U9mHU/src/rows.jl:563-586
│ 
│ ```jldoctest
│ julia> using LightQuery
│ 
│ 
│ julia> collect(OuterJoin(By([1, -2, 5, -6], abs), By([-1, 3, -4, 6], abs)))
│ 6-element Array{Tuple{Union{Missing, Int64},Union{Missing, Int64}},1}:
│  (1, -1)
│  (-2, missing)
│  (missing, 3)
│  (missing, -4)
│  (5, missing)
│  (-6, 6)
│ 
│ julia> collect(OuterJoin(By(Int[], abs), By(Int[], abs))) == []
│ true
│ 
│ julia> collect(OuterJoin(By([1], abs), By(Int[], abs)))
│ 1-element Array{Tuple{Union{Missing, Int64},Union{Missing, Int64}},1}:
│  (1, missing)
│ 
│ julia> collect(OuterJoin(By(Int[], abs), By([1], abs)))
│ 1-element Array{Tuple{Union{Missing, Int64},Union{Missing, Int64}},1}:
│  (missing, 1)
│ ```
│ 
│ Subexpression:
│ 
│ collect(OuterJoin(By([1, -2, 5, -6], abs), By([-1, 3, -4, 6], abs)))
│ 
│ Evaluated output:
│ 
│ 6-element Vector{Tuple{Union{Missing, Int64}, Union{Missing, Int64}}}:
│  (1, -1)
│  (-2, missing)
│  (missing, 3)
│  (missing, -4)
│  (5, missing)
│  (-6, 6)
│ 
│ Expected output:
│ 
│ 6-element Array{Tuple{Union{Missing, Int64},Union{Missing, Int64}},1}:
│  (1, -1)
│  (-2, missing)
│  (missing, 3)
│  (missing, -4)
│  (5, missing)
│  (-6, 6)
│ 
│   diff =
│    Warning: Diff output requires color.
│    6-element Array{Tuple{Union{Missing, Int64},Union{Missing, Int64}},1}:
│     Vector{Tuple{Union{Missing, Int64}, Union{Missing, Int64}}}:
│     (1, -1)
│     (-2, missing)
│     (missing, 3)
│     (missing, -4)
│     (5, missing)
│     (-6, 6)
└ @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/LightQuery/U9mHU/src/rows.jl:563-586
│ 
│ ```jldoctest
│ julia> using LightQuery
│ 
│ 
│ julia> collect(OuterJoin(By([1, -2, 5, -6], abs), By([-1, 3, -4, 6], abs)))
│ 6-element Array{Tuple{Union{Missing, Int64},Union{Missing, Int64}},1}:
│  (1, -1)
│  (-2, missing)
│  (missing, 3)
│  (missing, -4)
│  (5, missing)
│  (-6, 6)
│ 
│ julia> collect(OuterJoin(By(Int[], abs), By(Int[], abs))) == []
│ true
│ 
│ julia> collect(OuterJoin(By([1], abs), By(Int[], abs)))
│ 1-element Array{Tuple{Union{Missing, Int64},Union{Missing, Int64}},1}:
│  (1, missing)
│ 
│ julia> collect(OuterJoin(By(Int[], abs), By([1], abs)))
│ 1-element Array{Tuple{Union{Missing, Int64},Union{Missing, Int64}},1}:
│  (missing, 1)
│ ```
│ 
│ Subexpression:
│ 
│ collect(OuterJoin(By([1], abs), By(Int[], abs)))
│ 
│ Evaluated output:
│ 
│ 1-element Vector{Tuple{Union{Missing, Int64}, Union{Missing, Int64}}}:
│  (1, missing)
│ 
│ Expected output:
│ 
│ 1-element Array{Tuple{Union{Missing, Int64},Union{Missing, Int64}},1}:
│  (1, missing)
│ 
│   diff =
│    Warning: Diff output requires color.
│    1-element Array{Tuple{Union{Missing, Int64},Union{Missing, Int64}},1}:
│     Vector{Tuple{Union{Missing, Int64}, Union{Missing, Int64}}}:
│     (1, missing)
└ @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/LightQuery/U9mHU/src/rows.jl:563-586
│ 
│ ```jldoctest
│ julia> using LightQuery
│ 
│ 
│ julia> collect(OuterJoin(By([1, -2, 5, -6], abs), By([-1, 3, -4, 6], abs)))
│ 6-element Array{Tuple{Union{Missing, Int64},Union{Missing, Int64}},1}:
│  (1, -1)
│  (-2, missing)
│  (missing, 3)
│  (missing, -4)
│  (5, missing)
│  (-6, 6)
│ 
│ julia> collect(OuterJoin(By(Int[], abs), By(Int[], abs))) == []
│ true
│ 
│ julia> collect(OuterJoin(By([1], abs), By(Int[], abs)))
│ 1-element Array{Tuple{Union{Missing, Int64},Union{Missing, Int64}},1}:
│  (1, missing)
│ 
│ julia> collect(OuterJoin(By(Int[], abs), By([1], abs)))
│ 1-element Array{Tuple{Union{Missing, Int64},Union{Missing, Int64}},1}:
│  (missing, 1)
│ ```
│ 
│ Subexpression:
│ 
│ collect(OuterJoin(By(Int[], abs), By([1], abs)))
│ 
│ Evaluated output:
│ 
│ 1-element Vector{Tuple{Union{Missing, Int64}, Union{Missing, Int64}}}:
│  (missing, 1)
│ 
│ Expected output:
│ 
│ 1-element Array{Tuple{Union{Missing, Int64},Union{Missing, Int64}},1}:
│  (missing, 1)
│ 
│   diff =
│    Warning: Diff output requires color.
│    1-element Array{Tuple{Union{Missing, Int64},Union{Missing, Int64}},1}:
│     Vector{Tuple{Union{Missing, Int64}, Union{Missing, Int64}}}:
│     (missing, 1)
└ @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/LightQuery/U9mHU/src/rows.jl:379-399
│ 
│ ```jldoctest
│ julia> using LightQuery
│ 
│ 
│ julia> using Test: @inferred
│ 
│ 
│ julia> @inferred collect(InnerJoin(By([1, -2, 5, -6], abs), By([-1, 3, -4, 6], abs)))
│ 2-element Array{Tuple{Int64,Int64},1}:
│  (1, -1)
│  (-6, 6)
│ 
│ julia> (@inferred collect(InnerJoin(By(Int[], abs), By(Int[], abs)))) == []
│ true
│ 
│ julia> (@inferred collect(InnerJoin(By([1], abs), By(Int[], abs)))) == []
│ true
│ 
│ julia> (@inferred collect(InnerJoin(By(Int[], abs), By([1], abs)))) == []
│ true
│ ```
│ 
│ Subexpression:
│ 
│ @inferred collect(InnerJoin(By([1, -2, 5, -6], abs), By([-1, 3, -4, 6], abs)))
│ 
│ Evaluated output:
│ 
│ 2-element Vector{Tuple{Int64, Int64}}:
│  (1, -1)
│  (-6, 6)
│ 
│ Expected output:
│ 
│ 2-element Array{Tuple{Int64,Int64},1}:
│  (1, -1)
│  (-6, 6)
│ 
│   diff =
│    Warning: Diff output requires color.
│    2-element Array{Tuple{Int64,Int64},1}:
│     Vector{Tuple{Int64, Int64}}:
│     (1, -1)
│     (-6, 6)
└ @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/LightQuery/U9mHU/src/rows.jl:714-722
│ 
│ ```jldoctest
│ julia> using LightQuery
│ 
│ 
│ julia> collect(Length(Iterators.filter(iseven, 1:4), 2))
│ 2-element Array{Int64,1}:
│  2
│  4
│ ```
│ 
│ Subexpression:
│ 
│ collect(Length(Iterators.filter(iseven, 1:4), 2))
│ 
│ Evaluated output:
│ 
│ 2-element Vector{Int64}:
│  2
│  4
│ 
│ Expected output:
│ 
│ 2-element Array{Int64,1}:
│  2
│  4
│ 
│   diff =
│    Warning: Diff output requires color.
│    2-element Array{Int64,1}:
│     Vector{Int64}:
│     2
│     4
└ @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/LightQuery/U9mHU/src/rows.jl:497-517
│ 
│ ```jldoctest
│ julia> using LightQuery
│ 
│ 
│ julia> collect(RightJoin(By([1, -2, 5, -6], abs), By([-1, 3, -4, 6], abs)))
│ 4-element Array{Tuple{Union{Missing, Int64},Int64},1}:
│  (1, -1)
│  (missing, 3)
│  (missing, -4)
│  (-6, 6)
│ 
│ julia> collect(RightJoin(By(Int[], abs), By(Int[], abs))) == []
│ true
│ 
│ julia> collect(RightJoin(By([1], abs), By(Int[], abs))) == []
│ true
│ 
│ julia> collect(RightJoin(By(Int[], abs), By([1], abs)))
│ 1-element Array{Tuple{Union{Missing, Int64},Int64},1}:
│  (missing, 1)
│ ```
│ 
│ Subexpression:
│ 
│ collect(RightJoin(By([1, -2, 5, -6], abs), By([-1, 3, -4, 6], abs)))
│ 
│ Evaluated output:
│ 
│ 4-element Vector{Tuple{Union{Missing, Int64}, Int64}}:
│  (1, -1)
│  (missing, 3)
│  (missing, -4)
│  (-6, 6)
│ 
│ Expected output:
│ 
│ 4-element Array{Tuple{Union{Missing, Int64},Int64},1}:
│  (1, -1)
│  (missing, 3)
│  (missing, -4)
│  (-6, 6)
│ 
│   diff =
│    Warning: Diff output requires color.
│    4-element Array{Tuple{Union{Missing, Int64},Int64},1}:
│     Vector{Tuple{Union{Missing, Int64}, Int64}}:
│     (1, -1)
│     (missing, 3)
│     (missing, -4)
│     (-6, 6)
└ @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/LightQuery/U9mHU/src/rows.jl:497-517
│ 
│ ```jldoctest
│ julia> using LightQuery
│ 
│ 
│ julia> collect(RightJoin(By([1, -2, 5, -6], abs), By([-1, 3, -4, 6], abs)))
│ 4-element Array{Tuple{Union{Missing, Int64},Int64},1}:
│  (1, -1)
│  (missing, 3)
│  (missing, -4)
│  (-6, 6)
│ 
│ julia> collect(RightJoin(By(Int[], abs), By(Int[], abs))) == []
│ true
│ 
│ julia> collect(RightJoin(By([1], abs), By(Int[], abs))) == []
│ true
│ 
│ julia> collect(RightJoin(By(Int[], abs), By([1], abs)))
│ 1-element Array{Tuple{Union{Missing, Int64},Int64},1}:
│  (missing, 1)
│ ```
│ 
│ Subexpression:
│ 
│ collect(RightJoin(By(Int[], abs), By([1], abs)))
│ 
│ Evaluated output:
│ 
│ 1-element Vector{Tuple{Union{Missing, Int64}, Int64}}:
│  (missing, 1)
│ 
│ Expected output:
│ 
│ 1-element Array{Tuple{Union{Missing, Int64},Int64},1}:
│  (missing, 1)
│ 
│   diff =
│    Warning: Diff output requires color.
│    1-element Array{Tuple{Union{Missing, Int64},Int64},1}:
│     Vector{Tuple{Union{Missing, Int64}, Int64}}:
│     (missing, 1)
└ @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/LightQuery/U9mHU/src/rows.jl:106-117
│ 
│ ```jldoctest
│ julia> using LightQuery
│ 
│ 
│ julia> using Test: @inferred
│ 
│ 
│ julia> collect(@inferred order([1, -2], Backwards))
│ 2-element Array{Int64,1}:
│   1
│  -2
│ ```
│ 
│ Subexpression:
│ 
│ collect(@inferred order([1, -2], Backwards))
│ 
│ Evaluated output:
│ 
│ 2-element Vector{Int64}:
│   1
│  -2
│ 
│ Expected output:
│ 
│ 2-element Array{Int64,1}:
│   1
│  -2
│ 
│   diff =
│    Warning: Diff output requires color.
│    2-element Array{Int64,1}:
│      Vector{Int64}:
│      1
│     -2
└ @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
┌ Error: doctest failure in ~/.julia/packages/LightQuery/U9mHU/src/rows.jl:224-233
│ 
│ ```jldoctest
│ julia> using LightQuery
│ 
│ 
│ julia> using Test: @inferred
│ 
│ 
│ julia> @inferred By([1, -2], abs)
│ By{Array{Int64,1},typeof(abs)}([1, -2], abs)
│ ```
│ 
│ Subexpression:
│ 
│ @inferred By([1, -2], abs)
│ 
│ Evaluated output:
│ 
│ By{Vector{Int64}, typeof(abs)}([1, -2], abs)
│ 
│ Expected output:
│ 
│ By{Array{Int64,1},typeof(abs)}([1, -2], abs)
│ 
│   diff =
│    Warning: Diff output requires color.
│    By{Array{Int64,1},typeof(abs)}([1, By{Vector{Int64}, typeof(abs)}([1, -2], abs)
└ @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
┌ Error: Doctesting failed
│   exception =
│    `makedocs` encountered a doctest error. Terminating build
│    Stacktrace:
│      [1] error(s::String)
│        @ Base ./error.jl:33
│      [2] runner(#unused#::Type{Documenter.Builder.Doctest}, doc::Documenter.Documents.Document)
│        @ Documenter.Builder ~/.julia/packages/Documenter/pjwqp/src/Builder.jl:217
│      [3] dispatch(#unused#::Type{Documenter.Builder.DocumentPipeline}, x::Documenter.Documents.Document)
│        @ Documenter.Utilities.Selectors ~/.julia/packages/Documenter/pjwqp/src/Utilities/Selectors.jl:167
│      [4] #2
│        @ ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:241 [inlined]
│      [5] cd(f::Documenter.var"#2#3"{Documenter.Documents.Document}, dir::String)
│        @ Base.Filesystem ./file.jl:104
│      [6] makedocs(; debug::Bool, format::Documenter.Writers.HTMLWriter.HTML, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{5, Symbol}, NamedTuple{(:root, :source, :sitename, :doctest, :modules), Tuple{String, String, String, Symbol, Vector{Module}}}})
│        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:240
│      [7] (::Documenter.var"#all_doctests#31"{Bool, Vector{Module}})()
│        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:802
│      [8] macro expansion
│        @ ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:818 [inlined]
│      [9] macro expansion
│        @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
│     [10] doctest(source::String, modules::Vector{Module}; fix::Bool, testset::String)
│        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:818
│     [11] doctest(package::Module; manual::Bool, testset::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:761
│     [12] doctest(package::Module)
│        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:748
│     [13] top-level scope
│        @ ~/.julia/packages/LightQuery/U9mHU/test/runtests.jl:6
│     [14] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [15] top-level scope
│        @ none:6
│     [16] eval(m::Module, e::Any)
│        @ Core ./boot.jl:345
│     [17] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [18] _start()
│        @ Base ./client.jl:485
└ @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:811
Doctests: LightQuery: Test Failed at /home/pkgeval/.julia/packages/Documenter/pjwqp/src/Documenter.jl:818
  Expression: all_doctests()
Stacktrace:
 [1] macro expansion
   @ ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:818 [inlined]
 [2] macro expansion
   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
 [3] doctest(source::String, modules::Vector{Module}; fix::Bool, testset::String)
   @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:818
Test Summary:        | Fail  Total
Doctests: LightQuery |    1      1
ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/LightQuery/U9mHU/test/runtests.jl:6
ERROR: Package LightQuery errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String, N} where N)
    @ Pkg.Types /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1580
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:328
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:315
  [5] #test#62
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#61
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:19
