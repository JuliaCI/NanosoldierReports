Julia Version 1.6.0-DEV.888
Commit 0d7dc9621e (2020-09-10 16:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_QKXvdc/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_QKXvdc/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  0.803542 seconds (1.37 M allocations: 72.710 MiB, 1.57% gc time)
Running: chebyshev_quadrature with k=1
  1.611103 seconds (2.16 M allocations: 123.968 MiB, 3.94% gc time)
Running: chebyshev_quadrature with k=2
  0.314028 seconds (410.94 k allocations: 23.596 MiB, 8.66% gc time)
Running: chebyshev_quadrature with k=3
  0.309366 seconds (524.65 k allocations: 28.749 MiB)
Running: chebyshev_quadrature with k=4
  0.399164 seconds (469.05 k allocations: 25.373 MiB, 29.68% gc time)
Running: jacobi_quadrature with α=β=1
 40.731436 seconds (37.26 M allocations: 3.042 GiB, 8.65% gc time)
Running: laguerre_quadrature with k=1
  2.982305 seconds (3.20 M allocations: 177.817 MiB, 2.32% gc time)
Running: legendre_quadrature
  0.237018 seconds (207.28 k allocations: 11.877 MiB, 11.26% gc time)
Running: lobatto_quadrature
  0.323420 seconds (332.09 k allocations: 19.976 MiB)
Running: radau_quadrature
  0.257407 seconds (314.93 k allocations: 19.008 MiB)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 78.955566 seconds (100.02 M allocations: 1.491 GiB, 0.33% gc time)
Running: rectangle_rule_midpoint.
  0.122867 seconds (172.85 k allocations: 3.842 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 77.724349 seconds (100.02 M allocations: 1.491 GiB, 0.30% gc time)
Running: rombergs_method
  0.552635 seconds (726.44 k allocations: 41.829 MiB, 5.88% gc time)
Running: simpsons_rule
  0.040274 seconds (46.21 k allocations: 2.061 MiB)
Running: simpsons38_rule
  0.094539 seconds (109.97 k allocations: 5.809 MiB)
Running: trapezoidal_rule
  0.319241 seconds (1.51 M allocations: 25.709 MiB, 4.55% gc time)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.081193 seconds (31.52 k allocations: 1.886 MiB)
Running: chebyshev_quadrature with k=1
  0.472676 seconds (276.24 k allocations: 14.323 MiB, 4.40% gc time)
Running: chebyshev_quadrature with k=2
  0.158787 seconds (93.97 k allocations: 2.681 MiB)
Running: chebyshev_quadrature with k=3
  0.159675 seconds (82.22 k allocations: 2.482 MiB)
Running: chebyshev_quadrature with k=4
  0.161106 seconds (64.83 k allocations: 2.128 MiB)
Running: jacobi_quadrature with α=β=1
  2.341697 seconds (500.85 k allocations: 161.694 MiB, 3.43% gc time)
Running: legendre_quadrature
  0.151011 seconds (41.96 k allocations: 2.419 MiB)
Running: lobatto_quadrature
  0.020551 seconds (16.32 k allocations: 1.012 MiB)
Running: radau_quadrature
  0.025037 seconds (16.30 k allocations: 1.012 MiB)
Running: rectangle_rule_left
 28.113724 seconds (471.41 M allocations: 7.025 GiB, 3.38% gc time)
Running: rectangle_rule_midpoint
  0.000032 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 27.311569 seconds (476.96 M allocations: 7.107 GiB, 3.47% gc time)
Running: rombergs_method
  0.366313 seconds (328.55 k allocations: 18.615 MiB)
Running: simpsons_rule
  0.000025 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.060459 seconds (19.27 k allocations: 1.161 MiB)
Running: trapezoidal_rule
  0.054513 seconds (17.75 k allocations: 1.068 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.029494 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.097273 seconds (2.40 k allocations: 113.328 KiB)
Running: chebyshev_quadrature with k=2
  0.100941 seconds (2.65 k allocations: 121.344 KiB)
Running: chebyshev_quadrature with k=3
  0.122469 seconds (3.08 k allocations: 133.547 KiB)
Running: chebyshev_quadrature with k=4
  0.108414 seconds (3.08 k allocations: 133.609 KiB)
Running: jacobi_quadrature with α=β=1
  0.290595 seconds (363.41 k allocations: 18.938 MiB)
Running: legendre_quadrature
  0.069640 seconds (1.24 k allocations: 63.531 KiB)
Running: lobatto_quadrature
  0.000106 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000045 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000502 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000354 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000502 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.077069 seconds (1.01 k allocations: 54.094 KiB)
Running: simpsons_rule
  0.000038 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.024979 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.021515 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.056589 seconds (73.32 k allocations: 4.254 MiB)
Running: chebyshev_quadrature with k=1
  0.251484 seconds (231.21 k allocations: 12.989 MiB, 21.33% gc time)
Running: chebyshev_quadrature with k=2
  0.200447 seconds (284.05 k allocations: 15.893 MiB)
Running: chebyshev_quadrature with k=3
  0.195807 seconds (263.44 k allocations: 14.318 MiB)
Running: chebyshev_quadrature with k=4
  0.257843 seconds (263.46 k allocations: 14.227 MiB)
Running: jacobi_quadrature with α=β=1
  2.931299 seconds (447.44 k allocations: 163.192 MiB, 18.35% gc time)
Running: legendre_quadrature
  0.160659 seconds (186.06 k allocations: 10.714 MiB)
Running: lobatto_quadrature
  0.165991 seconds (197.00 k allocations: 11.410 MiB)
Running: radau_quadrature
  0.162345 seconds (196.99 k allocations: 11.408 MiB, 9.52% gc time)
Running: rectangle_rule_left
  1.198280 seconds (19.09 k allocations: 1.158 MiB)
Running: rectangle_rule_midpoint
  0.025068 seconds (25.05 k allocations: 1.571 MiB)
Running: rectangle_rule_right
  1.246694 seconds (17.64 k allocations: 1.073 MiB)
Running: rombergs_method
  0.122472 seconds (134.40 k allocations: 7.752 MiB)
Running: simpsons_rule
  0.030932 seconds (27.97 k allocations: 1.747 MiB)
Running: simpsons38_rule
  0.032681 seconds (43.06 k allocations: 2.705 MiB)
Running: trapezoidal_rule
  0.026129 seconds (44.46 k allocations: 1.786 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.036503 seconds (100.03 k allocations: 2.999 MiB)
Running: chebyshev_quadrature with k=1
  0.189316 seconds (237.80 k allocations: 13.033 MiB, 8.11% gc time)
Running: chebyshev_quadrature with k=2
  0.194242 seconds (291.08 k allocations: 15.964 MiB)
Running: chebyshev_quadrature with k=3
  0.184710 seconds (270.17 k allocations: 14.313 MiB)
Running: chebyshev_quadrature with k=4
  0.212584 seconds (270.19 k allocations: 14.323 MiB, 9.91% gc time)
Running: hermite_quadrature with k=2
 14.560202 seconds (20.95 M allocations: 1.089 GiB, 8.73% gc time)
Running: jacobi_quadrature with α=β=1
  0.444200 seconds (456.66 k allocations: 49.400 MiB, 7.62% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.224665 seconds (277.29 k allocations: 15.259 MiB)
Running: legendre_quadrature
  0.181603 seconds (192.63 k allocations: 11.043 MiB)
Running: lobatto_quadrature
  0.277867 seconds (217.82 k allocations: 37.178 MiB, 14.80% gc time)
Running: radau_quadrature
  0.242479 seconds (214.41 k allocations: 29.841 MiB, 10.21% gc time)
Running: rectangle_rule_left
  0.026887 seconds (22.05 k allocations: 1.306 MiB)
Running: rectangle_rule_midpoint
  0.028647 seconds (26.89 k allocations: 1.660 MiB)
Running: rectangle_rule_right
  0.026170 seconds (18.79 k allocations: 1.129 MiB)
Running: rombergs_method
  0.117803 seconds (136.88 k allocations: 7.791 MiB)
Running: simpsons_rule
  0.043087 seconds (39.87 k allocations: 2.080 MiB)
Running: simpsons38_rule
  0.052032 seconds (58.09 k allocations: 3.092 MiB)
Running: trapezoidal_rule
  0.030555 seconds (30.55 k allocations: 1.714 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.033645 seconds (60.38 k allocations: 2.298 MiB)
Running: chebyshev_quadrature with k=1
  0.197708 seconds (233.32 k allocations: 12.823 MiB, 12.76% gc time)
Running: chebyshev_quadrature with k=2
  0.210663 seconds (286.28 k allocations: 15.709 MiB)
Running: chebyshev_quadrature with k=3
  0.191243 seconds (265.58 k allocations: 14.109 MiB)
Running: chebyshev_quadrature with k=4
  0.199494 seconds (265.60 k allocations: 14.111 MiB)
Running: hermite_quadrature with k=2
  0.202732 seconds (171.23 k allocations: 9.790 MiB, 19.82% gc time)
Running: jacobi_quadrature with α=β=1
  9.731842 seconds (449.89 k allocations: 1.175 GiB, 15.99% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.194419 seconds (272.56 k allocations: 15.081 MiB)
Running: legendre_quadrature
  0.174854 seconds (188.18 k allocations: 10.822 MiB, 12.77% gc time)
Running: lobatto_quadrature
  0.168953 seconds (208.57 k allocations: 22.910 MiB)
Running: radau_quadrature
  0.178731 seconds (207.72 k allocations: 20.845 MiB)
Running: rectangle_rule_left
  0.029188 seconds (19.81 k allocations: 1.200 MiB)
Running: rectangle_rule_midpoint
  0.027444 seconds (25.76 k allocations: 1.607 MiB)
Running: rectangle_rule_right
  0.023634 seconds (17.63 k allocations: 1.073 MiB)
Running: rombergs_method
  0.125574 seconds (132.69 k allocations: 7.611 MiB, 14.03% gc time)
Running: simpsons_rule
  0.033860 seconds (32.36 k allocations: 1.871 MiB)
Running: simpsons38_rule
  0.104357 seconds (48.87 k allocations: 2.851 MiB)
Running: trapezoidal_rule
  0.027690 seconds (25.43 k allocations: 1.550 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.030733 seconds (31.33 k allocations: 1.893 MiB)
Running: chebyshev_quadrature with k=1
  0.181006 seconds (231.70 k allocations: 13.045 MiB)
Running: chebyshev_quadrature with k=2
  0.237911 seconds (284.56 k allocations: 15.989 MiB)
Running: chebyshev_quadrature with k=3
  0.328441 seconds (263.95 k allocations: 14.324 MiB)
Running: chebyshev_quadrature with k=4
  0.245570 seconds (263.97 k allocations: 14.162 MiB, 11.50% gc time)
Running: jacobi_quadrature with α=β=1
  2.891475 seconds (447.99 k allocations: 194.220 MiB, 8.81% gc time)
Running: legendre_quadrature
  0.152808 seconds (186.56 k allocations: 10.746 MiB)
Running: lobatto_quadrature
  0.171281 seconds (197.50 k allocations: 11.437 MiB)
Running: radau_quadrature
  0.172215 seconds (197.50 k allocations: 11.431 MiB)
Running: rectangle_rule_left
  0.321812 seconds (19.61 k allocations: 1.184 MiB, 6.77% gc time)
Running: rectangle_rule_midpoint
  0.026043 seconds (25.40 k allocations: 1.589 MiB)
Running: rectangle_rule_right
  0.111981 seconds (17.99 k allocations: 1.092 MiB)
Running: rombergs_method
  0.138237 seconds (145.33 k allocations: 8.496 MiB)
Running: simpsons_rule
  0.027465 seconds (28.67 k allocations: 1.776 MiB)
Running: simpsons38_rule
  0.032483 seconds (43.78 k allocations: 2.735 MiB)
Running: trapezoidal_rule
  0.024818 seconds (45.40 k allocations: 1.820 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.032148 seconds (32.09 k allocations: 1.844 MiB)
Running: chebyshev_quadrature with k=1
  0.183531 seconds (232.29 k allocations: 13.054 MiB)
Running: chebyshev_quadrature with k=2
  0.236341 seconds (285.19 k allocations: 15.915 MiB)
Running: chebyshev_quadrature with k=3
  0.252718 seconds (264.53 k allocations: 14.247 MiB, 17.65% gc time)
Running: chebyshev_quadrature with k=4
  0.209557 seconds (264.55 k allocations: 14.326 MiB)
Running: jacobi_quadrature with α=β=1
  1.973924 seconds (448.70 k allocations: 148.917 MiB, 3.37% gc time)
Running: legendre_quadrature
  0.165487 seconds (187.15 k allocations: 10.805 MiB)
Running: lobatto_quadrature
  0.186601 seconds (198.10 k allocations: 11.511 MiB, 12.02% gc time)
Running: radau_quadrature
  0.159564 seconds (198.09 k allocations: 11.452 MiB)
Running: rectangle_rule_left
  1.294564 seconds (19.86 k allocations: 1.197 MiB)
Running: rectangle_rule_midpoint
  0.027605 seconds (25.40 k allocations: 1.589 MiB)
Running: rectangle_rule_right
  1.158583 seconds (17.95 k allocations: 1.089 MiB)
Running: rombergs_method
  0.140393 seconds (135.63 k allocations: 7.808 MiB)
Running: simpsons_rule
  0.033918 seconds (29.37 k allocations: 1.802 MiB)
Running: simpsons38_rule
  0.037261 seconds (44.48 k allocations: 2.761 MiB)
Running: trapezoidal_rule
  0.028924 seconds (57.63 k allocations: 2.020 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.151797 seconds (147.31 k allocations: 8.779 MiB)
Running: chebyshev_quadrature with k=1
  0.143335 seconds (70.10 k allocations: 2.210 MiB)
Running: chebyshev_quadrature with k=2
  0.152225 seconds (105.25 k allocations: 2.873 MiB)
Running: chebyshev_quadrature with k=3
  0.161854 seconds (92.74 k allocations: 2.661 MiB)
Running: chebyshev_quadrature with k=4
  0.155224 seconds (72.27 k allocations: 2.256 MiB)
Running: jacobi_quadrature with α=β=1
  1.656129 seconds (476.08 k allocations: 167.539 MiB, 6.77% gc time)
Running: legendre_quadrature
  0.097005 seconds (18.89 k allocations: 1.097 MiB)
Running: lobatto_quadrature
  0.000123 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000037 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 44.292180 seconds (590.00 M allocations: 8.792 GiB, 3.18% gc time)
Running: rectangle_rule_midpoint
  0.000095 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 45.454154 seconds (592.75 M allocations: 8.833 GiB, 3.00% gc time)
Running: rombergs_method
  0.134041 seconds (20.67 k allocations: 1.171 MiB)
Running: simpsons_rule
  0.000045 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.032673 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.023950 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 32.709596 seconds (629.33 M allocations: 9.387 GiB, 4.29% gc time)
Running: chebyshev_quadrature with k=1
  0.544424 seconds (421.07 k allocations: 23.223 MiB)
Running: chebyshev_quadrature with k=2
 13.284200 seconds (475.98 k allocations: 4.041 GiB, 4.23% gc time)
Running: chebyshev_quadrature with k=3
  6.087910 seconds (277.89 k allocations: 1.643 GiB, 4.56% gc time)
Running: chebyshev_quadrature with k=4
  8.149056 seconds (277.91 k allocations: 2.261 GiB, 2.88% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 58.747766 seconds (485.65 k allocations: 13.254 GiB, 4.05% gc time)
Running: legendre_quadrature.
  6.509444 seconds (224.51 k allocations: 1.976 GiB, 2.65% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 49.930515 seconds (8.23 M allocations: 13.383 GiB, 4.94% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 51.342397 seconds (7.23 M allocations: 13.369 GiB, 3.25% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.938217 seconds (22.55 k allocations: 1.359 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.105355 seconds (30.88 k allocations: 1.901 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.188603 seconds (22.76 k allocations: 1.369 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.231184 seconds (440.48 k allocations: 152.761 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 43.541136 seconds (600.04 M allocations: 8.943 GiB, 8.71% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 39.828494 seconds (600.05 M allocations: 8.943 GiB, 8.60% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 38.989595 seconds (600.03 M allocations: 8.943 GiB, 8.51% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.068797 seconds (180.97 k allocations: 4.427 MiB)
Running: chebyshev_quadrature with k=1
  0.245346 seconds (248.27 k allocations: 13.490 MiB)
Running: chebyshev_quadrature with k=2
  0.232721 seconds (272.84 k allocations: 14.578 MiB)
Running: chebyshev_quadrature with k=3
  0.216211 seconds (248.77 k allocations: 12.811 MiB)
Running: chebyshev_quadrature with k=4
  0.178613 seconds (248.79 k allocations: 12.804 MiB)
Running: jacobi_quadrature with α=β=1
  0.435820 seconds (388.81 k allocations: 34.934 MiB)
Running: laguerre_quadrature with k=2
  0.178682 seconds (181.10 k allocations: 10.514 MiB)
Running: legendre_quadrature
  0.120519 seconds (146.05 k allocations: 8.057 MiB)
Running: lobatto_quadrature
  0.037127 seconds (10.69 k allocations: 15.100 MiB)
Running: radau_quadrature
  0.033551 seconds (9.47 k allocations: 13.173 MiB)
Running: rectangle_rule_left
  0.059726 seconds (19.12 k allocations: 1.132 MiB)
Running: rectangle_rule_midpoint
  0.047098 seconds (25.86 k allocations: 1.591 MiB)
Running: rectangle_rule_right
  0.060361 seconds (17.73 k allocations: 1.059 MiB)
Running: rombergs_method
  0.265234 seconds (171.91 k allocations: 9.810 MiB)
Running: simpsons_rule
  0.001959 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.047080 seconds (79.55 k allocations: 3.411 MiB)
Running: trapezoidal_rule
  0.187480 seconds (2.39 M allocations: 37.705 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.002155 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.121317 seconds (2.40 k allocations: 1.688 MiB)
Running: chebyshev_quadrature with k=2
  0.125114 seconds (2.65 k allocations: 2.352 MiB)
Running: chebyshev_quadrature with k=3
  0.141156 seconds (3.08 k allocations: 2.052 MiB)
Running: chebyshev_quadrature with k=4
  0.159475 seconds (3.08 k allocations: 1.493 MiB)
Running: jacobi_quadrature with α=β=1
  7.704331 seconds (365.81 k allocations: 904.756 MiB, 3.45% gc time)
Running: legendre_quadrature
  0.094934 seconds (1.23 k allocations: 65.688 KiB)
Running: lobatto_quadrature
  0.000202 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000158 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  4.017600 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000495 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  4.111690 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.061080 seconds (959 allocations: 54.031 KiB)
Running: simpsons_rule
  0.000073 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000085 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000872 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000682 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.097096 seconds (2.48 k allocations: 576.484 KiB)
Running: chebyshev_quadrature with k=2
  0.114905 seconds (2.73 k allocations: 777.266 KiB)
Running: chebyshev_quadrature with k=3
  0.143683 seconds (3.15 k allocations: 685.500 KiB)
Running: chebyshev_quadrature with k=4
  0.195650 seconds (3.16 k allocations: 516.062 KiB)
Running: jacobi_quadrature with α=β=1
  1.769868 seconds (372.37 k allocations: 252.867 MiB)
Running: legendre_quadrature
  0.070910 seconds (1.28 k allocations: 65.359 KiB)
Running: lobatto_quadrature
  0.000089 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000036 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 11.713382 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001908 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 11.623263 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.101896 seconds (1.18 k allocations: 62.547 KiB)
Running: simpsons_rule
  0.000052 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000043 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001705 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
