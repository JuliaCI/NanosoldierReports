Julia Version 1.6.0-DEV.888
Commit 0d7dc9621e (2020-09-10 16:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed IniFile ────────────────────── v0.5.0
  Installed CodecZlib ──────────────────── v0.7.0
  Installed CEnum ──────────────────────── v0.3.0
  Installed LatinSquares ───────────────── v0.3.0
  Installed MacroTools ─────────────────── v0.5.5
  Installed Parsers ────────────────────── v1.0.10
  Installed TranscodingStreams ─────────── v0.9.5
  Installed JuMP ───────────────────────── v0.21.3
  Installed Cbc ────────────────────────── v0.7.0
  Installed JSON ───────────────────────── v0.21.1
  Installed JSONSchema ─────────────────── v0.3.2
  Installed Cbc_jll ────────────────────── v2.10.3+4
  Installed ChooseOptimizer ────────────── v0.1.0
  Installed OpenBLAS32_jll ─────────────── v0.3.9+4
  Installed ZipFile ────────────────────── v0.9.2
  Installed DiffResults ────────────────── v1.0.2
  Installed StaticArrays ───────────────── v0.12.4
  Installed MathProgBase ───────────────── v0.7.8
  Installed MathOptInterface ───────────── v0.9.14
  Installed Zlib_jll ───────────────────── v1.2.11+16
  Installed MutableArithmetics ─────────── v0.2.10
  Installed Bzip2_jll ──────────────────── v1.0.6+4
  Installed Calculus ───────────────────── v0.5.1
  Installed DiffRules ──────────────────── v1.0.1
  Installed SpecialFunctions ───────────── v0.10.3
  Installed BenchmarkTools ─────────────── v0.5.0
  Installed DataStructures ─────────────── v0.17.20
  Installed Clp_jll ────────────────────── v1.17.6+6
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed OrderedCollections ─────────── v1.3.0
  Installed HTTP ───────────────────────── v0.8.17
  Installed ForwardDiff ────────────────── v0.10.12
  Installed Osi_jll ────────────────────── v0.108.5+3
  Installed CommonSubexpressions ───────── v0.3.0
  Installed MbedTLS_jll ────────────────── v2.16.8+0
  Installed CodecBzip2 ─────────────────── v0.7.2
  Installed Cgl_jll ────────────────────── v0.60.2+5
  Installed NaNMath ────────────────────── v0.3.4
  Installed MbedTLS ────────────────────── v1.0.2
  Installed CoinUtils_jll ──────────────── v2.11.3+3
  Installed BinaryProvider ─────────────── v0.5.10
Updating `~/.julia/environments/v1.6/Project.toml`
  [c3c424ec] + LatinSquares v0.3.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [6e4b80f9] + BenchmarkTools v0.5.0
  [b99e7846] + BinaryProvider v0.5.10
  [6e34b625] + Bzip2_jll v1.0.6+4
  [fa961155] + CEnum v0.3.0
  [49dc2e85] + Calculus v0.5.1
  [9961bab8] + Cbc v0.7.0
  [38041ee0] + Cbc_jll v2.10.3+4
  [3830e938] + Cgl_jll v0.60.2+5
  [858a232f] + ChooseOptimizer v0.1.0
  [06985876] + Clp_jll v1.17.6+6
  [523fee87] + CodecBzip2 v0.7.2
  [944b1d66] + CodecZlib v0.7.0
  [be027038] + CoinUtils_jll v2.11.3+3
  [bbf7d656] + CommonSubexpressions v0.3.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [864edb3b] + DataStructures v0.17.20
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [f6369f11] + ForwardDiff v0.10.12
  [cd3eb016] + HTTP v0.8.17
  [83e8ac13] + IniFile v0.5.0
  [682c06a0] + JSON v0.21.1
  [7d188eb4] + JSONSchema v0.3.2
  [4076af6c] + JuMP v0.21.3
  [c3c424ec] + LatinSquares v0.3.0
  [1914dd2f] + MacroTools v0.5.5
  [b8f27783] + MathOptInterface v0.9.14
  [fdba3010] + MathProgBase v0.7.8
  [739be429] + MbedTLS v1.0.2
  [c8ffd9c3] + MbedTLS_jll v2.16.8+0
  [d8a4904e] + MutableArithmetics v0.2.10
  [77ba4419] + NaNMath v0.3.4
  [656ef2d0] + OpenBLAS32_jll v0.3.9+4
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.3.0
  [7da25872] + Osi_jll v0.108.5+3
  [69de0a69] + Parsers v1.0.10
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [3bb67fe8] + TranscodingStreams v0.9.5
  [a5390f91] + ZipFile v0.9.2
  [83775a58] + Zlib_jll v1.2.11+16
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building Cbc → `~/.julia/packages/Cbc/f5sSt/deps/build.log`
    Testing LatinSquares
Status `/tmp/jl_RhaXQc/Project.toml`
  [9961bab8] Cbc v0.7.0
  [858a232f] ChooseOptimizer v0.1.0
  [4076af6c] JuMP v0.21.3
  [c3c424ec] LatinSquares v0.3.0
  [fdba3010] MathProgBase v0.7.8
  [8dfed614] Test
Status `/tmp/jl_RhaXQc/Manifest.toml`
  [6e4b80f9] BenchmarkTools v0.5.0
  [b99e7846] BinaryProvider v0.5.10
  [6e34b625] Bzip2_jll v1.0.6+4
  [fa961155] CEnum v0.3.0
  [49dc2e85] Calculus v0.5.1
  [9961bab8] Cbc v0.7.0
  [38041ee0] Cbc_jll v2.10.3+4
  [3830e938] Cgl_jll v0.60.2+5
  [858a232f] ChooseOptimizer v0.1.0
  [06985876] Clp_jll v1.17.6+6
  [523fee87] CodecBzip2 v0.7.2
  [944b1d66] CodecZlib v0.7.0
  [be027038] CoinUtils_jll v2.11.3+3
  [bbf7d656] CommonSubexpressions v0.3.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [864edb3b] DataStructures v0.17.20
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [f6369f11] ForwardDiff v0.10.12
  [cd3eb016] HTTP v0.8.17
  [83e8ac13] IniFile v0.5.0
  [682c06a0] JSON v0.21.1
  [7d188eb4] JSONSchema v0.3.2
  [4076af6c] JuMP v0.21.3
  [c3c424ec] LatinSquares v0.3.0
  [1914dd2f] MacroTools v0.5.5
  [b8f27783] MathOptInterface v0.9.14
  [fdba3010] MathProgBase v0.7.8
  [739be429] MbedTLS v1.0.2
  [c8ffd9c3] MbedTLS_jll v2.16.8+0
  [d8a4904e] MutableArithmetics v0.2.10
  [77ba4419] NaNMath v0.3.4
  [656ef2d0] OpenBLAS32_jll v0.3.9+4
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.3.0
  [7da25872] Osi_jll v0.108.5+3
  [69de0a69] Parsers v1.0.10
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [3bb67fe8] TranscodingStreams v0.9.5
  [a5390f91] ZipFile v0.9.2
  [83775a58] Zlib_jll v1.2.11+16
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
No quick solution. Using integer programming.
No quick solution. Using integer programming.
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Jan  1 1970 

command line - Cbc_C_Interface -solve -quit (default strategy 1)
Continuous objective value is 0 - 0.00 seconds
Cgl0004I processed model has 72 rows, 72 columns (72 integer (72 of which binary)) and 432 elements
Cbc0012I Integer solution of 0 found by DiveCoefficient after 7 iterations and 0 nodes (0.02 seconds)
Cbc0031I 1 added rows had average density of 21
Cbc0013I At root node, 1 cuts changed objective from 0 to 0 in 2 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 4 row cuts average 19.8 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 19 row cuts average 3.9 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 34 row cuts average 15.9 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 7 (ZeroHalf) - 9 row cuts average 18.2 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0001I Search completed - best objective 0, took 7 iterations and 0 nodes (0.02 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 0 to 0
Probing was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Gomory was tried 2 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Knapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Clique was tried 2 times and created 19 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
FlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 2 times and created 34 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
ZeroHalf was tried 2 times and created 9 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)

Result - Optimal solution found

Objective value:                0.00000000
Enumerated nodes:               0
Total iterations:               7
Time (CPU seconds):             0.02
Time (Wallclock seconds):       0.03

Total time (CPU seconds):       0.02   (Wallclock seconds):       0.03

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Jan  1 1970 

command line - Cbc_C_Interface -solve -quit (default strategy 1)
Continuous objective value is 0 - 0.00 seconds
Cgl0004I processed model has 52 rows, 88 columns (88 integer (88 of which binary)) and 496 elements
Cbc0012I Integer solution of 0 found by DiveCoefficient after 5 iterations and 0 nodes (0.03 seconds)
Cbc0031I 1 added rows had average density of 33
Cbc0013I At root node, 1 cuts changed objective from 0 to 0 in 2 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 3 row cuts average 25.3 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 18 row cuts average 3.9 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 30 row cuts average 31.7 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 7 (ZeroHalf) - 31 row cuts average 31.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0001I Search completed - best objective 0, took 5 iterations and 0 nodes (0.03 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 0 to 0
Probing was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Gomory was tried 2 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Knapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Clique was tried 2 times and created 18 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
FlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 2 times and created 30 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
ZeroHalf was tried 2 times and created 31 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)

Result - Optimal solution found

Objective value:                0.00000000
Enumerated nodes:               0
Total iterations:               5
Time (CPU seconds):             0.03
Time (Wallclock seconds):       0.03

Total time (CPU seconds):       0.03   (Wallclock seconds):       0.03

    Testing LatinSquares tests passed 
