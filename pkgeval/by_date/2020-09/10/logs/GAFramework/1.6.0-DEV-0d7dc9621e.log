Julia Version 1.6.0-DEV.888
Commit 0d7dc9621e (2020-09-10 16:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_4q5QyF/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_4q5QyF/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21722997681920245
curgen: 20 fitness: 0.21723129008815073
curgen: 30 fitness: 0.21723129008815073
curgen: 40 fitness: 0.21723362326280984
curgen: 50 fitness: 0.21723362326280984
CoordinateCreature{Vector{Float64}}([0.22253758738306767], -0.21723362326280984) 0.22253758738306767 -0.21723362326280984
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2568344703068086
curgen: 100 fitness: 3.257553167861674
curgen: 150 fitness: 3.2580803440032042
curgen: 200 fitness: 3.2582182354134024
curgen: 250 fitness: 3.2583630467983067
curgen: 300 fitness: 3.2584013797719495
curgen: 350 fitness: 3.258414573133375
curgen: 400 fitness: 3.258435521880358
curgen: 450 fitness: 3.2584419018606936
curgen: 500 fitness: 3.2584571482513147
CoordinateCreature{Vector{Float64}}([-0.22272441125641212, -0.2225486995277298, 0.2224628833012659, -0.22252713043741404, 0.2225586897549382, -0.22244368292765182, -0.22257076412094165, -0.22303532843479545, 0.2224156206339055, 0.22263409616866803, 0.22229345828852842, -0.2225435472990707, -0.2233764620129161, 0.2225035980569008, -0.22262623880468307], -3.2584571482513147) [-0.22272441125641212, -0.2225486995277298, 0.2224628833012659, -0.22252713043741404, 0.2225586897549382, -0.22244368292765182, -0.22257076412094165, -0.22303532843479545, 0.2224156206339055, 0.22263409616866803, 0.22229345828852842, -0.2225435472990707, -0.2233764620129161, 0.2225035980569008, -0.22262623880468307] -3.2584571482513147
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0013300225944874455
curgen: 100 fitness: -0.0012187096300237954
curgen: 150 fitness: -0.0012187096300237954
curgen: 200 fitness: -0.0007995896586976414
curgen: 250 fitness: -0.0007995896586976414
curgen: 300 fitness: -0.0005017769370567748
curgen: 350 fitness: -0.0005017769370567748
curgen: 400 fitness: -0.0003438573937444289
curgen: 450 fitness: -0.0003438573937444289
curgen: 500 fitness: -0.0003438573937444289
CoordinateCreature{Vector{Float64}}([7.871823122578285e-5, 3.2478828865108096e-5, -1.9562035627067147e-5, -0.00019618305648489787, -0.0004996545173452294, 0.00035232576395988506, -0.0005312351867879689, -0.00011675545493645793, -0.0003811805387747963, 0.00046344922256395934, -9.597241528723813e-5, -0.00014276153466949023, 0.0003693099628599948, -0.0005627060098471763, 0.0004180510129277691], 0.0003438573937444289) [7.871823122578285e-5, 3.2478828865108096e-5, -1.9562035627067147e-5, -0.00019618305648489787, -0.0004996545173452294, 0.00035232576395988506, -0.0005312351867879689, -0.00011675545493645793, -0.0003811805387747963, 0.00046344922256395934, -9.597241528723813e-5, -0.00014276153466949023, 0.0003693099628599948, -0.0005627060098471763, 0.0004180510129277691] 0.0003438573937444289
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
