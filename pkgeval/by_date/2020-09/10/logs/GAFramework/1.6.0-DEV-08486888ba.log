Julia Version 1.6.0-DEV.878
Commit 08486888ba (2020-09-09 16:27 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_FaJ5H3/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_FaJ5H3/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723271553974072
curgen: 20 fitness: 0.217233157749078
curgen: 30 fitness: 0.217233157749078
curgen: 40 fitness: 0.217233157749078
curgen: 50 fitness: 0.217233157749078
CoordinateCreature{Vector{Float64}}([0.22244511323671795], -0.217233157749078) 0.22244511323671795 -0.217233157749078
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2578683332907237
curgen: 100 fitness: 3.2579407382063095
curgen: 150 fitness: 3.258213652363893
curgen: 200 fitness: 3.258284806102076
curgen: 250 fitness: 3.2582868342085765
curgen: 300 fitness: 3.2582868342085765
curgen: 350 fitness: 3.2583598284018658
curgen: 400 fitness: 3.2583879130041074
curgen: 450 fitness: 3.258400076186699
curgen: 500 fitness: 3.2584129999942713
CoordinateCreature{Vector{Float64}}([-0.22287263503924545, -0.22273783680593065, 0.22336861035069486, 0.2227955454003213, 0.22255776604273705, 0.22248213799754255, 0.22249553936922772, 0.22260423190331546, -0.22191197708748656, 0.22273085237810883, 0.22194638675630204, -0.22296656711504095, -0.2225839369204994, 0.22228140091424942, 0.22291206926018106], -3.2584129999942713) [-0.22287263503924545, -0.22273783680593065, 0.22336861035069486, 0.2227955454003213, 0.22255776604273705, 0.22248213799754255, 0.22249553936922772, 0.22260423190331546, -0.22191197708748656, 0.22273085237810883, 0.22194638675630204, -0.22296656711504095, -0.2225839369204994, 0.22228140091424942, 0.22291206926018106] -3.2584129999942713
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0022425533519481178
curgen: 100 fitness: -0.001995087185406419
curgen: 150 fitness: -0.0011754547710154384
curgen: 200 fitness: -0.0011754547710154384
curgen: 250 fitness: -0.0011754547710154384
curgen: 300 fitness: -0.0011721880400443752
curgen: 350 fitness: -0.0011721880400443752
curgen: 400 fitness: -0.0009308072396834177
curgen: 450 fitness: -0.0009308072396834177
curgen: 500 fitness: -0.0009270018657332457
CoordinateCreature{Vector{Float64}}([-0.00012919333273571972, 6.530800771579418e-5, 0.00021623562865546184, 0.0008380416736616103, -0.00038854445650293316, 7.250217573368759e-5, -0.0003995065540674721, 0.0003723355047506285, 0.001230000475744591, 0.0012945488059119717, 0.00030700529122305517, -0.00012160331863203706, 7.165685184412586e-5, 0.0003469034519843073, -0.0001575720561319688], 0.0009270018657332457) [-0.00012919333273571972, 6.530800771579418e-5, 0.00021623562865546184, 0.0008380416736616103, -0.00038854445650293316, 7.250217573368759e-5, -0.0003995065540674721, 0.0003723355047506285, 0.001230000475744591, 0.0012945488059119717, 0.00030700529122305517, -0.00012160331863203706, 7.165685184412586e-5, 0.0003469034519843073, -0.0001575720561319688] 0.0009270018657332457
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
