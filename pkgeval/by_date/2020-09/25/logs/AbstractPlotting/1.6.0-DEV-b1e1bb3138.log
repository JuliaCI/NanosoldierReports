Julia Version 1.6.0-DEV.1034
Commit b1e1bb3138 (2020-09-24 17:32 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed IteratorInterfaceExtensions ── v1.0.0
  Installed SignedDistanceFields ───────── v0.4.0
  Installed NaNMath ────────────────────── v0.3.4
  Installed Compat ─────────────────────── v3.17.0
  Installed StatsFuns ──────────────────── v0.9.5
  Installed OrderedCollections ─────────── v1.3.1
  Installed FreeType ───────────────────── v3.0.1
  Installed QuadGK ─────────────────────── v2.4.1
  Installed Zlib_jll ───────────────────── v1.2.11+16
  Installed AbstractFFTs ───────────────── v0.5.0
  Installed Rmath ──────────────────────── v0.6.1
  Installed StructArrays ───────────────── v0.4.4
  Installed ColorVectorSpace ───────────── v0.8.6
  Installed MosaicViews ────────────────── v0.2.3
  Installed SpecialFunctions ───────────── v0.10.3
  Installed Reexport ───────────────────── v0.2.0
  Installed FriBidi_jll ────────────────── v1.0.5+5
  Installed ColorBrewer ────────────────── v0.4.0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed Parsers ────────────────────── v1.0.10
  Installed PNGFiles ───────────────────── v0.3.1
  Installed AxisAlgorithms ─────────────── v1.0.0
  Installed FixedPointNumbers ──────────── v0.8.4
  Installed AbstractPlotting ───────────── v0.12.11
  Installed DataAPI ────────────────────── v1.3.0
  Installed Formatting ─────────────────── v0.4.1
  Installed libpng_jll ─────────────────── v1.6.37+5
  Installed Match ──────────────────────── v1.1.0
  Installed Contour ────────────────────── v0.5.5
  Installed FileIO ─────────────────────── v1.4.3
  Installed OffsetArrays ───────────────── v1.2.1
  Installed StaticArrays ───────────────── v0.12.4
  Installed x265_jll ───────────────────── v3.0.0+2
  Installed CEnum ──────────────────────── v0.4.1
  Installed Showoff ────────────────────── v0.3.2
  Installed IterTools ──────────────────── v1.3.0
  Installed PaddedViews ────────────────── v0.5.5
  Installed EarCut_jll ─────────────────── v2.1.5+0
  Installed Graphics ───────────────────── v1.0.2
  Installed IntelOpenMP_jll ────────────── v2018.0.3+0
  Installed Ogg_jll ────────────────────── v1.3.4+1
  Installed Requires ───────────────────── v1.0.3
  Installed GridLayoutBase ─────────────── v0.3.7
  Installed KernelDensity ──────────────── v0.6.0
  Installed Missings ───────────────────── v0.4.4
  Installed Opus_jll ───────────────────── v1.3.1+2
  Installed ColorTypes ─────────────────── v0.10.9
  Installed PDMats ─────────────────────── v0.10.1
  Installed Observables ────────────────── v0.3.1
  Installed Colors ─────────────────────── v0.12.4
  Installed PlotUtils ──────────────────── v1.0.7
  Installed JSON ───────────────────────── v0.21.1
  Installed x264_jll ───────────────────── v2020.7.14+1
  Installed LAME_jll ───────────────────── v3.100.0+2
  Installed OpenSSL_jll ────────────────── v1.1.1+5
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed GeometryBasics ─────────────── v0.3.1
  Installed DataStructures ─────────────── v0.18.6
  Installed FreeTypeAbstraction ────────── v0.8.1
  Installed Bzip2_jll ──────────────────── v1.0.6+4
  Installed Packing ────────────────────── v0.4.1
  Installed FFMPEG_jll ─────────────────── v4.3.1+2
  Installed libass_jll ─────────────────── v0.14.0+3
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed FFTW_jll ───────────────────── v3.3.9+5
  Installed TableTraits ────────────────── v1.0.0
  Installed Grisu ──────────────────────── v1.0.0
  Installed libvorbis_jll ──────────────── v1.3.6+5
  Installed DataValueInterfaces ────────── v1.0.0
  Installed FillArrays ─────────────────── v0.9.6
  Installed IntervalSets ───────────────── v0.5.1
  Installed Rmath_jll ──────────────────── v0.2.2+1
  Installed LibVPX_jll ─────────────────── v1.9.0+0
  Installed Animations ─────────────────── v0.4.1
  Installed MKL_jll ────────────────────── v2020.2.254+0
  Installed Tables ─────────────────────── v1.0.5
  Installed MappedArrays ───────────────── v0.2.2
  Installed FFMPEG ─────────────────────── v0.4.0
  Installed FFTW ───────────────────────── v1.2.4
  Installed IndirectArrays ─────────────── v0.5.1
  Installed EllipsisNotation ───────────── v0.4.0
  Installed DocStringExtensions ────────── v0.8.3
  Installed ImageCore ──────────────────── v0.8.16
  Installed Adapt ──────────────────────── v2.3.0
  Installed Ratios ─────────────────────── v0.4.0
  Installed StatsBase ──────────────────── v0.33.1
  Installed ImageIO ────────────────────── v0.3.0
  Installed Interpolations ─────────────── v0.12.10
  Installed UnicodeFun ─────────────────── v0.4.1
  Installed WoodburyMatrices ───────────── v0.5.2
  Installed libfdk_aac_jll ─────────────── v0.1.6+3
  Installed Distributions ──────────────── v0.23.12
  Installed FreeType2_jll ──────────────── v2.10.1+4
  Installed ColorSchemes ───────────────── v3.10.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [537997a7] + AbstractPlotting v0.12.11
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [537997a7] + AbstractPlotting v0.12.11
  [79e6a3ab] + Adapt v2.3.0
  [27a7e980] + Animations v0.4.1
  [13072b0f] + AxisAlgorithms v1.0.0
  [6e34b625] + Bzip2_jll v1.0.6+4
  [fa961155] + CEnum v0.4.1
  [a2cac450] + ColorBrewer v0.4.0
  [35d6a980] + ColorSchemes v3.10.0
  [3da002f7] + ColorTypes v0.10.9
  [c3611d14] + ColorVectorSpace v0.8.6
  [5ae59095] + Colors v0.12.4
  [34da2185] + Compat v3.17.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [d38c429a] + Contour v0.5.5
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.18.6
  [e2d170a0] + DataValueInterfaces v1.0.0
  [31c24e10] + Distributions v0.23.12
  [ffbed154] + DocStringExtensions v0.8.3
  [5ae413db] + EarCut_jll v2.1.5+0
  [da5c29d0] + EllipsisNotation v0.4.0
  [c87230d0] + FFMPEG v0.4.0
  [b22a6f82] + FFMPEG_jll v4.3.1+2
  [7a1cc6ca] + FFTW v1.2.4
  [f5851436] + FFTW_jll v3.3.9+5
  [5789e2e9] + FileIO v1.4.3
  [1a297f60] + FillArrays v0.9.6
  [53c48c17] + FixedPointNumbers v0.8.4
  [59287772] + Formatting v0.4.1
  [b38be410] + FreeType v3.0.1
  [d7e528f0] + FreeType2_jll v2.10.1+4
  [663a7486] + FreeTypeAbstraction v0.8.1
  [559328eb] + FriBidi_jll v1.0.5+5
  [5c1252a2] + GeometryBasics v0.3.1
  [a2bd30eb] + Graphics v1.0.2
  [3955a311] + GridLayoutBase v0.3.7
  [42e2da0e] + Grisu v1.0.0
  [a09fc81d] + ImageCore v0.8.16
  [82e4d734] + ImageIO v0.3.0
  [9b13fd28] + IndirectArrays v0.5.1
  [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+0
  [a98d9a8b] + Interpolations v0.12.10
  [8197267c] + IntervalSets v0.5.1
  [c8e1da08] + IterTools v1.3.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.1
  [5ab0869b] + KernelDensity v0.6.0
  [c1c5ebd0] + LAME_jll v3.100.0+2
  [dd192d2f] + LibVPX_jll v1.9.0+0
  [856f044c] + MKL_jll v2020.2.254+0
  [dbb5928d] + MappedArrays v0.2.2
  [7eb4fadd] + Match v1.1.0
  [e1d29d7a] + Missings v0.4.4
  [e94cdb99] + MosaicViews v0.2.3
  [77ba4419] + NaNMath v0.3.4
  [510215fc] + Observables v0.3.1
  [6fe1bfb0] + OffsetArrays v1.2.1
  [e7412a2a] + Ogg_jll v1.3.4+1
  [458c3c95] + OpenSSL_jll v1.1.1+5
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [91d4177d] + Opus_jll v1.3.1+2
  [bac558e1] + OrderedCollections v1.3.1
  [90014a1f] + PDMats v0.10.1
  [f57f5aa1] + PNGFiles v0.3.1
  [19eb6ba3] + Packing v0.4.1
  [5432bcbf] + PaddedViews v0.5.5
  [69de0a69] + Parsers v1.0.10
  [995b91a9] + PlotUtils v1.0.7
  [1fd47b50] + QuadGK v2.4.1
  [c84ed2f1] + Ratios v0.4.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.3
  [79098fc4] + Rmath v0.6.1
  [f50d1b31] + Rmath_jll v0.2.2+1
  [992d4aef] + Showoff v0.3.2
  [73760f76] + SignedDistanceFields v0.4.0
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [2913bbd2] + StatsBase v0.33.1
  [4c63d2b9] + StatsFuns v0.9.5
  [09ab397b] + StructArrays v0.4.4
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.5
  [1cfade01] + UnicodeFun v0.4.1
  [efce3f68] + WoodburyMatrices v0.5.2
  [83775a58] + Zlib_jll v1.2.11+16
  [0ac62f75] + libass_jll v0.14.0+3
  [f638f0a6] + libfdk_aac_jll v0.1.6+3
  [b53b4c65] + libpng_jll v1.6.37+5
  [f27f6e37] + libvorbis_jll v1.3.6+5
  [1270edf5] + x264_jll v2020.7.14+1
  [dfaa095f] + x265_jll v3.0.0+2
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building FFTW → `~/.julia/packages/FFTW/DMUbN/deps/build.log`
    Testing AbstractPlotting
Status `/tmp/jl_g9ax41/Project.toml`
  [537997a7] AbstractPlotting v0.12.11
  [27a7e980] Animations v0.4.1
  [a2cac450] ColorBrewer v0.4.0
  [35d6a980] ColorSchemes v3.10.0
  [3da002f7] ColorTypes v0.10.9
  [5ae59095] Colors v0.12.4
  [d38c429a] Contour v0.5.5
  [31c24e10] Distributions v0.23.12
  [ffbed154] DocStringExtensions v0.8.3
  [c87230d0] FFMPEG v0.4.0
  [5789e2e9] FileIO v1.4.3
  [53c48c17] FixedPointNumbers v0.8.4
  [59287772] Formatting v0.4.1
  [b38be410] FreeType v3.0.1
  [663a7486] FreeTypeAbstraction v0.8.1
  [5c1252a2] GeometryBasics v0.3.1
  [3955a311] GridLayoutBase v0.3.7
  [82e4d734] ImageIO v0.3.0
  [8197267c] IntervalSets v0.5.1
  [5ab0869b] KernelDensity v0.6.0
  [dbd62bd0] MakieGallery v0.2.17
  [7eb4fadd] Match v1.1.0
  [7269a6da] MeshIO v0.4.1
  [510215fc] Observables v0.3.1
  [19eb6ba3] Packing v0.4.1
  [995b91a9] PlotUtils v1.0.7
  [992d4aef] Showoff v0.3.2
  [73760f76] SignedDistanceFields v0.4.0
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.1
  [09ab397b] StructArrays v0.4.4
  [1cfade01] UnicodeFun v0.4.1
  [37e2e46d] LinearAlgebra
  [d6f4376e] Markdown
  [de0858da] Printf
  [9a3f8284] Random
  [9e88b42a] Serialization
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_g9ax41/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [537997a7] AbstractPlotting v0.12.11
  [79e6a3ab] Adapt v2.3.0
  [27a7e980] Animations v0.4.1
  [13072b0f] AxisAlgorithms v1.0.0
  [39de3d68] AxisArrays v0.4.3
  [b99e7846] BinaryProvider v0.5.10
  [6e34b625] Bzip2_jll v1.0.6+4
  [fa961155] CEnum v0.4.1
  [aafaddc9] CatIndices v0.2.1
  [a2cac450] ColorBrewer v0.4.0
  [35d6a980] ColorSchemes v3.10.0
  [3da002f7] ColorTypes v0.10.9
  [c3611d14] ColorVectorSpace v0.8.6
  [5ae59095] Colors v0.12.4
  [34da2185] Compat v3.17.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [ed09eef8] ComputationalResources v0.3.2
  [d38c429a] Contour v0.5.5
  [150eb455] CoordinateTransformations v0.6.0
  [dc8bdbbb] CustomUnitRanges v1.0.0
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.18.6
  [e2d170a0] DataValueInterfaces v1.0.0
  [31c24e10] Distributions v0.23.12
  [ffbed154] DocStringExtensions v0.8.3
  [e30172f5] Documenter v0.25.2
  [5ae413db] EarCut_jll v2.1.5+0
  [da5c29d0] EllipsisNotation v0.4.0
  [c87230d0] FFMPEG v0.4.0
  [b22a6f82] FFMPEG_jll v4.3.1+2
  [4f61f5a4] FFTViews v0.3.1
  [7a1cc6ca] FFTW v1.2.4
  [f5851436] FFTW_jll v3.3.9+5
  [5789e2e9] FileIO v1.4.3
  [1a297f60] FillArrays v0.9.6
  [53c48c17] FixedPointNumbers v0.8.4
  [59287772] Formatting v0.4.1
  [b38be410] FreeType v3.0.1
  [d7e528f0] FreeType2_jll v2.10.1+4
  [663a7486] FreeTypeAbstraction v0.8.1
  [559328eb] FriBidi_jll v1.0.5+5
  [5c1252a2] GeometryBasics v0.3.1
  [a2bd30eb] Graphics v1.0.2
  [3955a311] GridLayoutBase v0.3.7
  [42e2da0e] Grisu v1.0.0
  [eafb193a] Highlights v0.4.5
  [bbac6d45] IdentityRanges v0.3.1
  [2803e5a7] ImageAxes v0.6.5
  [a09fc81d] ImageCore v0.8.16
  [6a3955dd] ImageFiltering v0.6.15
  [82e4d734] ImageIO v0.3.0
  [bc367c6b] ImageMetadata v0.9.2
  [02fcd773] ImageTransformations v0.8.6
  [9b13fd28] IndirectArrays v0.5.1
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [a98d9a8b] Interpolations v0.12.10
  [8197267c] IntervalSets v0.5.1
  [c8e1da08] IterTools v1.3.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.1
  [5ab0869b] KernelDensity v0.6.0
  [c1c5ebd0] LAME_jll v3.100.0+2
  [dd192d2f] LibVPX_jll v1.9.0+0
  [856f044c] MKL_jll v2020.2.254+0
  [1914dd2f] MacroTools v0.5.5
  [dbd62bd0] MakieGallery v0.2.17
  [dbb5928d] MappedArrays v0.2.2
  [7eb4fadd] Match v1.1.0
  [7269a6da] MeshIO v0.4.1
  [e1d29d7a] Missings v0.4.4
  [e94cdb99] MosaicViews v0.2.3
  [77ba4419] NaNMath v0.3.4
  [510215fc] Observables v0.3.1
  [6fe1bfb0] OffsetArrays v1.2.1
  [e7412a2a] Ogg_jll v1.3.4+1
  [458c3c95] OpenSSL_jll v1.1.1+5
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [91d4177d] Opus_jll v1.3.1+2
  [bac558e1] OrderedCollections v1.3.1
  [90014a1f] PDMats v0.10.1
  [f57f5aa1] PNGFiles v0.3.1
  [19eb6ba3] Packing v0.4.1
  [5432bcbf] PaddedViews v0.5.5
  [69de0a69] Parsers v1.0.10
  [995b91a9] PlotUtils v1.0.7
  [1fd47b50] QuadGK v2.4.1
  [b3c3ace0] RangeArrays v0.3.2
  [c84ed2f1] Ratios v0.4.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.3
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+1
  [6038ab10] Rotations v1.0.1
  [992d4aef] Showoff v0.3.2
  [73760f76] SignedDistanceFields v0.4.0
  [699a6c99] SimpleTraits v0.9.3
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [860ef19b] StableRNGs v0.1.2
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.1
  [4c63d2b9] StatsFuns v0.9.5
  [09ab397b] StructArrays v0.4.4
  [a4af3ec5] SyntaxTree v1.0.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.5
  [06e1c1a7] TiledIteration v0.2.4
  [1cfade01] UnicodeFun v0.4.1
  [efce3f68] WoodburyMatrices v0.5.2
  [a5390f91] ZipFile v0.9.2
  [83775a58] Zlib_jll v1.2.11+16
  [0ac62f75] libass_jll v0.14.0+3
  [f638f0a6] libfdk_aac_jll v0.1.6+3
  [b53b4c65] libpng_jll v1.6.37+5
  [f27f6e37] libvorbis_jll v1.3.6+5
  [1270edf5] x264_jll v2020.7.14+1
  [dfaa095f] x265_jll v3.0.0+2
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
[ Info: Makie/AbstractPlotting is caching fonts, this may take a while. Needed only on first run!
Test Summary:            | Pass  Total
Layoutables constructors |    1      1
Test Summary:                  | Pass  Total
Minimal AbstractPlotting tests |  210    210
[ Info: Starting minimal software tests
Running align
(index 1)
Running fillrange
(index 2)
Running font
(index 3)
Running glowcolor, glowwidth
(index 4)
Running isorange, isovalue
(index 5)
Running levels
(index 6)
Running position
(index 7)
Running rotation
(index 8)
Running shading
(index 9)
Running visible
(index 10)
Running Axis theming
(index 11)
Running Legend
(index 12)
Running Test heatmap + image overlap
(index 13)
Running poly and colormap
(index 14)
Running quiver
(index 15)
Running Arrows on hemisphere
(index 16)
Running image
(index 17)
Running FEM polygon 2D
(index 18)
Running FEM mesh 2D
(index 19)
Running colored triangle
(index 20)
Running colored triangle
(index 21)
Running Subscenes
(index 22)
Running scale_plot
(index 23)
Running Polygons
(index 24)
Running Contour Function
(index 25)
Running Hbox
(index 26)
Running Customize Axes
(index 27)
Running contour
(index 28)
Running Text Annotation
(index 29)
Running Text rotation
(index 30)
Running Standard deviation band
(index 31)
Running Streamplot animation
(index 32)
┌ Warning: Example Streamplot animation failed
│   exception =
│    LoadError: MethodError: no method matching update_limits!(::Scene, ::AbstractPlotting.Automatic, ::Tuple{Int64, Int64})
│    Closest candidates are:
│      update_limits!(::Scene, ::AbstractPlotting.Automatic) at /home/pkgeval/.julia/packages/AbstractPlotting/lGPof/src/scenes.jl:514
│      update_limits!(::Scene, ::AbstractPlotting.Automatic, !Matched::Vec{3, Float32}) at /home/pkgeval/.julia/packages/AbstractPlotting/lGPof/src/scenes.jl:514
│      update_limits!(::Scene) at /home/pkgeval/.julia/packages/AbstractPlotting/lGPof/src/scenes.jl:512
│      ...
│    Stacktrace:
│      [1] update_limits!(scene::Scene, limits::AbstractPlotting.Automatic)
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/scenes.jl:516
│      [2] update_limits!(scene::Scene)
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/scenes.jl:512
│      [3] (::AbstractPlotting.var"#86#87"{Scene})(update::Bool, px_area::GeometryBasics.HyperRectangle{2, Int64})
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/scenes.jl:92
│      [4] (::Observables.OnUpdate{AbstractPlotting.var"#86#87"{Scene}, Tuple{Observable{Bool}, Observable{GeometryBasics.HyperRectangle{2, Int64}}}})(#unused#::Bool)
│        @ Observables ~/.julia/packages/Observables/0wrF6/src/Observables.jl:218
│      [5] setindex!(observable::Observable{Bool}, val::Bool; notify::Observables.var"#6#8")
│        @ Observables ~/.julia/packages/Observables/0wrF6/src/Observables.jl:130
│      [6] setindex!
│        @ ~/.julia/packages/Observables/0wrF6/src/Observables.jl:126 [inlined]
│      [7] update!(p::Scene)
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/scenes.jl:261
│      [8] foreach
│        @ ./abstractarray.jl:2080 [inlined]
│      [9] update!(p::Scene)
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/scenes.jl:262
│     [10] VideoStream(scene::Scene; framerate::Int64)
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/display.jl:375
│     [11] record(func::MakieGallery.##TempModule#284.var"#1#2", scene::Scene, path::String, iter::LinRange{Float64}; framerate::Int64, compression::Int64, sleep::Bool)
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/display.jl:565
│     [12] record(func::Function, scene::Scene, path::String, iter::LinRange{Float64})
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/display.jl:565
│     [13] top-level scope
│        @ streamplot_animation:10
│     [14] eval
│        @ ./boot.jl:360 [inlined]
│     [15] include_string(mapexpr::typeof(identity), mod::Module, code::String, filename::String)
│        @ Base ./loading.jl:1026
│     [16] include_string
│        @ ./loading.jl:1036 [inlined]
│     [17] eval_example(entry::MakieGallery.CellEntry; kw_args::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ MakieGallery ~/.julia/packages/MakieGallery/V0mvg/src/database.jl:583
│     [18] eval_example(entry::MakieGallery.CellEntry)
│        @ MakieGallery ~/.julia/packages/MakieGallery/V0mvg/src/database.jl:564
│     [19] macro expansion
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/no_backend_tests.jl:22 [inlined]
│     [20] macro expansion
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1188 [inlined]
│     [21] macro expansion
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/no_backend_tests.jl:15 [inlined]
│     [22] macro expansion
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
│     [23] top-level scope
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/no_backend_tests.jl:15
│     [24] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [25] top-level scope
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/runtests.jl:53
│     [26] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [27] top-level scope
│        @ none:6
│     [28] eval(m::Module, e::Any)
│        @ Core ./boot.jl:360
│     [29] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [30] _start()
│        @ Base ./client.jl:485
│    in expression starting at streamplot_animation:10
└ @ MakieGallery ~/.julia/packages/MakieGallery/V0mvg/src/database.jl:585
with source:
    
    
        v(x::Point2{T}, t) where T = Point2{T}(one(T) * x[2] * t, 4 * x[1])
        sf = Node(Base.Fix2(v, 0e0))
        title_str = Node("t = 0.00")
        sp = streamplot(sf, -2..2, -2..2;
                        linewidth = 2, padding = (0, 0),
                        arrow_size = 0.09, colormap =:magma)
        sc = title(sp, title_str)
        record(sc, "streamplot_animation.mp4", LinRange(0, 20, 5)) do i
            sf[] = Base.Fix2(v, i)
            title_str[] = "t = $(round(i; sigdigits = 2))"
        end
        
    
Running Line changing colour
(index 33)
┌ Warning: Example Line changing colour failed
│   exception =
│    LoadError: MethodError: no method matching backend_display(::Missing, ::Scene)
│    Stacktrace:
│      [1] VideoStream(scene::Scene; framerate::Int64)
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/display.jl:376
│      [2] record(func::MakieGallery.##TempModule#286.var"#1#2", scene::Scene, path::String, iter::UnitRange{Int64}; framerate::Int64, compression::Int64, sleep::Bool)
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/display.jl:565
│      [3] top-level scope
│        @ line_changing_colour:5
│      [4] eval
│        @ ./boot.jl:360 [inlined]
│      [5] include_string(mapexpr::typeof(identity), mod::Module, code::String, filename::String)
│        @ Base ./loading.jl:1026
│      [6] include_string
│        @ ./loading.jl:1036 [inlined]
│      [7] eval_example(entry::MakieGallery.CellEntry; kw_args::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ MakieGallery ~/.julia/packages/MakieGallery/V0mvg/src/database.jl:583
│      [8] eval_example(entry::MakieGallery.CellEntry)
│        @ MakieGallery ~/.julia/packages/MakieGallery/V0mvg/src/database.jl:564
│      [9] macro expansion
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/no_backend_tests.jl:22 [inlined]
│     [10] macro expansion
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1188 [inlined]
│     [11] macro expansion
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/no_backend_tests.jl:15 [inlined]
│     [12] macro expansion
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
│     [13] top-level scope
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/no_backend_tests.jl:15
│     [14] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [15] top-level scope
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/runtests.jl:53
│     [16] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [17] top-level scope
│        @ none:6
│     [18] eval(m::Module, e::Any)
│        @ Core ./boot.jl:360
│     [19] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [20] _start()
│        @ Base ./client.jl:485
│    in expression starting at line_changing_colour:5
└ @ MakieGallery ~/.julia/packages/MakieGallery/V0mvg/src/database.jl:585
with source:
    
    
        scene = lines(RNG.rand(10); linewidth=10)
        
        record(scene, "line_changing_colour.mp4", 1:255; framerate = 60) do i
               scene.plots[2][:color] = RGBf0(i/255, (255 - i)/255, 0) # animate scene
        end
        
    
Running streamplot
(index 34)
Running Transforming lines
(index 35)
┌ Warning: Example Transforming lines failed
│   exception =
│    LoadError: MethodError: no method matching backend_show(::Missing, ::IOContext{IOStream}, ::MIME{Symbol("image/png")}, ::Scene)
│    Closest candidates are:
│      backend_show(::Any, ::IO, !Matched::MIME{Symbol("text/plain")}, ::Scene) at /home/pkgeval/.julia/packages/AbstractPlotting/lGPof/src/display.jl:118
│    Stacktrace:
│      [1] show(io::IOContext{IOStream}, m::MIME{Symbol("image/png")}, scene::Scene)
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/display.jl:94
│      [2] (::AbstractPlotting.var"#839#840"{Scene, Base.Iterators.Pairs{Symbol, Real, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:full_fidelity, :pt_per_unit, :px_per_unit), Tuple{Bool, Float64, Float64}}}, DataType})(s::IOStream)
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/display.jl:276
│      [3] open(::AbstractPlotting.var"#839#840"{Scene, Base.Iterators.Pairs{Symbol, Real, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:full_fidelity, :pt_per_unit, :px_per_unit), Tuple{Bool, Float64, Float64}}}, DataType}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Base ./io.jl:330
│      [4] open(::Function, ::String, ::String)
│        @ Base ./io.jl:328
│      [5] save(f::File{DataFormat{:PNG}}, scene::Scene; resolution::Tuple{Int64, Int64}, pt_per_unit::Float64, px_per_unit::Float64)
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/display.jl:275
│      [6] save(f::File{DataFormat{:PNG}}, scene::Scene)
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/display.jl:260
│      [7] save(file::String, args::Scene; options::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ FileIO ~/.julia/packages/FileIO/wN5rD/src/loadsave.jl:136
│      [8] save
│        @ ~/.julia/packages/FileIO/wN5rD/src/loadsave.jl:136 [inlined]
│      [9] step!(s::Stepper)
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/display.jl:212
│     [10] top-level scope
│        @ transforming_lines:21
│     [11] eval
│        @ ./boot.jl:360 [inlined]
│     [12] include_string(mapexpr::typeof(identity), mod::Module, code::String, filename::String)
│        @ Base ./loading.jl:1026
│     [13] include_string
│        @ ./loading.jl:1036 [inlined]
│     [14] eval_example(entry::MakieGallery.CellEntry; kw_args::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ MakieGallery ~/.julia/packages/MakieGallery/V0mvg/src/database.jl:583
│     [15] eval_example(entry::MakieGallery.CellEntry)
│        @ MakieGallery ~/.julia/packages/MakieGallery/V0mvg/src/database.jl:564
│     [16] macro expansion
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/no_backend_tests.jl:22 [inlined]
│     [17] macro expansion
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1188 [inlined]
│     [18] macro expansion
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/no_backend_tests.jl:15 [inlined]
│     [19] macro expansion
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
│     [20] top-level scope
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/no_backend_tests.jl:15
│     [21] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [22] top-level scope
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/runtests.jl:53
│     [23] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [24] top-level scope
│        @ none:6
│     [25] eval(m::Module, e::Any)
│        @ Core ./boot.jl:360
│     [26] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [27] _start()
│        @ Base ./client.jl:485
│    in expression starting at transforming_lines:21
└ @ MakieGallery ~/.julia/packages/MakieGallery/V0mvg/src/database.jl:585
with source:
    
    
        N = 7 # number of colours in default palette
        sc = Scene()
        st = Stepper(sc, "transforming_lines")
        
        xs = 0:9        # data
        ys = zeros(10)
        
        for i in 1:N    # plot lines
            lines!(sc,
                xs, ys;
                color = AbstractPlotting.default_palettes.color[][i],
                limits = FRect((0, 0), (10, 10)),
                linewidth = 5
            ) # plot lines with colors
        end
        
        center!(sc)
        
        step!(st)
        
        for (i, rot) in enumerate(LinRange(0, π/2, N))
            rotate!(sc.plots[i+1], rot)
            arc!(sc,
                Point2f0(0),
                (8 - i),
                pi/2,
                (pi/2-rot);
                color = sc.plots[i+1].color,
                linewidth = 5,
                linestyle = :dash
            )
        end
        
        step!(st)
        
    
Running Errorbars x y low high
(index 36)
Running Errorbars xy low high
(index 37)
Running Errorbars xy error
(index 38)
Running Simple pie chart
(index 39)
Running Hollow pie chart
(index 40)
Running Open pie chart
(index 41)
Running Image on Geometry (Moon)
(index 42)
Running Image on Geometry (Earth)
(index 43)
Running Orthographic Camera
(index 44)
Running Volume Function
(index 45)
Running Textured Mesh
(index 46)
Running Load Mesh
(index 47)
Running Colored Mesh
(index 48)
Running Wireframe of a Mesh
(index 49)
Running Wireframe of Sphere
(index 50)
Running Wireframe of a Surface
(index 51)
Running Surface
(index 52)
Running Surface with image
(index 53)
Running Line Function
(index 54)
Running Meshscatter Function
(index 55)
Running scatter
(index 56)
Running Marker sizes
(index 57)
Running 3D Contour with 2D contour slices
(index 58)
Running Contour3d
(index 59)
Running Arrows 3D
(index 60)
Running Image on Surface Sphere
(index 61)
Running Arrows on Sphere
(index 62)
Running surface + contour3d
(index 63)
Running FEM mesh 3D
(index 64)
Running Axis + Surface
(index 65)
Running Fluctuation 3D
(index 66)
Running Connected Sphere
(index 67)
Running image scatter
(index 68)
Running Simple meshscatter
(index 69)
Running Normals of a Cat
(index 70)
Running Sphere Mesh
(index 71)
Running Stars
(index 72)
Running Unicode Marker
(index 73)
Running Merged color Mesh
(index 74)
Running Surface + wireframe + contour
(index 75)
Running Streamplot 3D
(index 76)
Running Volume on black background
(index 77)
Running Electrostatic repulsion
(index 78)
┌ Warning: Example Electrostatic repulsion failed
│   exception =
│    LoadError: MethodError: no method matching backend_display(::Missing, ::Scene)
│    Stacktrace:
│      [1] VideoStream(scene::Scene; framerate::Int64)
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/display.jl:376
│      [2] record(func::MakieGallery.##TempModule#335.var"#1#2", scene::Scene, path::String, iter::UnitRange{Int64}; framerate::Int64, compression::Int64, sleep::Bool)
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/display.jl:565
│      [3] record(func::Function, scene::Scene, path::String, iter::UnitRange{Int64})
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/display.jl:565
│      [4] top-level scope
│        @ electrostatic_repulsion:47
│      [5] eval
│        @ ./boot.jl:360 [inlined]
│      [6] include_string(mapexpr::typeof(identity), mod::Module, code::String, filename::String)
│        @ Base ./loading.jl:1026
│      [7] include_string
│        @ ./loading.jl:1036 [inlined]
│      [8] eval_example(entry::MakieGallery.CellEntry; kw_args::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ MakieGallery ~/.julia/packages/MakieGallery/V0mvg/src/database.jl:583
│      [9] eval_example(entry::MakieGallery.CellEntry)
│        @ MakieGallery ~/.julia/packages/MakieGallery/V0mvg/src/database.jl:564
│     [10] macro expansion
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/no_backend_tests.jl:22 [inlined]
│     [11] macro expansion
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1188 [inlined]
│     [12] macro expansion
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/no_backend_tests.jl:15 [inlined]
│     [13] macro expansion
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
│     [14] top-level scope
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/no_backend_tests.jl:15
│     [15] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [16] top-level scope
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/runtests.jl:53
│     [17] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [18] top-level scope
│        @ none:6
│     [19] eval(m::Module, e::Any)
│        @ Core ./boot.jl:360
│     [20] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [21] _start()
│        @ Base ./client.jl:485
│    in expression starting at electrostatic_repulsion:47
└ @ MakieGallery ~/.julia/packages/MakieGallery/V0mvg/src/database.jl:585
with source:
    
    using LinearAlgebra
    
        
        clip11(x) = max(-1.0, min(1.0, x))
        
        function repel(particles_node, N)
            particles = particles_node[]
            @inbounds for i in 1:N
                ftot = Vec3f0(0)
                p1 = particles[i]
                for j in 1:N
                    if i != j
                        p2 = particles[j]
                        Δσ = acos(clip11(dot(p1, p2))) # great circle distance
                        ftot += (p1 - p2)/max(1e-3, Δσ^2)
                    end
                end
                particles[i] = normalize(p1 + 0.001 * ftot)
            end
            particles_node[] = particles
        end
        
        function addparticle!(particles, colors, nparticles)
            nparticles[] = nparticles[] + 1
            particles[][nparticles[]] = normalize(RNG.randn(Point3f0))
            colors[][nparticles[]] = to_color(:green)
            particles[] = particles[]
            colors[] = colors[]
        end
        
        s = Scene(show_axis = false)
        mesh!(s, Sphere(Point3f0(0), 1f0), color = :gray)
        
        max_particles = 5000
        # Sadly, you currently can't resize 3D mesh particles, so we need to
        # implement resize on our own...
        particles = Node(fill(Point3f0(NaN), max_particles))
        colors = Node(fill(RGBAf0(0, 0, 0, 0), max_particles))
        meshscatter!(s, particles, color = colors, markersize = 0.05)
        nparticles = Node(0)
        for i=1:10
            addparticle!(particles, colors, nparticles)
        end
        update_cam!(s, FRect3D(Vec3f0(0), Vec3f0(1)))
        s.center = false # don't reset the camera by display
        record(s, "electrostatic_repulsion.mp4", 1:3) do iter
            isodd(iter) && addparticle!(particles, colors, nparticles)
            repel(particles, nparticles[])
        end
        
    
Running Layouting
(index 79)
Running Comparing contours, image, surfaces and heatmaps
(index 80)
Running Type recipe for molecule simulation
(index 81)
┌ Warning: Example Type recipe for molecule simulation failed
│   exception =
│    LoadError: MethodError: no method matching backend_display(::Missing, ::Scene)
│    Stacktrace:
│      [1] VideoStream(scene::Scene; framerate::Int64)
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/display.jl:376
│      [2] record(func::MakieGallery.##TempModule#339.var"#13#14", scene::Scene, path::String, iter::UnitRange{Int64}; framerate::Int64, compression::Int64, sleep::Bool)
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/display.jl:565
│      [3] record(func::Function, scene::Scene, path::String, iter::UnitRange{Int64})
│        @ AbstractPlotting ~/.julia/packages/AbstractPlotting/lGPof/src/display.jl:565
│      [4] top-level scope
│        @ type_recipe_for_molecule_simulation:60
│      [5] eval
│        @ ./boot.jl:360 [inlined]
│      [6] include_string(mapexpr::typeof(identity), mod::Module, code::String, filename::String)
│        @ Base ./loading.jl:1026
│      [7] include_string
│        @ ./loading.jl:1036 [inlined]
│      [8] eval_example(entry::MakieGallery.CellEntry; kw_args::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ MakieGallery ~/.julia/packages/MakieGallery/V0mvg/src/database.jl:583
│      [9] eval_example(entry::MakieGallery.CellEntry)
│        @ MakieGallery ~/.julia/packages/MakieGallery/V0mvg/src/database.jl:564
│     [10] macro expansion
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/no_backend_tests.jl:22 [inlined]
│     [11] macro expansion
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1188 [inlined]
│     [12] macro expansion
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/no_backend_tests.jl:15 [inlined]
│     [13] macro expansion
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113 [inlined]
│     [14] top-level scope
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/no_backend_tests.jl:15
│     [15] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [16] top-level scope
│        @ ~/.julia/packages/AbstractPlotting/lGPof/test/runtests.jl:53
│     [17] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [18] top-level scope
│        @ none:6
│     [19] eval(m::Module, e::Any)
│        @ Core ./boot.jl:360
│     [20] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [21] _start()
│        @ Base ./client.jl:485
│    in expression starting at type_recipe_for_molecule_simulation:60
└ @ MakieGallery ~/.julia/packages/MakieGallery/V0mvg/src/database.jl:585
with source:
    
    import AbstractPlotting: Plot, default_theme, plot!, to_value
    
        
        struct Simulation
            grid::Vector{Point3f0}
        end
        # Probably worth having a macro for this!
        function default_theme(scene::SceneLike, ::Type{<: Plot(Simulation)})
            Theme(
                advance = 0,
                molecule_sizes = [0.08, 0.04, 0.04],
                molecule_colors = [:maroon, :deepskyblue2, :deepskyblue2]
            )
        end
        
        # The recipe! - will get called for plot(!)(x::SimulationResult)
        function AbstractPlotting.plot!(p::Plot(Simulation))
            sim = to_value(p[1]) # first argument is the SimulationResult
            # when advance changes, get new positions from the simulation
            mpos = lift(p[:advance]) do i
                sim.grid .+ RNG.rand(Point3f0, length(sim.grid)) .* 0.01f0
            end
            # size shouldn't change, so we might as well get the value instead of signal
            pos = to_value(mpos)
            N = length(pos)
            sizes = lift(p[:molecule_sizes]) do s
                repeat(s, outer = N ÷ 3)
            end
            sizes = lift(p[:molecule_sizes]) do s
                repeat(s, outer = N ÷ 3)
            end
            colors = lift(p[:molecule_colors]) do c
                repeat(c, outer = N ÷ 3)
            end
            scene = meshscatter!(p, mpos, markersize = sizes, color = colors)
            indices = Int[]
            for i in 1:3:N
                push!(indices, i, i + 1, i, i + 2)
            end
            meshplot = p.plots[end] # meshplot is the last plot we added to p
            # meshplot[1] -> the positions (first argument) converted to points, so
            # we don't do the conversion 2 times for linesegments!
            linesegments!(p, lift(x-> view(x, indices), meshplot[1]))
        end
        
        # To write out a video of the whole simulation
        n = 5
        r = range(-1, stop = 1, length = n)
        grid = Point3f0.(r, reshape(r, (1, n, 1)), reshape(r, (1, 1, n)))
        molecules = map(1:(n^3) * 3) do i
            i3 = ((i - 1) ÷ 3) + 1
            xy = 0.1; z = 0.08
            i % 3 == 1 && return grid[i3]
            i % 3 == 2 && return grid[i3] + Point3f0(xy, xy, z)
            i % 3 == 0 && return grid[i3] + Point3f0(-xy, xy, z)
        end
        result = Simulation(molecules)
        scene = plot(result)
        record(scene, "type_recipe_for_molecule_simulation.mp4", 1:3) do i
            scene[end][:advance] = i
        end
        
    
Running Test
(index 82)
Running Test
(index 83)
Running Test
(index 84)
Running Test
(index 85)
Running Test
(index 86)
Running Test
(index 87)
Running Test
(index 88)
Running Test
(index 89)
Running Test
(index 90)
Running Test
(index 91)
Running Test
(index 92)
Running Test
(index 93)
Running Test
(index 94)
Running Test
(index 95)
Running Test
(index 96)
Running Test
(index 97)
Running Test
(index 98)
Running Test
(index 99)
Running Test
(index 100)
Running Test
(index 101)
Running Test
(index 102)
Running Test
(index 103)
Running Test
(index 104)
Running Test
(index 105)
Running Test
(index 106)
Running Test
(index 107)
Running Test
(index 108)
Running Test
(index 109)
Running Test
(index 110)
Running Test
(index 111)
Running Test
(index 112)
Running Test
(index 113)
Running Test
(index 114)
Running Test
(index 115)
Running Test
(index 116)
Running Test
(index 117)
Running Test
(index 118)
Running Test
(index 119)
Running Test
(index 120)
Test Summary:       | Pass  Total
Gallery short tests |  120    120
Test Summary: | Pass  Total
histogram     |   15     15
Test Summary: | Pass  Total
density       |   10     10
Test Summary: | Pass  Total
distribution  |   66     66
Test Summary: | Pass  Total
qqplot        |   15     15
Test Summary: | Pass  Total
crossbar      |   11     11
Test Summary: | Pass  Total
boxplot       |   26     26
Test Summary: | Pass  Total
violin        |   12     12
    Testing AbstractPlotting tests passed 
