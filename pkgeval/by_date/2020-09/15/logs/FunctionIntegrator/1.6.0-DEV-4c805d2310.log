Julia Version 1.6.0-DEV.913
Commit 4c805d2310 (2020-09-14 14:07 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed FastGaussQuadrature ────────── v0.4.2
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.2
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_OmAJWK/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_OmAJWK/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.2
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  0.836220 seconds (1.37 M allocations: 72.885 MiB, 1.55% gc time)
Running: chebyshev_quadrature with k=1
  1.733913 seconds (2.16 M allocations: 124.122 MiB, 5.03% gc time)
Running: chebyshev_quadrature with k=2
  0.289635 seconds (410.94 k allocations: 23.597 MiB, 7.07% gc time)
Running: chebyshev_quadrature with k=3
  0.304820 seconds (524.65 k allocations: 28.745 MiB)
Running: chebyshev_quadrature with k=4
  0.434913 seconds (469.05 k allocations: 25.395 MiB, 33.40% gc time)
Running: jacobi_quadrature with α=β=1
 41.592396 seconds (37.26 M allocations: 3.042 GiB, 8.10% gc time)
Running: laguerre_quadrature with k=1
  2.878534 seconds (3.19 M allocations: 177.669 MiB, 2.26% gc time)
Running: legendre_quadrature
  0.224054 seconds (207.12 k allocations: 11.877 MiB)
Running: lobatto_quadrature
  0.345591 seconds (332.65 k allocations: 20.021 MiB)
Running: radau_quadrature
  0.318146 seconds (315.41 k allocations: 19.040 MiB, 11.10% gc time)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 79.372489 seconds (100.02 M allocations: 1.491 GiB, 0.33% gc time)
Running: rectangle_rule_midpoint.
  0.142903 seconds (172.85 k allocations: 3.842 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 80.063393 seconds (100.02 M allocations: 1.491 GiB, 0.31% gc time)
Running: rombergs_method
  0.502653 seconds (726.26 k allocations: 41.809 MiB)
Running: simpsons_rule
  0.075206 seconds (46.21 k allocations: 2.061 MiB, 46.83% gc time)
Running: simpsons38_rule
  0.106966 seconds (109.88 k allocations: 5.808 MiB)
Running: trapezoidal_rule
  0.284030 seconds (1.51 M allocations: 25.708 MiB)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.087084 seconds (31.51 k allocations: 1.885 MiB)
Running: chebyshev_quadrature with k=1
  0.449903 seconds (274.70 k allocations: 14.265 MiB)
Running: chebyshev_quadrature with k=2
  0.168394 seconds (93.97 k allocations: 2.681 MiB)
Running: chebyshev_quadrature with k=3
  0.178287 seconds (82.22 k allocations: 2.482 MiB)
Running: chebyshev_quadrature with k=4
  0.153155 seconds (64.83 k allocations: 2.128 MiB)
Running: jacobi_quadrature with α=β=1
  2.327746 seconds (500.61 k allocations: 161.635 MiB, 8.10% gc time)
Running: legendre_quadrature
  0.153799 seconds (41.80 k allocations: 2.409 MiB)
Running: lobatto_quadrature
  0.020720 seconds (16.16 k allocations: 1.003 MiB)
Running: radau_quadrature
  0.023650 seconds (16.14 k allocations: 1.003 MiB)
Running: rectangle_rule_left
 29.109110 seconds (471.41 M allocations: 7.025 GiB, 3.47% gc time)
Running: rectangle_rule_midpoint
  0.000027 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 28.769909 seconds (476.96 M allocations: 7.107 GiB, 3.45% gc time)
Running: rombergs_method
  0.329521 seconds (328.38 k allocations: 18.608 MiB)
Running: simpsons_rule
  0.000051 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.060029 seconds (19.26 k allocations: 1.160 MiB)
Running: trapezoidal_rule
  0.053085 seconds (17.74 k allocations: 1.067 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.027892 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.096759 seconds (2.40 k allocations: 113.328 KiB)
Running: chebyshev_quadrature with k=2
  0.100335 seconds (2.65 k allocations: 121.344 KiB)
Running: chebyshev_quadrature with k=3
  0.114763 seconds (3.08 k allocations: 133.547 KiB)
Running: chebyshev_quadrature with k=4
  0.112506 seconds (3.08 k allocations: 133.609 KiB)
Running: jacobi_quadrature with α=β=1
  0.292353 seconds (363.39 k allocations: 18.931 MiB)
Running: legendre_quadrature
  0.067687 seconds (1.24 k allocations: 63.531 KiB)
Running: lobatto_quadrature
  0.000104 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000036 seconds (71 allocations: 3.078 KiB)
Running: rectangle_rule_left
  0.000506 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000356 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000620 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.069456 seconds (1.01 k allocations: 54.094 KiB)
Running: simpsons_rule
  0.000038 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.024222 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.021742 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.057263 seconds (73.32 k allocations: 4.254 MiB)
Running: chebyshev_quadrature with k=1
  0.170927 seconds (231.21 k allocations: 12.965 MiB)
Running: chebyshev_quadrature with k=2
  0.243987 seconds (284.06 k allocations: 15.941 MiB, 11.46% gc time)
Running: chebyshev_quadrature with k=3
  0.190037 seconds (263.44 k allocations: 14.323 MiB)
Running: chebyshev_quadrature with k=4
  0.193758 seconds (263.47 k allocations: 14.250 MiB)
Running: jacobi_quadrature with α=β=1
  3.139106 seconds (447.42 k allocations: 163.150 MiB, 5.72% gc time)
Running: legendre_quadrature
  0.145514 seconds (186.06 k allocations: 10.730 MiB)
Running: lobatto_quadrature
  0.197174 seconds (196.99 k allocations: 11.408 MiB, 9.85% gc time)
Running: radau_quadrature
  0.172786 seconds (196.99 k allocations: 11.408 MiB)
Running: rectangle_rule_left
  1.097426 seconds (19.09 k allocations: 1.158 MiB)
Running: rectangle_rule_midpoint
  0.026718 seconds (25.05 k allocations: 1.571 MiB)
Running: rectangle_rule_right
  1.099626 seconds (17.64 k allocations: 1.073 MiB)
Running: rombergs_method
  0.136629 seconds (134.40 k allocations: 7.749 MiB)
Running: simpsons_rule
  0.031487 seconds (27.97 k allocations: 1.746 MiB)
Running: simpsons38_rule
  0.033205 seconds (43.06 k allocations: 2.706 MiB)
Running: trapezoidal_rule
  0.026968 seconds (44.46 k allocations: 1.786 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.042045 seconds (100.03 k allocations: 2.999 MiB)
Running: chebyshev_quadrature with k=1
  0.213276 seconds (237.80 k allocations: 13.035 MiB, 10.26% gc time)
Running: chebyshev_quadrature with k=2
  0.219743 seconds (291.08 k allocations: 15.881 MiB)
Running: chebyshev_quadrature with k=3
  0.192103 seconds (270.17 k allocations: 14.322 MiB)
Running: chebyshev_quadrature with k=4
  0.234541 seconds (270.19 k allocations: 14.316 MiB, 9.69% gc time)
Running: hermite_quadrature with k=2
 14.176433 seconds (20.95 M allocations: 1.089 GiB, 8.48% gc time)
Running: jacobi_quadrature with α=β=1
  0.438016 seconds (456.64 k allocations: 49.369 MiB, 9.06% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.227929 seconds (277.29 k allocations: 15.262 MiB)
Running: legendre_quadrature
  0.186209 seconds (192.63 k allocations: 11.034 MiB, 19.57% gc time)
Running: lobatto_quadrature
  0.265848 seconds (217.82 k allocations: 37.182 MiB)
Running: radau_quadrature
  0.233170 seconds (214.41 k allocations: 29.841 MiB, 9.63% gc time)
Running: rectangle_rule_left
  0.028304 seconds (22.05 k allocations: 1.306 MiB)
Running: rectangle_rule_midpoint
  0.026349 seconds (26.89 k allocations: 1.660 MiB)
Running: rectangle_rule_right
  0.025071 seconds (18.79 k allocations: 1.129 MiB)
Running: rombergs_method
  0.107710 seconds (136.88 k allocations: 7.790 MiB)
Running: simpsons_rule
  0.037071 seconds (39.87 k allocations: 2.080 MiB)
Running: simpsons38_rule
  0.040773 seconds (58.09 k allocations: 3.092 MiB)
Running: trapezoidal_rule
  0.029590 seconds (30.55 k allocations: 1.714 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.060429 seconds (60.38 k allocations: 2.298 MiB, 37.68% gc time)
Running: chebyshev_quadrature with k=1
  0.191665 seconds (233.32 k allocations: 12.832 MiB)
Running: chebyshev_quadrature with k=2
  0.219565 seconds (286.28 k allocations: 15.646 MiB)
Running: chebyshev_quadrature with k=3
  0.201805 seconds (265.58 k allocations: 14.110 MiB)
Running: chebyshev_quadrature with k=4
  0.243780 seconds (265.60 k allocations: 14.110 MiB, 12.89% gc time)
Running: hermite_quadrature with k=2
  0.143627 seconds (171.23 k allocations: 9.794 MiB)
Running: jacobi_quadrature with α=β=1
 11.719591 seconds (449.88 k allocations: 1.175 GiB, 13.23% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.226627 seconds (272.56 k allocations: 15.078 MiB, 5.60% gc time)
Running: legendre_quadrature
  0.162938 seconds (188.18 k allocations: 10.822 MiB)
Running: lobatto_quadrature
  0.220835 seconds (208.56 k allocations: 22.910 MiB, 7.00% gc time)
Running: radau_quadrature
  0.204895 seconds (207.72 k allocations: 20.844 MiB)
Running: rectangle_rule_left
  0.026229 seconds (19.81 k allocations: 1.200 MiB)
Running: rectangle_rule_midpoint
  0.026504 seconds (25.76 k allocations: 1.607 MiB)
Running: rectangle_rule_right
  0.023808 seconds (17.63 k allocations: 1.073 MiB)
Running: rombergs_method
  0.110087 seconds (132.69 k allocations: 7.628 MiB)
Running: simpsons_rule
  0.031901 seconds (32.36 k allocations: 1.871 MiB)
Running: simpsons38_rule
  0.077981 seconds (48.87 k allocations: 2.851 MiB)
Running: trapezoidal_rule
  0.029280 seconds (25.43 k allocations: 1.550 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.032194 seconds (31.33 k allocations: 1.893 MiB)
Running: chebyshev_quadrature with k=1
  0.205536 seconds (231.70 k allocations: 13.042 MiB, 7.69% gc time)
Running: chebyshev_quadrature with k=2
  0.222170 seconds (284.57 k allocations: 16.058 MiB)
Running: chebyshev_quadrature with k=3
  0.205978 seconds (263.95 k allocations: 14.322 MiB)
Running: chebyshev_quadrature with k=4
  0.225020 seconds (263.98 k allocations: 14.163 MiB, 7.75% gc time)
Running: jacobi_quadrature with α=β=1
  2.670566 seconds (447.97 k allocations: 194.222 MiB, 5.25% gc time)
Running: legendre_quadrature
  0.179597 seconds (186.56 k allocations: 10.742 MiB)
Running: lobatto_quadrature
  0.206348 seconds (197.49 k allocations: 11.438 MiB, 7.55% gc time)
Running: radau_quadrature
  0.173137 seconds (197.49 k allocations: 11.434 MiB)
Running: rectangle_rule_left
  0.311859 seconds (19.61 k allocations: 1.184 MiB)
Running: rectangle_rule_midpoint
  0.025703 seconds (25.40 k allocations: 1.589 MiB)
Running: rectangle_rule_right
  0.105117 seconds (17.99 k allocations: 1.092 MiB)
Running: rombergs_method
  0.116668 seconds (145.33 k allocations: 8.482 MiB)
Running: simpsons_rule
  0.029011 seconds (28.67 k allocations: 1.776 MiB)
Running: simpsons38_rule
  0.033405 seconds (43.78 k allocations: 2.735 MiB)
Running: trapezoidal_rule
  0.035712 seconds (45.40 k allocations: 1.820 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.029964 seconds (32.09 k allocations: 1.844 MiB)
Running: chebyshev_quadrature with k=1
  0.183826 seconds (232.29 k allocations: 13.069 MiB, 8.45% gc time)
Running: chebyshev_quadrature with k=2
  0.205990 seconds (285.19 k allocations: 15.896 MiB)
Running: chebyshev_quadrature with k=3
  0.197144 seconds (264.53 k allocations: 14.247 MiB)
Running: chebyshev_quadrature with k=4
  0.220106 seconds (264.55 k allocations: 14.326 MiB, 8.27% gc time)
Running: jacobi_quadrature with α=β=1
  2.223930 seconds (448.68 k allocations: 148.905 MiB, 8.30% gc time)
Running: legendre_quadrature
  0.182051 seconds (187.15 k allocations: 10.757 MiB)
Running: lobatto_quadrature
  0.206881 seconds (198.09 k allocations: 11.451 MiB, 6.45% gc time)
Running: radau_quadrature
  0.178394 seconds (198.09 k allocations: 11.469 MiB)
Running: rectangle_rule_left
  1.189471 seconds (19.86 k allocations: 1.197 MiB)
Running: rectangle_rule_midpoint
  0.023848 seconds (25.40 k allocations: 1.589 MiB)
Running: rectangle_rule_right
  1.150883 seconds (17.95 k allocations: 1.089 MiB)
Running: rombergs_method
  0.123873 seconds (135.63 k allocations: 7.805 MiB)
Running: simpsons_rule
  0.031211 seconds (29.37 k allocations: 1.802 MiB)
Running: simpsons38_rule
  0.034065 seconds (44.48 k allocations: 2.761 MiB)
Running: trapezoidal_rule
  0.027510 seconds (57.63 k allocations: 2.020 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.160556 seconds (147.30 k allocations: 8.779 MiB)
Running: chebyshev_quadrature with k=1
  0.145399 seconds (70.10 k allocations: 2.210 MiB)
Running: chebyshev_quadrature with k=2
  0.166198 seconds (105.25 k allocations: 2.873 MiB)
Running: chebyshev_quadrature with k=3
  0.183090 seconds (92.74 k allocations: 2.660 MiB, 12.53% gc time)
Running: chebyshev_quadrature with k=4
  0.157109 seconds (72.27 k allocations: 2.256 MiB)
Running: jacobi_quadrature with α=β=1
  1.753450 seconds (476.00 k allocations: 167.536 MiB, 4.94% gc time)
Running: legendre_quadrature
  0.104306 seconds (18.89 k allocations: 1.097 MiB)
Running: lobatto_quadrature
  0.000145 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000089 seconds (148 allocations: 4.375 KiB)
Running: rectangle_rule_left
 45.461637 seconds (590.00 M allocations: 8.792 GiB, 3.41% gc time)
Running: rectangle_rule_midpoint
  0.000037 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 46.056528 seconds (592.75 M allocations: 8.833 GiB, 3.24% gc time)
Running: rombergs_method
  0.140321 seconds (20.67 k allocations: 1.172 MiB)
Running: simpsons_rule
  0.000047 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.028585 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.022139 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 32.340028 seconds (629.33 M allocations: 9.387 GiB, 5.12% gc time)
Running: chebyshev_quadrature with k=1
  0.506319 seconds (420.91 k allocations: 23.248 MiB)
Running: chebyshev_quadrature with k=2
 13.898723 seconds (475.82 k allocations: 4.041 GiB, 3.98% gc time)
Running: chebyshev_quadrature with k=3
  6.494982 seconds (277.89 k allocations: 1.643 GiB, 4.69% gc time)
Running: chebyshev_quadrature with k=4
  8.208709 seconds (277.91 k allocations: 2.261 GiB, 2.52% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 60.088892 seconds (485.47 k allocations: 13.254 GiB, 2.66% gc time)
Running: legendre_quadrature.
  5.850009 seconds (224.34 k allocations: 1.976 GiB, 1.32% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 53.443730 seconds (8.23 M allocations: 13.383 GiB, 3.27% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 50.028952 seconds (7.23 M allocations: 13.369 GiB, 2.49% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  2.951153 seconds (22.55 k allocations: 1.359 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.106778 seconds (30.88 k allocations: 1.901 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.122712 seconds (22.76 k allocations: 1.369 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.012384 seconds (440.31 k allocations: 152.747 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 40.434018 seconds (600.04 M allocations: 8.943 GiB, 8.06% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 38.282426 seconds (600.05 M allocations: 8.943 GiB, 7.81% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 39.098457 seconds (600.03 M allocations: 8.943 GiB, 8.35% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.062962 seconds (180.97 k allocations: 4.427 MiB)
Running: chebyshev_quadrature with k=1
  0.210759 seconds (248.27 k allocations: 13.463 MiB)
Running: chebyshev_quadrature with k=2
  0.212961 seconds (272.84 k allocations: 14.517 MiB)
Running: chebyshev_quadrature with k=3
  0.210410 seconds (248.77 k allocations: 12.808 MiB)
Running: chebyshev_quadrature with k=4
  0.215849 seconds (248.79 k allocations: 12.807 MiB)
Running: jacobi_quadrature with α=β=1
  0.386550 seconds (388.79 k allocations: 34.925 MiB)
Running: laguerre_quadrature with k=2
  0.187170 seconds (181.10 k allocations: 10.483 MiB)
Running: legendre_quadrature
  0.129956 seconds (146.05 k allocations: 8.056 MiB)
Running: lobatto_quadrature
  0.037622 seconds (10.69 k allocations: 15.100 MiB)
Running: radau_quadrature
  0.035868 seconds (9.47 k allocations: 13.173 MiB)
Running: rectangle_rule_left
  0.057980 seconds (19.12 k allocations: 1.132 MiB)
Running: rectangle_rule_midpoint
  0.046265 seconds (25.86 k allocations: 1.591 MiB)
Running: rectangle_rule_right
  0.051461 seconds (17.73 k allocations: 1.059 MiB)
Running: rombergs_method
  0.238696 seconds (171.92 k allocations: 9.853 MiB)
Running: simpsons_rule
  0.002103 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.055677 seconds (79.55 k allocations: 3.411 MiB)
Running: trapezoidal_rule
  0.207716 seconds (2.39 M allocations: 37.705 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.002060 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.133867 seconds (2.40 k allocations: 1.688 MiB)
Running: chebyshev_quadrature with k=2
  0.150996 seconds (2.65 k allocations: 2.352 MiB)
Running: chebyshev_quadrature with k=3
  0.143343 seconds (3.08 k allocations: 2.052 MiB)
Running: chebyshev_quadrature with k=4
  0.120291 seconds (3.08 k allocations: 1.493 MiB)
Running: jacobi_quadrature with α=β=1
  9.325516 seconds (365.79 k allocations: 904.756 MiB, 4.16% gc time)
Running: legendre_quadrature
  0.070501 seconds (1.23 k allocations: 65.688 KiB)
Running: lobatto_quadrature
  0.000224 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000152 seconds (221 allocations: 8.812 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  3.738616 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000516 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  3.976446 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.076749 seconds (959 allocations: 54.031 KiB)
Running: simpsons_rule
  0.000058 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000053 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000846 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000758 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.103452 seconds (2.48 k allocations: 576.484 KiB)
Running: chebyshev_quadrature with k=2
  0.107165 seconds (2.73 k allocations: 777.266 KiB)
Running: chebyshev_quadrature with k=3
  0.119123 seconds (3.15 k allocations: 685.500 KiB)
Running: chebyshev_quadrature with k=4
  0.122387 seconds (3.16 k allocations: 516.062 KiB)
Running: jacobi_quadrature with α=β=1
  4.233963 seconds (372.35 k allocations: 252.899 MiB)
Running: legendre_quadrature
  0.073912 seconds (1.28 k allocations: 65.359 KiB)
Running: lobatto_quadrature
  0.000097 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000046 seconds (81 allocations: 3.453 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 11.559929 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001106 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 10.632670 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.101695 seconds (1.18 k allocations: 62.547 KiB)
Running: simpsons_rule
  0.000075 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000093 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001848 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
