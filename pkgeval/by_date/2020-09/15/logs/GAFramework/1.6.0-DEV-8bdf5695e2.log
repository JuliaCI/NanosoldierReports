Julia Version 1.6.0-DEV.918
Commit 8bdf5695e2 (2020-09-15 16:48 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_lUrkWj/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_lUrkWj/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723168479779173
curgen: 20 fitness: 0.21723168479779173
curgen: 30 fitness: 0.21723168479779173
curgen: 40 fitness: 0.21723168479779173
curgen: 50 fitness: 0.21723348608290338
CoordinateCreature{Vector{Float64}}([0.2226048232665951], -0.21723348608290338) 0.2226048232665951 -0.21723348608290338
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2580535229105365
curgen: 100 fitness: 3.258363235456607
curgen: 150 fitness: 3.258381591619123
curgen: 200 fitness: 3.258417603859791
curgen: 250 fitness: 3.2584258622182003
curgen: 300 fitness: 3.25844220626189
curgen: 350 fitness: 3.2584438783911143
curgen: 400 fitness: 3.2584444720593866
curgen: 450 fitness: 3.2584444720593866
curgen: 500 fitness: 3.258448914761806
CoordinateCreature{Vector{Float64}}([0.22200351100563362, -0.22299168392413576, 0.22252432189702562, 0.22240223489949804, -0.22242183121056813, -0.2230838982680981, 0.2225496394371598, 0.22238398569923376, 0.2226697010979931, 0.22309352084152462, 0.22268977175808544, -0.22271049122204903, -0.22252910814184723, 0.22259642499135462, -0.22276876110466529], -3.258448914761806) [0.22200351100563362, -0.22299168392413576, 0.22252432189702562, 0.22240223489949804, -0.22242183121056813, -0.2230838982680981, 0.2225496394371598, 0.22238398569923376, 0.2226697010979931, 0.22309352084152462, 0.22268977175808544, -0.22271049122204903, -0.22252910814184723, 0.22259642499135462, -0.22276876110466529] -3.258448914761806
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.002659170916530229
curgen: 100 fitness: -0.0018672601748903617
curgen: 150 fitness: -0.0018672601748903617
curgen: 200 fitness: -0.0016056233819483623
curgen: 250 fitness: -0.0013602212896159926
curgen: 300 fitness: -0.0013602212896159926
curgen: 350 fitness: -0.0013602212896159926
curgen: 400 fitness: -0.0012018893454808222
curgen: 450 fitness: -0.0012018893454808222
curgen: 500 fitness: -0.0011248127152327925
CoordinateCreature{Vector{Float64}}([0.000679468073016621, -0.00036081902885443237, 0.0006515217876250645, -3.936012674894724e-5, -0.0016291435841986057, 0.0007887707426370206, 0.0003355675092861179, -0.00012948872934373393, -0.0002407164276189347, 0.00018534846610850433, 0.0009592253405896207, -0.00022393815681195602, -0.00027231627929799433, 9.67314171035306e-6, -0.00033064448993798965], 0.0011248127152327925) [0.000679468073016621, -0.00036081902885443237, 0.0006515217876250645, -3.936012674894724e-5, -0.0016291435841986057, 0.0007887707426370206, 0.0003355675092861179, -0.00012948872934373393, -0.0002407164276189347, 0.00018534846610850433, 0.0009592253405896207, -0.00022393815681195602, -0.00027231627929799433, 9.67314171035306e-6, -0.00033064448993798965] 0.0011248127152327925
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
