Julia Version 1.6.0-DEV.913
Commit 4c805d2310 (2020-09-14 14:07 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_oybIHa/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_oybIHa/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21722311652127574
curgen: 20 fitness: 0.21722481722896694
curgen: 30 fitness: 0.21723124140395145
curgen: 40 fitness: 0.21723320293811246
curgen: 50 fitness: 0.21723320293811246
CoordinateCreature{Vector{Float64}}([-0.22245018553318494], -0.21723320293811246) -0.22245018553318494 -0.21723320293811246
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.258171658555516
curgen: 100 fitness: 3.258274926238986
curgen: 150 fitness: 3.258303358240525
curgen: 200 fitness: 3.2583889633299865
curgen: 250 fitness: 3.2583889633299865
curgen: 300 fitness: 3.258394787372395
curgen: 350 fitness: 3.258406991752522
curgen: 400 fitness: 3.2584517367753683
curgen: 450 fitness: 3.2584517367753683
curgen: 500 fitness: 3.2584609829322684
CoordinateCreature{Vector{Float64}}([0.2226415306190212, 0.22263771685837985, 0.2224820638435552, -0.22257471246631266, -0.2218884486575023, -0.22246932334413774, -0.22302959314020526, 0.2223562109360226, 0.22222667706426705, -0.22277119548715515, -0.22268875040185004, -0.22229137800298407, -0.22262004187220052, 0.22260906806381517, -0.22253388501405344], -3.2584609829322684) [0.2226415306190212, 0.22263771685837985, 0.2224820638435552, -0.22257471246631266, -0.2218884486575023, -0.22246932334413774, -0.22302959314020526, 0.2223562109360226, 0.22222667706426705, -0.22277119548715515, -0.22268875040185004, -0.22229137800298407, -0.22262004187220052, 0.22260906806381517, -0.22253388501405344] -3.2584609829322684
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0027653306013064594
curgen: 100 fitness: -0.0021911065595645596
curgen: 150 fitness: -0.0021911065595645596
curgen: 200 fitness: -0.0013335019841917983
curgen: 250 fitness: -0.0010693199080833438
curgen: 300 fitness: -0.0010693199080833438
curgen: 350 fitness: -0.0010088286791472
curgen: 400 fitness: -0.0010088286791472
curgen: 450 fitness: -0.0005809820897866302
curgen: 500 fitness: -0.00048617783906479417
CoordinateCreature{Vector{Float64}}([-0.00012877463104522813, 0.0009975230479492407, -0.00014721265482408718, 0.00038958035125304753, 0.0001473819509372683, -8.62289079483253e-5, -0.00027888241187998264, -0.0003180237719549242, 0.0006079895550800479, -0.0006329517321902697, -0.00020288468344420798, 0.0002619796161032783, -9.86923980928001e-5, 0.00040314235839006935, -7.145436945517683e-5], 0.00048617783906479417) [-0.00012877463104522813, 0.0009975230479492407, -0.00014721265482408718, 0.00038958035125304753, 0.0001473819509372683, -8.62289079483253e-5, -0.00027888241187998264, -0.0003180237719549242, 0.0006079895550800479, -0.0006329517321902697, -0.00020288468344420798, 0.0002619796161032783, -9.86923980928001e-5, 0.00040314235839006935, -7.145436945517683e-5] 0.00048617783906479417
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
