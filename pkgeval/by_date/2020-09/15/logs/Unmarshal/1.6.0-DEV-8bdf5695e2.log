Julia Version 1.6.0-DEV.918
Commit 8bdf5695e2 (2020-09-15 16:48 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed Missings ─────────── v0.4.4
  Installed Nullables ────────── v1.0.0
  Installed Parsers ──────────── v1.0.10
  Installed DataAPI ──────────── v1.3.0
  Installed Unmarshal ────────── v0.4.1
  Installed OrderedCollections ─ v1.3.1
  Installed JSON ─────────────── v0.21.1
  Installed LazyJSON ─────────── v0.2.1
  Installed Requires ─────────── v1.0.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [cbff2730] + Unmarshal v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [9a962f9c] + DataAPI v1.3.0
  [682c06a0] + JSON v0.21.1
  [fc18253b] + LazyJSON v0.2.1
  [e1d29d7a] + Missings v0.4.4
  [4d1e1d77] + Nullables v1.0.0
  [bac558e1] + OrderedCollections v1.3.1
  [69de0a69] + Parsers v1.0.10
  [ae029012] + Requires v1.0.2
  [cbff2730] + Unmarshal v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [de0858da] + Printf
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing Unmarshal
Status `/tmp/jl_YU1ZQ2/Project.toml`
  [682c06a0] JSON v0.21.1
  [fc18253b] LazyJSON v0.2.1
  [e1d29d7a] Missings v0.4.4
  [4d1e1d77] Nullables v1.0.0
  [ae029012] Requires v1.0.2
  [cbff2730] Unmarshal v0.4.1
  [37e2e46d] LinearAlgebra
  [8dfed614] Test
Status `/tmp/jl_YU1ZQ2/Manifest.toml`
  [9a962f9c] DataAPI v1.3.0
  [682c06a0] JSON v0.21.1
  [fc18253b] LazyJSON v0.2.1
  [e1d29d7a] Missings v0.4.4
  [4d1e1d77] Nullables v1.0.0
  [bac558e1] OrderedCollections v1.3.1
  [69de0a69] Parsers v1.0.10
  [ae029012] Requires v1.0.2
  [cbff2730] Unmarshal v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [de0858da] Printf
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Start testing with library JSON
Unmarshal.unmarshal(BazNullable, JSON.parse(input2)) === BazNullable(Nullable{Float64}(), Bar(17)) = false
Vector{Float64}
Foo AbstractDict
\--> bar <: Bar 
	Bar AbstractDict
	\--> baz <: Int64 
Array{Float64, 3}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
Any{Int64}
List
Tuple: Tuple{NTuple{4, Float64}, Tuple{Float64, Float64}}
	Tuple: NTuple{4, Float64}
	Tuple: Tuple{Float64, Float64}
Tuple: Tuple
	Any{Any}
	List
	Any{Any}
	List
Tuple: Tuple{Vararg{Array, N} where N}
	Vector{Any}
	Vector{Any}
Tuple: Tuple{Array, Array}
	Vector{Any}
	Vector{Any}
Tuple: Tuple{Vararg{Tuple, N} where N}
	Tuple: Tuple
	Tuple: Tuple
Tuple: Tuple{Vararg{Tuple{Vararg{Float64, N} where N}, N} where N}
	Tuple: Tuple{Vararg{Float64, N} where N}
	Tuple: Tuple{Vararg{Float64, N} where N}
TupleTest AbstractDict
\--> a <: Tuple 
	Tuple: Tuple
\--> b <: Tuple{Int64, Float64} 
	Tuple: Tuple{Int64, Float64}
\--> c <: Tuple{Float64, Vararg{Int64, N} where N} 
	Tuple: Tuple{Float64, Vararg{Int64, N} where N}
\--> d <: NamedTuple{(:x, :y), T} where T<:Tuple 
	NamedTuple{(:x, :y),Tuple{Any, Any}}
	\--> x 
	\--> y 
\--> e <: NamedTuple{(:x, :y), Tuple{Int64, Float64}} 
	NamedTuple{(:x, :y),Tuple{Int64, Float64}}
	\--> x 
	\--> y 
DictTest AbstractDict
\--> testDict <: Dict{Int64, String} 
	Dict{Int64, String} Dict 
	\--> 1 String
		String (String)
	\--> 2 String
		String (String)
dictTest2 = Dict("k" => "val") = Dict("k" => "val")
Dict{String, String} Dict 
\--> k String
	String (String)
Unmarshal.unmarshal(TestUnmarshal, j) = TestUnmarshal("", "Test", Dict("self" => "TestDict"))
Starting tests on Pairs
Pair Pair{String, String} AbstractDict
Pair Pair{Int64, Int64} AbstractDict
Pair Pair{String, Int64} AbstractDict
Pair Pair{Int64, String} AbstractDict
Pair Pair{Int64, Vector{Float64}} AbstractDict
┌ Warning: Expected a single pair, but found a multi-entry dictionary, just using the first key: 1
└ @ Unmarshal ~/.julia/packages/Unmarshal/2LYo9/src/Unmarshal.jl:143
Unmarshal.unmarshal(typeof(p), JSON.parse(raw)) = "1" => "Test1"
Pair Pair{Int64, Dict{String, Int64}} AbstractDict
Pair Pair{Int64, Dict{String, Int64}} AbstractDict
Done testing with library JSON
Start testing with library LazyJSON
Unmarshal.unmarshal(BazNullable, LazyJSON.parse(input2)) === BazNullable(Nullable{Float64}(), Bar(17)) = true
Vector{Float64}
jstring = "{\"a1\":[0.0,1.0,2.0],\"a2\":[1,2,3]}"
LazyJSON.parse(jstring) = LazyJSON.Object{Nothing, String}("a1" => Any[0.0, 1.0, 2.0], "a2" => Any[1, 2, 3])
Foo AbstractDict
\--> bar <: Bar 
	Bar AbstractDict
	\--> baz <: Int64 
Array{Float64, 3}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
Any{Any}
List
Tuple: Tuple
	Any{Any}
	List
	Any{Any}
	List
Tuple: Tuple{Vararg{Array, N} where N}
	Vector{Any}
	Vector{Any}
Tuple: Tuple{Array, Array}
	Vector{Any}
	Vector{Any}
Tuple: Tuple{Vararg{Tuple, N} where N}
	Tuple: Tuple
	Tuple: Tuple
Tuple: Tuple{Vararg{Tuple{Vararg{Float64, N} where N}, N} where N}
	Tuple: Tuple{Vararg{Float64, N} where N}
	Tuple: Tuple{Vararg{Float64, N} where N}
TupleTest AbstractDict
\--> a <: Tuple 
	Tuple: Tuple
\--> b <: Tuple{Int64, Float64} 
	Tuple: Tuple{Int64, Float64}
\--> c <: Tuple{Float64, Vararg{Int64, N} where N} 
	Tuple: Tuple{Float64, Vararg{Int64, N} where N}
\--> d <: NamedTuple{(:x, :y), T} where T<:Tuple 
	NamedTuple{(:x, :y),Tuple{Any, Any}}
	\--> x 
	\--> y 
\--> e <: NamedTuple{(:x, :y), Tuple{Int64, Float64}} 
	NamedTuple{(:x, :y),Tuple{Int64, Float64}}
	\--> x 
	\--> y 
js = Unmarshal.unmarshal(TupleTest, LazyJSON.parse(jstring), true) = TupleTest(("a", 1, 5), (5, 3.5), (1.2, 6, 7, 3), (x = 5, y = 9), (x = 3, y = 1.4))
(typeof(testTuples.a), typeof(js.a)) = (Tuple{String, Int64, Int64}, Tuple{LazyJSON.String{String}, LazyJSON.Number{String}, LazyJSON.Number{String}})
(typeof(testTuples.d), typeof(js.d)) = (NamedTuple{(:x, :y), Tuple{Int64, Int64}}, NamedTuple{(:x, :y), Tuple{LazyJSON.Number{String}, LazyJSON.Number{String}}})
DictTest AbstractDict
\--> testDict <: Dict{Int64, String} 
	Dict{Int64, String} Dict from LazyJSON
	\--> 2 String
	\--> 1 String
dictTest2 = Dict("k" => "val") = Dict("k" => "val")
Dict{String, String} Dict from LazyJSON
\--> k String
Unmarshal.unmarshal(TestUnmarshal, j) = TestUnmarshal("", "Test", Dict("self" => "TestDict"))
Starting tests on Pairs
Pair Pair{String, String} AbstractDict
Pair Pair{Int64, Int64} AbstractDict
Pair Pair{String, Int64} AbstractDict
Pair Pair{Int64, String} AbstractDict
Pair Pair{Int64, Vector{Float64}} AbstractDict
┌ Warning: Expected a single pair, but found a multi-entry dictionary, just using the first key: 2
└ @ Unmarshal ~/.julia/packages/Unmarshal/2LYo9/src/lazyjson.jl:35
Unmarshal.unmarshal(typeof(p), LazyJSON.parse(raw)) = "2" => "Test2"
Pair Pair{Int64, Dict{String, Int64}} AbstractDict
Pair Pair{Int64, Dict{String, Int64}} AbstractDict
Done testing with library LazyJSON
    Testing Unmarshal tests passed 
