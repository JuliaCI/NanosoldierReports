Julia Version 1.6.0-DEV.913
Commit 4c805d2310 (2020-09-14 14:07 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed RowEchelon ─────────────────── v0.1.1
  Installed Zlib_jll ───────────────────── v1.2.11+16
  Installed Bzip2_jll ──────────────────── v1.0.6+4
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed MultivariateMoments ────────── v0.3.0
  Installed ZipFile ────────────────────── v0.9.2
  Installed SetProg ────────────────────── v0.1.3
  Installed JuMP ───────────────────────── v0.21.4
  Installed MbedTLS_jll ────────────────── v2.16.8+0
  Installed NaNMath ────────────────────── v0.3.4
  Installed Reexport ───────────────────── v0.2.0
  Installed FixedPointNumbers ──────────── v0.8.4
  Installed DataStructures ─────────────── v0.17.20
  Installed CommonSubexpressions ───────── v0.3.0
  Installed ForwardDiff ────────────────── v0.10.12
  Installed Calculus ───────────────────── v0.5.1
  Installed DiffRules ──────────────────── v1.0.1
  Installed Compat ─────────────────────── v2.2.1
  Installed ColorTypes ─────────────────── v0.10.9
  Installed Polyhedra ──────────────────── v0.6.5
  Installed SpecialFunctions ───────────── v0.10.3
  Installed GeometryTypes ──────────────── v0.8.3
  Installed StaticArrays ───────────────── v0.12.4
  Installed JSON ───────────────────────── v0.21.1
  Installed PolyJuMP ───────────────────── v0.4.0
  Installed MathOptInterface ───────────── v0.9.15
  Installed CodecZlib ──────────────────── v0.7.0
  Installed RecipesBase ────────────────── v1.1.0
  Installed OrderedCollections ─────────── v1.3.0
  Installed TranscodingStreams ─────────── v0.9.5
  Installed MultivariatePolynomials ────── v0.3.10
  Installed IniFile ────────────────────── v0.5.0
  Installed MutableArithmetics ─────────── v0.2.10
  Installed DynamicPolynomials ─────────── v0.3.13
  Installed MbedTLS ────────────────────── v1.0.2
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed MacroTools ─────────────────── v0.5.5
  Installed Parsers ────────────────────── v1.0.10
  Installed HTTP ───────────────────────── v0.8.17
  Installed BenchmarkTools ─────────────── v0.5.0
  Installed DiffResults ────────────────── v1.0.2
  Installed SemialgebraicSets ──────────── v0.2.1
  Installed JSONSchema ─────────────────── v0.3.2
  Installed CodecBzip2 ─────────────────── v0.7.2
  Installed Combinatorics ──────────────── v1.0.2
  Installed MultivariateBases ──────────── v0.1.2
  Installed SumOfSquares ───────────────── v0.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [39881422] + SetProg v0.1.3
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [6e4b80f9] + BenchmarkTools v0.5.0
  [6e34b625] + Bzip2_jll v1.0.6+4
  [49dc2e85] + Calculus v0.5.1
  [523fee87] + CodecBzip2 v0.7.2
  [944b1d66] + CodecZlib v0.7.0
  [3da002f7] + ColorTypes v0.10.9
  [861a8166] + Combinatorics v1.0.2
  [bbf7d656] + CommonSubexpressions v0.3.0
  [34da2185] + Compat v2.2.1
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [864edb3b] + DataStructures v0.17.20
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [7c1d4256] + DynamicPolynomials v0.3.13
  [53c48c17] + FixedPointNumbers v0.8.4
  [f6369f11] + ForwardDiff v0.10.12
  [4d00f742] + GeometryTypes v0.8.3
  [cd3eb016] + HTTP v0.8.17
  [83e8ac13] + IniFile v0.5.0
  [682c06a0] + JSON v0.21.1
  [7d188eb4] + JSONSchema v0.3.2
  [4076af6c] + JuMP v0.21.4
  [1914dd2f] + MacroTools v0.5.5
  [b8f27783] + MathOptInterface v0.9.15
  [739be429] + MbedTLS v1.0.2
  [c8ffd9c3] + MbedTLS_jll v2.16.8+0
  [be282fd4] + MultivariateBases v0.1.2
  [f4abf1af] + MultivariateMoments v0.3.0
  [102ac46a] + MultivariatePolynomials v0.3.10
  [d8a4904e] + MutableArithmetics v0.2.10
  [77ba4419] + NaNMath v0.3.4
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.3.0
  [69de0a69] + Parsers v1.0.10
  [ddf597a6] + PolyJuMP v0.4.0
  [67491407] + Polyhedra v0.6.5
  [3cdcf5f2] + RecipesBase v1.1.0
  [189a3867] + Reexport v0.2.0
  [af85af4c] + RowEchelon v0.1.1
  [8e049039] + SemialgebraicSets v0.2.1
  [39881422] + SetProg v0.1.3
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [4b9e565b] + SumOfSquares v0.4.1
  [3bb67fe8] + TranscodingStreams v0.9.5
  [a5390f91] + ZipFile v0.9.2
  [83775a58] + Zlib_jll v1.2.11+16
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing SetProg
Status `/tmp/jl_ee0hT8/Project.toml`
  [861a8166] Combinatorics v1.0.2
  [864edb3b] DataStructures v0.17.20
  [7c1d4256] DynamicPolynomials v0.3.13
  [60bf3e95] GLPK v0.14.0
  [4076af6c] JuMP v0.21.4
  [b8f27783] MathOptInterface v0.9.15
  [be282fd4] MultivariateBases v0.1.2
  [f4abf1af] MultivariateMoments v0.3.0
  [102ac46a] MultivariatePolynomials v0.3.10
  [d8a4904e] MutableArithmetics v0.2.10
  [67491407] Polyhedra v0.6.5
  [3cdcf5f2] RecipesBase v1.1.0
  [189a3867] Reexport v0.2.0
  [39881422] SetProg v0.1.3
  [4b9e565b] SumOfSquares v0.4.1
  [37e2e46d] LinearAlgebra
  [44cfe95a] Pkg
  [8dfed614] Test
Status `/tmp/jl_ee0hT8/Manifest.toml`
  [6e4b80f9] BenchmarkTools v0.5.0
  [b99e7846] BinaryProvider v0.5.10
  [6e34b625] Bzip2_jll v1.0.6+4
  [fa961155] CEnum v0.3.0
  [49dc2e85] Calculus v0.5.1
  [523fee87] CodecBzip2 v0.7.2
  [944b1d66] CodecZlib v0.7.0
  [3da002f7] ColorTypes v0.10.9
  [861a8166] Combinatorics v1.0.2
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v2.2.1
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [864edb3b] DataStructures v0.17.20
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [7c1d4256] DynamicPolynomials v0.3.13
  [53c48c17] FixedPointNumbers v0.8.4
  [f6369f11] ForwardDiff v0.10.12
  [60bf3e95] GLPK v0.14.0
  [e8aa6df9] GLPK_jll v4.64.0+0
  [781609d7] GMP_jll v6.2.0+2
  [4d00f742] GeometryTypes v0.8.3
  [cd3eb016] HTTP v0.8.17
  [83e8ac13] IniFile v0.5.0
  [682c06a0] JSON v0.21.1
  [7d188eb4] JSONSchema v0.3.2
  [4076af6c] JuMP v0.21.4
  [1914dd2f] MacroTools v0.5.5
  [b8f27783] MathOptInterface v0.9.15
  [739be429] MbedTLS v1.0.2
  [c8ffd9c3] MbedTLS_jll v2.16.8+0
  [be282fd4] MultivariateBases v0.1.2
  [f4abf1af] MultivariateMoments v0.3.0
  [102ac46a] MultivariatePolynomials v0.3.10
  [d8a4904e] MutableArithmetics v0.2.10
  [77ba4419] NaNMath v0.3.4
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.3.0
  [69de0a69] Parsers v1.0.10
  [ddf597a6] PolyJuMP v0.4.0
  [67491407] Polyhedra v0.6.5
  [3cdcf5f2] RecipesBase v1.1.0
  [189a3867] Reexport v0.2.0
  [af85af4c] RowEchelon v0.1.1
  [8e049039] SemialgebraicSets v0.2.1
  [39881422] SetProg v0.1.3
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [4b9e565b] SumOfSquares v0.4.1
  [3bb67fe8] TranscodingStreams v0.9.5
  [a5390f91] ZipFile v0.9.2
  [83775a58] Zlib_jll v1.2.11+16
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Test Summary: | Pass  Total
apply_matrix  |    4      4
Test Summary: | Pass  Total
Variables     |    8      8
Test Summary: | Pass  Total
L1 heuristic  |   12     12
Test Summary: | Pass  Total
Recipe        |   38     38
WARNING: both DynamicPolynomials and SumOfSquares export "name"; uses of it in module SetProg must be qualified
PolySet: Error During Test at /home/pkgeval/.julia/packages/SetProg/lVxiA/test/square.jl:45
  Got exception outside of a @test
  MethodError: no method matching copy(::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}})
  Closest candidates are:
    copy(!Matched::S) where S<:Union{MathOptInterface.SOS1, MathOptInterface.SOS2} at /home/pkgeval/.julia/packages/MathOptInterface/R1y80/src/sets.jl:837
    copy(!Matched::Union{MathOptInterface.DualExponentialCone, MathOptInterface.ExponentialCone, MathOptInterface.Integer, MathOptInterface.ZeroOne, MathOptInterface.Complements, MathOptInterface.GeometricMeanCone, MathOptInterface.LogDetConeSquare, MathOptInterface.LogDetConeTriangle, MathOptInterface.Nonnegatives, MathOptInterface.Nonpositives, MathOptInterface.NormInfinityCone, MathOptInterface.NormNuclearCone, MathOptInterface.NormOneCone, MathOptInterface.NormSpectralCone, MathOptInterface.PositiveSemidefiniteConeSquare, MathOptInterface.PositiveSemidefiniteConeTriangle, MathOptInterface.Reals, MathOptInterface.RelativeEntropyCone, MathOptInterface.RootDetConeSquare, MathOptInterface.RootDetConeTriangle, MathOptInterface.RotatedSecondOrderCone, MathOptInterface.SecondOrderCone, MathOptInterface.Zeros, MathOptInterface.DualPowerCone, MathOptInterface.EqualTo, MathOptInterface.GreaterThan, MathOptInterface.Interval, MathOptInterface.LessThan, MathOptInterface.PowerCone, MathOptInterface.Semicontinuous, MathOptInterface.Semiinteger}) at /home/pkgeval/.julia/packages/MathOptInterface/R1y80/src/sets.jl:822
    copy(!Matched::F) where F<:Union{MathOptInterface.ScalarQuadraticFunction, MathOptInterface.VectorQuadraticFunction} at /home/pkgeval/.julia/packages/MathOptInterface/R1y80/src/functions.jl:415
    ...
  Stacktrace:
    [1] add_constraint(uf::MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}, f::MathOptInterface.VectorAffineFunction{Float64}, s::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}})
      @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/R1y80/src/Utilities/universalfallback.jl:460
    [2] add_constraint(mock::MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, func::MathOptInterface.VectorAffineFunction{Float64}, set::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}})
      @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/R1y80/src/Utilities/mockoptimizer.jl:113
    [3] add_constraint(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, f::MathOptInterface.VectorAffineFunction{Float64}, s::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}})
      @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/R1y80/src/Bridges/bridge_optimizer.jl:1111
    [4] moi_add_constraint(model::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, f::MathOptInterface.VectorAffineFunction{Float64}, s::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}})
      @ JuMP ~/.julia/packages/JuMP/e0Uc2/src/constraints.jl:390
    [5] add_constraint(model::Model, con::VectorConstraint{AffExpr, PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}}, PolyJuMP.PolynomialShape{Monomial{true}, MonomialVector{true}}}, name::String)
      @ JuMP ~/.julia/packages/JuMP/e0Uc2/src/constraints.jl:402
    [6] add_constraint(model::Model, con::BridgeableConstraint{VectorConstraint{AffExpr, PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}}, PolyJuMP.PolynomialShape{Monomial{true}, MonomialVector{true}}}, UnionAll}, name::String)
      @ JuMP ~/.julia/packages/JuMP/e0Uc2/src/constraints.jl:269
    [7] macro expansion
      @ ~/.julia/packages/JuMP/e0Uc2/src/macros.jl:441 [inlined]
    [8] constrain_convex(model::Model, p::Polynomial{true, AffExpr}, vars::Vector{PolyVar{true}})
      @ SetProg ~/.julia/packages/SetProg/lVxiA/src/variables.jl:218
    [9] variable_set(model::Model, set::PolySet, space::SetProg.Space, space_dimension::Int64, space_polyvars::Vector{PolyVar{true}})
      @ SetProg ~/.julia/packages/SetProg/lVxiA/src/variables.jl:249
   [10] load(model::Model, vref::SetProg.SetVariableRef{Model, PolySet})
      @ SetProg ~/.julia/packages/SetProg/lVxiA/src/variables.jl:355
   [11] load(model::Model, d::SetProg.Data)
      @ SetProg ~/.julia/packages/SetProg/lVxiA/src/optimize.jl:4
   [12] optimize_hook(model::Model)
      @ SetProg ~/.julia/packages/SetProg/lVxiA/src/optimize.jl:28
   [13] optimize!(model::Model, optimizer_factory::Nothing; bridge_constraints::Bool, ignore_optimize_hook::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ JuMP ~/.julia/packages/JuMP/e0Uc2/src/optimizer_interface.jl:120
   [14] optimize!
      @ ~/.julia/packages/JuMP/e0Uc2/src/optimizer_interface.jl:106 [inlined]
   [15] square_test(optimizer::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, config::MathOptInterface.Test.TestConfig{Float64}, inner::Bool, variable::PolySet, metric::Main.Tests.var"#5#7", objective_value::Float64, set_test::Main.Tests.var"#6#8"{MathOptInterface.Test.TestConfig{Float64}})
      @ Main.Tests ~/.julia/packages/SetProg/lVxiA/test/Tests/square.jl:33
   [16] john_nonhomogeneous_quad_square_test(optimizer::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, config::MathOptInterface.Test.TestConfig{Float64})
      @ Main.Tests ~/.julia/packages/SetProg/lVxiA/test/Tests/square.jl:70
   [17] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/square.jl:48
   [18] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [19] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/square.jl:46
   [20] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [21] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/square.jl:39
   [22] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [23] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/square.jl:32
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [25] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/square.jl:28
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [27] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/square.jl:26
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/mock_tests.jl:6
   [30] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [31] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/runtests.jl:10
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] top-level scope
      @ none:6
   [34] eval(m::Module, e::Any)
      @ Core ./boot.jl:345
   [35] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [36] _start()
      @ Base ./client.jl:485
┌ Warning: The GLPK constants have been renamed from `GLPK.XXX` to `GLPK.GLP_XXX` in order to better match the C API. For example, `GLPK.MSG_OFF` is now `GLPK.GLP_MSG_OFF`. Support for the old constants will be removed in a future release.
└ @ GLPK ~/.julia/packages/GLPK/fULVH/src/MOI_wrapper/deprecated_constants.jl:17
Piecewise: Error During Test at /home/pkgeval/.julia/packages/SetProg/lVxiA/test/square.jl:56
  Got exception outside of a @test
  MethodError: no method matching copy(::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.AlgebraicSet{Float64, Polynomial{true, Float64}, SemialgebraicSets.Buchberger, SemialgebraicSets.SolverUsingMultiplicationMatrices{SemialgebraicSets.GröbnerBasisMultiplicationMatricesAlgorithm, SemialgebraicSets.ReorderedSchurMultiplicationMatricesSolver{Float64, Random._GLOBAL_RNG}}, Float64}, MonomialBasis, Monomial{true}, MonomialVector{true}})
  Closest candidates are:
    copy(!Matched::S) where S<:Union{MathOptInterface.SOS1, MathOptInterface.SOS2} at /home/pkgeval/.julia/packages/MathOptInterface/R1y80/src/sets.jl:837
    copy(!Matched::Union{MathOptInterface.DualExponentialCone, MathOptInterface.ExponentialCone, MathOptInterface.Integer, MathOptInterface.ZeroOne, MathOptInterface.Complements, MathOptInterface.GeometricMeanCone, MathOptInterface.LogDetConeSquare, MathOptInterface.LogDetConeTriangle, MathOptInterface.Nonnegatives, MathOptInterface.Nonpositives, MathOptInterface.NormInfinityCone, MathOptInterface.NormNuclearCone, MathOptInterface.NormOneCone, MathOptInterface.NormSpectralCone, MathOptInterface.PositiveSemidefiniteConeSquare, MathOptInterface.PositiveSemidefiniteConeTriangle, MathOptInterface.Reals, MathOptInterface.RelativeEntropyCone, MathOptInterface.RootDetConeSquare, MathOptInterface.RootDetConeTriangle, MathOptInterface.RotatedSecondOrderCone, MathOptInterface.SecondOrderCone, MathOptInterface.Zeros, MathOptInterface.DualPowerCone, MathOptInterface.EqualTo, MathOptInterface.GreaterThan, MathOptInterface.Interval, MathOptInterface.LessThan, MathOptInterface.PowerCone, MathOptInterface.Semicontinuous, MathOptInterface.Semiinteger}) at /home/pkgeval/.julia/packages/MathOptInterface/R1y80/src/sets.jl:822
    copy(!Matched::F) where F<:Union{MathOptInterface.ScalarQuadraticFunction, MathOptInterface.VectorQuadraticFunction} at /home/pkgeval/.julia/packages/MathOptInterface/R1y80/src/functions.jl:415
    ...
  Stacktrace:
    [1] add_constraint(uf::MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}, f::MathOptInterface.VectorAffineFunction{Float64}, s::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.AlgebraicSet{Float64, Polynomial{true, Float64}, SemialgebraicSets.Buchberger, SemialgebraicSets.SolverUsingMultiplicationMatrices{SemialgebraicSets.GröbnerBasisMultiplicationMatricesAlgorithm, SemialgebraicSets.ReorderedSchurMultiplicationMatricesSolver{Float64, Random._GLOBAL_RNG}}, Float64}, MonomialBasis, Monomial{true}, MonomialVector{true}})
      @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/R1y80/src/Utilities/universalfallback.jl:460
    [2] add_constraint(mock::MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, func::MathOptInterface.VectorAffineFunction{Float64}, set::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.AlgebraicSet{Float64, Polynomial{true, Float64}, SemialgebraicSets.Buchberger, SemialgebraicSets.SolverUsingMultiplicationMatrices{SemialgebraicSets.GröbnerBasisMultiplicationMatricesAlgorithm, SemialgebraicSets.ReorderedSchurMultiplicationMatricesSolver{Float64, Random._GLOBAL_RNG}}, Float64}, MonomialBasis, Monomial{true}, MonomialVector{true}})
      @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/R1y80/src/Utilities/mockoptimizer.jl:113
    [3] add_constraint(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, f::MathOptInterface.VectorAffineFunction{Float64}, s::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.AlgebraicSet{Float64, Polynomial{true, Float64}, SemialgebraicSets.Buchberger, SemialgebraicSets.SolverUsingMultiplicationMatrices{SemialgebraicSets.GröbnerBasisMultiplicationMatricesAlgorithm, SemialgebraicSets.ReorderedSchurMultiplicationMatricesSolver{Float64, Random._GLOBAL_RNG}}, Float64}, MonomialBasis, Monomial{true}, MonomialVector{true}})
      @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/R1y80/src/Bridges/bridge_optimizer.jl:1111
    [4] moi_add_constraint(model::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, f::MathOptInterface.VectorAffineFunction{Float64}, s::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.AlgebraicSet{Float64, Polynomial{true, Float64}, SemialgebraicSets.Buchberger, SemialgebraicSets.SolverUsingMultiplicationMatrices{SemialgebraicSets.GröbnerBasisMultiplicationMatricesAlgorithm, SemialgebraicSets.ReorderedSchurMultiplicationMatricesSolver{Float64, Random._GLOBAL_RNG}}, Float64}, MonomialBasis, Monomial{true}, MonomialVector{true}})
      @ JuMP ~/.julia/packages/JuMP/e0Uc2/src/constraints.jl:390
    [5] add_constraint(model::Model, con::VectorConstraint{AffExpr, PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.AlgebraicSet{Float64, Polynomial{true, Float64}, SemialgebraicSets.Buchberger, SemialgebraicSets.SolverUsingMultiplicationMatrices{SemialgebraicSets.GröbnerBasisMultiplicationMatricesAlgorithm, SemialgebraicSets.ReorderedSchurMultiplicationMatricesSolver{Float64, Random._GLOBAL_RNG}}, Float64}, MonomialBasis, Monomial{true}, MonomialVector{true}}, PolyJuMP.PolynomialShape{Monomial{true}, MonomialVector{true}}}, name::String)
      @ JuMP ~/.julia/packages/JuMP/e0Uc2/src/constraints.jl:402
    [6] add_constraint(model::Model, con::BridgeableConstraint{VectorConstraint{AffExpr, PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.AlgebraicSet{Float64, Polynomial{true, Float64}, SemialgebraicSets.Buchberger, SemialgebraicSets.SolverUsingMultiplicationMatrices{SemialgebraicSets.GröbnerBasisMultiplicationMatricesAlgorithm, SemialgebraicSets.ReorderedSchurMultiplicationMatricesSolver{Float64, Random._GLOBAL_RNG}}, Float64}, MonomialBasis, Monomial{true}, MonomialVector{true}}, PolyJuMP.PolynomialShape{Monomial{true}, MonomialVector{true}}}, UnionAll}, name::String)
      @ JuMP ~/.julia/packages/JuMP/e0Uc2/src/constraints.jl:269
    [7] macro expansion
      @ ~/.julia/packages/JuMP/e0Uc2/src/macros.jl:441 [inlined]
    [8] variable_set(model::Model, ell::Ellipsoid, space::SetProg.Space, space_dimension::Int64, space_polyvars::Vector{PolyVar{true}})
      @ SetProg ~/.julia/packages/SetProg/lVxiA/src/variables.jl:121
    [9] load(model::Model, vref::SetProg.SetVariableRef{Model, Ellipsoid})
      @ SetProg ~/.julia/packages/SetProg/lVxiA/src/variables.jl:355
   [10] load(model::Model, d::SetProg.Data)
      @ SetProg ~/.julia/packages/SetProg/lVxiA/src/optimize.jl:4
   [11] optimize_hook(model::Model)
      @ SetProg ~/.julia/packages/SetProg/lVxiA/src/optimize.jl:28
   [12] optimize!(model::Model, optimizer_factory::Nothing; bridge_constraints::Bool, ignore_optimize_hook::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ JuMP ~/.julia/packages/JuMP/e0Uc2/src/optimizer_interface.jl:120
   [13] optimize!
      @ ~/.julia/packages/JuMP/e0Uc2/src/optimizer_interface.jl:106 [inlined]
   [14] square_test(optimizer::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, config::MathOptInterface.Test.TestConfig{Float64}, inner::Bool, variable::Ellipsoid, metric::Main.Tests.var"#11#13", objective_value::Int64, set_test::Main.Tests.var"#12#14"{MathOptInterface.Test.TestConfig{Float64}})
      @ Main.Tests ~/.julia/packages/SetProg/lVxiA/test/Tests/square.jl:33
   [15] piecewise_semiell_inner_homogeneous_◇_square_test(optimizer::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, config::MathOptInterface.Test.TestConfig{Float64})
      @ Main.Tests ~/.julia/packages/SetProg/lVxiA/test/Tests/square.jl:95
   [16] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/square.jl:59
   [17] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [18] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/square.jl:57
   [19] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [20] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/square.jl:32
   [21] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [22] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/square.jl:28
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [24] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/square.jl:26
   [25] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [26] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/mock_tests.jl:6
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/runtests.jl:10
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] top-level scope
      @ none:6
   [31] eval(m::Module, e::Any)
      @ Core ./boot.jl:345
   [32] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [33] _start()
      @ Base ./client.jl:485
Inner: Error During Test at /home/pkgeval/.julia/packages/SetProg/lVxiA/test/square.jl:81
  Got exception outside of a @test
  MethodError: no method matching copy(::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}})
  Closest candidates are:
    copy(!Matched::S) where S<:Union{MathOptInterface.SOS1, MathOptInterface.SOS2} at /home/pkgeval/.julia/packages/MathOptInterface/R1y80/src/sets.jl:837
    copy(!Matched::Union{MathOptInterface.DualExponentialCone, MathOptInterface.ExponentialCone, MathOptInterface.Integer, MathOptInterface.ZeroOne, MathOptInterface.Complements, MathOptInterface.GeometricMeanCone, MathOptInterface.LogDetConeSquare, MathOptInterface.LogDetConeTriangle, MathOptInterface.Nonnegatives, MathOptInterface.Nonpositives, MathOptInterface.NormInfinityCone, MathOptInterface.NormNuclearCone, MathOptInterface.NormOneCone, MathOptInterface.NormSpectralCone, MathOptInterface.PositiveSemidefiniteConeSquare, MathOptInterface.PositiveSemidefiniteConeTriangle, MathOptInterface.Reals, MathOptInterface.RelativeEntropyCone, MathOptInterface.RootDetConeSquare, MathOptInterface.RootDetConeTriangle, MathOptInterface.RotatedSecondOrderCone, MathOptInterface.SecondOrderCone, MathOptInterface.Zeros, MathOptInterface.DualPowerCone, MathOptInterface.EqualTo, MathOptInterface.GreaterThan, MathOptInterface.Interval, MathOptInterface.LessThan, MathOptInterface.PowerCone, MathOptInterface.Semicontinuous, MathOptInterface.Semiinteger}) at /home/pkgeval/.julia/packages/MathOptInterface/R1y80/src/sets.jl:822
    copy(!Matched::F) where F<:Union{MathOptInterface.ScalarQuadraticFunction, MathOptInterface.VectorQuadraticFunction} at /home/pkgeval/.julia/packages/MathOptInterface/R1y80/src/functions.jl:415
    ...
  Stacktrace:
    [1] add_constraint(uf::MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}, f::MathOptInterface.VectorAffineFunction{Float64}, s::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}})
      @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/R1y80/src/Utilities/universalfallback.jl:460
    [2] add_constraint(mock::MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, func::MathOptInterface.VectorAffineFunction{Float64}, set::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}})
      @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/R1y80/src/Utilities/mockoptimizer.jl:113
    [3] add_constraint(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, f::MathOptInterface.VectorAffineFunction{Float64}, s::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}})
      @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/R1y80/src/Bridges/bridge_optimizer.jl:1111
    [4] moi_add_constraint(model::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, f::MathOptInterface.VectorAffineFunction{Float64}, s::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}})
      @ JuMP ~/.julia/packages/JuMP/e0Uc2/src/constraints.jl:390
    [5] add_constraint(model::Model, con::VectorConstraint{AffExpr, PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}}, PolyJuMP.PolynomialShape{Monomial{true}, MonomialVector{true}}}, name::String)
      @ JuMP ~/.julia/packages/JuMP/e0Uc2/src/constraints.jl:402
    [6] add_constraint(model::Model, con::BridgeableConstraint{VectorConstraint{AffExpr, PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}}, PolyJuMP.PolynomialShape{Monomial{true}, MonomialVector{true}}}, UnionAll}, name::String)
      @ JuMP ~/.julia/packages/JuMP/e0Uc2/src/constraints.jl:269
    [7] macro expansion
      @ ~/.julia/packages/JuMP/e0Uc2/src/macros.jl:441 [inlined]
    [8] constrain_convex(model::Model, p::SumOfSquares.GramMatrix{VariableRef, MonomialBasis{Monomial{true}, MonomialVector{true}}, AffExpr}, vars::Vector{PolyVar{true}})
      @ SetProg ~/.julia/packages/SetProg/lVxiA/src/variables.jl:218
    [9] variable_set(model::Model, set::PolySet, space::SetProg.Space, space_dimension::Int64, space_polyvars::Vector{PolyVar{true}})
      @ SetProg ~/.julia/packages/SetProg/lVxiA/src/variables.jl:241
   [10] load(model::Model, vref::SetProg.SetVariableRef{Model, PolySet})
      @ SetProg ~/.julia/packages/SetProg/lVxiA/src/variables.jl:355
   [11] load(model::Model, d::SetProg.Data)
      @ SetProg ~/.julia/packages/SetProg/lVxiA/src/optimize.jl:4
   [12] optimize_hook(model::Model)
      @ SetProg ~/.julia/packages/SetProg/lVxiA/src/optimize.jl:28
   [13] optimize!(model::Model, optimizer_factory::Nothing; bridge_constraints::Bool, ignore_optimize_hook::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ JuMP ~/.julia/packages/JuMP/e0Uc2/src/optimizer_interface.jl:120
   [14] optimize!
      @ ~/.julia/packages/JuMP/e0Uc2/src/optimizer_interface.jl:106 [inlined]
   [15] square_test(optimizer::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, config::MathOptInterface.Test.TestConfig{Float64}, inner::Bool, variable::PolySet, metric::typeof(nth_root), objective_value::Float64, set_test::Main.Tests.var"#19#20"{MathOptInterface.Test.TestConfig{Float64}})
      @ Main.Tests ~/.julia/packages/SetProg/lVxiA/test/Tests/square.jl:33
   [16] quartic_inner_homogeneous_square_test(optimizer::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, config::MathOptInterface.Test.TestConfig{Float64})
      @ Main.Tests ~/.julia/packages/SetProg/lVxiA/test/Tests/square.jl:139
   [17] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/square.jl:89
   [18] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [19] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/square.jl:87
   [20] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [21] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/square.jl:81
   [22] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [23] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/square.jl:26
   [24] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [25] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/mock_tests.jl:6
   [26] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [27] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/runtests.jl:10
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] top-level scope
      @ none:6
   [30] eval(m::Module, e::Any)
      @ Core ./boot.jl:345
   [31] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [32] _start()
      @ Base ./client.jl:485
Outer: Error During Test at /home/pkgeval/.julia/packages/SetProg/lVxiA/test/square.jl:92
  Got exception outside of a @test
  MethodError: no method matching copy(::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}})
  Closest candidates are:
    copy(!Matched::S) where S<:Union{MathOptInterface.SOS1, MathOptInterface.SOS2} at /home/pkgeval/.julia/packages/MathOptInterface/R1y80/src/sets.jl:837
    copy(!Matched::Union{MathOptInterface.DualExponentialCone, MathOptInterface.ExponentialCone, MathOptInterface.Integer, MathOptInterface.ZeroOne, MathOptInterface.Complements, MathOptInterface.GeometricMeanCone, MathOptInterface.LogDetConeSquare, MathOptInterface.LogDetConeTriangle, MathOptInterface.Nonnegatives, MathOptInterface.Nonpositives, MathOptInterface.NormInfinityCone, MathOptInterface.NormNuclearCone, MathOptInterface.NormOneCone, MathOptInterface.NormSpectralCone, MathOptInterface.PositiveSemidefiniteConeSquare, MathOptInterface.PositiveSemidefiniteConeTriangle, MathOptInterface.Reals, MathOptInterface.RelativeEntropyCone, MathOptInterface.RootDetConeSquare, MathOptInterface.RootDetConeTriangle, MathOptInterface.RotatedSecondOrderCone, MathOptInterface.SecondOrderCone, MathOptInterface.Zeros, MathOptInterface.DualPowerCone, MathOptInterface.EqualTo, MathOptInterface.GreaterThan, MathOptInterface.Interval, MathOptInterface.LessThan, MathOptInterface.PowerCone, MathOptInterface.Semicontinuous, MathOptInterface.Semiinteger}) at /home/pkgeval/.julia/packages/MathOptInterface/R1y80/src/sets.jl:822
    copy(!Matched::F) where F<:Union{MathOptInterface.ScalarQuadraticFunction, MathOptInterface.VectorQuadraticFunction} at /home/pkgeval/.julia/packages/MathOptInterface/R1y80/src/functions.jl:415
    ...
  Stacktrace:
    [1] add_constraint(uf::MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}, f::MathOptInterface.VectorAffineFunction{Float64}, s::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}})
      @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/R1y80/src/Utilities/universalfallback.jl:460
    [2] add_constraint(mock::MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, func::MathOptInterface.VectorAffineFunction{Float64}, set::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}})
      @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/R1y80/src/Utilities/mockoptimizer.jl:113
    [3] add_constraint(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, f::MathOptInterface.VectorAffineFunction{Float64}, s::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}})
      @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/R1y80/src/Bridges/bridge_optimizer.jl:1111
    [4] moi_add_constraint(model::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, f::MathOptInterface.VectorAffineFunction{Float64}, s::PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}})
      @ JuMP ~/.julia/packages/JuMP/e0Uc2/src/constraints.jl:390
    [5] add_constraint(model::Model, con::VectorConstraint{AffExpr, PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}}, PolyJuMP.PolynomialShape{Monomial{true}, MonomialVector{true}}}, name::String)
      @ JuMP ~/.julia/packages/JuMP/e0Uc2/src/constraints.jl:402
    [6] add_constraint(model::Model, con::BridgeableConstraint{VectorConstraint{AffExpr, PolyJuMP.ZeroPolynomialSet{SemialgebraicSets.FullSpace, MonomialBasis, Monomial{true}, MonomialVector{true}}, PolyJuMP.PolynomialShape{Monomial{true}, MonomialVector{true}}}, UnionAll}, name::String)
      @ JuMP ~/.julia/packages/JuMP/e0Uc2/src/constraints.jl:269
    [7] macro expansion
      @ ~/.julia/packages/JuMP/e0Uc2/src/macros.jl:441 [inlined]
    [8] constrain_convex(model::Model, p::SumOfSquares.GramMatrix{VariableRef, MonomialBasis{Monomial{true}, MonomialVector{true}}, AffExpr}, vars::Vector{PolyVar{true}})
      @ SetProg ~/.julia/packages/SetProg/lVxiA/src/variables.jl:218
    [9] variable_set(model::Model, set::PolySet, space::SetProg.Space, space_dimension::Int64, space_polyvars::Vector{PolyVar{true}})
      @ SetProg ~/.julia/packages/SetProg/lVxiA/src/variables.jl:241
   [10] load(model::Model, vref::SetProg.SetVariableRef{Model, PolySet})
      @ SetProg ~/.julia/packages/SetProg/lVxiA/src/variables.jl:355
   [11] load(model::Model, d::SetProg.Data)
      @ SetProg ~/.julia/packages/SetProg/lVxiA/src/optimize.jl:4
   [12] optimize_hook(model::Model)
      @ SetProg ~/.julia/packages/SetProg/lVxiA/src/optimize.jl:28
   [13] optimize!(model::Model, optimizer_factory::Nothing; bridge_constraints::Bool, ignore_optimize_hook::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ JuMP ~/.julia/packages/JuMP/e0Uc2/src/optimizer_interface.jl:120
   [14] optimize!
      @ ~/.julia/packages/JuMP/e0Uc2/src/optimizer_interface.jl:106 [inlined]
   [15] square_test(optimizer::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, config::MathOptInterface.Test.TestConfig{Float64}, inner::Bool, variable::PolySet, metric::typeof(nth_root), objective_value::Float64, set_test::Main.Tests.var"#21#22"{MathOptInterface.Test.TestConfig{Float64}})
      @ Main.Tests ~/.julia/packages/SetProg/lVxiA/test/Tests/square.jl:33
   [16] quartic_outer_homogeneous_square_test(optimizer::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.MockOptimizer{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, config::MathOptInterface.Test.TestConfig{Float64})
      @ Main.Tests ~/.julia/packages/SetProg/lVxiA/test/Tests/square.jl:163
   [17] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/square.jl:95
   [18] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [19] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/square.jl:93
   [20] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [21] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/square.jl:81
   [22] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [23] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/square.jl:26
   [24] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [25] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/mock_tests.jl:6
   [26] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [27] top-level scope
      @ ~/.julia/packages/SetProg/lVxiA/test/runtests.jl:10
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] top-level scope
      @ none:6
   [30] eval(m::Module, e::Any)
      @ Core ./boot.jl:345
   [31] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [32] _start()
      @ Base ./client.jl:485
Test Summary:         | Pass  Error  Total
Square                |   19      4     23
  Ellipsoid           |   19      2     21
    John              |   14      2     16
      Homogeneous     |    5             5
      Non-homogeneous |    9      1     10
        Ellipsoid     |    9             9
        PolySet       |           1      1
      Piecewise       |           1      1
    Löwner            |    5             5
  Quartic             |           2      2
    Inner             |           1      1
    Outer             |           1      1
ERROR: LoadError: LoadError: LoadError: Some tests did not pass: 19 passed, 0 failed, 4 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/SetProg/lVxiA/test/square.jl:25
in expression starting at /home/pkgeval/.julia/packages/SetProg/lVxiA/test/mock_tests.jl:6
in expression starting at /home/pkgeval/.julia/packages/SetProg/lVxiA/test/runtests.jl:10
ERROR: Package SetProg errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String, N} where N)
    @ Pkg.Types /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1580
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:328
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:315
  [5] #test#62
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#61
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:19
