Julia Version 1.6.0-DEV.913
Commit 4c805d2310 (2020-09-14 14:07 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_Yn7oQ6/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_Yn7oQ6/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21702121687029993
curgen: 20 fitness: 0.21702121687029993
curgen: 30 fitness: 0.21722448384032064
curgen: 40 fitness: 0.21722620788241476
curgen: 50 fitness: 0.21722620788241476
CoordinateCreature{Vector{Float64}}([-0.22213929357467], -0.21722620788241476) -0.22213929357467 -0.21722620788241476
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2579033077893302
curgen: 100 fitness: 3.25810144749905
curgen: 150 fitness: 3.258321040909096
curgen: 200 fitness: 3.258370777308538
curgen: 250 fitness: 3.258425763124762
curgen: 300 fitness: 3.258427189087268
curgen: 350 fitness: 3.258431517107965
curgen: 400 fitness: 3.258431517107965
curgen: 450 fitness: 3.2584385503069213
curgen: 500 fitness: 3.2584394151800797
CoordinateCreature{Vector{Float64}}([0.22231277175656386, -0.22270918997148648, -0.22241288045384194, -0.22265402626325248, 0.22257279864506316, 0.22271955786016576, 0.222772044730227, 0.22235997400204077, -0.2226483907025029, -0.22247025241891166, -0.22261013430699084, 0.22256738232408133, 0.2225247169263292, -0.22267294513243666, 0.221453864222887], -3.2584394151800797) [0.22231277175656386, -0.22270918997148648, -0.22241288045384194, -0.22265402626325248, 0.22257279864506316, 0.22271955786016576, 0.222772044730227, 0.22235997400204077, -0.2226483907025029, -0.22247025241891166, -0.22261013430699084, 0.22256738232408133, 0.2225247169263292, -0.22267294513243666, 0.221453864222887] -3.2584394151800797
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.001772342879860389
curgen: 100 fitness: -0.001772342879860389
curgen: 150 fitness: -0.0014029052120463348
curgen: 200 fitness: -0.0013974025686991354
curgen: 250 fitness: -0.0010645727792280013
curgen: 300 fitness: -0.0009806268327281487
curgen: 350 fitness: -0.0009806268327281487
curgen: 400 fitness: -0.0009806268327281487
curgen: 450 fitness: -0.0009161554541776695
curgen: 500 fitness: -0.0009161554541776695
CoordinateCreature{Vector{Float64}}([-0.0008953075908265512, 0.00015455203317787025, -0.0011074839951983944, 9.804593610274952e-6, -0.0007927171663982144, -0.0002758545305830419, -0.00030965543408740083, -0.0002534843020503835, 0.0008768340226008517, 6.697113762225634e-5, -0.0008576866023641515, -1.9910434748732393e-5, -0.00038442837319835435, -0.00019403934004444748, 8.010735073443883e-5], 0.0009161554541776695) [-0.0008953075908265512, 0.00015455203317787025, -0.0011074839951983944, 9.804593610274952e-6, -0.0007927171663982144, -0.0002758545305830419, -0.00030965543408740083, -0.0002534843020503835, 0.0008768340226008517, 6.697113762225634e-5, -0.0008576866023641515, -1.9910434748732393e-5, -0.00038442837319835435, -0.00019403934004444748, 8.010735073443883e-5] 0.0009161554541776695
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
