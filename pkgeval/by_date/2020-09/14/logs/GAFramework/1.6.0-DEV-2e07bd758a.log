Julia Version 1.6.0-DEV.910
Commit 2e07bd758a (2020-09-13 14:10 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_tg5kJO/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_tg5kJO/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21722944911707193
curgen: 20 fitness: 0.21723167927749482
curgen: 30 fitness: 0.21723167927749482
curgen: 40 fitness: 0.21723167927749482
curgen: 50 fitness: 0.21723167927749482
CoordinateCreature{Vector{Float64}}([-0.2223384936952008], -0.21723167927749482) -0.2223384936952008 -0.21723167927749482
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257911621525694
curgen: 100 fitness: 3.2580898103143334
curgen: 150 fitness: 3.2581472153360718
curgen: 200 fitness: 3.2583527451695167
curgen: 250 fitness: 3.258355196310363
curgen: 300 fitness: 3.2583654784964993
curgen: 350 fitness: 3.258403508595493
curgen: 400 fitness: 3.2584046808860454
curgen: 450 fitness: 3.258405740714668
curgen: 500 fitness: 3.258446672155281
CoordinateCreature{Vector{Float64}}([-0.22307621852462944, 0.22233428662689764, 0.2229775599937795, -0.22215829919433658, -0.22247253021874613, 0.2222693037974109, 0.22270911194764556, 0.22241064807677993, -0.22230573403482745, 0.22261282465294818, 0.22192443357542824, -0.22239655533071503, -0.2223906705664058, 0.22248552404464747, 0.22265079417707692], -3.258446672155281) [-0.22307621852462944, 0.22233428662689764, 0.2229775599937795, -0.22215829919433658, -0.22247253021874613, 0.2222693037974109, 0.22270911194764556, 0.22241064807677993, -0.22230573403482745, 0.22261282465294818, 0.22192443357542824, -0.22239655533071503, -0.2223906705664058, 0.22248552404464747, 0.22265079417707692] -3.258446672155281
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0027030110703378796
curgen: 100 fitness: -0.0018607749241539295
curgen: 150 fitness: -0.0014870961749409162
curgen: 200 fitness: -0.0014870961749409162
curgen: 250 fitness: -0.0012562192151790441
curgen: 300 fitness: -0.0009330616473732789
curgen: 350 fitness: -0.0009330616473732789
curgen: 400 fitness: -0.0009330616473732789
curgen: 450 fitness: -0.0009330616473732789
curgen: 500 fitness: -0.0009330616473732789
CoordinateCreature{Vector{Float64}}([-9.093043136246335e-5, 0.00011908437724776367, 0.00030727572226803106, 0.0004614959494902683, 0.000820646021054699, -0.0013907375972661061, -0.0003080188703925967, -4.094808647253363e-5, 0.000871944418415563, 0.0003074423648435665, -0.00040995807921518994, 0.000750822371061232, -3.073212028358724e-5, -0.000188618122159704, 0.00021447054173838977], 0.0009330616473732789) [-9.093043136246335e-5, 0.00011908437724776367, 0.00030727572226803106, 0.0004614959494902683, 0.000820646021054699, -0.0013907375972661061, -0.0003080188703925967, -4.094808647253363e-5, 0.000871944418415563, 0.0003074423648435665, -0.00040995807921518994, 0.000750822371061232, -3.073212028358724e-5, -0.000188618122159704, 0.00021447054173838977] 0.0009330616473732789
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
