Julia Version 1.6.0-DEV.878
Commit 08486888ba (2020-09-09 16:27 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_ICqSdI/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_ICqSdI/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21722034680126195
curgen: 20 fitness: 0.2172336281357688
curgen: 30 fitness: 0.2172336281357688
curgen: 40 fitness: 0.2172336281357688
curgen: 50 fitness: 0.21723362815587635
CoordinateCreature{Vector{Float64}}([-0.22254704045424573], -0.21723362815587635) -0.22254704045424573 -0.21723362815587635
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257859969517692
curgen: 100 fitness: 3.25816472169766
curgen: 150 fitness: 3.2582452497133625
curgen: 200 fitness: 3.2583654677891674
curgen: 250 fitness: 3.2584201457522908
curgen: 300 fitness: 3.258427547631259
curgen: 350 fitness: 3.258427547631259
curgen: 400 fitness: 3.2584278119383905
curgen: 450 fitness: 3.2584285184523942
curgen: 500 fitness: 3.258428744636407
CoordinateCreature{Vector{Float64}}([-0.22228511569688372, -0.22241648683847937, -0.22264352237904309, 0.22253997492394156, -0.22280175681387732, -0.2226222290133381, 0.22246390608410635, 0.22363555651055153, -0.2226760324239921, -0.22260504531971248, -0.22279467565433658, 0.2225639590998154, 0.22249639882972164, 0.22206183312261452, -0.22275173030102577], -3.258428744636407) [-0.22228511569688372, -0.22241648683847937, -0.22264352237904309, 0.22253997492394156, -0.22280175681387732, -0.2226222290133381, 0.22246390608410635, 0.22363555651055153, -0.2226760324239921, -0.22260504531971248, -0.22279467565433658, 0.2225639590998154, 0.22249639882972164, 0.22206183312261452, -0.22275173030102577] -3.258428744636407
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0014249704022972765
curgen: 100 fitness: -0.0011933105333241656
curgen: 150 fitness: -0.0011933105333241656
curgen: 200 fitness: -0.0011288349394078523
curgen: 250 fitness: -0.0011288349394078523
curgen: 300 fitness: -0.0009179462372799208
curgen: 350 fitness: -0.0003859479868708604
curgen: 400 fitness: -0.0003859479868708604
curgen: 450 fitness: -0.0003859479868708604
curgen: 500 fitness: -0.0003859479868708604
CoordinateCreature{Vector{Float64}}([1.567518378163718e-5, 0.000587908971466258, 0.00025035515615599033, -0.00015686689688374379, 0.0006315132589185552, 0.0001624755759320147, -2.6882734825199595e-5, 0.00015968027553567461, 3.3651299448315096e-5, 0.0007509488468485125, 0.00023101506705009225, 0.00028949570021777457, -0.00019498119363878371, -0.0005634256490354692, -5.5573942495717706e-5], 0.0003859479868708604) [1.567518378163718e-5, 0.000587908971466258, 0.00025035515615599033, -0.00015686689688374379, 0.0006315132589185552, 0.0001624755759320147, -2.6882734825199595e-5, 0.00015968027553567461, 3.3651299448315096e-5, 0.0007509488468485125, 0.00023101506705009225, 0.00028949570021777457, -0.00019498119363878371, -0.0005634256490354692, -5.5573942495717706e-5] 0.0003859479868708604
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
