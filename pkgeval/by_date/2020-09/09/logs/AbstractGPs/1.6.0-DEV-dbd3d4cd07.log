Julia Version 1.6.0-DEV.861
Commit dbd3d4cd07 (2020-09-08 15:20 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed ZygoteRules ────────────────── v0.2.0
  Installed Reexport ───────────────────── v0.2.0
  Installed PDMats ─────────────────────── v0.10.0
  Installed Rmath ──────────────────────── v0.6.1
  Installed RecipesBase ────────────────── v1.1.0
  Installed OrderedCollections ─────────── v1.3.0
  Installed ChainRulesCore ─────────────── v0.9.8
  Installed AbstractGPs ────────────────── v0.2.8
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed Functors ───────────────────── v0.1.0
  Installed MuladdMacro ────────────────── v0.2.2
  Installed Requires ───────────────────── v1.0.2
  Installed DataStructures ─────────────── v0.18.4
  Installed Missings ───────────────────── v0.4.4
  Installed StatsBase ──────────────────── v0.33.1
  Installed DataAPI ────────────────────── v1.3.0
  Installed Distances ──────────────────── v0.9.0
  Installed FillArrays ─────────────────── v0.9.6
  Installed SpecialFunctions ───────────── v0.10.3
  Installed QuadGK ─────────────────────── v2.4.1
  Installed Compat ─────────────────────── v3.15.0
  Installed Rmath_jll ──────────────────── v0.2.2+1
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed MacroTools ─────────────────── v0.5.5
  Installed StatsFuns ──────────────────── v0.9.5
  Installed Distributions ──────────────── v0.23.11
  Installed KernelFunctions ────────────── v0.7.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [99985d1d] + AbstractGPs v0.2.8
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [99985d1d] + AbstractGPs v0.2.8
  [d360d2e6] + ChainRulesCore v0.9.8
  [34da2185] + Compat v3.15.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.18.4
  [b4f34e82] + Distances v0.9.0
  [31c24e10] + Distributions v0.23.11
  [1a297f60] + FillArrays v0.9.6
  [d9f16b24] + Functors v0.1.0
  [ec8451be] + KernelFunctions v0.7.2
  [1914dd2f] + MacroTools v0.5.5
  [e1d29d7a] + Missings v0.4.4
  [46d2c3a1] + MuladdMacro v0.2.2
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.3.0
  [90014a1f] + PDMats v0.10.0
  [1fd47b50] + QuadGK v2.4.1
  [3cdcf5f2] + RecipesBase v1.1.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.2
  [79098fc4] + Rmath v0.6.1
  [f50d1b31] + Rmath_jll v0.2.2+1
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.3
  [2913bbd2] + StatsBase v0.33.1
  [4c63d2b9] + StatsFuns v0.9.5
  [700de1a5] + ZygoteRules v0.2.0
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing AbstractGPs
Status `/tmp/jl_WjSwzK/Project.toml`
  [99985d1d] AbstractGPs v0.2.8
  [d360d2e6] ChainRulesCore v0.9.8
  [31c24e10] Distributions v0.23.11
  [e30172f5] Documenter v0.25.2
  [26cc04aa] FiniteDifferences v0.10.8
  [91a5bcdd] Plots v1.6.3
  [fce5fe82] Turing v0.14.1
  [e88e6eb3] Zygote v0.5.6
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_WjSwzK/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [99985d1d] AbstractGPs v0.2.8
  [80f14c24] AbstractMCMC v1.0.1
  [1520ce14] AbstractTrees v0.3.3
  [79e6a3ab] Adapt v2.0.2
  [0bf59076] AdvancedHMC v0.2.25
  [5b7e9947] AdvancedMH v0.5.1
  [b5ca4192] AdvancedVI v0.1.0
  [dce04be8] ArgCheck v2.1.0
  [4fba245c] ArrayInterface v2.12.0
  [4c555306] ArrayLayouts v0.4.7
  [39de3d68] AxisArrays v0.4.3
  [6e4b80f9] BenchmarkTools v0.5.0
  [76274a88] Bijectors v0.8.3
  [b99e7846] BinaryProvider v0.5.10
  [6e34b625] Bzip2_jll v1.0.6+4
  [082447d4] ChainRules v0.7.18
  [d360d2e6] ChainRulesCore v0.9.8
  [35d6a980] ColorSchemes v3.9.0
  [3da002f7] ColorTypes v0.10.9
  [5ae59095] Colors v0.12.4
  [861a8166] Combinatorics v1.0.2
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.15.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [88cd18e8] ConsoleProgressMonitor v0.1.2
  [d38c429a] Contour v0.5.5
  [adafc99b] CpuId v0.2.2
  [a8cc5b0e] Crayons v4.0.4
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.18.4
  [e2d170a0] DataValueInterfaces v1.0.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.9.0
  [31c24e10] Distributions v0.23.11
  [ced4e74d] DistributionsAD v0.6.7
  [ffbed154] DocStringExtensions v0.8.3
  [e30172f5] Documenter v0.25.2
  [366bfd00] DynamicPPL v0.9.1
  [da5c29d0] EllipsisNotation v0.4.0
  [cad2338a] EllipticalSliceSampling v0.2.2
  [c87230d0] FFMPEG v0.4.0
  [b22a6f82] FFMPEG_jll v4.3.1+2
  [1a297f60] FillArrays v0.9.6
  [26cc04aa] FiniteDifferences v0.10.8
  [53c48c17] FixedPointNumbers v0.8.4
  [59287772] Formatting v0.4.1
  [f6369f11] ForwardDiff v0.10.12
  [d7e528f0] FreeType2_jll v2.10.1+4
  [559328eb] FriBidi_jll v1.0.5+5
  [d9f16b24] Functors v0.1.0
  [28b8d3ca] GR v0.52.0
  [5c1252a2] GeometryBasics v0.2.15
  [4d00f742] GeometryTypes v0.8.3
  [cd3eb016] HTTP v0.8.17
  [7869d1d1] IRTools v0.4.1
  [83e8ac13] IniFile v0.5.0
  [505f98c9] InplaceOps v0.3.0
  [8197267c] IntervalSets v0.5.1
  [41ab1584] InvertedIndices v1.0.0
  [c8e1da08] IterTools v1.3.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.1
  [ec8451be] KernelFunctions v0.7.2
  [c1c5ebd0] LAME_jll v3.100.0+2
  [1d6d02ad] LeftChildRightSiblingTrees v0.1.2
  [dd192d2f] LibVPX_jll v1.9.0+0
  [6f1fad26] Libtask v0.4.1
  [6fdf6af0] LogDensityProblems v0.10.3
  [e6f89c97] LoggingExtras v0.4.2
  [bdcacae8] LoopVectorization v0.8.26
  [c7f686f2] MCMCChains v4.1.0
  [1914dd2f] MacroTools v0.5.5
  [dbb5928d] MappedArrays v0.2.2
  [739be429] MbedTLS v1.0.2
  [c8ffd9c3] MbedTLS_jll v2.16.8+0
  [442fdcdd] Measures v0.3.1
  [e1d29d7a] Missings v0.4.4
  [46d2c3a1] MuladdMacro v0.2.2
  [872c559c] NNlib v0.7.4
  [77ba4419] NaNMath v0.3.4
  [86f7a689] NamedArrays v0.9.4
  [c020b1a1] NaturalSort v1.0.0
  [6fe1bfb0] OffsetArrays v1.1.3
  [e7412a2a] Ogg_jll v1.3.4+1
  [458c3c95] OpenSSL_jll v1.1.1+5
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [91d4177d] Opus_jll v1.3.1+2
  [bac558e1] OrderedCollections v1.3.0
  [90014a1f] PDMats v0.10.0
  [d96e819e] Parameters v0.12.1
  [69de0a69] Parsers v1.0.10
  [ccf2f8ad] PlotThemes v2.0.0
  [995b91a9] PlotUtils v1.0.6
  [91a5bcdd] Plots v1.6.3
  [08abe8d2] PrettyTables v0.9.1
  [33c8b6b6] ProgressLogging v0.1.3
  [92933f4c] ProgressMeter v1.3.2
  [1fd47b50] QuadGK v2.4.1
  [b3c3ace0] RangeArrays v0.3.2
  [3cdcf5f2] RecipesBase v1.1.0
  [01d81517] RecipesPipeline v0.1.13
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.2
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+1
  [f2b01f46] Roots v1.0.5
  [21efa798] SIMDPirates v0.8.25
  [476501e8] SLEEFPirates v0.5.5
  [992d4aef] Showoff v0.3.1
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.1
  [4c63d2b9] StatsFuns v0.9.5
  [09ab397b] StructArrays v0.4.4
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.5
  [5d786b92] TerminalLoggers v0.1.2
  [9f7883ad] Tracker v0.2.11
  [84d833dd] TransformVariables v0.3.10
  [fce5fe82] Turing v0.14.1
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.33
  [83775a58] Zlib_jll v1.2.11+16
  [e88e6eb3] Zygote v0.5.6
  [700de1a5] ZygoteRules v0.2.0
  [0ac62f75] libass_jll v0.14.0+3
  [f638f0a6] libfdk_aac_jll v0.1.6+3
  [f27f6e37] libvorbis_jll v1.3.6+5
  [1270edf5] x264_jll v2020.7.14+1
  [dfaa095f] x265_jll v3.0.0+2
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
tr_At_A: Error During Test at /home/pkgeval/.julia/packages/AbstractGPs/JmfZo/test/util/common_covmat_ops.jl:79
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2778#1234
      @ ~/.julia/packages/Zygote/Xgcgs/src/compiler/interface2.jl:34 [inlined]
    [4] #s2778#1234(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:556
    [6] _pullback(f::Function, args::Matrix{Float64})
      @ Zygote ~/.julia/packages/Zygote/Xgcgs/src/compiler/interface.jl:38
    [7] pullback(f::Function, args::Matrix{Float64})
      @ Zygote ~/.julia/packages/Zygote/Xgcgs/src/compiler/interface.jl:44
    [8] adjoint_test(f::Function, ȳ::Float64, x::Matrix{Float64}; rtol::Float64, atol::Float64, fdm::FiniteDifferences.Central{UnitRange{Int64}, Vector{Float64}}, print_results::Bool)
      @ Main ~/.julia/packages/AbstractGPs/JmfZo/test/test_util.jl:60
    [9] adjoint_test(f::Function, ȳ::Float64, x::Matrix{Float64})
      @ Main ~/.julia/packages/AbstractGPs/JmfZo/test/test_util.jl:60
   [10] top-level scope
      @ ~/.julia/packages/AbstractGPs/JmfZo/test/util/common_covmat_ops.jl:84
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [12] top-level scope
      @ ~/.julia/packages/AbstractGPs/JmfZo/test/util/common_covmat_ops.jl:80
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [14] top-level scope
      @ ~/.julia/packages/AbstractGPs/JmfZo/test/util/common_covmat_ops.jl:2
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] top-level scope
      @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:26
   [17] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [18] top-level scope
      @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:26
   [19] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [20] top-level scope
      @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:25
   [21] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [22] top-level scope
      @ none:6
   [23] eval(m::Module, e::Any)
      @ Core ./boot.jl:345
   [24] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [25] _start()
      @ Base ./client.jl:485
┌ Error: Exception while generating log record in module AbstractMCMC at /home/pkgeval/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
│   exception =
│    ArgumentError: mismatch between # of format specifiers and provided args: 3 != 4
│    Stacktrace:
│      [1] argmismatch(a::Int64, b::Int64)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:705
│      [2] format(::IOContext{IOBuffer}, ::Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Val{'s'}}, Printf.Spec{Val{'u'}}, Printf.Spec{Val{'s'}}}}, ::String, ::Int64, ::Vararg{Any, N} where N)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:719
│      [3] printprogress(io::IOContext{IOBuffer}, barglyphs::TerminalLoggers.ProgressMeter.BarGlyphs, tfirst::Float64, desc::String, progress::Nothing, eta_seconds::Float64)
│        @ TerminalLoggers.ProgressMeter ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressMeter/ProgressMeter.jl:65
│      [4] printprogress(io::IOContext{IOBuffer}, bar::TerminalLoggers.ProgressBar)
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressBar.jl:42
│      [5] (::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}})(isfirst::Bool, node::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:232
│      [6] foldtree(op::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}}, acc::Bool, tree::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:186
│      [7] foldtree
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:183 [inlined]
│      [8] (::TerminalLoggers.var"#21#26"{TerminalLoggers.TerminalLogger})(io::IOContext{IOBuffer})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:230
│      [9] sprint(::Function; context::Pair{Symbol, Tuple{Int64, Int64}}, sizehint::Int64)
│        @ Base ./strings/io.jl:103
│     [10] handle_progress(logger::TerminalLoggers.TerminalLogger, progress::ProgressLogging.Progress, kwargs::Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Nothing}}})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:229
│     [11] #handle_message#30
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:268 [inlined]
│     [12] #handle_message#8
│        @ ~/.julia/packages/LoggingExtras/Qf118/src/earlyfiltered.jl:26 [inlined]
│     [13] handle_message(::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}}, ::Base.CoreLogging.LogLevel, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Nothing}}})
│        @ LoggingExtras ~/.julia/packages/LoggingExtras/Qf118/src/tee.jl:24
│     [14] macro expansion
│        @ ./logging.jl:297 [inlined]
│     [15] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385 [inlined]
│     [16] (::AbstractMCMC.var"#18#21"{Bool, String, AbstractMCMC.var"#20#23", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Int64})()
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:11
│     [17] with_logstate(f::Function, logstate::Any)
│        @ Base.CoreLogging ./logging.jl:430
│     [18] with_logger(f::Function, logger::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}})
│        @ Base.CoreLogging ./logging.jl:542
│     [19] with_progresslogger(f::Function, _module::Module, logger::Logging.ConsoleLogger)
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:34
│     [20] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:10 [inlined]
│     [21] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
│     [22] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:178
│     [23] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:177
│     [24] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164
│     [25] sample
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164 [inlined]
│     [26] #sample#1
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154 [inlined]
│     [27] sample(model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154
│     [28] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:21
│     [29] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [30] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:2
│     [31] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [32] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:45
│     [33] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [34] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:25
│     [35] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [36] top-level scope
│        @ none:6
│     [37] eval(m::Module, e::Any)
│        @ Core ./boot.jl:345
│     [38] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [39] _start()
│        @ Base ./client.jl:485
└ @ AbstractMCMC ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
┌ Error: Exception while generating log record in module AbstractMCMC at /home/pkgeval/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
│   exception =
│    ArgumentError: mismatch between # of format specifiers and provided args: 3 != 4
│    Stacktrace:
│      [1] argmismatch(a::Int64, b::Int64)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:705
│      [2] format(::IOContext{IOBuffer}, ::Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Val{'s'}}, Printf.Spec{Val{'u'}}, Printf.Spec{Val{'s'}}}}, ::String, ::Int64, ::Vararg{Any, N} where N)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:719
│      [3] printprogress(io::IOContext{IOBuffer}, barglyphs::TerminalLoggers.ProgressMeter.BarGlyphs, tfirst::Float64, desc::String, progress::Float64, eta_seconds::Float64)
│        @ TerminalLoggers.ProgressMeter ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressMeter/ProgressMeter.jl:65
│      [4] printprogress(io::IOContext{IOBuffer}, bar::TerminalLoggers.ProgressBar)
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressBar.jl:42
│      [5] (::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}})(isfirst::Bool, node::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:232
│      [6] foldtree(op::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}}, acc::Bool, tree::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:186
│      [7] foldtree
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:183 [inlined]
│      [8] (::TerminalLoggers.var"#21#26"{TerminalLoggers.TerminalLogger})(io::IOContext{IOBuffer})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:230
│      [9] sprint(::Function; context::Pair{Symbol, Tuple{Int64, Int64}}, sizehint::Int64)
│        @ Base ./strings/io.jl:103
│     [10] handle_progress(logger::TerminalLoggers.TerminalLogger, progress::ProgressLogging.Progress, kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:229
│     [11] #handle_message#30
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:268 [inlined]
│     [12] #handle_message#8
│        @ ~/.julia/packages/LoggingExtras/Qf118/src/earlyfiltered.jl:26 [inlined]
│     [13] handle_message(::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}}, ::Base.CoreLogging.LogLevel, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ LoggingExtras ~/.julia/packages/LoggingExtras/Qf118/src/tee.jl:24
│     [14] macro expansion
│        @ ./logging.jl:297 [inlined]
│     [15] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385 [inlined]
│     [16] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:88 [inlined]
│     [17] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:328 [inlined]
│     [18] (::AbstractMCMC.var"#18#21"{Bool, String, AbstractMCMC.var"#20#23", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Int64})()
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:11
│     [19] with_logstate(f::Function, logstate::Any)
│        @ Base.CoreLogging ./logging.jl:430
│     [20] with_logger(f::Function, logger::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}})
│        @ Base.CoreLogging ./logging.jl:542
│     [21] with_progresslogger(f::Function, _module::Module, logger::Logging.ConsoleLogger)
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:34
│     [22] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:10 [inlined]
│     [23] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
│     [24] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:178
│     [25] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:177
│     [26] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164
│     [27] sample
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164 [inlined]
│     [28] #sample#1
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154 [inlined]
│     [29] sample(model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154
│     [30] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:21
│     [31] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [32] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:2
│     [33] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [34] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:45
│     [35] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [36] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:25
│     [37] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [38] top-level scope
│        @ none:6
│     [39] eval(m::Module, e::Any)
│        @ Core ./boot.jl:345
│     [40] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [41] _start()
│        @ Base ./client.jl:485
└ @ AbstractMCMC ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
┌ Error: Exception while generating log record in module AbstractMCMC at /home/pkgeval/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
│   exception =
│    ArgumentError: mismatch between # of format specifiers and provided args: 3 != 4
│    Stacktrace:
│      [1] argmismatch(a::Int64, b::Int64)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:705
│      [2] format(::IOContext{IOBuffer}, ::Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Val{'s'}}, Printf.Spec{Val{'u'}}, Printf.Spec{Val{'s'}}}}, ::String, ::Int64, ::Vararg{Any, N} where N)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:719
│      [3] printprogress(io::IOContext{IOBuffer}, barglyphs::TerminalLoggers.ProgressMeter.BarGlyphs, tfirst::Float64, desc::String, progress::Float64, eta_seconds::Float64)
│        @ TerminalLoggers.ProgressMeter ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressMeter/ProgressMeter.jl:65
│      [4] printprogress(io::IOContext{IOBuffer}, bar::TerminalLoggers.ProgressBar)
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressBar.jl:42
│      [5] (::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}})(isfirst::Bool, node::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:232
│      [6] foldtree(op::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}}, acc::Bool, tree::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:186
│      [7] foldtree
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:183 [inlined]
│      [8] (::TerminalLoggers.var"#21#26"{TerminalLoggers.TerminalLogger})(io::IOContext{IOBuffer})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:230
│      [9] sprint(::Function; context::Pair{Symbol, Tuple{Int64, Int64}}, sizehint::Int64)
│        @ Base ./strings/io.jl:103
│     [10] handle_progress(logger::TerminalLoggers.TerminalLogger, progress::ProgressLogging.Progress, kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:229
│     [11] #handle_message#30
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:268 [inlined]
│     [12] #handle_message#8
│        @ ~/.julia/packages/LoggingExtras/Qf118/src/earlyfiltered.jl:26 [inlined]
│     [13] handle_message(::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}}, ::Base.CoreLogging.LogLevel, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ LoggingExtras ~/.julia/packages/LoggingExtras/Qf118/src/tee.jl:24
│     [14] macro expansion
│        @ ./logging.jl:297 [inlined]
│     [15] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385 [inlined]
│     [16] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:102 [inlined]
│     [17] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:328 [inlined]
│     [18] (::AbstractMCMC.var"#18#21"{Bool, String, AbstractMCMC.var"#20#23", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Int64})()
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:11
│     [19] with_logstate(f::Function, logstate::Any)
│        @ Base.CoreLogging ./logging.jl:430
│     [20] with_logger(f::Function, logger::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}})
│        @ Base.CoreLogging ./logging.jl:542
│     [21] with_progresslogger(f::Function, _module::Module, logger::Logging.ConsoleLogger)
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:34
│     [22] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:10 [inlined]
│     [23] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
│     [24] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:178
│     [25] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:177
│     [26] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164
│     [27] sample
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164 [inlined]
│     [28] #sample#1
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154 [inlined]
│     [29] sample(model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154
│     [30] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:21
│     [31] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [32] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:2
│     [33] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [34] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:45
│     [35] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [36] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:25
│     [37] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [38] top-level scope
│        @ none:6
│     [39] eval(m::Module, e::Any)
│        @ Core ./boot.jl:345
│     [40] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [41] _start()
│        @ Base ./client.jl:485
└ @ AbstractMCMC ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
┌ Error: Exception while generating log record in module AbstractMCMC at /home/pkgeval/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
│   exception =
│    ArgumentError: mismatch between # of format specifiers and provided args: 3 != 4
│    Stacktrace:
│      [1] argmismatch(a::Int64, b::Int64)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:705
│      [2] format(::IOContext{IOBuffer}, ::Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Val{'s'}}, Printf.Spec{Val{'u'}}, Printf.Spec{Val{'s'}}}}, ::String, ::Int64, ::Vararg{Any, N} where N)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:719
│      [3] printprogress(io::IOContext{IOBuffer}, barglyphs::TerminalLoggers.ProgressMeter.BarGlyphs, tfirst::Float64, desc::String, progress::Float64, eta_seconds::Float64)
│        @ TerminalLoggers.ProgressMeter ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressMeter/ProgressMeter.jl:65
│      [4] printprogress(io::IOContext{IOBuffer}, bar::TerminalLoggers.ProgressBar)
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressBar.jl:42
│      [5] (::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}})(isfirst::Bool, node::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:232
│      [6] foldtree(op::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}}, acc::Bool, tree::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:186
│      [7] foldtree
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:183 [inlined]
│      [8] (::TerminalLoggers.var"#21#26"{TerminalLoggers.TerminalLogger})(io::IOContext{IOBuffer})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:230
│      [9] sprint(::Function; context::Pair{Symbol, Tuple{Int64, Int64}}, sizehint::Int64)
│        @ Base ./strings/io.jl:103
│     [10] handle_progress(logger::TerminalLoggers.TerminalLogger, progress::ProgressLogging.Progress, kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:229
│     [11] #handle_message#30
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:268 [inlined]
│     [12] #handle_message#8
│        @ ~/.julia/packages/LoggingExtras/Qf118/src/earlyfiltered.jl:26 [inlined]
│     [13] handle_message(::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}}, ::Base.CoreLogging.LogLevel, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ LoggingExtras ~/.julia/packages/LoggingExtras/Qf118/src/tee.jl:24
│     [14] macro expansion
│        @ ./logging.jl:297 [inlined]
│     [15] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385 [inlined]
│     [16] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:102 [inlined]
│     [17] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:328 [inlined]
│     [18] (::AbstractMCMC.var"#18#21"{Bool, String, AbstractMCMC.var"#20#23", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Int64})()
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:11
│     [19] with_logstate(f::Function, logstate::Any)
│        @ Base.CoreLogging ./logging.jl:430
│     [20] with_logger(f::Function, logger::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}})
│        @ Base.CoreLogging ./logging.jl:542
│     [21] with_progresslogger(f::Function, _module::Module, logger::Logging.ConsoleLogger)
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:34
│     [22] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:10 [inlined]
│     [23] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
│     [24] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:178
│     [25] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:177
│     [26] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164
│     [27] sample
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164 [inlined]
│     [28] #sample#1
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154 [inlined]
│     [29] sample(model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154
│     [30] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:21
│     [31] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [32] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:2
│     [33] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [34] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:45
│     [35] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [36] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:25
│     [37] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [38] top-level scope
│        @ none:6
│     [39] eval(m::Module, e::Any)
│        @ Core ./boot.jl:345
│     [40] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [41] _start()
│        @ Base ./client.jl:485
└ @ AbstractMCMC ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
┌ Error: Exception while generating log record in module AbstractMCMC at /home/pkgeval/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
│   exception =
│    ArgumentError: mismatch between # of format specifiers and provided args: 3 != 4
│    Stacktrace:
│      [1] argmismatch(a::Int64, b::Int64)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:705
│      [2] format(::IOContext{IOBuffer}, ::Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Val{'s'}}, Printf.Spec{Val{'u'}}, Printf.Spec{Val{'s'}}}}, ::String, ::Int64, ::Vararg{Any, N} where N)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:719
│      [3] printprogress(io::IOContext{IOBuffer}, barglyphs::TerminalLoggers.ProgressMeter.BarGlyphs, tfirst::Float64, desc::String, progress::Float64, eta_seconds::Float64)
│        @ TerminalLoggers.ProgressMeter ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressMeter/ProgressMeter.jl:65
│      [4] printprogress(io::IOContext{IOBuffer}, bar::TerminalLoggers.ProgressBar)
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressBar.jl:42
│      [5] (::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}})(isfirst::Bool, node::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:232
│      [6] foldtree(op::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}}, acc::Bool, tree::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:186
│      [7] foldtree
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:183 [inlined]
│      [8] (::TerminalLoggers.var"#21#26"{TerminalLoggers.TerminalLogger})(io::IOContext{IOBuffer})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:230
│      [9] sprint(::Function; context::Pair{Symbol, Tuple{Int64, Int64}}, sizehint::Int64)
│        @ Base ./strings/io.jl:103
│     [10] handle_progress(logger::TerminalLoggers.TerminalLogger, progress::ProgressLogging.Progress, kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:229
│     [11] #handle_message#30
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:268 [inlined]
│     [12] #handle_message#8
│        @ ~/.julia/packages/LoggingExtras/Qf118/src/earlyfiltered.jl:26 [inlined]
│     [13] handle_message(::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}}, ::Base.CoreLogging.LogLevel, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ LoggingExtras ~/.julia/packages/LoggingExtras/Qf118/src/tee.jl:24
│     [14] macro expansion
│        @ ./logging.jl:297 [inlined]
│     [15] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385 [inlined]
│     [16] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:102 [inlined]
│     [17] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:328 [inlined]
│     [18] (::AbstractMCMC.var"#18#21"{Bool, String, AbstractMCMC.var"#20#23", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Int64})()
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:11
│     [19] with_logstate(f::Function, logstate::Any)
│        @ Base.CoreLogging ./logging.jl:430
│     [20] with_logger(f::Function, logger::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}})
│        @ Base.CoreLogging ./logging.jl:542
│     [21] with_progresslogger(f::Function, _module::Module, logger::Logging.ConsoleLogger)
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:34
│     [22] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:10 [inlined]
│     [23] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
│     [24] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:178
│     [25] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:177
│     [26] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164
│     [27] sample
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164 [inlined]
│     [28] #sample#1
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154 [inlined]
│     [29] sample(model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154
│     [30] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:21
│     [31] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [32] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:2
│     [33] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [34] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:45
│     [35] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [36] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:25
│     [37] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [38] top-level scope
│        @ none:6
│     [39] eval(m::Module, e::Any)
│        @ Core ./boot.jl:345
│     [40] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [41] _start()
│        @ Base ./client.jl:485
└ @ AbstractMCMC ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
┌ Error: Exception while generating log record in module AbstractMCMC at /home/pkgeval/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
│   exception =
│    ArgumentError: mismatch between # of format specifiers and provided args: 3 != 4
│    Stacktrace:
│      [1] argmismatch(a::Int64, b::Int64)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:705
│      [2] format(::IOContext{IOBuffer}, ::Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Val{'s'}}, Printf.Spec{Val{'u'}}, Printf.Spec{Val{'s'}}}}, ::String, ::Int64, ::Vararg{Any, N} where N)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:719
│      [3] printprogress(io::IOContext{IOBuffer}, barglyphs::TerminalLoggers.ProgressMeter.BarGlyphs, tfirst::Float64, desc::String, progress::Float64, eta_seconds::Float64)
│        @ TerminalLoggers.ProgressMeter ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressMeter/ProgressMeter.jl:54
│      [4] printprogress(io::IOContext{IOBuffer}, bar::TerminalLoggers.ProgressBar)
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressBar.jl:42
│      [5] (::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}})(isfirst::Bool, node::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:232
│      [6] foldtree(op::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}}, acc::Bool, tree::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:186
│      [7] foldtree
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:183 [inlined]
│      [8] (::TerminalLoggers.var"#21#26"{TerminalLoggers.TerminalLogger})(io::IOContext{IOBuffer})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:230
│      [9] sprint(::Function; context::Pair{Symbol, Tuple{Int64, Int64}}, sizehint::Int64)
│        @ Base ./strings/io.jl:103
│     [10] handle_progress(logger::TerminalLoggers.TerminalLogger, progress::ProgressLogging.Progress, kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:229
│     [11] #handle_message#30
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:268 [inlined]
│     [12] #handle_message#8
│        @ ~/.julia/packages/LoggingExtras/Qf118/src/earlyfiltered.jl:26 [inlined]
│     [13] handle_message(::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}}, ::Base.CoreLogging.LogLevel, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ LoggingExtras ~/.julia/packages/LoggingExtras/Qf118/src/tee.jl:24
│     [14] macro expansion
│        @ ./logging.jl:297 [inlined]
│     [15] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385 [inlined]
│     [16] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:102 [inlined]
│     [17] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:328 [inlined]
│     [18] (::AbstractMCMC.var"#18#21"{Bool, String, AbstractMCMC.var"#20#23", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Int64})()
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:11
│     [19] with_logstate(f::Function, logstate::Any)
│        @ Base.CoreLogging ./logging.jl:430
│     [20] with_logger(f::Function, logger::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}})
│        @ Base.CoreLogging ./logging.jl:542
│     [21] with_progresslogger(f::Function, _module::Module, logger::Logging.ConsoleLogger)
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:34
│     [22] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:10 [inlined]
│     [23] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
│     [24] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:178
│     [25] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:177
│     [26] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164
│     [27] sample
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164 [inlined]
│     [28] #sample#1
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154 [inlined]
│     [29] sample(model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154
│     [30] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:21
│     [31] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [32] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:2
│     [33] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [34] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:45
│     [35] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [36] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:25
│     [37] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [38] top-level scope
│        @ none:6
│     [39] eval(m::Module, e::Any)
│        @ Core ./boot.jl:345
│     [40] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [41] _start()
│        @ Base ./client.jl:485
└ @ AbstractMCMC ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
┌ Error: Exception while generating log record in module AbstractMCMC at /home/pkgeval/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
│   exception =
│    ArgumentError: mismatch between # of format specifiers and provided args: 3 != 4
│    Stacktrace:
│      [1] argmismatch(a::Int64, b::Int64)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:705
│      [2] format(::IOContext{IOBuffer}, ::Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Val{'s'}}, Printf.Spec{Val{'u'}}, Printf.Spec{Val{'s'}}}}, ::String, ::Int64, ::Vararg{Any, N} where N)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:719
│      [3] printprogress(io::IOContext{IOBuffer}, barglyphs::TerminalLoggers.ProgressMeter.BarGlyphs, tfirst::Float64, desc::String, progress::Float64, eta_seconds::Float64)
│        @ TerminalLoggers.ProgressMeter ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressMeter/ProgressMeter.jl:54
│      [4] printprogress(io::IOContext{IOBuffer}, bar::TerminalLoggers.ProgressBar)
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressBar.jl:42
│      [5] (::TerminalLoggers.var"#24#29")(io::IOContext{IOBuffer})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:250
│      [6] sprint(::Function; context::Pair{Symbol, Tuple{Int64, Int64}}, sizehint::Int64)
│        @ Base ./strings/io.jl:103
│      [7] handle_progress(logger::TerminalLoggers.TerminalLogger, progress::ProgressLogging.Progress, kwargs::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{String}}})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:249
│      [8] #handle_message#30
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:268 [inlined]
│      [9] #handle_message#8
│        @ ~/.julia/packages/LoggingExtras/Qf118/src/earlyfiltered.jl:26 [inlined]
│     [10] handle_message(::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}}, ::Base.CoreLogging.LogLevel, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{String}}})
│        @ LoggingExtras ~/.julia/packages/LoggingExtras/Qf118/src/tee.jl:24
│     [11] macro expansion
│        @ ./logging.jl:297 [inlined]
│     [12] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385 [inlined]
│     [13] (::AbstractMCMC.var"#18#21"{Bool, String, AbstractMCMC.var"#20#23", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Int64})()
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:11
│     [14] with_logstate(f::Function, logstate::Any)
│        @ Base.CoreLogging ./logging.jl:430
│     [15] with_logger(f::Function, logger::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}})
│        @ Base.CoreLogging ./logging.jl:542
│     [16] with_progresslogger(f::Function, _module::Module, logger::Logging.ConsoleLogger)
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:34
│     [17] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:10 [inlined]
│     [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
│     [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:178
│     [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:177
│     [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164
│     [22] sample
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164 [inlined]
│     [23] #sample#1
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154 [inlined]
│     [24] sample(model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154
│     [25] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:21
│     [26] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [27] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:2
│     [28] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [29] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:45
│     [30] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [31] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:25
│     [32] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [33] top-level scope
│        @ none:6
│     [34] eval(m::Module, e::Any)
│        @ Core ./boot.jl:345
│     [35] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [36] _start()
│        @ Base ./client.jl:485
└ @ AbstractMCMC ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
┌ Error: Exception while generating log record in module AbstractMCMC at /home/pkgeval/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
│   exception =
│    ArgumentError: mismatch between # of format specifiers and provided args: 3 != 4
│    Stacktrace:
│      [1] argmismatch(a::Int64, b::Int64)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:705
│      [2] format(::IOContext{IOBuffer}, ::Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Val{'s'}}, Printf.Spec{Val{'u'}}, Printf.Spec{Val{'s'}}}}, ::String, ::Int64, ::Vararg{Any, N} where N)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:719
│      [3] printprogress(io::IOContext{IOBuffer}, barglyphs::TerminalLoggers.ProgressMeter.BarGlyphs, tfirst::Float64, desc::String, progress::Nothing, eta_seconds::Float64)
│        @ TerminalLoggers.ProgressMeter ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressMeter/ProgressMeter.jl:65
│      [4] printprogress(io::IOContext{IOBuffer}, bar::TerminalLoggers.ProgressBar)
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressBar.jl:42
│      [5] (::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}})(isfirst::Bool, node::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:232
│      [6] foldtree(op::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}}, acc::Bool, tree::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:186
│      [7] foldtree
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:183 [inlined]
│      [8] (::TerminalLoggers.var"#21#26"{TerminalLoggers.TerminalLogger})(io::IOContext{IOBuffer})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:230
│      [9] sprint(::Function; context::Pair{Symbol, Tuple{Int64, Int64}}, sizehint::Int64)
│        @ Base ./strings/io.jl:103
│     [10] handle_progress(logger::TerminalLoggers.TerminalLogger, progress::ProgressLogging.Progress, kwargs::Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Nothing}}})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:229
│     [11] #handle_message#30
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:268 [inlined]
│     [12] #handle_message#8
│        @ ~/.julia/packages/LoggingExtras/Qf118/src/earlyfiltered.jl:26 [inlined]
│     [13] handle_message(::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}}, ::Base.CoreLogging.LogLevel, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Nothing}}})
│        @ LoggingExtras ~/.julia/packages/LoggingExtras/Qf118/src/tee.jl:24
│     [14] macro expansion
│        @ ./logging.jl:297 [inlined]
│     [15] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385 [inlined]
│     [16] (::AbstractMCMC.var"#18#21"{Bool, String, AbstractMCMC.var"#20#23", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Int64})()
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:11
│     [17] with_logstate(f::Function, logstate::Any)
│        @ Base.CoreLogging ./logging.jl:430
│     [18] with_logger(f::Function, logger::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}})
│        @ Base.CoreLogging ./logging.jl:542
│     [19] with_progresslogger(f::Function, _module::Module, logger::Logging.ConsoleLogger)
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:34
│     [20] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:10 [inlined]
│     [21] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
│     [22] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:178
│     [23] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:177
│     [24] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164
│     [25] sample
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164 [inlined]
│     [26] #sample#1
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154 [inlined]
│     [27] sample(model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154
│     [28] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:24
│     [29] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [30] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:2
│     [31] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [32] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:45
│     [33] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [34] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:25
│     [35] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [36] top-level scope
│        @ none:6
│     [37] eval(m::Module, e::Any)
│        @ Core ./boot.jl:345
│     [38] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [39] _start()
│        @ Base ./client.jl:485
└ @ AbstractMCMC ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
┌ Error: Exception while generating log record in module AbstractMCMC at /home/pkgeval/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
│   exception =
│    ArgumentError: mismatch between # of format specifiers and provided args: 3 != 4
│    Stacktrace:
│      [1] argmismatch(a::Int64, b::Int64)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:705
│      [2] format(::IOContext{IOBuffer}, ::Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Val{'s'}}, Printf.Spec{Val{'u'}}, Printf.Spec{Val{'s'}}}}, ::String, ::Int64, ::Vararg{Any, N} where N)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:719
│      [3] printprogress(io::IOContext{IOBuffer}, barglyphs::TerminalLoggers.ProgressMeter.BarGlyphs, tfirst::Float64, desc::String, progress::Float64, eta_seconds::Float64)
│        @ TerminalLoggers.ProgressMeter ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressMeter/ProgressMeter.jl:65
│      [4] printprogress(io::IOContext{IOBuffer}, bar::TerminalLoggers.ProgressBar)
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressBar.jl:42
│      [5] (::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}})(isfirst::Bool, node::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:232
│      [6] foldtree(op::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}}, acc::Bool, tree::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:186
│      [7] foldtree
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:183 [inlined]
│      [8] (::TerminalLoggers.var"#21#26"{TerminalLoggers.TerminalLogger})(io::IOContext{IOBuffer})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:230
│      [9] sprint(::Function; context::Pair{Symbol, Tuple{Int64, Int64}}, sizehint::Int64)
│        @ Base ./strings/io.jl:103
│     [10] handle_progress(logger::TerminalLoggers.TerminalLogger, progress::ProgressLogging.Progress, kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:229
│     [11] #handle_message#30
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:268 [inlined]
│     [12] #handle_message#8
│        @ ~/.julia/packages/LoggingExtras/Qf118/src/earlyfiltered.jl:26 [inlined]
│     [13] handle_message(::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}}, ::Base.CoreLogging.LogLevel, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ LoggingExtras ~/.julia/packages/LoggingExtras/Qf118/src/tee.jl:24
│     [14] macro expansion
│        @ ./logging.jl:297 [inlined]
│     [15] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385 [inlined]
│     [16] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:88 [inlined]
│     [17] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:328 [inlined]
│     [18] (::AbstractMCMC.var"#18#21"{Bool, String, AbstractMCMC.var"#20#23", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Int64})()
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:11
│     [19] with_logstate(f::Function, logstate::Any)
│        @ Base.CoreLogging ./logging.jl:430
│     [20] with_logger(f::Function, logger::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}})
│        @ Base.CoreLogging ./logging.jl:542
│     [21] with_progresslogger(f::Function, _module::Module, logger::Logging.ConsoleLogger)
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:34
│     [22] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:10 [inlined]
│     [23] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
│     [24] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:178
│     [25] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:177
│     [26] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164
│     [27] sample
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164 [inlined]
│     [28] #sample#1
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154 [inlined]
│     [29] sample(model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154
│     [30] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:24
│     [31] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [32] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:2
│     [33] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [34] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:45
│     [35] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [36] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:25
│     [37] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [38] top-level scope
│        @ none:6
│     [39] eval(m::Module, e::Any)
│        @ Core ./boot.jl:345
│     [40] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [41] _start()
│        @ Base ./client.jl:485
└ @ AbstractMCMC ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
┌ Error: Exception while generating log record in module AbstractMCMC at /home/pkgeval/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
│   exception =
│    ArgumentError: mismatch between # of format specifiers and provided args: 3 != 4
│    Stacktrace:
│      [1] argmismatch(a::Int64, b::Int64)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:705
│      [2] format(::IOContext{IOBuffer}, ::Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Val{'s'}}, Printf.Spec{Val{'u'}}, Printf.Spec{Val{'s'}}}}, ::String, ::Int64, ::Vararg{Any, N} where N)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:719
│      [3] printprogress(io::IOContext{IOBuffer}, barglyphs::TerminalLoggers.ProgressMeter.BarGlyphs, tfirst::Float64, desc::String, progress::Float64, eta_seconds::Float64)
│        @ TerminalLoggers.ProgressMeter ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressMeter/ProgressMeter.jl:65
│      [4] printprogress(io::IOContext{IOBuffer}, bar::TerminalLoggers.ProgressBar)
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressBar.jl:42
│      [5] (::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}})(isfirst::Bool, node::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:232
│      [6] foldtree(op::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}}, acc::Bool, tree::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:186
│      [7] foldtree
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:183 [inlined]
│      [8] (::TerminalLoggers.var"#21#26"{TerminalLoggers.TerminalLogger})(io::IOContext{IOBuffer})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:230
│      [9] sprint(::Function; context::Pair{Symbol, Tuple{Int64, Int64}}, sizehint::Int64)
│        @ Base ./strings/io.jl:103
│     [10] handle_progress(logger::TerminalLoggers.TerminalLogger, progress::ProgressLogging.Progress, kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:229
│     [11] #handle_message#30
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:268 [inlined]
│     [12] #handle_message#8
│        @ ~/.julia/packages/LoggingExtras/Qf118/src/earlyfiltered.jl:26 [inlined]
│     [13] handle_message(::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}}, ::Base.CoreLogging.LogLevel, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ LoggingExtras ~/.julia/packages/LoggingExtras/Qf118/src/tee.jl:24
│     [14] macro expansion
│        @ ./logging.jl:297 [inlined]
│     [15] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385 [inlined]
│     [16] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:102 [inlined]
│     [17] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:328 [inlined]
│     [18] (::AbstractMCMC.var"#18#21"{Bool, String, AbstractMCMC.var"#20#23", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Int64})()
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:11
│     [19] with_logstate(f::Function, logstate::Any)
│        @ Base.CoreLogging ./logging.jl:430
│     [20] with_logger(f::Function, logger::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}})
│        @ Base.CoreLogging ./logging.jl:542
│     [21] with_progresslogger(f::Function, _module::Module, logger::Logging.ConsoleLogger)
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:34
│     [22] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:10 [inlined]
│     [23] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
│     [24] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:178
│     [25] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:177
│     [26] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164
│     [27] sample
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164 [inlined]
│     [28] #sample#1
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154 [inlined]
│     [29] sample(model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154
│     [30] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:24
│     [31] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [32] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:2
│     [33] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [34] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:45
│     [35] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [36] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:25
│     [37] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [38] top-level scope
│        @ none:6
│     [39] eval(m::Module, e::Any)
│        @ Core ./boot.jl:345
│     [40] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [41] _start()
│        @ Base ./client.jl:485
└ @ AbstractMCMC ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
┌ Error: Exception while generating log record in module AbstractMCMC at /home/pkgeval/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
│   exception =
│    ArgumentError: mismatch between # of format specifiers and provided args: 3 != 4
│    Stacktrace:
│      [1] argmismatch(a::Int64, b::Int64)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:705
│      [2] format(::IOContext{IOBuffer}, ::Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Val{'s'}}, Printf.Spec{Val{'u'}}, Printf.Spec{Val{'s'}}}}, ::String, ::Int64, ::Vararg{Any, N} where N)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:719
│      [3] printprogress(io::IOContext{IOBuffer}, barglyphs::TerminalLoggers.ProgressMeter.BarGlyphs, tfirst::Float64, desc::String, progress::Float64, eta_seconds::Float64)
│        @ TerminalLoggers.ProgressMeter ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressMeter/ProgressMeter.jl:65
│      [4] printprogress(io::IOContext{IOBuffer}, bar::TerminalLoggers.ProgressBar)
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressBar.jl:42
│      [5] (::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}})(isfirst::Bool, node::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:232
│      [6] foldtree(op::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}}, acc::Bool, tree::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:186
│      [7] foldtree
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:183 [inlined]
│      [8] (::TerminalLoggers.var"#21#26"{TerminalLoggers.TerminalLogger})(io::IOContext{IOBuffer})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:230
│      [9] sprint(::Function; context::Pair{Symbol, Tuple{Int64, Int64}}, sizehint::Int64)
│        @ Base ./strings/io.jl:103
│     [10] handle_progress(logger::TerminalLoggers.TerminalLogger, progress::ProgressLogging.Progress, kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:229
│     [11] #handle_message#30
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:268 [inlined]
│     [12] #handle_message#8
│        @ ~/.julia/packages/LoggingExtras/Qf118/src/earlyfiltered.jl:26 [inlined]
│     [13] handle_message(::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}}, ::Base.CoreLogging.LogLevel, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ LoggingExtras ~/.julia/packages/LoggingExtras/Qf118/src/tee.jl:24
│     [14] macro expansion
│        @ ./logging.jl:297 [inlined]
│     [15] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385 [inlined]
│     [16] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:102 [inlined]
│     [17] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:328 [inlined]
│     [18] (::AbstractMCMC.var"#18#21"{Bool, String, AbstractMCMC.var"#20#23", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Int64})()
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:11
│     [19] with_logstate(f::Function, logstate::Any)
│        @ Base.CoreLogging ./logging.jl:430
│     [20] with_logger(f::Function, logger::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}})
│        @ Base.CoreLogging ./logging.jl:542
│     [21] with_progresslogger(f::Function, _module::Module, logger::Logging.ConsoleLogger)
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:34
│     [22] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:10 [inlined]
│     [23] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
│     [24] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:178
│     [25] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:177
│     [26] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164
│     [27] sample
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164 [inlined]
│     [28] #sample#1
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154 [inlined]
│     [29] sample(model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154
│     [30] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:24
│     [31] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [32] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:2
│     [33] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [34] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:45
│     [35] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [36] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:25
│     [37] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [38] top-level scope
│        @ none:6
│     [39] eval(m::Module, e::Any)
│        @ Core ./boot.jl:345
│     [40] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [41] _start()
│        @ Base ./client.jl:485
└ @ AbstractMCMC ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
┌ Error: Exception while generating log record in module AbstractMCMC at /home/pkgeval/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
│   exception =
│    ArgumentError: mismatch between # of format specifiers and provided args: 3 != 4
│    Stacktrace:
│      [1] argmismatch(a::Int64, b::Int64)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:705
│      [2] format(::IOContext{IOBuffer}, ::Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Val{'s'}}, Printf.Spec{Val{'u'}}, Printf.Spec{Val{'s'}}}}, ::String, ::Int64, ::Vararg{Any, N} where N)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:719
│      [3] printprogress(io::IOContext{IOBuffer}, barglyphs::TerminalLoggers.ProgressMeter.BarGlyphs, tfirst::Float64, desc::String, progress::Float64, eta_seconds::Float64)
│        @ TerminalLoggers.ProgressMeter ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressMeter/ProgressMeter.jl:65
│      [4] printprogress(io::IOContext{IOBuffer}, bar::TerminalLoggers.ProgressBar)
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressBar.jl:42
│      [5] (::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}})(isfirst::Bool, node::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:232
│      [6] foldtree(op::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}}, acc::Bool, tree::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:186
│      [7] foldtree
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:183 [inlined]
│      [8] (::TerminalLoggers.var"#21#26"{TerminalLoggers.TerminalLogger})(io::IOContext{IOBuffer})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:230
│      [9] sprint(::Function; context::Pair{Symbol, Tuple{Int64, Int64}}, sizehint::Int64)
│        @ Base ./strings/io.jl:103
│     [10] handle_progress(logger::TerminalLoggers.TerminalLogger, progress::ProgressLogging.Progress, kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:229
│     [11] #handle_message#30
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:268 [inlined]
│     [12] #handle_message#8
│        @ ~/.julia/packages/LoggingExtras/Qf118/src/earlyfiltered.jl:26 [inlined]
│     [13] handle_message(::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}}, ::Base.CoreLogging.LogLevel, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ LoggingExtras ~/.julia/packages/LoggingExtras/Qf118/src/tee.jl:24
│     [14] macro expansion
│        @ ./logging.jl:297 [inlined]
│     [15] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385 [inlined]
│     [16] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:102 [inlined]
│     [17] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:328 [inlined]
│     [18] (::AbstractMCMC.var"#18#21"{Bool, String, AbstractMCMC.var"#20#23", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Int64})()
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:11
│     [19] with_logstate(f::Function, logstate::Any)
│        @ Base.CoreLogging ./logging.jl:430
│     [20] with_logger(f::Function, logger::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}})
│        @ Base.CoreLogging ./logging.jl:542
│     [21] with_progresslogger(f::Function, _module::Module, logger::Logging.ConsoleLogger)
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:34
│     [22] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:10 [inlined]
│     [23] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
│     [24] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:178
│     [25] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:177
│     [26] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164
│     [27] sample
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164 [inlined]
│     [28] #sample#1
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154 [inlined]
│     [29] sample(model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154
│     [30] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:24
│     [31] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [32] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:2
│     [33] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [34] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:45
│     [35] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [36] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:25
│     [37] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [38] top-level scope
│        @ none:6
│     [39] eval(m::Module, e::Any)
│        @ Core ./boot.jl:345
│     [40] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [41] _start()
│        @ Base ./client.jl:485
└ @ AbstractMCMC ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
┌ Error: Exception while generating log record in module AbstractMCMC at /home/pkgeval/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
│   exception =
│    ArgumentError: mismatch between # of format specifiers and provided args: 3 != 4
│    Stacktrace:
│      [1] argmismatch(a::Int64, b::Int64)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:705
│      [2] format(::IOContext{IOBuffer}, ::Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Val{'s'}}, Printf.Spec{Val{'u'}}, Printf.Spec{Val{'s'}}}}, ::String, ::Int64, ::Vararg{Any, N} where N)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:719
│      [3] printprogress(io::IOContext{IOBuffer}, barglyphs::TerminalLoggers.ProgressMeter.BarGlyphs, tfirst::Float64, desc::String, progress::Float64, eta_seconds::Float64)
│        @ TerminalLoggers.ProgressMeter ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressMeter/ProgressMeter.jl:54
│      [4] printprogress(io::IOContext{IOBuffer}, bar::TerminalLoggers.ProgressBar)
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressBar.jl:42
│      [5] (::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}})(isfirst::Bool, node::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:232
│      [6] foldtree(op::TerminalLoggers.var"#22#27"{IOContext{IOBuffer}}, acc::Bool, tree::LeftChildRightSiblingTrees.Node{TerminalLoggers.ProgressBar})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:186
│      [7] foldtree
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:183 [inlined]
│      [8] (::TerminalLoggers.var"#21#26"{TerminalLoggers.TerminalLogger})(io::IOContext{IOBuffer})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:230
│      [9] sprint(::Function; context::Pair{Symbol, Tuple{Int64, Int64}}, sizehint::Int64)
│        @ Base ./strings/io.jl:103
│     [10] handle_progress(logger::TerminalLoggers.TerminalLogger, progress::ProgressLogging.Progress, kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:229
│     [11] #handle_message#30
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:268 [inlined]
│     [12] #handle_message#8
│        @ ~/.julia/packages/LoggingExtras/Qf118/src/earlyfiltered.jl:26 [inlined]
│     [13] handle_message(::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}}, ::Base.CoreLogging.LogLevel, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{Float64}}})
│        @ LoggingExtras ~/.julia/packages/LoggingExtras/Qf118/src/tee.jl:24
│     [14] macro expansion
│        @ ./logging.jl:297 [inlined]
│     [15] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385 [inlined]
│     [16] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:102 [inlined]
│     [17] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:328 [inlined]
│     [18] (::AbstractMCMC.var"#18#21"{Bool, String, AbstractMCMC.var"#20#23", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Int64})()
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:11
│     [19] with_logstate(f::Function, logstate::Any)
│        @ Base.CoreLogging ./logging.jl:430
│     [20] with_logger(f::Function, logger::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}})
│        @ Base.CoreLogging ./logging.jl:542
│     [21] with_progresslogger(f::Function, _module::Module, logger::Logging.ConsoleLogger)
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:34
│     [22] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:10 [inlined]
│     [23] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
│     [24] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:178
│     [25] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:177
│     [26] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164
│     [27] sample
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164 [inlined]
│     [28] #sample#1
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154 [inlined]
│     [29] sample(model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154
│     [30] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:24
│     [31] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [32] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:2
│     [33] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [34] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:45
│     [35] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [36] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:25
│     [37] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [38] top-level scope
│        @ none:6
│     [39] eval(m::Module, e::Any)
│        @ Core ./boot.jl:345
│     [40] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [41] _start()
│        @ Base ./client.jl:485
└ @ AbstractMCMC ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
┌ Error: Exception while generating log record in module AbstractMCMC at /home/pkgeval/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
│   exception =
│    ArgumentError: mismatch between # of format specifiers and provided args: 3 != 4
│    Stacktrace:
│      [1] argmismatch(a::Int64, b::Int64)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:705
│      [2] format(::IOContext{IOBuffer}, ::Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Val{'s'}}, Printf.Spec{Val{'u'}}, Printf.Spec{Val{'s'}}}}, ::String, ::Int64, ::Vararg{Any, N} where N)
│        @ Printf /workspace/srcdir/usr/share/julia/stdlib/v1.6/Printf/src/Printf.jl:719
│      [3] printprogress(io::IOContext{IOBuffer}, barglyphs::TerminalLoggers.ProgressMeter.BarGlyphs, tfirst::Float64, desc::String, progress::Float64, eta_seconds::Float64)
│        @ TerminalLoggers.ProgressMeter ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressMeter/ProgressMeter.jl:54
│      [4] printprogress(io::IOContext{IOBuffer}, bar::TerminalLoggers.ProgressBar)
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/ProgressBar.jl:42
│      [5] (::TerminalLoggers.var"#24#29")(io::IOContext{IOBuffer})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:250
│      [6] sprint(::Function; context::Pair{Symbol, Tuple{Int64, Int64}}, sizehint::Int64)
│        @ Base ./strings/io.jl:103
│      [7] handle_progress(logger::TerminalLoggers.TerminalLogger, progress::ProgressLogging.Progress, kwargs::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{String}}})
│        @ TerminalLoggers ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:249
│      [8] #handle_message#30
│        @ ~/.julia/packages/TerminalLoggers/L4D4Q/src/TerminalLogger.jl:268 [inlined]
│      [9] #handle_message#8
│        @ ~/.julia/packages/LoggingExtras/Qf118/src/earlyfiltered.jl:26 [inlined]
│     [10] handle_message(::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}}, ::Base.CoreLogging.LogLevel, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:progress,), Tuple{String}}})
│        @ LoggingExtras ~/.julia/packages/LoggingExtras/Qf118/src/tee.jl:24
│     [11] macro expansion
│        @ ./logging.jl:297 [inlined]
│     [12] macro expansion
│        @ ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385 [inlined]
│     [13] (::AbstractMCMC.var"#18#21"{Bool, String, AbstractMCMC.var"#20#23", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Int64})()
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:11
│     [14] with_logstate(f::Function, logstate::Any)
│        @ Base.CoreLogging ./logging.jl:430
│     [15] with_logger(f::Function, logger::LoggingExtras.TeeLogger{Tuple{LoggingExtras.EarlyFilteredLogger{TerminalLoggers.TerminalLogger, AbstractMCMC.var"#1#3"{Module}}, LoggingExtras.EarlyFilteredLogger{Logging.ConsoleLogger, AbstractMCMC.var"#2#4"{Module}}}})
│        @ Base.CoreLogging ./logging.jl:542
│     [16] with_progresslogger(f::Function, _module::Module, logger::Logging.ConsoleLogger)
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:34
│     [17] macro expansion
│        @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:10 [inlined]
│     [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
│     [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:178
│     [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{DynamicPPL.VarInfo{NamedTuple{(:α, :ρ, :σ²), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:α, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:ρ, Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:ρ, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:σ², Tuple{}}, Int64}, Vector{LogNormal{Float64}}, Vector{DynamicPPL.VarName{:σ², Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:177
│     [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164
│     [22] sample
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:164 [inlined]
│     [23] #sample#1
│        @ ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154 [inlined]
│     [24] sample(model::DynamicPPL.Model{var"#26#29", (:y, :X), (), (), Tuple{Vector{Float64}, Vector{Vector{Float64}}}, Tuple{}}, alg::HMC{Turing.Core.ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64)
│        @ Turing.Inference ~/.julia/packages/Turing/RzDvB/src/inference/Inference.jl:154
│     [25] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:24
│     [26] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [27] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/turing.jl:2
│     [28] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [29] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:45
│     [30] top-level scope
│        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
│     [31] top-level scope
│        @ ~/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:25
│     [32] include(fname::String)
│        @ Base.MainInclude ./client.jl:444
│     [33] top-level scope
│        @ none:6
│     [34] eval(m::Module, e::Any)
│        @ Core ./boot.jl:345
│     [35] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:261
│     [36] _start()
│        @ Base ./client.jl:485
└ @ AbstractMCMC ~/.julia/packages/ProgressLogging/BBN0b/src/ProgressLogging.jl:385
[ Info: SetupBuildDirectory: setting up build directory.
[ Info: Doctest: running doctests.
[ Info: Skipped ExpandTemplates step (doctest only).
[ Info: Skipped CrossReferences step (doctest only).
[ Info: Skipped CheckDocument step (doctest only).
[ Info: Skipped Populate step (doctest only).
[ Info: Skipped RenderDocument step (doctest only).
Test Summary:         | Pass  Error  Total
AbstractGPs           |  201      1    202
  util                |   33      1     34
    common_covmat_ops |   33      1     34
      update_chol     |    2             2
      tr_At_A         |    1      1      2
  abstract_gp         |   36            36
  gp                  |   37            37
  posterior_gp        |   79            79
  latent_gp           |    7             7
  plotting            |    6             6
  turing compat       |    2             2
  doctests            |    1             1
ERROR: LoadError: Some tests did not pass: 201 passed, 0 failed, 1 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/AbstractGPs/JmfZo/test/runtests.jl:24
ERROR: Package AbstractGPs errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String, N} where N)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1580
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:328
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:315
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:19
