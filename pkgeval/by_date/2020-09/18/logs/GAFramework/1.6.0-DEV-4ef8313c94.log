Julia Version 1.6.0-DEV.952
Commit 4ef8313c94 (2020-09-17 11:39 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_Mzm92V/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_Mzm92V/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723300407037766
curgen: 20 fitness: 0.21723300407037766
curgen: 30 fitness: 0.21723300407037766
curgen: 40 fitness: 0.21723300407037766
curgen: 50 fitness: 0.21723300407037766
CoordinateCreature{Vector{Float64}}([-0.22242947601432156], -0.21723300407037766) -0.22242947601432156 -0.21723300407037766
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257976380113462
curgen: 100 fitness: 3.2581692332790575
curgen: 150 fitness: 3.258224133679497
curgen: 200 fitness: 3.258348154921402
curgen: 250 fitness: 3.2584056131630192
curgen: 300 fitness: 3.258406739057496
curgen: 350 fitness: 3.258406739057496
curgen: 400 fitness: 3.2584204560072285
curgen: 450 fitness: 3.2584238211316077
curgen: 500 fitness: 3.2584262016393293
CoordinateCreature{Vector{Float64}}([0.2226970008899556, -0.22249499628475392, 0.2225727726551155, -0.2223267749867592, 0.22312313152346613, -0.2224611620651272, 0.22247887933338573, -0.22261780570760364, 0.22235674105975692, -0.22277783335094584, -0.2221178000260432, -0.2217456141155534, 0.2230847570205072, -0.22220305595203543, 0.22241916652863886], -3.2584262016393293) [0.2226970008899556, -0.22249499628475392, 0.2225727726551155, -0.2223267749867592, 0.22312313152346613, -0.2224611620651272, 0.22247887933338573, -0.22261780570760364, 0.22235674105975692, -0.22277783335094584, -0.2221178000260432, -0.2217456141155534, 0.2230847570205072, -0.22220305595203543, 0.22241916652863886] -3.2584262016393293
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0032295256308714215
curgen: 100 fitness: -0.002980708014490574
curgen: 150 fitness: -0.0022871420383978602
curgen: 200 fitness: -0.001705868322602555
curgen: 250 fitness: -0.0012773978055236057
curgen: 300 fitness: -0.0011831598910987395
curgen: 350 fitness: -0.0011505051869562521
curgen: 400 fitness: -0.001122129330383359
curgen: 450 fitness: -0.0005154582363218196
curgen: 500 fitness: -0.0005154582363218196
CoordinateCreature{Vector{Float64}}([0.0006386864555494105, 0.0006278828972679682, -6.104481451030806e-5, -6.619006525030563e-5, 0.00045586884446752196, -0.00034919132050840627, -0.0007612769273660676, -0.00022078956249081943, 0.0001079166049632672, 4.339590408751427e-5, -0.0006424050741562343, -0.0002807648673248584, -5.38514640021988e-5, 0.0005525746857815052, -0.00012882156627598248], 0.0005154582363218196) [0.0006386864555494105, 0.0006278828972679682, -6.104481451030806e-5, -6.619006525030563e-5, 0.00045586884446752196, -0.00034919132050840627, -0.0007612769273660676, -0.00022078956249081943, 0.0001079166049632672, 4.339590408751427e-5, -0.0006424050741562343, -0.0002807648673248584, -5.38514640021988e-5, 0.0005525746857815052, -0.00012882156627598248] 0.0005154582363218196
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
