Julia Version 1.6.0-DEV.918
Commit 8bdf5695e2 (2020-09-15 16:48 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_HzSkNi/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_HzSkNi/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21720235454865594
curgen: 20 fitness: 0.2172212961312849
curgen: 30 fitness: 0.21722914534659138
curgen: 40 fitness: 0.21722914534659138
curgen: 50 fitness: 0.21722914534659138
CoordinateCreature{Vector{Float64}}([0.22286664568533918], -0.21722914534659138) 0.22286664568533918 -0.21722914534659138
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257725359579835
curgen: 100 fitness: 3.258383445546878
curgen: 150 fitness: 3.2583853549226003
curgen: 200 fitness: 3.258409437512986
curgen: 250 fitness: 3.258457934914333
curgen: 300 fitness: 3.258457934914333
curgen: 350 fitness: 3.2584673817581122
curgen: 400 fitness: 3.2584743052100285
curgen: 450 fitness: 3.2584773511042204
curgen: 500 fitness: 3.2584773511042204
CoordinateCreature{Vector{Float64}}([-0.2226461526447894, -0.22247074853559734, -0.2226865591797725, -0.22300025942403123, -0.22273451589269394, 0.2224188387655243, -0.22232641491464886, 0.2227037980714145, 0.22248584416566206, -0.22250272828806872, 0.22223941302200567, -0.22246837490740815, -0.22276882980497673, 0.22251697369432002, -0.2228493203916129], -3.2584773511042204) [-0.2226461526447894, -0.22247074853559734, -0.2226865591797725, -0.22300025942403123, -0.22273451589269394, 0.2224188387655243, -0.22232641491464886, 0.2227037980714145, 0.22248584416566206, -0.22250272828806872, 0.22223941302200567, -0.22246837490740815, -0.22276882980497673, 0.22251697369432002, -0.2228493203916129] -3.2584773511042204
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.001642906402821609
curgen: 100 fitness: -0.00037364772657610956
curgen: 150 fitness: -0.00032548131019893844
curgen: 200 fitness: -0.000289595092624495
curgen: 250 fitness: -0.00025162857269833694
curgen: 300 fitness: -0.00025162857269833694
curgen: 350 fitness: -0.00025162857269833694
curgen: 400 fitness: -0.00025162857269833694
curgen: 450 fitness: -0.00025162857269833694
curgen: 500 fitness: -0.00025162857269833694
CoordinateCreature{Vector{Float64}}([0.000210819498602903, -0.000272689580200849, 0.00022755100117002885, 0.0003384953281788813, 5.4610867791556245e-5, 0.0006349914355162129, -0.00031581519182729927, 0.00036853080495191084, -9.127581393934435e-5, 3.69473604359419e-5, -0.00019706996789417311, -0.00021883705238945643, 0.00015781922268337566, 0.00044974422260501815, 0.00013351985911179315], 0.00025162857269833694) [0.000210819498602903, -0.000272689580200849, 0.00022755100117002885, 0.0003384953281788813, 5.4610867791556245e-5, 0.0006349914355162129, -0.00031581519182729927, 0.00036853080495191084, -9.127581393934435e-5, 3.69473604359419e-5, -0.00019706996789417311, -0.00021883705238945643, 0.00015781922268337566, 0.00044974422260501815, 0.00013351985911179315] 0.00025162857269833694
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
