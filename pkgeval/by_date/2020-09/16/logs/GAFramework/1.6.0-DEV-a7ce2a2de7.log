Julia Version 1.6.0-DEV.929
Commit a7ce2a2de7 (2020-09-16 16:46 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_XsXc3d/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_XsXc3d/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21720502685713766
curgen: 20 fitness: 0.21720502685713766
curgen: 30 fitness: 0.21721192739786008
curgen: 40 fitness: 0.21723107852027226
curgen: 50 fitness: 0.21723107852027226
CoordinateCreature{Vector{Float64}}([0.22230836819673933], -0.21723107852027226) 0.22230836819673933 -0.21723107852027226
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2579020290676417
curgen: 100 fitness: 3.258189612378266
curgen: 150 fitness: 3.258189612378266
curgen: 200 fitness: 3.2582015550853898
curgen: 250 fitness: 3.258326342878274
curgen: 300 fitness: 3.2583570585430093
curgen: 350 fitness: 3.2583570585430093
curgen: 400 fitness: 3.258397801068017
curgen: 450 fitness: 3.2583979371983753
curgen: 500 fitness: 3.2584018260729515
CoordinateCreature{Vector{Float64}}([-0.22263880640651673, 0.22263705041900406, -0.22190155017644866, 0.22244676011192274, -0.2225419615646991, -0.22194981771460326, 0.22207564123249787, 0.22287754156880274, 0.22256199466868193, -0.22186800178267677, 0.2223410397552392, -0.22252861204199376, 0.22236368519795213, -0.22199509007873666, 0.22197432528267774], -3.2584018260729515) [-0.22263880640651673, 0.22263705041900406, -0.22190155017644866, 0.22244676011192274, -0.2225419615646991, -0.22194981771460326, 0.22207564123249787, 0.22287754156880274, 0.22256199466868193, -0.22186800178267677, 0.2223410397552392, -0.22252861204199376, 0.22236368519795213, -0.22199509007873666, 0.22197432528267774] -3.2584018260729515
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0017042394390500704
curgen: 100 fitness: -0.0015197161607432008
curgen: 150 fitness: -0.0015197161607432008
curgen: 200 fitness: -0.0015190635015756015
curgen: 250 fitness: -0.000747866626539917
curgen: 300 fitness: -0.0007112194610670031
curgen: 350 fitness: -0.0007100031831157594
curgen: 400 fitness: -0.0006896534231088935
curgen: 450 fitness: -0.0006896534231088935
curgen: 500 fitness: -0.0006896534231088935
CoordinateCreature{Vector{Float64}}([-0.0002616390053330785, 0.00019544859519707267, 0.0005248960201989974, -0.0005182200280988628, 0.00011985856472869212, -0.0005222969104295876, 0.00023081754499018462, -0.00017901278777705527, 2.9733221729803946e-5, -0.00010835307790414673, -0.0007516105508793714, -0.0010083469763061345, 0.0004688663218692506, -0.0007750529908718961, 0.00019536174359097825], 0.0006896534231088935) [-0.0002616390053330785, 0.00019544859519707267, 0.0005248960201989974, -0.0005182200280988628, 0.00011985856472869212, -0.0005222969104295876, 0.00023081754499018462, -0.00017901278777705527, 2.9733221729803946e-5, -0.00010835307790414673, -0.0007516105508793714, -0.0010083469763061345, 0.0004688663218692506, -0.0007750529908718961, 0.00019536174359097825] 0.0006896534231088935
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
