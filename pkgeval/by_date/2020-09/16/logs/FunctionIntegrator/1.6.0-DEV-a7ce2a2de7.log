Julia Version 1.6.0-DEV.929
Commit a7ce2a2de7 (2020-09-16 16:46 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed FunctionIntegrator ─────────── v0.5.1
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed FastGaussQuadrature ────────── v0.4.3
  Installed SpecialFunctions ───────────── v0.10.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [7685536e] + FunctionIntegrator v0.5.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] + FastGaussQuadrature v0.4.3
  [7685536e] + FunctionIntegrator v0.5.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing FunctionIntegrator
Status `/tmp/jl_O9e25p/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.3
  [7685536e] FunctionIntegrator v0.5.1
  [276daf66] SpecialFunctions v0.10.3
  [8dfed614] Test
Status `/tmp/jl_O9e25p/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [442a2c76] FastGaussQuadrature v0.4.3
  [7685536e] FunctionIntegrator v0.5.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [276daf66] SpecialFunctions v0.10.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Performing the Airy Ai(x) test, where Ai(x) is integrated on the semi-infinite domain, or an approximation of it, namely [0,100] and the result is compared to the analytical result 1/3.
Running: adaptive_simpsons_rule
  0.822139 seconds (1.36 M allocations: 72.172 MiB, 1.66% gc time)
Running: chebyshev_quadrature with k=1
  1.900165 seconds (2.15 M allocations: 123.642 MiB, 4.59% gc time)
Running: chebyshev_quadrature with k=2
  0.308968 seconds (409.21 k allocations: 23.543 MiB, 9.39% gc time)
Running: chebyshev_quadrature with k=3
  0.342045 seconds (522.62 k allocations: 28.689 MiB)
Running: chebyshev_quadrature with k=4
  0.409615 seconds (467.28 k allocations: 25.337 MiB, 12.23% gc time)
Running: jacobi_quadrature with α=β=1
 41.006761 seconds (37.16 M allocations: 3.042 GiB, 10.79% gc time)
Running: laguerre_quadrature with k=1
  2.829527 seconds (3.17 M allocations: 177.163 MiB, 3.48% gc time)
Running: legendre_quadrature
  0.239401 seconds (206.06 k allocations: 11.846 MiB, 13.09% gc time)
Running: lobatto_quadrature
  0.336549 seconds (329.76 k allocations: 19.905 MiB)
Running: radau_quadrature
  0.366160 seconds (414.15 k allocations: 25.220 MiB, 7.06% gc time)
Running: rectangle_rule_left. Only a rough approximation can be practically achieved using this function.
 81.522693 seconds (100.02 M allocations: 1.491 GiB, 0.24% gc time)
Running: rectangle_rule_midpoint.
  0.182074 seconds (172.63 k allocations: 3.836 MiB)
Running: rectangle_rule_right. Only a rough approximation can be practically achieved using this function.
 86.593575 seconds (100.02 M allocations: 1.491 GiB, 0.27% gc time)
Running: rombergs_method
  0.614373 seconds (722.04 k allocations: 41.695 MiB)
Running: simpsons_rule
  0.072940 seconds (45.97 k allocations: 2.054 MiB, 47.07% gc time)
Running: simpsons38_rule
  0.095523 seconds (109.09 k allocations: 5.779 MiB)
Running: trapezoidal_rule
  0.317170 seconds (1.51 M allocations: 25.688 MiB)
Test Summary: | Pass  Total
Airy Ai(x)    |   17     17
Performing the besselj test, where BesselJ_1(2) is approximated and the result is compared to the value obtained from SpecialFunctions' besselj function.
Running: adaptive_simpsons_rule with ε=1e-7
  0.084383 seconds (31.26 k allocations: 1.878 MiB)
Running: chebyshev_quadrature with k=1
  0.438293 seconds (272.98 k allocations: 14.186 MiB)
Running: chebyshev_quadrature with k=2
  0.150425 seconds (93.84 k allocations: 2.677 MiB)
Running: chebyshev_quadrature with k=3
  0.157325 seconds (82.09 k allocations: 2.478 MiB)
Running: chebyshev_quadrature with k=4
  0.174038 seconds (64.70 k allocations: 2.124 MiB, 15.18% gc time)
Running: jacobi_quadrature with α=β=1
  2.334696 seconds (499.09 k allocations: 161.590 MiB, 2.22% gc time)
Running: legendre_quadrature
  0.165325 seconds (41.64 k allocations: 2.407 MiB)
Running: lobatto_quadrature
  0.019903 seconds (16.13 k allocations: 1.005 MiB)
Running: radau_quadrature
  0.019495 seconds (16.24 k allocations: 1.012 MiB)
Running: rectangle_rule_left
 30.064648 seconds (471.41 M allocations: 7.025 GiB, 3.34% gc time)
Running: rectangle_rule_midpoint
  0.000022 seconds (45 allocations: 1.047 KiB)
Running: rectangle_rule_right
 29.402275 seconds (476.96 M allocations: 7.107 GiB, 1.92% gc time)
Running: rombergs_method
  0.444357 seconds (326.56 k allocations: 18.556 MiB, 6.52% gc time)
Running: simpsons_rule
  0.000073 seconds (85 allocations: 1.672 KiB)
Running: simpsons38_rule
  0.069781 seconds (19.12 k allocations: 1.156 MiB)
Running: trapezoidal_rule
  0.071104 seconds (17.61 k allocations: 1.065 MiB)
Test Summary: | Pass  Total
besselj       |   16     16
Integrating cos^2(x)/(1+cot(x)) from 0 to pi/2 and comparing the results to the analytical result 0.25.
Running: adaptive_simpsons_rule with ε=1e-7
  0.026549 seconds (1.99 k allocations: 53.594 KiB)
Running: chebyshev_quadrature with k=1
  0.092242 seconds (2.40 k allocations: 113.328 KiB)
Running: chebyshev_quadrature with k=2
  0.110189 seconds (2.65 k allocations: 121.344 KiB)
Running: chebyshev_quadrature with k=3
  0.100332 seconds (3.08 k allocations: 133.547 KiB)
Running: chebyshev_quadrature with k=4
  0.111675 seconds (3.08 k allocations: 133.609 KiB)
Running: jacobi_quadrature with α=β=1
  0.267587 seconds (362.17 k allocations: 18.911 MiB)
Running: legendre_quadrature
  0.068578 seconds (1.24 k allocations: 63.531 KiB)
Running: lobatto_quadrature
  0.000134 seconds (67 allocations: 2.844 KiB)
Running: radau_quadrature
  0.000101 seconds (73 allocations: 3.109 KiB)
Running: rectangle_rule_left
  0.000319 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_midpoint
  0.000249 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right
  0.000341 seconds (9 allocations: 496 bytes)
Running: rombergs_method
  0.069969 seconds (1.01 k allocations: 54.094 KiB)
Running: simpsons_rule
  0.000041 seconds (323 allocations: 5.391 KiB)
Running: simpsons38_rule
  0.031076 seconds (923 allocations: 39.281 KiB)
Running: trapezoidal_rule
  0.024237 seconds (44.33 k allocations: 704.859 KiB)
Test Summary: | Pass  Total
coscotint     |   16     16
Integrating cosine from 0 to pi/2 and comparing the result to the analytical result of 1.
Running: adaptive_simpsons_rule
  0.061153 seconds (72.77 k allocations: 4.238 MiB)
Running: chebyshev_quadrature with k=1
  0.230701 seconds (230.11 k allocations: 12.932 MiB, 13.55% gc time)
Running: chebyshev_quadrature with k=2
  0.196025 seconds (282.77 k allocations: 15.906 MiB)
Running: chebyshev_quadrature with k=3
  0.212475 seconds (262.35 k allocations: 14.298 MiB)
Running: chebyshev_quadrature with k=4
  0.238523 seconds (262.37 k allocations: 14.214 MiB, 10.29% gc time)
Running: jacobi_quadrature with α=β=1
  2.898261 seconds (445.70 k allocations: 163.102 MiB, 4.21% gc time)
Running: legendre_quadrature
  0.197064 seconds (184.98 k allocations: 10.684 MiB, 7.13% gc time)
Running: lobatto_quadrature
  0.191933 seconds (195.85 k allocations: 11.375 MiB)
Running: radau_quadrature
  0.194306 seconds (195.85 k allocations: 11.375 MiB)
Running: rectangle_rule_left
  1.168573 seconds (18.94 k allocations: 1.154 MiB)
Running: rectangle_rule_midpoint
  0.030607 seconds (24.84 k allocations: 1.564 MiB)
Running: rectangle_rule_right
  1.206572 seconds (17.51 k allocations: 1.071 MiB)
Running: rombergs_method
  0.167517 seconds (133.60 k allocations: 7.727 MiB)
Running: simpsons_rule
  0.053333 seconds (27.73 k allocations: 1.739 MiB, 37.60% gc time)
Running: simpsons38_rule
  0.036995 seconds (42.67 k allocations: 2.694 MiB)
Running: trapezoidal_rule
  0.030518 seconds (44.25 k allocations: 1.780 MiB)
Test Summary: | Pass  Total
Cosine        |   16     16
Integrating e^(-x^2)/(1+x^2) on the infinite domain [-inf, inf], or failing that on [-100,100], and comparing it to the analytical result exp(1)*pi*erfc(1)
Running: adaptive_simpsons_rule with ε=1e-7
  0.044843 seconds (99.77 k allocations: 2.991 MiB)
Running: chebyshev_quadrature with k=1
  0.220571 seconds (236.70 k allocations: 13.003 MiB)
Running: chebyshev_quadrature with k=2
  0.223148 seconds (289.78 k allocations: 15.844 MiB)
Running: chebyshev_quadrature with k=3
  0.233949 seconds (269.06 k allocations: 14.290 MiB, 8.02% gc time)
Running: chebyshev_quadrature with k=4
  0.213906 seconds (269.08 k allocations: 14.284 MiB)
Running: hermite_quadrature with k=2
 15.455089 seconds (20.86 M allocations: 1.086 GiB, 11.92% gc time)
Running: jacobi_quadrature with α=β=1
  0.670419 seconds (454.91 k allocations: 49.320 MiB, 6.15% gc time)
Running: laguerre_quadrature with k=1 and multiplying the result by 2 (as Laguerre is only on the semi-infinite domain)
  0.297842 seconds (275.97 k allocations: 15.225 MiB, 19.11% gc time)
Running: legendre_quadrature
  0.194553 seconds (191.54 k allocations: 11.003 MiB)
Running: lobatto_quadrature
  0.342353 seconds (216.66 k allocations: 37.145 MiB, 7.55% gc time)
Running: radau_quadrature
  0.224922 seconds (213.26 k allocations: 29.814 MiB)
Running: rectangle_rule_left
  0.033040 seconds (21.89 k allocations: 1.301 MiB)
Running: rectangle_rule_midpoint
  0.027092 seconds (26.66 k allocations: 1.652 MiB)
Running: rectangle_rule_right
  0.025593 seconds (18.64 k allocations: 1.124 MiB)
Running: rombergs_method
  0.120613 seconds (136.09 k allocations: 7.768 MiB)
Running: simpsons_rule
  0.064945 seconds (39.61 k allocations: 2.073 MiB, 37.51% gc time)
Running: simpsons38_rule
  0.038402 seconds (57.69 k allocations: 3.080 MiB)
Running: trapezoidal_rule
  0.034572 seconds (30.32 k allocations: 1.707 MiB)
Test Summary: | Pass  Total
expnx2datan   |   18     18
Integrate exp(-x^2) from minus infinity to positive infinity and comparing the result to the analytical solution, sqrt(pi)
Running: adaptive_simpsons_rule with ε=1e-7
  0.050277 seconds (60.13 k allocations: 2.291 MiB)
Running: chebyshev_quadrature with k=1
  0.233078 seconds (232.22 k allocations: 12.800 MiB)
Running: chebyshev_quadrature with k=2
  0.258817 seconds (284.99 k allocations: 15.610 MiB)
Running: chebyshev_quadrature with k=3
  0.310783 seconds (264.48 k allocations: 14.329 MiB, 9.88% gc time)
Running: chebyshev_quadrature with k=4
  0.278907 seconds (264.50 k allocations: 14.078 MiB)
Running: hermite_quadrature with k=2
  0.226136 seconds (170.26 k allocations: 9.829 MiB)
Running: jacobi_quadrature with α=β=1
 10.258422 seconds (448.15 k allocations: 1.175 GiB, 13.90% gc time)
Running: laguerre_quadrature (results multiplied by 2, as laguerre only integrates over the semi-infinite domain)
  0.310711 seconds (271.25 k allocations: 15.041 MiB)
Running: legendre_quadrature
  0.160209 seconds (187.10 k allocations: 10.807 MiB)
Running: lobatto_quadrature
  0.254656 seconds (207.42 k allocations: 22.877 MiB, 5.69% gc time)
Running: radau_quadrature
  0.424995 seconds (206.57 k allocations: 20.812 MiB)
Running: rectangle_rule_left
  0.036326 seconds (19.66 k allocations: 1.196 MiB)
Running: rectangle_rule_midpoint
  0.031056 seconds (25.54 k allocations: 1.600 MiB)
Running: rectangle_rule_right
  0.027497 seconds (17.49 k allocations: 1.069 MiB)
Running: rombergs_method
  0.117197 seconds (131.91 k allocations: 7.590 MiB)
Running: simpsons_rule
  0.036768 seconds (32.11 k allocations: 1.866 MiB)
Running: simpsons38_rule
  0.109925 seconds (48.48 k allocations: 2.838 MiB, 17.13% gc time)
Running: trapezoidal_rule
  0.034761 seconds (25.21 k allocations: 1.544 MiB)
Test Summary: | Pass  Total
Gaussian      |   18     18
Integrating 1/x from 1 to e and comparing the result to the analytical solution, 1.
Running: adaptive_simpsons_rule with ε=1e-7
  0.045337 seconds (31.08 k allocations: 1.886 MiB)
Running: chebyshev_quadrature with k=1
  0.233985 seconds (230.60 k allocations: 13.011 MiB)
Running: chebyshev_quadrature with k=2
  0.310871 seconds (283.28 k allocations: 15.959 MiB)
Running: chebyshev_quadrature with k=3
  0.263236 seconds (262.85 k allocations: 14.291 MiB, 7.97% gc time)
Running: chebyshev_quadrature with k=4
  0.250086 seconds (262.88 k allocations: 14.131 MiB)
Running: jacobi_quadrature with α=β=1
  3.155491 seconds (446.24 k allocations: 194.173 MiB, 5.59% gc time)
Running: legendre_quadrature
  0.205036 seconds (185.48 k allocations: 10.778 MiB, 15.63% gc time)
Running: lobatto_quadrature
  0.192047 seconds (196.35 k allocations: 11.401 MiB)
Running: radau_quadrature
  0.212439 seconds (196.35 k allocations: 11.465 MiB)
Running: rectangle_rule_left
  0.284798 seconds (19.47 k allocations: 1.180 MiB)
Running: rectangle_rule_midpoint
  0.024592 seconds (25.18 k allocations: 1.583 MiB)
Running: rectangle_rule_right
  0.098526 seconds (17.85 k allocations: 1.087 MiB)
Running: rombergs_method
  0.155517 seconds (144.42 k allocations: 8.455 MiB)
Running: simpsons_rule
  0.035929 seconds (28.43 k allocations: 1.769 MiB)
Running: simpsons38_rule
  0.071212 seconds (43.39 k allocations: 2.724 MiB, 44.23% gc time)
Running: trapezoidal_rule
  0.026639 seconds (45.19 k allocations: 1.814 MiB)
Test Summary: | Pass  Total
1/x           |   16     16
Integrating log(x)/x from 1 to e and comparing the result to the analytical solution of 0.5.
Running: adaptive_simpsons_rule with ε=1e-7
  0.035323 seconds (31.84 k allocations: 1.837 MiB)
Running: chebyshev_quadrature with k=1
  0.281773 seconds (231.19 k allocations: 12.975 MiB)
Running: chebyshev_quadrature with k=2
  0.255696 seconds (283.90 k allocations: 15.859 MiB)
Running: chebyshev_quadrature with k=3
  0.283713 seconds (263.43 k allocations: 14.216 MiB, 18.46% gc time)
Running: chebyshev_quadrature with k=4
  0.270396 seconds (263.45 k allocations: 14.296 MiB)
Running: jacobi_quadrature with α=β=1
  2.565104 seconds (446.95 k allocations: 148.856 MiB, 8.50% gc time)
Running: legendre_quadrature
  0.250560 seconds (186.07 k allocations: 10.726 MiB, 14.35% gc time)
Running: lobatto_quadrature
  0.168780 seconds (196.95 k allocations: 11.418 MiB)
Running: radau_quadrature
  0.174284 seconds (196.94 k allocations: 11.435 MiB)
Running: rectangle_rule_left
  1.174433 seconds (19.72 k allocations: 1.193 MiB)
Running: rectangle_rule_midpoint
  0.325541 seconds (25.18 k allocations: 1.583 MiB)
Running: rectangle_rule_right
  1.248827 seconds (17.81 k allocations: 1.085 MiB)
Running: rombergs_method
  0.182237 seconds (134.82 k allocations: 7.782 MiB)
Running: simpsons_rule
  0.038978 seconds (29.12 k allocations: 1.796 MiB)
Running: simpsons38_rule
  0.037456 seconds (44.09 k allocations: 2.750 MiB)
Running: trapezoidal_rule
  0.029338 seconds (57.42 k allocations: 2.014 MiB)
Test Summary: | Pass  Total
log(x)/x      |   16     16
Approximating the modified bessel function I_1(1) and comparing it to the result obtained by SpecialFunctions.
Running: adaptive_simpsons_rule with ε=1e-7
  0.172003 seconds (146.09 k allocations: 8.743 MiB)
Running: chebyshev_quadrature with k=1
  0.247423 seconds (69.97 k allocations: 2.207 MiB, 25.13% gc time)
Running: chebyshev_quadrature with k=2
  0.193166 seconds (105.13 k allocations: 2.869 MiB)
Running: chebyshev_quadrature with k=3
  0.219478 seconds (92.61 k allocations: 2.656 MiB)
Running: chebyshev_quadrature with k=4
  0.199836 seconds (72.14 k allocations: 2.252 MiB)
Running: jacobi_quadrature with α=β=1
  3.147157 seconds (474.71 k allocations: 167.497 MiB, 4.24% gc time)
Running: legendre_quadrature
  0.101094 seconds (18.76 k allocations: 1.094 MiB)
Running: lobatto_quadrature
  0.000106 seconds (150 allocations: 4.328 KiB)
Running: radau_quadrature
  0.000058 seconds (150 allocations: 4.406 KiB)
Running: rectangle_rule_left
 43.791161 seconds (590.00 M allocations: 8.792 GiB, 3.17% gc time)
Running: rectangle_rule_midpoint
  0.000093 seconds (40 allocations: 992 bytes)
Running: rectangle_rule_right
 44.176351 seconds (592.75 M allocations: 8.833 GiB, 2.93% gc time)
Running: rombergs_method
  0.164836 seconds (20.54 k allocations: 1.167 MiB)
Running: simpsons_rule
  0.000099 seconds (93 allocations: 1.797 KiB)
Running: simpsons38_rule
  0.042020 seconds (463 allocations: 22.578 KiB)
Running: trapezoidal_rule
  0.030007 seconds (179 allocations: 8.766 KiB)
Test Summary: | Pass  Total
modbessel0    |   16     16
Integrating 1/sqrt(-19.6 sin(x)) from -pi to 0 and comparing the result to the analytical solution of ellipk(1/2)/sqrt(2.45) The integrand has singularities at x = -pi and x=0, so for some of these functions the integration domain has to be itself approximated.
Running: adaptive_simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 32.039633 seconds (629.33 M allocations: 9.387 GiB, 4.23% gc time)
Running: chebyshev_quadrature with k=1
  0.665161 seconds (418.90 k allocations: 23.259 MiB)
Running: chebyshev_quadrature with k=2
 14.194442 seconds (473.62 k allocations: 4.040 GiB, 4.87% gc time)
Running: chebyshev_quadrature with k=3
  6.555958 seconds (276.75 k allocations: 1.643 GiB, 5.14% gc time)
Running: chebyshev_quadrature with k=4
  8.374125 seconds (276.78 k allocations: 2.261 GiB, 2.67% gc time)
Running: jacobi_quadrature with α=β=1. The N value required to get an accurate result is too high to be practical, so only a rough approximation can be arrived at.
 59.003841 seconds (483.65 k allocations: 13.254 GiB, 3.23% gc time)
Running: legendre_quadrature.
  6.029252 seconds (223.20 k allocations: 1.976 GiB, 1.68% gc time)
The following integration functions have to use an approximated domain due to the endpoint singularities.
Running: lobatto_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 54.986419 seconds (8.23 M allocations: 13.383 GiB, 3.56% gc time)
Running: radau_quadrature on [-pi+1e-6, -1e-6]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 50.712126 seconds (7.23 M allocations: 13.369 GiB, 2.98% gc time)
Running: rectangle_rule_left on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.185991 seconds (22.38 k allocations: 1.354 MiB)
Running: rectangle_rule_midpoint on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.216452 seconds (30.63 k allocations: 1.894 MiB)
Running: rectangle_rule_right on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  3.783577 seconds (22.59 k allocations: 1.364 MiB)
Running: rombergs_method on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
  1.166986 seconds (437.89 k allocations: 152.679 MiB)
Running: simpsons_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 42.121498 seconds (600.04 M allocations: 8.943 GiB, 8.48% gc time)
Running: simpsons38_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 40.607669 seconds (600.05 M allocations: 8.943 GiB, 8.07% gc time)
Running: trapezoidal_rule on [-pi+1e-8, -1e-8]. Only a rough approximation can be realistically achieved with this function, due to the singularities.
 41.926679 seconds (600.03 M allocations: 8.943 GiB, 8.27% gc time)
Test Summary: | Pass  Total
Simppen       |   16     16
Integrating sin(x^2)e^(-x)/x from 0 to infinity, with the approximated domain of integration of 0 to 100. The removable singularity at x=0 in the integrand has been removed.
Running: adaptive_simpsons_rule with ε=1e-8
  0.064947 seconds (180.71 k allocations: 4.420 MiB)
Running: chebyshev_quadrature with k=1
  0.233207 seconds (247.17 k allocations: 13.416 MiB)
Running: chebyshev_quadrature with k=2
  0.237367 seconds (271.77 k allocations: 14.487 MiB)
Running: chebyshev_quadrature with k=3
  0.228052 seconds (247.88 k allocations: 12.783 MiB)
Running: chebyshev_quadrature with k=4
  0.239386 seconds (247.91 k allocations: 12.782 MiB)
Running: jacobi_quadrature with α=β=1
  0.455424 seconds (387.52 k allocations: 34.885 MiB)
Running: laguerre_quadrature with k=2
  0.209989 seconds (180.07 k allocations: 10.454 MiB)
Running: legendre_quadrature
  0.133264 seconds (145.31 k allocations: 8.035 MiB)
Running: lobatto_quadrature
  0.037089 seconds (10.69 k allocations: 15.100 MiB)
Running: radau_quadrature
  0.032204 seconds (9.47 k allocations: 13.174 MiB)
Running: rectangle_rule_left
  0.060768 seconds (18.99 k allocations: 1.129 MiB)
Running: rectangle_rule_midpoint
  0.044527 seconds (25.65 k allocations: 1.585 MiB)
Running: rectangle_rule_right
  0.081523 seconds (17.59 k allocations: 1.055 MiB)
Running: rombergs_method
  0.313617 seconds (171.87 k allocations: 9.874 MiB)
Running: simpsons_rule
  0.001828 seconds (24.72 k allocations: 386.656 KiB)
Running: simpsons38_rule
  0.058819 seconds (79.17 k allocations: 3.400 MiB)
Running: trapezoidal_rule
  0.203483 seconds (2.39 M allocations: 37.700 MiB)
Test Summary: | Pass  Total
sinexpox      |   17     17
Integrating sin(x)/x from 0 to 100 and comparing it to the exact result.
Running: adaptive_simpsons_rule with ε=1e-8
  0.002061 seconds (30.71 k allocations: 480.250 KiB)
Running: chebyshev_quadrature with k=1
  0.135576 seconds (2.40 k allocations: 1.688 MiB)
Running: chebyshev_quadrature with k=2
  0.135078 seconds (2.65 k allocations: 2.352 MiB)
Running: chebyshev_quadrature with k=3
  0.128590 seconds (3.08 k allocations: 2.052 MiB)
Running: chebyshev_quadrature with k=4
  0.120421 seconds (3.08 k allocations: 1.493 MiB)
Running: jacobi_quadrature with α=β=1
  7.283581 seconds (364.56 k allocations: 904.784 MiB, 4.23% gc time)
Running: legendre_quadrature
  0.081225 seconds (1.23 k allocations: 65.688 KiB)
Running: lobatto_quadrature
  0.000178 seconds (253 allocations: 9.188 KiB)
Running: radau_quadrature
  0.000134 seconds (224 allocations: 8.859 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function
  4.231464 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.000476 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function
  4.066947 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.081572 seconds (959 allocations: 54.031 KiB)
Running: simpsons_rule
  0.000056 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000058 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.000955 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
sinxx         |   16     16
Integrating (x^3+1)/(x^4 (x+1)(x^2+1)) from 1 to e and comparing the result to the analytical solution of log(sqrt(2)*exp(1)/(sqrt(exp(2)+1)))+1/2*(exp(-2)-1)+1/3*(1-exp(-3))
Running: adaptive_simpsons_rule with ε=1e-8
  0.000775 seconds (6.34 k allocations: 99.453 KiB)
Running: chebyshev_quadrature with k=1
  0.117778 seconds (2.48 k allocations: 576.484 KiB)
Running: chebyshev_quadrature with k=2
  0.119610 seconds (2.73 k allocations: 777.266 KiB)
Running: chebyshev_quadrature with k=3
  0.122640 seconds (3.15 k allocations: 685.500 KiB)
Running: chebyshev_quadrature with k=4
  0.121975 seconds (3.16 k allocations: 516.062 KiB)
Running: jacobi_quadrature with α=β=1
  2.564345 seconds (371.12 k allocations: 252.864 MiB)
Running: legendre_quadrature
  0.073318 seconds (1.28 k allocations: 65.359 KiB)
Running: lobatto_quadrature
  0.000161 seconds (91 allocations: 3.656 KiB)
Running: radau_quadrature
  0.000130 seconds (83 allocations: 3.484 KiB)
Running: rectangle_rule_left; only a rough approximation can be practically achieved using this function.
 11.239664 seconds (11 allocations: 528 bytes)
Running: rectangle_rule_midpoint
  0.001190 seconds (9 allocations: 496 bytes)
Running: rectangle_rule_right; only a rough approximation can be practically achieved using this function.
 10.944326 seconds (11 allocations: 528 bytes)
Running: rombergs_method
  0.100890 seconds (1.18 k allocations: 62.547 KiB)
Running: simpsons_rule
  0.000056 seconds (9 allocations: 496 bytes)
Running: simpsons38_rule
  0.000046 seconds (9 allocations: 496 bytes)
Running: trapezoidal_rule
  0.001617 seconds (9 allocations: 496 bytes)
Test Summary: | Pass  Total
partfrac      |   16     16
    Testing FunctionIntegrator tests passed 
