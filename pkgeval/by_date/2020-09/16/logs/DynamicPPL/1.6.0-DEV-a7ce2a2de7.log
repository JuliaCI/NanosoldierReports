Julia Version 1.6.0-DEV.929
Commit a7ce2a2de7 (2020-09-16 16:46 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed OrderedCollections ─────────── v1.3.1
  Installed AbstractMCMC ───────────────── v1.0.1
  Installed LoggingExtras ──────────────── v0.4.2
  Installed QuadGK ─────────────────────── v2.4.1
  Installed AbstractTrees ──────────────── v0.3.3
  Installed ChainRulesCore ─────────────── v0.9.10
  Installed DynamicPPL ─────────────────── v0.9.1
  Installed Distributions ──────────────── v0.23.11
  Installed NaturalSort ────────────────── v1.0.0
  Installed TerminalLoggers ────────────── v0.1.2
  Installed LeftChildRightSiblingTrees ─── v0.1.2
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed MacroTools ─────────────────── v0.5.5
  Installed Compat ─────────────────────── v3.16.0
  Installed ProgressMeter ──────────────── v1.3.3
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed SpecialFunctions ───────────── v0.10.3
  Installed ArgCheck ───────────────────── v2.1.0
  Installed StatsBase ──────────────────── v0.33.1
  Installed NNlib ──────────────────────── v0.7.4
  Installed StatsFuns ──────────────────── v0.9.5
  Installed Roots ──────────────────────── v1.0.5
  Installed FillArrays ─────────────────── v0.9.6
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed ProgressLogging ────────────── v0.1.3
  Installed Requires ───────────────────── v1.0.2
  Installed ConsoleProgressMonitor ─────── v0.1.2
  Installed Reexport ───────────────────── v0.2.0
  Installed Rmath_jll ──────────────────── v0.2.2+1
  Installed MuladdMacro ────────────────── v0.2.2
  Installed PDMats ─────────────────────── v0.10.0
  Installed Missings ───────────────────── v0.4.4
  Installed Rmath ──────────────────────── v0.6.1
  Installed DataAPI ────────────────────── v1.3.0
  Installed Bijectors ──────────────────── v0.8.5
  Installed MappedArrays ───────────────── v0.2.2
  Installed DataStructures ─────────────── v0.18.6
Updating `~/.julia/environments/v1.6/Project.toml`
  [366bfd00] + DynamicPPL v0.9.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [80f14c24] + AbstractMCMC v1.0.1
  [1520ce14] + AbstractTrees v0.3.3
  [dce04be8] + ArgCheck v2.1.0
  [76274a88] + Bijectors v0.8.5
  [d360d2e6] + ChainRulesCore v0.9.10
  [34da2185] + Compat v3.16.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [88cd18e8] + ConsoleProgressMonitor v0.1.2
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.18.6
  [31c24e10] + Distributions v0.23.11
  [366bfd00] + DynamicPPL v0.9.1
  [1a297f60] + FillArrays v0.9.6
  [1d6d02ad] + LeftChildRightSiblingTrees v0.1.2
  [e6f89c97] + LoggingExtras v0.4.2
  [1914dd2f] + MacroTools v0.5.5
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.4
  [46d2c3a1] + MuladdMacro v0.2.2
  [872c559c] + NNlib v0.7.4
  [c020b1a1] + NaturalSort v1.0.0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.3.1
  [90014a1f] + PDMats v0.10.0
  [33c8b6b6] + ProgressLogging v0.1.3
  [92933f4c] + ProgressMeter v1.3.3
  [1fd47b50] + QuadGK v2.4.1
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.2
  [79098fc4] + Rmath v0.6.1
  [f50d1b31] + Rmath_jll v0.2.2+1
  [f2b01f46] + Roots v1.0.5
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.3
  [2913bbd2] + StatsBase v0.33.1
  [4c63d2b9] + StatsFuns v0.9.5
  [5d786b92] + TerminalLoggers v0.1.2
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing DynamicPPL
Status `/tmp/jl_55xk8j/Project.toml`
  [80f14c24] AbstractMCMC v1.0.1
  [0bf59076] AdvancedHMC v0.2.25
  [5b7e9947] AdvancedMH v0.5.1
  [76274a88] Bijectors v0.8.5
  [31c24e10] Distributions v0.23.11
  [ced4e74d] DistributionsAD v0.6.9
  [ffbed154] DocStringExtensions v0.8.3
  [366bfd00] DynamicPPL v0.9.1
  [cad2338a] EllipticalSliceSampling v0.2.2
  [f6369f11] ForwardDiff v0.10.12
  [6f1fad26] Libtask v0.4.1
  [6fdf6af0] LogDensityProblems v0.10.3
  [c7f686f2] MCMCChains v4.1.0
  [1914dd2f] MacroTools v0.5.5
  [90014a1f] PDMats v0.10.0
  [33c8b6b6] ProgressLogging v0.1.3
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.2
  [276daf66] SpecialFunctions v0.10.3
  [2913bbd2] StatsBase v0.33.1
  [4c63d2b9] StatsFuns v0.9.5
  [9f7883ad] Tracker v0.2.11
  [e88e6eb3] Zygote v0.5.7
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [9a3f8284] Random
  [9e88b42a] Serialization
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
Status `/tmp/jl_55xk8j/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [80f14c24] AbstractMCMC v1.0.1
  [1520ce14] AbstractTrees v0.3.3
  [79e6a3ab] Adapt v2.1.0
  [0bf59076] AdvancedHMC v0.2.25
  [5b7e9947] AdvancedMH v0.5.1
  [dce04be8] ArgCheck v2.1.0
  [4fba245c] ArrayInterface v2.12.0
  [4c555306] ArrayLayouts v0.4.8
  [39de3d68] AxisArrays v0.4.3
  [6e4b80f9] BenchmarkTools v0.5.0
  [76274a88] Bijectors v0.8.5
  [b99e7846] BinaryProvider v0.5.10
  [082447d4] ChainRules v0.7.19
  [d360d2e6] ChainRulesCore v0.9.10
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.16.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [88cd18e8] ConsoleProgressMonitor v0.1.2
  [adafc99b] CpuId v0.2.2
  [a8cc5b0e] Crayons v4.0.4
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.18.6
  [e2d170a0] DataValueInterfaces v1.0.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [31c24e10] Distributions v0.23.11
  [ced4e74d] DistributionsAD v0.6.9
  [ffbed154] DocStringExtensions v0.8.3
  [366bfd00] DynamicPPL v0.9.1
  [da5c29d0] EllipsisNotation v0.4.0
  [cad2338a] EllipticalSliceSampling v0.2.2
  [1a297f60] FillArrays v0.9.6
  [59287772] Formatting v0.4.1
  [f6369f11] ForwardDiff v0.10.12
  [7869d1d1] IRTools v0.4.1
  [505f98c9] InplaceOps v0.3.0
  [8197267c] IntervalSets v0.5.1
  [c8e1da08] IterTools v1.3.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.1
  [1d6d02ad] LeftChildRightSiblingTrees v0.1.2
  [6f1fad26] Libtask v0.4.1
  [6fdf6af0] LogDensityProblems v0.10.3
  [e6f89c97] LoggingExtras v0.4.2
  [bdcacae8] LoopVectorization v0.8.26
  [c7f686f2] MCMCChains v4.1.0
  [1914dd2f] MacroTools v0.5.5
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.4
  [46d2c3a1] MuladdMacro v0.2.2
  [872c559c] NNlib v0.7.4
  [77ba4419] NaNMath v0.3.4
  [c020b1a1] NaturalSort v1.0.0
  [6fe1bfb0] OffsetArrays v1.2.0
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.3.1
  [90014a1f] PDMats v0.10.0
  [d96e819e] Parameters v0.12.1
  [69de0a69] Parsers v1.0.10
  [08abe8d2] PrettyTables v0.9.1
  [33c8b6b6] ProgressLogging v0.1.3
  [92933f4c] ProgressMeter v1.3.3
  [1fd47b50] QuadGK v2.4.1
  [b3c3ace0] RangeArrays v0.3.2
  [3cdcf5f2] RecipesBase v1.1.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.2
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+1
  [f2b01f46] Roots v1.0.5
  [21efa798] SIMDPirates v0.8.25
  [476501e8] SLEEFPirates v0.5.5
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.1
  [4c63d2b9] StatsFuns v0.9.5
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.5
  [5d786b92] TerminalLoggers v0.1.2
  [9f7883ad] Tracker v0.2.11
  [84d833dd] TransformVariables v0.3.10
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.33
  [e88e6eb3] Zygote v0.5.7
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
[ Info: [Turing]: progress logging is disabled globally
┌ Warning: you are using the internal variable `_varinfo`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/moP7G/src/compiler.jl:169
┌ Warning: you are using the internal variable `_varinfo`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/moP7G/src/compiler.jl:169
┌ Warning: you are using the internal variable `_sampler`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/moP7G/src/compiler.jl:169
┌ Warning: you are using the internal variable `_model`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/moP7G/src/compiler.jl:169
┌ Warning: you are using the internal variable `_context`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/moP7G/src/compiler.jl:169
┌ Warning: you are using the internal variable `_rng`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/moP7G/src/compiler.jl:169
┌ Warning: you are using the internal variable `_varinfo`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/moP7G/src/compiler.jl:169
[ Info: (symbol = :y, exact = 0.5, evaluated = 0.5)
[ Info: (symbol = :y, exact = 0.5, evaluated = 0.47)
beta binomial: Error During Test at /home/pkgeval/.julia/packages/DynamicPPL/moP7G/test/compiler.jl:40
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/Zo6uM/src/ctask.jl:97
    [3] copy(trace::Main.Turing.Core.Trace{Sampler{SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.SMCState{VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#60#124", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}})
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/moP7G/test/Turing/core/container.jl:18
    [4] fork(trace::Main.Turing.Core.Trace{Sampler{SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.SMCState{VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#60#124", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}}, is_ref::Bool)
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/moP7G/test/Turing/core/container.jl:61
    [5] resample_propagate!(pc::Main.Turing.Core.ParticleContainer{Main.Turing.Core.Trace{Sampler{SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.SMCState{VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#60#124", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}}}, randcat::typeof(Main.Turing.Inference.resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/moP7G/test/Turing/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/DynamicPPL/moP7G/test/Turing/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::Main.Turing.Core.ParticleContainer{Main.Turing.Core.Trace{Sampler{SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.SMCState{VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#60#124", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}}}, resampler::Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}, ref::Nothing)
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/moP7G/test/Turing/core/container.jl:353
    [8] sweep!(pc::Main.Turing.Core.ParticleContainer{Main.Turing.Core.Trace{Sampler{SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.SMCState{VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#60#124", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}}}, resampler::Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64})
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/moP7G/test/Turing/core/container.jl:318
    [9] sample_init!(::Random._GLOBAL_RNG, model::Model{var"#60#124", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}, spl::Sampler{SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.SMCState{VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/AdvancedSMC.jl:117
   [10] sample_init!
      @ ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/AdvancedSMC.jl:100 [inlined]
   [11] mcmcsample(rng::Random._GLOBAL_RNG, model::Model{var"#60#124", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}, sampler::Sampler{SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.SMCState{VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:74
   [12] sample(rng::Random._GLOBAL_RNG, model::Model{var"#60#124", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}, sampler::Sampler{SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.SMCState{VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/Inference.jl:178
   [13] sample(rng::Random._GLOBAL_RNG, model::Model{var"#60#124", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}, sampler::Sampler{SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.SMCState{VarInfo{NamedTuple{(:p, :x), Tuple{DynamicPPL.Metadata{Dict{VarName{:p, Tuple{}}, Int64}, Vector{Beta{Float64}}, Vector{VarName{:p, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:x, Tuple{}}, Int64}, Vector{Bernoulli{Float64}}, Vector{VarName{:x, Tuple{}}}, BitVector, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64)
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/Inference.jl:177
   [14] sample(rng::Random._GLOBAL_RNG, model::Model{var"#60#124", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}, alg::SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/Inference.jl:164
   [15] sample
      @ ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/Inference.jl:164 [inlined]
   [16] #sample#1
      @ ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/Inference.jl:154 [inlined]
   [17] sample(model::Model{var"#60#124", (:obs,), (), (), Tuple{Vector{Int64}}, Tuple{}}, alg::SMC{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, N::Int64)
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/Inference.jl:154
   [18] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/compiler.jl:59
   [19] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [20] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/compiler.jl:41
   [21] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [22] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/compiler.jl:20
   [23] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [24] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/runtests.jl:23
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [26] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/runtests.jl:22
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] top-level scope
      @ none:6
   [29] eval(m::Module, e::Any)
      @ Core ./boot.jl:345
   [30] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [31] _start()
      @ Base ./client.jl:485
WARNING: Method definition testmodel0() in module Main at /home/pkgeval/.julia/packages/DynamicPPL/moP7G/src/compiler.jl:344 overwritten on the same line.
WARNING: Method definition testmodel0(Any) in module Main at /home/pkgeval/.julia/packages/DynamicPPL/moP7G/src/compiler.jl:344 overwritten on the same line.
[ Info: Testing the compiler's ability to catch bad models...
WARNING: Method definition testmodel(Any) in module Main at /home/pkgeval/.julia/packages/DynamicPPL/moP7G/src/compiler.jl:344 overwritten on the same line.
WARNING: Method definition testmodel(Any) in module Main at /home/pkgeval/.julia/packages/DynamicPPL/moP7G/src/compiler.jl:344 overwritten on the same line.
WARNING: Method definition testmodel(Any) in module Main at /home/pkgeval/.julia/packages/DynamicPPL/moP7G/src/compiler.jl:344 overwritten on the same line.
WARNING: Method definition testmodel(Any) in module Main at /home/pkgeval/.julia/packages/DynamicPPL/moP7G/src/compiler.jl:344 overwritten on the same line.
new grammar: Error During Test at /home/pkgeval/.julia/packages/DynamicPPL/moP7G/test/compiler.jl:287
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/Zo6uM/src/ctask.jl:97
    [3] copy(trace::Main.Turing.Core.Trace{Sampler{PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#86#165", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}})
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/moP7G/test/Turing/core/container.jl:18
    [4] fork(trace::Main.Turing.Core.Trace{Sampler{PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#86#165", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}, is_ref::Bool)
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/moP7G/test/Turing/core/container.jl:61
    [5] resample_propagate!(pc::Main.Turing.Core.ParticleContainer{Main.Turing.Core.Trace{Sampler{PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#86#165", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}}, randcat::typeof(Main.Turing.Inference.resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/moP7G/test/Turing/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/DynamicPPL/moP7G/test/Turing/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::Main.Turing.Core.ParticleContainer{Main.Turing.Core.Trace{Sampler{PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#86#165", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}}, resampler::Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}, ref::Nothing)
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/moP7G/test/Turing/core/container.jl:353
    [8] sweep!(pc::Main.Turing.Core.ParticleContainer{Main.Turing.Core.Trace{Sampler{PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#86#165", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}}, resampler::Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64})
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/moP7G/test/Turing/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::Model{var"#86#165", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, spl::Sampler{PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/AdvancedSMC.jl:266
   [10] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [11] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [13] mcmcsample(rng::Random._GLOBAL_RNG, model::Model{var"#86#165", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, sampler::Sampler{PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [14] sample(rng::Random._GLOBAL_RNG, model::Model{var"#86#165", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, sampler::Sampler{PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/Inference.jl:178
   [15] sample(rng::Random._GLOBAL_RNG, model::Model{var"#86#165", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, sampler::Sampler{PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:priors,), Tuple{DynamicPPL.Metadata{Dict{VarName{:priors, Tuple{Tuple{Int64}}}, Int64}, Vector{Distribution{Univariate, Continuous}}, Vector{VarName{:priors, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64)
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/Inference.jl:177
   [16] sample(rng::Random._GLOBAL_RNG, model::Model{var"#86#165", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, alg::PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/Inference.jl:164
   [17] sample
      @ ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/Inference.jl:164 [inlined]
   [18] #sample#1
      @ ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/Inference.jl:154 [inlined]
   [19] sample(model::Model{var"#86#165", (:x,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, alg::PG{(), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, N::Int64)
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/Inference.jl:154
   [20] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/compiler.jl:300
   [21] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [22] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/compiler.jl:288
   [23] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [24] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/compiler.jl:20
   [25] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [26] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/runtests.jl:23
   [27] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [28] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/runtests.jl:22
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] top-level scope
      @ none:6
   [31] eval(m::Module, e::Any)
      @ Core ./boot.jl:345
   [32] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [33] _start()
      @ Base ./client.jl:485
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 1.8741447602030021)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1816996319031534)
sample: Error During Test at /home/pkgeval/.julia/packages/DynamicPPL/moP7G/test/compiler.jl:372
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/Zo6uM/src/ctask.jl:97
    [3] copy(trace::Main.Turing.Core.Trace{Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#47#48", (), (), (), Tuple{}, Tuple{}}})
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/moP7G/test/Turing/core/container.jl:18
    [4] fork(trace::Main.Turing.Core.Trace{Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#47#48", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/moP7G/test/Turing/core/container.jl:61
    [5] resample_propagate!(pc::Main.Turing.Core.ParticleContainer{Main.Turing.Core.Trace{Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#47#48", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(Main.Turing.Inference.resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/moP7G/test/Turing/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/DynamicPPL/moP7G/test/Turing/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::Main.Turing.Core.ParticleContainer{Main.Turing.Core.Trace{Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#47#48", (), (), (), Tuple{}, Tuple{}}}}, resampler::Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}, ref::Nothing)
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/moP7G/test/Turing/core/container.jl:353
    [8] sweep!(pc::Main.Turing.Core.ParticleContainer{Main.Turing.Core.Trace{Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Model{var"#47#48", (), (), (), Tuple{}, Tuple{}}}}, resampler::Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64})
      @ Main.Turing.Core ~/.julia/packages/DynamicPPL/moP7G/test/Turing/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::Model{var"#47#48", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Main.Turing.Inference.ParticleTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64}; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/AdvancedSMC.jl:266
   [10] (::Main.Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, Model{var"#47#48", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, Main.Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, Int64, Main.Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}})(::Tuple{Int64, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/gibbs.jl:189
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect_to!(dest::Vector{Main.Turing.Inference.HamiltonianTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, NamedTuple{(:n_steps, :is_accept, :acceptance_rate, :log_density, :hamiltonian_energy, :hamiltonian_energy_error, :step_size, :nom_step_size), Tuple{Int64, Bool, Float64, Float64, Float64, Float64, Float64, Float64}}, Float64}}, itr::Base.Generator{Base.Iterators.Enumerate{Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}, Main.Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, Model{var"#47#48", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, Main.Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, Int64, Main.Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}}}, offs::Int64, st::Tuple{Int64, Int64})
      @ Base ./array.jl:732
   [13] collect_to_with_first!(dest::Vector{Main.Turing.Inference.HamiltonianTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, NamedTuple{(:n_steps, :is_accept, :acceptance_rate, :log_density, :hamiltonian_energy, :hamiltonian_energy_error, :step_size, :nom_step_size), Tuple{Int64, Bool, Float64, Float64, Float64, Float64, Float64, Float64}}, Float64}}, v1::Main.Turing.Inference.HamiltonianTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, NamedTuple{(:n_steps, :is_accept, :acceptance_rate, :log_density, :hamiltonian_energy, :hamiltonian_energy_error, :step_size, :nom_step_size), Tuple{Int64, Bool, Float64, Float64, Float64, Float64, Float64, Float64}}, Float64}, itr::Base.Generator{Base.Iterators.Enumerate{Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}, Main.Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, Model{var"#47#48", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, Main.Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, Int64, Main.Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}}}, st::Tuple{Int64, Int64})
      @ Base ./array.jl:710
   [14] collect(itr::Base.Generator{Base.Iterators.Enumerate{Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}, Main.Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, Model{var"#47#48", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, Main.Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, Int64, Main.Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}}})
      @ Base ./array.jl:691
   [15] map
      @ ./abstractarray.jl:2262 [inlined]
   [16] step!(rng::Random._GLOBAL_RNG, model::Model{var"#47#48", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, Main.Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64, transition::Main.Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/gibbs.jl:179
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:93 [inlined]
   [18] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [19] mcmcsample(rng::Random._GLOBAL_RNG, model::Model{var"#47#48", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, Main.Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [20] sample(rng::Random._GLOBAL_RNG, model::Model{var"#47#48", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, Main.Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/Inference.jl:178
   [21] sample(rng::Random._GLOBAL_RNG, model::Model{var"#47#48", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, Main.Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Main.Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}, Sampler{PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}, Main.Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64)
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/Inference.jl:177
   [22] sample(rng::Random._GLOBAL_RNG, model::Model{var"#47#48", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/Inference.jl:164
   [23] sample
      @ ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/Inference.jl:164 [inlined]
   [24] #sample#1
      @ ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/Inference.jl:154 [inlined]
   [25] sample(model::Model{var"#47#48", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, PG{(:s,), Main.Turing.Core.ResampleWithESSThreshold{typeof(Main.Turing.Inference.resample_systematic), Float64}}}}, N::Int64)
      @ Main.Turing.Inference ~/.julia/packages/DynamicPPL/moP7G/test/Turing/inference/Inference.jl:154
   [26] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/compiler.jl:374
   [27] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [28] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/compiler.jl:373
   [29] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [30] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/compiler.jl:20
   [31] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [32] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/runtests.jl:23
   [33] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [34] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/runtests.jl:22
   [35] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [36] top-level scope
      @ none:6
   [37] eval(m::Module, e::Any)
      @ Core ./boot.jl:345
   [38] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [39] _start()
      @ Base ./client.jl:485
[ Info: [Turing]: AD chunk size is set as 10
Time for
  Loop : 11.415022696
  Vec  : 14.864873053
  Mv   : 12.71034687
Time for
  Loop : 8.383755317
  Vec  : 10.966767031
  Mv   : 7.808063375
[ Info: (symbol = "p[1,1]", exact = 0, evaluated = 0.032107025244295255)
[ Info: (symbol = "p[1][1]", exact = 0, evaluated = 0.09291745899173241)
┌ Warning: Argument x is not defined. A value of `nothing` is used.
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/moP7G/src/prob_macro.jl:165
┌ Warning: Argument x is not defined. A value of `nothing` is used.
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/moP7G/src/prob_macro.jl:165
┌ Warning: Argument x is not defined. A value of `nothing` is used.
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/moP7G/src/prob_macro.jl:165
┌ Warning: Argument x is not defined. A value of `nothing` is used.
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/moP7G/src/prob_macro.jl:165
┌ Info: Found initial step size
└   ϵ = 0.0125
┌ Info: Found initial step size
└   ϵ = 0.0125
┌ Warning: you are using the internal variable `_varinfo`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/moP7G/src/compiler.jl:169
┌ Warning: you are using the internal variable `_varinfo`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/moP7G/src/compiler.jl:169
Peforming threading tests with 2 threads
With `@threads`:
  default:
  0.067488 seconds (120.01 k allocations: 3.358 MiB)
  evaluate_threadsafe:
  0.048337 seconds (120.01 k allocations: 3.358 MiB)
Without `@threads`:
  default:
  0.037993 seconds (120.00 k allocations: 3.357 MiB)
  evaluate_threadunsafe:
  0.044440 seconds (120.00 k allocations: 3.357 MiB)
[ Info: serialization test: using 40 processes
logp: Error During Test at /home/pkgeval/.julia/packages/DynamicPPL/moP7G/test/compat/ad.jl:2
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2778#1234
      @ ~/.julia/packages/Zygote/NSWXO/src/compiler/interface2.jl:34 [inlined]
    [4] #s2778#1234(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:556
    [6] _pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:38
    [7] pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/NSWXO/src/compiler/interface.jl:44
    [8] test_model_ad(model::Model{var"#346#347", (), (), (), Tuple{}, Tuple{}}, logp_manual::var"#logp_gdemo_default#404")
      @ Main ~/.julia/packages/DynamicPPL/moP7G/test/test_util.jl:24
    [9] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/compat/ad.jl:13
   [10] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [11] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/compat/ad.jl:4
   [12] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [13] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/compat/ad.jl:2
   [14] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [15] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/runtests.jl:37
   [16] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [17] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/runtests.jl:37
   [18] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1113
   [19] top-level scope
      @ ~/.julia/packages/DynamicPPL/moP7G/test/runtests.jl:22
   [20] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [21] top-level scope
      @ none:6
   [22] eval(m::Module, e::Any)
      @ Core ./boot.jl:345
   [23] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [24] _start()
      @ Base ./client.jl:485
Test Summary:                  | Pass  Error  Total
DynamicPPL.jl                  |  351      4    355
  addlogprob!                  |    2             2
  getargs_dottilde             |    9             9
  getargs_tilde                |    9             9
  compiler.jl                  |   55      3     58
    assume                     |    4             4
    beta binomial              |           1      1
    forbid global              |              No tests
    model macro                |   20            20
    nested model               |    1             1
    new grammar                |           1      1
    new interface              |              No tests
    no return                  |    2             2
    observe                    |    5             5
    sample                     |           1      1
    vectorization @.           |              No tests
    vectorization .~           |              No tests
    Type parameters            |              No tests
    var name splitting         |   14            14
    user-defined variable name |    6             6
    custom tilde               |    1             1
    docstring                  |    2             2
  RandomVariables.jl           |  175           175
  model.jl                     |   24            24
  AbstractMCMC interface       |    8             8
  prob_macro                   |   29            29
  Turing independence          |              No tests
  distribution_wrappers.jl     |    4             4
  context_implementations.jl   |              No tests
  threadsafe.jl                |   21            21
  serialization.jl             |   12            12
  compat                       |    3      1      4
    ad.jl                      |    3      1      4
      logp                     |    3      1      4
ERROR: LoadError: Some tests did not pass: 351 passed, 0 failed, 4 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/DynamicPPL/moP7G/test/runtests.jl:21
ERROR: Package DynamicPPL errored during testing
Stacktrace:
  [1] pkgerror(::String, ::Vararg{String, N} where N)
    @ Pkg.Types /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1580
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:328
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:315
  [5] #test#62
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [6] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [7] #test#61
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:19
