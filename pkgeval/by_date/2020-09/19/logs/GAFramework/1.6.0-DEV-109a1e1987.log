Julia Version 1.6.0-DEV.968
Commit 109a1e1987 (2020-09-18 16:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake-avx512)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
[ Info: LEGAL NOTICE: package operations send anonymous data about your system to https://pkg.julialang.org (your current package server), including the operating system and Julia versions you are using, and a random client UUID. Running `Pkg.telemetryinfo()` will show exactly what data is sent. See https://julialang.org/legal/data/ for more details about what this data is used for, how long it is retained, and how to opt out of sending it.
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_TwbDO3/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_TwbDO3/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2171952671727803
curgen: 20 fitness: 0.2172077952989471
curgen: 30 fitness: 0.2172277365043792
curgen: 40 fitness: 0.2172277365043792
curgen: 50 fitness: 0.2172277365043792
CoordinateCreature{Vector{Float64}}([-0.2227094918277721], -0.21723247680246144) -0.2227094918277721 -0.21723247680246144
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.257175180328863
curgen: 100 fitness: 3.2574635063544344
curgen: 150 fitness: 3.2579048782295845
curgen: 200 fitness: 3.258093287005641
curgen: 250 fitness: 3.258131843467698
curgen: 300 fitness: 3.2581706291777017
curgen: 350 fitness: 3.2581706291777017
curgen: 400 fitness: 3.2583587109651084
curgen: 450 fitness: 3.258422663756076
curgen: 500 fitness: 3.258422663756076
CoordinateCreature{Vector{Float64}}([-0.22250150072706282, 0.22318773475760917, -0.22252847271963738, 0.22243397850505503, -0.22286274070844933, -0.22255584711350157, -0.22242458314549035, -0.22298637173392644, 0.22268332113566972, 0.22315388244064477, -0.2218982558704078, 0.22248859395095527, 0.22282235624734423, 0.2221309099715752, -0.222310172993537], -3.258422663756076) [-0.22250150072706282, 0.22318773475760917, -0.22252847271963738, 0.22243397850505503, -0.22286274070844933, -0.22255584711350157, -0.22242458314549035, -0.22298637173392644, 0.22268332113566972, 0.22315388244064477, -0.2218982558704078, 0.22248859395095527, 0.22282235624734423, 0.2221309099715752, -0.222310172993537] -3.258422663756076
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0013952298795061324
curgen: 100 fitness: -0.0009264170953144912
curgen: 150 fitness: -0.0005939659301077427
curgen: 200 fitness: -0.0005939659301077427
curgen: 250 fitness: -0.0004586214791970633
curgen: 300 fitness: -0.0004586214791970633
curgen: 350 fitness: -0.0004586214791970633
curgen: 400 fitness: -0.0004586214791970633
curgen: 450 fitness: -0.0003260225903147784
curgen: 500 fitness: -0.0003260225903147784
CoordinateCreature{Vector{Float64}}([0.0006305710524011209, -0.00010265147905198698, 0.00025466522841913924, -0.0001591233370477534, 5.71303363825828e-5, -0.0006619273165926954, -1.1834895457815984e-5, 0.0006636164034568571, 2.9060712137761978e-5, 0.0001855687025869801, 0.00021137274047526472, -0.00036691458100930694, 0.00015945639801554797, 1.7206365232976103e-5, 0.00015082697405114417], 0.0003260225903147784) [0.0006305710524011209, -0.00010265147905198698, 0.00025466522841913924, -0.0001591233370477534, 5.71303363825828e-5, -0.0006619273165926954, -1.1834895457815984e-5, 0.0006636164034568571, 2.9060712137761978e-5, 0.0001855687025869801, 0.00021137274047526472, -0.00036691458100930694, 0.00015945639801554797, 1.7206365232976103e-5, 0.00015082697405114417] 0.0003260225903147784
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
