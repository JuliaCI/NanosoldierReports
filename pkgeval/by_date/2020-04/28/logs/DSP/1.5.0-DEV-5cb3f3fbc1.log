Julia Version 1.5.0-DEV.701
Commit 5cb3f3fbc1 (2020-04-28 13:13 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Libiconv_jll ───────────────── v1.16.0+2
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed EzXML ──────────────────────── v1.1.0
  Installed ExprTools ──────────────────── v0.1.1
  Installed FFTW ───────────────────────── v1.2.1
  Installed Intervals ──────────────────── v1.1.0
  Installed DSP ────────────────────────── v0.6.6
  Installed Polynomials ────────────────── v0.8.0
  Installed FFTW_jll ───────────────────── v3.3.9+5
  Installed Reexport ───────────────────── v0.2.0
  Installed IntelOpenMP_jll ────────────── v2018.0.3+0
  Installed Zlib_jll ───────────────────── v1.2.11+9
  Installed AbstractFFTs ───────────────── v0.5.0
  Installed RecipesBase ────────────────── v1.0.1
  Installed Mocking ────────────────────── v0.7.1
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed TimeZones ──────────────────── v1.1.1
  Installed MKL_jll ────────────────────── v2019.0.117+2
  Installed XML2_jll ───────────────────── v2.9.9+4
  Installed IterTools ──────────────────── v1.3.0
  Installed SpecialFunctions ───────────── v0.10.0
Updating `~/.julia/environments/v1.5/Project.toml`
  [717857b8] + DSP v0.6.6
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [717857b8] + DSP v0.6.6
  [e2ba6199] + ExprTools v0.1.1
  [8f5d6c58] + EzXML v1.1.0
  [7a1cc6ca] + FFTW v1.2.1
  [f5851436] + FFTW_jll v3.3.9+5
  [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+0
  [d8418881] + Intervals v1.1.0
  [c8e1da08] + IterTools v1.3.0
  [94ce4f54] + Libiconv_jll v1.16.0+2
  [856f044c] + MKL_jll v2019.0.117+2
  [78c3b35d] + Mocking v0.7.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [f27b6e38] + Polynomials v0.8.0
  [3cdcf5f2] + RecipesBase v1.0.1
  [189a3867] + Reexport v0.2.0
  [276daf66] + SpecialFunctions v0.10.0
  [f269a46b] + TimeZones v1.1.1
  [02c8fc9c] + XML2_jll v2.9.9+4
  [83775a58] + Zlib_jll v1.2.11+9
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building FFTW ─────→ `~/.julia/packages/FFTW/5DZuu/deps/build.log`
   Building TimeZones → `~/.julia/packages/TimeZones/X323b/deps/build.log`
    Testing DSP
Status `/tmp/jl_7dD1hF/Project.toml`
  [717857b8] DSP v0.6.6
  [7a1cc6ca] FFTW v1.2.1
  [c8e1da08] IterTools v1.3.0
  [6fe1bfb0] OffsetArrays v0.11.4
  [f27b6e38] Polynomials v0.8.0
  [189a3867] Reexport v0.2.0
  [276daf66] SpecialFunctions v0.10.0
  [8bb1440f] DelimitedFiles
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_7dD1hF/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [717857b8] DSP v0.6.6
  [e2ba6199] ExprTools v0.1.1
  [8f5d6c58] EzXML v1.1.0
  [7a1cc6ca] FFTW v1.2.1
  [f5851436] FFTW_jll v3.3.9+5
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [d8418881] Intervals v1.1.0
  [c8e1da08] IterTools v1.3.0
  [94ce4f54] Libiconv_jll v1.16.0+2
  [856f044c] MKL_jll v2019.0.117+2
  [78c3b35d] Mocking v0.7.1
  [6fe1bfb0] OffsetArrays v0.11.4
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [f27b6e38] Polynomials v0.8.0
  [3cdcf5f2] RecipesBase v1.0.1
  [189a3867] Reexport v0.2.0
  [276daf66] SpecialFunctions v0.10.0
  [f269a46b] TimeZones v1.1.1
  [02c8fc9c] XML2_jll v2.9.9+4
  [83775a58] Zlib_jll v1.2.11+9
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
┌ Warning: The default value of `padmode` will be changing from `:longest` to
│ `:none` in a future release of DSP. In preparation for this change,
│ leaving `padmode` unspecified is currently deprecated. To keep
│ current behavior specify `padmode=:longest`. To avoid this warning,
│ specify padmode = :none or padmode = :longest where appropriate.
│   caller = top-level scope at dsp.jl:235
└ @ Core ~/.julia/packages/DSP/mzt6A/test/dsp.jl:235
┌ Warning: The default value of `padmode` will be changing from `:longest` to
│ `:none` in a future release of DSP. In preparation for this change,
│ leaving `padmode` unspecified is currently deprecated. To keep
│ current behavior specify `padmode=:longest`. To avoid this warning,
│ specify padmode = :none or padmode = :longest where appropriate.
│   caller = top-level scope at dsp.jl:238
└ @ Core ~/.julia/packages/DSP/mzt6A/test/dsp.jl:238
┌ Warning: The default value of `padmode` will be changing from `:longest` to
│ `:none` in a future release of DSP. In preparation for this change,
│ leaving `padmode` unspecified is currently deprecated. To keep
│ current behavior specify `padmode=:longest`. To avoid this warning,
│ specify padmode = :none or padmode = :longest where appropriate.
│   caller = top-level scope at dsp.jl:242
└ @ Core ~/.julia/packages/DSP/mzt6A/test/dsp.jl:242
┌ Warning: The default value of `padmode` will be changing from `:longest` to
│ `:none` in a future release of DSP. In preparation for this change,
│ leaving `padmode` unspecified is currently deprecated. To keep
│ current behavior specify `padmode=:longest`. To avoid this warning,
│ specify padmode = :none or padmode = :longest where appropriate.
│   caller = top-level scope at dsp.jl:243
└ @ Core ~/.julia/packages/DSP/mzt6A/test/dsp.jl:243
┌ Warning: The default value of `padmode` will be changing from `:longest` to
│ `:none` in a future release of DSP. In preparation for this change,
│ leaving `padmode` unspecified is currently deprecated. To keep
│ current behavior specify `padmode=:longest`. To avoid this warning,
│ specify padmode = :none or padmode = :longest where appropriate.
│   caller = top-level scope at dsp.jl:244
└ @ Core ~/.julia/packages/DSP/mzt6A/test/dsp.jl:244
┌ Warning: The default value of `padmode` will be changing from `:longest` to
│ `:none` in a future release of DSP. In preparation for this change,
│ leaving `padmode` unspecified is currently deprecated. To keep
│ current behavior specify `padmode=:longest`. To avoid this warning,
│ specify padmode = :none or padmode = :longest where appropriate.
│   caller = top-level scope at dsp.jl:245
└ @ Core ~/.julia/packages/DSP/mzt6A/test/dsp.jl:245
┌ Warning: The default value of `padmode` will be changing from `:longest` to
│ `:none` in a future release of DSP. In preparation for this change,
│ leaving `padmode` unspecified is currently deprecated. To keep
│ current behavior specify `padmode=:longest`. To avoid this warning,
│ specify padmode = :none or padmode = :longest where appropriate.
│   caller = top-level scope at dsp.jl:246
└ @ Core ~/.julia/packages/DSP/mzt6A/test/dsp.jl:246
┌ Warning: The default value of `padmode` will be changing from `:longest` to
│ `:none` in a future release of DSP. In preparation for this change,
│ leaving `padmode` unspecified is currently deprecated. To keep
│ current behavior specify `padmode=:longest`. To avoid this warning,
│ specify padmode = :none or padmode = :longest where appropriate.
│   caller = top-level scope at dsp.jl:247
└ @ Core ~/.julia/packages/DSP/mzt6A/test/dsp.jl:247
Test Summary: | Pass  Broken  Total
dsp.jl        |   78       1     79
Test Summary: | Pass  Total
util.jl       |   54     54
Test Summary: | Pass  Total
windows.jl    |  201    201
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = fromroots(::Type{Poly}, ::Array{Complex{Float64},1}; var::Symbol) at Poly.jl:64
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:64
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Complex{Float64}}(::Array{Complex{Float64},1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Float64}(::Array{Float64,1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = fromroots(::Type{Poly}, ::Array{Float64,1}; var::Symbol) at Poly.jl:64
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:64
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = *(::Poly{Float64}, ::Poly{Float64}) at Poly.jl:137
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:137
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Float32}(::Array{Float64,1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Int64}(::Array{Float64,1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = fromroots(::Type{Poly}, ::Array{Complex{Int64},1}; var::Symbol) at Poly.jl:64
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:64
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Complex{Int64}}(::Array{Complex{Int64},1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = fromroots(::Type{Poly}, ::Array{Int64,1}; var::Symbol) at Poly.jl:64
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:64
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Int64}(::Array{Int64,1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
Test Summary:        | Pass  Total
filter_conversion.jl |  296    296
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = fromroots(::Type{Poly}, ::Array{Complex{BigFloat},1}; var::Symbol) at Poly.jl:64
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:64
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Complex{BigFloat}}(::Array{Complex{BigFloat},1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{BigFloat}(::Array{BigFloat,1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
Test Summary:    | Pass  Total
filter_design.jl |  305    305
Test Summary:      | Pass  Total
filter_response.jl |   20     20
Test Summary: | Pass  Total
filt.jl       |  968    968
Test Summary:  | Pass  Total
filt_stream.jl | 1280   1280
┌ Warning: `fftfreq(n::Int, fs::Real = 1)` is deprecated, use `FFTW.fftfreq(n, fs)` instead.
│   caller = macro expansion at periodograms.jl:223 [inlined]
└ @ Core ~/.julia/packages/DSP/mzt6A/test/periodograms.jl:223
┌ Warning: `fftfreq(n::Int, fs::Real = 1)` is deprecated, use `FFTW.fftfreq(n, fs)` instead.
│   caller = macro expansion at periodograms.jl:223 [inlined]
└ @ Core ~/.julia/packages/DSP/mzt6A/test/periodograms.jl:223
Test Summary:   | Pass  Total
periodograms.jl | 1110   1110
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
Test Summary: | Pass  Total
resample.jl   |   16     16
Test Summary: | Pass  Total
lpc.jl        |    2      2
Test Summary: | Pass  Total
estimation.jl |    1      1
Test Summary: | Pass  Total
unwrap.jl     |   61     61
Test Summary: | Pass  Total
remez_fir.jl  |   27     27
    Testing DSP tests passed 
