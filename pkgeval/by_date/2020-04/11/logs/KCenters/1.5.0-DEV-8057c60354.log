Julia Version 1.5.0-DEV.611
Commit 8057c60354 (2020-04-10 14:54 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed InvertedIndices ───────────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed Compat ────────────────────── v3.8.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.1
  Installed MLDataPattern ─────────────── v0.5.1
  Installed MLDataUtils ───────────────── v0.5.1
  Installed DataFrames ────────────────── v0.20.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed Missings ──────────────────── v0.4.3
  Installed DataAPI ───────────────────── v1.1.0
  Installed TableTraits ───────────────── v1.0.0
  Installed JSON ──────────────────────── v0.21.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed LearnBase ─────────────────── v0.2.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed Tables ────────────────────── v1.0.3
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Reexport ──────────────────── v0.2.0
  Installed DataStructures ────────────── v0.17.11
  Installed MLLabelUtils ──────────────── v0.5.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.11
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.1
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_rSK2rY/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_rSK2rY/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.11
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.1
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9316620069742203
[ Info: 0.8326150393486023
[ Info: 0.5524173142015933
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33956977538764477
mean(cdnet.distances) = 0.4220458595454693
mean(crand.distances) = 0.3363449180374543
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5810546875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5810546875,"f1":0.7208269161394169,"seconds":4.7441571950912476e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":7.265625,"distances_sum":1536.846518073098}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5810546875,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.5810546875,"f1":0.7208269161394169,"seconds":4.7441571950912476e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":7.265625,"distances_sum":1536.846518073098}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9169013278388284,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.40625,"distances_sum":2423.074183562409}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8564453125,"state":{"ssize":8,"bsize":7},"perf":{"precision":1.0,"recall":0.8564453125,"f1":0.9169013278388284,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.40625,"distances_sum":2423.074183562409}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9549736721611727,"seconds":6.623566150665283e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.8203125,"distances_sum":2716.032576038226}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9549736721611727,"seconds":6.623566150665283e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.8203125,"distances_sum":2716.032576038226}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9549736721611727,"seconds":6.623566150665283e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.8203125,"distances_sum":2716.032576038226}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7275390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7275390625,"f1":0.8327250874125883,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.15625,"distances_sum":1767.5130012949942}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8601367382617392,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.4375,"distances_sum":1844.60486053712}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6962890625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6962890625,"f1":0.809344128094129,"seconds":5.2209943532943726e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.0390625,"distances_sum":1652.212656308221}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.8601367382617392,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.4375,"distances_sum":1844.60486053712}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9418211996337003,"seconds":6.224960088729858e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.765625,"distances_sum":2319.8785977165358}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9665579212454217,"seconds":6.757676601409912e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.890625,"distances_sum":2556.238201387707}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9117647977022985,"seconds":6.642192602157593e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.625,"distances_sum":2133.7446825925836}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9553056318681323,"seconds":6.332993507385254e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.796875,"distances_sum":2466.5547752779266}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9293102730602738,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.7265625,"distances_sum":2296.7879214118116}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9254006410256413,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.703125,"distances_sum":2246.6063093793987}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9665579212454217,"seconds":6.757676601409912e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.890625,"distances_sum":2556.238201387707}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9677114552114556,"seconds":6.318092346191406e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.953125,"distances_sum":2536.135270929467}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9693108974358977,"seconds":6.6086649894714355e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9296875,"distances_sum":2555.536647127863}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9780505952380952,"seconds":6.441026926040649e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9375,"distances_sum":2608.4736617695694}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9780505952380952,"seconds":6.441026926040649e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9375,"distances_sum":2608.4736617695694}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9780505952380952,"seconds":6.441026926040649e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9375,"distances_sum":2608.4736617695694}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2216796875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2216796875,"f1":null,"seconds":3.56137752532959e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":6.375,"distances_sum":546.4352266079059}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5791015625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5791015625,"f1":0.7206791472416479,"seconds":4.447996616363525e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.171875,"distances_sum":1357.7695468369536}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5810546875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5810546875,"f1":0.7193932803307808,"seconds":4.3977051973342896e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.2578125,"distances_sum":1383.9524166140484}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5810546875,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.5810546875,"f1":0.7193932803307808,"seconds":4.3977051973342896e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.2578125,"distances_sum":1383.9524166140484}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6748046875, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6748046875,"f1":0.794828262015763,"seconds":5.017966032028198e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.765625,"distances_sum":1619.856579870907}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9071459790209796,"seconds":5.7462602853775024e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.6640625,"distances_sum":2164.27130949954}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9351476648351654,"seconds":6.157904863357544e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.828125,"distances_sum":2361.5697773764946}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.845331231268732,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.40625,"distances_sum":1817.5573913126332}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8606893106893115,"seconds":5.466863512992859e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.5,"distances_sum":1902.5855840020317}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.705078125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.705078125,"f1":0.8174721112221122,"seconds":5.077570676803589e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.875,"distances_sum":1734.2747175980926}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8742502289377297,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.6171875,"distances_sum":1947.5319630249624}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.88671875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.88671875,"f1":0.9351476648351654,"seconds":6.157904863357544e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.828125,"distances_sum":2361.5697773764946}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9689961080586081,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9375,"distances_sum":2588.5214206902065}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9604223901098905,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.890625,"distances_sum":2547.01278674426}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9771577380952383,"seconds":6.251037120819092e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":9.0,"distances_sum":2653.47104978141}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9383444680319686,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7578125,"distances_sum":2352.145483283285}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9624828296703302,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.921875,"distances_sum":2549.604804240092}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9614983974358979,"seconds":5.865469574928284e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.921875,"distances_sum":2545.1702028048967}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9771577380952383,"seconds":6.251037120819092e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":9.0,"distances_sum":2653.47104978141}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9771577380952383,"seconds":6.251037120819092e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":9.0,"distances_sum":2653.47104978141}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7236328125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7236328125,"f1":0.8310012903762912,"seconds":4.5709311962127686e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":7.8515625,"distances_sum":1792.1720091145673}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6337890625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.6337890625,"f1":0.7650464119214127,"seconds":4.230067133903503e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":7.3359375,"distances_sum":1556.5283127018865}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8675485972360982,"seconds":5.2265822887420654e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.2421875,"distances_sum":1960.4911197617766}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7802734375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8675485972360982,"seconds":5.2265822887420654e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.2421875,"distances_sum":1960.4911197617766}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8995769855144863,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.640625,"distances_sum":2146.680317593065}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9373803280053287,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.7578125,"distances_sum":2413.8817999850517}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.9017659423909432,"seconds":5.751848220825195e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.609375,"distances_sum":2150.0594397114255}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9373803280053287,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.7578125,"distances_sum":2413.8817999850517}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9625946969696973,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.84375,"distances_sum":2630.5279165377983}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9679143772893777,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.921875,"distances_sum":2639.4816054454836}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9695512820512825,"seconds":6.185844540596008e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.9296875,"distances_sum":2645.2274193762187}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9695512820512825,"seconds":6.185844540596008e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.9296875,"distances_sum":2645.2274193762187}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9695512820512825,"seconds":6.185844540596008e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.9296875,"distances_sum":2645.2274193762187}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.634765625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.634765625,"f1":0.7623536186036193,"seconds":4.63239848613739e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.015625,"distances_sum":1602.6422368129715}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3896484375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3896484375,"f1":null,"seconds":3.6638230085372925e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":5.6171875,"distances_sum":935.8481726501717}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.634765625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.634765625,"f1":0.7623536186036193,"seconds":4.63239848613739e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.015625,"distances_sum":1602.6422368129715}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9046224608724616,"seconds":5.533918738365173e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.359375,"distances_sum":2236.027294014163}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8388671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8388671875,"f1":0.9046224608724616,"seconds":5.533918738365173e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.359375,"distances_sum":2236.027294014163}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9426625457875463,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.703125,"distances_sum":2485.4191191925925}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9635416666666671,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8203125,"distances_sum":2610.713150186733}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9351877289377297,"seconds":5.999580025672913e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.640625,"distances_sum":2457.094178112836}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9635416666666671,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8203125,"distances_sum":2610.713150186733}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9635416666666671,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8203125,"distances_sum":2610.713150186733}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4375,"f1":null,"seconds":3.9208680391311646e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.71875,"distances_sum":943.8822855287983}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4169921875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4169921875,"f1":null,"seconds":3.943219780921936e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.6953125,"distances_sum":917.0662283982797}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8834935897435905,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.34375,"distances_sum":1913.7780456371347}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.798828125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.798828125,"f1":0.8834935897435905,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.34375,"distances_sum":1913.7780456371347}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9338999542124548,"seconds":6.023794412612915e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.6796875,"distances_sum":2246.2865843214563}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9338999542124548,"seconds":6.023794412612915e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.6796875,"distances_sum":2246.2865843214563}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9582303113553116,"seconds":6.407499313354492e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8046875,"distances_sum":2465.07959361732}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9505811896436902,"seconds":6.377696990966797e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.796875,"distances_sum":2407.7143236894076}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9373028013653019,"seconds":6.234273314476013e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.6953125,"distances_sum":2273.959556702288}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9354567307692315,"seconds":6.025657057762146e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.6953125,"distances_sum":2239.6727469001034}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9582303113553116,"seconds":6.407499313354492e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8046875,"distances_sum":2465.07959361732}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.927734375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9582303113553116,"seconds":6.407499313354492e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8046875,"distances_sum":2465.07959361732}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.69921875,"f1":0.8098771020646028,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":8.3515625,"distances_sum":1350.490513046123}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2451171875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2451171875,"f1":null,"seconds":3.9245933294296265e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":6.578125,"distances_sum":549.4647201996899}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.220703125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.220703125,"f1":null,"seconds":4.002824425697327e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":6.390625,"distances_sum":391.3870297882645}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.69921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.69921875,"f1":0.8098771020646028,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":8.3515625,"distances_sum":1350.490513046123}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7978515625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7978515625,"f1":0.8800225815850824,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":8.328125,"distances_sum":1609.4917569238369}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.867297286047287,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":8.3359375,"distances_sum":1547.9659918717991}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.887357434232435,"seconds":5.2675604820251465e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":8.40625,"distances_sum":1665.2731829991578}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8115234375,"state":{"ssize":6,"bsize":5},"perf":{"precision":1.0,"recall":0.8115234375,"f1":0.887357434232435,"seconds":5.2675604820251465e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":8.40625,"distances_sum":1665.2731829991578}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9434981684981689,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":8.796875,"distances_sum":1908.8751100083587}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9358891108891112,"seconds":6.034970283508301e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":8.5859375,"distances_sum":1855.2027690631976}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9434981684981689,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":8.796875,"distances_sum":1908.8751100083587}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9013671875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9434981684981689,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":8.796875,"distances_sum":1908.8751100083587}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.548828125, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.548828125,"f1":null,"seconds":4.405155777931213e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.328125,"distances_sum":1012.2651543173213}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4169921875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4169921875,"f1":null,"seconds":3.896653652191162e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":6.453125,"distances_sum":755.4503732188916}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.548828125,"state":{"ssize":4,"bsize":3},"perf":{"precision":null,"recall":0.548828125,"f1":null,"seconds":4.405155777931213e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.328125,"distances_sum":1012.2651543173213}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.7968219280719288,"seconds":5.0049275159835815e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.78125,"distances_sum":1307.2818272102256}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9289783133533138,"seconds":6.102025508880615e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.6796875,"distances_sum":1800.6547414732752}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5654296875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5654296875,"f1":0.7071638431013438,"seconds":4.829838871955872e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.3125,"distances_sum":1020.7099613795308}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8658773518148525,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.3984375,"distances_sum":1562.7693390061413}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8719983141858149,"seconds":5.4370611906051636e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.3203125,"distances_sum":1548.1214618463207}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.880859375,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.880859375,"f1":0.9289783133533138,"seconds":6.102025508880615e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.6796875,"distances_sum":1800.6547414732752}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9616472069597076,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.859375,"distances_sum":1970.6638738469726}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9478136446886452,"seconds":6.018206477165222e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.7421875,"distances_sum":1896.7012665200643}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9636961996337001,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8828125,"distances_sum":1981.6587836600918}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.957577838827839,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8828125,"distances_sum":1950.6964298021198}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9636961996337001,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8828125,"distances_sum":1981.6587836600918}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9636961996337001,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8828125,"distances_sum":1981.6587836600918}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.244140625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.244140625,"f1":null,"seconds":3.550201654434204e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":6.28125,"distances_sum":449.47277753099894}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2451171875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2451171875,"f1":null,"seconds":3.810971975326538e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":6.3203125,"distances_sum":423.5178346867273}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2451171875,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.2451171875,"f1":null,"seconds":3.810971975326538e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":6.3203125,"distances_sum":423.5178346867273}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":9,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8060106560106569,"seconds":4.915520548820496e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.046875,"distances_sum":1357.871859918944}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8576532842157851,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.515625,"distances_sum":1512.0398309682505}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.8492793664668673,"seconds":5.392357707023621e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.515625,"distances_sum":1455.5311781078183}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":8,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8576532842157851,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.515625,"distances_sum":1512.0398309682505}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9576897061272064,"seconds":6.3944607973098755e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.8515625,"distances_sum":1948.4905114921266}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9311126373626382,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.78125,"distances_sum":1771.825514702613}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9482231310356315,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.828125,"distances_sum":1879.7767323707535}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9565190018315023,"seconds":6.031244993209839e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.8515625,"distances_sum":1910.3572615412488}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9523866758241762,"seconds":6.763264536857605e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.828125,"distances_sum":1899.378441529407}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":11,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8956106393606401,"seconds":5.811452865600586e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.6328125,"distances_sum":1656.805355444988}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9576897061272064,"seconds":6.3944607973098755e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.8515625,"distances_sum":1948.4905114921266}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9576897061272064,"seconds":6.3944607973098755e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.8515625,"distances_sum":1948.4905114921266}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":0.985063244047619,"recall":0.7578125,"f1":0.8454322587135091,"seconds":4.915520548820496e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.96875,"distances_sum":1445.9211487107445}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.18359375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.18359375,"f1":null,"seconds":3.2391399145126343e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":5.015625,"distances_sum":409.8298040320774}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":5,"bsize":4}, perf: {"precision":0.9838541666666666,"recall":0.66796875,"f1":0.7787188505938513,"seconds":4.975125193595886e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.515625,"distances_sum":1217.1571133405098}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7578125,"state":{"ssize":5,"bsize":5},"perf":{"precision":0.985063244047619,"recall":0.7578125,"f1":0.8454322587135091,"seconds":4.915520548820496e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.96875,"distances_sum":1445.9211487107445}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":7,"bsize":5}, perf: {"precision":0.9874627976190474,"recall":0.7724609375,"f1":0.8597876082251089,"seconds":5.2675604820251465e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.1875,"distances_sum":1439.5148678744877}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":5,"bsize":9}, perf: {"precision":0.989350818452381,"recall":0.9111328125,"f1":0.9447139449092578,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.703125,"distances_sum":1946.6667773142374}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":6,"bsize":5}, perf: {"precision":0.9807849702380952,"recall":0.7734375,"f1":0.8561944565850823,"seconds":5.038455128669739e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.03125,"distances_sum":1468.7585104607567}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":5,"bsize":9},"perf":{"precision":0.989350818452381,"recall":0.9111328125,"f1":0.9447139449092578,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.703125,"distances_sum":1946.6667773142374}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":8,"bsize":9}, perf: {"precision":0.9852771577380953,"recall":0.912109375,"f1":0.944832446199634,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.796875,"distances_sum":1938.1097548095013}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":8,"bsize":9},"perf":{"precision":0.9852771577380953,"recall":0.912109375,"f1":0.944832446199634,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.796875,"distances_sum":1938.1097548095013}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.912109375,"state":{"ssize":8,"bsize":9},"perf":{"precision":0.9852771577380953,"recall":0.912109375,"f1":0.944832446199634,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.796875,"distances_sum":1938.1097548095013}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8497329059829066,"seconds":5.21540641784668e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.0390625,"distances_sum":1395.7686617581974}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5341796875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5341796875,"f1":0.6795508311133316,"seconds":4.4405460357666016e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.3046875,"distances_sum":942.8782514957002}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2060546875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2060546875,"f1":null,"seconds":3.3602118492126465e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":5.5703125,"distances_sum":366.29064947467873}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4072265625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4072265625,"f1":null,"seconds":3.632158041000366e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.0078125,"distances_sum":737.1746422412073}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.751953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.751953125,"f1":0.8497329059829066,"seconds":5.21540641784668e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.0390625,"distances_sum":1395.7686617581974}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9195887445887452,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.6796875,"distances_sum":1787.5108899374468}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9263793498168506,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7578125,"distances_sum":1808.1995935851082}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9584306318681324,"seconds":6.200745701789856e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9140625,"distances_sum":1977.5168595650243}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9584306318681324,"seconds":6.200745701789856e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9140625,"distances_sum":1977.5168595650243}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9702781593406598,"seconds":6.197020411491394e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.90625,"distances_sum":2060.3143453685675}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9609031593406598,"seconds":6.211921572685242e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.875,"distances_sum":2008.4927272800157}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9685470779220784,"seconds":6.161630153656006e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9140625,"distances_sum":2054.5076586708265}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9687900641025644,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.90625,"distances_sum":2035.6935341603373}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9702781593406598,"seconds":6.197020411491394e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.90625,"distances_sum":2060.3143453685675}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9702781593406598,"seconds":6.197020411491394e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.90625,"distances_sum":2060.3143453685675}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2783203125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2783203125,"f1":null,"seconds":3.5725533962249756e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":5.78125,"distances_sum":556.5814229612668}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8518642815517823,"seconds":4.991888999938965e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.921875,"distances_sum":1469.498081787377}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.755859375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.755859375,"f1":0.8518642815517823,"seconds":4.991888999938965e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.921875,"distances_sum":1469.498081787377}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.952369505494506,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.75,"distances_sum":2020.5527496669004}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.952369505494506,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.75,"distances_sum":2020.5527496669004}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9742387820512822,"seconds":6.0461461544036865e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.921875,"distances_sum":2130.184382473475}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9584478021978025,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.75,"distances_sum":2057.368031143266}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9726018772893775,"seconds":7.390230894088745e-5,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8984375,"distances_sum":2110.717081131826}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9742387820512822,"seconds":6.0461461544036865e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.921875,"distances_sum":2130.184382473475}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9742387820512822,"seconds":6.0461461544036865e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.921875,"distances_sum":2130.184382473475}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2421875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2421875,"f1":null,"seconds":3.6973506212234497e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.765625,"distances_sum":486.2157088453726}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2421875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2421875,"f1":null,"seconds":3.6973506212234497e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.765625,"distances_sum":486.2157088453726}}, n: 9
mean(cfft.distances) = 0.33956977540149863
mean(cdnet.distances) = 0.4089476571553929
mean(crand.distances) = 0.9447904914802784
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8711111111111111
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8755555555555555
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8622222222222221
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8911111111111111
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.88
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9466666666666667
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8288888888888888
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9266666666666666
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8755555555555556
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9177777777777778
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9133333333333334
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9266666666666667
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9355555555555556
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.831111111111111
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8733333333333334
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9266666666666666
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8844444444444445
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9333333333333335
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9333333333333332
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9111111111111111
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8999999999999999
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.88
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9155555555555556
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5384485748410225] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 29, 1]]
** centroid: 1, normalized-entropy: 0.2108423003185322, [(2, 29), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 2]]
** centroid: 8, normalized-entropy: 1.0, [(2, 2), (3, 2)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 14]]
** centroid: 9, normalized-entropy: 0.5435644431995963, [(2, 2), (3, 14)]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
finished with 14 centroids; started with 12
acc = 0.96
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.3906656475416063] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3906656475416063, 0.3047744060947641] ***
*** starting iteration: 2; err: [Inf, 0.3906656475416063, 0.3047744060947641] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3906656475416063, 0.3047744060947641, 0.2957992489245516] ***
*** starting iteration: 3; err: [Inf, 0.3906656475416063, 0.3047744060947641, 0.2957992489245516] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3906656475416063, 0.3047744060947641, 0.2957992489245516, 0.29331453286765796] ***
*** finished computation of 3 references, err: [Inf, 0.3906656475416063, 0.3047744060947641, 0.2957992489245516, 0.29331453286765796] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 178, 19]]
** centroid: 1, normalized-entropy: 0.457629619114006, [(2, 178), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [209, 31, 0]]
** centroid: 2, normalized-entropy: 0.5551483279964451, [(1, 209), (2, 31)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [195, 34, 0]]
** centroid: 3, normalized-entropy: 0.6060022693908932, [(1, 195), (2, 34)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24125640191572686] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24125640191572686, 0.19134601985674923] ***
*** starting iteration: 2; err: [Inf, 0.24125640191572686, 0.19134601985674923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24125640191572686, 0.19134601985674923, 0.18825974705134024] ***
*** starting iteration: 3; err: [Inf, 0.24125640191572686, 0.19134601985674923, 0.18825974705134024] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24125640191572686, 0.19134601985674923, 0.18825974705134024, 0.1874614653076876] ***
*** finished computation of 7 references, err: [Inf, 0.24125640191572686, 0.19134601985674923, 0.18825974705134024, 0.1874614653076876] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [98, 11, 0]]
** centroid: 1, normalized-entropy: 0.47189705387508535, [(1, 98), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 18, 0]]
** centroid: 2, normalized-entropy: 0.8003922080453356, [(1, 56), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 92, 19]]
** centroid: 3, normalized-entropy: 0.6603769229926888, [(2, 92), (3, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [73, 30, 0]]
** centroid: 5, normalized-entropy: 0.8703460546929581, [(1, 73), (2, 30)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [96, 6, 0]]
** centroid: 6, normalized-entropy: 0.32275695889739825, [(1, 96), (2, 6)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 86, 0]]
** centroid: 7, normalized-entropy: 0.09054385326964301, [(1, 1), (2, 86)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22395685369238214] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22395685369238214, 0.18859284185222175] ***
*** starting iteration: 2; err: [Inf, 0.22395685369238214, 0.18859284185222175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22395685369238214, 0.18859284185222175, 0.1869549937266996] ***
*** starting iteration: 3; err: [Inf, 0.22395685369238214, 0.18859284185222175, 0.1869549937266996] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22395685369238214, 0.18859284185222175, 0.1869549937266996, 0.18554623026227665] ***
*** starting iteration: 4; err: [Inf, 0.22395685369238214, 0.18859284185222175, 0.1869549937266996, 0.18554623026227665] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22395685369238214, 0.18859284185222175, 0.1869549937266996, 0.18554623026227665, 0.18436265881473515] ***
*** starting iteration: 5; err: [Inf, 0.22395685369238214, 0.18859284185222175, 0.1869549937266996, 0.18554623026227665, 0.18436265881473515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22395685369238214, 0.18859284185222175, 0.1869549937266996, 0.18554623026227665, 0.18436265881473515, 0.18390662717246178] ***
*** finished computation of 7 references, err: [Inf, 0.22395685369238214, 0.18859284185222175, 0.1869549937266996, 0.18554623026227665, 0.18436265881473515, 0.18390662717246178] ***
*** center 1: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 74, 21]]
** centroid: 2, normalized-entropy: 0.762084924805724, [(2, 74), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [98, 20, 0]]
** centroid: 4, normalized-entropy: 0.656540281386946, [(1, 98), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 66, 0]]
** centroid: 5, normalized-entropy: 0.9470622432515328, [(1, 38), (2, 66)]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [10, 78, 0]]
** centroid: 7, normalized-entropy: 0.5107878229540133, [(1, 10), (2, 78)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21948678149371179] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21948678149371179, 0.18658436396378447] ***
*** starting iteration: 2; err: [Inf, 0.21948678149371179, 0.18658436396378447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21948678149371179, 0.18658436396378447, 0.18448624330554633] ***
*** starting iteration: 3; err: [Inf, 0.21948678149371179, 0.18658436396378447, 0.18448624330554633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21948678149371179, 0.18658436396378447, 0.18448624330554633, 0.18442339882201542] ***
*** finished computation of 7 references, err: [Inf, 0.21948678149371179, 0.18658436396378447, 0.18448624330554633, 0.18442339882201542] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [94, 1, 0]]
** centroid: 1, normalized-entropy: 0.08426242877623306, [(1, 94), (2, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 66, 24]]
** centroid: 2, normalized-entropy: 0.8366407419411671, [(2, 66), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [91, 21, 0]]
** centroid: 3, normalized-entropy: 0.6962122601251459, [(1, 91), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 45, 0]]
** centroid: 4, normalized-entropy: 0.9914266810680207, [(1, 56), (2, 45)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [16, 92, 0]]
** centroid: 5, normalized-entropy: 0.6051865766334207, [(1, 16), (2, 92)]
*** center 6: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4266676814700882] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4266676814700882, 0.2967716397545594] ***
*** starting iteration: 2; err: [Inf, 0.4266676814700882, 0.2967716397545594] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4266676814700882, 0.2967716397545594, 0.2951246056364508] ***
*** starting iteration: 3; err: [Inf, 0.4266676814700882, 0.2967716397545594, 0.2951246056364508] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4266676814700882, 0.2967716397545594, 0.2951246056364508, 0.29474785757690175] ***
*** finished computation of 3 references, err: [Inf, 0.4266676814700882, 0.2967716397545594, 0.2951246056364508, 0.29474785757690175] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [67, 162, 19]]
** centroid: 1, normalized-entropy: 0.7541808276670181, [(1, 67), (2, 162), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [194, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [143, 81, 0]]
** centroid: 3, normalized-entropy: 0.9440091569104422, [(1, 143), (2, 81)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4122319124985313] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4122319124985313, 0.29673404403511194] ***
*** starting iteration: 2; err: [Inf, 0.4122319124985313, 0.29673404403511194] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4122319124985313, 0.29673404403511194, 0.2961467722287008] ***
*** finished computation of 3 references, err: [Inf, 0.4122319124985313, 0.29673404403511194, 0.2961467722287008] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [242, 36, 0]]
** centroid: 1, normalized-entropy: 0.556055448722158, [(1, 242), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [166, 31, 0]]
** centroid: 2, normalized-entropy: 0.6279572447072259, [(1, 166), (2, 31)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 171, 21]]
** centroid: 3, normalized-entropy: 0.49802788653447644, [(2, 171), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4483807184070215] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4483807184070215, 0.31073965244078966] ***
*** starting iteration: 2; err: [Inf, 0.4483807184070215, 0.31073965244078966] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4483807184070215, 0.31073965244078966, 0.3026205535763051] ***
*** starting iteration: 3; err: [Inf, 0.4483807184070215, 0.31073965244078966, 0.3026205535763051] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4483807184070215, 0.31073965244078966, 0.3026205535763051, 0.3009945319929178] ***
*** finished computation of 3 references, err: [Inf, 0.4483807184070215, 0.31073965244078966, 0.3026205535763051, 0.3009945319929178] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [270, 14, 0]]
** centroid: 1, normalized-entropy: 0.2833978937563341, [(1, 270), (2, 14)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 161, 24]]
** centroid: 2, normalized-entropy: 0.5566965016311172, [(2, 161), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [148, 50, 0]]
** centroid: 3, normalized-entropy: 0.8152560766360704, [(1, 148), (2, 50)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29407051694229824] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29407051694229824, 0.2396422809258372] ***
*** finished computation of 3 references, err: [Inf, 0.29407051694229824, 0.2396422809258372] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [261, 50, 0]]
** centroid: 1, normalized-entropy: 0.6361525238493291, [(1, 261), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [143, 44, 0]]
** centroid: 2, normalized-entropy: 0.787126586201269, [(1, 143), (2, 44)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 149, 19]]
** centroid: 3, normalized-entropy: 0.5091821114436995, [(2, 149), (3, 19)]
finished with 5 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3509680768614565] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3509680768614565, 0.23679249325971016] ***
*** finished computation of 3 references, err: [Inf, 0.3509680768614565, 0.23679249325971016] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [234, 53, 0]]
** centroid: 1, normalized-entropy: 0.6901852246744119, [(1, 234), (2, 53)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [174, 35, 0]]
** centroid: 2, normalized-entropy: 0.651870740354794, [(1, 174), (2, 35)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 150, 21]]
** centroid: 3, normalized-entropy: 0.5373760853377334, [(2, 150), (3, 21)]
finished with 5 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2992677481082649] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2992677481082649, 0.24868008757437365] ***
*** finished computation of 3 references, err: [Inf, 0.2992677481082649, 0.24868008757437365] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [153, 180, 24]]
** centroid: 1, normalized-entropy: 0.810008749310069, [(1, 153), (2, 180), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [127, 45, 0]]
** centroid: 2, normalized-entropy: 0.8291929840340723, [(1, 127), (2, 45)]
*** center 3: selecting labels [1] (freq >= 1) [from [138, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.386930323478164] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.386930323478164, 0.32370944304190674] ***
*** starting iteration: 2; err: [Inf, 0.386930323478164, 0.32370944304190674] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.386930323478164, 0.32370944304190674, 0.2980809419986972] ***
*** starting iteration: 3; err: [Inf, 0.386930323478164, 0.32370944304190674, 0.2980809419986972] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.386930323478164, 0.32370944304190674, 0.2980809419986972, 0.2961502979283334] ***
*** finished computation of 3 references, err: [Inf, 0.386930323478164, 0.32370944304190674, 0.2980809419986972, 0.2961502979283334] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [243, 7, 0]]
** centroid: 1, normalized-entropy: 0.18426059333965505, [(1, 243), (2, 7)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [3, 194, 21]]
** centroid: 2, normalized-entropy: 0.35334247838323973, [(1, 3), (2, 194), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [162, 37, 0]]
** centroid: 3, normalized-entropy: 0.6928785150382198, [(1, 162), (2, 37)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.517065758255591] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.517065758255591, 0.3436793903729458] ***
*** starting iteration: 2; err: [Inf, 0.517065758255591, 0.3436793903729458] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.517065758255591, 0.3436793903729458, 0.30723771694845153] ***
*** starting iteration: 3; err: [Inf, 0.517065758255591, 0.3436793903729458, 0.30723771694845153] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.517065758255591, 0.3436793903729458, 0.30723771694845153, 0.29748466303167137] ***
*** finished computation of 3 references, err: [Inf, 0.517065758255591, 0.3436793903729458, 0.30723771694845153, 0.29748466303167137] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [194, 45, 0]]
** centroid: 1, normalized-entropy: 0.69786898070402, [(1, 194), (2, 45)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [224, 16, 0]]
** centroid: 2, normalized-entropy: 0.3533593350214213, [(1, 224), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 164, 24]]
** centroid: 3, normalized-entropy: 0.5509844433017146, [(2, 164), (3, 24)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19371673486030497] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19371673486030497, 0.17019063980086474] ***
*** starting iteration: 2; err: [Inf, 0.19371673486030497, 0.17019063980086474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19371673486030497, 0.17019063980086474, 0.16136604211679115] ***
*** starting iteration: 3; err: [Inf, 0.19371673486030497, 0.17019063980086474, 0.16136604211679115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19371673486030497, 0.17019063980086474, 0.16136604211679115, 0.15315346184393597] ***
*** starting iteration: 4; err: [Inf, 0.19371673486030497, 0.17019063980086474, 0.16136604211679115, 0.15315346184393597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19371673486030497, 0.17019063980086474, 0.16136604211679115, 0.15315346184393597, 0.1489304640238081] ***
*** starting iteration: 5; err: [Inf, 0.19371673486030497, 0.17019063980086474, 0.16136604211679115, 0.15315346184393597, 0.1489304640238081] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19371673486030497, 0.17019063980086474, 0.16136604211679115, 0.15315346184393597, 0.1489304640238081, 0.14655374277204097] ***
*** starting iteration: 6; err: [Inf, 0.19371673486030497, 0.17019063980086474, 0.16136604211679115, 0.15315346184393597, 0.1489304640238081, 0.14655374277204097] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19371673486030497, 0.17019063980086474, 0.16136604211679115, 0.15315346184393597, 0.1489304640238081, 0.14655374277204097, 0.14552144909783774] ***
*** starting iteration: 7; err: [Inf, 0.19371673486030497, 0.17019063980086474, 0.16136604211679115, 0.15315346184393597, 0.1489304640238081, 0.14655374277204097, 0.14552144909783774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19371673486030497, 0.17019063980086474, 0.16136604211679115, 0.15315346184393597, 0.1489304640238081, 0.14655374277204097, 0.14552144909783774, 0.1448071503077631] ***
*** finished computation of 7 references, err: [Inf, 0.19371673486030497, 0.17019063980086474, 0.16136604211679115, 0.15315346184393597, 0.1489304640238081, 0.14655374277204097, 0.14552144909783774, 0.1448071503077631] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 86, 19]]
** centroid: 2, normalized-entropy: 0.6821560732869936, [(2, 86), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [94, 23, 0]]
** centroid: 3, normalized-entropy: 0.7150375653354627, [(1, 94), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [16, 84, 0]]
** centroid: 4, normalized-entropy: 0.634309554640566, [(1, 16), (2, 84)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 50, 0]]
** centroid: 5, normalized-entropy: 0.9993879681484049, [(1, 53), (2, 50)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2308368079400603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2308368079400603, 0.17607440382334358] ***
*** starting iteration: 2; err: [Inf, 0.2308368079400603, 0.17607440382334358] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2308368079400603, 0.17607440382334358, 0.16361810565776733] ***
*** starting iteration: 3; err: [Inf, 0.2308368079400603, 0.17607440382334358, 0.16361810565776733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2308368079400603, 0.17607440382334358, 0.16361810565776733, 0.15910424651072613] ***
*** starting iteration: 4; err: [Inf, 0.2308368079400603, 0.17607440382334358, 0.16361810565776733, 0.15910424651072613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2308368079400603, 0.17607440382334358, 0.16361810565776733, 0.15910424651072613, 0.15714043198010955] ***
*** starting iteration: 5; err: [Inf, 0.2308368079400603, 0.17607440382334358, 0.16361810565776733, 0.15910424651072613, 0.15714043198010955] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2308368079400603, 0.17607440382334358, 0.16361810565776733, 0.15910424651072613, 0.15714043198010955, 0.15558880947340376] ***
*** starting iteration: 6; err: [Inf, 0.2308368079400603, 0.17607440382334358, 0.16361810565776733, 0.15910424651072613, 0.15714043198010955, 0.15558880947340376] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2308368079400603, 0.17607440382334358, 0.16361810565776733, 0.15910424651072613, 0.15714043198010955, 0.15558880947340376, 0.15386024232523732] ***
*** starting iteration: 7; err: [Inf, 0.2308368079400603, 0.17607440382334358, 0.16361810565776733, 0.15910424651072613, 0.15714043198010955, 0.15558880947340376, 0.15386024232523732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2308368079400603, 0.17607440382334358, 0.16361810565776733, 0.15910424651072613, 0.15714043198010955, 0.15558880947340376, 0.15386024232523732, 0.15221044914922613] ***
*** starting iteration: 8; err: [Inf, 0.2308368079400603, 0.17607440382334358, 0.16361810565776733, 0.15910424651072613, 0.15714043198010955, 0.15558880947340376, 0.15386024232523732, 0.15221044914922613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2308368079400603, 0.17607440382334358, 0.16361810565776733, 0.15910424651072613, 0.15714043198010955, 0.15558880947340376, 0.15386024232523732, 0.15221044914922613, 0.1504567304306358] ***
*** starting iteration: 9; err: [Inf, 0.2308368079400603, 0.17607440382334358, 0.16361810565776733, 0.15910424651072613, 0.15714043198010955, 0.15558880947340376, 0.15386024232523732, 0.15221044914922613, 0.1504567304306358] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2308368079400603, 0.17607440382334358, 0.16361810565776733, 0.15910424651072613, 0.15714043198010955, 0.15558880947340376, 0.15386024232523732, 0.15221044914922613, 0.1504567304306358, 0.14916220340302502] ***
*** starting iteration: 10; err: [Inf, 0.2308368079400603, 0.17607440382334358, 0.16361810565776733, 0.15910424651072613, 0.15714043198010955, 0.15558880947340376, 0.15386024232523732, 0.15221044914922613, 0.1504567304306358, 0.14916220340302502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2308368079400603, 0.17607440382334358, 0.16361810565776733, 0.15910424651072613, 0.15714043198010955, 0.15558880947340376, 0.15386024232523732, 0.15221044914922613, 0.1504567304306358, 0.14916220340302502, 0.14768349576316986] ***
*** finished computation of 7 references, err: [Inf, 0.2308368079400603, 0.17607440382334358, 0.16361810565776733, 0.15910424651072613, 0.15714043198010955, 0.15558880947340376, 0.15386024232523732, 0.15221044914922613, 0.1504567304306358, 0.14916220340302502, 0.14768349576316986] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 111, 21]]
** centroid: 1, normalized-entropy: 0.6321302781219708, [(2, 111), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [83, 20, 0]]
** centroid: 3, normalized-entropy: 0.7101234912653349, [(1, 83), (2, 20)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [68, 47, 0]]
** centroid: 4, normalized-entropy: 0.9758104923889663, [(1, 68), (2, 47)]
*** center 5: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 60, 0]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(1, 40), (2, 60)]
*** center 7: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19781690072463728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19781690072463728, 0.15116133286465502] ***
*** starting iteration: 2; err: [Inf, 0.19781690072463728, 0.15116133286465502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19781690072463728, 0.15116133286465502, 0.1471316307598817] ***
*** starting iteration: 3; err: [Inf, 0.19781690072463728, 0.15116133286465502, 0.1471316307598817] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19781690072463728, 0.15116133286465502, 0.1471316307598817, 0.1456814686470348] ***
*** starting iteration: 4; err: [Inf, 0.19781690072463728, 0.15116133286465502, 0.1471316307598817, 0.1456814686470348] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19781690072463728, 0.15116133286465502, 0.1471316307598817, 0.1456814686470348, 0.14516706218261613] ***
*** finished computation of 7 references, err: [Inf, 0.19781690072463728, 0.15116133286465502, 0.1471316307598817, 0.1456814686470348, 0.14516706218261613] ***
*** center 1: selecting labels [1] (freq >= 2) [from [115, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 23, 0]]
** centroid: 2, normalized-entropy: 0.8844839729019952, [(1, 53), (2, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [36, 68, 0]]
** centroid: 4, normalized-entropy: 0.9305861291319927, [(1, 36), (2, 68)]
*** center 5: selecting labels [1] (freq >= 2) [from [118, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 66, 24]]
** centroid: 6, normalized-entropy: 0.8366407419411671, [(2, 66), (3, 24)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 67, 0]]
** centroid: 7, normalized-entropy: 0.45162282218200417, [(1, 7), (2, 67)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3281157836318016] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3281157836318016, 0.2527640015697918] ***
*** starting iteration: 2; err: [Inf, 0.3281157836318016, 0.2527640015697918] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3281157836318016, 0.2527640015697918, 0.23789736808783882] ***
*** starting iteration: 3; err: [Inf, 0.3281157836318016, 0.2527640015697918, 0.23789736808783882] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3281157836318016, 0.2527640015697918, 0.23789736808783882, 0.2343130650714756] ***
*** starting iteration: 4; err: [Inf, 0.3281157836318016, 0.2527640015697918, 0.23789736808783882, 0.2343130650714756] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3281157836318016, 0.2527640015697918, 0.23789736808783882, 0.2343130650714756, 0.23357576659010784] ***
*** finished computation of 3 references, err: [Inf, 0.3281157836318016, 0.2527640015697918, 0.23789736808783882, 0.2343130650714756, 0.23357576659010784] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [172, 50, 0]]
** centroid: 1, normalized-entropy: 0.7695944821271463, [(1, 172), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [232, 22, 0]]
** centroid: 2, normalized-entropy: 0.42506623606501126, [(1, 232), (2, 22)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 171, 19]]
** centroid: 3, normalized-entropy: 0.46899559358928133, [(2, 171), (3, 19)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2709249179737679] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2709249179737679, 0.24446695335691088] ***
*** starting iteration: 2; err: [Inf, 0.2709249179737679, 0.24446695335691088] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2709249179737679, 0.24446695335691088, 0.24318190937585335] ***
*** starting iteration: 3; err: [Inf, 0.2709249179737679, 0.24446695335691088, 0.24318190937585335] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2709249179737679, 0.24446695335691088, 0.24318190937585335, 0.24304624859137514] ***
*** finished computation of 3 references, err: [Inf, 0.2709249179737679, 0.24446695335691088, 0.24318190937585335, 0.24304624859137514] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [105, 143, 21]]
** centroid: 1, normalized-entropy: 0.8212109646463093, [(1, 105), (2, 143), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [175, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [128, 95, 0]]
** centroid: 3, normalized-entropy: 0.9841452685685558, [(1, 128), (2, 95)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36503578668580333] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36503578668580333, 0.27501970187187014] ***
*** starting iteration: 2; err: [Inf, 0.36503578668580333, 0.27501970187187014] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36503578668580333, 0.27501970187187014, 0.24828934070767314] ***
*** starting iteration: 3; err: [Inf, 0.36503578668580333, 0.27501970187187014, 0.24828934070767314] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36503578668580333, 0.27501970187187014, 0.24828934070767314, 0.24138774561962445] ***
*** starting iteration: 4; err: [Inf, 0.36503578668580333, 0.27501970187187014, 0.24828934070767314, 0.24138774561962445] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36503578668580333, 0.27501970187187014, 0.24828934070767314, 0.24138774561962445, 0.23945873187969383] ***
*** starting iteration: 5; err: [Inf, 0.36503578668580333, 0.27501970187187014, 0.24828934070767314, 0.24138774561962445, 0.23945873187969383] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36503578668580333, 0.27501970187187014, 0.24828934070767314, 0.24138774561962445, 0.23945873187969383, 0.23885638450902105] ***
*** finished computation of 3 references, err: [Inf, 0.36503578668580333, 0.27501970187187014, 0.24828934070767314, 0.24138774561962445, 0.23945873187969383, 0.23885638450902105] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [121, 115, 15]]
** centroid: 1, normalized-entropy: 0.7989437466590052, [(1, 121), (2, 115), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [199, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [98, 110, 9]]
** centroid: 3, normalized-entropy: 0.7604190990067822, [(1, 98), (2, 110), (3, 9)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2590565555253522] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2590565555253522, 0.2390425687616652] ***
*** finished computation of 3 references, err: [Inf, 0.2590565555253522, 0.2390425687616652] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [135, 66, 0]]
** centroid: 1, normalized-entropy: 0.9132401614300725, [(1, 135), (2, 66)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [71, 177, 19]]
** centroid: 2, normalized-entropy: 0.7398583887930735, [(1, 71), (2, 177), (3, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [198, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28077193385903265] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28077193385903265, 0.2490564002369208] ***
*** finished computation of 3 references, err: [Inf, 0.28077193385903265, 0.2490564002369208] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [98, 92, 4]]
** centroid: 1, normalized-entropy: 0.7088977977692545, [(1, 98), (2, 92), (3, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [239, 9, 0]]
** centroid: 2, normalized-entropy: 0.22501690667566673, [(1, 239), (2, 9)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [71, 137, 17]]
** centroid: 3, normalized-entropy: 0.783899258029995, [(1, 71), (2, 137), (3, 17)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4212827612401574] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4212827612401574, 0.2547805876215582] ***
*** finished computation of 3 references, err: [Inf, 0.4212827612401574, 0.2547805876215582] ***
*** center 1: selecting labels [1] (freq >= 2) [from [183, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [144, 156, 21]]
** centroid: 2, normalized-entropy: 0.808913372534896, [(1, 144), (2, 156), (3, 21)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [91, 69, 3]]
** centroid: 3, normalized-entropy: 0.6943722634768641, [(1, 91), (2, 69), (3, 3)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34332756725539854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34332756725539854, 0.29588967041873204] ***
*** starting iteration: 2; err: [Inf, 0.34332756725539854, 0.29588967041873204] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34332756725539854, 0.29588967041873204, 0.29315889351260105] ***
*** starting iteration: 3; err: [Inf, 0.34332756725539854, 0.29588967041873204, 0.29315889351260105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34332756725539854, 0.29588967041873204, 0.29315889351260105, 0.2929426978451309] ***
*** finished computation of 3 references, err: [Inf, 0.34332756725539854, 0.29588967041873204, 0.29315889351260105, 0.2929426978451309] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [230, 9, 0]]
** centroid: 1, normalized-entropy: 0.2314440601556979, [(1, 230), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [171, 52, 0]]
** centroid: 2, normalized-entropy: 0.783520324185662, [(1, 171), (2, 52)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [3, 182, 19]]
** centroid: 3, normalized-entropy: 0.3503844726235518, [(1, 3), (2, 182), (3, 19)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.43563933138256666] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43563933138256666, 0.3241849547668152] ***
*** starting iteration: 2; err: [Inf, 0.43563933138256666, 0.3241849547668152] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43563933138256666, 0.3241849547668152, 0.30909822302740597] ***
*** starting iteration: 3; err: [Inf, 0.43563933138256666, 0.3241849547668152, 0.30909822302740597] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43563933138256666, 0.3241849547668152, 0.30909822302740597, 0.30594536411747714] ***
*** starting iteration: 4; err: [Inf, 0.43563933138256666, 0.3241849547668152, 0.30909822302740597, 0.30594536411747714] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43563933138256666, 0.3241849547668152, 0.30909822302740597, 0.30594536411747714, 0.3050828262635771] ***
*** finished computation of 3 references, err: [Inf, 0.43563933138256666, 0.3241849547668152, 0.30909822302740597, 0.30594536411747714, 0.3050828262635771] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [92, 148, 21]]
** centroid: 1, normalized-entropy: 0.8119364923351119, [(1, 92), (2, 148), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [193, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [123, 90, 0]]
** centroid: 3, normalized-entropy: 0.9826154285526119, [(1, 123), (2, 90)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.44404749942292787] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44404749942292787, 0.3146861975389844] ***
*** starting iteration: 2; err: [Inf, 0.44404749942292787, 0.3146861975389844] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44404749942292787, 0.3146861975389844, 0.3037255412383728] ***
*** starting iteration: 3; err: [Inf, 0.44404749942292787, 0.3146861975389844, 0.3037255412383728] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44404749942292787, 0.3146861975389844, 0.3037255412383728, 0.3009884220033443] ***
*** starting iteration: 4; err: [Inf, 0.44404749942292787, 0.3146861975389844, 0.3037255412383728, 0.3009884220033443] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44404749942292787, 0.3146861975389844, 0.3037255412383728, 0.3009884220033443, 0.30076166358811296] ***
*** finished computation of 3 references, err: [Inf, 0.44404749942292787, 0.3146861975389844, 0.3037255412383728, 0.3009884220033443, 0.30076166358811296] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [135, 66, 0]]
** centroid: 1, normalized-entropy: 0.9132401614300725, [(1, 135), (2, 66)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [109, 159, 24]]
** centroid: 2, normalized-entropy: 0.8230374702297772, [(1, 109), (2, 159), (3, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [174, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 10)
[0.928029826233419, 0.9010207812603023, 0.9000047952143762, 0.8939838041634448, 0.8870007732283182, 0.8800447153740567, 0.8680087272901643, 0.8430466394538251, 0.7819945694197191, 0.7389005772239304]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 2) => 0.928029826233419
finished with 11
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.2009397639778328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2009397639778328, 0.14726255630568094] ***
*** starting iteration: 2; err: [Inf, 0.2009397639778328, 0.14726255630568094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2009397639778328, 0.14726255630568094, 0.1453228610338414] ***
*** starting iteration: 3; err: [Inf, 0.2009397639778328, 0.14726255630568094, 0.1453228610338414] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2009397639778328, 0.14726255630568094, 0.1453228610338414, 0.14497119395479044] ***
*** finished computation of 7 references, err: [Inf, 0.2009397639778328, 0.14726255630568094, 0.1453228610338414, 0.14497119395479044] ***
*** center 1: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 77, 19]]
** centroid: 2, normalized-entropy: 0.7177418091697444, [(2, 77), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 7, 0]]
** centroid: 3, normalized-entropy: 0.4782501641071144, [(1, 61), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [109, 28, 0]]
** centroid: 4, normalized-entropy: 0.7306012127539728, [(1, 109), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [39, 61, 0]]
** centroid: 5, normalized-entropy: 0.9647995485050873, [(1, 39), (2, 61)]
*** center 6: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 70, 0]]
** centroid: 7, normalized-entropy: 0.18312206830137262, [(1, 2), (2, 70)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1803534344094212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1803534344094212, 0.1500485022726847] ***
*** starting iteration: 2; err: [Inf, 0.1803534344094212, 0.1500485022726847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1803534344094212, 0.1500485022726847, 0.14719361737454267] ***
*** starting iteration: 3; err: [Inf, 0.1803534344094212, 0.1500485022726847, 0.14719361737454267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1803534344094212, 0.1500485022726847, 0.14719361737454267, 0.14669629787911717] ***
*** finished computation of 7 references, err: [Inf, 0.1803534344094212, 0.1500485022726847, 0.14719361737454267, 0.14669629787911717] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 101, 21]]
** centroid: 1, normalized-entropy: 0.6625567995605484, [(2, 101), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [89, 6, 0]]
** centroid: 3, normalized-entropy: 0.3398550782221443, [(1, 89), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [89, 1, 0]]
** centroid: 4, normalized-entropy: 0.08807225904068142, [(1, 89), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [96, 23, 0]]
** centroid: 5, normalized-entropy: 0.7082772165975041, [(1, 96), (2, 23)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 85, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [56, 22, 0]]
** centroid: 7, normalized-entropy: 0.8582307926411409, [(1, 56), (2, 22)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1960285492150624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1960285492150624, 0.1545228810052037] ***
*** starting iteration: 2; err: [Inf, 0.1960285492150624, 0.1545228810052037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1960285492150624, 0.1545228810052037, 0.14977434321308042] ***
*** starting iteration: 3; err: [Inf, 0.1960285492150624, 0.1545228810052037, 0.14977434321308042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1960285492150624, 0.1545228810052037, 0.14977434321308042, 0.14873185887377055] ***
*** starting iteration: 4; err: [Inf, 0.1960285492150624, 0.1545228810052037, 0.14977434321308042, 0.14873185887377055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1960285492150624, 0.1545228810052037, 0.14977434321308042, 0.14873185887377055, 0.14846319083865828] ***
*** finished computation of 7 references, err: [Inf, 0.1960285492150624, 0.1545228810052037, 0.14977434321308042, 0.14873185887377055, 0.14846319083865828] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [11, 72, 0]]
** centroid: 1, normalized-entropy: 0.5643364444932288, [(1, 11), (2, 72)]
*** center 2: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [77, 15, 0]]
** centroid: 3, normalized-entropy: 0.6415410585827175, [(1, 77), (2, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [124, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [109, 7, 0]]
** centroid: 5, normalized-entropy: 0.3288122377561222, [(1, 109), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 78, 0]]
** centroid: 6, normalized-entropy: 0.09794058271817412, [(1, 1), (2, 78)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 53, 24]]
** centroid: 7, normalized-entropy: 0.8951127210954559, [(2, 53), (3, 24)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.928029826233419, 0.9010207812603023, 0.9000047952143762, 0.8999928071784359, 0.8939838041634448, 0.8870007732283182, 0.8800447153740567, 0.8680087272901643, 0.8430466394538251, 0.7819945694197191, 0.7389005772239304]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 2) => 0.928029826233419
finished with 12
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.3727686635215764] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3727686635215764, 0.294716011329733] ***
*** finished computation of 3 references, err: [Inf, 0.3727686635215764, 0.294716011329733] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [249, 43, 0]]
** centroid: 1, normalized-entropy: 0.6029414577254201, [(1, 249), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [155, 44, 0]]
** centroid: 2, normalized-entropy: 0.7621810324152676, [(1, 155), (2, 44)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 156, 19]]
** centroid: 3, normalized-entropy: 0.49559186098696384, [(2, 156), (3, 19)]
finished with 5 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.44840825995642586] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44840825995642586, 0.3106023616016447] ***
*** finished computation of 3 references, err: [Inf, 0.44840825995642586, 0.3106023616016447] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [135, 153, 21]]
** centroid: 1, normalized-entropy: 0.8124353069805693, [(1, 135), (2, 153), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [120, 85, 0]]
** centroid: 2, normalized-entropy: 0.9788698505067782, [(1, 120), (2, 85)]
*** center 3: selecting labels [1] (freq >= 1) [from [153, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39538112029187505] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39538112029187505, 0.3150058340538165] ***
*** finished computation of 3 references, err: [Inf, 0.39538112029187505, 0.3150058340538165] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [144, 181, 24]]
** centroid: 1, normalized-entropy: 0.8099974524742237, [(1, 144), (2, 181), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [151, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [123, 44, 0]]
** centroid: 3, normalized-entropy: 0.8319421644694559, [(1, 123), (2, 44)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 12)
[0.928029826233419, 0.9010207812603023, 0.9000047952143762, 0.8999928071784359, 0.8939838041634448, 0.8870007732283182, 0.8800447153740567, 0.8680087272901643, 0.8480606354857851, 0.8430466394538251, 0.7819945694197191, 0.7389005772239304]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 2) => 0.928029826233419
finished with 12
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.928029826233419, 0.9010207812603023, 0.9000047952143762, 0.8999928071784359, 0.8939838041634448, 0.8870007732283182, 0.8800447153740567, 0.8680087272901643, 0.8480606354857851, 0.8430466394538251, 0.7819945694197191, 0.7389005772239304]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 2) => 0.928029826233419
finished with 13
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.45351080419901235] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45351080419901235, 0.3313179518901617] ***
*** finished computation of 3 references, err: [Inf, 0.45351080419901235, 0.3313179518901617] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [135, 57, 0]]
** centroid: 1, normalized-entropy: 0.877437311089633, [(1, 135), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [182, 24, 0]]
** centroid: 2, normalized-entropy: 0.519230019739187, [(1, 182), (2, 24)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [87, 162, 19]]
** centroid: 3, normalized-entropy: 0.7802093710497067, [(1, 87), (2, 162), (3, 19)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39019620634414354] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39019620634414354, 0.3062737126802576] ***
*** finished computation of 3 references, err: [Inf, 0.39019620634414354, 0.3062737126802576] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 133, 21]]
** centroid: 1, normalized-entropy: 0.5746356978376794, [(2, 133), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [252, 41, 0]]
** centroid: 2, normalized-entropy: 0.5840600185474345, [(1, 252), (2, 41)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [156, 64, 0]]
** centroid: 3, normalized-entropy: 0.8698926856041562, [(1, 156), (2, 64)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38572945362068656] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38572945362068656, 0.3141038630177257] ***
*** finished computation of 3 references, err: [Inf, 0.38572945362068656, 0.3141038630177257] ***
*** center 1: selecting labels [1] (freq >= 2) [from [204, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [162, 122, 0]]
** centroid: 2, normalized-entropy: 0.9856426982019311, [(1, 162), (2, 122)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [52, 103, 24]]
** centroid: 3, normalized-entropy: 0.861559267487277, [(1, 52), (2, 103), (3, 24)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.928029826233419, 0.9010207812603023, 0.9000047952143762, 0.8999928071784359, 0.8939838041634448, 0.8870007732283182, 0.8800447153740567, 0.8680087272901643, 0.8480606354857851, 0.8430466394538251, 0.7980945016873161, 0.7819945694197191, 0.7389005772239304]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 2) => 0.928029826233419
finished with 13
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.928029826233419, 0.9010207812603023, 0.9000047952143762, 0.8999928071784359, 0.8939838041634448, 0.8870007732283182, 0.8800447153740567, 0.8680087272901643, 0.8480606354857851, 0.8430466394538251, 0.7980945016873161, 0.7819945694197191, 0.7389005772239304]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 2) => 0.928029826233419
finished with 13
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.928029826233419, 0.9010207812603023, 0.9000047952143762, 0.8999928071784359, 0.8939838041634448, 0.8870007732283182, 0.8800447153740567, 0.8680087272901643, 0.8480606354857851, 0.8430466394538251, 0.7980945016873161, 0.7819945694197191, 0.7389005772239304]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 2) => 0.928029826233419
finished with 13
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.928029826233419, 0.9010207812603023, 0.9000047952143762, 0.8999928071784359, 0.8939838041634448, 0.8870007732283182, 0.8800447153740567, 0.8680087272901643, 0.8480606354857851, 0.8430466394538251, 0.7980945016873161, 0.7819945694197191, 0.7389005772239304]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 2) => 0.928029826233419
finished with 15
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.30752617381348807] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30752617381348807, 0.23913037221229919] ***
*** starting iteration: 2; err: [Inf, 0.30752617381348807, 0.23913037221229919] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30752617381348807, 0.23913037221229919, 0.23550810655523036] ***
*** starting iteration: 3; err: [Inf, 0.30752617381348807, 0.23913037221229919, 0.23550810655523036] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30752617381348807, 0.23913037221229919, 0.23550810655523036, 0.23392201741939192] ***
*** finished computation of 3 references, err: [Inf, 0.30752617381348807, 0.23913037221229919, 0.23550810655523036, 0.23392201741939192] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [239, 24, 0]]
** centroid: 1, normalized-entropy: 0.44064420935045195, [(1, 239), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [165, 44, 0]]
** centroid: 2, normalized-entropy: 0.7424875695421234, [(1, 165), (2, 44)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 175, 19]]
** centroid: 3, normalized-entropy: 0.4624253817433872, [(2, 175), (3, 19)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.380015433820403] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.380015433820403, 0.2350346094714352] ***
*** starting iteration: 2; err: [Inf, 0.380015433820403, 0.2350346094714352] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.380015433820403, 0.2350346094714352, 0.23445831015817764] ***
*** finished computation of 3 references, err: [Inf, 0.380015433820403, 0.2350346094714352, 0.23445831015817764] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [223, 27, 0]]
** centroid: 1, normalized-entropy: 0.49385372369952046, [(1, 223), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [185, 41, 0]]
** centroid: 2, normalized-entropy: 0.6831647925706782, [(1, 185), (2, 41)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 170, 21]]
** centroid: 3, normalized-entropy: 0.49975801640348033, [(2, 170), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30391413495684605] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30391413495684605, 0.2509931155090881] ***
*** starting iteration: 2; err: [Inf, 0.30391413495684605, 0.2509931155090881] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30391413495684605, 0.2509931155090881, 0.2406764093610546] ***
*** starting iteration: 3; err: [Inf, 0.30391413495684605, 0.2509931155090881, 0.2406764093610546] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30391413495684605, 0.2509931155090881, 0.2406764093610546, 0.2388413235240768] ***
*** finished computation of 3 references, err: [Inf, 0.30391413495684605, 0.2509931155090881, 0.2406764093610546, 0.2388413235240768] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [265, 13, 0]]
** centroid: 1, normalized-entropy: 0.27248214488094263, [(1, 265), (2, 13)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 159, 24]]
** centroid: 2, normalized-entropy: 0.5605769426145328, [(2, 159), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [153, 53, 0]]
** centroid: 3, normalized-entropy: 0.8226164299801833, [(1, 153), (2, 53)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4993298208427003] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4993298208427003, 0.30239471834566856] ***
*** starting iteration: 2; err: [Inf, 0.4993298208427003, 0.30239471834566856] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4993298208427003, 0.30239471834566856, 0.2997270330965698] ***
*** starting iteration: 3; err: [Inf, 0.4993298208427003, 0.30239471834566856, 0.2997270330965698] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4993298208427003, 0.30239471834566856, 0.2997270330965698, 0.2995240406186373] ***
*** finished computation of 3 references, err: [Inf, 0.4993298208427003, 0.30239471834566856, 0.2997270330965698, 0.2995240406186373] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [83, 168, 19]]
** centroid: 1, normalized-entropy: 0.7687808678029332, [(1, 83), (2, 168), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [189, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [132, 75, 0]]
** centroid: 3, normalized-entropy: 0.9445911819316588, [(1, 132), (2, 75)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38028426069313886] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38028426069313886, 0.31432519205517767] ***
*** starting iteration: 2; err: [Inf, 0.38028426069313886, 0.31432519205517767] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38028426069313886, 0.31432519205517767, 0.30456405776138157] ***
*** starting iteration: 3; err: [Inf, 0.38028426069313886, 0.31432519205517767, 0.30456405776138157] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38028426069313886, 0.31432519205517767, 0.30456405776138157, 0.3025352695888408] ***
*** finished computation of 3 references, err: [Inf, 0.38028426069313886, 0.31432519205517767, 0.30456405776138157, 0.3025352695888408] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [112, 164, 21]]
** centroid: 1, normalized-entropy: 0.8037489183168897, [(1, 112), (2, 164), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [127, 74, 0]]
** centroid: 2, normalized-entropy: 0.9492481873152105, [(1, 127), (2, 74)]
*** center 3: selecting labels [1] (freq >= 1) [from [169, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4134283093051396] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4134283093051396, 0.2962706891269698] ***
*** starting iteration: 2; err: [Inf, 0.4134283093051396, 0.2962706891269698] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4134283093051396, 0.2962706891269698, 0.29533988006156064] ***
*** finished computation of 3 references, err: [Inf, 0.4134283093051396, 0.2962706891269698, 0.29533988006156064] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [261, 27, 0]]
** centroid: 1, normalized-entropy: 0.44886448872302936, [(1, 261), (2, 27)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 153, 24]]
** centroid: 2, normalized-entropy: 0.572580465623769, [(2, 153), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [157, 45, 0]]
** centroid: 3, normalized-entropy: 0.76519738913387, [(1, 157), (2, 45)]
finished with 6 centroids; started with 3
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.18763285584084224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18763285584084224, 0.15943531271535905] ***
*** starting iteration: 2; err: [Inf, 0.18763285584084224, 0.15943531271535905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18763285584084224, 0.15943531271535905, 0.15766471312340583] ***
*** starting iteration: 3; err: [Inf, 0.18763285584084224, 0.15943531271535905, 0.15766471312340583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18763285584084224, 0.15943531271535905, 0.15766471312340583, 0.15677637004805728] ***
*** finished computation of 7 references, err: [Inf, 0.18763285584084224, 0.15943531271535905, 0.15766471312340583, 0.15677637004805728] ***
*** center 1: selecting labels [1] (freq >= 2) [from [203, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 81, 2]]
** centroid: 2, normalized-entropy: 0.1638605128691586, [(2, 81), (3, 2)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [32, 97, 0]]
** centroid: 3, normalized-entropy: 0.8081920174996, [(1, 32), (2, 97)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [181, 4, 0]]
** centroid: 4, normalized-entropy: 0.1504511601808517, [(1, 181), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [156, 3, 0]]
** centroid: 5, normalized-entropy: 0.13503620280212753, [(1, 156), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [43, 115, 0]]
** centroid: 6, normalized-entropy: 0.8445355563366387, [(1, 43), (2, 115)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 53, 30]]
** centroid: 7, normalized-entropy: 0.9438767571287909, [(2, 53), (3, 30)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17674987898766994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17674987898766994, 0.1455336622307077] ***
*** starting iteration: 2; err: [Inf, 0.17674987898766994, 0.1455336622307077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17674987898766994, 0.1455336622307077, 0.1416823144098744] ***
*** starting iteration: 3; err: [Inf, 0.17674987898766994, 0.1455336622307077, 0.1416823144098744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17674987898766994, 0.1455336622307077, 0.1416823144098744, 0.14047667618095874] ***
*** starting iteration: 4; err: [Inf, 0.17674987898766994, 0.1455336622307077, 0.1416823144098744, 0.14047667618095874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17674987898766994, 0.1455336622307077, 0.1416823144098744, 0.14047667618095874, 0.13997724297549577] ***
*** finished computation of 7 references, err: [Inf, 0.17674987898766994, 0.1455336622307077, 0.1416823144098744, 0.14047667618095874, 0.13997724297549577] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [48, 28, 0]]
** centroid: 1, normalized-entropy: 0.9494520153879484, [(1, 48), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 9, 0]]
** centroid: 2, normalized-entropy: 0.6429383500409613, [(1, 46), (2, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 59, 4]]
** centroid: 4, normalized-entropy: 0.3411538931451763, [(2, 59), (3, 4)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 57, 9]]
** centroid: 5, normalized-entropy: 0.5746356978376794, [(2, 57), (3, 9)]
*** center 6: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [93, 15, 0]]
** centroid: 7, normalized-entropy: 0.581321498763703, [(1, 93), (2, 15)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21318995116464795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21318995116464795, 0.16009283354505896] ***
*** starting iteration: 2; err: [Inf, 0.21318995116464795, 0.16009283354505896] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21318995116464795, 0.16009283354505896, 0.15307149800751357] ***
*** starting iteration: 3; err: [Inf, 0.21318995116464795, 0.16009283354505896, 0.15307149800751357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21318995116464795, 0.16009283354505896, 0.15307149800751357, 0.1503336881734431] ***
*** starting iteration: 4; err: [Inf, 0.21318995116464795, 0.16009283354505896, 0.15307149800751357, 0.1503336881734431] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21318995116464795, 0.16009283354505896, 0.15307149800751357, 0.1503336881734431, 0.14917977695073933] ***
*** starting iteration: 5; err: [Inf, 0.21318995116464795, 0.16009283354505896, 0.15307149800751357, 0.1503336881734431, 0.14917977695073933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21318995116464795, 0.16009283354505896, 0.15307149800751357, 0.1503336881734431, 0.14917977695073933, 0.1485273143488448] ***
*** finished computation of 7 references, err: [Inf, 0.21318995116464795, 0.16009283354505896, 0.15307149800751357, 0.1503336881734431, 0.14917977695073933, 0.1485273143488448] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 64, 15]]
** centroid: 1, normalized-entropy: 0.7012065844539666, [(2, 64), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [37, 10, 0]]
** centroid: 2, normalized-entropy: 0.7467366074830678, [(1, 37), (2, 10)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [73, 4, 0]]
** centroid: 3, normalized-entropy: 0.29461520565280713, [(1, 73), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 25, 0]]
** centroid: 4, normalized-entropy: 0.8233045447828534, [(1, 72), (2, 25)]
*** center 5: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 79, 0]]
** centroid: 7, normalized-entropy: 0.3255517134879513, [(1, 5), (2, 79)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20395110181346535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20395110181346535, 0.16010548318922518] ***
*** starting iteration: 2; err: [Inf, 0.20395110181346535, 0.16010548318922518] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20395110181346535, 0.16010548318922518, 0.1521104348115623] ***
*** starting iteration: 3; err: [Inf, 0.20395110181346535, 0.16010548318922518, 0.1521104348115623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20395110181346535, 0.16010548318922518, 0.1521104348115623, 0.14660195438284426] ***
*** starting iteration: 4; err: [Inf, 0.20395110181346535, 0.16010548318922518, 0.1521104348115623, 0.14660195438284426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20395110181346535, 0.16010548318922518, 0.1521104348115623, 0.14660195438284426, 0.14457460479298606] ***
*** starting iteration: 5; err: [Inf, 0.20395110181346535, 0.16010548318922518, 0.1521104348115623, 0.14660195438284426, 0.14457460479298606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20395110181346535, 0.16010548318922518, 0.1521104348115623, 0.14660195438284426, 0.14457460479298606, 0.1440788770932704] ***
*** finished computation of 7 references, err: [Inf, 0.20395110181346535, 0.16010548318922518, 0.1521104348115623, 0.14660195438284426, 0.14457460479298606, 0.1440788770932704] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 59, 17]]
** centroid: 1, normalized-entropy: 0.7668379316856329, [(2, 59), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 32, 0]]
** centroid: 2, normalized-entropy: 0.9618624139909456, [(1, 51), (2, 32)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [8, 73, 0]]
** centroid: 3, normalized-entropy: 0.46506984488164627, [(1, 8), (2, 73)]
*** center 4: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [66, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [59, 17, 0]]
** centroid: 6, normalized-entropy: 0.7668379316856329, [(1, 59), (2, 17)]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2133188169300556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2133188169300556, 0.16718243916891515] ***
*** starting iteration: 2; err: [Inf, 0.2133188169300556, 0.16718243916891515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2133188169300556, 0.16718243916891515, 0.15300909816473723] ***
*** starting iteration: 3; err: [Inf, 0.2133188169300556, 0.16718243916891515, 0.15300909816473723] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2133188169300556, 0.16718243916891515, 0.15300909816473723, 0.14819368548877537] ***
*** starting iteration: 4; err: [Inf, 0.2133188169300556, 0.16718243916891515, 0.15300909816473723, 0.14819368548877537] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2133188169300556, 0.16718243916891515, 0.15300909816473723, 0.14819368548877537, 0.1454534877128899] ***
*** starting iteration: 5; err: [Inf, 0.2133188169300556, 0.16718243916891515, 0.15300909816473723, 0.14819368548877537, 0.1454534877128899] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2133188169300556, 0.16718243916891515, 0.15300909816473723, 0.14819368548877537, 0.1454534877128899, 0.14381664937920868] ***
*** starting iteration: 6; err: [Inf, 0.2133188169300556, 0.16718243916891515, 0.15300909816473723, 0.14819368548877537, 0.1454534877128899, 0.14381664937920868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2133188169300556, 0.16718243916891515, 0.15300909816473723, 0.14819368548877537, 0.1454534877128899, 0.14381664937920868, 0.1429124580381904] ***
*** finished computation of 7 references, err: [Inf, 0.2133188169300556, 0.16718243916891515, 0.15300909816473723, 0.14819368548877537, 0.1454534877128899, 0.14381664937920868, 0.1429124580381904] ***
*** center 1: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [29, 39, 0]]
** centroid: 2, normalized-entropy: 0.9843432030984676, [(1, 29), (2, 39)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 47, 16]]
** centroid: 3, normalized-entropy: 0.8175072881213616, [(2, 47), (3, 16)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 61, 1]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 24, 0]]
** centroid: 5, normalized-entropy: 0.9366673818775627, [(1, 44), (2, 24)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [85, 10, 0]]
** centroid: 6, normalized-entropy: 0.48546076074591343, [(1, 85), (2, 10)]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18217758369166404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18217758369166404, 0.16057072821632026] ***
*** starting iteration: 2; err: [Inf, 0.18217758369166404, 0.16057072821632026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18217758369166404, 0.16057072821632026, 0.1515177478827536] ***
*** starting iteration: 3; err: [Inf, 0.18217758369166404, 0.16057072821632026, 0.1515177478827536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18217758369166404, 0.16057072821632026, 0.1515177478827536, 0.14820791163668037] ***
*** starting iteration: 4; err: [Inf, 0.18217758369166404, 0.16057072821632026, 0.1515177478827536, 0.14820791163668037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18217758369166404, 0.16057072821632026, 0.1515177478827536, 0.14820791163668037, 0.14690193310100585] ***
*** starting iteration: 5; err: [Inf, 0.18217758369166404, 0.16057072821632026, 0.1515177478827536, 0.14820791163668037, 0.14690193310100585] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18217758369166404, 0.16057072821632026, 0.1515177478827536, 0.14820791163668037, 0.14690193310100585, 0.14645071584358813] ***
*** finished computation of 7 references, err: [Inf, 0.18217758369166404, 0.16057072821632026, 0.1515177478827536, 0.14820791163668037, 0.14690193310100585, 0.14645071584358813] ***
*** center 1: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 13, 0]]
** centroid: 2, normalized-entropy: 0.6601070987550468, [(1, 63), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [39, 33, 0]]
** centroid: 3, normalized-entropy: 0.9949848281859699, [(1, 39), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 21, 0]]
** centroid: 4, normalized-entropy: 0.7706290693639406, [(1, 72), (2, 21)]
*** center 5: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 55, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 54, 18]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 54), (3, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24548801604658366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24548801604658366, 0.19143556546606125] ***
*** starting iteration: 2; err: [Inf, 0.24548801604658366, 0.19143556546606125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24548801604658366, 0.19143556546606125, 0.17246885314956306] ***
*** starting iteration: 3; err: [Inf, 0.24548801604658366, 0.19143556546606125, 0.17246885314956306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24548801604658366, 0.19143556546606125, 0.17246885314956306, 0.15957837254926563] ***
*** starting iteration: 4; err: [Inf, 0.24548801604658366, 0.19143556546606125, 0.17246885314956306, 0.15957837254926563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24548801604658366, 0.19143556546606125, 0.17246885314956306, 0.15957837254926563, 0.1529048386355862] ***
*** starting iteration: 5; err: [Inf, 0.24548801604658366, 0.19143556546606125, 0.17246885314956306, 0.15957837254926563, 0.1529048386355862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24548801604658366, 0.19143556546606125, 0.17246885314956306, 0.15957837254926563, 0.1529048386355862, 0.14733563001081348] ***
*** starting iteration: 6; err: [Inf, 0.24548801604658366, 0.19143556546606125, 0.17246885314956306, 0.15957837254926563, 0.1529048386355862, 0.14733563001081348] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24548801604658366, 0.19143556546606125, 0.17246885314956306, 0.15957837254926563, 0.1529048386355862, 0.14733563001081348, 0.1442703661522828] ***
*** starting iteration: 7; err: [Inf, 0.24548801604658366, 0.19143556546606125, 0.17246885314956306, 0.15957837254926563, 0.1529048386355862, 0.14733563001081348, 0.1442703661522828] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24548801604658366, 0.19143556546606125, 0.17246885314956306, 0.15957837254926563, 0.1529048386355862, 0.14733563001081348, 0.1442703661522828, 0.14350878578796983] ***
*** finished computation of 7 references, err: [Inf, 0.24548801604658366, 0.19143556546606125, 0.17246885314956306, 0.15957837254926563, 0.1529048386355862, 0.14733563001081348, 0.1442703661522828, 0.14350878578796983] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 71, 16]]
** centroid: 1, normalized-entropy: 0.6885521684368613, [(2, 71), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [81, 26, 0]]
** centroid: 4, normalized-entropy: 0.7999783611177544, [(1, 81), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 23, 0]]
** centroid: 5, normalized-entropy: 0.9231199835423002, [(1, 45), (2, 23)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 50, 0]]
** centroid: 6, normalized-entropy: 0.5787946246321198, [(1, 8), (2, 50)]
*** center 7: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18916006669402122] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18916006669402122, 0.15249050143919884] ***
*** starting iteration: 2; err: [Inf, 0.18916006669402122, 0.15249050143919884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18916006669402122, 0.15249050143919884, 0.149054006267339] ***
*** starting iteration: 3; err: [Inf, 0.18916006669402122, 0.15249050143919884, 0.149054006267339] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18916006669402122, 0.15249050143919884, 0.149054006267339, 0.14802656604070216] ***
*** starting iteration: 4; err: [Inf, 0.18916006669402122, 0.15249050143919884, 0.149054006267339, 0.14802656604070216] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18916006669402122, 0.15249050143919884, 0.149054006267339, 0.14802656604070216, 0.14748683596029877] ***
*** finished computation of 7 references, err: [Inf, 0.18916006669402122, 0.15249050143919884, 0.149054006267339, 0.14802656604070216, 0.14748683596029877] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [28, 33, 0]]
** centroid: 1, normalized-entropy: 0.995148095654003, [(1, 28), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [11, 39, 0]]
** centroid: 2, normalized-entropy: 0.7601675029619658, [(1, 11), (2, 39)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 67, 14]]
** centroid: 3, normalized-entropy: 0.6641593279528072, [(2, 67), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 8, 0]]
** centroid: 5, normalized-entropy: 0.612196127490834, [(1, 45), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [81, 20, 0]]
** centroid: 6, normalized-entropy: 0.7179499765002912, [(1, 81), (2, 20)]
*** center 7: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21284208224527537] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21284208224527537, 0.16351394498813898] ***
*** starting iteration: 2; err: [Inf, 0.21284208224527537, 0.16351394498813898] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21284208224527537, 0.16351394498813898, 0.15466235341317952] ***
*** starting iteration: 3; err: [Inf, 0.21284208224527537, 0.16351394498813898, 0.15466235341317952] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21284208224527537, 0.16351394498813898, 0.15466235341317952, 0.15073944019898772] ***
*** starting iteration: 4; err: [Inf, 0.21284208224527537, 0.16351394498813898, 0.15466235341317952, 0.15073944019898772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21284208224527537, 0.16351394498813898, 0.15466235341317952, 0.15073944019898772, 0.14884548120573163] ***
*** starting iteration: 5; err: [Inf, 0.21284208224527537, 0.16351394498813898, 0.15466235341317952, 0.15073944019898772, 0.14884548120573163] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21284208224527537, 0.16351394498813898, 0.15466235341317952, 0.15073944019898772, 0.14884548120573163, 0.14797846790216862] ***
*** finished computation of 7 references, err: [Inf, 0.21284208224527537, 0.16351394498813898, 0.15466235341317952, 0.15073944019898772, 0.14884548120573163, 0.14797846790216862] ***
*** center 1: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 13, 0]]
** centroid: 2, normalized-entropy: 0.709825885194168, [(1, 54), (2, 13)]
*** center 3: selecting labels [2] (freq >= 2) [from [1, 57, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 10, 0]]
** centroid: 4, normalized-entropy: 0.5916727785823274, [(1, 60), (2, 10)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 91, 14]]
** centroid: 5, normalized-entropy: 0.5665095065529052, [(2, 91), (3, 14)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [61, 13, 0]]
** centroid: 6, normalized-entropy: 0.6705250693158382, [(1, 61), (2, 13)]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19883766890410334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19883766890410334, 0.15987968145124615] ***
*** starting iteration: 2; err: [Inf, 0.19883766890410334, 0.15987968145124615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19883766890410334, 0.15987968145124615, 0.15223024138994515] ***
*** starting iteration: 3; err: [Inf, 0.19883766890410334, 0.15987968145124615, 0.15223024138994515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19883766890410334, 0.15987968145124615, 0.15223024138994515, 0.14971384903928264] ***
*** starting iteration: 4; err: [Inf, 0.19883766890410334, 0.15987968145124615, 0.15223024138994515, 0.14971384903928264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19883766890410334, 0.15987968145124615, 0.15223024138994515, 0.14971384903928264, 0.14759713229723276] ***
*** starting iteration: 5; err: [Inf, 0.19883766890410334, 0.15987968145124615, 0.15223024138994515, 0.14971384903928264, 0.14759713229723276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19883766890410334, 0.15987968145124615, 0.15223024138994515, 0.14971384903928264, 0.14759713229723276, 0.14674784506205468] ***
*** finished computation of 7 references, err: [Inf, 0.19883766890410334, 0.15987968145124615, 0.15223024138994515, 0.14971384903928264, 0.14759713229723276, 0.14674784506205468] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [2, 55, 0]]
** centroid: 1, normalized-entropy: 0.2192973081321754, [(1, 2), (2, 55)]
*** center 2: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [68, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 76, 16]]
** centroid: 5, normalized-entropy: 0.6665783579949205, [(2, 76), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [65, 28, 0]]
** centroid: 6, normalized-entropy: 0.8826013308449944, [(1, 65), (2, 28)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [62, 10, 0]]
** centroid: 7, normalized-entropy: 0.581321498763703, [(1, 62), (2, 10)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19432975495420396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19432975495420396, 0.15744693708047272] ***
*** starting iteration: 2; err: [Inf, 0.19432975495420396, 0.15744693708047272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19432975495420396, 0.15744693708047272, 0.1467805746756494] ***
*** starting iteration: 3; err: [Inf, 0.19432975495420396, 0.15744693708047272, 0.1467805746756494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19432975495420396, 0.15744693708047272, 0.1467805746756494, 0.1406190658574924] ***
*** starting iteration: 4; err: [Inf, 0.19432975495420396, 0.15744693708047272, 0.1467805746756494, 0.1406190658574924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19432975495420396, 0.15744693708047272, 0.1467805746756494, 0.1406190658574924, 0.1384542702054605] ***
*** starting iteration: 5; err: [Inf, 0.19432975495420396, 0.15744693708047272, 0.1467805746756494, 0.1406190658574924, 0.1384542702054605] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19432975495420396, 0.15744693708047272, 0.1467805746756494, 0.1406190658574924, 0.1384542702054605, 0.13790913313394412] ***
*** finished computation of 7 references, err: [Inf, 0.19432975495420396, 0.15744693708047272, 0.1467805746756494, 0.1406190658574924, 0.1384542702054605, 0.13790913313394412] ***
*** center 1: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 67, 16]]
** centroid: 2, normalized-entropy: 0.7072324944713736, [(2, 67), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 15, 0]]
** centroid: 4, normalized-entropy: 0.7793498372920851, [(1, 50), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [16, 69, 0]]
** centroid: 5, normalized-entropy: 0.6977652006354232, [(1, 16), (2, 69)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [37, 35, 0]]
** centroid: 6, normalized-entropy: 0.9994433330902989, [(1, 37), (2, 35)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [71, 2, 0]]
** centroid: 7, normalized-entropy: 0.18116640155354563, [(1, 71), (2, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21072349797561765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21072349797561765, 0.1667633072193712] ***
*** starting iteration: 2; err: [Inf, 0.21072349797561765, 0.1667633072193712] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21072349797561765, 0.1667633072193712, 0.15701792519539595] ***
*** starting iteration: 3; err: [Inf, 0.21072349797561765, 0.1667633072193712, 0.15701792519539595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21072349797561765, 0.1667633072193712, 0.15701792519539595, 0.15331054898537697] ***
*** starting iteration: 4; err: [Inf, 0.21072349797561765, 0.1667633072193712, 0.15701792519539595, 0.15331054898537697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21072349797561765, 0.1667633072193712, 0.15701792519539595, 0.15331054898537697, 0.15064280861848967] ***
*** starting iteration: 5; err: [Inf, 0.21072349797561765, 0.1667633072193712, 0.15701792519539595, 0.15331054898537697, 0.15064280861848967] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21072349797561765, 0.1667633072193712, 0.15701792519539595, 0.15331054898537697, 0.15064280861848967, 0.14934954876080156] ***
*** starting iteration: 6; err: [Inf, 0.21072349797561765, 0.1667633072193712, 0.15701792519539595, 0.15331054898537697, 0.15064280861848967, 0.14934954876080156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21072349797561765, 0.1667633072193712, 0.15701792519539595, 0.15331054898537697, 0.15064280861848967, 0.14934954876080156, 0.14893560901843012] ***
*** finished computation of 7 references, err: [Inf, 0.21072349797561765, 0.1667633072193712, 0.15701792519539595, 0.15331054898537697, 0.15064280861848967, 0.14934954876080156, 0.14893560901843012] ***
*** center 1: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 47, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [61, 2, 0]]
** centroid: 4, normalized-entropy: 0.20307392998664567, [(1, 61), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 28, 0]]
** centroid: 5, normalized-entropy: 0.8747617811911199, [(1, 67), (2, 28)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [15, 52, 0]]
** centroid: 6, normalized-entropy: 0.7671903206448686, [(1, 15), (2, 52)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 51, 16]]
** centroid: 7, normalized-entropy: 0.7930490047779772, [(2, 51), (3, 16)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23901947650127112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23901947650127112, 0.15970470733381809] ***
*** starting iteration: 2; err: [Inf, 0.23901947650127112, 0.15970470733381809] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23901947650127112, 0.15970470733381809, 0.15172059893794357] ***
*** starting iteration: 3; err: [Inf, 0.23901947650127112, 0.15970470733381809, 0.15172059893794357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23901947650127112, 0.15970470733381809, 0.15172059893794357, 0.14892388707026838] ***
*** starting iteration: 4; err: [Inf, 0.23901947650127112, 0.15970470733381809, 0.15172059893794357, 0.14892388707026838] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23901947650127112, 0.15970470733381809, 0.15172059893794357, 0.14892388707026838, 0.14797911133337766] ***
*** finished computation of 7 references, err: [Inf, 0.23901947650127112, 0.15970470733381809, 0.15172059893794357, 0.14892388707026838, 0.14797911133337766] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [80, 14, 0]]
** centroid: 1, normalized-entropy: 0.607171654871303, [(1, 80), (2, 14)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 30, 20]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(2, 30), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [11, 55, 0]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(1, 11), (2, 55)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 55, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [75, 4, 0]]
** centroid: 6, normalized-entropy: 0.2890794597316462, [(1, 75), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [73, 4, 0]]
** centroid: 7, normalized-entropy: 0.29461520565280713, [(1, 73), (2, 4)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22718527363985777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22718527363985777, 0.15934627464273945] ***
*** starting iteration: 2; err: [Inf, 0.22718527363985777, 0.15934627464273945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22718527363985777, 0.15934627464273945, 0.15351132676377893] ***
*** starting iteration: 3; err: [Inf, 0.22718527363985777, 0.15934627464273945, 0.15351132676377893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22718527363985777, 0.15934627464273945, 0.15351132676377893, 0.15146268875151872] ***
*** starting iteration: 4; err: [Inf, 0.22718527363985777, 0.15934627464273945, 0.15351132676377893, 0.15146268875151872] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22718527363985777, 0.15934627464273945, 0.15351132676377893, 0.15146268875151872, 0.14901298831403256] ***
*** starting iteration: 5; err: [Inf, 0.22718527363985777, 0.15934627464273945, 0.15351132676377893, 0.15146268875151872, 0.14901298831403256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22718527363985777, 0.15934627464273945, 0.15351132676377893, 0.15146268875151872, 0.14901298831403256, 0.1461011016778648] ***
*** starting iteration: 6; err: [Inf, 0.22718527363985777, 0.15934627464273945, 0.15351132676377893, 0.15146268875151872, 0.14901298831403256, 0.1461011016778648] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22718527363985777, 0.15934627464273945, 0.15351132676377893, 0.15146268875151872, 0.14901298831403256, 0.1461011016778648, 0.14333800399582833] ***
*** starting iteration: 7; err: [Inf, 0.22718527363985777, 0.15934627464273945, 0.15351132676377893, 0.15146268875151872, 0.14901298831403256, 0.1461011016778648, 0.14333800399582833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22718527363985777, 0.15934627464273945, 0.15351132676377893, 0.15146268875151872, 0.14901298831403256, 0.1461011016778648, 0.14333800399582833, 0.1422115494068712] ***
*** starting iteration: 8; err: [Inf, 0.22718527363985777, 0.15934627464273945, 0.15351132676377893, 0.15146268875151872, 0.14901298831403256, 0.1461011016778648, 0.14333800399582833, 0.1422115494068712] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22718527363985777, 0.15934627464273945, 0.15351132676377893, 0.15146268875151872, 0.14901298831403256, 0.1461011016778648, 0.14333800399582833, 0.1422115494068712, 0.14169613839685916] ***
*** finished computation of 7 references, err: [Inf, 0.22718527363985777, 0.15934627464273945, 0.15351132676377893, 0.15146268875151872, 0.14901298831403256, 0.1461011016778648, 0.14333800399582833, 0.1422115494068712, 0.14169613839685916] ***
*** center 1: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 20, 0]]
** centroid: 2, normalized-entropy: 0.847107490529376, [(1, 53), (2, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [33, 42, 0]]
** centroid: 3, normalized-entropy: 0.9895875212220558, [(1, 33), (2, 42)]
*** center 4: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 67, 14]]
** centroid: 6, normalized-entropy: 0.6641593279528072, [(2, 67), (3, 14)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [18, 48, 0]]
** centroid: 7, normalized-entropy: 0.8453509366224364, [(1, 18), (2, 48)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20125017507746815] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20125017507746815, 0.15634031483065336] ***
*** starting iteration: 2; err: [Inf, 0.20125017507746815, 0.15634031483065336] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20125017507746815, 0.15634031483065336, 0.15495632800273598] ***
*** starting iteration: 3; err: [Inf, 0.20125017507746815, 0.15634031483065336, 0.15495632800273598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20125017507746815, 0.15634031483065336, 0.15495632800273598, 0.15455634023156017] ***
*** finished computation of 7 references, err: [Inf, 0.20125017507746815, 0.15634031483065336, 0.15495632800273598, 0.15455634023156017] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 75, 14]]
** centroid: 1, normalized-entropy: 0.6278191534832795, [(2, 75), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 23, 0]]
** centroid: 2, normalized-entropy: 0.9134601452569628, [(1, 47), (2, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [83, 16, 0]]
** centroid: 4, normalized-entropy: 0.638161945314006, [(1, 83), (2, 16)]
*** center 5: selecting labels [2] (freq >= 2) [from [1, 28, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 31, 0]]
** centroid: 6, normalized-entropy: 0.581321498763703, [(1, 5), (2, 31)]
*** center 7: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21194969459064306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21194969459064306, 0.166460772074759] ***
*** starting iteration: 2; err: [Inf, 0.21194969459064306, 0.166460772074759] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21194969459064306, 0.166460772074759, 0.1578092299187556] ***
*** starting iteration: 3; err: [Inf, 0.21194969459064306, 0.166460772074759, 0.1578092299187556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21194969459064306, 0.166460772074759, 0.1578092299187556, 0.1519224858712405] ***
*** starting iteration: 4; err: [Inf, 0.21194969459064306, 0.166460772074759, 0.1578092299187556, 0.1519224858712405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21194969459064306, 0.166460772074759, 0.1578092299187556, 0.1519224858712405, 0.14897920009493829] ***
*** starting iteration: 5; err: [Inf, 0.21194969459064306, 0.166460772074759, 0.1578092299187556, 0.1519224858712405, 0.14897920009493829] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21194969459064306, 0.166460772074759, 0.1578092299187556, 0.1519224858712405, 0.14897920009493829, 0.1474395711608231] ***
*** starting iteration: 6; err: [Inf, 0.21194969459064306, 0.166460772074759, 0.1578092299187556, 0.1519224858712405, 0.14897920009493829, 0.1474395711608231] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21194969459064306, 0.166460772074759, 0.1578092299187556, 0.1519224858712405, 0.14897920009493829, 0.1474395711608231, 0.146597841816023] ***
*** finished computation of 7 references, err: [Inf, 0.21194969459064306, 0.166460772074759, 0.1578092299187556, 0.1519224858712405, 0.14897920009493829, 0.1474395711608231, 0.146597841816023] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 43, 15]]
** centroid: 1, normalized-entropy: 0.8246578332945033, [(2, 43), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 9, 0]]
** centroid: 2, normalized-entropy: 0.5586293734521991, [(1, 60), (2, 9)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [76, 1, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [24, 63, 0]]
** centroid: 6, normalized-entropy: 0.8497511372532974, [(1, 24), (2, 63)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [65, 9, 0]]
** centroid: 7, normalized-entropy: 0.5340042729285396, [(1, 65), (2, 9)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18392890252824873] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18392890252824873, 0.15677837386727334] ***
*** starting iteration: 2; err: [Inf, 0.18392890252824873, 0.15677837386727334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18392890252824873, 0.15677837386727334, 0.15151189169380813] ***
*** starting iteration: 3; err: [Inf, 0.18392890252824873, 0.15677837386727334, 0.15151189169380813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18392890252824873, 0.15677837386727334, 0.15151189169380813, 0.14752424143627285] ***
*** starting iteration: 4; err: [Inf, 0.18392890252824873, 0.15677837386727334, 0.15151189169380813, 0.14752424143627285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18392890252824873, 0.15677837386727334, 0.15151189169380813, 0.14752424143627285, 0.14552080180868507] ***
*** starting iteration: 5; err: [Inf, 0.18392890252824873, 0.15677837386727334, 0.15151189169380813, 0.14752424143627285, 0.14552080180868507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18392890252824873, 0.15677837386727334, 0.15151189169380813, 0.14752424143627285, 0.14552080180868507, 0.14462810983136296] ***
*** finished computation of 7 references, err: [Inf, 0.18392890252824873, 0.15677837386727334, 0.15151189169380813, 0.14752424143627285, 0.14552080180868507, 0.14462810983136296] ***
*** center 1: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [81, 15, 0]]
** centroid: 2, normalized-entropy: 0.625262405223423, [(1, 81), (2, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [34, 46, 0]]
** centroid: 3, normalized-entropy: 0.9837082626231858, [(1, 34), (2, 46)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 19, 0]]
** centroid: 4, normalized-entropy: 0.849054424254048, [(1, 50), (2, 19)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 42, 18]]
** centroid: 5, normalized-entropy: 0.8812908992306927, [(2, 42), (3, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 50, 3]]
** centroid: 7, normalized-entropy: 0.3138129641688652, [(2, 50), (3, 3)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18437427358701824] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18437427358701824, 0.15964358358085157] ***
*** starting iteration: 2; err: [Inf, 0.18437427358701824, 0.15964358358085157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18437427358701824, 0.15964358358085157, 0.1498001395892352] ***
*** starting iteration: 3; err: [Inf, 0.18437427358701824, 0.15964358358085157, 0.1498001395892352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18437427358701824, 0.15964358358085157, 0.1498001395892352, 0.14516508501768113] ***
*** starting iteration: 4; err: [Inf, 0.18437427358701824, 0.15964358358085157, 0.1498001395892352, 0.14516508501768113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18437427358701824, 0.15964358358085157, 0.1498001395892352, 0.14516508501768113, 0.14349658784642816] ***
*** starting iteration: 5; err: [Inf, 0.18437427358701824, 0.15964358358085157, 0.1498001395892352, 0.14516508501768113, 0.14349658784642816] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18437427358701824, 0.15964358358085157, 0.1498001395892352, 0.14516508501768113, 0.14349658784642816, 0.14273797673545777] ***
*** finished computation of 7 references, err: [Inf, 0.18437427358701824, 0.15964358358085157, 0.1498001395892352, 0.14516508501768113, 0.14349658784642816, 0.14273797673545777] ***
*** center 1: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [97, 10, 0]]
** centroid: 2, normalized-entropy: 0.447907858914932, [(1, 97), (2, 10)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 24, 0]]
** centroid: 3, normalized-entropy: 0.9229192878686723, [(1, 47), (2, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [27, 43, 0]]
** centroid: 5, normalized-entropy: 0.9619780596506257, [(1, 27), (2, 43)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 43, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 47, 18]]
** centroid: 7, normalized-entropy: 0.8512243352621381, [(2, 47), (3, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20549334214814008] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20549334214814008, 0.15529741358570753] ***
*** starting iteration: 2; err: [Inf, 0.20549334214814008, 0.15529741358570753] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20549334214814008, 0.15529741358570753, 0.14624161582509987] ***
*** starting iteration: 3; err: [Inf, 0.20549334214814008, 0.15529741358570753, 0.14624161582509987] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20549334214814008, 0.15529741358570753, 0.14624161582509987, 0.14439653046801687] ***
*** starting iteration: 4; err: [Inf, 0.20549334214814008, 0.15529741358570753, 0.14624161582509987, 0.14439653046801687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20549334214814008, 0.15529741358570753, 0.14624161582509987, 0.14439653046801687, 0.1438592050783336] ***
*** finished computation of 7 references, err: [Inf, 0.20549334214814008, 0.15529741358570753, 0.14624161582509987, 0.14439653046801687, 0.1438592050783336] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 87, 16]]
** centroid: 1, normalized-entropy: 0.6230433996216712, [(2, 87), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [31, 34, 0]]
** centroid: 2, normalized-entropy: 0.9984628557283827, [(1, 31), (2, 34)]
*** center 3: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [43, 40, 0]]
** centroid: 6, normalized-entropy: 0.9990574042663861, [(1, 43), (2, 40)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [48, 27, 0]]
** centroid: 7, normalized-entropy: 0.9426831892554921, [(1, 48), (2, 27)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17022920850524678] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17022920850524678, 0.14874991412088276] ***
*** starting iteration: 2; err: [Inf, 0.17022920850524678, 0.14874991412088276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17022920850524678, 0.14874991412088276, 0.14619724444299936] ***
*** starting iteration: 3; err: [Inf, 0.17022920850524678, 0.14874991412088276, 0.14619724444299936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17022920850524678, 0.14874991412088276, 0.14619724444299936, 0.14538480513729155] ***
*** finished computation of 7 references, err: [Inf, 0.17022920850524678, 0.14874991412088276, 0.14619724444299936, 0.14538480513729155] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 10, 0]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(1, 70), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 11, 0]]
** centroid: 4, normalized-entropy: 0.6064481901491525, [(1, 63), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 15, 0]]
** centroid: 5, normalized-entropy: 0.7732266742876346, [(1, 51), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [60, 16, 0]]
** centroid: 6, normalized-entropy: 0.7424875695421234, [(1, 60), (2, 16)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 62, 18]]
** centroid: 7, normalized-entropy: 0.7691928290130138, [(2, 62), (3, 18)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2087594177541323] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2087594177541323, 0.15817146961111575] ***
*** starting iteration: 2; err: [Inf, 0.2087594177541323, 0.15817146961111575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2087594177541323, 0.15817146961111575, 0.1525920453858562] ***
*** starting iteration: 3; err: [Inf, 0.2087594177541323, 0.15817146961111575, 0.1525920453858562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2087594177541323, 0.15817146961111575, 0.1525920453858562, 0.15070272624120115] ***
*** starting iteration: 4; err: [Inf, 0.2087594177541323, 0.15817146961111575, 0.1525920453858562, 0.15070272624120115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2087594177541323, 0.15817146961111575, 0.1525920453858562, 0.15070272624120115, 0.14978342643007636] ***
*** finished computation of 7 references, err: [Inf, 0.2087594177541323, 0.15817146961111575, 0.1525920453858562, 0.15070272624120115, 0.14978342643007636] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 44, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 31, 0]]
** centroid: 2, normalized-entropy: 0.9724497147128791, [(1, 46), (2, 31)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [13, 52, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 13), (2, 52)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [100, 5, 0]]
** centroid: 4, normalized-entropy: 0.2761954276479391, [(1, 100), (2, 5)]
*** center 5: selecting labels [1] (freq >= 2) [from [72, 1, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 45, 15]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 45), (3, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20604047243483364] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20604047243483364, 0.1689542128071189] ***
*** starting iteration: 2; err: [Inf, 0.20604047243483364, 0.1689542128071189] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20604047243483364, 0.1689542128071189, 0.16096185160335152] ***
*** starting iteration: 3; err: [Inf, 0.20604047243483364, 0.1689542128071189, 0.16096185160335152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20604047243483364, 0.1689542128071189, 0.16096185160335152, 0.15820296730473637] ***
*** starting iteration: 4; err: [Inf, 0.20604047243483364, 0.1689542128071189, 0.16096185160335152, 0.15820296730473637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20604047243483364, 0.1689542128071189, 0.16096185160335152, 0.15820296730473637, 0.1564391508353874] ***
*** starting iteration: 5; err: [Inf, 0.20604047243483364, 0.1689542128071189, 0.16096185160335152, 0.15820296730473637, 0.1564391508353874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20604047243483364, 0.1689542128071189, 0.16096185160335152, 0.15820296730473637, 0.1564391508353874, 0.1553059720742749] ***
*** starting iteration: 6; err: [Inf, 0.20604047243483364, 0.1689542128071189, 0.16096185160335152, 0.15820296730473637, 0.1564391508353874, 0.1553059720742749] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20604047243483364, 0.1689542128071189, 0.16096185160335152, 0.15820296730473637, 0.1564391508353874, 0.1553059720742749, 0.15347297787759454] ***
*** starting iteration: 7; err: [Inf, 0.20604047243483364, 0.1689542128071189, 0.16096185160335152, 0.15820296730473637, 0.1564391508353874, 0.1553059720742749, 0.15347297787759454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20604047243483364, 0.1689542128071189, 0.16096185160335152, 0.15820296730473637, 0.1564391508353874, 0.1553059720742749, 0.15347297787759454, 0.1521320871291682] ***
*** starting iteration: 8; err: [Inf, 0.20604047243483364, 0.1689542128071189, 0.16096185160335152, 0.15820296730473637, 0.1564391508353874, 0.1553059720742749, 0.15347297787759454, 0.1521320871291682] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20604047243483364, 0.1689542128071189, 0.16096185160335152, 0.15820296730473637, 0.1564391508353874, 0.1553059720742749, 0.15347297787759454, 0.1521320871291682, 0.15141168400645255] ***
*** finished computation of 7 references, err: [Inf, 0.20604047243483364, 0.1689542128071189, 0.16096185160335152, 0.15820296730473637, 0.1564391508353874, 0.1553059720742749, 0.15347297787759454, 0.1521320871291682, 0.15141168400645255] ***
*** center 1: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [23, 22, 0]]
** centroid: 2, normalized-entropy: 0.9996437496778561, [(1, 23), (2, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 75, 18]]
** centroid: 4, normalized-entropy: 0.708835673332196, [(2, 75), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 55, 0]]
** centroid: 5, normalized-entropy: 0.7276874545656657, [(1, 14), (2, 55)]
*** center 6: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [93, 30, 0]]
** centroid: 7, normalized-entropy: 0.8014698931335286, [(1, 93), (2, 30)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2601471894532442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601471894532442, 0.16137980528443585] ***
*** starting iteration: 2; err: [Inf, 0.2601471894532442, 0.16137980528443585] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601471894532442, 0.16137980528443585, 0.15591295370087027] ***
*** starting iteration: 3; err: [Inf, 0.2601471894532442, 0.16137980528443585, 0.15591295370087027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601471894532442, 0.16137980528443585, 0.15591295370087027, 0.15334617329668254] ***
*** starting iteration: 4; err: [Inf, 0.2601471894532442, 0.16137980528443585, 0.15591295370087027, 0.15334617329668254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601471894532442, 0.16137980528443585, 0.15591295370087027, 0.15334617329668254, 0.15022187617886812] ***
*** starting iteration: 5; err: [Inf, 0.2601471894532442, 0.16137980528443585, 0.15591295370087027, 0.15334617329668254, 0.15022187617886812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601471894532442, 0.16137980528443585, 0.15591295370087027, 0.15334617329668254, 0.15022187617886812, 0.1475329628083855] ***
*** starting iteration: 6; err: [Inf, 0.2601471894532442, 0.16137980528443585, 0.15591295370087027, 0.15334617329668254, 0.15022187617886812, 0.1475329628083855] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601471894532442, 0.16137980528443585, 0.15591295370087027, 0.15334617329668254, 0.15022187617886812, 0.1475329628083855, 0.145300369175151] ***
*** starting iteration: 7; err: [Inf, 0.2601471894532442, 0.16137980528443585, 0.15591295370087027, 0.15334617329668254, 0.15022187617886812, 0.1475329628083855, 0.145300369175151] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601471894532442, 0.16137980528443585, 0.15591295370087027, 0.15334617329668254, 0.15022187617886812, 0.1475329628083855, 0.145300369175151, 0.14407668630219997] ***
*** starting iteration: 8; err: [Inf, 0.2601471894532442, 0.16137980528443585, 0.15591295370087027, 0.15334617329668254, 0.15022187617886812, 0.1475329628083855, 0.145300369175151, 0.14407668630219997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601471894532442, 0.16137980528443585, 0.15591295370087027, 0.15334617329668254, 0.15022187617886812, 0.1475329628083855, 0.145300369175151, 0.14407668630219997, 0.1436627654377371] ***
*** finished computation of 7 references, err: [Inf, 0.2601471894532442, 0.16137980528443585, 0.15591295370087027, 0.15334617329668254, 0.15022187617886812, 0.1475329628083855, 0.145300369175151, 0.14407668630219997, 0.1436627654377371] ***
*** center 1: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [88, 24, 0]]
** centroid: 3, normalized-entropy: 0.7495952572594798, [(1, 88), (2, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 10, 0]]
** centroid: 4, normalized-entropy: 0.6136190195993708, [(1, 56), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [35, 11, 0]]
** centroid: 5, normalized-entropy: 0.7935912300117066, [(1, 35), (2, 11)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 79, 13]]
** centroid: 6, normalized-entropy: 0.5876446142980418, [(2, 79), (3, 13)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 54, 0]]
** centroid: 7, normalized-entropy: 0.46899559358928133, [(1, 6), (2, 54)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1978515165662393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1978515165662393, 0.1604457100778818] ***
*** starting iteration: 2; err: [Inf, 0.1978515165662393, 0.1604457100778818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1978515165662393, 0.1604457100778818, 0.15284519891627132] ***
*** starting iteration: 3; err: [Inf, 0.1978515165662393, 0.1604457100778818, 0.15284519891627132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1978515165662393, 0.1604457100778818, 0.15284519891627132, 0.1507539649941027] ***
*** starting iteration: 4; err: [Inf, 0.1978515165662393, 0.1604457100778818, 0.15284519891627132, 0.1507539649941027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1978515165662393, 0.1604457100778818, 0.15284519891627132, 0.1507539649941027, 0.1491687292549759] ***
*** starting iteration: 5; err: [Inf, 0.1978515165662393, 0.1604457100778818, 0.15284519891627132, 0.1507539649941027, 0.1491687292549759] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1978515165662393, 0.1604457100778818, 0.15284519891627132, 0.1507539649941027, 0.1491687292549759, 0.14887920915009453] ***
*** finished computation of 7 references, err: [Inf, 0.1978515165662393, 0.1604457100778818, 0.15284519891627132, 0.1507539649941027, 0.1491687292549759, 0.14887920915009453] ***
*** center 1: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [8, 52, 0]]
** centroid: 3, normalized-entropy: 0.5665095065529052, [(1, 8), (2, 52)]
*** center 4: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 11, 0]]
** centroid: 5, normalized-entropy: 0.5643364444932288, [(1, 72), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 60, 0]]
** centroid: 6, normalized-entropy: 0.2761954276479391, [(1, 3), (2, 60)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 53, 19]]
** centroid: 7, normalized-entropy: 0.8325582396745668, [(2, 53), (3, 19)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18492556214146316] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18492556214146316, 0.15850537285942118] ***
*** starting iteration: 2; err: [Inf, 0.18492556214146316, 0.15850537285942118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18492556214146316, 0.15850537285942118, 0.15533931227959694] ***
*** starting iteration: 3; err: [Inf, 0.18492556214146316, 0.15850537285942118, 0.15533931227959694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18492556214146316, 0.15850537285942118, 0.15533931227959694, 0.15424658935237676] ***
*** starting iteration: 4; err: [Inf, 0.18492556214146316, 0.15850537285942118, 0.15533931227959694, 0.15424658935237676] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18492556214146316, 0.15850537285942118, 0.15533931227959694, 0.15424658935237676, 0.15376784226670862] ***
*** finished computation of 7 references, err: [Inf, 0.18492556214146316, 0.15850537285942118, 0.15533931227959694, 0.15424658935237676, 0.15376784226670862] ***
*** center 1: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [27, 61, 0]]
** centroid: 2, normalized-entropy: 0.8894663896628687, [(1, 27), (2, 61)]
*** center 3: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 28, 0]]
** centroid: 4, normalized-entropy: 0.9222596474738021, [(1, 55), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 8, 0]]
** centroid: 5, normalized-entropy: 0.4941829348497886, [(1, 66), (2, 8)]
*** center 6: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 82, 11]]
** centroid: 7, normalized-entropy: 0.5243952392403632, [(2, 82), (3, 11)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18784571276046336] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18784571276046336, 0.1648380686622113] ***
*** starting iteration: 2; err: [Inf, 0.18784571276046336, 0.1648380686622113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18784571276046336, 0.1648380686622113, 0.15731419964507223] ***
*** starting iteration: 3; err: [Inf, 0.18784571276046336, 0.1648380686622113, 0.15731419964507223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18784571276046336, 0.1648380686622113, 0.15731419964507223, 0.15330252910032868] ***
*** starting iteration: 4; err: [Inf, 0.18784571276046336, 0.1648380686622113, 0.15731419964507223, 0.15330252910032868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18784571276046336, 0.1648380686622113, 0.15731419964507223, 0.15330252910032868, 0.15047131658438592] ***
*** starting iteration: 5; err: [Inf, 0.18784571276046336, 0.1648380686622113, 0.15731419964507223, 0.15330252910032868, 0.15047131658438592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18784571276046336, 0.1648380686622113, 0.15731419964507223, 0.15330252910032868, 0.15047131658438592, 0.14916681506764143] ***
*** starting iteration: 6; err: [Inf, 0.18784571276046336, 0.1648380686622113, 0.15731419964507223, 0.15330252910032868, 0.15047131658438592, 0.14916681506764143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18784571276046336, 0.1648380686622113, 0.15731419964507223, 0.15330252910032868, 0.15047131658438592, 0.14916681506764143, 0.14819920252310112] ***
*** finished computation of 7 references, err: [Inf, 0.18784571276046336, 0.1648380686622113, 0.15731419964507223, 0.15330252910032868, 0.15047131658438592, 0.14916681506764143, 0.14819920252310112] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [10, 54, 0]]
** centroid: 1, normalized-entropy: 0.625262405223423, [(1, 10), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [11, 53, 0]]
** centroid: 2, normalized-entropy: 0.6619760641115651, [(1, 11), (2, 53)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [9, 41, 0]]
** centroid: 3, normalized-entropy: 0.6800770457282798, [(1, 9), (2, 41)]
*** center 4: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 40, 20]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 40), (3, 20)]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2192124076357577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2192124076357577, 0.15970104779489339] ***
*** starting iteration: 2; err: [Inf, 0.2192124076357577, 0.15970104779489339] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2192124076357577, 0.15970104779489339, 0.14860581857524813] ***
*** starting iteration: 3; err: [Inf, 0.2192124076357577, 0.15970104779489339, 0.14860581857524813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2192124076357577, 0.15970104779489339, 0.14860581857524813, 0.1455318311303854] ***
*** starting iteration: 4; err: [Inf, 0.2192124076357577, 0.15970104779489339, 0.14860581857524813, 0.1455318311303854] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2192124076357577, 0.15970104779489339, 0.14860581857524813, 0.1455318311303854, 0.1447736750226468] ***
*** finished computation of 7 references, err: [Inf, 0.2192124076357577, 0.15970104779489339, 0.14860581857524813, 0.1455318311303854, 0.1447736750226468] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 53, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 69, 11]]
** centroid: 2, normalized-entropy: 0.5776539033535634, [(2, 69), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 27, 0]]
** centroid: 3, normalized-entropy: 0.9656361333706099, [(1, 42), (2, 27)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 22, 0]]
** centroid: 4, normalized-entropy: 0.7682814090975241, [(1, 76), (2, 22)]
*** center 5: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [88, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19627985560242087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19627985560242087, 0.1465015129847452] ***
*** starting iteration: 2; err: [Inf, 0.19627985560242087, 0.1465015129847452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19627985560242087, 0.1465015129847452, 0.143828270255588] ***
*** starting iteration: 3; err: [Inf, 0.19627985560242087, 0.1465015129847452, 0.143828270255588] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19627985560242087, 0.1465015129847452, 0.143828270255588, 0.14328505855612456] ***
*** finished computation of 7 references, err: [Inf, 0.19627985560242087, 0.1465015129847452, 0.143828270255588, 0.14328505855612456] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 51, 0]]
** centroid: 1, normalized-entropy: 0.48546076074591343, [(1, 6), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 19, 0]]
** centroid: 2, normalized-entropy: 0.7809756883263416, [(1, 63), (2, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 60, 14]]
** centroid: 6, normalized-entropy: 0.699772221773307, [(2, 60), (3, 14)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [27, 39, 0]]
** centroid: 7, normalized-entropy: 0.976020648236615, [(1, 27), (2, 39)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18703322342410683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18703322342410683, 0.14752946901414543] ***
*** starting iteration: 2; err: [Inf, 0.18703322342410683, 0.14752946901414543] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18703322342410683, 0.14752946901414543, 0.14662045206408947] ***
*** finished computation of 7 references, err: [Inf, 0.18703322342410683, 0.14752946901414543, 0.14662045206408947] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [88, 16, 0]]
** centroid: 1, normalized-entropy: 0.6193821946787638, [(1, 88), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [76, 7, 0]]
** centroid: 2, normalized-entropy: 0.4172806906708316, [(1, 76), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 59, 17]]
** centroid: 3, normalized-entropy: 0.7668379316856329, [(2, 59), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 28, 0]]
** centroid: 5, normalized-entropy: 0.9568886656798214, [(1, 46), (2, 28)]
*** center 6: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 68, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19469254675135017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19469254675135017, 0.1656485952269286] ***
*** starting iteration: 2; err: [Inf, 0.19469254675135017, 0.1656485952269286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19469254675135017, 0.1656485952269286, 0.1598819859744981] ***
*** starting iteration: 3; err: [Inf, 0.19469254675135017, 0.1656485952269286, 0.1598819859744981] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19469254675135017, 0.1656485952269286, 0.1598819859744981, 0.15738662438746542] ***
*** starting iteration: 4; err: [Inf, 0.19469254675135017, 0.1656485952269286, 0.1598819859744981, 0.15738662438746542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19469254675135017, 0.1656485952269286, 0.1598819859744981, 0.15738662438746542, 0.1558716889731586] ***
*** starting iteration: 5; err: [Inf, 0.19469254675135017, 0.1656485952269286, 0.1598819859744981, 0.15738662438746542, 0.1558716889731586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19469254675135017, 0.1656485952269286, 0.1598819859744981, 0.15738662438746542, 0.1558716889731586, 0.15454142292076722] ***
*** starting iteration: 6; err: [Inf, 0.19469254675135017, 0.1656485952269286, 0.1598819859744981, 0.15738662438746542, 0.1558716889731586, 0.15454142292076722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19469254675135017, 0.1656485952269286, 0.1598819859744981, 0.15738662438746542, 0.1558716889731586, 0.15454142292076722, 0.15326747267320753] ***
*** starting iteration: 7; err: [Inf, 0.19469254675135017, 0.1656485952269286, 0.1598819859744981, 0.15738662438746542, 0.1558716889731586, 0.15454142292076722, 0.15326747267320753] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19469254675135017, 0.1656485952269286, 0.1598819859744981, 0.15738662438746542, 0.1558716889731586, 0.15454142292076722, 0.15326747267320753, 0.1523388336338103] ***
*** finished computation of 7 references, err: [Inf, 0.19469254675135017, 0.1656485952269286, 0.1598819859744981, 0.15738662438746542, 0.1558716889731586, 0.15454142292076722, 0.15326747267320753, 0.1523388336338103] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [90, 16, 0]]
** centroid: 2, normalized-entropy: 0.612196127490834, [(1, 90), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 66, 4]]
** centroid: 4, normalized-entropy: 0.3159971329784246, [(2, 66), (3, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [37, 21, 0]]
** centroid: 5, normalized-entropy: 0.9443871950133461, [(1, 37), (2, 21)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [43, 29, 0]]
** centroid: 6, normalized-entropy: 0.9725523165688429, [(1, 43), (2, 29)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 48, 11]]
** centroid: 7, normalized-entropy: 0.693965967334286, [(2, 48), (3, 11)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17982124707777986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17982124707777986, 0.1571471366698388] ***
*** starting iteration: 2; err: [Inf, 0.17982124707777986, 0.1571471366698388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17982124707777986, 0.1571471366698388, 0.14871631958149373] ***
*** starting iteration: 3; err: [Inf, 0.17982124707777986, 0.1571471366698388, 0.14871631958149373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17982124707777986, 0.1571471366698388, 0.14871631958149373, 0.14492123056016862] ***
*** starting iteration: 4; err: [Inf, 0.17982124707777986, 0.1571471366698388, 0.14871631958149373, 0.14492123056016862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17982124707777986, 0.1571471366698388, 0.14871631958149373, 0.14492123056016862, 0.1427648196220398] ***
*** starting iteration: 5; err: [Inf, 0.17982124707777986, 0.1571471366698388, 0.14871631958149373, 0.14492123056016862, 0.1427648196220398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17982124707777986, 0.1571471366698388, 0.14871631958149373, 0.14492123056016862, 0.1427648196220398, 0.1423042362947017] ***
*** finished computation of 7 references, err: [Inf, 0.17982124707777986, 0.1571471366698388, 0.14871631958149373, 0.14492123056016862, 0.1427648196220398, 0.1423042362947017] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 50, 0]]
** centroid: 1, normalized-entropy: 0.954434002924965, [(1, 30), (2, 50)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 41, 13]]
** centroid: 2, normalized-entropy: 0.7962699368824384, [(2, 41), (3, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 16, 0]]
** centroid: 5, normalized-entropy: 0.8431619569518377, [(1, 43), (2, 16)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 45, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [84, 17, 0]]
** centroid: 7, normalized-entropy: 0.653839880626333, [(1, 84), (2, 17)]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 353,3 => 32,1 => 615), Dict(2 => 370,3 => 33,1 => 597))
[ Info: ===== scores for single classifier: {"micro_f1":0.949,"precision":0.949,"recall":0.949,"macro_recall":0.9193089389069288,"macro_f1":0.908232699205901,"accuracy":0.949,"class_f1":{"2":0.9280677009873061,"3":0.8285714285714285,"1":0.9680589680589681},"class_precision":{"2":0.9705014749262537,"3":0.7837837837837838,"1":0.9471153846153846},"class_recall":{"2":0.8891891891891892,"3":0.8787878787878788,"1":0.9899497487437185}}
[ Info: ===== scores for 1: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9672627401270617,"macro_f1":0.9230796268078786,"accuracy":0.961,"class_f1":{"2":0.9454545454545454,"3":0.846153846153846,"1":0.9776304888152444},"class_precision":{"2":0.9797101449275363,"3":0.7333333333333333,"1":0.9672131147540983},"class_recall":{"2":0.9135135135135135,"3":1.0,"1":0.9882747068676717}}
[ Info: ===== scores for 5: {"micro_f1":0.964,"precision":0.964,"recall":0.964,"macro_recall":0.9720207644830761,"macro_f1":0.9435224285981315,"accuracy":0.964,"class_f1":{"2":0.9506849315068493,"3":0.9041095890410958,"1":0.9757727652464495},"class_precision":{"2":0.9638888888888889,"3":0.825,"1":0.9733333333333334},"class_recall":{"2":0.9378378378378378,"3":1.0,"1":0.9782244556113903}}
[ Info: ===== scores for 7: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9736067726017475,"macro_f1":0.9443335361787139,"accuracy":0.965,"class_f1":{"2":0.9523809523809523,"3":0.9041095890410958,"1":0.9765100671140938},"class_precision":{"2":0.958904109589041,"3":0.825,"1":0.9781512605042016},"class_recall":{"2":0.9459459459459459,"3":1.0,"1":0.9748743718592965}}
[ Info: ===== scores for 9: {"micro_f1":0.964,"precision":0.964,"recall":0.964,"macro_recall":0.9723633180919613,"macro_f1":0.9360625506712655,"accuracy":0.964,"class_f1":{"2":0.9508196721311475,"3":0.88,"1":0.9773679798826488},"class_precision":{"2":0.9613259668508287,"3":0.7857142857142857,"1":0.9781879194630873},"class_recall":{"2":0.9405405405405406,"3":1.0,"1":0.9765494137353434}}
[ Info: ===== scores for 11: {"micro_f1":0.964,"precision":0.964,"recall":0.964,"macro_recall":0.973390978918617,"macro_f1":0.925701029359566,"accuracy":0.964,"class_f1":{"2":0.951219512195122,"3":0.846153846153846,"1":0.9797297297297297},"class_precision":{"2":0.9538043478260869,"3":0.7333333333333333,"1":0.9880749574105622},"class_recall":{"2":0.9486486486486486,"3":1.0,"1":0.9715242881072027}}
(score = 0.962, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.962, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.957, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.957, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.959, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.959, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.964, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.964, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.967,"k":7,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9655233579856696,"macro_f1":0.9372267137985101,"accuracy":0.967,"class_f1":{"2":0.9551020408163265,"3":0.8767123287671234,"1":0.9798657718120805},"class_precision":{"2":0.9616438356164384,"3":0.8,"1":0.9815126050420168},"class_recall":{"2":0.9486486486486486,"3":0.9696969696969697,"1":0.9782244556113903}}
Test Summary: | Pass  Total
AKNC          |    8      8
[553, 1, 2, 3, 3, 6, 5, 1, 15, 2, 3, 30, 3, 3, 1, 9, 8, 4, 5, 4, 12, 1, 7, 9, 5, 9, 10, 6, 13, 3, 3, 4, 15, 14, 2, 8, 8, 3, 11, 11, 28, 15, 5, 4, 32, 9, 10, 15, 20, 13, 5, 12, 18, 9, 8, 9, 4, 42, 5, 21, 21, 32, 266, 3, 1, 11, 12, 19, 1, 13, 20, 1, 17, 4, 13, 5, 9, 13, 299, 14, 30, 22, 3, 5, 16, 12, 6, 7, 1, 32, 1, 11, 27, 8, 43, 22, 15, 30, 8, 3, 94, 24, 30, 49, 3, 1, 11, 3, 13, 101, 8, 46, 37, 21, 74, 3, 13, 65, 9, 289, 10, 39, 25, 26, 11, 8, 3, 35, 15, 108, 10, 818, 66, 44, 7, 13, 9, 28, 46, 29, 6, 7, 8, 10, 13, 20, 8, 17, 109, 82, 7, 21, 10, 2, 2, 74, 91, 10, 29, 16, 21, 213, 21, 8, 33, 16, 104, 2, 52, 10, 44, 10, 41, 10, 3, 44, 54, 2, 18, 24, 29, 21, 1, 4, 23, 6, 8, 84, 3, 9, 55, 23, 18, 85, 7, 30, 41, 64, 41, 28, 5, 13, 11, 9, 12, 22, 14, 7, 3, 14, 37, 10, 27, 31, 5, 33, 156, 10, 11, 4, 77, 5, 6, 79, 7, 11, 17, 159, 84, 50, 58, 126, 38, 4, 66, 11, 6, 12, 34, 104, 7, 8, 17, 10, 3, 15, 11, 7, 23, 11, 33, 16, 2, 197, 14, 7, 5, 52, 17, 5, 6, 28, 43, 53, 104, 82, 19, 49, 31, 1, 4, 22, 10, 1, 28, 18, 10, 43, 107, 39, 36, 6, 12, 302, 14, 87, 32, 50, 135, 15, 41, 3, 45, 20, 16, 10, 9, 286, 48, 16]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6409999999999999, speedup = 0.3127893135828594, eval_ratio = 0.070069)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3885013640873017,"recall":0.381076388888889,"f1":null,"seconds":0.00014624372124671936,"exhaustive_search_seconds":0.00036010146141052246,"evaluations":458.9140625,"distances_sum":1802.4857193626356}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5324435763888888,"recall":0.5321180555555555,"f1":null,"seconds":0.00025589391589164734,"exhaustive_search_seconds":0.00036010146141052246,"evaluations":601.9765625,"distances_sum":1704.5093763739633}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6440972222222221,"recall":0.6440972222222221,"f1":null,"seconds":0.000354500487446785,"exhaustive_search_seconds":0.00036010146141052246,"evaluations":726.9609375,"distances_sum":1639.0707427663854}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7291666666666663,"recall":0.7291666666666663,"f1":0.7291666666666663,"seconds":0.0004300381988286972,"exhaustive_search_seconds":0.00036010146141052246,"evaluations":836.0,"distances_sum":1607.9364164902966}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7812499999999993,"recall":0.7812499999999993,"f1":0.7812499999999993,"seconds":0.0006523951888084412,"exhaustive_search_seconds":0.00036010146141052246,"evaluations":945.140625,"distances_sum":1592.449306336225}
KCenters.DeloneInvIndex> reached performance {"precision":0.8298611111111102,"recall":0.8298611111111102,"f1":0.8298611111111102,"seconds":0.0005627758800983429,"exhaustive_search_seconds":0.00036010146141052246,"evaluations":1039.0078125,"distances_sum":1577.9186540194728}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8059999999999999, speedup = 0.6231063101040706, eval_ratio = 0.10571400000000002)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
