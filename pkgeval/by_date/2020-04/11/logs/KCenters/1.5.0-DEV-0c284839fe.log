Julia Version 1.5.0-DEV.613
Commit 0c284839fe (2020-04-11 01:16 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed MappedArrays ──────────────── v0.2.2
  Installed TableTraits ───────────────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.1
  Installed DataStructures ────────────── v0.17.11
  Installed SimilaritySearch ──────────── v0.3.19
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed Missings ──────────────────── v0.4.3
  Installed Reexport ──────────────────── v0.2.0
  Installed MLDataPattern ─────────────── v0.5.1
  Installed MLDataUtils ───────────────── v0.5.1
  Installed JSON ──────────────────────── v0.21.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed InvertedIndices ───────────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed DataFrames ────────────────── v0.20.2
  Installed Compat ────────────────────── v3.8.0
  Installed Tables ────────────────────── v1.0.3
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.11
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.1
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_W0EUix/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_W0EUix/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.11
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.1
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9364293802777927
[ Info: 0.8302954188982645
[ Info: 0.5567020623385907
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3295412704100211
mean(cdnet.distances) = 0.34887814280887447
mean(crand.distances) = 0.33021817353864513
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7872070637695646,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":7.640625,"distances_sum":2084.747611971835}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.544921875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.544921875,"f1":0.6848878552003557,"seconds":4.855915904045105e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":6.890625,"distances_sum":1669.6520404184846}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2255859375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2255859375,"f1":null,"seconds":4.04752790927887e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":6.3359375,"distances_sum":709.6382922055584}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6669921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6669921875,"f1":0.7872070637695646,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":7.640625,"distances_sum":2084.747611971835}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6962890625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6962890625,"f1":0.8143205752580759,"seconds":5.239620804786682e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":7.734375,"distances_sum":2160.8948235719695}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6962890625,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6962890625,"f1":0.8143205752580759,"seconds":5.239620804786682e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":7.734375,"distances_sum":2160.8948235719695}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8471044580419588,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.2734375,"distances_sum":2416.1625799873173}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9059669497169504,"seconds":6.42240047454834e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.46875,"distances_sum":2866.6780705117517}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.83984375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.83984375,"f1":0.9059669497169504,"seconds":6.42240047454834e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.46875,"distances_sum":2866.6780705117517}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.83984375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.83984375,"f1":0.9059669497169504,"seconds":6.42240047454834e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.46875,"distances_sum":2866.6780705117517}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4306640625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4306640625,"f1":null,"seconds":7.448717951774597e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":6.9296875,"distances_sum":1192.798157742017}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4306640625,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.4306640625,"f1":null,"seconds":7.448717951774597e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":6.9296875,"distances_sum":1192.798157742017}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.697265625, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.697265625,"f1":0.8094254703629712,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.171875,"distances_sum":2079.1417950791865}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8608755827505835,"seconds":5.563721060752869e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.546875,"distances_sum":2365.006326395367}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7685546875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7685546875,"f1":0.8608755827505835,"seconds":5.563721060752869e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.546875,"distances_sum":2365.006326395367}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9658482142857149,"seconds":1.0678544640541077e-5,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.90625,"distances_sum":3218.0276855719812}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9628033424908429,"seconds":5.956739187240601e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.9140625,"distances_sum":3169.9255557344127}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9562385531135537,"seconds":6.7818909883499146e-6,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.8671875,"distances_sum":3117.4361510487633}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9658482142857149,"seconds":1.0678544640541077e-5,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.90625,"distances_sum":3218.0276855719812}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9658482142857149,"seconds":1.0678544640541077e-5,"exhaustive_search_seconds":1.7657876014709473e-6,"evaluations":8.90625,"distances_sum":3218.0276855719812}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6953125,"f1":0.8110644563769572,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.4765625,"distances_sum":1970.5077140682881}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.23828125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.23828125,"f1":null,"seconds":4.218891263008118e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":6.1171875,"distances_sum":687.0070204125462}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.248046875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.248046875,"f1":null,"seconds":3.956258296966553e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":6.2109375,"distances_sum":683.9390618750137}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6953125,"f1":0.8110644563769572,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.4765625,"distances_sum":1970.5077140682881}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9519974816849824,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.703125,"distances_sum":3064.6839299539156}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9519974816849824,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.703125,"distances_sum":3064.6839299539156}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9784798534798539,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9375,"distances_sum":3223.018909138717}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9736435439560442,"seconds":1.1673197150230408e-5,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9140625,"distances_sum":3177.1840033151666}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9784798534798539,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9375,"distances_sum":3223.018909138717}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9784798534798539,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9375,"distances_sum":3223.018909138717}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.850507305194806,"seconds":5.3532421588897705e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.9609375,"distances_sum":2261.1733714985817}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.847826132201133,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.828125,"distances_sum":2256.890381062951}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75390625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.75390625,"f1":0.850507305194806,"seconds":5.3532421588897705e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.9609375,"distances_sum":2261.1733714985817}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9321714743589751,"seconds":6.260350346565247e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.4453125,"distances_sum":2871.0573387481913}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.9321714743589751,"seconds":6.260350346565247e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.4453125,"distances_sum":2871.0573387481913}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9428488178488184,"seconds":6.571412086486816e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6328125,"distances_sum":3000.120301750318}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9362065018315026,"seconds":6.649643182754517e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.5,"distances_sum":2923.9286526596966}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9475217490842496,"seconds":6.5583735704422e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6640625,"distances_sum":3005.624648243485}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.971039377289378,"seconds":6.666406989097595e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8671875,"distances_sum":3175.1372852175405}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.971039377289378,"seconds":6.666406989097595e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8671875,"distances_sum":3175.1372852175405}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.971039377289378,"seconds":6.666406989097595e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8671875,"distances_sum":3175.1372852175405}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5810546875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5810546875,"f1":0.7172898282273289,"seconds":5.064532160758972e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":6.8203125,"distances_sum":1564.5173166032173}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8516259781884791,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.1484375,"distances_sum":2209.0736708295663}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.197265625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.197265625,"f1":null,"seconds":3.846362233161926e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":5.8125,"distances_sum":505.07260452468904}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.541015625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.541015625,"f1":null,"seconds":4.7888606786727905e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":6.8359375,"distances_sum":1419.3450768770974}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.75390625,"f1":0.8516259781884791,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.1484375,"distances_sum":2209.0736708295663}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8987871503496512,"seconds":6.338581442832947e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.15625,"distances_sum":2490.8229350789484}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9557749542124547,"seconds":6.599351763725281e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.765625,"distances_sum":3002.7209878935423}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9598474442224447,"seconds":6.580725312232971e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.7890625,"distances_sum":3043.0144284204443}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9419700091575097,"seconds":6.498768925666809e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.5390625,"distances_sum":2853.9184990533804}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.901614010989012,"seconds":6.409361958503723e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.265625,"distances_sum":2479.214607980572}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9374172702297711,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.4765625,"distances_sum":2791.1163043607917}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9598474442224447,"seconds":6.580725312232971e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.7890625,"distances_sum":3043.0144284204443}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9737751831501835,"seconds":7.061287760734558e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.8828125,"distances_sum":3142.316569511403}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9687328296703299,"seconds":6.83218240737915e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.8515625,"distances_sum":3085.4565894493758}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9763965201465205,"seconds":7.59027898311615e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.9140625,"distances_sum":3150.429514425203}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9763965201465205,"seconds":7.59027898311615e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.9140625,"distances_sum":3150.429514425203}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9763965201465205,"seconds":7.59027898311615e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.9140625,"distances_sum":3150.429514425203}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8501290376290385,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.125,"distances_sum":2345.620455386945}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.75,"f1":0.8501290376290385,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.125,"distances_sum":2345.620455386945}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9522951007326013,"seconds":6.6962093114852905e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.8359375,"distances_sum":3075.037245852249}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9522951007326013,"seconds":6.6962093114852905e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.8359375,"distances_sum":3075.037245852249}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.953582875457876,"seconds":1.1526048183441162e-5,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.8125,"distances_sum":3064.4657271072188}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9684008699633704,"seconds":7.290393114089966e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.8828125,"distances_sum":3199.7579489052887}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9587282509157515,"seconds":7.97957181930542e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.8203125,"distances_sum":3124.123131074502}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9684008699633704,"seconds":7.290393114089966e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.8828125,"distances_sum":3199.7579489052887}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9684008699633704,"seconds":7.290393114089966e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.8828125,"distances_sum":3199.7579489052887}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1962890625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1962890625,"f1":null,"seconds":3.732740879058838e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":4.84375,"distances_sum":544.2386611918766}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1962890625,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.1962890625,"f1":null,"seconds":3.732740879058838e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":4.84375,"distances_sum":544.2386611918766}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1962890625,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.1962890625,"f1":null,"seconds":3.732740879058838e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":4.84375,"distances_sum":544.2386611918766}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6396484375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6396484375,"f1":0.7663839632589641,"seconds":9.441748261451721e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":6.8828125,"distances_sum":1508.458160990543}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7099609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7099609375,"f1":0.8236128454878464,"seconds":9.391456842422485e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.546875,"distances_sum":1719.7307395359226}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7099609375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7099609375,"f1":0.8236128454878464,"seconds":9.391456842422485e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.546875,"distances_sum":1719.7307395359226}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9301625457875464,"seconds":6.087124347686768e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.640625,"distances_sum":2439.353401509665}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.728515625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.728515625,"f1":0.8356690184815194,"seconds":7.797032594680786e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.640625,"distances_sum":1798.6452510178735}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.71484375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.71484375,"f1":0.8231175074925083,"seconds":5.7462602853775024e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.546875,"distances_sum":1758.6823922335261}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7373046875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7373046875,"f1":0.8395640817515825,"seconds":1.2988224625587463e-5,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.671875,"distances_sum":1868.2414738425787}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87890625,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.87890625,"f1":0.9301625457875464,"seconds":6.087124347686768e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.640625,"distances_sum":2439.353401509665}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9737751831501835,"seconds":7.035210728645325e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9375,"distances_sum":2749.6097108906815}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9697573260073263,"seconds":7.968395948410034e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9296875,"distances_sum":2720.3389548059117}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9684008699633704,"seconds":7.00727105140686e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.90625,"distances_sum":2739.9879603510444}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9539320054945059,"seconds":1.996941864490509e-5,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8515625,"distances_sum":2618.81984651933}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9534111721611725,"seconds":6.487593054771423e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.7890625,"distances_sum":2612.7341247498125}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9538804945054951,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8828125,"distances_sum":2607.4623919197215}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9737751831501835,"seconds":7.035210728645325e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9375,"distances_sum":2749.6097108906815}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9737751831501835,"seconds":7.035210728645325e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9375,"distances_sum":2749.6097108906815}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2041015625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2041015625,"f1":null,"seconds":2.8889626264572144e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":5.046875,"distances_sum":573.2329504248081}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5390625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5390625,"f1":0.6843659812409817,"seconds":3.9227306842803955e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":7.0078125,"distances_sum":1319.2332902071605}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5390625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5390625,"f1":0.6843659812409817,"seconds":3.9227306842803955e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":7.0078125,"distances_sum":1319.2332902071605}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.595703125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.595703125,"f1":0.7301479770229776,"seconds":4.170462489128113e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":7.4609375,"distances_sum":1510.918989973429}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.595703125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.595703125,"f1":0.7301479770229776,"seconds":4.170462489128113e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":7.4609375,"distances_sum":1510.918989973429}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9363724816849822,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.8515625,"distances_sum":2622.784343566412}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9375660797535803,"seconds":5.928799510002136e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.8125,"distances_sum":2649.2237699959137}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9051516192141201,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.875,"distances_sum":2342.0475893449066}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.740234375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.740234375,"f1":0.8387060855810863,"seconds":5.284324288368225e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.265625,"distances_sum":2001.688815190214}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9375660797535803,"seconds":5.928799510002136e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.8125,"distances_sum":2649.2237699959137}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8935546875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9375660797535803,"seconds":5.928799510002136e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.8125,"distances_sum":2649.2237699959137}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8704784798534807,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.703125,"distances_sum":2207.2337781132796}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.654296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.654296875,"f1":0.7803795163170171,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.9140625,"distances_sum":1799.5166571920213}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7802734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8704784798534807,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.703125,"distances_sum":2207.2337781132796}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7802734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8704784798534807,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.703125,"distances_sum":2207.2337781132796}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7802734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8704784798534807,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.703125,"distances_sum":2207.2337781132796}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3671875,"f1":null,"seconds":3.647059202194214e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":5.5390625,"distances_sum":663.8660224705371}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7197265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7197265625,"f1":0.8275391275391283,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":7.7890625,"distances_sum":1326.4726989087922}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7197265625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7197265625,"f1":0.8275391275391283,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":7.7890625,"distances_sum":1326.4726989087922}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8134765625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8134765625,"f1":0.8900386072261078,"seconds":6.211921572685242e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.2109375,"distances_sum":1579.0867034085306}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.950715430402931,"seconds":6.821006536483765e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.75,"distances_sum":1874.2484188847534}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8932728729603737,"seconds":6.530433893203735e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.2109375,"distances_sum":1604.5204779287026}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8973385989010998,"seconds":6.260350346565247e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.2265625,"distances_sum":1599.443184710042}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.950715430402931,"seconds":6.821006536483765e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.75,"distances_sum":1874.2484188847534}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9752060439560442,"seconds":7.16187059879303e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.8984375,"distances_sum":2022.0566358232693}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9590659340659347,"seconds":7.033348083496094e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.8125,"distances_sum":1917.6548621025593}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9638793498168504,"seconds":1.1529773473739624e-5,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.8671875,"distances_sum":1949.4330227276032}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9752060439560442,"seconds":7.16187059879303e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.8984375,"distances_sum":2022.0566358232693}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9752060439560442,"seconds":7.16187059879303e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.8984375,"distances_sum":2022.0566358232693}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8514292998668006,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.921875,"distances_sum":1433.2459777678312}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.8006363428238437,"seconds":5.243346095085144e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.2421875,"distances_sum":1246.0820652657878}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.689453125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.689453125,"f1":0.8055730727605737,"seconds":7.871538400650024e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.34375,"distances_sum":1296.2603331859211}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7568359375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7568359375,"f1":0.8514292998668006,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.921875,"distances_sum":1433.2459777678312}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9040750915750924,"seconds":6.182119250297546e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.40625,"distances_sum":1666.6931652814612}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9598672161172166,"seconds":8.65943729877472e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8125,"distances_sum":1957.1074251707626}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.898234577922079,"seconds":6.994232535362244e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.2890625,"distances_sum":1617.033764195039}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9074951090576099,"seconds":8.285045623779297e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.3984375,"distances_sum":1660.018508992059}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9598672161172166,"seconds":8.65943729877472e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8125,"distances_sum":1957.1074251707626}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9726762820512824,"seconds":8.8568776845932e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.96875,"distances_sum":2019.3481735544608}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9629922161172164,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8203125,"distances_sum":1982.8287139543033}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9646233974358978,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8671875,"distances_sum":1967.6140584114833}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9726762820512824,"seconds":8.8568776845932e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.96875,"distances_sum":2019.3481735544608}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9726762820512824,"seconds":8.8568776845932e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.96875,"distances_sum":2019.3481735544608}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2255859375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2255859375,"f1":null,"seconds":3.643333911895752e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":5.0,"distances_sum":441.7654508888797}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.53125,"f1":0.6671319999445003,"seconds":4.71062958240509e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":6.953125,"distances_sum":979.9473826430672}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.53125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.53125,"f1":0.6671319999445003,"seconds":4.71062958240509e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":6.953125,"distances_sum":979.9473826430672}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8647987429237437,"seconds":5.9157609939575195e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.1328125,"distances_sum":1530.9739487707157}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8895623473748481,"seconds":6.210058927536011e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.2421875,"distances_sum":1619.8957190694346}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8047348484848494,"seconds":4.820525646209717e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":7.734375,"distances_sum":1280.2591881652654}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.533203125, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.533203125,"f1":null,"seconds":4.770234227180481e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":7.0078125,"distances_sum":974.1060568806275}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8154296875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8154296875,"f1":0.8895623473748481,"seconds":6.210058927536011e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.2421875,"distances_sum":1619.8957190694346}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9502346611721617,"seconds":6.759539246559143e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.7109375,"distances_sum":1947.9886803226073}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9571657509157512,"seconds":6.560236215591431e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.78125,"distances_sum":1984.7340015020832}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9626316391941396,"seconds":6.647780537605286e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.796875,"distances_sum":1998.5718905143929}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.942553800366301,"seconds":6.681308150291443e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.6875,"distances_sum":1910.833284149789}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9310554029304036,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.546875,"distances_sum":1857.305928140783}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9436412545787554,"seconds":1.4087185263633728e-5,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.765625,"distances_sum":1904.2597928036146}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9626316391941396,"seconds":6.647780537605286e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.796875,"distances_sum":1998.5718905143929}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9626316391941396,"seconds":6.647780537605286e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.796875,"distances_sum":1998.5718905143929}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7119140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7119140625,"f1":0.8202105186480195,"seconds":4.783272743225098e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.1171875,"distances_sum":1450.8647301257397}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.52734375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.52734375,"f1":0.6750463078588084,"seconds":4.149973392486572e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.9921875,"distances_sum":1041.2698407427772}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.375,"f1":null,"seconds":3.555789589881897e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":5.65625,"distances_sum":746.8712349189161}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7119140625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.7119140625,"f1":0.8202105186480195,"seconds":4.783272743225098e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.1171875,"distances_sum":1450.8647301257397}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9152904387279394,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.578125,"distances_sum":1896.3383666752168}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9026671245421256,"seconds":5.304813385009766e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.4453125,"distances_sum":1804.095826398023}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9158253205128213,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.625,"distances_sum":1836.4010517217353}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.857421875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.857421875,"f1":0.9152904387279394,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.578125,"distances_sum":1896.3383666752168}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9648294413919417,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.890625,"distances_sum":2156.237959505886}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9789835164835167,"seconds":6.103888154029846e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.96875,"distances_sum":2229.385606641012}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9679143772893777,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.90625,"distances_sum":2152.6027557535867}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9789835164835167,"seconds":6.103888154029846e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.96875,"distances_sum":2229.385606641012}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9789835164835167,"seconds":6.103888154029846e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.96875,"distances_sum":2229.385606641012}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2724609375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2724609375,"f1":null,"seconds":3.4812837839126587e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":6.140625,"distances_sum":588.671209037234}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2724609375,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.2724609375,"f1":null,"seconds":3.4812837839126587e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":6.140625,"distances_sum":588.671209037234}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6943359375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6943359375,"f1":0.8092215076590084,"seconds":4.995614290237427e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.671875,"distances_sum":1474.3360345476926}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6943359375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6943359375,"f1":0.8092215076590084,"seconds":4.995614290237427e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.671875,"distances_sum":1474.3360345476926}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.728515625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.728515625,"f1":0.8322316572316583,"seconds":5.234032869338989e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.2109375,"distances_sum":1547.332778790593}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9049996878121889,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.6796875,"distances_sum":1868.492686306746}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8359375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8359375,"f1":0.9049996878121889,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.6796875,"distances_sum":1868.492686306746}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8359375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8359375,"f1":0.9049996878121889,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.6796875,"distances_sum":1868.492686306746}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6083984375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.6083984375,"f1":0.7409510628260635,"seconds":4.524365067481995e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":7.296875,"distances_sum":1197.6523798022747}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6083984375,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.6083984375,"f1":0.7409510628260635,"seconds":4.524365067481995e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":7.296875,"distances_sum":1197.6523798022747}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6474609375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6474609375,"f1":0.7751325063825071,"seconds":5.068257451057434e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":7.5078125,"distances_sum":1251.4629126127838}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6474609375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6474609375,"f1":0.7751325063825071,"seconds":5.068257451057434e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":7.5078125,"distances_sum":1251.4629126127838}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.8436084748584758,"seconds":5.239620804786682e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.09375,"distances_sum":1491.6537398081105}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9586939102564107,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.8515625,"distances_sum":2063.0436077080667}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9381925366300371,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.6953125,"distances_sum":1944.6988263848505}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9586939102564107,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.8515625,"distances_sum":2063.0436077080667}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.927734375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9586939102564107,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.8515625,"distances_sum":2063.0436077080667}}, n: 9
mean(cfft.distances) = 0.33886322336633584
mean(cdnet.distances) = 0.4700438912822554
mean(crand.distances) = 0.35801249034062793
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8555555555555555
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9133333333333332
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8911111111111111
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9133333333333334
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9022222222222221
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9488888888888889
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8733333333333334
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9466666666666667
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9244444444444445
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9133333333333334
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9177777777777777
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9288888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8866666666666667
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8666666666666666
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.888888888888889
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8777777777777778
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9444444444444443
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8755555555555556
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8888888888888888
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8755555555555555
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9133333333333332
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9022222222222224
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9177777777777777
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8533333333333334
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.96
*** finished computation of 12 references, err: [Inf, 0.5442572029431662] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 12, 1]]
** centroid: 5, normalized-entropy: 0.3912435636292556, [(2, 12), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 30, 1]]
** centroid: 7, normalized-entropy: 0.2055925081850832, [(2, 30), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 10: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 11, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 12: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
finished with 13 centroids; started with 12
acc = 0.96
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.1854906838538276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1854906838538276, 0.16423225259218174] ***
*** starting iteration: 2; err: [Inf, 0.1854906838538276, 0.16423225259218174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1854906838538276, 0.16423225259218174, 0.15404813326951172] ***
*** starting iteration: 3; err: [Inf, 0.1854906838538276, 0.16423225259218174, 0.15404813326951172] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1854906838538276, 0.16423225259218174, 0.15404813326951172, 0.1492786160415016] ***
*** starting iteration: 4; err: [Inf, 0.1854906838538276, 0.16423225259218174, 0.15404813326951172, 0.1492786160415016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1854906838538276, 0.16423225259218174, 0.15404813326951172, 0.1492786160415016, 0.14734974282852434] ***
*** starting iteration: 5; err: [Inf, 0.1854906838538276, 0.16423225259218174, 0.15404813326951172, 0.1492786160415016, 0.14734974282852434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1854906838538276, 0.16423225259218174, 0.15404813326951172, 0.1492786160415016, 0.14734974282852434, 0.1462663262089653] ***
*** starting iteration: 6; err: [Inf, 0.1854906838538276, 0.16423225259218174, 0.15404813326951172, 0.1492786160415016, 0.14734974282852434, 0.1462663262089653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1854906838538276, 0.16423225259218174, 0.15404813326951172, 0.1492786160415016, 0.14734974282852434, 0.1462663262089653, 0.14577077338527944] ***
*** finished computation of 7 references, err: [Inf, 0.1854906838538276, 0.16423225259218174, 0.15404813326951172, 0.1492786160415016, 0.14734974282852434, 0.1462663262089653, 0.14577077338527944] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 58, 19]]
** centroid: 1, normalized-entropy: 0.8060914696192223, [(2, 58), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [32, 67, 0]]
** centroid: 3, normalized-entropy: 0.9078619154263698, [(1, 32), (2, 67)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 32, 0]]
** centroid: 4, normalized-entropy: 0.9355315642388212, [(1, 59), (2, 32)]
*** center 5: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 78, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [87, 15, 0]]
** centroid: 7, normalized-entropy: 0.6024308020404452, [(1, 87), (2, 15)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17594715707964714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17594715707964714, 0.1523846098650498] ***
*** starting iteration: 2; err: [Inf, 0.17594715707964714, 0.1523846098650498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17594715707964714, 0.1523846098650498, 0.1489035065063852] ***
*** starting iteration: 3; err: [Inf, 0.17594715707964714, 0.1523846098650498, 0.1489035065063852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17594715707964714, 0.1523846098650498, 0.1489035065063852, 0.14773870674080622] ***
*** starting iteration: 4; err: [Inf, 0.17594715707964714, 0.1523846098650498, 0.1489035065063852, 0.14773870674080622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17594715707964714, 0.1523846098650498, 0.1489035065063852, 0.14773870674080622, 0.14722819267765155] ***
*** finished computation of 7 references, err: [Inf, 0.17594715707964714, 0.1523846098650498, 0.1489035065063852, 0.14773870674080622, 0.14722819267765155] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 72, 0]]
** centroid: 1, normalized-entropy: 0.8739810481273581, [(1, 30), (2, 72)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 57, 22]]
** centroid: 2, normalized-entropy: 0.8533728188427888, [(2, 57), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [93, 15, 0]]
** centroid: 3, normalized-entropy: 0.581321498763703, [(1, 93), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 14, 0]]
** centroid: 4, normalized-entropy: 0.710676853856123, [(1, 58), (2, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 95, 0]]
** centroid: 5, normalized-entropy: 0.3607805650514635, [(1, 7), (2, 95)]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19763359198600858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19763359198600858, 0.15685430092170186] ***
*** starting iteration: 2; err: [Inf, 0.19763359198600858, 0.15685430092170186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19763359198600858, 0.15685430092170186, 0.15300739150860163] ***
*** starting iteration: 3; err: [Inf, 0.19763359198600858, 0.15685430092170186, 0.15300739150860163] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19763359198600858, 0.15685430092170186, 0.15300739150860163, 0.15142499285713787] ***
*** starting iteration: 4; err: [Inf, 0.19763359198600858, 0.15685430092170186, 0.15300739150860163, 0.15142499285713787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19763359198600858, 0.15685430092170186, 0.15300739150860163, 0.15142499285713787, 0.15008740947579036] ***
*** starting iteration: 5; err: [Inf, 0.19763359198600858, 0.15685430092170186, 0.15300739150860163, 0.15142499285713787, 0.15008740947579036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19763359198600858, 0.15685430092170186, 0.15300739150860163, 0.15142499285713787, 0.15008740947579036, 0.14904518387625287] ***
*** starting iteration: 6; err: [Inf, 0.19763359198600858, 0.15685430092170186, 0.15300739150860163, 0.15142499285713787, 0.15008740947579036, 0.14904518387625287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19763359198600858, 0.15685430092170186, 0.15300739150860163, 0.15142499285713787, 0.15008740947579036, 0.14904518387625287, 0.14846025479223016] ***
*** finished computation of 7 references, err: [Inf, 0.19763359198600858, 0.15685430092170186, 0.15300739150860163, 0.15142499285713787, 0.15008740947579036, 0.14904518387625287, 0.14846025479223016] ***
*** center 1: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [106, 44, 0]]
** centroid: 2, normalized-entropy: 0.8729882944709463, [(1, 106), (2, 44)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 36, 0]]
** centroid: 3, normalized-entropy: 0.9572951876544017, [(1, 59), (2, 36)]
*** center 4: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 83, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [71, 14, 0]]
** centroid: 6, normalized-entropy: 0.6454495903301855, [(1, 71), (2, 14)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 70, 23]]
** centroid: 7, normalized-entropy: 0.8069896049203007, [(2, 70), (3, 23)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29954234019058895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29954234019058895, 0.21222869000749317] ***
*** finished computation of 7 references, err: [Inf, 0.29954234019058895, 0.21222869000749317] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [99, 10, 0]]
** centroid: 1, normalized-entropy: 0.4422615143479816, [(1, 99), (2, 10)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 53, 3]]
** centroid: 2, normalized-entropy: 0.3013786435930858, [(2, 53), (3, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [162, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [44, 15, 0]]
** centroid: 4, normalized-entropy: 0.8179252501386403, [(1, 44), (2, 15)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 30, 16]]
** centroid: 5, normalized-entropy: 0.9321115676166747, [(2, 30), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [92, 82, 0]]
** centroid: 6, normalized-entropy: 0.9976161146077627, [(1, 92), (2, 82)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 60, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23591952873016897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23591952873016897, 0.19386950880079634] ***
*** finished computation of 7 references, err: [Inf, 0.23591952873016897, 0.19386950880079634] ***
*** center 1: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [27, 69, 0]]
** centroid: 2, normalized-entropy: 0.8571484374283717, [(1, 27), (2, 69)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [52, 42, 0]]
** centroid: 3, normalized-entropy: 0.9918207974218425, [(1, 52), (2, 42)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [36, 56, 0]]
** centroid: 4, normalized-entropy: 0.9656361333706099, [(1, 36), (2, 56)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 81, 22]]
** centroid: 5, normalized-entropy: 0.7482932859824888, [(2, 81), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [94, 5, 0]]
** centroid: 6, normalized-entropy: 0.2885385136944103, [(1, 94), (2, 5)]
*** center 7: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.237700035270566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.237700035270566, 0.20542286944260046] ***
*** finished computation of 7 references, err: [Inf, 0.237700035270566, 0.20542286944260046] ***
*** center 1: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [54, 17, 0]]
** centroid: 3, normalized-entropy: 0.7941021417852022, [(1, 54), (2, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 70, 0]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(1, 20), (2, 70)]
*** center 6: selecting labels [1, 2, 3] (freq >= 1) [from [28, 80, 2]]
** centroid: 6, normalized-entropy: 0.5941602176247508, [(1, 28), (2, 80), (3, 2)]
*** center 7: selecting labels [1, 2, 3] (freq >= 1) [from [22, 80, 21]]
** centroid: 7, normalized-entropy: 0.809584823244073, [(1, 22), (2, 80), (3, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.34967510560639314] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34967510560639314, 0.18602317997587245] ***
*** starting iteration: 2; err: [Inf, 0.34967510560639314, 0.18602317997587245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34967510560639314, 0.18602317997587245, 0.1610862009619522] ***
*** starting iteration: 3; err: [Inf, 0.34967510560639314, 0.18602317997587245, 0.1610862009619522] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34967510560639314, 0.18602317997587245, 0.1610862009619522, 0.15453192735840385] ***
*** starting iteration: 4; err: [Inf, 0.34967510560639314, 0.18602317997587245, 0.1610862009619522, 0.15453192735840385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34967510560639314, 0.18602317997587245, 0.1610862009619522, 0.15453192735840385, 0.15225878035280485] ***
*** starting iteration: 5; err: [Inf, 0.34967510560639314, 0.18602317997587245, 0.1610862009619522, 0.15453192735840385, 0.15225878035280485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34967510560639314, 0.18602317997587245, 0.1610862009619522, 0.15453192735840385, 0.15225878035280485, 0.1511257649567146] ***
*** starting iteration: 6; err: [Inf, 0.34967510560639314, 0.18602317997587245, 0.1610862009619522, 0.15453192735840385, 0.15225878035280485, 0.1511257649567146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34967510560639314, 0.18602317997587245, 0.1610862009619522, 0.15453192735840385, 0.15225878035280485, 0.1511257649567146, 0.15028016053296783] ***
*** finished computation of 7 references, err: [Inf, 0.34967510560639314, 0.18602317997587245, 0.1610862009619522, 0.15453192735840385, 0.15225878035280485, 0.1511257649567146, 0.15028016053296783] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 69, 19]]
** centroid: 2, normalized-entropy: 0.7526269564427315, [(2, 69), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [74, 26, 0]]
** centroid: 3, normalized-entropy: 0.8267463724926181, [(1, 74), (2, 26)]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 100, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [99, 24, 0]]
** centroid: 5, normalized-entropy: 0.7120640548905481, [(1, 99), (2, 24)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [86, 2, 0]]
** centroid: 6, normalized-entropy: 0.1564910629057016, [(1, 86), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [47, 29, 0]]
** centroid: 7, normalized-entropy: 0.9591495543968941, [(1, 47), (2, 29)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25512708281899904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25512708281899904, 0.1752818331033036] ***
*** starting iteration: 2; err: [Inf, 0.25512708281899904, 0.1752818331033036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25512708281899904, 0.1752818331033036, 0.15683270652877582] ***
*** starting iteration: 3; err: [Inf, 0.25512708281899904, 0.1752818331033036, 0.15683270652877582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25512708281899904, 0.1752818331033036, 0.15683270652877582, 0.15253282599206985] ***
*** starting iteration: 4; err: [Inf, 0.25512708281899904, 0.1752818331033036, 0.15683270652877582, 0.15253282599206985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25512708281899904, 0.1752818331033036, 0.15683270652877582, 0.15253282599206985, 0.15031129862928855] ***
*** starting iteration: 5; err: [Inf, 0.25512708281899904, 0.1752818331033036, 0.15683270652877582, 0.15253282599206985, 0.15031129862928855] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25512708281899904, 0.1752818331033036, 0.15683270652877582, 0.15253282599206985, 0.15031129862928855, 0.1490690823807765] ***
*** starting iteration: 6; err: [Inf, 0.25512708281899904, 0.1752818331033036, 0.15683270652877582, 0.15253282599206985, 0.15031129862928855, 0.1490690823807765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25512708281899904, 0.1752818331033036, 0.15683270652877582, 0.15253282599206985, 0.15031129862928855, 0.1490690823807765, 0.14851151963882986] ***
*** finished computation of 7 references, err: [Inf, 0.25512708281899904, 0.1752818331033036, 0.15683270652877582, 0.15253282599206985, 0.15031129862928855, 0.1490690823807765, 0.14851151963882986] ***
*** center 1: selecting labels [1] (freq >= 2) [from [98, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [5, 109, 0]]
** centroid: 2, normalized-entropy: 0.2597169275408663, [(1, 5), (2, 109)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [80, 14, 0]]
** centroid: 3, normalized-entropy: 0.607171654871303, [(1, 80), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [110, 11, 0]]
** centroid: 4, normalized-entropy: 0.43949698692151346, [(1, 110), (2, 11)]
*** center 5: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 79, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 39, 22]]
** centroid: 7, normalized-entropy: 0.9432261548473416, [(2, 39), (3, 22)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20638568536692609] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20638568536692609, 0.1688487777274208] ***
*** starting iteration: 2; err: [Inf, 0.20638568536692609, 0.1688487777274208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20638568536692609, 0.1688487777274208, 0.1608814853397121] ***
*** starting iteration: 3; err: [Inf, 0.20638568536692609, 0.1688487777274208, 0.1608814853397121] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20638568536692609, 0.1688487777274208, 0.1608814853397121, 0.15793789119209753] ***
*** starting iteration: 4; err: [Inf, 0.20638568536692609, 0.1688487777274208, 0.1608814853397121, 0.15793789119209753] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20638568536692609, 0.1688487777274208, 0.1608814853397121, 0.15793789119209753, 0.15583591142074502] ***
*** starting iteration: 5; err: [Inf, 0.20638568536692609, 0.1688487777274208, 0.1608814853397121, 0.15793789119209753, 0.15583591142074502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20638568536692609, 0.1688487777274208, 0.1608814853397121, 0.15793789119209753, 0.15583591142074502, 0.1533243735984102] ***
*** starting iteration: 6; err: [Inf, 0.20638568536692609, 0.1688487777274208, 0.1608814853397121, 0.15793789119209753, 0.15583591142074502, 0.1533243735984102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20638568536692609, 0.1688487777274208, 0.1608814853397121, 0.15793789119209753, 0.15583591142074502, 0.1533243735984102, 0.1513451005191147] ***
*** starting iteration: 7; err: [Inf, 0.20638568536692609, 0.1688487777274208, 0.1608814853397121, 0.15793789119209753, 0.15583591142074502, 0.1533243735984102, 0.1513451005191147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20638568536692609, 0.1688487777274208, 0.1608814853397121, 0.15793789119209753, 0.15583591142074502, 0.1533243735984102, 0.1513451005191147, 0.15072628652755132] ***
*** finished computation of 7 references, err: [Inf, 0.20638568536692609, 0.1688487777274208, 0.1608814853397121, 0.15793789119209753, 0.15583591142074502, 0.1533243735984102, 0.1513451005191147, 0.15072628652755132] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 91, 21]]
** centroid: 1, normalized-entropy: 0.6962122601251459, [(2, 91), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 37, 0]]
** centroid: 2, normalized-entropy: 0.9816649485370996, [(1, 51), (2, 37)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 77, 2]]
** centroid: 3, normalized-entropy: 0.17033057560105982, [(2, 77), (3, 2)]
*** center 4: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [55, 19, 0]]
** centroid: 6, normalized-entropy: 0.8218127305034848, [(1, 55), (2, 19)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [104, 23, 0]]
** centroid: 7, normalized-entropy: 0.6824826735754346, [(1, 104), (2, 23)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.40441890429239896] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40441890429239896, 0.25277923374064826] ***
*** starting iteration: 2; err: [Inf, 0.40441890429239896, 0.25277923374064826] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40441890429239896, 0.25277923374064826, 0.2360475372813933] ***
*** starting iteration: 3; err: [Inf, 0.40441890429239896, 0.25277923374064826, 0.2360475372813933] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40441890429239896, 0.25277923374064826, 0.2360475372813933, 0.23207909074911215] ***
*** starting iteration: 4; err: [Inf, 0.40441890429239896, 0.25277923374064826, 0.2360475372813933, 0.23207909074911215] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40441890429239896, 0.25277923374064826, 0.2360475372813933, 0.23207909074911215, 0.23139745415840018] ***
*** finished computation of 3 references, err: [Inf, 0.40441890429239896, 0.25277923374064826, 0.2360475372813933, 0.23207909074911215, 0.23139745415840018] ***
*** center 1: selecting labels [1] (freq >= 1) [from [207, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [104, 105, 0]]
** centroid: 2, normalized-entropy: 0.9999834859487465, [(1, 104), (2, 105)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [86, 145, 19]]
** centroid: 3, normalized-entropy: 0.799993340686149, [(1, 86), (2, 145), (3, 19)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28053328055871657] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28053328055871657, 0.23733742740368288] ***
*** starting iteration: 2; err: [Inf, 0.28053328055871657, 0.23733742740368288] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28053328055871657, 0.23733742740368288, 0.23694884870061722] ***
*** finished computation of 3 references, err: [Inf, 0.28053328055871657, 0.23733742740368288, 0.23694884870061722] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [44, 151, 22]]
** centroid: 1, normalized-entropy: 0.7354111827929415, [(1, 44), (2, 151), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [137, 102, 0]]
** centroid: 2, normalized-entropy: 0.9844744220113565, [(1, 137), (2, 102)]
*** center 3: selecting labels [1] (freq >= 1) [from [211, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2711801634210607] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2711801634210607, 0.2396693755963306] ***
*** starting iteration: 2; err: [Inf, 0.2711801634210607, 0.2396693755963306] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2711801634210607, 0.2396693755963306, 0.23457827402426787] ***
*** starting iteration: 3; err: [Inf, 0.2711801634210607, 0.2396693755963306, 0.23457827402426787] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2711801634210607, 0.2396693755963306, 0.23457827402426787, 0.23320189592563945] ***
*** starting iteration: 4; err: [Inf, 0.2711801634210607, 0.2396693755963306, 0.23457827402426787, 0.23320189592563945] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2711801634210607, 0.2396693755963306, 0.23457827402426787, 0.23320189592563945, 0.232589623386758] ***
*** finished computation of 3 references, err: [Inf, 0.2711801634210607, 0.2396693755963306, 0.23457827402426787, 0.23320189592563945, 0.232589623386758] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [112, 114, 0]]
** centroid: 1, normalized-entropy: 0.9999435071707974, [(1, 112), (2, 114)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [83, 133, 23]]
** centroid: 2, normalized-entropy: 0.8362707398783159, [(1, 83), (2, 133), (3, 23)]
*** center 3: selecting labels [1] (freq >= 1) [from [202, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23185759952135226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23185759952135226, 0.1683757760556409] ***
*** starting iteration: 2; err: [Inf, 0.23185759952135226, 0.1683757760556409] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23185759952135226, 0.1683757760556409, 0.15665043712671925] ***
*** starting iteration: 3; err: [Inf, 0.23185759952135226, 0.1683757760556409, 0.15665043712671925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23185759952135226, 0.1683757760556409, 0.15665043712671925, 0.1532740397791325] ***
*** starting iteration: 4; err: [Inf, 0.23185759952135226, 0.1683757760556409, 0.15665043712671925, 0.1532740397791325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23185759952135226, 0.1683757760556409, 0.15665043712671925, 0.1532740397791325, 0.15199923251375175] ***
*** starting iteration: 5; err: [Inf, 0.23185759952135226, 0.1683757760556409, 0.15665043712671925, 0.1532740397791325, 0.15199923251375175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23185759952135226, 0.1683757760556409, 0.15665043712671925, 0.1532740397791325, 0.15199923251375175, 0.15137870995853622] ***
*** finished computation of 7 references, err: [Inf, 0.23185759952135226, 0.1683757760556409, 0.15665043712671925, 0.1532740397791325, 0.15199923251375175, 0.15137870995853622] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [32, 53, 0]]
** centroid: 1, normalized-entropy: 0.9555111232924128, [(1, 32), (2, 53)]
*** center 2: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [97, 56, 0]]
** centroid: 3, normalized-entropy: 0.9475615595071798, [(1, 97), (2, 56)]
*** center 4: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 98, 19]]
** centroid: 5, normalized-entropy: 0.6400041428422206, [(2, 98), (3, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [43, 43, 0]]
** centroid: 7, normalized-entropy: 1.0, [(1, 43), (2, 43)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25609374223374715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25609374223374715, 0.20533292307176332] ***
*** starting iteration: 2; err: [Inf, 0.25609374223374715, 0.20533292307176332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25609374223374715, 0.20533292307176332, 0.18408828813197284] ***
*** starting iteration: 3; err: [Inf, 0.25609374223374715, 0.20533292307176332, 0.18408828813197284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25609374223374715, 0.20533292307176332, 0.18408828813197284, 0.16358344807223915] ***
*** starting iteration: 4; err: [Inf, 0.25609374223374715, 0.20533292307176332, 0.18408828813197284, 0.16358344807223915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25609374223374715, 0.20533292307176332, 0.18408828813197284, 0.16358344807223915, 0.15022950269270693] ***
*** starting iteration: 5; err: [Inf, 0.25609374223374715, 0.20533292307176332, 0.18408828813197284, 0.16358344807223915, 0.15022950269270693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25609374223374715, 0.20533292307176332, 0.18408828813197284, 0.16358344807223915, 0.15022950269270693, 0.1478598909815592] ***
*** starting iteration: 6; err: [Inf, 0.25609374223374715, 0.20533292307176332, 0.18408828813197284, 0.16358344807223915, 0.15022950269270693, 0.1478598909815592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25609374223374715, 0.20533292307176332, 0.18408828813197284, 0.16358344807223915, 0.15022950269270693, 0.1478598909815592, 0.14727569530219556] ***
*** finished computation of 7 references, err: [Inf, 0.25609374223374715, 0.20533292307176332, 0.18408828813197284, 0.16358344807223915, 0.15022950269270693, 0.1478598909815592, 0.14727569530219556] ***
*** center 1: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [77, 3, 0]]
** centroid: 3, normalized-entropy: 0.2307099556914763, [(1, 77), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [72, 29, 0]]
** centroid: 4, normalized-entropy: 0.8649832752018335, [(1, 72), (2, 29)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [17, 101, 0]]
** centroid: 5, normalized-entropy: 0.5947936590297477, [(1, 17), (2, 101)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 61, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 59, 22]]
** centroid: 7, normalized-entropy: 0.8437582063121657, [(2, 59), (3, 22)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21911495624492686] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21911495624492686, 0.17911133844394242] ***
*** starting iteration: 2; err: [Inf, 0.21911495624492686, 0.17911133844394242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21911495624492686, 0.17911133844394242, 0.16547452965178813] ***
*** starting iteration: 3; err: [Inf, 0.21911495624492686, 0.17911133844394242, 0.16547452965178813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21911495624492686, 0.17911133844394242, 0.16547452965178813, 0.15488450374756904] ***
*** starting iteration: 4; err: [Inf, 0.21911495624492686, 0.17911133844394242, 0.16547452965178813, 0.15488450374756904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21911495624492686, 0.17911133844394242, 0.16547452965178813, 0.15488450374756904, 0.15180338752725492] ***
*** starting iteration: 5; err: [Inf, 0.21911495624492686, 0.17911133844394242, 0.16547452965178813, 0.15488450374756904, 0.15180338752725492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21911495624492686, 0.17911133844394242, 0.16547452965178813, 0.15488450374756904, 0.15180338752725492, 0.15049005390355724] ***
*** starting iteration: 6; err: [Inf, 0.21911495624492686, 0.17911133844394242, 0.16547452965178813, 0.15488450374756904, 0.15180338752725492, 0.15049005390355724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21911495624492686, 0.17911133844394242, 0.16547452965178813, 0.15488450374756904, 0.15180338752725492, 0.15049005390355724, 0.14979577998070792] ***
*** finished computation of 7 references, err: [Inf, 0.21911495624492686, 0.17911133844394242, 0.16547452965178813, 0.15488450374756904, 0.15180338752725492, 0.15049005390355724, 0.14979577998070792] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 60, 0]]
** centroid: 1, normalized-entropy: 0.9957274520849256, [(1, 70), (2, 60)]
*** center 2: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [29, 60, 0]]
** centroid: 4, normalized-entropy: 0.9106223680988619, [(1, 29), (2, 60)]
*** center 5: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [50, 39, 0]]
** centroid: 6, normalized-entropy: 0.9889525767600615, [(1, 50), (2, 39)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 88, 23]]
** centroid: 7, normalized-entropy: 0.7361103940132281, [(2, 88), (3, 23)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4874242586041759] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4874242586041759, 0.31574992844331506] ***
*** finished computation of 3 references, err: [Inf, 0.4874242586041759, 0.31574992844331506] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [133, 76, 0]]
** centroid: 1, normalized-entropy: 0.9456603046006401, [(1, 133), (2, 76)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [146, 174, 19]]
** centroid: 2, normalized-entropy: 0.7888404517183112, [(1, 146), (2, 174), (3, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [118, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.441854655203679] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.441854655203679, 0.33342232667831245] ***
*** finished computation of 3 references, err: [Inf, 0.441854655203679, 0.33342232667831245] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [298, 57, 0]]
** centroid: 1, normalized-entropy: 0.635655637194539, [(1, 298), (2, 57)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 128, 22]]
** centroid: 2, normalized-entropy: 0.6014353864290773, [(2, 128), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [94, 68, 0]]
** centroid: 3, normalized-entropy: 0.9813387358307915, [(1, 94), (2, 68)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38530479672307644] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38530479672307644, 0.3002361835286334] ***
*** finished computation of 3 references, err: [Inf, 0.38530479672307644, 0.3002361835286334] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [244, 2, 0]]
** centroid: 1, normalized-entropy: 0.06812462580532001, [(1, 244), (2, 2)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [63, 123, 20]]
** centroid: 2, normalized-entropy: 0.8161738757977267, [(1, 63), (2, 123), (3, 20)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [90, 122, 3]]
** centroid: 3, normalized-entropy: 0.6787332213002355, [(1, 90), (2, 122), (3, 3)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3004433406697301] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3004433406697301, 0.21688893660567365] ***
*** starting iteration: 2; err: [Inf, 0.3004433406697301, 0.21688893660567365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3004433406697301, 0.21688893660567365, 0.20336061072509243] ***
*** starting iteration: 3; err: [Inf, 0.3004433406697301, 0.21688893660567365, 0.20336061072509243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3004433406697301, 0.21688893660567365, 0.20336061072509243, 0.194355912296823] ***
*** finished computation of 7 references, err: [Inf, 0.3004433406697301, 0.21688893660567365, 0.20336061072509243, 0.194355912296823] ***
*** center 1: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 70, 2]]
** centroid: 2, normalized-entropy: 0.18312206830137262, [(2, 70), (3, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [45, 56, 0]]
** centroid: 4, normalized-entropy: 0.9914266810680207, [(1, 45), (2, 56)]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [1, 106, 17]]
** centroid: 5, normalized-entropy: 0.40539224097225307, [(1, 1), (2, 106), (3, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [108, 11, 0]]
** centroid: 6, normalized-entropy: 0.444552233571264, [(1, 108), (2, 11)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [57, 7, 0]]
** centroid: 7, normalized-entropy: 0.49802788653447644, [(1, 57), (2, 7)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3030225556599314] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3030225556599314, 0.226945163549456] ***
*** starting iteration: 2; err: [Inf, 0.3030225556599314, 0.226945163549456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3030225556599314, 0.226945163549456, 0.21229858863316867] ***
*** starting iteration: 3; err: [Inf, 0.3030225556599314, 0.226945163549456, 0.21229858863316867] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3030225556599314, 0.226945163549456, 0.21229858863316867, 0.20236833364949905] ***
*** finished computation of 7 references, err: [Inf, 0.3030225556599314, 0.226945163549456, 0.21229858863316867, 0.20236833364949905] ***
*** center 1: selecting labels [1] (freq >= 1) [from [136, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 36, 0]]
** centroid: 2, normalized-entropy: 0.9456603046006401, [(1, 63), (2, 36)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 69, 22]]
** centroid: 3, normalized-entropy: 0.7979519684655734, [(2, 69), (3, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [1, 73, 0]]
** centroid: 5, normalized-entropy: 0.10327508457163559, [(1, 1), (2, 73)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [38, 28, 0]]
** centroid: 6, normalized-entropy: 0.9833761901392238, [(1, 38), (2, 28)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [63, 47, 0]]
** centroid: 7, normalized-entropy: 0.9846841570760806, [(1, 63), (2, 47)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28124459068021407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28124459068021407, 0.20820295322976862] ***
*** starting iteration: 2; err: [Inf, 0.28124459068021407, 0.20820295322976862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28124459068021407, 0.20820295322976862, 0.19687913009454253] ***
*** starting iteration: 3; err: [Inf, 0.28124459068021407, 0.20820295322976862, 0.19687913009454253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28124459068021407, 0.20820295322976862, 0.19687913009454253, 0.1930516734565685] ***
*** finished computation of 7 references, err: [Inf, 0.28124459068021407, 0.20820295322976862, 0.19687913009454253, 0.1930516734565685] ***
*** center 1: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 71, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [99, 40, 0]]
** centroid: 4, normalized-entropy: 0.8658228771596526, [(1, 99), (2, 40)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [44, 45, 0]]
** centroid: 5, normalized-entropy: 0.9999089303498087, [(1, 44), (2, 45)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 44, 23]]
** centroid: 6, normalized-entropy: 0.9279262619599757, [(2, 44), (3, 23)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [46, 47, 0]]
** centroid: 7, normalized-entropy: 0.9999165959739288, [(1, 46), (2, 47)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.35465337085473286] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35465337085473286, 0.2952035479890826] ***
*** starting iteration: 2; err: [Inf, 0.35465337085473286, 0.2952035479890826] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35465337085473286, 0.2952035479890826, 0.28855626986714433] ***
*** starting iteration: 3; err: [Inf, 0.35465337085473286, 0.2952035479890826, 0.28855626986714433] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35465337085473286, 0.2952035479890826, 0.28855626986714433, 0.28788364812935907] ***
*** finished computation of 3 references, err: [Inf, 0.35465337085473286, 0.2952035479890826, 0.28855626986714433, 0.28788364812935907] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [10, 180, 19]]
** centroid: 1, normalized-entropy: 0.44791362811287455, [(1, 10), (2, 180), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [155, 70, 0]]
** centroid: 2, normalized-entropy: 0.8944518845341284, [(1, 155), (2, 70)]
*** center 3: selecting labels [1] (freq >= 2) [from [232, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3685435920763856] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3685435920763856, 0.3116312596145487] ***
*** starting iteration: 2; err: [Inf, 0.3685435920763856, 0.3116312596145487] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3685435920763856, 0.3116312596145487, 0.2979141666541348] ***
*** starting iteration: 3; err: [Inf, 0.3685435920763856, 0.3116312596145487, 0.2979141666541348] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3685435920763856, 0.3116312596145487, 0.2979141666541348, 0.29490385775355205] ***
*** starting iteration: 4; err: [Inf, 0.3685435920763856, 0.3116312596145487, 0.2979141666541348, 0.29490385775355205] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3685435920763856, 0.3116312596145487, 0.2979141666541348, 0.29490385775355205, 0.294335080543882] ***
*** finished computation of 3 references, err: [Inf, 0.3685435920763856, 0.3116312596145487, 0.2979141666541348, 0.29490385775355205, 0.294335080543882] ***
*** center 1: selecting labels [1] (freq >= 2) [from [180, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [111, 114, 0]]
** centroid: 2, normalized-entropy: 0.999871756640849, [(1, 111), (2, 114)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [101, 139, 22]]
** centroid: 3, normalized-entropy: 0.8299306856706957, [(1, 101), (2, 139), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4346840807943252] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4346840807943252, 0.3331190215750434] ***
*** starting iteration: 2; err: [Inf, 0.4346840807943252, 0.3331190215750434] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4346840807943252, 0.3331190215750434, 0.33025778678135537] ***
*** starting iteration: 3; err: [Inf, 0.4346840807943252, 0.3331190215750434, 0.33025778678135537] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4346840807943252, 0.3331190215750434, 0.33025778678135537, 0.32452738924633373] ***
*** starting iteration: 4; err: [Inf, 0.4346840807943252, 0.3331190215750434, 0.33025778678135537, 0.32452738924633373] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4346840807943252, 0.3331190215750434, 0.33025778678135537, 0.32452738924633373, 0.3162588769433157] ***
*** starting iteration: 5; err: [Inf, 0.4346840807943252, 0.3331190215750434, 0.33025778678135537, 0.32452738924633373, 0.3162588769433157] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4346840807943252, 0.3331190215750434, 0.33025778678135537, 0.32452738924633373, 0.3162588769433157, 0.3106596262628461] ***
*** starting iteration: 6; err: [Inf, 0.4346840807943252, 0.3331190215750434, 0.33025778678135537, 0.32452738924633373, 0.3162588769433157, 0.3106596262628461] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4346840807943252, 0.3331190215750434, 0.33025778678135537, 0.32452738924633373, 0.3162588769433157, 0.3106596262628461, 0.30147898377713817] ***
*** starting iteration: 7; err: [Inf, 0.4346840807943252, 0.3331190215750434, 0.33025778678135537, 0.32452738924633373, 0.3162588769433157, 0.3106596262628461, 0.30147898377713817] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4346840807943252, 0.3331190215750434, 0.33025778678135537, 0.32452738924633373, 0.3162588769433157, 0.3106596262628461, 0.30147898377713817, 0.28737803855059163] ***
*** starting iteration: 8; err: [Inf, 0.4346840807943252, 0.3331190215750434, 0.33025778678135537, 0.32452738924633373, 0.3162588769433157, 0.3106596262628461, 0.30147898377713817, 0.28737803855059163] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4346840807943252, 0.3331190215750434, 0.33025778678135537, 0.32452738924633373, 0.3162588769433157, 0.3106596262628461, 0.30147898377713817, 0.28737803855059163, 0.28733198236355717] ***
*** finished computation of 3 references, err: [Inf, 0.4346840807943252, 0.3331190215750434, 0.33025778678135537, 0.32452738924633373, 0.3162588769433157, 0.3106596262628461, 0.30147898377713817, 0.28737803855059163, 0.28733198236355717] ***
*** center 1: selecting labels [1] (freq >= 2) [from [208, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [121, 85, 0]]
** centroid: 2, normalized-entropy: 0.9778564432903515, [(1, 121), (2, 85)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [68, 162, 23]]
** centroid: 3, normalized-entropy: 0.7796902106074328, [(1, 68), (2, 162), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4838181317479045] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4838181317479045, 0.29977287216302195] ***
*** finished computation of 3 references, err: [Inf, 0.4838181317479045, 0.29977287216302195] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [95, 168, 19]]
** centroid: 1, normalized-entropy: 0.7799304123504017, [(1, 95), (2, 168), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [195, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [107, 82, 0]]
** centroid: 3, normalized-entropy: 0.9873417262125775, [(1, 107), (2, 82)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3793501600398329] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3793501600398329, 0.2994982505962811] ***
*** finished computation of 3 references, err: [Inf, 0.3793501600398329, 0.2994982505962811] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [113, 160, 22]]
** centroid: 1, normalized-entropy: 0.8128348731678583, [(1, 113), (2, 160), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [164, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [115, 93, 0]]
** centroid: 3, normalized-entropy: 0.9919150773158516, [(1, 115), (2, 93)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4009006762921788] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4009006762921788, 0.3121412561974604] ***
*** finished computation of 3 references, err: [Inf, 0.4009006762921788, 0.3121412561974604] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [276, 44, 0]]
** centroid: 1, normalized-entropy: 0.5776539033535634, [(1, 276), (2, 44)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 145, 23]]
** centroid: 2, normalized-entropy: 0.5760749046747319, [(2, 145), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [121, 58, 0]]
** centroid: 3, normalized-entropy: 0.9087020933110435, [(1, 121), (2, 58)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.24203673903634576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24203673903634576, 0.19392054199937497] ***
*** finished computation of 7 references, err: [Inf, 0.24203673903634576, 0.19392054199937497] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [116, 2, 0]]
** centroid: 1, normalized-entropy: 0.12394986771100755, [(1, 116), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 38, 19]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 38), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [95, 12, 0]]
** centroid: 3, normalized-entropy: 0.5063657452787739, [(1, 95), (2, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 107, 0]]
** centroid: 6, normalized-entropy: 0.2994113292359872, [(1, 6), (2, 107)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [9, 91, 0]]
** centroid: 7, normalized-entropy: 0.4364698170641031, [(1, 9), (2, 91)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23675218311793308] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23675218311793308, 0.1908598880896504] ***
*** finished computation of 7 references, err: [Inf, 0.23675218311793308, 0.1908598880896504] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [15, 89, 0]]
** centroid: 1, normalized-entropy: 0.5952124653513116, [(1, 15), (2, 89)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 24, 0]]
** centroid: 2, normalized-entropy: 0.8586370819183629, [(1, 61), (2, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 51, 0]]
** centroid: 4, normalized-entropy: 0.9931536200741918, [(1, 62), (2, 51)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 89, 22]]
** centroid: 5, normalized-entropy: 0.7183098216110975, [(2, 89), (3, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22602753971900227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22602753971900227, 0.1984973377108328] ***
*** finished computation of 7 references, err: [Inf, 0.22602753971900227, 0.1984973377108328] ***
*** center 1: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 44, 23]]
** centroid: 2, normalized-entropy: 0.9279262619599757, [(2, 44), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [81, 15, 0]]
** centroid: 3, normalized-entropy: 0.625262405223423, [(1, 81), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [36, 89, 0]]
** centroid: 4, normalized-entropy: 0.866123681398626, [(1, 36), (2, 89)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 99, 0]]
** centroid: 5, normalized-entropy: 0.7251421964171215, [(1, 25), (2, 99)]
*** center 6: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22484157221495277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22484157221495277, 0.1963820694127699] ***
*** starting iteration: 2; err: [Inf, 0.22484157221495277, 0.1963820694127699] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22484157221495277, 0.1963820694127699, 0.1918025855380516] ***
*** starting iteration: 3; err: [Inf, 0.22484157221495277, 0.1963820694127699, 0.1918025855380516] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22484157221495277, 0.1963820694127699, 0.1918025855380516, 0.190476794761407] ***
*** starting iteration: 4; err: [Inf, 0.22484157221495277, 0.1963820694127699, 0.1918025855380516, 0.190476794761407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22484157221495277, 0.1963820694127699, 0.1918025855380516, 0.190476794761407, 0.18994844102618136] ***
*** finished computation of 7 references, err: [Inf, 0.22484157221495277, 0.1963820694127699, 0.1918025855380516, 0.190476794761407, 0.18994844102618136] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [128, 7, 0]]
** centroid: 1, normalized-entropy: 0.29421200849969587, [(1, 128), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 32, 0]]
** centroid: 2, normalized-entropy: 0.9618624139909456, [(1, 51), (2, 32)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 62, 19]]
** centroid: 3, normalized-entropy: 0.785889583138768, [(2, 62), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 65, 0]]
** centroid: 5, normalized-entropy: 0.9664086723492078, [(1, 42), (2, 65)]
*** center 6: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 84, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24191656906640846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24191656906640846, 0.19062280208933569] ***
*** starting iteration: 2; err: [Inf, 0.24191656906640846, 0.19062280208933569] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24191656906640846, 0.19062280208933569, 0.1875018509540489] ***
*** starting iteration: 3; err: [Inf, 0.24191656906640846, 0.19062280208933569, 0.1875018509540489] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24191656906640846, 0.19062280208933569, 0.1875018509540489, 0.18760900658232788] ***
*** finished computation of 7 references, err: [Inf, 0.24191656906640846, 0.19062280208933569, 0.1875018509540489, 0.18760900658232788] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [86, 8, 0]]
** centroid: 1, normalized-entropy: 0.4199210973757179, [(1, 86), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [91, 17, 0]]
** centroid: 2, normalized-entropy: 0.6280710155029396, [(1, 91), (2, 17)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 54, 22]]
** centroid: 3, normalized-entropy: 0.8680403986166402, [(2, 54), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [37, 94, 0]]
** centroid: 5, normalized-entropy: 0.8587579130949384, [(1, 37), (2, 94)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 80, 0]]
** centroid: 6, normalized-entropy: 0.2243269603450881, [(1, 3), (2, 80)]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23944547321686502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23944547321686502, 0.19052452596066438] ***
*** starting iteration: 2; err: [Inf, 0.23944547321686502, 0.19052452596066438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23944547321686502, 0.19052452596066438, 0.18886487097151275] ***
*** starting iteration: 3; err: [Inf, 0.23944547321686502, 0.19052452596066438, 0.18886487097151275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23944547321686502, 0.19052452596066438, 0.18886487097151275, 0.18884575052739777] ***
*** finished computation of 7 references, err: [Inf, 0.23944547321686502, 0.19052452596066438, 0.18886487097151275, 0.18884575052739777] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 105, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 48, 0]]
** centroid: 3, normalized-entropy: 0.998845535995202, [(1, 52), (2, 48)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [86, 7, 0]]
** centroid: 4, normalized-entropy: 0.3852851190780996, [(1, 86), (2, 7)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [80, 24, 0]]
** centroid: 5, normalized-entropy: 0.7793498372920851, [(1, 80), (2, 24)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 62, 23]]
** centroid: 6, normalized-entropy: 0.8423074510400833, [(2, 62), (3, 23)]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 1, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9320188451924979, 0.9269958581335827, 0.9260158361954769, 0.9219908531285776, 0.9209658760556964, 0.9089538640436845, 0.9040117962273652, 0.8990037942133751, 0.893995792199385, 0.8929768091444737, 0.8859877841913769, 0.8449707192222163, 0.8130106154058249]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9320188451924979
finished with 15
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.3234187995989782] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3234187995989782, 0.2942934949230682] ***
*** starting iteration: 2; err: [Inf, 0.3234187995989782, 0.2942934949230682] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3234187995989782, 0.2942934949230682, 0.2902051282559966] ***
*** starting iteration: 3; err: [Inf, 0.3234187995989782, 0.2942934949230682, 0.2902051282559966] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3234187995989782, 0.2942934949230682, 0.2902051282559966, 0.2895484477108171] ***
*** finished computation of 3 references, err: [Inf, 0.3234187995989782, 0.2942934949230682, 0.2902051282559966, 0.2895484477108171] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [105, 108, 0]]
** centroid: 1, normalized-entropy: 0.9998568991526107, [(1, 105), (2, 108)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [119, 142, 19]]
** centroid: 2, normalized-entropy: 0.8106122768163069, [(1, 119), (2, 142), (3, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [173, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3713566204826201] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3713566204826201, 0.30309676203862423] ***
*** starting iteration: 2; err: [Inf, 0.3713566204826201, 0.30309676203862423] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3713566204826201, 0.30309676203862423, 0.2923606955201953] ***
*** starting iteration: 3; err: [Inf, 0.3713566204826201, 0.30309676203862423, 0.2923606955201953] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3713566204826201, 0.30309676203862423, 0.2923606955201953, 0.29225057676836647] ***
*** finished computation of 3 references, err: [Inf, 0.3713566204826201, 0.30309676203862423, 0.2923606955201953, 0.29225057676836647] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [113, 133, 0]]
** centroid: 1, normalized-entropy: 0.9952267546295879, [(1, 113), (2, 133)]
*** center 2: selecting labels [1] (freq >= 2) [from [180, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [99, 120, 22]]
** centroid: 3, normalized-entropy: 0.8476074130271577, [(1, 99), (2, 120), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5463216220848318] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5463216220848318, 0.342008090321103] ***
*** starting iteration: 2; err: [Inf, 0.5463216220848318, 0.342008090321103] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5463216220848318, 0.342008090321103, 0.3386607201856518] ***
*** starting iteration: 3; err: [Inf, 0.5463216220848318, 0.342008090321103, 0.3386607201856518] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5463216220848318, 0.342008090321103, 0.3386607201856518, 0.3367599047136785] ***
*** starting iteration: 4; err: [Inf, 0.5463216220848318, 0.342008090321103, 0.3386607201856518, 0.3367599047136785] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5463216220848318, 0.342008090321103, 0.3386607201856518, 0.3367599047136785, 0.3338827557716591] ***
*** starting iteration: 5; err: [Inf, 0.5463216220848318, 0.342008090321103, 0.3386607201856518, 0.3367599047136785, 0.3338827557716591] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5463216220848318, 0.342008090321103, 0.3386607201856518, 0.3367599047136785, 0.3338827557716591, 0.33001536747714366] ***
*** starting iteration: 6; err: [Inf, 0.5463216220848318, 0.342008090321103, 0.3386607201856518, 0.3367599047136785, 0.3338827557716591, 0.33001536747714366] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5463216220848318, 0.342008090321103, 0.3386607201856518, 0.3367599047136785, 0.3338827557716591, 0.33001536747714366, 0.32325068818519764] ***
*** starting iteration: 7; err: [Inf, 0.5463216220848318, 0.342008090321103, 0.3386607201856518, 0.3367599047136785, 0.3338827557716591, 0.33001536747714366, 0.32325068818519764] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5463216220848318, 0.342008090321103, 0.3386607201856518, 0.3367599047136785, 0.3338827557716591, 0.33001536747714366, 0.32325068818519764, 0.31491251475550514] ***
*** starting iteration: 8; err: [Inf, 0.5463216220848318, 0.342008090321103, 0.3386607201856518, 0.3367599047136785, 0.3338827557716591, 0.33001536747714366, 0.32325068818519764, 0.31491251475550514] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5463216220848318, 0.342008090321103, 0.3386607201856518, 0.3367599047136785, 0.3338827557716591, 0.33001536747714366, 0.32325068818519764, 0.31491251475550514, 0.30963885175647854] ***
*** starting iteration: 9; err: [Inf, 0.5463216220848318, 0.342008090321103, 0.3386607201856518, 0.3367599047136785, 0.3338827557716591, 0.33001536747714366, 0.32325068818519764, 0.31491251475550514, 0.30963885175647854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5463216220848318, 0.342008090321103, 0.3386607201856518, 0.3367599047136785, 0.3338827557716591, 0.33001536747714366, 0.32325068818519764, 0.31491251475550514, 0.30963885175647854, 0.2905908170808246] ***
*** starting iteration: 10; err: [Inf, 0.5463216220848318, 0.342008090321103, 0.3386607201856518, 0.3367599047136785, 0.3338827557716591, 0.33001536747714366, 0.32325068818519764, 0.31491251475550514, 0.30963885175647854, 0.2905908170808246] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5463216220848318, 0.342008090321103, 0.3386607201856518, 0.3367599047136785, 0.3338827557716591, 0.33001536747714366, 0.32325068818519764, 0.31491251475550514, 0.30963885175647854, 0.2905908170808246, 0.28746447465040426] ***
*** finished computation of 3 references, err: [Inf, 0.5463216220848318, 0.342008090321103, 0.3386607201856518, 0.3367599047136785, 0.3338827557716591, 0.33001536747714366, 0.32325068818519764, 0.31491251475550514, 0.30963885175647854, 0.2905908170808246, 0.28746447465040426] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [56, 169, 23]]
** centroid: 1, normalized-entropy: 0.7444926815622956, [(1, 56), (2, 169), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [215, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [126, 78, 0]]
** centroid: 3, normalized-entropy: 0.9596868937742168, [(1, 126), (2, 78)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.433095222642483] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.433095222642483, 0.27582349905089754] ***
*** starting iteration: 2; err: [Inf, 0.433095222642483, 0.27582349905089754] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.433095222642483, 0.27582349905089754, 0.243529113799658] ***
*** starting iteration: 3; err: [Inf, 0.433095222642483, 0.27582349905089754, 0.243529113799658] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.433095222642483, 0.27582349905089754, 0.243529113799658, 0.2345887253902763] ***
*** starting iteration: 4; err: [Inf, 0.433095222642483, 0.27582349905089754, 0.243529113799658, 0.2345887253902763] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.433095222642483, 0.27582349905089754, 0.243529113799658, 0.2345887253902763, 0.2321669355901126] ***
*** starting iteration: 5; err: [Inf, 0.433095222642483, 0.27582349905089754, 0.243529113799658, 0.2345887253902763, 0.2321669355901126] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.433095222642483, 0.27582349905089754, 0.243529113799658, 0.2345887253902763, 0.2321669355901126, 0.2311407857093479] ***
*** starting iteration: 6; err: [Inf, 0.433095222642483, 0.27582349905089754, 0.243529113799658, 0.2345887253902763, 0.2321669355901126, 0.2311407857093479] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.433095222642483, 0.27582349905089754, 0.243529113799658, 0.2345887253902763, 0.2321669355901126, 0.2311407857093479, 0.2299980257243455] ***
*** starting iteration: 7; err: [Inf, 0.433095222642483, 0.27582349905089754, 0.243529113799658, 0.2345887253902763, 0.2321669355901126, 0.2311407857093479, 0.2299980257243455] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.433095222642483, 0.27582349905089754, 0.243529113799658, 0.2345887253902763, 0.2321669355901126, 0.2311407857093479, 0.2299980257243455, 0.22899585068729278] ***
*** starting iteration: 8; err: [Inf, 0.433095222642483, 0.27582349905089754, 0.243529113799658, 0.2345887253902763, 0.2321669355901126, 0.2311407857093479, 0.2299980257243455, 0.22899585068729278] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.433095222642483, 0.27582349905089754, 0.243529113799658, 0.2345887253902763, 0.2321669355901126, 0.2311407857093479, 0.2299980257243455, 0.22899585068729278, 0.22849251541613905] ***
*** finished computation of 3 references, err: [Inf, 0.433095222642483, 0.27582349905089754, 0.243529113799658, 0.2345887253902763, 0.2321669355901126, 0.2311407857093479, 0.2299980257243455, 0.22899585068729278, 0.22849251541613905] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [9, 179, 19]]
** centroid: 1, normalized-entropy: 0.43802017211432104, [(1, 9), (2, 179), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [235, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [153, 71, 0]]
** centroid: 3, normalized-entropy: 0.9010496300182819, [(1, 153), (2, 71)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5131270921826809] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5131270921826809, 0.3276897033273677] ***
*** starting iteration: 2; err: [Inf, 0.5131270921826809, 0.3276897033273677] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5131270921826809, 0.3276897033273677, 0.28212453379690916] ***
*** starting iteration: 3; err: [Inf, 0.5131270921826809, 0.3276897033273677, 0.28212453379690916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5131270921826809, 0.3276897033273677, 0.28212453379690916, 0.24941833019312443] ***
*** starting iteration: 4; err: [Inf, 0.5131270921826809, 0.3276897033273677, 0.28212453379690916, 0.24941833019312443] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5131270921826809, 0.3276897033273677, 0.28212453379690916, 0.24941833019312443, 0.23982699282573483] ***
*** starting iteration: 5; err: [Inf, 0.5131270921826809, 0.3276897033273677, 0.28212453379690916, 0.24941833019312443, 0.23982699282573483] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5131270921826809, 0.3276897033273677, 0.28212453379690916, 0.24941833019312443, 0.23982699282573483, 0.23728286311577731] ***
*** starting iteration: 6; err: [Inf, 0.5131270921826809, 0.3276897033273677, 0.28212453379690916, 0.24941833019312443, 0.23982699282573483, 0.23728286311577731] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5131270921826809, 0.3276897033273677, 0.28212453379690916, 0.24941833019312443, 0.23982699282573483, 0.23728286311577731, 0.23684686908953595] ***
*** finished computation of 3 references, err: [Inf, 0.5131270921826809, 0.3276897033273677, 0.28212453379690916, 0.24941833019312443, 0.23982699282573483, 0.23728286311577731, 0.23684686908953595] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [153, 86, 0]]
** centroid: 1, normalized-entropy: 0.9425441768662877, [(1, 153), (2, 86)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [237, 4, 0]]
** centroid: 2, normalized-entropy: 0.12188456449183961, [(1, 237), (2, 4)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [2, 163, 22]]
** centroid: 3, normalized-entropy: 0.3823335761802486, [(1, 2), (2, 163), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31021574203824176] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31021574203824176, 0.24072509598422578] ***
*** starting iteration: 2; err: [Inf, 0.31021574203824176, 0.24072509598422578] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31021574203824176, 0.24072509598422578, 0.23148915052170987] ***
*** starting iteration: 3; err: [Inf, 0.31021574203824176, 0.24072509598422578, 0.23148915052170987] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31021574203824176, 0.24072509598422578, 0.23148915052170987, 0.230128506396798] ***
*** starting iteration: 4; err: [Inf, 0.31021574203824176, 0.24072509598422578, 0.23148915052170987, 0.230128506396798] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31021574203824176, 0.24072509598422578, 0.23148915052170987, 0.230128506396798, 0.22966969834788628] ***
*** finished computation of 3 references, err: [Inf, 0.31021574203824176, 0.24072509598422578, 0.23148915052170987, 0.230128506396798, 0.22966969834788628] ***
*** center 1: selecting labels [1] (freq >= 2) [from [245, 1, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [15, 175, 23]]
** centroid: 2, normalized-entropy: 0.5358042690964394, [(1, 15), (2, 175), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [137, 71, 0]]
** centroid: 3, normalized-entropy: 0.9261010602063586, [(1, 137), (2, 71)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 15)
[0.9320188451924979, 0.9269958581335827, 0.9260158361954769, 0.9219908531285776, 0.9209658760556964, 0.9089538640436845, 0.9079858301415188, 0.9040117962273652, 0.8990037942133751, 0.8969838101574629, 0.893995792199385, 0.8929768091444737, 0.8859877841913769, 0.8449707192222163, 0.8130106154058249]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9320188451924979
finished with 16
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.18819275670041619] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18819275670041619, 0.15576173884685043] ***
*** finished computation of 7 references, err: [Inf, 0.18819275670041619, 0.15576173884685043] ***
*** center 1: selecting labels [1] (freq >= 2) [from [128, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 29, 19]]
** centroid: 2, normalized-entropy: 0.968461008760162, [(2, 29), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 17, 0]]
** centroid: 3, normalized-entropy: 0.7363230272021651, [(1, 65), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [77, 33, 0]]
** centroid: 4, normalized-entropy: 0.8812908992306927, [(1, 77), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [36, 91, 0]]
** centroid: 5, normalized-entropy: 0.8601286843311847, [(1, 36), (2, 91)]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 80, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1931120225729636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1931120225729636, 0.15276377657609902] ***
*** finished computation of 7 references, err: [Inf, 0.1931120225729636, 0.15276377657609902] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 124, 22]]
** centroid: 1, normalized-entropy: 0.6115516951951333, [(2, 124), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 29, 0]]
** centroid: 4, normalized-entropy: 0.9335289015212996, [(1, 54), (2, 29)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [105, 9, 0]]
** centroid: 5, normalized-entropy: 0.39845927409523557, [(1, 105), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [100, 5, 0]]
** centroid: 6, normalized-entropy: 0.2761954276479391, [(1, 100), (2, 5)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [9, 86, 0]]
** centroid: 7, normalized-entropy: 0.4520861986745138, [(1, 9), (2, 86)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20107546445635752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20107546445635752, 0.1565658952566101] ***
*** finished computation of 7 references, err: [Inf, 0.20107546445635752, 0.1565658952566101] ***
*** center 1: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 40, 23]]
** centroid: 2, normalized-entropy: 0.9468188316776024, [(2, 40), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 5, 0]]
** centroid: 3, normalized-entropy: 0.4186843105268563, [(1, 54), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [77, 21, 0]]
** centroid: 4, normalized-entropy: 0.7495952572594798, [(1, 77), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [39, 101, 0]]
** centroid: 5, normalized-entropy: 0.8534969719909741, [(1, 39), (2, 101)]
*** center 6: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 80, 0]]
** centroid: 7, normalized-entropy: 0.32275695889739825, [(1, 5), (2, 80)]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9320188451924979, 0.9269958581335827, 0.9260158361954769, 0.9219908531285776, 0.9209658760556964, 0.9089538640436845, 0.9079858301415188, 0.9069848291405177, 0.9040117962273652, 0.8990037942133751, 0.8969838101574629, 0.893995792199385, 0.8929768091444737, 0.8859877841913769, 0.8449707192222163, 0.8130106154058249]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9320188451924979
finished with 17
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.28777268151794605] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28777268151794605, 0.2112182501071432] ***
*** starting iteration: 2; err: [Inf, 0.28777268151794605, 0.2112182501071432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28777268151794605, 0.2112182501071432, 0.1972288250204388] ***
*** starting iteration: 3; err: [Inf, 0.28777268151794605, 0.2112182501071432, 0.1972288250204388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28777268151794605, 0.2112182501071432, 0.1972288250204388, 0.19079164678983213] ***
*** starting iteration: 4; err: [Inf, 0.28777268151794605, 0.2112182501071432, 0.1972288250204388, 0.19079164678983213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28777268151794605, 0.2112182501071432, 0.1972288250204388, 0.19079164678983213, 0.18939562340395655] ***
*** starting iteration: 5; err: [Inf, 0.28777268151794605, 0.2112182501071432, 0.1972288250204388, 0.19079164678983213, 0.18939562340395655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28777268151794605, 0.2112182501071432, 0.1972288250204388, 0.19079164678983213, 0.18939562340395655, 0.18816828779287514] ***
*** starting iteration: 6; err: [Inf, 0.28777268151794605, 0.2112182501071432, 0.1972288250204388, 0.19079164678983213, 0.18939562340395655, 0.18816828779287514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28777268151794605, 0.2112182501071432, 0.1972288250204388, 0.19079164678983213, 0.18939562340395655, 0.18816828779287514, 0.18766196664246554] ***
*** finished computation of 7 references, err: [Inf, 0.28777268151794605, 0.2112182501071432, 0.1972288250204388, 0.19079164678983213, 0.18939562340395655, 0.18816828779287514, 0.18766196664246554] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [80, 13, 0]]
** centroid: 2, normalized-entropy: 0.5836753280239112, [(1, 80), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [27, 79, 0]]
** centroid: 3, normalized-entropy: 0.8186691181065503, [(1, 27), (2, 79)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [96, 6, 0]]
** centroid: 4, normalized-entropy: 0.32275695889739825, [(1, 96), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [1, 95, 0]]
** centroid: 5, normalized-entropy: 0.08354288831032243, [(1, 1), (2, 95)]
*** center 6: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 57, 19]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 57), (3, 19)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22428848628775738] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22428848628775738, 0.20020803008256466] ***
*** starting iteration: 2; err: [Inf, 0.22428848628775738, 0.20020803008256466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22428848628775738, 0.20020803008256466, 0.19613710011047] ***
*** starting iteration: 3; err: [Inf, 0.22428848628775738, 0.20020803008256466, 0.19613710011047] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22428848628775738, 0.20020803008256466, 0.19613710011047, 0.19390522564078558] ***
*** starting iteration: 4; err: [Inf, 0.22428848628775738, 0.20020803008256466, 0.19613710011047, 0.19390522564078558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22428848628775738, 0.20020803008256466, 0.19613710011047, 0.19390522564078558, 0.19180203714188765] ***
*** starting iteration: 5; err: [Inf, 0.22428848628775738, 0.20020803008256466, 0.19613710011047, 0.19390522564078558, 0.19180203714188765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22428848628775738, 0.20020803008256466, 0.19613710011047, 0.19390522564078558, 0.19180203714188765, 0.18942295315635643] ***
*** starting iteration: 6; err: [Inf, 0.22428848628775738, 0.20020803008256466, 0.19613710011047, 0.19390522564078558, 0.19180203714188765, 0.18942295315635643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22428848628775738, 0.20020803008256466, 0.19613710011047, 0.19390522564078558, 0.19180203714188765, 0.18942295315635643, 0.1871164095639691] ***
*** starting iteration: 7; err: [Inf, 0.22428848628775738, 0.20020803008256466, 0.19613710011047, 0.19390522564078558, 0.19180203714188765, 0.18942295315635643, 0.1871164095639691] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22428848628775738, 0.20020803008256466, 0.19613710011047, 0.19390522564078558, 0.19180203714188765, 0.18942295315635643, 0.1871164095639691, 0.1859368498659116] ***
*** starting iteration: 8; err: [Inf, 0.22428848628775738, 0.20020803008256466, 0.19613710011047, 0.19390522564078558, 0.19180203714188765, 0.18942295315635643, 0.1871164095639691, 0.1859368498659116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22428848628775738, 0.20020803008256466, 0.19613710011047, 0.19390522564078558, 0.19180203714188765, 0.18942295315635643, 0.1871164095639691, 0.1859368498659116, 0.1849895863758185] ***
*** finished computation of 7 references, err: [Inf, 0.22428848628775738, 0.20020803008256466, 0.19613710011047, 0.19390522564078558, 0.19180203714188765, 0.18942295315635643, 0.1871164095639691, 0.1859368498659116, 0.1849895863758185] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [63, 17, 0]]
** centroid: 1, normalized-entropy: 0.7462343013654809, [(1, 63), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [103, 1, 0]]
** centroid: 2, normalized-entropy: 0.07823246525771242, [(1, 103), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [12, 76, 0]]
** centroid: 5, normalized-entropy: 0.5746356978376794, [(1, 12), (2, 76)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 53, 22]]
** centroid: 6, normalized-entropy: 0.8729882944709463, [(2, 53), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 106, 0]]
** centroid: 7, normalized-entropy: 0.18181317169561842, [(1, 3), (2, 106)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26730729656634683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26730729656634683, 0.21809250299401325] ***
*** starting iteration: 2; err: [Inf, 0.26730729656634683, 0.21809250299401325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26730729656634683, 0.21809250299401325, 0.20246995615631877] ***
*** starting iteration: 3; err: [Inf, 0.26730729656634683, 0.21809250299401325, 0.20246995615631877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26730729656634683, 0.21809250299401325, 0.20246995615631877, 0.19690624874286253] ***
*** starting iteration: 4; err: [Inf, 0.26730729656634683, 0.21809250299401325, 0.20246995615631877, 0.19690624874286253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26730729656634683, 0.21809250299401325, 0.20246995615631877, 0.19690624874286253, 0.1941546050013452] ***
*** starting iteration: 5; err: [Inf, 0.26730729656634683, 0.21809250299401325, 0.20246995615631877, 0.19690624874286253, 0.1941546050013452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26730729656634683, 0.21809250299401325, 0.20246995615631877, 0.19690624874286253, 0.1941546050013452, 0.19315828297795473] ***
*** finished computation of 7 references, err: [Inf, 0.26730729656634683, 0.21809250299401325, 0.20246995615631877, 0.19690624874286253, 0.1941546050013452, 0.19315828297795473] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [45, 31, 0]]
** centroid: 1, normalized-entropy: 0.9753817903274211, [(1, 45), (2, 31)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 71, 2]]
** centroid: 2, normalized-entropy: 0.18116640155354563, [(2, 71), (3, 2)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [99, 16, 0]]
** centroid: 3, normalized-entropy: 0.5819569606149722, [(1, 99), (2, 16)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 88, 21]]
** centroid: 4, normalized-entropy: 0.70700406497476, [(2, 88), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [49, 41, 0]]
** centroid: 5, normalized-entropy: 0.9942929346520455, [(1, 49), (2, 41)]
*** center 6: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 17)
[0.9320188451924979, 0.9269958581335827, 0.9260158361954769, 0.9219908531285776, 0.921013828199457, 0.9209658760556964, 0.9089538640436845, 0.9079858301415188, 0.9069848291405177, 0.9040117962273652, 0.8990037942133751, 0.8969838101574629, 0.893995792199385, 0.8929768091444737, 0.8859877841913769, 0.8449707192222163, 0.8130106154058249]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9320188451924979
finished with 17
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9320188451924979, 0.9269958581335827, 0.9260158361954769, 0.9219908531285776, 0.921013828199457, 0.9209658760556964, 0.9089538640436845, 0.9079858301415188, 0.9069848291405177, 0.9040117962273652, 0.8990037942133751, 0.8969838101574629, 0.893995792199385, 0.8929768091444737, 0.8859877841913769, 0.8449707192222163, 0.8130106154058249]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9320188451924979
finished with 17
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9320188451924979, 0.9269958581335827, 0.9260158361954769, 0.9219908531285776, 0.921013828199457, 0.9209658760556964, 0.9089538640436845, 0.9079858301415188, 0.9069848291405177, 0.9040117962273652, 0.8990037942133751, 0.8969838101574629, 0.893995792199385, 0.8929768091444737, 0.8859877841913769, 0.8449707192222163, 0.8130106154058249]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9320188451924979
finished with 17
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9320188451924979, 0.9269958581335827, 0.9260158361954769, 0.9219908531285776, 0.921013828199457, 0.9209658760556964, 0.9089538640436845, 0.9079858301415188, 0.9069848291405177, 0.9040117962273652, 0.8990037942133751, 0.8969838101574629, 0.893995792199385, 0.8929768091444737, 0.8859877841913769, 0.8449707192222163, 0.8130106154058249]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9320188451924979
finished with 19
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.2780206033039849] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2780206033039849, 0.2061209396638155] ***
*** starting iteration: 2; err: [Inf, 0.2780206033039849, 0.2061209396638155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2780206033039849, 0.2061209396638155, 0.19727012332998686] ***
*** starting iteration: 3; err: [Inf, 0.2780206033039849, 0.2061209396638155, 0.19727012332998686] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2780206033039849, 0.2061209396638155, 0.19727012332998686, 0.19240161594333458] ***
*** finished computation of 7 references, err: [Inf, 0.2780206033039849, 0.2061209396638155, 0.19727012332998686, 0.19240161594333458] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 105, 19]]
** centroid: 1, normalized-entropy: 0.6178543578838833, [(2, 105), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [50, 36, 0]]
** centroid: 3, normalized-entropy: 0.9807983646944296, [(1, 50), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [5, 72, 0]]
** centroid: 4, normalized-entropy: 0.34673146824966367, [(1, 5), (2, 72)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [101, 37, 0]]
** centroid: 5, normalized-entropy: 0.8387481213709055, [(1, 101), (2, 37)]
*** center 6: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3013638680363758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3013638680363758, 0.21649611400680496] ***
*** starting iteration: 2; err: [Inf, 0.3013638680363758, 0.21649611400680496] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3013638680363758, 0.21649611400680496, 0.2036091160235823] ***
*** starting iteration: 3; err: [Inf, 0.3013638680363758, 0.21649611400680496, 0.2036091160235823] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3013638680363758, 0.21649611400680496, 0.2036091160235823, 0.19333959881263763] ***
*** finished computation of 7 references, err: [Inf, 0.3013638680363758, 0.21649611400680496, 0.2036091160235823, 0.19333959881263763] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 72, 5]]
** centroid: 1, normalized-entropy: 0.34673146824966367, [(2, 72), (3, 5)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [94, 26, 0]]
** centroid: 2, normalized-entropy: 0.7540340561971327, [(1, 94), (2, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [102, 22, 0]]
** centroid: 5, normalized-entropy: 0.674398887071447, [(1, 102), (2, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [25, 65, 0]]
** centroid: 6, normalized-entropy: 0.8524051786494784, [(1, 25), (2, 65)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 68, 17]]
** centroid: 7, normalized-entropy: 0.7219280948873623, [(2, 68), (3, 17)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3249468825662556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3249468825662556, 0.23735805593341633] ***
*** starting iteration: 2; err: [Inf, 0.3249468825662556, 0.23735805593341633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3249468825662556, 0.23735805593341633, 0.2138136815289496] ***
*** starting iteration: 3; err: [Inf, 0.3249468825662556, 0.23735805593341633, 0.2138136815289496] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3249468825662556, 0.23735805593341633, 0.2138136815289496, 0.20414199146988063] ***
*** finished computation of 7 references, err: [Inf, 0.3249468825662556, 0.23735805593341633, 0.2138136815289496, 0.20414199146988063] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [92, 1, 0]]
** centroid: 1, normalized-entropy: 0.0857426825355026, [(1, 92), (2, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [5, 128, 3]]
** centroid: 2, normalized-entropy: 0.23905936914447126, [(1, 5), (2, 128), (3, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 92, 20]]
** centroid: 5, normalized-entropy: 0.6769418697808861, [(2, 92), (3, 20)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [109, 21, 0]]
** centroid: 6, normalized-entropy: 0.6379773724204627, [(1, 109), (2, 21)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [54, 5, 0]]
** centroid: 7, normalized-entropy: 0.4186843105268563, [(1, 54), (2, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27071508964070595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27071508964070595, 0.16233845442944617] ***
*** starting iteration: 2; err: [Inf, 0.27071508964070595, 0.16233845442944617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27071508964070595, 0.16233845442944617, 0.15457591970588216] ***
*** starting iteration: 3; err: [Inf, 0.27071508964070595, 0.16233845442944617, 0.15457591970588216] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27071508964070595, 0.16233845442944617, 0.15457591970588216, 0.15201886966698677] ***
*** finished computation of 7 references, err: [Inf, 0.27071508964070595, 0.16233845442944617, 0.15457591970588216, 0.15201886966698677] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [87, 1, 0]]
** centroid: 1, normalized-entropy: 0.08970338978685011, [(1, 87), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [86, 2, 0]]
** centroid: 2, normalized-entropy: 0.1564910629057016, [(1, 86), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [8, 84, 0]]
** centroid: 3, normalized-entropy: 0.42622865699814483, [(1, 8), (2, 84)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 112, 19]]
** centroid: 4, normalized-entropy: 0.59728274179791, [(2, 112), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [95, 46, 0]]
** centroid: 5, normalized-entropy: 0.9110397724692713, [(1, 95), (2, 46)]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [63, 5, 0]]
** centroid: 7, normalized-entropy: 0.378958787501346, [(1, 63), (2, 5)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2516657566195116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2516657566195116, 0.1637491196620165] ***
*** starting iteration: 2; err: [Inf, 0.2516657566195116, 0.1637491196620165] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2516657566195116, 0.1637491196620165, 0.15467451268463567] ***
*** starting iteration: 3; err: [Inf, 0.2516657566195116, 0.1637491196620165, 0.15467451268463567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2516657566195116, 0.1637491196620165, 0.15467451268463567, 0.1515472425577947] ***
*** finished computation of 7 references, err: [Inf, 0.2516657566195116, 0.1637491196620165, 0.15467451268463567, 0.1515472425577947] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [55, 7, 0]]
** centroid: 1, normalized-entropy: 0.5086113313826895, [(1, 55), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 31, 0]]
** centroid: 2, normalized-entropy: 0.9039324555927869, [(1, 66), (2, 31)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 90, 21]]
** centroid: 3, normalized-entropy: 0.699772221773307, [(2, 90), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [82, 56, 0]]
** centroid: 5, normalized-entropy: 0.9742408334889756, [(1, 82), (2, 56)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [98, 5, 0]]
** centroid: 6, normalized-entropy: 0.28017814662275986, [(1, 98), (2, 5)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 64, 1]]
** centroid: 7, normalized-entropy: 0.11467550533614682, [(2, 64), (3, 1)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22925329881313924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22925329881313924, 0.19096548403187402] ***
*** starting iteration: 2; err: [Inf, 0.22925329881313924, 0.19096548403187402] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22925329881313924, 0.19096548403187402, 0.1592580888321207] ***
*** starting iteration: 3; err: [Inf, 0.22925329881313924, 0.19096548403187402, 0.1592580888321207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22925329881313924, 0.19096548403187402, 0.1592580888321207, 0.14930696129335322] ***
*** finished computation of 7 references, err: [Inf, 0.22925329881313924, 0.19096548403187402, 0.1592580888321207, 0.14930696129335322] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 98, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 23, 23]]
** centroid: 2, normalized-entropy: 1.0, [(2, 23), (3, 23)]
*** center 3: selecting labels [1] (freq >= 1) [from [118, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 13, 0]]
** centroid: 4, normalized-entropy: 0.6868088934028034, [(1, 58), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [97, 12, 0]]
** centroid: 5, normalized-entropy: 0.5001926210998139, [(1, 97), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [124, 9, 0]]
** centroid: 6, normalized-entropy: 0.3571646347421419, [(1, 124), (2, 9)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 92, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 19)
[0.9320188451924979, 0.9269958581335827, 0.9260158361954769, 0.9219908531285776, 0.921013828199457, 0.9209658760556964, 0.9089538640436845, 0.9079918241594888, 0.9079858301415188, 0.9069848291405177, 0.9040117962273652, 0.8999838161514808, 0.8990037942133751, 0.8969838101574629, 0.893995792199385, 0.8929768091444737, 0.8859877841913769, 0.8449707192222163, 0.8130106154058249]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9320188451924979
finished with 19
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.30740249508991835] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30740249508991835, 0.2230101628061384] ***
*** starting iteration: 2; err: [Inf, 0.30740249508991835, 0.2230101628061384] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30740249508991835, 0.2230101628061384, 0.20465775440447032] ***
*** starting iteration: 3; err: [Inf, 0.30740249508991835, 0.2230101628061384, 0.20465775440447032] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30740249508991835, 0.2230101628061384, 0.20465775440447032, 0.1968902653362602] ***
*** finished computation of 7 references, err: [Inf, 0.30740249508991835, 0.2230101628061384, 0.20465775440447032, 0.1968902653362602] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [65, 46, 0]]
** centroid: 1, normalized-entropy: 0.9787603904449517, [(1, 65), (2, 46)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 69, 32]]
** centroid: 2, normalized-entropy: 0.9009026954478971, [(2, 69), (3, 32)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [142, 16, 0]]
** centroid: 3, normalized-entropy: 0.47299536229314826, [(1, 142), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [64, 79, 0]]
** centroid: 4, normalized-entropy: 0.9920484059672626, [(1, 64), (2, 79)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 112, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [120, 53, 0]]
** centroid: 6, normalized-entropy: 0.8889250162790843, [(1, 120), (2, 53)]
*** center 7: selecting labels [1] (freq >= 1) [from [202, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28235070142522456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28235070142522456, 0.21810117362998427] ***
*** starting iteration: 2; err: [Inf, 0.28235070142522456, 0.21810117362998427] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28235070142522456, 0.21810117362998427, 0.2041138411127031] ***
*** starting iteration: 3; err: [Inf, 0.28235070142522456, 0.21810117362998427, 0.2041138411127031] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28235070142522456, 0.21810117362998427, 0.2041138411127031, 0.19775401747599244] ***
*** finished computation of 7 references, err: [Inf, 0.28235070142522456, 0.21810117362998427, 0.2041138411127031, 0.19775401747599244] ***
*** center 1: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 48, 21]]
** centroid: 2, normalized-entropy: 0.8865408928220899, [(2, 48), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [75, 1, 0]]
** centroid: 4, normalized-entropy: 0.10106696361212422, [(1, 75), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [86, 24, 0]]
** centroid: 5, normalized-entropy: 0.7568336324184036, [(1, 86), (2, 24)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [43, 34, 0]]
** centroid: 6, normalized-entropy: 0.9901226308935799, [(1, 43), (2, 34)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 84, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24542943006567658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24542943006567658, 0.218999802865088] ***
*** starting iteration: 2; err: [Inf, 0.24542943006567658, 0.218999802865088] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24542943006567658, 0.218999802865088, 0.20995825550705194] ***
*** starting iteration: 3; err: [Inf, 0.24542943006567658, 0.218999802865088, 0.20995825550705194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24542943006567658, 0.218999802865088, 0.20995825550705194, 0.20414575269445778] ***
*** finished computation of 7 references, err: [Inf, 0.24542943006567658, 0.218999802865088, 0.20995825550705194, 0.20414575269445778] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 65, 13]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 65), (3, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [75, 26, 0]]
** centroid: 2, normalized-entropy: 0.8228368841492258, [(1, 75), (2, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [11, 88, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 11), (2, 88)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [72, 19, 0]]
** centroid: 4, normalized-entropy: 0.7391658175693049, [(1, 72), (2, 19)]
*** center 5: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27307284339517357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27307284339517357, 0.24507797707431017] ***
*** starting iteration: 2; err: [Inf, 0.27307284339517357, 0.24507797707431017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27307284339517357, 0.24507797707431017, 0.23160025955643504] ***
*** starting iteration: 3; err: [Inf, 0.27307284339517357, 0.24507797707431017, 0.23160025955643504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27307284339517357, 0.24507797707431017, 0.23160025955643504, 0.2112288776487112] ***
*** finished computation of 7 references, err: [Inf, 0.27307284339517357, 0.24507797707431017, 0.23160025955643504, 0.2112288776487112] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 106, 16]]
** centroid: 1, normalized-entropy: 0.5605769426145328, [(2, 106), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [86, 53, 0]]
** centroid: 2, normalized-entropy: 0.9589514828225725, [(1, 86), (2, 53)]
*** center 3: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [54, 29, 0]]
** centroid: 5, normalized-entropy: 0.9335289015212996, [(1, 54), (2, 29)]
*** center 6: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2234435401945375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2234435401945375, 0.20009479747060685] ***
*** starting iteration: 2; err: [Inf, 0.2234435401945375, 0.20009479747060685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2234435401945375, 0.20009479747060685, 0.1945846886401996] ***
*** starting iteration: 3; err: [Inf, 0.2234435401945375, 0.20009479747060685, 0.1945846886401996] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2234435401945375, 0.20009479747060685, 0.1945846886401996, 0.19235876273363828] ***
*** finished computation of 7 references, err: [Inf, 0.2234435401945375, 0.20009479747060685, 0.1945846886401996, 0.19235876273363828] ***
*** center 1: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [29, 46, 0]]
** centroid: 2, normalized-entropy: 0.9626147059982517, [(1, 29), (2, 46)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [97, 11, 0]]
** centroid: 3, normalized-entropy: 0.4748384883008607, [(1, 97), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [27, 38, 0]]
** centroid: 4, normalized-entropy: 0.9792415350396869, [(1, 27), (2, 38)]
*** center 5: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 50, 5]]
** centroid: 6, normalized-entropy: 0.43949698692151346, [(2, 50), (3, 5)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 45, 10]]
** centroid: 7, normalized-entropy: 0.6840384356390419, [(2, 45), (3, 10)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2797898374563083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2797898374563083, 0.215805576518178] ***
*** starting iteration: 2; err: [Inf, 0.2797898374563083, 0.215805576518178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2797898374563083, 0.215805576518178, 0.1986564261056483] ***
*** starting iteration: 3; err: [Inf, 0.2797898374563083, 0.215805576518178, 0.1986564261056483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2797898374563083, 0.215805576518178, 0.1986564261056483, 0.19059176670759917] ***
*** finished computation of 7 references, err: [Inf, 0.2797898374563083, 0.215805576518178, 0.1986564261056483, 0.19059176670759917] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [66, 15, 0]]
** centroid: 1, normalized-entropy: 0.6912898694057888, [(1, 66), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [36, 11, 0]]
** centroid: 2, normalized-entropy: 0.7849920887641585, [(1, 36), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 34, 6]]
** centroid: 3, normalized-entropy: 0.6098403047164005, [(2, 34), (3, 6)]
*** center 4: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [66, 17, 0]]
** centroid: 5, normalized-entropy: 0.7314625617214586, [(1, 66), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [55, 31, 0]]
** centroid: 6, normalized-entropy: 0.9430685934712909, [(1, 55), (2, 31)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 59, 7]]
** centroid: 7, normalized-entropy: 0.48791799258948565, [(2, 59), (3, 7)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.42552452903799715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42552452903799715, 0.23770451815240085] ***
*** starting iteration: 2; err: [Inf, 0.42552452903799715, 0.23770451815240085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42552452903799715, 0.23770451815240085, 0.2069406213015318] ***
*** starting iteration: 3; err: [Inf, 0.42552452903799715, 0.23770451815240085, 0.2069406213015318] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42552452903799715, 0.23770451815240085, 0.2069406213015318, 0.19806488269381226] ***
*** finished computation of 7 references, err: [Inf, 0.42552452903799715, 0.23770451815240085, 0.2069406213015318, 0.19806488269381226] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 71, 4]]
** centroid: 1, normalized-entropy: 0.3003914173647818, [(2, 71), (3, 4)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 60, 15]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 60), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [38, 29, 0]]
** centroid: 3, normalized-entropy: 0.9869444983748495, [(1, 38), (2, 29)]
*** center 4: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [83, 11, 0]]
** centroid: 5, normalized-entropy: 0.5207375686265202, [(1, 83), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [45, 18, 0]]
** centroid: 6, normalized-entropy: 0.8631205685666311, [(1, 45), (2, 18)]
*** center 7: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2636170251481235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2636170251481235, 0.20547873286530374] ***
*** starting iteration: 2; err: [Inf, 0.2636170251481235, 0.20547873286530374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2636170251481235, 0.20547873286530374, 0.1952908732239157] ***
*** starting iteration: 3; err: [Inf, 0.2636170251481235, 0.20547873286530374, 0.1952908732239157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2636170251481235, 0.20547873286530374, 0.1952908732239157, 0.19374625453539193] ***
*** finished computation of 7 references, err: [Inf, 0.2636170251481235, 0.20547873286530374, 0.1952908732239157, 0.19374625453539193] ***
*** center 1: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 47, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [6, 85, 0]]
** centroid: 3, normalized-entropy: 0.35056382068186565, [(1, 6), (2, 85)]
*** center 4: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [70, 15, 0]]
** centroid: 5, normalized-entropy: 0.6722948170756378, [(1, 70), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [51, 21, 0]]
** centroid: 6, normalized-entropy: 0.8708644692353648, [(1, 51), (2, 21)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 27, 21]]
** centroid: 7, normalized-entropy: 0.9886994082884974, [(2, 27), (3, 21)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2614484136607498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2614484136607498, 0.2101708112899214] ***
*** starting iteration: 2; err: [Inf, 0.2614484136607498, 0.2101708112899214] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2614484136607498, 0.2101708112899214, 0.200669411374256] ***
*** starting iteration: 3; err: [Inf, 0.2614484136607498, 0.2101708112899214, 0.200669411374256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2614484136607498, 0.2101708112899214, 0.200669411374256, 0.19778792461194097] ***
*** finished computation of 7 references, err: [Inf, 0.2614484136607498, 0.2101708112899214, 0.200669411374256, 0.19778792461194097] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [36, 20, 0]]
** centroid: 1, normalized-entropy: 0.940285958670631, [(1, 36), (2, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [91, 34, 0]]
** centroid: 3, normalized-entropy: 0.8443198937773438, [(1, 91), (2, 34)]
*** center 4: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 79, 15]]
** centroid: 5, normalized-entropy: 0.6332905746550958, [(2, 79), (3, 15)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [31, 54, 0]]
** centroid: 6, normalized-entropy: 0.9465202215633438, [(1, 31), (2, 54)]
*** center 7: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2845566945448518] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2845566945448518, 0.21838585597649215] ***
*** starting iteration: 2; err: [Inf, 0.2845566945448518, 0.21838585597649215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2845566945448518, 0.21838585597649215, 0.20034767149854452] ***
*** starting iteration: 3; err: [Inf, 0.2845566945448518, 0.21838585597649215, 0.20034767149854452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2845566945448518, 0.21838585597649215, 0.20034767149854452, 0.19339639308303594] ***
*** finished computation of 7 references, err: [Inf, 0.2845566945448518, 0.21838585597649215, 0.20034767149854452, 0.19339639308303594] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [1, 69, 0]]
** centroid: 1, normalized-entropy: 0.10802319526362848, [(1, 1), (2, 69)]
*** center 2: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [57, 3, 0]]
** centroid: 4, normalized-entropy: 0.2863969571159561, [(1, 57), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [40, 11, 0]]
** centroid: 5, normalized-entropy: 0.7522121733341471, [(1, 40), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [46, 23, 0]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(1, 46), (2, 23)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 76, 16]]
** centroid: 7, normalized-entropy: 0.6665783579949205, [(2, 76), (3, 16)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.358606813069433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.358606813069433, 0.21659392531495542] ***
*** starting iteration: 2; err: [Inf, 0.358606813069433, 0.21659392531495542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.358606813069433, 0.21659392531495542, 0.1962375067472458] ***
*** starting iteration: 3; err: [Inf, 0.358606813069433, 0.21659392531495542, 0.1962375067472458] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.358606813069433, 0.21659392531495542, 0.1962375067472458, 0.18977625320851804] ***
*** finished computation of 7 references, err: [Inf, 0.358606813069433, 0.21659392531495542, 0.1962375067472458, 0.18977625320851804] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [69, 9, 0]]
** centroid: 1, normalized-entropy: 0.5159469300074472, [(1, 69), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [39, 36, 0]]
** centroid: 2, normalized-entropy: 0.998845535995202, [(1, 39), (2, 36)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [66, 1, 0]]
** centroid: 3, normalized-entropy: 0.11190990870168394, [(1, 66), (2, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [33, 44, 0]]
** centroid: 5, normalized-entropy: 0.9852281360342514, [(1, 33), (2, 44)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 38, 19]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 38), (3, 19)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30962549143377693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30962549143377693, 0.23486838711984456] ***
*** starting iteration: 2; err: [Inf, 0.30962549143377693, 0.23486838711984456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30962549143377693, 0.23486838711984456, 0.22305060059390963] ***
*** starting iteration: 3; err: [Inf, 0.30962549143377693, 0.23486838711984456, 0.22305060059390963] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30962549143377693, 0.23486838711984456, 0.22305060059390963, 0.21280326467566194] ***
*** finished computation of 7 references, err: [Inf, 0.30962549143377693, 0.23486838711984456, 0.22305060059390963, 0.21280326467566194] ***
*** center 1: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [77, 25, 0]]
** centroid: 3, normalized-entropy: 0.8034158480707552, [(1, 77), (2, 25)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [44, 64, 0]]
** centroid: 4, normalized-entropy: 0.975119064940866, [(1, 44), (2, 64)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 106, 20]]
** centroid: 5, normalized-entropy: 0.6312630180916119, [(2, 106), (3, 20)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [54, 5, 0]]
** centroid: 6, normalized-entropy: 0.4186843105268563, [(1, 54), (2, 5)]
*** center 7: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29800530669465664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29800530669465664, 0.22845732234418392] ***
*** starting iteration: 2; err: [Inf, 0.29800530669465664, 0.22845732234418392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29800530669465664, 0.22845732234418392, 0.19895219082012772] ***
*** starting iteration: 3; err: [Inf, 0.29800530669465664, 0.22845732234418392, 0.19895219082012772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29800530669465664, 0.22845732234418392, 0.19895219082012772, 0.1941673911511898] ***
*** finished computation of 7 references, err: [Inf, 0.29800530669465664, 0.22845732234418392, 0.19895219082012772, 0.1941673911511898] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 65, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 27, 16]]
** centroid: 2, normalized-entropy: 0.9522656254366643, [(2, 27), (3, 16)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [91, 2, 0]]
** centroid: 4, normalized-entropy: 0.14981136747274781, [(1, 91), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [40, 22, 0]]
** centroid: 5, normalized-entropy: 0.9383153522334071, [(1, 40), (2, 22)]
*** center 6: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [80, 10, 0]]
** centroid: 7, normalized-entropy: 0.5032583347756457, [(1, 80), (2, 10)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3146842422373593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3146842422373593, 0.2117849692888558] ***
*** starting iteration: 2; err: [Inf, 0.3146842422373593, 0.2117849692888558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3146842422373593, 0.2117849692888558, 0.19973412960022688] ***
*** starting iteration: 3; err: [Inf, 0.3146842422373593, 0.2117849692888558, 0.19973412960022688] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3146842422373593, 0.2117849692888558, 0.19973412960022688, 0.19302855740278027] ***
*** finished computation of 7 references, err: [Inf, 0.3146842422373593, 0.2117849692888558, 0.19973412960022688, 0.19302855740278027] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [58, 25, 0]]
** centroid: 1, normalized-entropy: 0.8827586787955116, [(1, 58), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [3, 86, 0]]
** centroid: 2, normalized-entropy: 0.21265863988163503, [(1, 3), (2, 86)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 3, 0]]
** centroid: 3, normalized-entropy: 0.2899860470332091, [(1, 56), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [55, 5, 0]]
** centroid: 4, normalized-entropy: 0.4138168503036336, [(1, 55), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [40, 2, 0]]
** centroid: 5, normalized-entropy: 0.2761954276479391, [(1, 40), (2, 2)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 79, 17]]
** centroid: 6, normalized-entropy: 0.673654715229001, [(2, 79), (3, 17)]
*** center 7: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24454119493439794] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24454119493439794, 0.21192823375109582] ***
*** starting iteration: 2; err: [Inf, 0.24454119493439794, 0.21192823375109582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24454119493439794, 0.21192823375109582, 0.2003607356082648] ***
*** starting iteration: 3; err: [Inf, 0.24454119493439794, 0.21192823375109582, 0.2003607356082648] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24454119493439794, 0.21192823375109582, 0.2003607356082648, 0.19669308153353632] ***
*** finished computation of 7 references, err: [Inf, 0.24454119493439794, 0.21192823375109582, 0.2003607356082648, 0.19669308153353632] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [67, 14, 0]]
** centroid: 1, normalized-entropy: 0.6641593279528072, [(1, 67), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [76, 16, 0]]
** centroid: 2, normalized-entropy: 0.6665783579949205, [(1, 76), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 52, 6]]
** centroid: 3, normalized-entropy: 0.47983202361612853, [(2, 52), (3, 6)]
*** center 4: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [40, 56, 0]]
** centroid: 5, normalized-entropy: 0.9798687566511527, [(1, 40), (2, 56)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 42, 9]]
** centroid: 6, normalized-entropy: 0.6722948170756378, [(2, 42), (3, 9)]
*** center 7: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2757735814154148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2757735814154148, 0.1957729780897498] ***
*** starting iteration: 2; err: [Inf, 0.2757735814154148, 0.1957729780897498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2757735814154148, 0.1957729780897498, 0.19419548462331296] ***
*** starting iteration: 3; err: [Inf, 0.2757735814154148, 0.1957729780897498, 0.19419548462331296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2757735814154148, 0.1957729780897498, 0.19419548462331296, 0.19368001569435] ***
*** finished computation of 7 references, err: [Inf, 0.2757735814154148, 0.1957729780897498, 0.19419548462331296, 0.19368001569435] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 77, 19]]
** centroid: 1, normalized-entropy: 0.7177418091697444, [(2, 77), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [35, 40, 0]]
** centroid: 2, normalized-entropy: 0.9967916319816367, [(1, 35), (2, 40)]
*** center 3: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [35, 33, 0]]
** centroid: 4, normalized-entropy: 0.9993759069576513, [(1, 35), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 25, 0]]
** centroid: 5, normalized-entropy: 0.8439491244805034, [(1, 67), (2, 25)]
*** center 6: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [42, 23, 0]]
** centroid: 7, normalized-entropy: 0.937456170782005, [(1, 42), (2, 23)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28799310872983186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28799310872983186, 0.2298210551608354] ***
*** starting iteration: 2; err: [Inf, 0.28799310872983186, 0.2298210551608354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28799310872983186, 0.2298210551608354, 0.20740987609326839] ***
*** starting iteration: 3; err: [Inf, 0.28799310872983186, 0.2298210551608354, 0.20740987609326839] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28799310872983186, 0.2298210551608354, 0.20740987609326839, 0.19592907523922623] ***
*** finished computation of 7 references, err: [Inf, 0.28799310872983186, 0.2298210551608354, 0.20740987609326839, 0.19592907523922623] ***
*** center 1: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [16, 77, 0]]
** centroid: 2, normalized-entropy: 0.6623570516079519, [(1, 16), (2, 77)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 62, 17]]
** centroid: 3, normalized-entropy: 0.751286576718343, [(2, 62), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [8, 46, 0]]
** centroid: 5, normalized-entropy: 0.6051865766334207, [(1, 8), (2, 46)]
*** center 6: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [63, 12, 0]]
** centroid: 7, normalized-entropy: 0.634309554640566, [(1, 63), (2, 12)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2955768315978348] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2955768315978348, 0.23322285175696014] ***
*** starting iteration: 2; err: [Inf, 0.2955768315978348, 0.23322285175696014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2955768315978348, 0.23322285175696014, 0.2054805714469403] ***
*** starting iteration: 3; err: [Inf, 0.2955768315978348, 0.23322285175696014, 0.2054805714469403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2955768315978348, 0.23322285175696014, 0.2054805714469403, 0.19565522959642112] ***
*** finished computation of 7 references, err: [Inf, 0.2955768315978348, 0.23322285175696014, 0.2054805714469403, 0.19565522959642112] ***
*** center 1: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 45, 7]]
** centroid: 2, normalized-entropy: 0.5699613760403499, [(2, 45), (3, 7)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [35, 61, 0]]
** centroid: 3, normalized-entropy: 0.9464220508835531, [(1, 35), (2, 61)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [64, 1, 0]]
** centroid: 4, normalized-entropy: 0.11467550533614682, [(1, 64), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 7, 0]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(1, 56), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [71, 5, 0]]
** centroid: 6, normalized-entropy: 0.35001059292688486, [(1, 71), (2, 5)]
*** center 7: selecting labels [1, 2, 3] (freq >= 1) [from [2, 72, 1]]
** centroid: 7, normalized-entropy: 0.17604455772148478, [(1, 2), (2, 72), (3, 1)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2684221865311265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2684221865311265, 0.22234348749835045] ***
*** starting iteration: 2; err: [Inf, 0.2684221865311265, 0.22234348749835045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2684221865311265, 0.22234348749835045, 0.21146379971876741] ***
*** starting iteration: 3; err: [Inf, 0.2684221865311265, 0.22234348749835045, 0.21146379971876741] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2684221865311265, 0.22234348749835045, 0.21146379971876741, 0.20204919524490833] ***
*** finished computation of 7 references, err: [Inf, 0.2684221865311265, 0.22234348749835045, 0.21146379971876741, 0.20204919524490833] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [50, 57, 0]]
** centroid: 1, normalized-entropy: 0.9969105350354788, [(1, 50), (2, 57)]
*** center 2: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 98, 14]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(2, 98), (3, 14)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [50, 41, 0]]
** centroid: 4, normalized-entropy: 0.9929326437363045, [(1, 50), (2, 41)]
*** center 5: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [54, 4, 0]]
** centroid: 6, normalized-entropy: 0.36205125173399805, [(1, 54), (2, 4)]
*** center 7: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33673461999930443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33673461999930443, 0.22849596210569142] ***
*** starting iteration: 2; err: [Inf, 0.33673461999930443, 0.22849596210569142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33673461999930443, 0.22849596210569142, 0.2197717942856252] ***
*** starting iteration: 3; err: [Inf, 0.33673461999930443, 0.22849596210569142, 0.2197717942856252] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33673461999930443, 0.22849596210569142, 0.2197717942856252, 0.20976364189945162] ***
*** finished computation of 7 references, err: [Inf, 0.33673461999930443, 0.22849596210569142, 0.2197717942856252, 0.20976364189945162] ***
*** center 1: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [9, 37, 0]]
** centroid: 2, normalized-entropy: 0.7131467486384921, [(1, 9), (2, 37)]
*** center 3: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [6, 73, 0]]
** centroid: 4, normalized-entropy: 0.3877431810559867, [(1, 6), (2, 73)]
*** center 5: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 6: selecting labels [1, 2, 3] (freq >= 1) [from [5, 81, 15]]
** centroid: 6, normalized-entropy: 0.5543343199960842, [(1, 5), (2, 81), (3, 15)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [85, 1, 0]]
** centroid: 7, normalized-entropy: 0.09140162014739266, [(1, 85), (2, 1)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2577653380390257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2577653380390257, 0.209238351049833] ***
*** starting iteration: 2; err: [Inf, 0.2577653380390257, 0.209238351049833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2577653380390257, 0.209238351049833, 0.20093648163694888] ***
*** starting iteration: 3; err: [Inf, 0.2577653380390257, 0.209238351049833, 0.20093648163694888] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2577653380390257, 0.209238351049833, 0.20093648163694888, 0.1956561487428844] ***
*** finished computation of 7 references, err: [Inf, 0.2577653380390257, 0.209238351049833, 0.20093648163694888, 0.1956561487428844] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 66, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [73, 28, 0]]
** centroid: 2, normalized-entropy: 0.8516458330898723, [(1, 73), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 71, 16]]
** centroid: 3, normalized-entropy: 0.6885521684368613, [(2, 71), (3, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [44, 30, 0]]
** centroid: 4, normalized-entropy: 0.9740248644357521, [(1, 44), (2, 30)]
*** center 5: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [45, 2, 0]]
** centroid: 6, normalized-entropy: 0.2538784402981617, [(1, 45), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [27, 7, 0]]
** centroid: 7, normalized-entropy: 0.7335379291086666, [(1, 27), (2, 7)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2871289461478591] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2871289461478591, 0.211842948846519] ***
*** starting iteration: 2; err: [Inf, 0.2871289461478591, 0.211842948846519] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2871289461478591, 0.211842948846519, 0.19189114039810373] ***
*** starting iteration: 3; err: [Inf, 0.2871289461478591, 0.211842948846519, 0.19189114039810373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2871289461478591, 0.211842948846519, 0.19189114039810373, 0.18980343058984728] ***
*** finished computation of 7 references, err: [Inf, 0.2871289461478591, 0.211842948846519, 0.19189114039810373, 0.18980343058984728] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [58, 17, 0]]
** centroid: 1, normalized-entropy: 0.7721551435804817, [(1, 58), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [77, 28, 0]]
** centroid: 2, normalized-entropy: 0.8366407419411671, [(1, 77), (2, 28)]
*** center 3: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [43, 21, 0]]
** centroid: 4, normalized-entropy: 0.912999213585247, [(1, 43), (2, 21)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 62, 1]]
** centroid: 5, normalized-entropy: 0.11759466565886466, [(2, 62), (3, 1)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 60, 14]]
** centroid: 6, normalized-entropy: 0.699772221773307, [(2, 60), (3, 14)]
*** center 7: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27540787421539425] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27540787421539425, 0.2037013537622988] ***
*** starting iteration: 2; err: [Inf, 0.27540787421539425, 0.2037013537622988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27540787421539425, 0.2037013537622988, 0.1965590919330716] ***
*** starting iteration: 3; err: [Inf, 0.27540787421539425, 0.2037013537622988, 0.1965590919330716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27540787421539425, 0.2037013537622988, 0.1965590919330716, 0.19419615983124822] ***
*** finished computation of 7 references, err: [Inf, 0.27540787421539425, 0.2037013537622988, 0.1965590919330716, 0.19419615983124822] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [13, 56, 0]]
** centroid: 1, normalized-entropy: 0.698124573139618, [(1, 13), (2, 56)]
*** center 2: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 78, 19]]
** centroid: 3, normalized-entropy: 0.7136036068604937, [(2, 78), (3, 19)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [41, 24, 0]]
** centroid: 4, normalized-entropy: 0.9500796252338518, [(1, 41), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [70, 39, 0]]
** centroid: 5, normalized-entropy: 0.9408403089808224, [(1, 70), (2, 39)]
*** center 6: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23500979797542096] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23500979797542096, 0.19873995737545191] ***
*** starting iteration: 2; err: [Inf, 0.23500979797542096, 0.19873995737545191] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23500979797542096, 0.19873995737545191, 0.19598983478546142] ***
*** starting iteration: 3; err: [Inf, 0.23500979797542096, 0.19873995737545191, 0.19598983478546142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23500979797542096, 0.19873995737545191, 0.19598983478546142, 0.19544616528972983] ***
*** finished computation of 7 references, err: [Inf, 0.23500979797542096, 0.19873995737545191, 0.19598983478546142, 0.19544616528972983] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [3, 81, 0]]
** centroid: 1, normalized-entropy: 0.2222848306856879, [(1, 3), (2, 81)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [28, 34, 0]]
** centroid: 2, normalized-entropy: 0.9932338197397066, [(1, 28), (2, 34)]
*** center 3: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [45, 31, 0]]
** centroid: 4, normalized-entropy: 0.9753817903274211, [(1, 45), (2, 31)]
*** center 5: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [94, 1, 0]]
** centroid: 6, normalized-entropy: 0.08426242877623306, [(1, 94), (2, 1)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 63, 14]]
** centroid: 7, normalized-entropy: 0.6840384356390419, [(2, 63), (3, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24561679534427822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24561679534427822, 0.19704615946859122] ***
*** starting iteration: 2; err: [Inf, 0.24561679534427822, 0.19704615946859122] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24561679534427822, 0.19704615946859122, 0.192061198473908] ***
*** starting iteration: 3; err: [Inf, 0.24561679534427822, 0.19704615946859122, 0.192061198473908] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24561679534427822, 0.19704615946859122, 0.192061198473908, 0.18930068466812372] ***
*** finished computation of 7 references, err: [Inf, 0.24561679534427822, 0.19704615946859122, 0.192061198473908, 0.18930068466812372] ***
*** center 1: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [25, 31, 0]]
** centroid: 2, normalized-entropy: 0.9917033083725819, [(1, 25), (2, 31)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 35, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 70), (2, 35)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [68, 3, 0]]
** centroid: 4, normalized-entropy: 0.25253077151613923, [(1, 68), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 6, 0]]
** centroid: 5, normalized-entropy: 0.5830194167347007, [(1, 37), (2, 6)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 59, 20]]
** centroid: 7, normalized-entropy: 0.8162554088088008, [(2, 59), (3, 20)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3709436151897535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3709436151897535, 0.22799158201552927] ***
*** starting iteration: 2; err: [Inf, 0.3709436151897535, 0.22799158201552927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3709436151897535, 0.22799158201552927, 0.20630089678242802] ***
*** starting iteration: 3; err: [Inf, 0.3709436151897535, 0.22799158201552927, 0.20630089678242802] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3709436151897535, 0.22799158201552927, 0.20630089678242802, 0.19971108031272888] ***
*** finished computation of 7 references, err: [Inf, 0.3709436151897535, 0.22799158201552927, 0.20630089678242802, 0.19971108031272888] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [5, 60, 0]]
** centroid: 1, normalized-entropy: 0.3912435636292556, [(1, 5), (2, 60)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 73, 12]]
** centroid: 2, normalized-entropy: 0.5873116089977589, [(2, 73), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [69, 14, 0]]
** centroid: 3, normalized-entropy: 0.6546640527143932, [(1, 69), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [43, 46, 0]]
** centroid: 4, normalized-entropy: 0.9991802351145687, [(1, 43), (2, 46)]
*** center 5: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22415237822569906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22415237822569906, 0.1889677194347605] ***
*** starting iteration: 2; err: [Inf, 0.22415237822569906, 0.1889677194347605] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22415237822569906, 0.1889677194347605, 0.18388331906870006] ***
*** starting iteration: 3; err: [Inf, 0.22415237822569906, 0.1889677194347605, 0.18388331906870006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22415237822569906, 0.1889677194347605, 0.18388331906870006, 0.1830359964929521] ***
*** finished computation of 7 references, err: [Inf, 0.22415237822569906, 0.1889677194347605, 0.18388331906870006, 0.1830359964929521] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [33, 38, 0]]
** centroid: 1, normalized-entropy: 0.9964196342978481, [(1, 33), (2, 38)]
*** center 2: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 20, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 60), (2, 20)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [9, 51, 0]]
** centroid: 4, normalized-entropy: 0.6098403047164005, [(1, 9), (2, 51)]
*** center 5: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 60, 12]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 60), (3, 12)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2405798638528213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2405798638528213, 0.19484019087255] ***
*** starting iteration: 2; err: [Inf, 0.2405798638528213, 0.19484019087255] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2405798638528213, 0.19484019087255, 0.1877667357865721] ***
*** starting iteration: 3; err: [Inf, 0.2405798638528213, 0.19484019087255, 0.1877667357865721] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2405798638528213, 0.19484019087255, 0.1877667357865721, 0.18693903849832713] ***
*** finished computation of 7 references, err: [Inf, 0.2405798638528213, 0.19484019087255, 0.1877667357865721, 0.18693903849832713] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 67, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [42, 44, 0]]
** centroid: 3, normalized-entropy: 0.9996098363678071, [(1, 42), (2, 44)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [53, 11, 0]]
** centroid: 4, normalized-entropy: 0.6619760641115651, [(1, 53), (2, 11)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 45, 17]]
** centroid: 5, normalized-entropy: 0.8474179614176633, [(2, 45), (3, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [87, 10, 0]]
** centroid: 6, normalized-entropy: 0.478723511385963, [(1, 87), (2, 10)]
*** center 7: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26293175390176476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26293175390176476, 0.22436399367824197] ***
*** starting iteration: 2; err: [Inf, 0.26293175390176476, 0.22436399367824197] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26293175390176476, 0.22436399367824197, 0.21412372741103172] ***
*** starting iteration: 3; err: [Inf, 0.26293175390176476, 0.22436399367824197, 0.21412372741103172] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26293175390176476, 0.22436399367824197, 0.21412372741103172, 0.2061354565322399] ***
*** finished computation of 7 references, err: [Inf, 0.26293175390176476, 0.22436399367824197, 0.21412372741103172, 0.2061354565322399] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [29, 79, 0]]
** centroid: 1, normalized-entropy: 0.8393307617496655, [(1, 29), (2, 79)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 87, 13]]
** centroid: 2, normalized-entropy: 0.557438185027989, [(2, 87), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 12, 0]]
** centroid: 3, normalized-entropy: 0.644694043811662, [(1, 61), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [79, 4, 0]]
** centroid: 4, normalized-entropy: 0.27866980356389914, [(1, 79), (2, 4)]
*** center 5: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30394975857250395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30394975857250395, 0.24931867587566375] ***
*** starting iteration: 2; err: [Inf, 0.30394975857250395, 0.24931867587566375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30394975857250395, 0.24931867587566375, 0.2255382578149438] ***
*** starting iteration: 3; err: [Inf, 0.30394975857250395, 0.24931867587566375, 0.2255382578149438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30394975857250395, 0.24931867587566375, 0.2255382578149438, 0.21787848899140955] ***
*** finished computation of 7 references, err: [Inf, 0.30394975857250395, 0.24931867587566375, 0.2255382578149438, 0.21787848899140955] ***
*** center 1: selecting labels [1] (freq >= 1) [from [134, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [22, 49, 13]]
** centroid: 2, normalized-entropy: 0.8684347658316134, [(1, 22), (2, 49), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [12, 60, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 12), (2, 60)]
*** center 4: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 64, 1]]
** centroid: 5, normalized-entropy: 0.11467550533614682, [(2, 64), (3, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [38, 6, 0]]
** centroid: 6, normalized-entropy: 0.5746356978376794, [(1, 38), (2, 6)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [48, 7, 0]]
** centroid: 7, normalized-entropy: 0.54991090463341, [(1, 48), (2, 7)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21236777650937438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21236777650937438, 0.198814945331309] ***
*** starting iteration: 2; err: [Inf, 0.21236777650937438, 0.198814945331309] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21236777650937438, 0.198814945331309, 0.19214063166826964] ***
*** starting iteration: 3; err: [Inf, 0.21236777650937438, 0.198814945331309, 0.19214063166826964] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21236777650937438, 0.198814945331309, 0.19214063166826964, 0.19002033734042198] ***
*** finished computation of 7 references, err: [Inf, 0.21236777650937438, 0.198814945331309, 0.19214063166826964, 0.19002033734042198] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [17, 49, 0]]
** centroid: 1, normalized-entropy: 0.8230660790114689, [(1, 17), (2, 49)]
*** center 2: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [41, 21, 0]]
** centroid: 3, normalized-entropy: 0.9235785996175947, [(1, 41), (2, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 67, 18]]
** centroid: 6, normalized-entropy: 0.7448423974714387, [(2, 67), (3, 18)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [57, 40, 0]]
** centroid: 7, normalized-entropy: 0.9777287741161507, [(1, 57), (2, 40)]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 375,3 => 32,1 => 593), Dict(2 => 376,3 => 34,1 => 590))
[ Info: ===== scores for single classifier: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9613314312382003,"macro_f1":0.9270082545614957,"accuracy":0.961,"class_f1":{"2":0.9476510067114094,"3":0.8571428571428571,"1":0.9762308998302207},"class_precision":{"2":0.9566395663956639,"3":0.7674418604651163,"1":0.9778911564625851},"class_recall":{"2":0.9388297872340425,"3":0.9705882352941176,"1":0.9745762711864406}}
[ Info: ===== scores for 1: {"micro_f1":0.975,"precision":0.975,"recall":0.975,"macro_recall":0.980409304002885,"macro_f1":0.9525969549220057,"accuracy":0.975,"class_f1":{"2":0.9663526244952894,"3":0.9066666666666667,"1":0.9847715736040609},"class_precision":{"2":0.9782016348773842,"3":0.8292682926829268,"1":0.9831081081081081},"class_recall":{"2":0.9547872340425532,"3":1.0,"1":0.9864406779661017}}
[ Info: ===== scores for 5: {"micro_f1":0.976,"precision":0.976,"recall":0.976,"macro_recall":0.9819389349681452,"macro_f1":0.9391970794088053,"accuracy":0.976,"class_f1":{"2":0.9679144385026738,"3":0.8607594936708861,"1":0.988917306052856},"class_precision":{"2":0.9731182795698925,"3":0.7555555555555555,"1":0.9948542024013722},"class_recall":{"2":0.9627659574468085,"3":1.0,"1":0.9830508474576272}}
[ Info: ===== scores for 7: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9812086789277558,"macro_f1":0.9440041277732263,"accuracy":0.973,"class_f1":{"2":0.964332892998679,"3":0.8831168831168831,"1":0.9845626072041167},"class_precision":{"2":0.958005249343832,"3":0.7906976744186046,"1":0.9965277777777778},"class_recall":{"2":0.9707446808510638,"3":1.0,"1":0.9728813559322034}}
[ Info: ===== scores for 9: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9762110830628682,"macro_f1":0.9326997253457702,"accuracy":0.967,"class_f1":{"2":0.9561752988047808,"3":0.8607594936708861,"1":0.9811643835616439},"class_precision":{"2":0.9549071618037135,"3":0.7555555555555555,"1":0.9913494809688581},"class_recall":{"2":0.9574468085106383,"3":1.0,"1":0.9711864406779661}}
[ Info: ===== scores for 11: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9756461113114557,"macro_f1":0.9319860002681685,"accuracy":0.966,"class_f1":{"2":0.9549071618037136,"3":0.8607594936708861,"1":0.9802913453299058},"class_precision":{"2":0.9523809523809523,"3":0.7555555555555555,"1":0.9913344887348353},"class_recall":{"2":0.9574468085106383,"3":1.0,"1":0.9694915254237289}}
(score = 0.975, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.98, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.98, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.98, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.98,"k":3,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.98,"precision":0.98,"recall":0.98,"macro_recall":0.9848419281163601,"macro_f1":0.949005737691595,"accuracy":0.98,"class_f1":{"2":0.9732620320855615,"3":0.8831168831168831,"1":0.9906382978723405},"class_precision":{"2":0.978494623655914,"3":0.7906976744186046,"1":0.9948717948717949},"class_recall":{"2":0.9680851063829787,"3":1.0,"1":0.9864406779661017}}
Test Summary: | Pass  Total
AKNC          |    8      8
[258, 1, 5, 2, 2, 3, 1, 6, 3, 2, 11, 8, 6, 7, 8, 3, 2, 6, 36, 3, 4, 13, 4, 5, 5, 8, 20, 9, 5, 8, 6, 33, 40, 1, 7, 3, 1, 5, 1, 2, 19, 6, 4, 9, 41, 19, 6, 2, 30, 7, 12, 5, 5, 14, 11, 8, 35, 15, 32, 28, 3, 15, 12, 9, 17, 6, 3, 1, 4, 13, 3, 19, 5, 4, 17, 1, 34, 7, 16, 30, 6, 15, 10, 844, 22, 124, 79, 1, 61, 53, 4, 48, 20, 7, 38, 20, 18, 9, 18, 11, 20, 3, 17, 7, 53, 15, 16, 22, 18, 4, 6, 19, 19, 4, 8, 6, 3, 18, 3, 76, 5, 9, 26, 82, 33, 10, 6, 5, 9, 4, 5, 16, 13, 2, 18, 10, 92, 188, 168, 9, 2, 29, 6, 1, 27, 45, 33, 15, 31, 14, 4, 42, 8, 5, 67, 20, 11, 16, 4, 33, 67, 45, 3, 8, 4, 15, 17, 7, 17, 12, 22, 32, 2, 72, 5, 253, 122, 4, 22, 17, 138, 4, 6, 25, 44, 35, 20, 8, 11, 7, 40, 18, 11, 8, 17, 3, 6, 135, 29, 148, 2, 13, 16, 25, 23, 3, 36, 1, 6, 29, 2, 53, 22, 24, 36, 211, 15, 32, 217, 26, 21, 168, 41, 9, 2, 25, 10, 7, 33, 9, 11, 7, 10, 33, 17, 4, 7, 19, 28, 14, 29, 63, 34, 25, 23, 366, 11, 12, 9, 28, 1, 15, 6, 49, 40, 8, 80, 53, 26, 33, 7, 90, 51, 10, 1016, 13, 137, 13, 227, 10, 2, 8, 6, 3, 59, 7, 32, 36, 15, 6, 7, 50, 28, 83, 28, 19, 13, 132, 7, 31, 32, 20, 30, 18, 1, 41, 45, 3, 22, 57]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6659999999999999, speedup = 0.3150174684709897, eval_ratio = 0.094773)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":null,"recall":0.36197916666666685,"f1":null,"seconds":0.0001839064061641693,"exhaustive_search_seconds":0.0003750063478946686,"evaluations":502.7578125,"distances_sum":1740.9296644230749}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5312499999999999,"recall":0.5312499999999999,"f1":null,"seconds":0.00032280944287776947,"exhaustive_search_seconds":0.0003750063478946686,"evaluations":698.6796875,"distances_sum":1719.2406522555432}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6527777777777773,"recall":0.6527777777777773,"f1":0.6527777777777773,"seconds":0.00043696537613868713,"exhaustive_search_seconds":0.0003750063478946686,"evaluations":871.8515625,"distances_sum":1645.0412255111037}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7282986111111106,"recall":0.7282986111111106,"f1":0.7282986111111106,"seconds":0.0009056702256202698,"exhaustive_search_seconds":0.0003750063478946686,"evaluations":1041.15625,"distances_sum":1615.7798369728432}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7934027777777771,"recall":0.7934027777777771,"f1":0.7934027777777771,"seconds":0.0009866822510957718,"exhaustive_search_seconds":0.0003750063478946686,"evaluations":1200.609375,"distances_sum":1595.1605200179429}
KCenters.DeloneInvIndex> reached performance {"precision":0.8307291666666657,"recall":0.8307291666666657,"f1":0.8307291666666657,"seconds":0.0010866113007068634,"exhaustive_search_seconds":0.0003750063478946686,"evaluations":1322.484375,"distances_sum":1585.754731825018}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8530000000000002, speedup = 0.38806408348735877, eval_ratio = 0.141787)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
