Julia Version 1.5.0-DEV.607
Commit 8a5b3233a1 (2020-04-09 12:28 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Reexport ──────────────────── v0.2.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed KCenters ──────────────────── v0.2.2
  Installed Tables ────────────────────── v1.0.3
  Installed JSON ──────────────────────── v0.21.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed Missings ──────────────────── v0.4.3
  Installed TableTraits ───────────────── v1.0.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Parsers ───────────────────── v1.0.1
  Installed Compat ────────────────────── v3.8.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed OrderedCollections ────────── v1.1.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed StatsBase ─────────────────── v0.32.2
  Installed DataStructures ────────────── v0.17.11
  Installed MLDataPattern ─────────────── v0.5.1
  Installed CategoricalArrays ─────────── v0.7.7
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataFrames ────────────────── v0.20.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.11
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.1
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_oDIV1I/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_oDIV1I/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.11
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.1
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9326678744951884
[ Info: 0.8326150393486023
[ Info: 0.5559340282777945
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3256980268408855
mean(cdnet.distances) = 0.38739673609534897
mean(crand.distances) = 0.34429872597257294
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5302734375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5302734375,"f1":null,"seconds":3.1460076570510864e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.1875,"distances_sum":1489.7950716301523}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5302734375,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5302734375,"f1":null,"seconds":3.1460076570510864e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.1875,"distances_sum":1489.7950716301523}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8770724067599077,"seconds":6.258487701416016e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.375,"distances_sum":2445.962717435412}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.913352793040294,"seconds":6.269663572311401e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.6328125,"distances_sum":2590.339264600943}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8486328125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8486328125,"f1":0.913352793040294,"seconds":6.269663572311401e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.6328125,"distances_sum":2590.339264600943}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9686240842490845,"seconds":7.020309567451477e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8828125,"distances_sum":3085.6869196252437}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.973792353479854,"seconds":6.822869181632996e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.9140625,"distances_sum":3119.055410356633}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.942453900266401,"seconds":6.619840860366821e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.75,"distances_sum":2874.8916790301796}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9323775183150188,"seconds":6.6123902797698975e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.7265625,"distances_sum":2787.3654731785123}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.973792353479854,"seconds":6.822869181632996e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.9140625,"distances_sum":3119.055410356633}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.973792353479854,"seconds":6.822869181632996e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.9140625,"distances_sum":3119.055410356633}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8722678363303372,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.9371509552001953e-6,"evaluations":8.0859375,"distances_sum":2152.204001193079}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5537109375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5537109375,"f1":0.6951040279165285,"seconds":5.081295967102051e-6,"exhaustive_search_seconds":1.9371509552001953e-6,"evaluations":7.265625,"distances_sum":1471.2636393436771}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8722678363303372,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.9371509552001953e-6,"evaluations":8.0859375,"distances_sum":2152.204001193079}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.927710310522811,"seconds":6.51925802230835e-6,"exhaustive_search_seconds":1.9371509552001953e-6,"evaluations":8.53125,"distances_sum":2629.695931725285}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9068056943056948,"seconds":6.683170795440674e-6,"exhaustive_search_seconds":1.9371509552001953e-6,"evaluations":8.578125,"distances_sum":2428.277074309389}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9086257492507501,"seconds":6.426125764846802e-6,"exhaustive_search_seconds":1.9371509552001953e-6,"evaluations":8.671875,"distances_sum":2425.9770612220727}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.876953125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.876953125,"f1":0.927710310522811,"seconds":6.51925802230835e-6,"exhaustive_search_seconds":1.9371509552001953e-6,"evaluations":8.53125,"distances_sum":2629.695931725285}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9642342032967036,"seconds":7.694587111473083e-6,"exhaustive_search_seconds":1.9371509552001953e-6,"evaluations":8.921875,"distances_sum":2846.4347633978214}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9690132783882788,"seconds":6.573274731636047e-6,"exhaustive_search_seconds":1.9371509552001953e-6,"evaluations":8.90625,"distances_sum":2890.355374822546}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9662030677655682,"seconds":7.277354598045349e-6,"exhaustive_search_seconds":1.9371509552001953e-6,"evaluations":8.90625,"distances_sum":2849.5285539812785}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.954824862637363,"seconds":6.7930668592453e-6,"exhaustive_search_seconds":1.9371509552001953e-6,"evaluations":8.8203125,"distances_sum":2806.3087521964453}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9597699175824183,"seconds":7.187947630882263e-6,"exhaustive_search_seconds":1.9371509552001953e-6,"evaluations":8.7890625,"distances_sum":2831.2618183960385}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9620592948717952,"seconds":6.724148988723755e-6,"exhaustive_search_seconds":1.9371509552001953e-6,"evaluations":8.828125,"distances_sum":2884.2249983990187}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9304804570429577,"seconds":6.506219506263733e-6,"exhaustive_search_seconds":1.9371509552001953e-6,"evaluations":8.5546875,"distances_sum":2619.7166773969357}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690132783882788,"seconds":6.573274731636047e-6,"exhaustive_search_seconds":1.9371509552001953e-6,"evaluations":8.90625,"distances_sum":2890.355374822546}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690132783882788,"seconds":6.573274731636047e-6,"exhaustive_search_seconds":1.9371509552001953e-6,"evaluations":8.90625,"distances_sum":2890.355374822546}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.533203125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.533203125,"f1":0.678769147519148,"seconds":4.956498742103577e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":7.140625,"distances_sum":1438.5878089248426}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8520774364524373,"seconds":6.366521120071411e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.1953125,"distances_sum":2088.0466180435014}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.8520774364524373,"seconds":6.366521120071411e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.1953125,"distances_sum":2088.0466180435014}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8595128829503836,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.171875,"distances_sum":2119.8897782360145}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9252289377289382,"seconds":6.6552311182022095e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.8203125,"distances_sum":2536.3856476009787}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9477163461538467,"seconds":6.73346221446991e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.75,"distances_sum":2749.804566943857}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8676141566766575,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.2421875,"distances_sum":2172.406635286365}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.93035193972694,"seconds":6.73346221446991e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.7265625,"distances_sum":2622.7168226709773}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9477163461538467,"seconds":6.73346221446991e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.75,"distances_sum":2749.804566943857}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9533711080586086,"seconds":7.040798664093018e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.8125,"distances_sum":2762.5490418038985}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9680460164835168,"seconds":6.917864084243774e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.875,"distances_sum":2886.231212111233}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9734375000000004,"seconds":6.8694353103637695e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.8515625,"distances_sum":2949.2632016116077}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9731799450549454,"seconds":6.668269634246826e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.9140625,"distances_sum":2925.991422080676}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9626316391941395,"seconds":7.113441824913025e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.8203125,"distances_sum":2851.965189368405}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9777186355311358,"seconds":6.92903995513916e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.90625,"distances_sum":2967.6311065006757}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9777186355311358,"seconds":6.92903995513916e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.90625,"distances_sum":2967.6311065006757}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9777186355311358,"seconds":6.92903995513916e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.90625,"distances_sum":2967.6311065006757}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.568359375,"f1":null,"seconds":4.978850483894348e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":6.96875,"distances_sum":1472.507797013152}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8729369588744598,"seconds":7.715076208114624e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":8.2421875,"distances_sum":2253.2007393658077}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.79296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.79296875,"f1":0.8729369588744598,"seconds":7.715076208114624e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":8.2421875,"distances_sum":2253.2007393658077}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9098932317682323,"seconds":6.252899765968323e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":8.5234375,"distances_sum":2447.0790618159403}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9386332417582423,"seconds":6.755813956260681e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":8.703125,"distances_sum":2680.867009756317}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.930763507326008,"seconds":6.688758730888367e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":8.59375,"distances_sum":2664.9196870177325}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9386332417582423,"seconds":6.755813956260681e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":8.703125,"distances_sum":2680.867009756317}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9533539377289384,"seconds":7.187947630882263e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":8.8125,"distances_sum":2802.5876252704725}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9614812271062273,"seconds":6.506219506263733e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":8.8359375,"distances_sum":2822.2274226969976}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9618532509157514,"seconds":6.36465847492218e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":8.8359375,"distances_sum":2860.3226472248984}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9618532509157514,"seconds":6.36465847492218e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":8.8359375,"distances_sum":2860.3226472248984}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9618532509157514,"seconds":6.36465847492218e-6,"exhaustive_search_seconds":1.8514692783355713e-6,"evaluations":8.8359375,"distances_sum":2860.3226472248984}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.427734375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.427734375,"f1":null,"seconds":4.256144165992737e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":6.9765625,"distances_sum":1081.9982636393902}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6748046875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6748046875,"f1":0.793762314074815,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.96875,"distances_sum":1790.3114529967863}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6748046875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6748046875,"f1":0.793762314074815,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.96875,"distances_sum":1790.3114529967863}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9379006410256415,"seconds":6.280839443206787e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6484375,"distances_sum":2684.3007442605076}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9031026265401271,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.328125,"distances_sum":2402.744560647168}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9371394230769238,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6640625,"distances_sum":2710.244345690377}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9379006410256415,"seconds":6.280839443206787e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6484375,"distances_sum":2684.3007442605076}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9727506868131872,"seconds":6.761401891708374e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.921875,"distances_sum":2946.0529813190346}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9523179945054951,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.78125,"distances_sum":2819.8929963810147}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9461397977022982,"seconds":6.726011633872986e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.7109375,"distances_sum":2798.490868192446}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9723614926739931,"seconds":6.837770342826843e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.90625,"distances_sum":2943.696248562596}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9759672619047624,"seconds":6.543472409248352e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9375,"distances_sum":2980.07106809507}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9759672619047624,"seconds":6.543472409248352e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9375,"distances_sum":2980.07106809507}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9759672619047624,"seconds":6.543472409248352e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9375,"distances_sum":2980.07106809507}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8050610847485853,"seconds":5.602836608886719e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.421875,"distances_sum":1740.2055481975863}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3828125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3828125,"f1":null,"seconds":4.0549784898757935e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.359375,"distances_sum":967.4495930955082}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6923828125,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6923828125,"f1":0.8050610847485853,"seconds":5.602836608886719e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.421875,"distances_sum":1740.2055481975863}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9275214368964376,"seconds":6.502494215965271e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.796875,"distances_sum":2453.432910514409}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8759765625,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8759765625,"f1":0.9275214368964376,"seconds":6.502494215965271e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.796875,"distances_sum":2453.432910514409}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8759765625,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8759765625,"f1":0.9275214368964376,"seconds":6.502494215965271e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.796875,"distances_sum":2453.432910514409}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8759765625,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8759765625,"f1":0.9275214368964376,"seconds":6.502494215965271e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.796875,"distances_sum":2453.432910514409}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.380859375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.380859375,"f1":null,"seconds":3.891065716743469e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":5.921875,"distances_sum":1024.0657826852669}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.380859375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.380859375,"f1":null,"seconds":3.891065716743469e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":5.921875,"distances_sum":1024.0657826852669}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.380859375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.380859375,"f1":null,"seconds":3.891065716743469e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":5.921875,"distances_sum":1024.0657826852669}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.380859375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.380859375,"f1":null,"seconds":3.891065716743469e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":5.921875,"distances_sum":1024.0657826852669}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5341796875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5341796875,"f1":null,"seconds":4.580244421958923e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":6.8046875,"distances_sum":901.9082081317173}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8504583957708965,"seconds":1.9982457160949707e-5,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":7.796875,"distances_sum":1427.1486361650122}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.751953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.751953125,"f1":0.8504583957708965,"seconds":1.9982457160949707e-5,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":7.796875,"distances_sum":1427.1486361650122}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7978515625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.7978515625,"f1":0.8795220404595413,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.0078125,"distances_sum":1540.051750656381}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7978515625,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.7978515625,"f1":0.8795220404595413,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.0078125,"distances_sum":1540.051750656381}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9335940101565109,"seconds":6.115064024925232e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.6328125,"distances_sum":1767.0252148663858}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9610748626373629,"seconds":6.4838677644729614e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.8125,"distances_sum":1898.7015650603603}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9597126831501834,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.765625,"distances_sum":1908.3086306402845}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9452838827838833,"seconds":6.109476089477539e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.7578125,"distances_sum":1811.0082815986286}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9460279304029309,"seconds":6.241723895072937e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.6640625,"distances_sum":1846.4785220922583}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9610748626373629,"seconds":6.4838677644729614e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.8125,"distances_sum":1898.7015650603603}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9610748626373629,"seconds":6.4838677644729614e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.8125,"distances_sum":1898.7015650603603}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8534038877788886,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.09375,"distances_sum":1421.3660041039818}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5546875,"f1":0.6965114746364753,"seconds":4.732981324195862e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":7.1796875,"distances_sum":961.43621930245}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.8534038877788886,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.09375,"distances_sum":1421.3660041039818}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9357803654678661,"seconds":6.18956983089447e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.8125,"distances_sum":1807.7499902997392}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9471840659340665,"seconds":6.7390501499176025e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.8203125,"distances_sum":1880.2196095073584}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9471840659340665,"seconds":6.7390501499176025e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.8203125,"distances_sum":1880.2196095073584}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9548248626373632,"seconds":6.8303197622299194e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.828125,"distances_sum":1949.0516804792305}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9587282509157514,"seconds":6.794929504394531e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.890625,"distances_sum":1944.964202460573}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9740556318681323,"seconds":6.6980719566345215e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.921875,"distances_sum":2040.6031181152075}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9665808150183154,"seconds":6.796792149543762e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.8671875,"distances_sum":1995.6857983493442}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9727678571428574,"seconds":6.98678195476532e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.8984375,"distances_sum":2048.859240583951}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9740556318681323,"seconds":6.6980719566345215e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.921875,"distances_sum":2040.6031181152075}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9740556318681323,"seconds":6.6980719566345215e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.921875,"distances_sum":2040.6031181152075}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.400390625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.400390625,"f1":null,"seconds":4.218891263008118e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":6.1171875,"distances_sum":823.544472840478}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.365234375, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.365234375,"f1":null,"seconds":4.025176167488098e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":5.90625,"distances_sum":707.0354864751605}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7867533508158514,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.5078125,"distances_sum":1405.2106209153767}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.666015625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.666015625,"f1":0.7867533508158514,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.5078125,"distances_sum":1405.2106209153767}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6748046875, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.6748046875,"f1":0.7933883824508833,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.4140625,"distances_sum":1387.480220258124}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8625062437562447,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.0,"distances_sum":1671.3530712188906}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.952295100732601,"seconds":7.024034857749939e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.84375,"distances_sum":2209.262270430719}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9095956127206136,"seconds":6.234273314476013e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.3203125,"distances_sum":1920.3486905404009}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8430309274059281,"seconds":5.93625009059906e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.9296875,"distances_sum":1596.469258424806}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.952295100732601,"seconds":7.024034857749939e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.84375,"distances_sum":2209.262270430719}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9548763736263741,"seconds":6.34416937828064e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.890625,"distances_sum":2190.0885521431865}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9548763736263741,"seconds":6.34416937828064e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.890625,"distances_sum":2190.0885521431865}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9548763736263741,"seconds":6.34416937828064e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.890625,"distances_sum":2190.0885521431865}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55859375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.55859375,"f1":0.6997424450549455,"seconds":4.677101969718933e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":6.984375,"distances_sum":1152.7370506050283}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.55859375,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.55859375,"f1":0.6997424450549455,"seconds":4.677101969718933e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":6.984375,"distances_sum":1152.7370506050283}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8620109057609066,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.8359375,"distances_sum":1622.740886026974}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8724083208458215,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.0234375,"distances_sum":1697.6723594595314}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.787109375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.787109375,"f1":0.8724083208458215,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.0234375,"distances_sum":1697.6723594595314}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9296016483516492,"seconds":6.3069164752960205e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7109375,"distances_sum":2062.018100819174}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9543211996337001,"seconds":6.647780537605286e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.828125,"distances_sum":2189.233444971339}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9589342948717956,"seconds":6.318092346191406e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8046875,"distances_sum":2241.402907961324}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.949244505494506,"seconds":6.256625056266785e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7890625,"distances_sum":2170.2729988496767}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9589342948717956,"seconds":6.318092346191406e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8046875,"distances_sum":2241.402907961324}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.927734375,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9589342948717956,"seconds":6.318092346191406e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8046875,"distances_sum":2241.402907961324}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7041015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7041015625,"f1":0.8124323593073599,"seconds":5.280598998069763e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.7265625,"distances_sum":1478.136425067255}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8616191100566108,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.984375,"distances_sum":1579.16591829337}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.771484375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.771484375,"f1":0.8616191100566108,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.984375,"distances_sum":1579.16591829337}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9066823801198806,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.2890625,"distances_sum":1788.8202284586516}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9227621336996343,"seconds":6.1355531215667725e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.78125,"distances_sum":1893.793204129411}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.9189877830502838,"seconds":6.1355531215667725e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.71875,"distances_sum":1910.632000382674}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8662109375,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8662109375,"f1":0.9227621336996343,"seconds":6.1355531215667725e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.78125,"distances_sum":1893.793204129411}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9639365842490848,"seconds":6.780028343200684e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8984375,"distances_sum":2166.7357793961155}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9653273809523816,"seconds":6.454065442085266e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8984375,"distances_sum":2192.438049157998}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9463484432234439,"seconds":6.498768925666809e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.6640625,"distances_sum":2132.9565601548793}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9630780677655681,"seconds":6.284564733505249e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8125,"distances_sum":2202.6185712404153}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9695684523809529,"seconds":6.489455699920654e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8515625,"distances_sum":2242.22545458107}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9682692307692309,"seconds":6.457790732383728e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8671875,"distances_sum":2220.859174700359}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9681776556776561,"seconds":6.377696990966797e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8671875,"distances_sum":2222.6868213802077}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9636389652014654,"seconds":6.7148357629776e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8671875,"distances_sum":2186.8421915661515}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9695684523809529,"seconds":6.489455699920654e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8515625,"distances_sum":2242.22545458107}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9695684523809529,"seconds":6.489455699920654e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8515625,"distances_sum":2242.22545458107}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.537109375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.537109375,"f1":0.679385371572872,"seconds":4.664063453674316e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.7109375,"distances_sum":1203.191279767273}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.537109375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.537109375,"f1":0.679385371572872,"seconds":4.664063453674316e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.7109375,"distances_sum":1203.191279767273}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8631644397269403,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.109375,"distances_sum":1833.283018252024}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8648497335997344,"seconds":6.32554292678833e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.125,"distances_sum":1817.7827086974107}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.8631644397269403,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.109375,"distances_sum":1833.283018252024}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.94599358974359,"seconds":6.245449185371399e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.6875,"distances_sum":2388.9641398505883}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9336626914751921,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.4765625,"distances_sum":2294.4626188582283}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9486092032967041,"seconds":4.405714571475983e-5,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.71875,"distances_sum":2369.8413971268474}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9352621336996344,"seconds":5.986541509628296e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5625,"distances_sum":2326.440674573008}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9446574259074266,"seconds":6.485730409622192e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.671875,"distances_sum":2394.604188170374}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8656057484182492,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.140625,"distances_sum":1872.6232156891617}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9486092032967041,"seconds":4.405714571475983e-5,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.71875,"distances_sum":2369.8413971268474}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.908203125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9486092032967041,"seconds":4.405714571475983e-5,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.71875,"distances_sum":2369.8413971268474}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80078125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.80078125,"f1":0.8791323260073268,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.3203125,"distances_sum":1879.3793220076534}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.80078125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.80078125,"f1":0.8791323260073268,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.3203125,"distances_sum":1879.3793220076534}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9502461080586087,"seconds":6.215646862983704e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.6796875,"distances_sum":2329.2930535893233}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9598042582417587,"seconds":6.599351763725281e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.7421875,"distances_sum":2368.9252301802676}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9598042582417587,"seconds":6.599351763725281e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.7421875,"distances_sum":2368.9252301802676}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.9816964285714288,"seconds":6.640329957008362e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.96875,"distances_sum":2491.596354871327}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9738839285714288,"seconds":6.444752216339111e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8671875,"distances_sum":2459.5267447052274}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9658203125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9816964285714288,"seconds":6.640329957008362e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.96875,"distances_sum":2491.596354871327}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9658203125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9816964285714288,"seconds":6.640329957008362e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.96875,"distances_sum":2491.596354871327}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.537109375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.537109375,"f1":0.680349511599512,"seconds":4.5727938413619995e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.0078125,"distances_sum":1168.1289933759908}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.537109375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.537109375,"f1":0.680349511599512,"seconds":4.5727938413619995e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.0078125,"distances_sum":1168.1289933759908}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.945524267399268,"seconds":6.463378667831421e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.7890625,"distances_sum":2414.287092538955}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.945524267399268,"seconds":6.463378667831421e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.7890625,"distances_sum":2414.287092538955}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.945524267399268,"seconds":6.463378667831421e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.7890625,"distances_sum":2414.287092538955}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.904296875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.945524267399268,"seconds":6.463378667831421e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.7890625,"distances_sum":2414.287092538955}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7275390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7275390625,"f1":0.8357840076590085,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.25,"distances_sum":1729.7740872182917}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7275390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7275390625,"f1":0.8357840076590085,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.25,"distances_sum":1729.7740872182917}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8759188727938736,"seconds":6.061047315597534e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.40625,"distances_sum":2035.5681971955466}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8445994977244986,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.21875,"distances_sum":1835.5761127743956}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.794921875,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.794921875,"f1":0.8759188727938736,"seconds":6.061047315597534e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.40625,"distances_sum":2035.5681971955466}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9544929029304035,"seconds":6.50063157081604e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8515625,"distances_sum":2430.913321729724}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8886967199467207,"seconds":6.200745701789856e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.4921875,"distances_sum":2071.3083420437642}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.94928456959707,"seconds":6.673857569694519e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8671875,"distances_sum":2424.2942416338506}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9543815559440562,"seconds":6.599351763725281e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8515625,"distances_sum":2462.677816681986}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9543815559440562,"seconds":6.599351763725281e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8515625,"distances_sum":2462.677816681986}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9543815559440562,"seconds":6.599351763725281e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8515625,"distances_sum":2462.677816681986}}, n: 9
mean(cfft.distances) = 0.6452924959438843
mean(cdnet.distances) = 0.44832173156093763
mean(crand.distances) = 0.35091802783307063
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8688888888888888
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8799999999999999
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8711111111111111
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9111111111111111
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8844444444444445
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8466666666666667
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8822222222222221
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.94
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8755555555555555
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9333333333333332
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9133333333333332
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.931111111111111
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9288888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8622222222222223
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.88
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.86
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8933333333333332
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8866666666666667
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9288888888888889
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8866666666666667
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8866666666666667
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9066666666666666
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9155555555555556
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 9, 14]]
** centroid: 1, normalized-entropy: 0.9656361333706099, [(2, 9), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 8, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 9, 14]]
** centroid: 1, normalized-entropy: 0.9656361333706099, [(2, 9), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 8, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 9, 14]]
** centroid: 1, normalized-entropy: 0.9656361333706099, [(2, 9), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 8, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 9, 14]]
** centroid: 1, normalized-entropy: 0.9656361333706099, [(2, 9), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 8, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 9, 14]]
** centroid: 1, normalized-entropy: 0.9656361333706099, [(2, 9), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 8, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 9, 14]]
** centroid: 1, normalized-entropy: 0.9656361333706099, [(2, 9), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 8, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 9, 14]]
** centroid: 1, normalized-entropy: 0.9656361333706099, [(2, 9), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 8, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 3]
acc = 0.98
*** finished computation of 12 references, err: [Inf, 0.5184055846929551] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 7, 24]]
** centroid: 1, normalized-entropy: 0.7706290693639406, [(2, 7), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 32, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 8, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 6]]
** centroid: 10, normalized-entropy: 0.9182958340544894, [(2, 3), (3, 6)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
finished with 15 centroids; started with 12
acc = 0.9666666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.31888870594256724] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31888870594256724, 0.3040923891580655] ***
*** starting iteration: 2; err: [Inf, 0.31888870594256724, 0.3040923891580655] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31888870594256724, 0.3040923891580655, 0.30208819887570076] ***
*** starting iteration: 3; err: [Inf, 0.31888870594256724, 0.3040923891580655, 0.30208819887570076] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31888870594256724, 0.3040923891580655, 0.30208819887570076, 0.30156297406025073] ***
*** finished computation of 3 references, err: [Inf, 0.31888870594256724, 0.3040923891580655, 0.30208819887570076, 0.30156297406025073] ***
*** center 1: selecting labels [1] (freq >= 2) [from [228, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [69, 150, 23]]
** centroid: 2, normalized-entropy: 0.7991220356964206, [(1, 69), (2, 150), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [103, 93, 0]]
** centroid: 3, normalized-entropy: 0.9981214577227674, [(1, 103), (2, 93)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24175296319710152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24175296319710152, 0.1975207005385533] ***
*** finished computation of 7 references, err: [Inf, 0.24175296319710152, 0.1975207005385533] ***
*** center 1: selecting labels [1] (freq >= 2) [from [142, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 69, 23]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 69), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 4, 0]]
** centroid: 3, normalized-entropy: 0.38094658570539014, [(1, 50), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [77, 24, 0]]
** centroid: 4, normalized-entropy: 0.7910662980902586, [(1, 77), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [37, 78, 0]]
** centroid: 5, normalized-entropy: 0.90626268051371, [(1, 37), (2, 78)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 66, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [93, 2, 0]]
** centroid: 7, normalized-entropy: 0.14731066693045392, [(1, 93), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.40571396595434] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40571396595434, 0.30407351500325386] ***
*** starting iteration: 2; err: [Inf, 0.40571396595434, 0.30407351500325386] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40571396595434, 0.30407351500325386, 0.29425666536147965] ***
*** starting iteration: 3; err: [Inf, 0.40571396595434, 0.30407351500325386, 0.29425666536147965] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40571396595434, 0.30407351500325386, 0.29425666536147965, 0.29155966464843397] ***
*** starting iteration: 4; err: [Inf, 0.40571396595434, 0.30407351500325386, 0.29425666536147965, 0.29155966464843397] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40571396595434, 0.30407351500325386, 0.29425666536147965, 0.29155966464843397, 0.2903947153615987] ***
*** starting iteration: 5; err: [Inf, 0.40571396595434, 0.30407351500325386, 0.29425666536147965, 0.29155966464843397, 0.2903947153615987] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40571396595434, 0.30407351500325386, 0.29425666536147965, 0.29155966464843397, 0.2903947153615987, 0.2899003948044518] ***
*** finished computation of 3 references, err: [Inf, 0.40571396595434, 0.30407351500325386, 0.29425666536147965, 0.29155966464843397, 0.2903947153615987, 0.2899003948044518] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [168, 27, 0]]
** centroid: 1, normalized-entropy: 0.5801954953637372, [(1, 168), (2, 27)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 197, 22]]
** centroid: 2, normalized-entropy: 0.47044137903986427, [(2, 197), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [242, 11, 0]]
** centroid: 3, normalized-entropy: 0.2580186686648155, [(1, 242), (2, 11)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35120786794473874] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35120786794473874, 0.2997593817229884] ***
*** starting iteration: 2; err: [Inf, 0.35120786794473874, 0.2997593817229884] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35120786794473874, 0.2997593817229884, 0.29037876251869943] ***
*** starting iteration: 3; err: [Inf, 0.35120786794473874, 0.2997593817229884, 0.29037876251869943] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35120786794473874, 0.2997593817229884, 0.29037876251869943, 0.28886892308929246] ***
*** starting iteration: 4; err: [Inf, 0.35120786794473874, 0.2997593817229884, 0.29037876251869943, 0.28886892308929246] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35120786794473874, 0.2997593817229884, 0.29037876251869943, 0.28886892308929246, 0.2886559491030414] ***
*** finished computation of 3 references, err: [Inf, 0.35120786794473874, 0.2997593817229884, 0.29037876251869943, 0.28886892308929246, 0.2886559491030414] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [154, 47, 0]]
** centroid: 1, normalized-entropy: 0.7846297842343328, [(1, 154), (2, 47)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 186, 17]]
** centroid: 2, normalized-entropy: 0.4152353892671978, [(2, 186), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [252, 11, 0]]
** centroid: 3, normalized-entropy: 0.25059850059652594, [(1, 252), (2, 11)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2688799012122346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2688799012122346, 0.21480801107093422] ***
*** starting iteration: 2; err: [Inf, 0.2688799012122346, 0.21480801107093422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2688799012122346, 0.21480801107093422, 0.190585835691396] ***
*** starting iteration: 3; err: [Inf, 0.2688799012122346, 0.21480801107093422, 0.190585835691396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2688799012122346, 0.21480801107093422, 0.190585835691396, 0.18768945431152173] ***
*** starting iteration: 4; err: [Inf, 0.2688799012122346, 0.21480801107093422, 0.190585835691396, 0.18768945431152173] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2688799012122346, 0.21480801107093422, 0.190585835691396, 0.18768945431152173, 0.18660536822939836] ***
*** starting iteration: 5; err: [Inf, 0.2688799012122346, 0.21480801107093422, 0.190585835691396, 0.18768945431152173, 0.18660536822939836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2688799012122346, 0.21480801107093422, 0.190585835691396, 0.18768945431152173, 0.18660536822939836, 0.18591984070127118] ***
*** finished computation of 7 references, err: [Inf, 0.2688799012122346, 0.21480801107093422, 0.190585835691396, 0.18768945431152173, 0.18660536822939836, 0.18591984070127118] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [71, 31, 0]]
** centroid: 1, normalized-entropy: 0.8860318997477157, [(1, 71), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [4, 69, 0]]
** centroid: 2, normalized-entropy: 0.306424729870515, [(1, 4), (2, 69)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 79, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 54, 23]]
** centroid: 4, normalized-entropy: 0.8796975782775168, [(2, 54), (3, 23)]
*** center 5: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [104, 9, 0]]
** centroid: 6, normalized-entropy: 0.40093068188727266, [(1, 104), (2, 9)]
*** center 7: selecting labels [1] (freq >= 2) [from [107, 1, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25234403214354567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25234403214354567, 0.19817351604947286] ***
*** starting iteration: 2; err: [Inf, 0.25234403214354567, 0.19817351604947286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25234403214354567, 0.19817351604947286, 0.19368871088845535] ***
*** starting iteration: 3; err: [Inf, 0.25234403214354567, 0.19817351604947286, 0.19368871088845535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25234403214354567, 0.19817351604947286, 0.19368871088845535, 0.18962962392052968] ***
*** starting iteration: 4; err: [Inf, 0.25234403214354567, 0.19817351604947286, 0.19368871088845535, 0.18962962392052968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25234403214354567, 0.19817351604947286, 0.19368871088845535, 0.18962962392052968, 0.18576936841826477] ***
*** starting iteration: 5; err: [Inf, 0.25234403214354567, 0.19817351604947286, 0.19368871088845535, 0.18962962392052968, 0.18576936841826477] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25234403214354567, 0.19817351604947286, 0.19368871088845535, 0.18962962392052968, 0.18576936841826477, 0.18372999520475294] ***
*** starting iteration: 6; err: [Inf, 0.25234403214354567, 0.19817351604947286, 0.19368871088845535, 0.18962962392052968, 0.18576936841826477, 0.18372999520475294] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25234403214354567, 0.19817351604947286, 0.19368871088845535, 0.18962962392052968, 0.18576936841826477, 0.18372999520475294, 0.18329035312655023] ***
*** finished computation of 7 references, err: [Inf, 0.25234403214354567, 0.19817351604947286, 0.19368871088845535, 0.18962962392052968, 0.18576936841826477, 0.18372999520475294, 0.18329035312655023] ***
*** center 1: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [95, 29, 0]]
** centroid: 2, normalized-entropy: 0.7846984744986523, [(1, 95), (2, 29)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [66, 12, 0]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(1, 66), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 40, 0]]
** centroid: 4, normalized-entropy: 0.9755259511264975, [(1, 58), (2, 40)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 79, 2]]
** centroid: 5, normalized-entropy: 0.16702680404522793, [(2, 79), (3, 2)]
*** center 6: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 75, 20]]
** centroid: 7, normalized-entropy: 0.7424875695421234, [(2, 75), (3, 20)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2850757838691818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2850757838691818, 0.20821941100326932] ***
*** starting iteration: 2; err: [Inf, 0.2850757838691818, 0.20821941100326932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2850757838691818, 0.20821941100326932, 0.19243918749541492] ***
*** starting iteration: 3; err: [Inf, 0.2850757838691818, 0.20821941100326932, 0.19243918749541492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2850757838691818, 0.20821941100326932, 0.19243918749541492, 0.18838830955879488] ***
*** starting iteration: 4; err: [Inf, 0.2850757838691818, 0.20821941100326932, 0.19243918749541492, 0.18838830955879488] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2850757838691818, 0.20821941100326932, 0.19243918749541492, 0.18838830955879488, 0.18677013416144847] ***
*** starting iteration: 5; err: [Inf, 0.2850757838691818, 0.20821941100326932, 0.19243918749541492, 0.18838830955879488, 0.18677013416144847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2850757838691818, 0.20821941100326932, 0.19243918749541492, 0.18838830955879488, 0.18677013416144847, 0.1862662080033072] ***
*** finished computation of 7 references, err: [Inf, 0.2850757838691818, 0.20821941100326932, 0.19243918749541492, 0.18838830955879488, 0.18677013416144847, 0.1862662080033072] ***
*** center 1: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [107, 5, 0]]
** centroid: 2, normalized-entropy: 0.2631887790276081, [(1, 107), (2, 5)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 101, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 41, 0]]
** centroid: 4, normalized-entropy: 0.9765004687578239, [(1, 59), (2, 41)]
*** center 5: selecting labels [1] (freq >= 2) [from [99, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [67, 23, 0]]
** centroid: 6, normalized-entropy: 0.8199653102187632, [(1, 67), (2, 23)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 73, 17]]
** centroid: 7, normalized-entropy: 0.6991413063352633, [(2, 73), (3, 17)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21320649394807448] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21320649394807448, 0.17002825748018763] ***
*** finished computation of 7 references, err: [Inf, 0.21320649394807448, 0.17002825748018763] ***
*** center 1: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [75, 26, 0]]
** centroid: 2, normalized-entropy: 0.8228368841492258, [(1, 75), (2, 26)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 160, 23]]
** centroid: 3, normalized-entropy: 0.5454789630310957, [(2, 160), (3, 23)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [87, 56, 0]]
** centroid: 4, normalized-entropy: 0.9658296600366748, [(1, 87), (2, 56)]
*** center 5: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [28, 1, 0]]
** centroid: 6, normalized-entropy: 0.21639693245126485, [(1, 28), (2, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.209584458624299] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.209584458624299, 0.1795092095213215] ***
*** finished computation of 7 references, err: [Inf, 0.209584458624299, 0.1795092095213215] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 36, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [22, 61, 0]]
** centroid: 2, normalized-entropy: 0.8342867421739538, [(1, 22), (2, 61)]
*** center 3: selecting labels [1] (freq >= 1) [from [148, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [23, 45, 0]]
** centroid: 4, normalized-entropy: 0.9231199835423002, [(1, 23), (2, 45)]
*** center 5: selecting labels [1] (freq >= 1) [from [201, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 33, 22]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(2, 33), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [16, 60, 0]]
** centroid: 7, normalized-entropy: 0.7424875695421234, [(1, 16), (2, 60)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20985561439340217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20985561439340217, 0.1492505970619049] ***
*** finished computation of 7 references, err: [Inf, 0.20985561439340217, 0.1492505970619049] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [74, 12, 0]]
** centroid: 1, normalized-entropy: 0.5830194167347007, [(1, 74), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 49, 0]]
** centroid: 2, normalized-entropy: 0.9938067403672294, [(1, 59), (2, 49)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 92, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 86, 17]]
** centroid: 6, normalized-entropy: 0.646251622274129, [(2, 86), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [98, 5, 0]]
** centroid: 7, normalized-entropy: 0.28017814662275986, [(1, 98), (2, 5)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28679106660276743] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28679106660276743, 0.24027814160243752] ***
*** starting iteration: 2; err: [Inf, 0.28679106660276743, 0.24027814160243752] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28679106660276743, 0.24027814160243752, 0.23097787784166388] ***
*** starting iteration: 3; err: [Inf, 0.28679106660276743, 0.24027814160243752, 0.23097787784166388] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28679106660276743, 0.24027814160243752, 0.23097787784166388, 0.2288173108554638] ***
*** finished computation of 3 references, err: [Inf, 0.28679106660276743, 0.24027814160243752, 0.23097787784166388, 0.2288173108554638] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [241, 18, 0]]
** centroid: 1, normalized-entropy: 0.3640477469244598, [(1, 241), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [159, 42, 0]]
** centroid: 2, normalized-entropy: 0.7394809367166378, [(1, 159), (2, 42)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 183, 23]]
** centroid: 3, normalized-entropy: 0.5048743359439413, [(2, 183), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.28660706115113027] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28660706115113027, 0.2507888698207586] ***
*** starting iteration: 2; err: [Inf, 0.28660706115113027, 0.2507888698207586] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28660706115113027, 0.2507888698207586, 0.24161744988739847] ***
*** starting iteration: 3; err: [Inf, 0.28660706115113027, 0.2507888698207586, 0.24161744988739847] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28660706115113027, 0.2507888698207586, 0.24161744988739847, 0.2404332265587359] ***
*** finished computation of 3 references, err: [Inf, 0.28660706115113027, 0.2507888698207586, 0.24161744988739847, 0.2404332265587359] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [126, 89, 1]]
** centroid: 1, normalized-entropy: 0.9785298462545818, [(1, 126), (2, 89)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [89, 146, 21]]
** centroid: 2, normalized-entropy: 0.812584961146404, [(1, 89), (2, 146), (3, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [195, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.49265143189249727] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49265143189249727, 0.2571520411117614] ***
*** starting iteration: 2; err: [Inf, 0.49265143189249727, 0.2571520411117614] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49265143189249727, 0.2571520411117614, 0.24535497486859426] ***
*** starting iteration: 3; err: [Inf, 0.49265143189249727, 0.2571520411117614, 0.24535497486859426] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49265143189249727, 0.2571520411117614, 0.24535497486859426, 0.24414898655649603] ***
*** finished computation of 3 references, err: [Inf, 0.49265143189249727, 0.2571520411117614, 0.24535497486859426, 0.24414898655649603] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [105, 88, 1]]
** centroid: 1, normalized-entropy: 0.9943960953249454, [(1, 105), (2, 88)]
*** center 2: selecting labels [1] (freq >= 2) [from [202, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [99, 156, 16]]
** centroid: 3, normalized-entropy: 0.7762841852534204, [(1, 99), (2, 156), (3, 16)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2000996722782439] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2000996722782439, 0.15728492388647194] ***
*** finished computation of 7 references, err: [Inf, 0.2000996722782439, 0.15728492388647194] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [50, 42, 0]]
** centroid: 1, normalized-entropy: 0.9945386816500111, [(1, 50), (2, 42)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 129, 23]]
** centroid: 2, normalized-entropy: 0.6131232967402233, [(2, 129), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [79, 22, 0]]
** centroid: 3, normalized-entropy: 0.756170148929897, [(1, 79), (2, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [48, 33, 0]]
** centroid: 5, normalized-entropy: 0.975119064940866, [(1, 48), (2, 33)]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [92, 17, 0]]
** centroid: 7, normalized-entropy: 0.6245644324971011, [(1, 92), (2, 17)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2226655102312925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2226655102312925, 0.1563876208809457] ***
*** finished computation of 7 references, err: [Inf, 0.2226655102312925, 0.1563876208809457] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [29, 62, 0]]
** centroid: 1, normalized-entropy: 0.9029416720373132, [(1, 29), (2, 62)]
*** center 2: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [3, 58, 0]]
** centroid: 4, normalized-entropy: 0.28290479297989196, [(1, 3), (2, 58)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 84, 22]]
** centroid: 5, normalized-entropy: 0.7367680100024784, [(2, 84), (3, 22)]
*** center 6: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [77, 31, 0]]
** centroid: 7, normalized-entropy: 0.864862972019945, [(1, 77), (2, 31)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19861760513083465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19861760513083465, 0.1561342728864597] ***
*** finished computation of 7 references, err: [Inf, 0.19861760513083465, 0.1561342728864597] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 93, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [60, 12, 0]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(1, 60), (2, 12)]
*** center 3: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [146, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [100, 3, 0]]
** centroid: 5, normalized-entropy: 0.18999075553626757, [(1, 100), (2, 3)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 36, 17]]
** centroid: 6, normalized-entropy: 0.9052002969560479, [(2, 36), (3, 17)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 100, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.41022692372960906] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41022692372960906, 0.3213909821886871] ***
*** starting iteration: 2; err: [Inf, 0.41022692372960906, 0.3213909821886871] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41022692372960906, 0.3213909821886871, 0.31555647052287517] ***
*** starting iteration: 3; err: [Inf, 0.41022692372960906, 0.3213909821886871, 0.31555647052287517] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41022692372960906, 0.3213909821886871, 0.31555647052287517, 0.3133561282387904] ***
*** finished computation of 3 references, err: [Inf, 0.41022692372960906, 0.3213909821886871, 0.31555647052287517, 0.3133561282387904] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [143, 53, 0]]
** centroid: 1, normalized-entropy: 0.8420497152827633, [(1, 143), (2, 53)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [32, 169, 23]]
** centroid: 2, normalized-entropy: 0.6592566766265515, [(1, 32), (2, 169), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [225, 21, 0]]
** centroid: 3, normalized-entropy: 0.42080948947668984, [(1, 225), (2, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36989681168865673] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36989681168865673, 0.33880501998814644] ***
*** starting iteration: 2; err: [Inf, 0.36989681168865673, 0.33880501998814644] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36989681168865673, 0.33880501998814644, 0.32978947039392] ***
*** starting iteration: 3; err: [Inf, 0.36989681168865673, 0.33880501998814644, 0.32978947039392] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36989681168865673, 0.33880501998814644, 0.32978947039392, 0.3247167442225735] ***
*** finished computation of 3 references, err: [Inf, 0.36989681168865673, 0.33880501998814644, 0.32978947039392, 0.3247167442225735] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [57, 95, 22]]
** centroid: 1, normalized-entropy: 0.8715303154384691, [(1, 57), (2, 95), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [245, 12, 0]]
** centroid: 2, normalized-entropy: 0.2721776812394669, [(1, 245), (2, 12)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [108, 128, 0]]
** centroid: 3, normalized-entropy: 0.9948131754904235, [(1, 108), (2, 128)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5092518279814849] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5092518279814849, 0.32808841142811807] ***
*** starting iteration: 2; err: [Inf, 0.5092518279814849, 0.32808841142811807] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5092518279814849, 0.32808841142811807, 0.3013101061080014] ***
*** starting iteration: 3; err: [Inf, 0.5092518279814849, 0.32808841142811807, 0.3013101061080014] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5092518279814849, 0.32808841142811807, 0.3013101061080014, 0.2916246609039035] ***
*** finished computation of 3 references, err: [Inf, 0.5092518279814849, 0.32808841142811807, 0.3013101061080014, 0.2916246609039035] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [2, 206, 17]]
** centroid: 1, normalized-entropy: 0.2893718405910579, [(1, 2), (2, 206), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [176, 37, 0]]
** centroid: 2, normalized-entropy: 0.666119294364639, [(1, 176), (2, 37)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [228, 1, 0]]
** centroid: 3, normalized-entropy: 0.04051853381938441, [(1, 228), (2, 1)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35733022863624264] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35733022863624264, 0.2366517582718093] ***
*** starting iteration: 2; err: [Inf, 0.35733022863624264, 0.2366517582718093] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35733022863624264, 0.2366517582718093, 0.23375587460414335] ***
*** starting iteration: 3; err: [Inf, 0.35733022863624264, 0.2366517582718093, 0.23375587460414335] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35733022863624264, 0.2366517582718093, 0.23375587460414335, 0.23293924495135923] ***
*** finished computation of 3 references, err: [Inf, 0.35733022863624264, 0.2366517582718093, 0.23375587460414335, 0.23293924495135923] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [246, 4, 0]]
** centroid: 1, normalized-entropy: 0.11835001140827515, [(1, 246), (2, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [5, 195, 23]]
** centroid: 2, normalized-entropy: 0.39756977734261073, [(1, 5), (2, 195), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [149, 44, 0]]
** centroid: 3, normalized-entropy: 0.774472059190862, [(1, 149), (2, 44)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3802952784060527] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3802952784060527, 0.24138521460042722] ***
*** starting iteration: 2; err: [Inf, 0.3802952784060527, 0.24138521460042722] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3802952784060527, 0.24138521460042722, 0.23976569034918763] ***
*** starting iteration: 3; err: [Inf, 0.3802952784060527, 0.24138521460042722, 0.23976569034918763] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3802952784060527, 0.24138521460042722, 0.23976569034918763, 0.2395335163926703] ***
*** finished computation of 3 references, err: [Inf, 0.3802952784060527, 0.24138521460042722, 0.23976569034918763, 0.2395335163926703] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [92, 156, 22]]
** centroid: 1, normalized-entropy: 0.8083898920065453, [(1, 92), (2, 156), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [129, 79, 0]]
** centroid: 2, normalized-entropy: 0.9579060880661358, [(1, 129), (2, 79)]
*** center 3: selecting labels [1] (freq >= 2) [from [189, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35837108029731213] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35837108029731213, 0.23289607295618467] ***
*** starting iteration: 2; err: [Inf, 0.35837108029731213, 0.23289607295618467] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35837108029731213, 0.23289607295618467, 0.23105468724280417] ***
*** starting iteration: 3; err: [Inf, 0.35837108029731213, 0.23289607295618467, 0.23105468724280417] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35837108029731213, 0.23289607295618467, 0.23105468724280417, 0.23061548841340856] ***
*** finished computation of 3 references, err: [Inf, 0.35837108029731213, 0.23289607295618467, 0.23105468724280417, 0.23061548841340856] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [231, 4, 0]]
** centroid: 1, normalized-entropy: 0.1243721441517688, [(1, 231), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 203, 17]]
** centroid: 2, normalized-entropy: 0.3924958067526299, [(2, 203), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [175, 37, 0]]
** centroid: 3, normalized-entropy: 0.6679595154173091, [(1, 175), (2, 37)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2276001015770203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2276001015770203, 0.19123425803774188] ***
*** finished computation of 7 references, err: [Inf, 0.2276001015770203, 0.19123425803774188] ***
*** center 1: selecting labels [1] (freq >= 2) [from [143, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 7, 0]]
** centroid: 2, normalized-entropy: 0.460127886147135, [(1, 65), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 38, 21]]
** centroid: 3, normalized-entropy: 0.9392547207311595, [(2, 38), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [120, 15, 0]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(1, 120), (2, 15)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 84, 1]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 90, 0]]
** centroid: 7, normalized-entropy: 0.3372900666170139, [(1, 6), (2, 90)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23504783243298352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23504783243298352, 0.19461477761864773] ***
*** finished computation of 7 references, err: [Inf, 0.23504783243298352, 0.19461477761864773] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 91, 0]]
** centroid: 1, normalized-entropy: 0.2039058755048202, [(1, 3), (2, 91)]
*** center 2: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 80, 17]]
** centroid: 4, normalized-entropy: 0.6695920597928519, [(2, 80), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [70, 10, 0]]
** centroid: 5, normalized-entropy: 0.5435644431995963, [(1, 70), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [52, 63, 0]]
** centroid: 6, normalized-entropy: 0.9933900463893185, [(1, 52), (2, 63)]
*** center 7: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 10)
[0.9560009110907316, 0.9500038961116806, 0.9209898521275767, 0.9179988371605138, 0.9080158002313691, 0.9000377623132114, 0.88898479317641, 0.879984775194356, 0.8770177362991735, 0.8160106213998429]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.3, 1) => 0.9560009110907316
finished with 11
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.22722441360127885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22722441360127885, 0.1678958918504954] ***
*** starting iteration: 2; err: [Inf, 0.22722441360127885, 0.1678958918504954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22722441360127885, 0.1678958918504954, 0.15653437339524562] ***
*** starting iteration: 3; err: [Inf, 0.22722441360127885, 0.1678958918504954, 0.15653437339524562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22722441360127885, 0.1678958918504954, 0.15653437339524562, 0.15252471152363015] ***
*** starting iteration: 4; err: [Inf, 0.22722441360127885, 0.1678958918504954, 0.15653437339524562, 0.15252471152363015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22722441360127885, 0.1678958918504954, 0.15653437339524562, 0.15252471152363015, 0.15093754792890815] ***
*** starting iteration: 5; err: [Inf, 0.22722441360127885, 0.1678958918504954, 0.15653437339524562, 0.15252471152363015, 0.15093754792890815] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22722441360127885, 0.1678958918504954, 0.15653437339524562, 0.15252471152363015, 0.15093754792890815, 0.1496309571823961] ***
*** starting iteration: 6; err: [Inf, 0.22722441360127885, 0.1678958918504954, 0.15653437339524562, 0.15252471152363015, 0.15093754792890815, 0.1496309571823961] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22722441360127885, 0.1678958918504954, 0.15653437339524562, 0.15252471152363015, 0.15093754792890815, 0.1496309571823961, 0.14867786355120866] ***
*** finished computation of 7 references, err: [Inf, 0.22722441360127885, 0.1678958918504954, 0.15653437339524562, 0.15252471152363015, 0.15093754792890815, 0.1496309571823961, 0.14867786355120866] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 130, 23]]
** centroid: 1, normalized-entropy: 0.610657511431146, [(2, 130), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 33, 0]]
** centroid: 3, normalized-entropy: 0.9575534837147484, [(1, 54), (2, 33)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 32, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 64), (2, 32)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [62, 48, 0]]
** centroid: 6, normalized-entropy: 0.9882836109919163, [(1, 62), (2, 48)]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2074475537935297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2074475537935297, 0.15718155119825025] ***
*** starting iteration: 2; err: [Inf, 0.2074475537935297, 0.15718155119825025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2074475537935297, 0.15718155119825025, 0.15209367705126484] ***
*** starting iteration: 3; err: [Inf, 0.2074475537935297, 0.15718155119825025, 0.15209367705126484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2074475537935297, 0.15718155119825025, 0.15209367705126484, 0.1505837329681488] ***
*** starting iteration: 4; err: [Inf, 0.2074475537935297, 0.15718155119825025, 0.15209367705126484, 0.1505837329681488] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2074475537935297, 0.15718155119825025, 0.15209367705126484, 0.1505837329681488, 0.14910314643526565] ***
*** starting iteration: 5; err: [Inf, 0.2074475537935297, 0.15718155119825025, 0.15209367705126484, 0.1505837329681488, 0.14910314643526565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2074475537935297, 0.15718155119825025, 0.15209367705126484, 0.1505837329681488, 0.14910314643526565, 0.14765825722578807] ***
*** starting iteration: 6; err: [Inf, 0.2074475537935297, 0.15718155119825025, 0.15209367705126484, 0.1505837329681488, 0.14910314643526565, 0.14765825722578807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2074475537935297, 0.15718155119825025, 0.15209367705126484, 0.1505837329681488, 0.14910314643526565, 0.14765825722578807, 0.14607991217502925] ***
*** starting iteration: 7; err: [Inf, 0.2074475537935297, 0.15718155119825025, 0.15209367705126484, 0.1505837329681488, 0.14910314643526565, 0.14765825722578807, 0.14607991217502925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2074475537935297, 0.15718155119825025, 0.15209367705126484, 0.1505837329681488, 0.14910314643526565, 0.14765825722578807, 0.14607991217502925, 0.14517317308431332] ***
*** finished computation of 7 references, err: [Inf, 0.2074475537935297, 0.15718155119825025, 0.15209367705126484, 0.1505837329681488, 0.14910314643526565, 0.14765825722578807, 0.14607991217502925, 0.14517317308431332] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [97, 28, 0]]
** centroid: 1, normalized-entropy: 0.7674044165839727, [(1, 97), (2, 28)]
*** center 2: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 49, 0]]
** centroid: 3, normalized-entropy: 0.9997114417528099, [(1, 51), (2, 49)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 11, 0]]
** centroid: 4, normalized-entropy: 0.5357150195407704, [(1, 79), (2, 11)]
*** center 5: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 71, 5]]
** centroid: 6, normalized-entropy: 0.35001059292688486, [(2, 71), (3, 5)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 76, 17]]
** centroid: 7, normalized-entropy: 0.6861549474202007, [(2, 76), (3, 17)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22631143430328887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22631143430328887, 0.1686110323234957] ***
*** starting iteration: 2; err: [Inf, 0.22631143430328887, 0.1686110323234957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22631143430328887, 0.1686110323234957, 0.16041738629296445] ***
*** starting iteration: 3; err: [Inf, 0.22631143430328887, 0.1686110323234957, 0.16041738629296445] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22631143430328887, 0.1686110323234957, 0.16041738629296445, 0.15711752925420003] ***
*** starting iteration: 4; err: [Inf, 0.22631143430328887, 0.1686110323234957, 0.16041738629296445, 0.15711752925420003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22631143430328887, 0.1686110323234957, 0.16041738629296445, 0.15711752925420003, 0.15589891413015186] ***
*** starting iteration: 5; err: [Inf, 0.22631143430328887, 0.1686110323234957, 0.16041738629296445, 0.15711752925420003, 0.15589891413015186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22631143430328887, 0.1686110323234957, 0.16041738629296445, 0.15711752925420003, 0.15589891413015186, 0.155060729147333] ***
*** finished computation of 7 references, err: [Inf, 0.22631143430328887, 0.1686110323234957, 0.16041738629296445, 0.15711752925420003, 0.15589891413015186, 0.155060729147333] ***
*** center 1: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 17]]
** centroid: 2, normalized-entropy: 0.8351164948421137, [(2, 47), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 25, 0]]
** centroid: 3, normalized-entropy: 0.8356038276131503, [(1, 69), (2, 25)]
*** center 4: selecting labels [1] (freq >= 2) [from [136, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [92, 7, 0]]
** centroid: 5, normalized-entropy: 0.3685567775377064, [(1, 92), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 86, 0]]
** centroid: 6, normalized-entropy: 0.21265863988163503, [(1, 3), (2, 86)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 79, 0]]
** centroid: 7, normalized-entropy: 0.3255517134879513, [(1, 5), (2, 79)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9560009110907316, 0.9500038961116806, 0.9249608890327453, 0.9209898521275767, 0.9179988371605138, 0.9080158002313691, 0.9000377623132114, 0.88898479317641, 0.879984775194356, 0.8770177362991735, 0.8160106213998429]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.3, 1) => 0.9560009110907316
finished with 13
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.24123046148565594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24123046148565594, 0.18727645184704894] ***
*** starting iteration: 2; err: [Inf, 0.24123046148565594, 0.18727645184704894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24123046148565594, 0.18727645184704894, 0.18550701952307252] ***
*** starting iteration: 3; err: [Inf, 0.24123046148565594, 0.18727645184704894, 0.18550701952307252] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24123046148565594, 0.18727645184704894, 0.18550701952307252, 0.18495193169509583] ***
*** finished computation of 7 references, err: [Inf, 0.24123046148565594, 0.18727645184704894, 0.18550701952307252, 0.18495193169509583] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 84, 23]]
** centroid: 1, normalized-entropy: 0.7508446639457529, [(2, 84), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [1, 98, 0]]
** centroid: 2, normalized-entropy: 0.08146202691505994, [(1, 1), (2, 98)]
*** center 3: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [71, 8, 0]]
** centroid: 4, normalized-entropy: 0.47299536229314826, [(1, 71), (2, 8)]
*** center 5: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [99, 4, 0]]
** centroid: 6, normalized-entropy: 0.23692474671835093, [(1, 99), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [49, 49, 0]]
** centroid: 7, normalized-entropy: 1.0, [(1, 49), (2, 49)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3699943729378897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3699943729378897, 0.2241668908925227] ***
*** starting iteration: 2; err: [Inf, 0.3699943729378897, 0.2241668908925227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3699943729378897, 0.2241668908925227, 0.20273130205550652] ***
*** starting iteration: 3; err: [Inf, 0.3699943729378897, 0.2241668908925227, 0.20273130205550652] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3699943729378897, 0.2241668908925227, 0.20273130205550652, 0.19512224498706154] ***
*** finished computation of 7 references, err: [Inf, 0.3699943729378897, 0.2241668908925227, 0.20273130205550652, 0.19512224498706154] ***
*** center 1: selecting labels [1] (freq >= 1) [from [118, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [57, 29, 0]]
** centroid: 2, normalized-entropy: 0.9221231306777973, [(1, 57), (2, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [77, 17, 0]]
** centroid: 3, normalized-entropy: 0.6819353204567525, [(1, 77), (2, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [51, 24, 0]]
** centroid: 5, normalized-entropy: 0.9043814577244941, [(1, 51), (2, 24)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 70, 21]]
** centroid: 6, normalized-entropy: 0.7793498372920851, [(2, 70), (3, 21)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 95, 1]]
** centroid: 7, normalized-entropy: 0.08354288831032243, [(2, 95), (3, 1)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24068909733817317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24068909733817317, 0.21372649642238128] ***
*** starting iteration: 2; err: [Inf, 0.24068909733817317, 0.21372649642238128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24068909733817317, 0.21372649642238128, 0.19948372463912128] ***
*** starting iteration: 3; err: [Inf, 0.24068909733817317, 0.21372649642238128, 0.19948372463912128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24068909733817317, 0.21372649642238128, 0.19948372463912128, 0.1915196475015766] ***
*** finished computation of 7 references, err: [Inf, 0.24068909733817317, 0.21372649642238128, 0.19948372463912128, 0.1915196475015766] ***
*** center 1: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 93, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [73, 28, 0]]
** centroid: 3, normalized-entropy: 0.8516458330898723, [(1, 73), (2, 28)]
*** center 4: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [45, 36, 0]]
** centroid: 5, normalized-entropy: 0.9910760598382222, [(1, 45), (2, 36)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 80, 17]]
** centroid: 6, normalized-entropy: 0.6695920597928519, [(2, 80), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [103, 7, 0]]
** centroid: 7, normalized-entropy: 0.34171390666761664, [(1, 103), (2, 7)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20890100011126594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20890100011126594, 0.16408640949696013] ***
*** starting iteration: 2; err: [Inf, 0.20890100011126594, 0.16408640949696013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20890100011126594, 0.16408640949696013, 0.15072509993144587] ***
*** starting iteration: 3; err: [Inf, 0.20890100011126594, 0.16408640949696013, 0.15072509993144587] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20890100011126594, 0.16408640949696013, 0.15072509993144587, 0.1480202984041045] ***
*** finished computation of 7 references, err: [Inf, 0.20890100011126594, 0.16408640949696013, 0.15072509993144587, 0.1480202984041045] ***
*** center 1: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [92, 6, 0]]
** centroid: 2, normalized-entropy: 0.3322866302216152, [(1, 92), (2, 6)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 41, 0]]
** centroid: 3, normalized-entropy: 0.988212082728797, [(1, 53), (2, 41)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 87, 23]]
** centroid: 4, normalized-entropy: 0.73974144872329, [(2, 87), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [66, 47, 0]]
** centroid: 5, normalized-entropy: 0.9795091579328259, [(1, 66), (2, 47)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.16564894382837697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16564894382837697, 0.15309243592834365] ***
*** starting iteration: 2; err: [Inf, 0.16564894382837697, 0.15309243592834365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16564894382837697, 0.15309243592834365, 0.14924677694146557] ***
*** starting iteration: 3; err: [Inf, 0.16564894382837697, 0.15309243592834365, 0.14924677694146557] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16564894382837697, 0.15309243592834365, 0.14924677694146557, 0.14738476804123893] ***
*** finished computation of 7 references, err: [Inf, 0.16564894382837697, 0.15309243592834365, 0.14924677694146557, 0.14738476804123893] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [55, 28, 0]]
** centroid: 1, normalized-entropy: 0.9222596474738021, [(1, 55), (2, 28)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 104, 1]]
** centroid: 2, normalized-entropy: 0.07761951112637416, [(2, 104), (3, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [91, 3, 0]]
** centroid: 3, normalized-entropy: 0.2039058755048202, [(1, 91), (2, 3)]
*** center 4: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [89, 10, 0]]
** centroid: 5, normalized-entropy: 0.47218938467675087, [(1, 89), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [98, 14, 0]]
** centroid: 6, normalized-entropy: 0.5435644431995963, [(1, 98), (2, 14)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 76, 21]]
** centroid: 7, normalized-entropy: 0.7537153483720096, [(2, 76), (3, 21)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1960201740838766] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1960201740838766, 0.16242040419878476] ***
*** starting iteration: 2; err: [Inf, 0.1960201740838766, 0.16242040419878476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1960201740838766, 0.16242040419878476, 0.15612359882948146] ***
*** starting iteration: 3; err: [Inf, 0.1960201740838766, 0.16242040419878476, 0.15612359882948146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1960201740838766, 0.16242040419878476, 0.15612359882948146, 0.15375501938433717] ***
*** finished computation of 7 references, err: [Inf, 0.1960201740838766, 0.16242040419878476, 0.15612359882948146, 0.15375501938433717] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [32, 65, 0]]
** centroid: 1, normalized-entropy: 0.9148210087144519, [(1, 32), (2, 65)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 125, 17]]
** centroid: 2, normalized-entropy: 0.5285506132792125, [(2, 125), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [41, 22, 0]]
** centroid: 3, normalized-entropy: 0.9333572600179806, [(1, 41), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [120, 32, 0]]
** centroid: 4, normalized-entropy: 0.7424875695421234, [(1, 120), (2, 32)]
*** center 5: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9560009110907316, 0.9500038961116806, 0.9459699220178263, 0.9379739020457584, 0.9249608890327453, 0.9209898521275767, 0.9179988371605138, 0.9080158002313691, 0.9000377623132114, 0.88898479317641, 0.879984775194356, 0.8770177362991735, 0.8160106213998429]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.3, 1) => 0.9560009110907316
finished with 15
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.39319846698001876] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39319846698001876, 0.3172838007723605] ***
*** starting iteration: 2; err: [Inf, 0.39319846698001876, 0.3172838007723605] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39319846698001876, 0.3172838007723605, 0.30572037833712035] ***
*** starting iteration: 3; err: [Inf, 0.39319846698001876, 0.3172838007723605, 0.30572037833712035] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39319846698001876, 0.3172838007723605, 0.30572037833712035, 0.3028801315891984] ***
*** starting iteration: 4; err: [Inf, 0.39319846698001876, 0.3172838007723605, 0.30572037833712035, 0.3028801315891984] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39319846698001876, 0.3172838007723605, 0.30572037833712035, 0.3028801315891984, 0.30153901734621497] ***
*** starting iteration: 5; err: [Inf, 0.39319846698001876, 0.3172838007723605, 0.30572037833712035, 0.3028801315891984, 0.30153901734621497] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39319846698001876, 0.3172838007723605, 0.30572037833712035, 0.3028801315891984, 0.30153901734621497, 0.3006022112869151] ***
*** finished computation of 3 references, err: [Inf, 0.39319846698001876, 0.3172838007723605, 0.30572037833712035, 0.3028801315891984, 0.30153901734621497, 0.3006022112869151] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [65, 160, 23]]
** centroid: 1, normalized-entropy: 0.7775607716849463, [(1, 65), (2, 160), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [218, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [117, 83, 0]]
** centroid: 3, normalized-entropy: 0.9790514648094594, [(1, 117), (2, 83)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.40097659264134056] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40097659264134056, 0.3020573149737518] ***
*** starting iteration: 2; err: [Inf, 0.40097659264134056, 0.3020573149737518] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40097659264134056, 0.3020573149737518, 0.29190204326744784] ***
*** starting iteration: 3; err: [Inf, 0.40097659264134056, 0.3020573149737518, 0.29190204326744784] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40097659264134056, 0.3020573149737518, 0.29190204326744784, 0.28886628926506847] ***
*** starting iteration: 4; err: [Inf, 0.40097659264134056, 0.3020573149737518, 0.29190204326744784, 0.28886628926506847] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40097659264134056, 0.3020573149737518, 0.29190204326744784, 0.28886628926506847, 0.28785995246683327] ***
*** starting iteration: 5; err: [Inf, 0.40097659264134056, 0.3020573149737518, 0.29190204326744784, 0.28886628926506847, 0.28785995246683327] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40097659264134056, 0.3020573149737518, 0.29190204326744784, 0.28886628926506847, 0.28785995246683327, 0.2877680269507007] ***
*** finished computation of 3 references, err: [Inf, 0.40097659264134056, 0.3020573149737518, 0.29190204326744784, 0.28886628926506847, 0.28785995246683327, 0.2877680269507007] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [245, 14, 0]]
** centroid: 1, normalized-entropy: 0.30337483608641397, [(1, 245), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [165, 45, 0]]
** centroid: 2, normalized-entropy: 0.7495952572594798, [(1, 165), (2, 45)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 176, 22]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(2, 176), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3719610441210812] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719610441210812, 0.30588471233939707] ***
*** starting iteration: 2; err: [Inf, 0.3719610441210812, 0.30588471233939707] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719610441210812, 0.30588471233939707, 0.29384256944037984] ***
*** starting iteration: 3; err: [Inf, 0.3719610441210812, 0.30588471233939707, 0.29384256944037984] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719610441210812, 0.30588471233939707, 0.29384256944037984, 0.29051368103838754] ***
*** starting iteration: 4; err: [Inf, 0.3719610441210812, 0.30588471233939707, 0.29384256944037984, 0.29051368103838754] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719610441210812, 0.30588471233939707, 0.29384256944037984, 0.29051368103838754, 0.289880883031716] ***
*** finished computation of 3 references, err: [Inf, 0.3719610441210812, 0.30588471233939707, 0.29384256944037984, 0.29051368103838754, 0.289880883031716] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [239, 6, 0]]
** centroid: 1, normalized-entropy: 0.1659565426281793, [(1, 239), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 201, 17]]
** centroid: 2, normalized-entropy: 0.39502717694105294, [(2, 201), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [167, 37, 0]]
** centroid: 3, normalized-entropy: 0.6830704823075846, [(1, 167), (2, 37)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4064075118168495] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4064075118168495, 0.22892466392899463] ***
*** starting iteration: 2; err: [Inf, 0.4064075118168495, 0.22892466392899463] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4064075118168495, 0.22892466392899463, 0.2279556471911782] ***
*** finished computation of 3 references, err: [Inf, 0.4064075118168495, 0.22892466392899463, 0.2279556471911782] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [240, 20, 0]]
** centroid: 1, normalized-entropy: 0.3912435636292556, [(1, 240), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [160, 45, 0]]
** centroid: 2, normalized-entropy: 0.7592757847892834, [(1, 160), (2, 45)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 178, 23]]
** centroid: 3, normalized-entropy: 0.5131289264956943, [(2, 178), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3117323483143566] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3117323483143566, 0.24589595306284914] ***
*** starting iteration: 2; err: [Inf, 0.3117323483143566, 0.24589595306284914] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3117323483143566, 0.24589595306284914, 0.23352129263677698] ***
*** starting iteration: 3; err: [Inf, 0.3117323483143566, 0.24589595306284914, 0.23352129263677698] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3117323483143566, 0.24589595306284914, 0.23352129263677698, 0.23082535496928255] ***
*** starting iteration: 4; err: [Inf, 0.3117323483143566, 0.24589595306284914, 0.23352129263677698, 0.23082535496928255] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3117323483143566, 0.24589595306284914, 0.23352129263677698, 0.23082535496928255, 0.2304439180023756] ***
*** finished computation of 3 references, err: [Inf, 0.3117323483143566, 0.24589595306284914, 0.23352129263677698, 0.23082535496928255, 0.2304439180023756] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [242, 11, 0]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(1, 242), (2, 11)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 199, 22]]
** centroid: 2, normalized-entropy: 0.46755959514615253, [(2, 199), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [168, 25, 0]]
** centroid: 3, normalized-entropy: 0.5561579089198946, [(1, 168), (2, 25)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3376609327765866] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3376609327765866, 0.24694632567923286] ***
*** starting iteration: 2; err: [Inf, 0.3376609327765866, 0.24694632567923286] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3376609327765866, 0.24694632567923286, 0.24301561621761975] ***
*** starting iteration: 3; err: [Inf, 0.3376609327765866, 0.24694632567923286, 0.24301561621761975] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3376609327765866, 0.24694632567923286, 0.24301561621761975, 0.24212248756437152] ***
*** finished computation of 3 references, err: [Inf, 0.3376609327765866, 0.24694632567923286, 0.24301561621761975, 0.24212248756437152] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [97, 165, 17]]
** centroid: 1, normalized-entropy: 0.7722857581509792, [(1, 97), (2, 165), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [136, 79, 0]]
** centroid: 2, normalized-entropy: 0.9486876146311471, [(1, 136), (2, 79)]
*** center 3: selecting labels [1] (freq >= 2) [from [173, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 15)
[0.9560009110907316, 0.9500038961116806, 0.9459699220178263, 0.9379739020457584, 0.9249608890327453, 0.9209898521275767, 0.9179988371605138, 0.9080158002313691, 0.9000377623132114, 0.8910257562952174, 0.88898479317641, 0.8819568071065077, 0.879984775194356, 0.8770177362991735, 0.8160106213998429]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.3, 1) => 0.9560009110907316
finished with 15
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9560009110907316, 0.9500038961116806, 0.9459699220178263, 0.9379739020457584, 0.9249608890327453, 0.9209898521275767, 0.9179988371605138, 0.9080158002313691, 0.9000377623132114, 0.8910257562952174, 0.88898479317641, 0.8819568071065077, 0.879984775194356, 0.8770177362991735, 0.8160106213998429]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.3, 1) => 0.9560009110907316
finished with 15
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9560009110907316, 0.9500038961116806, 0.9459699220178263, 0.9379739020457584, 0.9249608890327453, 0.9209898521275767, 0.9179988371605138, 0.9080158002313691, 0.9000377623132114, 0.8910257562952174, 0.88898479317641, 0.8819568071065077, 0.879984775194356, 0.8770177362991735, 0.8160106213998429]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.3, 1) => 0.9560009110907316
finished with 15
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9560009110907316, 0.9500038961116806, 0.9459699220178263, 0.9379739020457584, 0.9249608890327453, 0.9209898521275767, 0.9179988371605138, 0.9080158002313691, 0.9000377623132114, 0.8910257562952174, 0.88898479317641, 0.8819568071065077, 0.879984775194356, 0.8770177362991735, 0.8160106213998429]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.3, 1) => 0.9560009110907316
finished with 15
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9560009110907316, 0.9500038961116806, 0.9459699220178263, 0.9379739020457584, 0.9249608890327453, 0.9209898521275767, 0.9179988371605138, 0.9080158002313691, 0.9000377623132114, 0.8910257562952174, 0.88898479317641, 0.8819568071065077, 0.879984775194356, 0.8770177362991735, 0.8160106213998429]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.3, 1) => 0.9560009110907316
finished with 15
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.17412391083175316] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17412391083175316, 0.15347940270230173] ***
*** finished computation of 7 references, err: [Inf, 0.17412391083175316, 0.15347940270230173] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [111, 19, 0]]
** centroid: 1, normalized-entropy: 0.6001310136416094, [(1, 111), (2, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [141, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [105, 9, 0]]
** centroid: 3, normalized-entropy: 0.39845927409523557, [(1, 105), (2, 9)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 112, 31]]
** centroid: 4, normalized-entropy: 0.7542500997682859, [(2, 112), (3, 31)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 152, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [144, 69, 0]]
** centroid: 6, normalized-entropy: 0.9086185980409245, [(1, 144), (2, 69)]
*** center 7: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18779135498125107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18779135498125107, 0.15106077496521175] ***
*** finished computation of 7 references, err: [Inf, 0.18779135498125107, 0.15106077496521175] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [111, 1, 0]]
** centroid: 1, normalized-entropy: 0.07360348308562395, [(1, 111), (2, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 33, 16]]
** centroid: 2, normalized-entropy: 0.9113423759758414, [(2, 33), (3, 16)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 69, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 9, 0]]
** centroid: 4, normalized-entropy: 0.5801954953637372, [(1, 56), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [89, 1, 0]]
** centroid: 5, normalized-entropy: 0.08807225904068142, [(1, 89), (2, 1)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 55, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [48, 12, 0]]
** centroid: 7, normalized-entropy: 0.7219280948873623, [(1, 48), (2, 12)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23072521788440645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23072521788440645, 0.1689168529980816] ***
*** finished computation of 7 references, err: [Inf, 0.23072521788440645, 0.1689168529980816] ***
*** center 1: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [46, 24, 0]]
** centroid: 2, normalized-entropy: 0.927526588431676, [(1, 46), (2, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [34, 51, 0]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(1, 34), (2, 51)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 40, 18]]
** centroid: 4, normalized-entropy: 0.8935711016541908, [(2, 40), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [102, 1, 0]]
** centroid: 5, normalized-entropy: 0.0788560137745528, [(1, 102), (2, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 29, 0]]
** centroid: 6, normalized-entropy: 0.2108423003185322, [(1, 1), (2, 29)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 44, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21641563731431962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21641563731431962, 0.15505460165441037] ***
*** finished computation of 7 references, err: [Inf, 0.21641563731431962, 0.15505460165441037] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 102, 16]]
** centroid: 1, normalized-entropy: 0.572580465623769, [(2, 102), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 8, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 48), (2, 8)]
*** center 3: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [35, 35, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 35), (2, 35)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [81, 2, 0]]
** centroid: 6, normalized-entropy: 0.1638605128691586, [(1, 81), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [29, 29, 0]]
** centroid: 7, normalized-entropy: 1.0, [(1, 29), (2, 29)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19687227161787452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19687227161787452, 0.15441934871394186] ***
*** finished computation of 7 references, err: [Inf, 0.19687227161787452, 0.15441934871394186] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 49, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 45, 25]]
** centroid: 3, normalized-entropy: 0.940285958670631, [(2, 45), (3, 25)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [73, 6, 0]]
** centroid: 4, normalized-entropy: 0.3877431810559867, [(1, 73), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [19, 53, 0]]
** centroid: 5, normalized-entropy: 0.8325582396745668, [(1, 19), (2, 53)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [38, 16, 0]]
** centroid: 6, normalized-entropy: 0.876716288999464, [(1, 38), (2, 16)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [77, 2, 0]]
** centroid: 7, normalized-entropy: 0.17033057560105982, [(1, 77), (2, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2501307699745521] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2501307699745521, 0.170634553655982] ***
*** finished computation of 7 references, err: [Inf, 0.2501307699745521, 0.170634553655982] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [22, 79, 0]]
** centroid: 1, normalized-entropy: 0.756170148929897, [(1, 22), (2, 79)]
*** center 2: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 84, 13]]
** centroid: 3, normalized-entropy: 0.5683625344629001, [(2, 84), (3, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [30, 7, 0]]
** centroid: 4, normalized-entropy: 0.699772221773307, [(1, 30), (2, 7)]
*** center 5: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [84, 20, 0]]
** centroid: 6, normalized-entropy: 0.7062740891876008, [(1, 84), (2, 20)]
*** center 7: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22137945988494903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22137945988494903, 0.16482128075323998] ***
*** finished computation of 7 references, err: [Inf, 0.22137945988494903, 0.16482128075323998] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [59, 1, 0]]
** centroid: 1, normalized-entropy: 0.12229159706937456, [(1, 59), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [81, 2, 0]]
** centroid: 2, normalized-entropy: 0.1638605128691586, [(1, 81), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [28, 61, 0]]
** centroid: 3, normalized-entropy: 0.898419774686072, [(1, 28), (2, 61)]
*** center 4: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [1, 115, 11]]
** centroid: 5, normalized-entropy: 0.30939330342891214, [(1, 1), (2, 115), (3, 11)]
*** center 6: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.208259262483567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.208259262483567, 0.17684157530684025] ***
*** finished computation of 7 references, err: [Inf, 0.208259262483567, 0.17684157530684025] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 69, 18]]
** centroid: 1, normalized-entropy: 0.7355085815538399, [(2, 69), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [140, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 33, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [25, 34, 0]]
** centroid: 6, normalized-entropy: 0.9831491282282879, [(1, 25), (2, 34)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [72, 44, 0]]
** centroid: 7, normalized-entropy: 0.9575534837147484, [(1, 72), (2, 44)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2716013075523078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2716013075523078, 0.19003432840760798] ***
*** finished computation of 7 references, err: [Inf, 0.2716013075523078, 0.19003432840760798] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [26, 30, 0]]
** centroid: 1, normalized-entropy: 0.9963165195589622, [(1, 26), (2, 30)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [11, 55, 4]]
** centroid: 2, normalized-entropy: 0.5860551374712243, [(1, 11), (2, 55), (3, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [142, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [49, 46, 1]]
** centroid: 5, normalized-entropy: 0.6766180566977154, [(1, 49), (2, 46), (3, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [22, 7, 0]]
** centroid: 6, normalized-entropy: 0.7973265101474423, [(1, 22), (2, 7)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 47, 8]]
** centroid: 7, normalized-entropy: 0.5983474220910422, [(2, 47), (3, 8)]
finished with 14 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20982284000795334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20982284000795334, 0.16692938517779113] ***
*** finished computation of 7 references, err: [Inf, 0.20982284000795334, 0.16692938517779113] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 53, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [90, 49, 0]]
** centroid: 2, normalized-entropy: 0.9362967487572058, [(1, 90), (2, 49)]
*** center 3: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [26, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [19, 29, 0]]
** centroid: 6, normalized-entropy: 0.968461008760162, [(1, 19), (2, 29)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 55, 11]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 55), (3, 11)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20507522097416223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20507522097416223, 0.1631266703158617] ***
*** finished computation of 7 references, err: [Inf, 0.20507522097416223, 0.1631266703158617] ***
*** center 1: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 52, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 57, 15]]
** centroid: 3, normalized-entropy: 0.7382848661434506, [(2, 57), (3, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [55, 27, 0]]
** centroid: 4, normalized-entropy: 0.9141770436147919, [(1, 55), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [55, 15, 0]]
** centroid: 5, normalized-entropy: 0.7495952572594798, [(1, 55), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [36, 29, 0]]
** centroid: 6, normalized-entropy: 0.9916178297881032, [(1, 36), (2, 29)]
*** center 7: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1938776354903821] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1938776354903821, 0.1646667018327862] ***
*** finished computation of 7 references, err: [Inf, 0.1938776354903821, 0.1646667018327862] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [59, 32, 0]]
** centroid: 1, normalized-entropy: 0.9355315642388212, [(1, 59), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [117, 1, 0]]
** centroid: 2, normalized-entropy: 0.0705017596054147, [(1, 117), (2, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 87, 16]]
** centroid: 3, normalized-entropy: 0.6230433996216712, [(2, 87), (3, 16)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 58, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [26, 5, 0]]
** centroid: 5, normalized-entropy: 0.6373874992221911, [(1, 26), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [81, 1, 0]]
** centroid: 6, normalized-entropy: 0.09501724567107643, [(1, 81), (2, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2360089754338842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2360089754338842, 0.16512308177817614] ***
*** finished computation of 7 references, err: [Inf, 0.2360089754338842, 0.16512308177817614] ***
*** center 1: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [34, 1, 0]]
** centroid: 2, normalized-entropy: 0.18717625687320805, [(1, 34), (2, 1)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [6, 103, 12]]
** centroid: 3, normalized-entropy: 0.4689923633719957, [(1, 6), (2, 103), (3, 12)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [73, 7, 0]]
** centroid: 4, normalized-entropy: 0.4280696292293062, [(1, 73), (2, 7)]
*** center 5: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [34, 2, 0]]
** centroid: 6, normalized-entropy: 0.3095434291503252, [(1, 34), (2, 2)]
*** center 7: selecting labels [1, 2, 3] (freq >= 1) [from [18, 67, 1]]
** centroid: 7, normalized-entropy: 0.5221467757957357, [(1, 18), (2, 67), (3, 1)]
finished with 13 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1970680330954492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1970680330954492, 0.1593152774395421] ***
*** finished computation of 7 references, err: [Inf, 0.1970680330954492, 0.1593152774395421] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [71, 3, 0]]
** centroid: 1, normalized-entropy: 0.2447650820208971, [(1, 71), (2, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [2, 87, 1]]
** centroid: 2, normalized-entropy: 0.15233935272526727, [(1, 2), (2, 87), (3, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [88, 7, 0]]
** centroid: 3, normalized-entropy: 0.3795243778626806, [(1, 88), (2, 7)]
*** center 4: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 11, 0]]
** centroid: 5, normalized-entropy: 0.8582307926411409, [(1, 28), (2, 11)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 68, 12]]
** centroid: 6, normalized-entropy: 0.6098403047164005, [(2, 68), (3, 12)]
*** center 7: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18861596881411968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18861596881411968, 0.15782857345417142] ***
*** finished computation of 7 references, err: [Inf, 0.18861596881411968, 0.15782857345417142] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [57, 42, 0]]
** centroid: 1, normalized-entropy: 0.9833761901392238, [(1, 57), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [38, 12, 0]]
** centroid: 2, normalized-entropy: 0.7950402793845225, [(1, 38), (2, 12)]
*** center 3: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [54, 17, 0]]
** centroid: 5, normalized-entropy: 0.7941021417852022, [(1, 54), (2, 17)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 54, 17]]
** centroid: 6, normalized-entropy: 0.7941021417852022, [(2, 54), (3, 17)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 54, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2334858206566423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2334858206566423, 0.16003949408512563] ***
*** finished computation of 7 references, err: [Inf, 0.2334858206566423, 0.16003949408512563] ***
*** center 1: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 69, 2]]
** centroid: 3, normalized-entropy: 0.18512476010054582, [(2, 69), (3, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [38, 36, 0]]
** centroid: 4, normalized-entropy: 0.9994730201859837, [(1, 38), (2, 36)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [65, 8, 0]]
** centroid: 5, normalized-entropy: 0.4986751363204345, [(1, 65), (2, 8)]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [1, 2, 3] (freq >= 1) [from [1, 64, 13]]
** centroid: 7, normalized-entropy: 0.4704119765751993, [(1, 1), (2, 64), (3, 13)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20000060134008527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20000060134008527, 0.160982606690377] ***
*** finished computation of 7 references, err: [Inf, 0.20000060134008527, 0.160982606690377] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 7, 0]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(1, 70), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 35, 12]]
** centroid: 2, normalized-entropy: 0.8196004346196011, [(2, 35), (3, 12)]
*** center 3: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 78, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [99, 25, 0]]
** centroid: 6, normalized-entropy: 0.7251421964171215, [(1, 99), (2, 25)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [12, 33, 0]]
** centroid: 7, normalized-entropy: 0.8366407419411671, [(1, 12), (2, 33)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2469139594975859] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2469139594975859, 0.17546324138203637] ***
*** finished computation of 7 references, err: [Inf, 0.2469139594975859, 0.17546324138203637] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 73, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [46, 6, 0]]
** centroid: 2, normalized-entropy: 0.5159469300074472, [(1, 46), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 76, 12]]
** centroid: 3, normalized-entropy: 0.5746356978376794, [(2, 76), (3, 12)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [36, 10, 0]]
** centroid: 4, normalized-entropy: 0.7553754125614286, [(1, 36), (2, 10)]
*** center 5: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [117, 12, 0]]
** centroid: 6, normalized-entropy: 0.446481346896803, [(1, 117), (2, 12)]
*** center 7: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20501886306889355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20501886306889355, 0.16143071300163864] ***
*** finished computation of 7 references, err: [Inf, 0.20501886306889355, 0.16143071300163864] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [99, 31, 0]]
** centroid: 1, normalized-entropy: 0.7924724975678816, [(1, 99), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [55, 27, 0]]
** centroid: 2, normalized-entropy: 0.9141770436147919, [(1, 55), (2, 27)]
*** center 3: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 66, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 57, 16]]
** centroid: 5, normalized-entropy: 0.7586638628883696, [(2, 57), (3, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18196892382577062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18196892382577062, 0.15893579900916666] ***
*** finished computation of 7 references, err: [Inf, 0.18196892382577062, 0.15893579900916666] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [79, 5, 0]]
** centroid: 1, normalized-entropy: 0.3255517134879513, [(1, 79), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [80, 12, 0]]
** centroid: 2, normalized-entropy: 0.5586293734521991, [(1, 80), (2, 12)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [62, 32, 0]]
** centroid: 3, normalized-entropy: 0.9252253278054431, [(1, 62), (2, 32)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 14, 18]]
** centroid: 4, normalized-entropy: 0.9886994082884974, [(2, 14), (3, 18)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 66, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 53, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19119338737614452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19119338737614452, 0.15805753360316158] ***
*** finished computation of 7 references, err: [Inf, 0.19119338737614452, 0.15805753360316158] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [43, 38, 0]]
** centroid: 2, normalized-entropy: 0.9972496329704711, [(1, 43), (2, 38)]
*** center 3: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 56, 13]]
** centroid: 4, normalized-entropy: 0.698124573139618, [(2, 56), (3, 13)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 73, 3]]
** centroid: 5, normalized-entropy: 0.23987382528036535, [(2, 73), (3, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [92, 19, 0]]
** centroid: 6, normalized-entropy: 0.6603769229926888, [(1, 92), (2, 19)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [72, 1, 0]]
** centroid: 7, normalized-entropy: 0.1044190780054077, [(1, 72), (2, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2411243121670559] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2411243121670559, 0.16314504891633988] ***
*** finished computation of 7 references, err: [Inf, 0.2411243121670559, 0.16314504891633988] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [75, 34, 0]]
** centroid: 1, normalized-entropy: 0.8953848900090126, [(1, 75), (2, 34)]
*** center 2: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [62, 10, 0]]
** centroid: 3, normalized-entropy: 0.581321498763703, [(1, 62), (2, 10)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 134, 14]]
** centroid: 4, normalized-entropy: 0.45162282218200417, [(2, 134), (3, 14)]
*** center 5: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [16, 5, 0]]
** centroid: 6, normalized-entropy: 0.7918583525674836, [(1, 16), (2, 5)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [31, 3, 0]]
** centroid: 7, normalized-entropy: 0.43055186701043935, [(1, 31), (2, 3)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19989713194966316] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19989713194966316, 0.1597040950357914] ***
*** finished computation of 7 references, err: [Inf, 0.19989713194966316, 0.1597040950357914] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [44, 1, 0]]
** centroid: 1, normalized-entropy: 0.1537421803287618, [(1, 44), (2, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 79, 19]]
** centroid: 2, normalized-entropy: 0.7095128863456239, [(2, 79), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [79, 1, 0]]
** centroid: 3, normalized-entropy: 0.09694460606247329, [(1, 79), (2, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 64, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [48, 3, 0]]
** centroid: 5, normalized-entropy: 0.32275695889739825, [(1, 48), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [77, 30, 0]]
** centroid: 6, normalized-entropy: 0.8559596826463527, [(1, 77), (2, 30)]
*** center 7: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22438518226612358] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22438518226612358, 0.1799671282749623] ***
*** finished computation of 7 references, err: [Inf, 0.22438518226612358, 0.1799671282749623] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [4, 116, 12]]
** centroid: 1, normalized-entropy: 0.39822507163779824, [(1, 4), (2, 116), (3, 12)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [13, 5, 0]]
** centroid: 2, normalized-entropy: 0.8524051786494784, [(1, 13), (2, 5)]
*** center 3: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 43, 0]]
** centroid: 5, normalized-entropy: 0.9015982354056711, [(1, 20), (2, 43)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [95, 9, 0]]
** centroid: 7, normalized-entropy: 0.42480887386781474, [(1, 95), (2, 9)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18377449607849122] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18377449607849122, 0.1642861782386899] ***
*** finished computation of 7 references, err: [Inf, 0.18377449607849122, 0.1642861782386899] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 66, 18]]
** centroid: 1, normalized-entropy: 0.7495952572594798, [(2, 66), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [1, 53, 0]]
** centroid: 2, normalized-entropy: 0.13303964861069897, [(1, 1), (2, 53)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [73, 6, 0]]
** centroid: 3, normalized-entropy: 0.3877431810559867, [(1, 73), (2, 6)]
*** center 4: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [41, 10, 0]]
** centroid: 5, normalized-entropy: 0.7140152804378671, [(1, 41), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [68, 46, 0]]
** centroid: 6, normalized-entropy: 0.9729661265889024, [(1, 68), (2, 46)]
*** center 7: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.16417086241859943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16417086241859943, 0.1471811426151544] ***
*** finished computation of 7 references, err: [Inf, 0.16417086241859943, 0.1471811426151544] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [23, 22, 0]]
** centroid: 1, normalized-entropy: 0.9996437496778561, [(1, 23), (2, 22)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 63, 16]]
** centroid: 2, normalized-entropy: 0.7269625813353975, [(2, 63), (3, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [64, 14, 0]]
** centroid: 4, normalized-entropy: 0.6789538995185759, [(1, 64), (2, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 24, 0]]
** centroid: 5, normalized-entropy: 0.8812908992306927, [(1, 56), (2, 24)]
*** center 6: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 64, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18670378355495632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18670378355495632, 0.15225574968755246] ***
*** finished computation of 7 references, err: [Inf, 0.18670378355495632, 0.15225574968755246] ***
*** center 1: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [2, 86, 0]]
** centroid: 2, normalized-entropy: 0.1564910629057016, [(1, 2), (2, 86)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 54, 13]]
** centroid: 3, normalized-entropy: 0.709825885194168, [(2, 54), (3, 13)]
*** center 4: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 17, 0]]
** centroid: 5, normalized-entropy: 0.7615877869576693, [(1, 60), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [38, 20, 0]]
** centroid: 6, normalized-entropy: 0.9293636260137188, [(1, 38), (2, 20)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [56, 2, 0]]
** centroid: 7, normalized-entropy: 0.21639693245126485, [(1, 56), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20793935109488665] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20793935109488665, 0.16027345669735224] ***
*** finished computation of 7 references, err: [Inf, 0.20793935109488665, 0.16027345669735224] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 89, 16]]
** centroid: 1, normalized-entropy: 0.6157667047517474, [(2, 89), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [51, 44, 0]]
** centroid: 2, normalized-entropy: 0.996079990851081, [(1, 51), (2, 44)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [66, 20, 0]]
** centroid: 3, normalized-entropy: 0.7824441294066888, [(1, 66), (2, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [55, 2, 0]]
** centroid: 5, normalized-entropy: 0.2192973081321754, [(1, 55), (2, 2)]
*** center 6: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [45, 18, 0]]
** centroid: 7, normalized-entropy: 0.8631205685666311, [(1, 45), (2, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2018403189079836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2018403189079836, 0.15418266495829447] ***
*** finished computation of 7 references, err: [Inf, 0.2018403189079836, 0.15418266495829447] ***
*** center 1: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 54, 6]]
** centroid: 2, normalized-entropy: 0.46899559358928133, [(2, 54), (3, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 70, 6]]
** centroid: 3, normalized-entropy: 0.39845927409523557, [(2, 70), (3, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [84, 31, 0]]
** centroid: 4, normalized-entropy: 0.8408400584625579, [(1, 84), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [54, 12, 0]]
** centroid: 5, normalized-entropy: 0.6840384356390419, [(1, 54), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [70, 8, 0]]
** centroid: 6, normalized-entropy: 0.4770713062193298, [(1, 70), (2, 8)]
*** center 7: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1861068578362465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1861068578362465, 0.15824104700982572] ***
*** finished computation of 7 references, err: [Inf, 0.1861068578362465, 0.15824104700982572] ***
*** center 1: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 95, 18]]
** centroid: 3, normalized-entropy: 0.6326131852700402, [(2, 95), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 33, 0]]
** centroid: 5, normalized-entropy: 0.9768740126265281, [(1, 23), (2, 33)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [57, 8, 0]]
** centroid: 6, normalized-entropy: 0.5381411852224502, [(1, 57), (2, 8)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [48, 34, 0]]
** centroid: 7, normalized-entropy: 0.9788698505067782, [(1, 48), (2, 34)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1873977860007435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1873977860007435, 0.15530840625066775] ***
*** finished computation of 7 references, err: [Inf, 0.1873977860007435, 0.15530840625066775] ***
*** center 1: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [72, 7, 0]]
** centroid: 2, normalized-entropy: 0.43180499427520785, [(1, 72), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [17, 39, 0]]
** centroid: 3, normalized-entropy: 0.8856128713989709, [(1, 17), (2, 39)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [27, 38, 0]]
** centroid: 4, normalized-entropy: 0.9792415350396869, [(1, 27), (2, 38)]
*** center 5: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 76, 13]]
** centroid: 6, normalized-entropy: 0.5999108763872215, [(2, 76), (3, 13)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [23, 25, 0]]
** centroid: 7, normalized-entropy: 0.9987472979361685, [(1, 23), (2, 25)]
finished with 12 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 361,3 => 31,1 => 608), Dict(2 => 384,3 => 33,1 => 583))
[ Info: ===== scores for single classifier: {"micro_f1":0.927,"precision":0.927,"recall":0.927,"macro_recall":0.9303143462931199,"macro_f1":0.866563802339691,"accuracy":0.927,"class_f1":{"2":0.9065300896286812,"3":0.738095238095238,"1":0.9550660792951541},"class_precision":{"2":0.8916876574307305,"3":0.6078431372549019,"1":0.9818840579710145},"class_recall":{"2":0.921875,"3":0.9393939393939394,"1":0.9296740994854202}}
[ Info: ===== scores for 1: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9716713121783876,"macro_f1":0.8954470597857558,"accuracy":0.966,"class_f1":{"2":0.954177897574124,"3":0.7415730337078651,"1":0.990590248075278},"class_precision":{"2":0.9888268156424581,"3":0.5892857142857143,"1":0.9880546075085325},"class_recall":{"2":0.921875,"3":1.0,"1":0.9931389365351629}}
[ Info: ===== scores for 5: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9812824590242043,"macro_f1":0.9438175537789303,"accuracy":0.974,"class_f1":{"2":0.9661458333333334,"3":0.88,"1":0.9853068280034573},"class_precision":{"2":0.9661458333333334,"3":0.7857142857142857,"1":0.9930313588850174},"class_recall":{"2":0.9661458333333334,"3":1.0,"1":0.9777015437392796}}
[ Info: ===== scores for 7: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.9798426481799124,"macro_f1":0.9423732953999808,"accuracy":0.972,"class_f1":{"2":0.9635416666666666,"3":0.88,"1":0.9835782195332756},"class_precision":{"2":0.9635416666666666,"3":0.7857142857142857,"1":0.9912891986062717},"class_recall":{"2":0.9635416666666666,"3":1.0,"1":0.9759862778730704}}
[ Info: ===== scores for 9: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9659939608347626,"macro_f1":0.9332895476434984,"accuracy":0.966,"class_f1":{"2":0.9557291666666666,"3":0.8648648648648648,"1":0.9792746113989638},"class_precision":{"2":0.9557291666666666,"3":0.7804878048780488,"1":0.9860869565217392},"class_recall":{"2":0.9557291666666666,"3":0.9696969696969697,"1":0.9725557461406518}}
[ Info: ===== scores for 11: {"micro_f1":0.963,"precision":0.963,"recall":0.963,"macro_recall":0.9723264484467316,"macro_f1":0.9157321017998837,"accuracy":0.963,"class_f1":{"2":0.9513797634691196,"3":0.8148148148148148,"1":0.9810017271157168},"class_precision":{"2":0.9602122015915119,"3":0.6875,"1":0.9878260869565217},"class_recall":{"2":0.9427083333333334,"3":1.0,"1":0.9742710120068611}}
(score = 0.963, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.974,"k":5,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9809861587573852,"macro_f1":0.9367452449565864,"accuracy":0.974,"class_f1":{"2":0.9660574412532636,"3":0.8571428571428571,"1":0.9870354364736388},"class_precision":{"2":0.9685863874345549,"3":0.75,"1":0.9947735191637631},"class_recall":{"2":0.9635416666666666,"3":1.0,"1":0.9794168096054888}}
Test Summary: | Pass  Total
AKNC          |    8      8
[437, 1, 1, 2, 10, 2, 4, 1, 4, 2, 1, 6, 4, 5, 25, 4, 6, 6, 11, 8, 7, 3, 12, 10, 4, 8, 10, 3, 5, 3, 5, 1, 2, 1, 1, 6, 3, 24, 45, 34, 50, 12, 15, 2, 9, 1, 2, 3, 21, 25, 31, 5, 2, 23, 7, 134, 62, 9, 31, 15, 6, 29, 8, 6, 6, 4, 25, 55, 10, 14, 4, 16, 15, 224, 1, 13, 40, 26, 61, 1, 83, 3, 21, 44, 22, 22, 4, 7, 16, 10, 7, 12, 45, 19, 3, 3, 4, 22, 7, 2, 7, 57, 31, 4, 11, 10, 18, 6, 34, 37, 29, 1, 2, 14, 9, 82, 17, 4, 4, 2, 3, 6, 9, 24, 73, 27, 28, 8, 1, 4, 27, 3, 121, 24, 5, 7, 2, 19, 88, 31, 18, 16, 12, 6, 3, 7, 28, 35, 21, 3, 36, 7, 27, 4, 723, 1, 45, 14, 62, 49, 23, 12, 13, 25, 17, 9, 3, 33, 15, 27, 13, 15, 12, 38, 41, 13, 14, 30, 11, 17, 60, 68, 4, 83, 31, 15, 10, 29, 33, 1, 11, 5, 484, 52, 18, 312, 11, 4, 14, 17, 10, 4, 48, 13, 5, 30, 34, 92, 50, 18, 1, 31, 14, 13, 175, 11, 138, 14, 22, 13, 13, 16, 15, 20, 5, 72, 31, 29, 58, 31, 10, 395, 33, 6, 23, 15, 10, 167, 24, 10, 2, 106, 193, 46, 9, 8, 52, 4, 25, 60, 19, 33, 45, 15, 4, 22, 3, 18, 57, 12, 2, 22, 121, 30, 353, 50, 33, 4, 47, 79, 37, 21, 47, 14, 10, 34, 5, 19, 24, 19, 66, 54, 6, 9, 16, 15, 32, 253, 22, 13, 35, 33, 14, 19, 8, 10, 13, 6, 193, 5]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.665, speedup = 0.26314825122122387, eval_ratio = 0.079025)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3733258928571426,"recall":0.3697916666666664,"f1":null,"seconds":0.0001055356115102768,"exhaustive_search_seconds":0.00028216466307640076,"evaluations":457.046875,"distances_sum":1728.0876013144598}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5546874999999999,"recall":0.5546874999999999,"f1":0.5546874999999999,"seconds":0.00020711682736873627,"exhaustive_search_seconds":0.00028216466307640076,"evaluations":624.7734375,"distances_sum":1615.6328241756914}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6571180555555555,"recall":0.6571180555555555,"f1":0.6571180555555555,"seconds":0.00032000988721847534,"exhaustive_search_seconds":0.00028216466307640076,"evaluations":762.9921875,"distances_sum":1564.569100878357}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7352430555555552,"recall":0.7352430555555552,"f1":0.7352430555555552,"seconds":0.0004052557051181793,"exhaustive_search_seconds":0.00028216466307640076,"evaluations":907.1875,"distances_sum":1538.1078073364833}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7968749999999996,"recall":0.7968749999999996,"f1":0.7968749999999996,"seconds":0.0007555205374956131,"exhaustive_search_seconds":0.00028216466307640076,"evaluations":1035.2578125,"distances_sum":1519.2804099987343}
KCenters.DeloneInvIndex> reached performance {"precision":0.8359374999999992,"recall":0.8359374999999992,"f1":0.8359374999999992,"seconds":0.0005563627928495407,"exhaustive_search_seconds":0.00028216466307640076,"evaluations":1149.21875,"distances_sum":1508.5890697869827}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8310000000000001, speedup = 0.7513671450851874, eval_ratio = 0.11520999999999999)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
