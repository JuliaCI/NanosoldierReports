Julia Version 1.5.0-DEV.611
Commit 8057c60354 (2020-04-10 14:54 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed InvertedIndices ───────────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed Compat ────────────────────── v3.8.0
  Installed Parsers ───────────────────── v1.0.1
  Installed KCenters ──────────────────── v0.2.2
  Installed MLDataPattern ─────────────── v0.5.1
  Installed MLDataUtils ───────────────── v0.5.1
  Installed DataFrames ────────────────── v0.20.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed Missings ──────────────────── v0.4.3
  Installed TableTraits ───────────────── v1.0.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed JSON ──────────────────────── v0.21.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Tables ────────────────────── v1.0.3
  Installed MappedArrays ──────────────── v0.2.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed StatsBase ─────────────────── v0.32.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed DataStructures ────────────── v0.17.11
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.11
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.1
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_GSc709/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_GSc709/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.11
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.1
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9326678744951884
[ Info: 0.8326150393486023
[ Info: 0.5541281573474407
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32480694947143396
mean(cdnet.distances) = 0.4023491026709477
mean(crand.distances) = 0.34899330938855805
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.583984375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.583984375,"f1":0.7221603049728058,"seconds":5.245208740234375e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":7.3359375,"distances_sum":1657.5416782258853}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.251953125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.251953125,"f1":null,"seconds":4.073604941368103e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":7.0,"distances_sum":756.2541660529881}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4072265625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4072265625,"f1":null,"seconds":3.995373845100403e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":6.6953125,"distances_sum":1158.2441185722334}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.546875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.546875,"f1":0.6892681970806978,"seconds":4.468485713005066e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":7.0703125,"distances_sum":1480.957878095188}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.583984375,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.583984375,"f1":0.7221603049728058,"seconds":5.245208740234375e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":7.3359375,"distances_sum":1657.5416782258853}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9233636155511167,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.8671875,"distances_sum":2742.8432189398764}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9086252289377298,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.7734375,"distances_sum":2618.847556429968}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.693359375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.693359375,"f1":0.8118454462204471,"seconds":5.010515451431274e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":7.8359375,"distances_sum":2001.4817764935385}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.8025797119547128,"seconds":5.066394805908203e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":7.9609375,"distances_sum":1992.7516459618016}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8928436147186153,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.7265625,"distances_sum":2529.107221996366}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.803203567266068,"seconds":5.21540641784668e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":7.8984375,"distances_sum":1983.027562753809}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":2,"bsize":5}, perf: {"precision":null,"recall":0.748046875,"f1":null,"seconds":5.3551048040390015e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.359375,"distances_sum":2275.06354844798}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.8049974331224339,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":7.984375,"distances_sum":2009.0537340193614}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.869140625,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.869140625,"f1":0.9233636155511167,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.8671875,"distances_sum":2742.8432189398764}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9603854478854484,"seconds":6.0927122831344604e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.953125,"distances_sum":3035.5207609209897}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9353880494505501,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.9453125,"distances_sum":2813.276240173939}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9628548534798541,"seconds":6.373971700668335e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.9765625,"distances_sum":3028.1507325502075}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9687328296703301,"seconds":6.606802344322205e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.9765625,"distances_sum":3082.872592648818}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9329555860805869,"seconds":6.0927122831344604e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.953125,"distances_sum":2787.2349361011848}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9366185897435906,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.90625,"distances_sum":2807.8026643758226}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9687328296703301,"seconds":6.606802344322205e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.9765625,"distances_sum":3082.872592648818}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9687328296703301,"seconds":6.606802344322205e-6,"exhaustive_search_seconds":1.780688762664795e-6,"evaluations":8.9765625,"distances_sum":3082.872592648818}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8474312146187155,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.109375,"distances_sum":2130.592747370458}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6484375,"f1":0.7717664280164288,"seconds":5.014240741729736e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":7.515625,"distances_sum":1827.8528040960027}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5166015625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5166015625,"f1":0.668061105561106,"seconds":4.427507519721985e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":6.5,"distances_sum":1472.1357823455046}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.75,"f1":0.8474312146187155,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.109375,"distances_sum":2130.592747370458}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9335222069597079,"seconds":6.433576345443726e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.6328125,"distances_sum":2654.2775279570387}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9550881410256414,"seconds":4.667229950428009e-5,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.7578125,"distances_sum":2835.042643766673}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.9197401556776563,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.5546875,"distances_sum":2560.561610876343}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9513507326007332,"seconds":6.197020411491394e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.734375,"distances_sum":2806.8058820188953}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9550881410256414,"seconds":4.667229950428009e-5,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.7578125,"distances_sum":2835.042643766673}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9753548534798535,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.890625,"distances_sum":2978.4188222517846}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.956519001831502,"seconds":8.814036846160889e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.7421875,"distances_sum":2852.041792625368}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.955752060439561,"seconds":6.161630153656006e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.765625,"distances_sum":2850.5611350741137}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":9,"bsize":11}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.963192536630037,"seconds":6.332993507385254e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.8828125,"distances_sum":2865.555939895584}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9621508699633705,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.8046875,"distances_sum":2877.5086211541966}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9753548534798535,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.890625,"distances_sum":2978.4188222517846}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9753548534798535,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":8.890625,"distances_sum":2978.4188222517846}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8427182192807201,"seconds":5.034729838371277e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.3046875,"distances_sum":2067.0556343539192}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5751953125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5751953125,"f1":0.7120788933288938,"seconds":4.239380359649658e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.03125,"distances_sum":1463.632650747677}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7412109375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7412109375,"f1":0.8427182192807201,"seconds":5.034729838371277e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.3046875,"distances_sum":2067.0556343539192}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9063046328671336,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.65625,"distances_sum":2448.3083301319966}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.8466725982350991,"seconds":5.148351192474365e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.453125,"distances_sum":2085.014414503367}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.83984375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.83984375,"f1":0.9063046328671336,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.65625,"distances_sum":2448.3083301319966}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9600675366300372,"seconds":8.109956979751587e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8203125,"distances_sum":2907.623137487119}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9363381410256415,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.78125,"distances_sum":2695.4765842508336}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9397841741591744,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8203125,"distances_sum":2727.745288614261}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9600675366300372,"seconds":8.109956979751587e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8203125,"distances_sum":2907.623137487119}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9296875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9600675366300372,"seconds":8.109956979751587e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8203125,"distances_sum":2907.623137487119}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.52734375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.52734375,"f1":0.6765713453213459,"seconds":4.254281520843506e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.515625,"distances_sum":1494.516934916973}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.52734375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.52734375,"f1":0.6765713453213459,"seconds":4.254281520843506e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.515625,"distances_sum":1494.516934916973}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.642578125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.642578125,"f1":0.7672258297258304,"seconds":4.654750227928162e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.2734375,"distances_sum":1821.1184179904797}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9026275807525816,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.3203125,"distances_sum":2461.896813492386}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8593791625041634,"seconds":8.808448910713196e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.125,"distances_sum":2217.0212972581407}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66015625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.66015625,"f1":0.7796977328227335,"seconds":4.820525646209717e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.375,"distances_sum":1870.5918370312017}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.658203125,"f1":0.7818596334221343,"seconds":4.986301064491272e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.3359375,"distances_sum":1863.5540484984128}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8359375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8359375,"f1":0.9026275807525816,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.3203125,"distances_sum":2461.896813492386}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9201007326007331,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.3984375,"distances_sum":2598.82952375642}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9662462537462541,"seconds":6.211921572685242e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.828125,"distances_sum":2913.089555091794}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9162207584082591,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.3359375,"distances_sum":2588.720038856071}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9508642399267404,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.71875,"distances_sum":2824.5086836422793}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9544127747252753,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.75,"distances_sum":2837.5502976013477}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9145146520146525,"seconds":5.45009970664978e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.453125,"distances_sum":2498.9669117292065}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9132071053946064,"seconds":7.82310962677002e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.3671875,"distances_sum":2531.5901548242477}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9270776098901106,"seconds":5.681067705154419e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5546875,"distances_sum":2657.305078812968}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9662462537462541,"seconds":6.211921572685242e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.828125,"distances_sum":2913.089555091794}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9662462537462541,"seconds":6.211921572685242e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.828125,"distances_sum":2913.089555091794}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5830078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5830078125,"f1":null,"seconds":4.5746564865112305e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.0,"distances_sum":1536.5623770652946}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8595243298368307,"seconds":5.466863512992859e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.1328125,"distances_sum":2213.7709044806857}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2236328125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2236328125,"f1":null,"seconds":3.6191195249557495e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":5.828125,"distances_sum":608.3701304541581}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8595243298368307,"seconds":5.466863512992859e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.1328125,"distances_sum":2213.7709044806857}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9241050616050621,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.578125,"distances_sum":2718.296045871924}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9437271062271069,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.734375,"distances_sum":2825.8166362841284}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9588770604395609,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.859375,"distances_sum":2908.142753935779}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9588770604395609,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.859375,"distances_sum":2908.142753935779}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9663347069597075,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.90625,"distances_sum":2974.6236139160837}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9789262820512823,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9375,"distances_sum":3067.6963935977737}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.974089972527473,"seconds":6.319954991340637e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.984375,"distances_sum":3015.3733961099497}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.976470924908425,"seconds":6.51925802230835e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9375,"distances_sum":3034.124542210944}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9789262820512823,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9375,"distances_sum":3067.6963935977737}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9789262820512823,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9375,"distances_sum":3067.6963935977737}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8652954684204692,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.484375,"distances_sum":2134.7923777578394}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.8652954684204692,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.484375,"distances_sum":2134.7923777578394}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9541723901098905,"seconds":6.126239895820618e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.828125,"distances_sum":2716.214168618603}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9642513736263741,"seconds":6.120651960372925e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.96875,"distances_sum":2756.7711274700937}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9642513736263741,"seconds":6.120651960372925e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.96875,"distances_sum":2756.7711274700937}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9819940476190477,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.984375,"distances_sum":2909.257152210901}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9709649725274729,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.9375,"distances_sum":2797.560066837929}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9739583333333337,"seconds":6.057322025299072e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.953125,"distances_sum":2821.8155587643237}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9677734375,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9819940476190477,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.984375,"distances_sum":2909.257152210901}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9677734375,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9819940476190477,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.984375,"distances_sum":2909.257152210901}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7353515625,"f1":0.8366050616050624,"seconds":4.98257577419281e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.921875,"distances_sum":2110.44614377876}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3857421875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3857421875,"f1":null,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":5.765625,"distances_sum":963.7003187063384}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7353515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7353515625,"f1":0.8366050616050624,"seconds":4.98257577419281e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.921875,"distances_sum":2110.44614377876}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9518658424908432,"seconds":5.6568533182144165e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7890625,"distances_sum":2833.9633140963615}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.892897727272728,"seconds":5.327165126800537e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.3828125,"distances_sum":2406.8747706549207}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8901796120546128,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.375,"distances_sum":2370.187925023214}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9518658424908432,"seconds":5.6568533182144165e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7890625,"distances_sum":2833.9633140963615}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9553056318681326,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7890625,"distances_sum":2845.2918267270097}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9716346153846158,"seconds":6.724148988723755e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.859375,"distances_sum":3004.8507933657406}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9637706043956047,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.84375,"distances_sum":2942.9618187161414}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9547306859806862,"seconds":5.602836608886719e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7421875,"distances_sum":2894.0993176760953}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9716346153846158,"seconds":6.724148988723755e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.859375,"distances_sum":3004.8507933657406}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9716346153846158,"seconds":6.724148988723755e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.859375,"distances_sum":3004.8507933657406}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2724609375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2724609375,"f1":null,"seconds":3.5800039768218994e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.3515625,"distances_sum":474.29773901456286}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2724609375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2724609375,"f1":null,"seconds":3.5800039768218994e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.3515625,"distances_sum":474.29773901456286}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.58203125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.58203125,"f1":null,"seconds":4.839152097702026e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.265625,"distances_sum":1098.0924859357847}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2060546875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2060546875,"f1":null,"seconds":3.5315752029418945e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":5.7109375,"distances_sum":366.8543530509839}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.58203125,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.58203125,"f1":null,"seconds":4.839152097702026e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.265625,"distances_sum":1098.0924859357847}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.697265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.697265625,"f1":0.8119521103896111,"seconds":4.988163709640503e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.8359375,"distances_sum":1351.7382713199454}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9444628288378293,"seconds":6.027519702911377e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.5625,"distances_sum":2013.942703597568}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9396525349650356,"seconds":5.455687642097473e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.546875,"distances_sum":1958.020750087847}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5859375, conf: {"ssize":7,"bsize":3}, perf: {"precision":1.0,"recall":0.5859375,"f1":0.7214393245643251,"seconds":4.474073648452759e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.28125,"distances_sum":1139.8814057615994}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6875, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.6875,"f1":0.80075774919525,"seconds":4.9229711294174194e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.7421875,"distances_sum":1311.3294940584335}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9444628288378293,"seconds":6.027519702911377e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.5625,"distances_sum":2013.942703597568}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9446662712287717,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.5546875,"distances_sum":2017.6082770623154}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9635645604395608,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.84375,"distances_sum":2092.8644200177487}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9495077838827845,"seconds":5.347654223442078e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8046875,"distances_sum":1983.3071353089915}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9635645604395608,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.84375,"distances_sum":2092.8644200177487}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9635645604395608,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.84375,"distances_sum":2092.8644200177487}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.852723665223666,"seconds":5.112960934638977e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.7890625,"distances_sum":1618.0719158030533}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2490234375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2490234375,"f1":null,"seconds":3.3974647521972656e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":6.078125,"distances_sum":511.1905885091521}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.759765625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.759765625,"f1":0.852723665223666,"seconds":5.112960934638977e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.7890625,"distances_sum":1618.0719158030533}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.951250832500833,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7578125,"distances_sum":2141.086368230522}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.951250832500833,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7578125,"distances_sum":2141.086368230522}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9632326007326013,"seconds":5.921348929405212e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.828125,"distances_sum":2216.8054124323644}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9608115842490845,"seconds":5.694106221199036e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8359375,"distances_sum":2158.5819302918976}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9632326007326013,"seconds":5.921348929405212e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.828125,"distances_sum":2216.8054124323644}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9632326007326013,"seconds":5.921348929405212e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.828125,"distances_sum":2216.8054124323644}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.39453125, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.39453125,"f1":null,"seconds":3.634020686149597e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.328125,"distances_sum":825.440096222564}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.870971216283717,"seconds":5.127862095832825e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.9140625,"distances_sum":1799.3008428064898}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7841796875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7841796875,"f1":0.870971216283717,"seconds":5.127862095832825e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.9140625,"distances_sum":1799.3008428064898}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9115988178488186,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.578125,"distances_sum":2027.137590523605}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9288237803862811,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7265625,"distances_sum":2075.273408490193}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8958333333333338,"seconds":7.670372724533081e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.5703125,"distances_sum":1892.0168777070733}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8914439726939735,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.375,"distances_sum":1853.0616665305486}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.876953125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.876953125,"f1":0.9288237803862811,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7265625,"distances_sum":2075.273408490193}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9521806318681325,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.859375,"distances_sum":2237.4979798645513}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9465659340659345,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.765625,"distances_sum":2202.0121701402772}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9422161172161182,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8046875,"distances_sum":2157.8265725199362}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9561641483516491,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8671875,"distances_sum":2248.1984589209314}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9538747710622716,"seconds":5.763024091720581e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8828125,"distances_sum":2232.6876394649776}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9442052738927743,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8203125,"distances_sum":2170.8158997837886}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9660370879120883,"seconds":6.372109055519104e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8671875,"distances_sum":2306.1968357503793}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9660370879120883,"seconds":6.372109055519104e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8671875,"distances_sum":2306.1968357503793}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9660370879120883,"seconds":6.372109055519104e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8671875,"distances_sum":2306.1968357503793}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.234375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.234375,"f1":null,"seconds":3.170222043991089e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":5.515625,"distances_sum":454.99793037241176}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.234375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.234375,"f1":null,"seconds":3.170222043991089e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":5.515625,"distances_sum":454.99793037241176}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8480129245754253,"seconds":5.150213837623596e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.03125,"distances_sum":1635.3095897601959}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7001953125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.7001953125,"f1":0.8103977619602628,"seconds":4.82611358165741e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":7.765625,"distances_sum":1489.0855599743065}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.75,"f1":0.8480129245754253,"seconds":5.150213837623596e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.03125,"distances_sum":1635.3095897601959}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9197490009990018,"seconds":5.7015568017959595e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.5859375,"distances_sum":1929.5315405426447}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9532051282051287,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.7109375,"distances_sum":2141.913603988518}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9497653388278393,"seconds":5.718320608139038e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.6953125,"distances_sum":2118.5233160648204}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9467319139194145,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.640625,"distances_sum":2105.465747815708}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9243423243423248,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.6328125,"distances_sum":1968.5438509615637}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9357975357975363,"seconds":6.722286343574524e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.640625,"distances_sum":2010.6671141220609}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9532051282051287,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.7109375,"distances_sum":2141.913603988518}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9593635531135536,"seconds":6.061047315597534e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8046875,"distances_sum":2149.272256503991}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9546531593406598,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.765625,"distances_sum":2134.5570072201167}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":3,"bsize":13}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9709077380952384,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.890625,"distances_sum":2210.336538335525}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.960491071428572,"seconds":5.725771188735962e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8046875,"distances_sum":2153.34650153395}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9796875000000003,"seconds":5.902722477912903e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.921875,"distances_sum":2268.307277269169}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9544903013653019,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.7421875,"distances_sum":2131.263458559718}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9796875000000003,"seconds":5.902722477912903e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.921875,"distances_sum":2268.307277269169}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9796875000000003,"seconds":5.902722477912903e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.921875,"distances_sum":2268.307277269169}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8595675158175168,"seconds":4.975125193595886e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.9765625,"distances_sum":1518.049769547336}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.201171875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.201171875,"f1":null,"seconds":3.3043324947357178e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":5.71875,"distances_sum":395.2294700235515}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.8595675158175168,"seconds":4.975125193595886e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.9765625,"distances_sum":1518.049769547336}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9444685522810525,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.703125,"distances_sum":1925.6908788019746}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9052734375,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9052734375,"f1":0.9444685522810525,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.703125,"distances_sum":1925.6908788019746}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9751545329670332,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.890625,"distances_sum":2101.697979188672}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9751545329670332,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.890625,"distances_sum":2101.697979188672}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9751545329670332,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.890625,"distances_sum":2101.697979188672}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8723562895437903,"seconds":5.00120222568512e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.078125,"distances_sum":1632.9218741019695}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8723562895437903,"seconds":5.00120222568512e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.078125,"distances_sum":1632.9218741019695}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9543784340659345,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7578125,"distances_sum":2104.3356437249995}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9543784340659345,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7578125,"distances_sum":2104.3356437249995}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9698889652014655,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.859375,"distances_sum":2200.953932588443}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9721554487179491,"seconds":5.9586018323898315e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.90625,"distances_sum":2183.818501076738}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9721554487179491,"seconds":5.9586018323898315e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.90625,"distances_sum":2183.818501076738}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9721554487179491,"seconds":5.9586018323898315e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.90625,"distances_sum":2183.818501076738}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.646484375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.646484375,"f1":0.7727501665001674,"seconds":4.4871121644973755e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.3359375,"distances_sum":1363.1550847921067}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.646484375,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.646484375,"f1":0.7727501665001674,"seconds":4.4871121644973755e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.3359375,"distances_sum":1363.1550847921067}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9211460414585421,"seconds":5.358830094337463e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.4296875,"distances_sum":1904.3752856501528}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8662109375,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8662109375,"f1":0.9211460414585421,"seconds":5.358830094337463e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.4296875,"distances_sum":1904.3752856501528}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9382726648351651,"seconds":5.407258868217468e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.5703125,"distances_sum":1986.6375673136988}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":10,"bsize":11}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.976842948717949,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8828125,"distances_sum":2233.97917611078}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9528133325008331,"seconds":5.763024091720581e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.78125,"distances_sum":2076.623019936008}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":10,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.976842948717949,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8828125,"distances_sum":2233.97917611078}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":10,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.976842948717949,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8828125,"distances_sum":2233.97917611078}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8564029720279728,"seconds":5.478039383888245e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.3359375,"distances_sum":1513.5295895054967}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6025390625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.6025390625,"f1":0.736739302364303,"seconds":5.795806646347046e-5,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.71875,"distances_sum":1138.29080271617}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.58203125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.58203125,"f1":0.7209490162615169,"seconds":4.492700099945068e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.6953125,"distances_sum":1074.5036073558533}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7646484375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7646484375,"f1":0.8564029720279728,"seconds":5.478039383888245e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.3359375,"distances_sum":1513.5295895054967}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.958430631868132,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.796875,"distances_sum":2029.702586593759}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9355368589743598,"seconds":6.683170795440674e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.6484375,"distances_sum":1876.6815471258228}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8615358599733607,"seconds":5.1818788051605225e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.3515625,"distances_sum":1529.589724857931}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9250692016317024,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.453125,"distances_sum":1814.2396818646569}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9231315559440568,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.453125,"distances_sum":1796.7112162132348}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.958430631868132,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.796875,"distances_sum":2029.702586593759}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9737351190476192,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9296875,"distances_sum":2121.4349669172216}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9741472069597075,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9296875,"distances_sum":2116.3875524008713}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9741472069597075,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9296875,"distances_sum":2116.3875524008713}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9741472069597075,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9296875,"distances_sum":2116.3875524008713}}, n: 9
mean(cfft.distances) = 0.3254584959154541
mean(cdnet.distances) = 0.5064825277311086
mean(crand.distances) = 0.33705549024928755
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8755555555555555
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8955555555555555
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8844444444444445
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8933333333333332
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9488888888888889
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8422222222222223
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8755555555555556
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8733333333333334
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9288888888888889
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9111111111111111
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9311111111111111
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8577777777777778
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8622222222222223
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9199999999999999
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.851111111111111
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9222222222222222
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9311111111111111
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8911111111111111
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8866666666666667
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8355555555555556
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8577777777777778
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9088888888888889
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 2, 2, 1, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 2, 2, 1, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 2, 2, 1, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 2, 2, 1, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 2, 2, 1, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 2, 2, 1, 3, 2, 3, 1]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 2, 2, 1, 3, 2, 3, 1]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.5287384077906608] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 15]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 5), (3, 15)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 12]]
** centroid: 12, normalized-entropy: 0.3912435636292556, [(2, 1), (3, 12)]
finished with 13 centroids; started with 12
acc = 0.9266666666666666
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.4844512769885294] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4844512769885294, 0.3295502902509214] ***
*** starting iteration: 2; err: [Inf, 0.4844512769885294, 0.3295502902509214] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4844512769885294, 0.3295502902509214, 0.30384457954862815] ***
*** starting iteration: 3; err: [Inf, 0.4844512769885294, 0.3295502902509214, 0.30384457954862815] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4844512769885294, 0.3295502902509214, 0.30384457954862815, 0.2984034136250928] ***
*** finished computation of 3 references, err: [Inf, 0.4844512769885294, 0.3295502902509214, 0.30384457954862815, 0.2984034136250928] ***
*** center 1: selecting labels [1] (freq >= 2) [from [220, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [87, 139, 1]]
** centroid: 2, normalized-entropy: 0.9614670453912634, [(1, 87), (2, 139)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [91, 112, 16]]
** centroid: 3, normalized-entropy: 0.8183225238569661, [(1, 91), (2, 112), (3, 16)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37976144896778297] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37976144896778297, 0.33688199799926744] ***
*** starting iteration: 2; err: [Inf, 0.37976144896778297, 0.33688199799926744] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37976144896778297, 0.33688199799926744, 0.33105017754180854] ***
*** starting iteration: 3; err: [Inf, 0.37976144896778297, 0.33688199799926744, 0.33105017754180854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37976144896778297, 0.33688199799926744, 0.33105017754180854, 0.32738618431347555] ***
*** finished computation of 3 references, err: [Inf, 0.37976144896778297, 0.33688199799926744, 0.33105017754180854, 0.32738618431347555] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [39, 134, 15]]
** centroid: 1, normalized-entropy: 0.7003075515054403, [(1, 39), (2, 134), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [150, 48, 0]]
** centroid: 2, normalized-entropy: 0.7990485210442682, [(1, 150), (2, 48)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [238, 43, 0]]
** centroid: 3, normalized-entropy: 0.6173586614327383, [(1, 238), (2, 43)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34252601148172473] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34252601148172473, 0.29799016126092226] ***
*** starting iteration: 2; err: [Inf, 0.34252601148172473, 0.29799016126092226] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34252601148172473, 0.29799016126092226, 0.295693497128807] ***
*** starting iteration: 3; err: [Inf, 0.34252601148172473, 0.29799016126092226, 0.295693497128807] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34252601148172473, 0.29799016126092226, 0.295693497128807, 0.295165424014552] ***
*** finished computation of 3 references, err: [Inf, 0.34252601148172473, 0.29799016126092226, 0.295693497128807, 0.295165424014552] ***
*** center 1: selecting labels [1] (freq >= 2) [from [189, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [140, 73, 0]]
** centroid: 2, normalized-entropy: 0.9274006288148685, [(1, 140), (2, 73)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [92, 155, 18]]
** centroid: 3, normalized-entropy: 0.7861247420226785, [(1, 92), (2, 155), (3, 18)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.24437531495785658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24437531495785658, 0.17348588981341245] ***
*** finished computation of 7 references, err: [Inf, 0.24437531495785658, 0.17348588981341245] ***
*** center 1: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [121, 21, 0]]
** centroid: 2, normalized-entropy: 0.6045279815569363, [(1, 121), (2, 21)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [9, 120, 8]]
** centroid: 3, normalized-entropy: 0.41942643690377424, [(1, 9), (2, 120), (3, 8)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 95, 9]]
** centroid: 4, normalized-entropy: 0.42480887386781474, [(2, 95), (3, 9)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [119, 15, 0]]
** centroid: 5, normalized-entropy: 0.5057408862206602, [(1, 119), (2, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2140105416288954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2140105416288954, 0.16474529466908733] ***
*** finished computation of 7 references, err: [Inf, 0.2140105416288954, 0.16474529466908733] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [80, 28, 0]]
** centroid: 1, normalized-entropy: 0.8256265261578954, [(1, 80), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [38, 5, 0]]
** centroid: 2, normalized-entropy: 0.5185697317883058, [(1, 38), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 99, 15]]
** centroid: 3, normalized-entropy: 0.5617526078313283, [(2, 99), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [131, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 92, 0]]
** centroid: 5, normalized-entropy: 0.7076690004167966, [(1, 22), (2, 92)]
*** center 6: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19896703922696624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19896703922696624, 0.15281464503114595] ***
*** finished computation of 7 references, err: [Inf, 0.19896703922696624, 0.15281464503114595] ***
*** center 1: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 7, 0]]
** centroid: 2, normalized-entropy: 0.4830306801456181, [(1, 60), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [84, 3, 0]]
** centroid: 3, normalized-entropy: 0.21639693245126485, [(1, 84), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [6, 83, 0]]
** centroid: 4, normalized-entropy: 0.35620480393132253, [(1, 6), (2, 83)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 91, 18]]
** centroid: 5, normalized-entropy: 0.6464599001526788, [(2, 91), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [77, 19, 0]]
** centroid: 6, normalized-entropy: 0.7177418091697444, [(1, 77), (2, 19)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [87, 25, 0]]
** centroid: 7, normalized-entropy: 0.765993414171823, [(1, 87), (2, 25)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25196026605987426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25196026605987426, 0.2047077602016049] ***
*** finished computation of 7 references, err: [Inf, 0.25196026605987426, 0.2047077602016049] ***
*** center 1: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [64, 31, 0]]
** centroid: 2, normalized-entropy: 0.9111178649415465, [(1, 64), (2, 31)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 52, 0]]
** centroid: 3, normalized-entropy: 0.9990102708804813, [(1, 56), (2, 52)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [45, 19, 0]]
** centroid: 4, normalized-entropy: 0.877437311089633, [(1, 45), (2, 19)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 115, 17]]
** centroid: 5, normalized-entropy: 0.5541045423898253, [(2, 115), (3, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [71, 34, 0]]
** centroid: 7, normalized-entropy: 0.908476164453323, [(1, 71), (2, 34)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2425523100216975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2425523100216975, 0.19405805670294626] ***
*** finished computation of 7 references, err: [Inf, 0.2425523100216975, 0.19405805670294626] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 86, 5]]
** centroid: 1, normalized-entropy: 0.30704288878312236, [(2, 86), (3, 5)]
*** center 2: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 64, 10]]
** centroid: 5, normalized-entropy: 0.5713549744279549, [(2, 64), (3, 10)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [113, 18, 0]]
** centroid: 6, normalized-entropy: 0.577401071927696, [(1, 113), (2, 18)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [59, 57, 0]]
** centroid: 7, normalized-entropy: 0.9997855578884436, [(1, 59), (2, 57)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20936045337976633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20936045337976633, 0.1862466191828273] ***
*** finished computation of 7 references, err: [Inf, 0.20936045337976633, 0.1862466191828273] ***
*** center 1: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [36, 67, 0]]
** centroid: 2, normalized-entropy: 0.9336337717211408, [(1, 36), (2, 67)]
*** center 3: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [84, 3, 0]]
** centroid: 4, normalized-entropy: 0.21639693245126485, [(1, 84), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 74, 0]]
** centroid: 5, normalized-entropy: 0.8478617451660525, [(1, 28), (2, 74)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 84, 18]]
** centroid: 6, normalized-entropy: 0.6722948170756378, [(2, 84), (3, 18)]
*** center 7: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3316623231454811] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3316623231454811, 0.2517727824279692] ***
*** finished computation of 3 references, err: [Inf, 0.3316623231454811, 0.2517727824279692] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [91, 195, 17]]
** centroid: 1, normalized-entropy: 0.7341193043736687, [(1, 91), (2, 195), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [117, 56, 0]]
** centroid: 2, normalized-entropy: 0.9083591650558914, [(1, 117), (2, 56)]
*** center 3: selecting labels [1] (freq >= 1) [from [190, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.33254262934141476] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33254262934141476, 0.2809094740580516] ***
*** finished computation of 3 references, err: [Inf, 0.33254262934141476, 0.2809094740580516] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [38, 95, 15]]
** centroid: 1, normalized-entropy: 0.7879724786418952, [(1, 38), (2, 95), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [103, 128, 0]]
** centroid: 2, normalized-entropy: 0.991534520637393, [(1, 103), (2, 128)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [286, 2, 0]]
** centroid: 3, normalized-entropy: 0.0597749933915508, [(1, 286), (2, 2)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3495566839480708] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3495566839480708, 0.27659787231151467] ***
*** finished computation of 3 references, err: [Inf, 0.3495566839480708, 0.27659787231151467] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [265, 40, 0]]
** centroid: 1, normalized-entropy: 0.5605769426145328, [(1, 265), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [153, 72, 0]]
** centroid: 2, normalized-entropy: 0.9043814577244941, [(1, 153), (2, 72)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [3, 116, 18]]
** centroid: 3, normalized-entropy: 0.44713605894676467, [(1, 3), (2, 116), (3, 18)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34135549914863733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34135549914863733, 0.25516588321723344] ***
*** finished computation of 3 references, err: [Inf, 0.34135549914863733, 0.25516588321723344] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [265, 9, 0]]
** centroid: 1, normalized-entropy: 0.2084729931160756, [(1, 265), (2, 9)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [3, 176, 17]]
** centroid: 2, normalized-entropy: 0.3392258482747493, [(1, 3), (2, 176), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [130, 66, 0]]
** centroid: 3, normalized-entropy: 0.9216597034450192, [(1, 130), (2, 66)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2932874391399459] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2932874391399459, 0.24013017537281744] ***
*** finished computation of 3 references, err: [Inf, 0.2932874391399459, 0.24013017537281744] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [304, 13, 0]]
** centroid: 1, normalized-entropy: 0.2469015524653248, [(1, 304), (2, 13)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [6, 134, 15]]
** centroid: 2, normalized-entropy: 0.4348538715670355, [(1, 6), (2, 134), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [117, 78, 0]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(1, 117), (2, 78)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24281656494464676] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24281656494464676, 0.2387796906821396] ***
*** finished computation of 3 references, err: [Inf, 0.24281656494464676, 0.2387796906821396] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [121, 105, 10]]
** centroid: 1, normalized-entropy: 0.7616772398794124, [(1, 121), (2, 105), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [195, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [105, 123, 8]]
** centroid: 3, normalized-entropy: 0.7415528491531657, [(1, 105), (2, 123), (3, 8)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2534203634977721] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2534203634977721, 0.19264471709068204] ***
*** finished computation of 7 references, err: [Inf, 0.2534203634977721, 0.19264471709068204] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [83, 53, 0]]
** centroid: 1, normalized-entropy: 0.9646094817382488, [(1, 83), (2, 53)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [65, 2, 0]]
** centroid: 2, normalized-entropy: 0.19364280468389852, [(1, 65), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 88, 17]]
** centroid: 3, normalized-entropy: 0.6388469391771899, [(2, 88), (3, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [71, 23, 0]]
** centroid: 4, normalized-entropy: 0.8027381019527042, [(1, 71), (2, 23)]
*** center 5: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [86, 1, 0]]
** centroid: 6, normalized-entropy: 0.09054385326964301, [(1, 86), (2, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 84, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23172958842387933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23172958842387933, 0.19500958858612183] ***
*** finished computation of 7 references, err: [Inf, 0.23172958842387933, 0.19500958858612183] ***
*** center 1: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [74, 3, 0]]
** centroid: 2, normalized-entropy: 0.23750814382859295, [(1, 74), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 84, 15]]
** centroid: 3, normalized-entropy: 0.6136190195993708, [(2, 84), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [47, 48, 0]]
** centroid: 5, normalized-entropy: 0.9999200708207958, [(1, 47), (2, 48)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [62, 4, 0]]
** centroid: 6, normalized-entropy: 0.32984607020714635, [(1, 62), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [15, 86, 0]]
** centroid: 7, normalized-entropy: 0.6061112071230008, [(1, 15), (2, 86)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2240339749293036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2240339749293036, 0.190315176600191] ***
*** finished computation of 7 references, err: [Inf, 0.2240339749293036, 0.190315176600191] ***
*** center 1: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 63, 18]]
** centroid: 2, normalized-entropy: 0.7642045065086204, [(2, 63), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [96, 9, 0]]
** centroid: 3, normalized-entropy: 0.4220005168831531, [(1, 96), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [32, 72, 0]]
** centroid: 4, normalized-entropy: 0.8904916402194913, [(1, 32), (2, 72)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 84, 0]]
** centroid: 5, normalized-entropy: 0.7062740891876008, [(1, 20), (2, 84)]
*** center 6: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21489341676447754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21489341676447754, 0.19211772493262952] ***
*** starting iteration: 2; err: [Inf, 0.21489341676447754, 0.19211772493262952] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21489341676447754, 0.19211772493262952, 0.19051515668988586] ***
*** starting iteration: 3; err: [Inf, 0.21489341676447754, 0.19211772493262952, 0.19051515668988586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21489341676447754, 0.19211772493262952, 0.19051515668988586, 0.18969307253808454] ***
*** finished computation of 7 references, err: [Inf, 0.21489341676447754, 0.19211772493262952, 0.19051515668988586, 0.18969307253808454] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 116, 16]]
** centroid: 1, normalized-entropy: 0.5328350630342235, [(2, 116), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [98, 4, 0]]
** centroid: 3, normalized-entropy: 0.23868451135100152, [(1, 98), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 21, 0]]
** centroid: 4, normalized-entropy: 0.8503821170987139, [(1, 55), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [75, 17, 0]]
** centroid: 5, normalized-entropy: 0.6904285855304167, [(1, 75), (2, 17)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 85, 1]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [100, 8, 0]]
** centroid: 7, normalized-entropy: 0.38094658570539014, [(1, 100), (2, 8)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24658454811784147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24658454811784147, 0.18800226068180026] ***
*** starting iteration: 2; err: [Inf, 0.24658454811784147, 0.18800226068180026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24658454811784147, 0.18800226068180026, 0.1849592037665109] ***
*** starting iteration: 3; err: [Inf, 0.24658454811784147, 0.18800226068180026, 0.1849592037665109] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24658454811784147, 0.18800226068180026, 0.1849592037665109, 0.18440350018458432] ***
*** finished computation of 7 references, err: [Inf, 0.24658454811784147, 0.18800226068180026, 0.1849592037665109, 0.18440350018458432] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [48, 49, 0]]
** centroid: 1, normalized-entropy: 0.9999233329473267, [(1, 48), (2, 49)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [85, 33, 0]]
** centroid: 2, normalized-entropy: 0.85498851113698, [(1, 85), (2, 33)]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 89, 15]]
** centroid: 4, normalized-entropy: 0.5952124653513116, [(2, 89), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [27, 53, 0]]
** centroid: 5, normalized-entropy: 0.9224062617590724, [(1, 27), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [90, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2236937448477325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2236937448477325, 0.18949936088621394] ***
*** starting iteration: 2; err: [Inf, 0.2236937448477325, 0.18949936088621394] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2236937448477325, 0.18949936088621394, 0.18661769270209938] ***
*** starting iteration: 3; err: [Inf, 0.2236937448477325, 0.18949936088621394, 0.18661769270209938] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2236937448477325, 0.18949936088621394, 0.18661769270209938, 0.18576595827663453] ***
*** finished computation of 7 references, err: [Inf, 0.2236937448477325, 0.18949936088621394, 0.18661769270209938, 0.18576595827663453] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 86, 18]]
** centroid: 1, normalized-entropy: 0.6646953053493416, [(2, 86), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 9, 0]]
** centroid: 3, normalized-entropy: 0.5638560041131417, [(1, 59), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [94, 21, 0]]
** centroid: 4, normalized-entropy: 0.685750764543924, [(1, 94), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 28, 0]]
** centroid: 5, normalized-entropy: 0.8554508105601307, [(1, 72), (2, 28)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 79, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [96, 5, 0]]
** centroid: 7, normalized-entropy: 0.2842902892501332, [(1, 96), (2, 5)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 9)
[0.9329778880677084, 0.9309968651286016, 0.9200068331804859, 0.918031804259349, 0.9140068211924498, 0.9009998021974069, 0.8789478100855347, 0.8699927472382564, 0.7559955164745583]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 1, 1.0, :dnet, 0.6, 2) => 0.9329778880677084
finished with 9
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 9)
[0.9329778880677084, 0.9309968651286016, 0.9200068331804859, 0.918031804259349, 0.9140068211924498, 0.9009998021974069, 0.8789478100855347, 0.8699927472382564, 0.7559955164745583]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 1, 1.0, :dnet, 0.6, 2) => 0.9329778880677084
finished with 10
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.2253445793403307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2253445793403307, 0.16425346906608748] ***
*** starting iteration: 2; err: [Inf, 0.2253445793403307, 0.16425346906608748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2253445793403307, 0.16425346906608748, 0.15697297474611327] ***
*** starting iteration: 3; err: [Inf, 0.2253445793403307, 0.16425346906608748, 0.15697297474611327] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2253445793403307, 0.16425346906608748, 0.15697297474611327, 0.15496534418088156] ***
*** starting iteration: 4; err: [Inf, 0.2253445793403307, 0.16425346906608748, 0.15697297474611327, 0.15496534418088156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2253445793403307, 0.16425346906608748, 0.15697297474611327, 0.15496534418088156, 0.15438759938727045] ***
*** finished computation of 7 references, err: [Inf, 0.2253445793403307, 0.16425346906608748, 0.15697297474611327, 0.15496534418088156, 0.15438759938727045] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [111, 31, 0]]
** centroid: 1, normalized-entropy: 0.7570693252310562, [(1, 111), (2, 31)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 116, 17]]
** centroid: 2, normalized-entropy: 0.5514278209443916, [(2, 116), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [26, 30, 0]]
** centroid: 3, normalized-entropy: 0.9963165195589622, [(1, 26), (2, 30)]
*** center 4: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [20, 74, 0]]
** centroid: 6, normalized-entropy: 0.7467366074830678, [(1, 20), (2, 74)]
*** center 7: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2166908466706759] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2166908466706759, 0.16395851176907902] ***
*** starting iteration: 2; err: [Inf, 0.2166908466706759, 0.16395851176907902] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2166908466706759, 0.16395851176907902, 0.15412673738057622] ***
*** starting iteration: 3; err: [Inf, 0.2166908466706759, 0.16395851176907902, 0.15412673738057622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2166908466706759, 0.16395851176907902, 0.15412673738057622, 0.14906841821862438] ***
*** starting iteration: 4; err: [Inf, 0.2166908466706759, 0.16395851176907902, 0.15412673738057622, 0.14906841821862438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2166908466706759, 0.16395851176907902, 0.15412673738057622, 0.14906841821862438, 0.1465934241103983] ***
*** starting iteration: 5; err: [Inf, 0.2166908466706759, 0.16395851176907902, 0.15412673738057622, 0.14906841821862438, 0.1465934241103983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2166908466706759, 0.16395851176907902, 0.15412673738057622, 0.14906841821862438, 0.1465934241103983, 0.14493769569730183] ***
*** starting iteration: 6; err: [Inf, 0.2166908466706759, 0.16395851176907902, 0.15412673738057622, 0.14906841821862438, 0.1465934241103983, 0.14493769569730183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2166908466706759, 0.16395851176907902, 0.15412673738057622, 0.14906841821862438, 0.1465934241103983, 0.14493769569730183, 0.14379730042435976] ***
*** starting iteration: 7; err: [Inf, 0.2166908466706759, 0.16395851176907902, 0.15412673738057622, 0.14906841821862438, 0.1465934241103983, 0.14493769569730183, 0.14379730042435976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2166908466706759, 0.16395851176907902, 0.15412673738057622, 0.14906841821862438, 0.1465934241103983, 0.14493769569730183, 0.14379730042435976, 0.1434665973695495] ***
*** finished computation of 7 references, err: [Inf, 0.2166908466706759, 0.16395851176907902, 0.15412673738057622, 0.14906841821862438, 0.1465934241103983, 0.14493769569730183, 0.14379730042435976, 0.1434665973695495] ***
*** center 1: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 30, 0]]
** centroid: 2, normalized-entropy: 0.9071657675730821, [(1, 63), (2, 30)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [94, 4, 0]]
** centroid: 3, normalized-entropy: 0.2460225782203316, [(1, 94), (2, 4)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 97, 15]]
** centroid: 4, normalized-entropy: 0.5681147021801115, [(2, 97), (3, 15)]
*** center 5: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [15, 88, 0]]
** centroid: 6, normalized-entropy: 0.5987981837442868, [(1, 15), (2, 88)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [81, 6, 0]]
** centroid: 7, normalized-entropy: 0.36205125173399805, [(1, 81), (2, 6)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2650104276364672] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2650104276364672, 0.17245252401116995] ***
*** starting iteration: 2; err: [Inf, 0.2650104276364672, 0.17245252401116995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2650104276364672, 0.17245252401116995, 0.1608399382165481] ***
*** starting iteration: 3; err: [Inf, 0.2650104276364672, 0.17245252401116995, 0.1608399382165481] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2650104276364672, 0.17245252401116995, 0.1608399382165481, 0.15546548105231758] ***
*** starting iteration: 4; err: [Inf, 0.2650104276364672, 0.17245252401116995, 0.1608399382165481, 0.15546548105231758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2650104276364672, 0.17245252401116995, 0.1608399382165481, 0.15546548105231758, 0.15082745779741338] ***
*** starting iteration: 5; err: [Inf, 0.2650104276364672, 0.17245252401116995, 0.1608399382165481, 0.15546548105231758, 0.15082745779741338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2650104276364672, 0.17245252401116995, 0.1608399382165481, 0.15546548105231758, 0.15082745779741338, 0.1479949912526177] ***
*** starting iteration: 6; err: [Inf, 0.2650104276364672, 0.17245252401116995, 0.1608399382165481, 0.15546548105231758, 0.15082745779741338, 0.1479949912526177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2650104276364672, 0.17245252401116995, 0.1608399382165481, 0.15546548105231758, 0.15082745779741338, 0.1479949912526177, 0.14641552685544934] ***
*** starting iteration: 7; err: [Inf, 0.2650104276364672, 0.17245252401116995, 0.1608399382165481, 0.15546548105231758, 0.15082745779741338, 0.1479949912526177, 0.14641552685544934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2650104276364672, 0.17245252401116995, 0.1608399382165481, 0.15546548105231758, 0.15082745779741338, 0.1479949912526177, 0.14641552685544934, 0.14525014057411983] ***
*** starting iteration: 8; err: [Inf, 0.2650104276364672, 0.17245252401116995, 0.1608399382165481, 0.15546548105231758, 0.15082745779741338, 0.1479949912526177, 0.14641552685544934, 0.14525014057411983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2650104276364672, 0.17245252401116995, 0.1608399382165481, 0.15546548105231758, 0.15082745779741338, 0.1479949912526177, 0.14641552685544934, 0.14525014057411983, 0.14478480029708776] ***
*** finished computation of 7 references, err: [Inf, 0.2650104276364672, 0.17245252401116995, 0.1608399382165481, 0.15546548105231758, 0.15082745779741338, 0.1479949912526177, 0.14641552685544934, 0.14525014057411983, 0.14478480029708776] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [112, 27, 0]]
** centroid: 2, normalized-entropy: 0.7102668725158433, [(1, 112), (2, 27)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 95, 18]]
** centroid: 3, normalized-entropy: 0.6326131852700402, [(2, 95), (3, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [21, 75, 0]]
** centroid: 4, normalized-entropy: 0.7578784625383954, [(1, 21), (2, 75)]
*** center 5: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [48, 29, 0]]
** centroid: 6, normalized-entropy: 0.9556222693531471, [(1, 48), (2, 29)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [71, 2, 0]]
** centroid: 7, normalized-entropy: 0.18116640155354563, [(1, 71), (2, 2)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 10)
[0.9329778880677084, 0.9309968651286016, 0.9279908651166137, 0.9200068331804859, 0.918031804259349, 0.9140068211924498, 0.9009998021974069, 0.8789478100855347, 0.8699927472382564, 0.7559955164745583]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 1, 1.0, :dnet, 0.6, 2) => 0.9329778880677084
finished with 11
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.18412525953889988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18412525953889988, 0.14821894997423207] ***
*** finished computation of 7 references, err: [Inf, 0.18412525953889988, 0.14821894997423207] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [107, 8, 0]]
** centroid: 1, normalized-entropy: 0.36429902881461246, [(1, 107), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [64, 6, 0]]
** centroid: 2, normalized-entropy: 0.4220005168831531, [(1, 64), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 66, 17]]
** centroid: 3, normalized-entropy: 0.7314625617214586, [(2, 66), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 74, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [26, 95, 0]]
** centroid: 6, normalized-entropy: 0.7507002995629545, [(1, 26), (2, 95)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [80, 2, 0]]
** centroid: 7, normalized-entropy: 0.16542703399626665, [(1, 80), (2, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2039028856319667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2039028856319667, 0.1584675182767123] ***
*** finished computation of 7 references, err: [Inf, 0.2039028856319667, 0.1584675182767123] ***
*** center 1: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [42, 11, 0]]
** centroid: 2, normalized-entropy: 0.7367680100024784, [(1, 42), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 73, 15]]
** centroid: 3, normalized-entropy: 0.6587435307694671, [(2, 73), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [127, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [17, 69, 0]]
** centroid: 5, normalized-entropy: 0.7172524777375696, [(1, 17), (2, 69)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [34, 71, 0]]
** centroid: 6, normalized-entropy: 0.908476164453323, [(1, 34), (2, 71)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [85, 1, 0]]
** centroid: 7, normalized-entropy: 0.09140162014739266, [(1, 85), (2, 1)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18514364604514255] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18514364604514255, 0.15030650268245985] ***
*** finished computation of 7 references, err: [Inf, 0.18514364604514255, 0.15030650268245985] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [2, 88, 2]]
** centroid: 1, normalized-entropy: 0.19022338345367784, [(1, 2), (2, 88), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [77, 9, 0]]
** centroid: 3, normalized-entropy: 0.48356837509176975, [(1, 77), (2, 9)]
*** center 4: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 94, 16]]
** centroid: 5, normalized-entropy: 0.5983474220910422, [(2, 94), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [102, 31, 0]]
** centroid: 6, normalized-entropy: 0.7833465670569363, [(1, 102), (2, 31)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [58, 6, 0]]
** centroid: 7, normalized-entropy: 0.44886448872302936, [(1, 58), (2, 6)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9409858960757164, 0.9329778880677084, 0.9309968651286016, 0.9279908651166137, 0.9200068331804859, 0.918031804259349, 0.9140068211924498, 0.9009998021974069, 0.8789478100855347, 0.8699927472382564, 0.7559955164745583]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9409858960757164
finished with 12
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.3100544710101017] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3100544710101017, 0.24536376700571574] ***
*** starting iteration: 2; err: [Inf, 0.3100544710101017, 0.24536376700571574] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3100544710101017, 0.24536376700571574, 0.24008844399897455] ***
*** starting iteration: 3; err: [Inf, 0.3100544710101017, 0.24536376700571574, 0.24008844399897455] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3100544710101017, 0.24536376700571574, 0.24008844399897455, 0.23911072012713855] ***
*** finished computation of 3 references, err: [Inf, 0.3100544710101017, 0.24536376700571574, 0.24008844399897455, 0.23911072012713855] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [256, 7, 0]]
** centroid: 1, normalized-entropy: 0.17712627273563608, [(1, 256), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [130, 81, 0]]
** centroid: 2, normalized-entropy: 0.9607405824164096, [(1, 130), (2, 81)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [12, 163, 17]]
** centroid: 3, normalized-entropy: 0.47965019093010025, [(1, 12), (2, 163), (3, 17)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27649398347309817] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27649398347309817, 0.23629991144829918] ***
*** starting iteration: 2; err: [Inf, 0.27649398347309817, 0.23629991144829918] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27649398347309817, 0.23629991144829918, 0.23550719416538335] ***
*** finished computation of 3 references, err: [Inf, 0.27649398347309817, 0.23629991144829918, 0.23550719416538335] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 156, 15]]
** centroid: 1, normalized-entropy: 0.4288109647301171, [(2, 156), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [230, 17, 0]]
** centroid: 2, normalized-entropy: 0.36152682665163294, [(1, 230), (2, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [197, 52, 0]]
** centroid: 3, normalized-entropy: 0.7392506317618843, [(1, 197), (2, 52)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34033009792905655] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34033009792905655, 0.23680184798865303] ***
*** starting iteration: 2; err: [Inf, 0.34033009792905655, 0.23680184798865303] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34033009792905655, 0.23680184798865303, 0.23581901646039072] ***
*** finished computation of 3 references, err: [Inf, 0.34033009792905655, 0.23680184798865303, 0.23581901646039072] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [103, 145, 18]]
** centroid: 1, normalized-entropy: 0.8013521946816686, [(1, 103), (2, 145), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [143, 83, 0]]
** centroid: 2, normalized-entropy: 0.948542351967823, [(1, 143), (2, 83)]
*** center 3: selecting labels [1] (freq >= 2) [from [175, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 12)
[0.9409858960757164, 0.9329778880677084, 0.9309968651286016, 0.9279908651166137, 0.9200068331804859, 0.918031804259349, 0.9140068211924498, 0.9019828211444977, 0.9009998021974069, 0.8789478100855347, 0.8699927472382564, 0.7559955164745583]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9409858960757164
finished with 13
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.1946665039883826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1946665039883826, 0.15081585559091326] ***
*** starting iteration: 2; err: [Inf, 0.1946665039883826, 0.15081585559091326] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1946665039883826, 0.15081585559091326, 0.14834117342741718] ***
*** starting iteration: 3; err: [Inf, 0.1946665039883826, 0.15081585559091326, 0.14834117342741718] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1946665039883826, 0.15081585559091326, 0.14834117342741718, 0.14803653178937934] ***
*** finished computation of 7 references, err: [Inf, 0.1946665039883826, 0.15081585559091326, 0.14834117342741718, 0.14803653178937934] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 99, 17]]
** centroid: 1, normalized-entropy: 0.6011432909108727, [(2, 99), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [63, 4, 0]]
** centroid: 3, normalized-entropy: 0.32625881462949274, [(1, 63), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 28, 0]]
** centroid: 4, normalized-entropy: 0.8403586716091169, [(1, 76), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [75, 38, 0]]
** centroid: 5, normalized-entropy: 0.9212174819014947, [(1, 75), (2, 38)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 81, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [82, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2214766562004564] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2214766562004564, 0.15192160891533746] ***
*** starting iteration: 2; err: [Inf, 0.2214766562004564, 0.15192160891533746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2214766562004564, 0.15192160891533746, 0.14708822787874776] ***
*** starting iteration: 3; err: [Inf, 0.2214766562004564, 0.15192160891533746, 0.14708822787874776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2214766562004564, 0.15192160891533746, 0.14708822787874776, 0.14672949579104536] ***
*** finished computation of 7 references, err: [Inf, 0.2214766562004564, 0.15192160891533746, 0.14708822787874776, 0.14672949579104536] ***
*** center 1: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 87, 15]]
** centroid: 2, normalized-entropy: 0.6024308020404452, [(2, 87), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [105, 5, 0]]
** centroid: 3, normalized-entropy: 0.2667649878030262, [(1, 105), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 23, 0]]
** centroid: 4, normalized-entropy: 0.8377698690066789, [(1, 63), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 31, 0]]
** centroid: 5, normalized-entropy: 0.9325538428833382, [(1, 58), (2, 31)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 79, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20245737095071614] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20245737095071614, 0.15072249393558307] ***
*** starting iteration: 2; err: [Inf, 0.20245737095071614, 0.15072249393558307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20245737095071614, 0.15072249393558307, 0.14621777464482077] ***
*** starting iteration: 3; err: [Inf, 0.20245737095071614, 0.15072249393558307, 0.14621777464482077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20245737095071614, 0.15072249393558307, 0.14621777464482077, 0.14572113447957372] ***
*** finished computation of 7 references, err: [Inf, 0.20245737095071614, 0.15072249393558307, 0.14621777464482077, 0.14572113447957372] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [75, 42, 0]]
** centroid: 1, normalized-entropy: 0.9418285354475157, [(1, 75), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 5, 0]]
** centroid: 2, normalized-entropy: 0.3912435636292556, [(1, 60), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 91, 18]]
** centroid: 3, normalized-entropy: 0.6464599001526788, [(2, 91), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [79, 17, 0]]
** centroid: 5, normalized-entropy: 0.673654715229001, [(1, 79), (2, 17)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [98, 2, 0]]
** centroid: 7, normalized-entropy: 0.14144054254182067, [(1, 98), (2, 2)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9409858960757164, 0.9329778880677084, 0.9309968651286016, 0.9279908651166137, 0.9250148351944759, 0.9200068331804859, 0.918031804259349, 0.9140068211924498, 0.9019828211444977, 0.9009998021974069, 0.8789478100855347, 0.8699927472382564, 0.7559955164745583]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9409858960757164
finished with 15
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.22324469670731653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22324469670731653, 0.1924817761554531] ***
*** starting iteration: 2; err: [Inf, 0.22324469670731653, 0.1924817761554531] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22324469670731653, 0.1924817761554531, 0.19009302645731527] ***
*** starting iteration: 3; err: [Inf, 0.22324469670731653, 0.1924817761554531, 0.19009302645731527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22324469670731653, 0.1924817761554531, 0.19009302645731527, 0.18947001365810498] ***
*** finished computation of 7 references, err: [Inf, 0.22324469670731653, 0.1924817761554531, 0.19009302645731527, 0.18947001365810498] ***
*** center 1: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [90, 3, 0]]
** centroid: 2, normalized-entropy: 0.2055925081850832, [(1, 90), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 63, 17]]
** centroid: 3, normalized-entropy: 0.7462343013654809, [(2, 63), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [125, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 20, 0]]
** centroid: 5, normalized-entropy: 0.787126586201269, [(1, 65), (2, 20)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 89, 0]]
** centroid: 6, normalized-entropy: 0.3398550782221443, [(1, 6), (2, 89)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 76, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22706016730740555] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22706016730740555, 0.20028529348161847] ***
*** starting iteration: 2; err: [Inf, 0.22706016730740555, 0.20028529348161847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22706016730740555, 0.20028529348161847, 0.1956572212611159] ***
*** starting iteration: 3; err: [Inf, 0.22706016730740555, 0.20028529348161847, 0.1956572212611159] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22706016730740555, 0.20028529348161847, 0.1956572212611159, 0.194258158642525] ***
*** starting iteration: 4; err: [Inf, 0.22706016730740555, 0.20028529348161847, 0.1956572212611159, 0.194258158642525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22706016730740555, 0.20028529348161847, 0.1956572212611159, 0.194258158642525, 0.19368147657593543] ***
*** finished computation of 7 references, err: [Inf, 0.22706016730740555, 0.20028529348161847, 0.1956572212611159, 0.194258158642525, 0.19368147657593543] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [65, 55, 0]]
** centroid: 1, normalized-entropy: 0.9949848281859699, [(1, 65), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [87, 20, 0]]
** centroid: 2, normalized-entropy: 0.6949749673676271, [(1, 87), (2, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 109, 15]]
** centroid: 4, normalized-entropy: 0.5321362270416112, [(2, 109), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 38, 0]]
** centroid: 5, normalized-entropy: 0.9961344835095798, [(1, 44), (2, 38)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [89, 3, 0]]
** centroid: 6, normalized-entropy: 0.20731018585948177, [(1, 89), (2, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2601104152557821] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601104152557821, 0.18747312941440455] ***
*** starting iteration: 2; err: [Inf, 0.2601104152557821, 0.18747312941440455] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601104152557821, 0.18747312941440455, 0.18399064669335286] ***
*** starting iteration: 3; err: [Inf, 0.2601104152557821, 0.18747312941440455, 0.18399064669335286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601104152557821, 0.18747312941440455, 0.18399064669335286, 0.18388916119602208] ***
*** finished computation of 7 references, err: [Inf, 0.2601104152557821, 0.18747312941440455, 0.18399064669335286, 0.18388916119602208] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [66, 28, 0]]
** centroid: 1, normalized-entropy: 0.8786744932173094, [(1, 66), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 2, 0]]
** centroid: 2, normalized-entropy: 0.18927843126120178, [(1, 67), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 101, 18]]
** centroid: 4, normalized-entropy: 0.6129857483172468, [(2, 101), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [87, 28, 0]]
** centroid: 5, normalized-entropy: 0.8007768165404425, [(1, 87), (2, 28)]
*** center 6: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [29, 69, 0]]
** centroid: 7, normalized-entropy: 0.8762441668050731, [(1, 29), (2, 69)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18569578489466282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18569578489466282, 0.1479007478409402] ***
*** starting iteration: 2; err: [Inf, 0.18569578489466282, 0.1479007478409402] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18569578489466282, 0.1479007478409402, 0.143857272817647] ***
*** starting iteration: 3; err: [Inf, 0.18569578489466282, 0.1479007478409402, 0.143857272817647] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18569578489466282, 0.1479007478409402, 0.143857272817647, 0.14260352720707856] ***
*** starting iteration: 4; err: [Inf, 0.18569578489466282, 0.1479007478409402, 0.143857272817647, 0.14260352720707856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18569578489466282, 0.1479007478409402, 0.143857272817647, 0.14260352720707856, 0.14206229438571757] ***
*** finished computation of 7 references, err: [Inf, 0.18569578489466282, 0.1479007478409402, 0.143857272817647, 0.14260352720707856, 0.14206229438571757] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [117, 3, 0]]
** centroid: 1, normalized-entropy: 0.1686609314966701, [(1, 117), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 65, 17]]
** centroid: 2, normalized-entropy: 0.7363230272021651, [(2, 65), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [73, 5, 0]]
** centroid: 3, normalized-entropy: 0.34351974100740135, [(1, 73), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [121, 2, 0]]
** centroid: 4, normalized-entropy: 0.11989294671951675, [(1, 121), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [12, 92, 0]]
** centroid: 5, normalized-entropy: 0.5159469300074472, [(1, 12), (2, 92)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 84, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19457554298479562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19457554298479562, 0.15934020839910815] ***
*** starting iteration: 2; err: [Inf, 0.19457554298479562, 0.15934020839910815] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19457554298479562, 0.15934020839910815, 0.1523341173752919] ***
*** starting iteration: 3; err: [Inf, 0.19457554298479562, 0.15934020839910815, 0.1523341173752919] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19457554298479562, 0.15934020839910815, 0.1523341173752919, 0.15087051704599952] ***
*** starting iteration: 4; err: [Inf, 0.19457554298479562, 0.15934020839910815, 0.1523341173752919, 0.15087051704599952] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19457554298479562, 0.15934020839910815, 0.1523341173752919, 0.15087051704599952, 0.14969789768210326] ***
*** starting iteration: 5; err: [Inf, 0.19457554298479562, 0.15934020839910815, 0.1523341173752919, 0.15087051704599952, 0.14969789768210326] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19457554298479562, 0.15934020839910815, 0.1523341173752919, 0.15087051704599952, 0.14969789768210326, 0.14815785854390223] ***
*** starting iteration: 6; err: [Inf, 0.19457554298479562, 0.15934020839910815, 0.1523341173752919, 0.15087051704599952, 0.14969789768210326, 0.14815785854390223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19457554298479562, 0.15934020839910815, 0.1523341173752919, 0.15087051704599952, 0.14969789768210326, 0.14815785854390223, 0.1465121642351318] ***
*** starting iteration: 7; err: [Inf, 0.19457554298479562, 0.15934020839910815, 0.1523341173752919, 0.15087051704599952, 0.14969789768210326, 0.14815785854390223, 0.1465121642351318] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19457554298479562, 0.15934020839910815, 0.1523341173752919, 0.15087051704599952, 0.14969789768210326, 0.14815785854390223, 0.1465121642351318, 0.14481916213603593] ***
*** starting iteration: 8; err: [Inf, 0.19457554298479562, 0.15934020839910815, 0.1523341173752919, 0.15087051704599952, 0.14969789768210326, 0.14815785854390223, 0.1465121642351318, 0.14481916213603593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19457554298479562, 0.15934020839910815, 0.1523341173752919, 0.15087051704599952, 0.14969789768210326, 0.14815785854390223, 0.1465121642351318, 0.14481916213603593, 0.14404763783938412] ***
*** finished computation of 7 references, err: [Inf, 0.19457554298479562, 0.15934020839910815, 0.1523341173752919, 0.15087051704599952, 0.14969789768210326, 0.14815785854390223, 0.1465121642351318, 0.14481916213603593, 0.14404763783938412] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [99, 4, 0]]
** centroid: 1, normalized-entropy: 0.23692474671835093, [(1, 99), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [91, 5, 0]]
** centroid: 2, normalized-entropy: 0.29518174309075856, [(1, 91), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 60, 15]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 60), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [127, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 70, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [92, 8, 0]]
** centroid: 6, normalized-entropy: 0.4021791902022729, [(1, 92), (2, 8)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [18, 78, 0]]
** centroid: 7, normalized-entropy: 0.6962122601251459, [(1, 18), (2, 78)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19693004167143038] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19693004167143038, 0.14987175078780532] ***
*** starting iteration: 2; err: [Inf, 0.19693004167143038, 0.14987175078780532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19693004167143038, 0.14987175078780532, 0.14558539851575622] ***
*** starting iteration: 3; err: [Inf, 0.19693004167143038, 0.14987175078780532, 0.14558539851575622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19693004167143038, 0.14987175078780532, 0.14558539851575622, 0.1448749598615553] ***
*** finished computation of 7 references, err: [Inf, 0.19693004167143038, 0.14987175078780532, 0.14558539851575622, 0.1448749598615553] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 45, 0]]
** centroid: 1, normalized-entropy: 0.9940302114769566, [(1, 54), (2, 45)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [81, 24, 0]]
** centroid: 2, normalized-entropy: 0.775512658133148, [(1, 81), (2, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 106, 18]]
** centroid: 4, normalized-entropy: 0.5975977764379984, [(2, 106), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [38, 53, 0]]
** centroid: 5, normalized-entropy: 0.9803107984107206, [(1, 38), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9500008991026956, 0.9409858960757164, 0.9329778880677084, 0.9309968651286016, 0.9290038541535548, 0.9279908651166137, 0.9250148351944759, 0.9200068331804859, 0.918031804259349, 0.9140068211924498, 0.9019828211444977, 0.9009998021974069, 0.8789478100855347, 0.8699927472382564, 0.7559955164745583]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9500008991026956
finished with 17
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.41510914187800063] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41510914187800063, 0.32345252218949905] ***
*** starting iteration: 2; err: [Inf, 0.41510914187800063, 0.32345252218949905] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41510914187800063, 0.32345252218949905, 0.3016848405795144] ***
*** starting iteration: 3; err: [Inf, 0.41510914187800063, 0.32345252218949905, 0.3016848405795144] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41510914187800063, 0.32345252218949905, 0.3016848405795144, 0.2972278174952612] ***
*** starting iteration: 4; err: [Inf, 0.41510914187800063, 0.32345252218949905, 0.3016848405795144, 0.2972278174952612] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41510914187800063, 0.32345252218949905, 0.3016848405795144, 0.2972278174952612, 0.2965433295737874] ***
*** finished computation of 3 references, err: [Inf, 0.41510914187800063, 0.32345252218949905, 0.3016848405795144, 0.2972278174952612, 0.2965433295737874] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [221, 13, 0]]
** centroid: 1, normalized-entropy: 0.3095434291503252, [(1, 221), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [177, 56, 0]]
** centroid: 2, normalized-entropy: 0.7956107884314632, [(1, 177), (2, 56)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 182, 17]]
** centroid: 3, normalized-entropy: 0.42101912899883215, [(2, 182), (3, 17)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4028541617391483] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4028541617391483, 0.3394962444865163] ***
*** starting iteration: 2; err: [Inf, 0.4028541617391483, 0.3394962444865163] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4028541617391483, 0.3394962444865163, 0.33433171159363] ***
*** starting iteration: 3; err: [Inf, 0.4028541617391483, 0.3394962444865163, 0.33433171159363] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4028541617391483, 0.3394962444865163, 0.33433171159363, 0.3327432609954919] ***
*** starting iteration: 4; err: [Inf, 0.4028541617391483, 0.3394962444865163, 0.33433171159363, 0.3327432609954919] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4028541617391483, 0.3394962444865163, 0.33433171159363, 0.3327432609954919, 0.332126406475209] ***
*** finished computation of 3 references, err: [Inf, 0.4028541617391483, 0.3394962444865163, 0.33433171159363, 0.3327432609954919, 0.332126406475209] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [101, 112, 15]]
** centroid: 1, normalized-entropy: 0.8091188530084822, [(1, 101), (2, 112), (3, 15)]
*** center 2: selecting labels [1] (freq >= 2) [from [261, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 112, 0]]
** centroid: 3, normalized-entropy: 0.9485227302112391, [(1, 65), (2, 112)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.47219276001797] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47219276001797, 0.3176865003070329] ***
*** starting iteration: 2; err: [Inf, 0.47219276001797, 0.3176865003070329] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47219276001797, 0.3176865003070329, 0.3066633785760653] ***
*** starting iteration: 3; err: [Inf, 0.47219276001797, 0.3176865003070329, 0.3066633785760653] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47219276001797, 0.3176865003070329, 0.3066633785760653, 0.30406022414486894] ***
*** starting iteration: 4; err: [Inf, 0.47219276001797, 0.3176865003070329, 0.3066633785760653, 0.30406022414486894] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47219276001797, 0.3176865003070329, 0.3066633785760653, 0.30406022414486894, 0.3038272190548625] ***
*** finished computation of 3 references, err: [Inf, 0.47219276001797, 0.3176865003070329, 0.3066633785760653, 0.30406022414486894, 0.3038272190548625] ***
*** center 1: selecting labels [1] (freq >= 2) [from [199, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [101, 138, 18]]
** centroid: 2, normalized-entropy: 0.8075191953752435, [(1, 101), (2, 138), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [121, 90, 0]]
** centroid: 3, normalized-entropy: 0.9843729783759214, [(1, 121), (2, 90)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2883985483020477] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2883985483020477, 0.24928671630608426] ***
*** starting iteration: 2; err: [Inf, 0.2883985483020477, 0.24928671630608426] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2883985483020477, 0.24928671630608426, 0.24263010751497974] ***
*** starting iteration: 3; err: [Inf, 0.2883985483020477, 0.24928671630608426, 0.24263010751497974] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2883985483020477, 0.24928671630608426, 0.24263010751497974, 0.2400285987345664] ***
*** starting iteration: 4; err: [Inf, 0.2883985483020477, 0.24928671630608426, 0.24263010751497974, 0.2400285987345664] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2883985483020477, 0.24928671630608426, 0.24263010751497974, 0.2400285987345664, 0.23913092447959403] ***
*** finished computation of 3 references, err: [Inf, 0.2883985483020477, 0.24928671630608426, 0.24263010751497974, 0.2400285987345664, 0.23913092447959403] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [111, 96, 0]]
** centroid: 1, normalized-entropy: 0.9962088839046743, [(1, 111), (2, 96)]
*** center 2: selecting labels [1] (freq >= 2) [from [215, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [72, 155, 17]]
** centroid: 3, normalized-entropy: 0.7591304366050884, [(1, 72), (2, 155), (3, 17)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2949195235096354] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2949195235096354, 0.262134005223447] ***
*** starting iteration: 2; err: [Inf, 0.2949195235096354, 0.262134005223447] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2949195235096354, 0.262134005223447, 0.24409982279317266] ***
*** starting iteration: 3; err: [Inf, 0.2949195235096354, 0.262134005223447, 0.24409982279317266] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2949195235096354, 0.262134005223447, 0.24409982279317266, 0.2374862570000039] ***
*** starting iteration: 4; err: [Inf, 0.2949195235096354, 0.262134005223447, 0.24409982279317266, 0.2374862570000039] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2949195235096354, 0.262134005223447, 0.24409982279317266, 0.2374862570000039, 0.23567556045150784] ***
*** starting iteration: 5; err: [Inf, 0.2949195235096354, 0.262134005223447, 0.24409982279317266, 0.2374862570000039, 0.23567556045150784] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2949195235096354, 0.262134005223447, 0.24409982279317266, 0.2374862570000039, 0.23567556045150784, 0.23511004358435098] ***
*** finished computation of 3 references, err: [Inf, 0.2949195235096354, 0.262134005223447, 0.24409982279317266, 0.2374862570000039, 0.23567556045150784, 0.23511004358435098] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [122, 84, 0]]
** centroid: 1, normalized-entropy: 0.9753130577847331, [(1, 122), (2, 84)]
*** center 2: selecting labels [1] (freq >= 2) [from [234, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [71, 141, 15]]
** centroid: 3, normalized-entropy: 0.7635483013598526, [(1, 71), (2, 141), (3, 15)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31145689067482457] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31145689067482457, 0.24244643454237477] ***
*** starting iteration: 2; err: [Inf, 0.31145689067482457, 0.24244643454237477] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31145689067482457, 0.24244643454237477, 0.24158681264479479] ***
*** finished computation of 3 references, err: [Inf, 0.31145689067482457, 0.24244643454237477, 0.24158681264479479] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [75, 147, 18]]
** centroid: 1, normalized-entropy: 0.7809907603144508, [(1, 75), (2, 147), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [208, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [138, 81, 0]]
** centroid: 3, normalized-entropy: 0.9505668528932193, [(1, 138), (2, 81)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 17)
[0.9500008991026956, 0.9409858960757164, 0.9329778880677084, 0.9309968651286016, 0.9290038541535548, 0.9279908651166137, 0.9250148351944759, 0.9220088351824879, 0.9200068331804859, 0.918031804259349, 0.9140068211924498, 0.9019828211444977, 0.9009998021974069, 0.8890387393381406, 0.8789478100855347, 0.8699927472382564, 0.7559955164745583]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9500008991026956
finished with 18
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.1896242191616513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1896242191616513, 0.15078841427385853] ***
*** finished computation of 7 references, err: [Inf, 0.1896242191616513, 0.15078841427385853] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [117, 7, 0]]
** centroid: 1, normalized-entropy: 0.3131950471154111, [(1, 117), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 90, 17]]
** centroid: 2, normalized-entropy: 0.6316198184485629, [(2, 90), (3, 17)]
*** center 3: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [81, 60, 0]]
** centroid: 4, normalized-entropy: 0.9839393951635759, [(1, 81), (2, 60)]
*** center 5: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 80, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [56, 14, 0]]
** centroid: 7, normalized-entropy: 0.7219280948873623, [(1, 56), (2, 14)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2523508902047126] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2523508902047126, 0.18463034413174084] ***
*** finished computation of 7 references, err: [Inf, 0.2523508902047126, 0.18463034413174084] ***
*** center 1: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [55, 32, 0]]
** centroid: 2, normalized-entropy: 0.9489804585630239, [(1, 55), (2, 32)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [83, 60, 0]]
** centroid: 3, normalized-entropy: 0.9812579903566702, [(1, 83), (2, 60)]
*** center 4: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 6: selecting labels [1, 2, 3] (freq >= 1) [from [34, 119, 15]]
** centroid: 6, normalized-entropy: 0.7129841121003166, [(1, 34), (2, 119), (3, 15)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [70, 14, 0]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(1, 70), (2, 14)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21066047546058975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21066047546058975, 0.16067596520485727] ***
*** finished computation of 7 references, err: [Inf, 0.21066047546058975, 0.16067596520485727] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [81, 7, 0]]
** centroid: 1, normalized-entropy: 0.40057554263664, [(1, 81), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 95, 17]]
** centroid: 2, normalized-entropy: 0.6142910730156771, [(2, 95), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [74, 15, 0]]
** centroid: 3, normalized-entropy: 0.6543524423071835, [(1, 74), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [80, 14, 0]]
** centroid: 4, normalized-entropy: 0.607171654871303, [(1, 80), (2, 14)]
*** center 5: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 7: selecting labels [1, 2, 3] (freq >= 1) [from [15, 97, 1]]
** centroid: 7, normalized-entropy: 0.4013680181508401, [(1, 15), (2, 97), (3, 1)]
finished with 13 centroids; started with 7
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.1993066452657804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1993066452657804, 0.15473428180906923] ***
*** starting iteration: 2; err: [Inf, 0.1993066452657804, 0.15473428180906923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1993066452657804, 0.15473428180906923, 0.1502156464494765] ***
*** starting iteration: 3; err: [Inf, 0.1993066452657804, 0.15473428180906923, 0.1502156464494765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1993066452657804, 0.15473428180906923, 0.1502156464494765, 0.14902084199455568] ***
*** starting iteration: 4; err: [Inf, 0.1993066452657804, 0.15473428180906923, 0.1502156464494765, 0.14902084199455568] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1993066452657804, 0.15473428180906923, 0.1502156464494765, 0.14902084199455568, 0.14830742464167998] ***
*** finished computation of 7 references, err: [Inf, 0.1993066452657804, 0.15473428180906923, 0.1502156464494765, 0.14902084199455568, 0.14830742464167998] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [144, 7, 0]]
** centroid: 1, normalized-entropy: 0.2707180859337134, [(1, 144), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [146, 7, 0]]
** centroid: 2, normalized-entropy: 0.2680684305953593, [(1, 146), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 106, 25]]
** centroid: 3, normalized-entropy: 0.703224734910983, [(2, 106), (3, 25)]
*** center 4: selecting labels [1] (freq >= 2) [from [122, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 105, 0]]
** centroid: 5, normalized-entropy: 0.6931274153282881, [(1, 24), (2, 105)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [14, 127, 0]]
** centroid: 6, normalized-entropy: 0.4667433798536055, [(1, 14), (2, 127)]
*** center 7: selecting labels [1] (freq >= 2) [from [173, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18554438442364335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18554438442364335, 0.1523441575039178] ***
*** starting iteration: 2; err: [Inf, 0.18554438442364335, 0.1523441575039178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18554438442364335, 0.1523441575039178, 0.14833298900164663] ***
*** starting iteration: 3; err: [Inf, 0.18554438442364335, 0.1523441575039178, 0.14833298900164663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18554438442364335, 0.1523441575039178, 0.14833298900164663, 0.14751797308400275] ***
*** finished computation of 7 references, err: [Inf, 0.18554438442364335, 0.1523441575039178, 0.14833298900164663, 0.14751797308400275] ***
*** center 1: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 45, 7]]
** centroid: 2, normalized-entropy: 0.5699613760403499, [(2, 45), (3, 7)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [64, 4, 0]]
** centroid: 3, normalized-entropy: 0.32275695889739825, [(1, 64), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [65, 5, 0]]
** centroid: 4, normalized-entropy: 0.3712323266408756, [(1, 65), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 61, 0]]
** centroid: 5, normalized-entropy: 0.38705142139219795, [(1, 5), (2, 61)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 54, 0]]
** centroid: 6, normalized-entropy: 0.46899559358928133, [(1, 6), (2, 54)]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19381436514481903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19381436514481903, 0.15099969292990864] ***
*** starting iteration: 2; err: [Inf, 0.19381436514481903, 0.15099969292990864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19381436514481903, 0.15099969292990864, 0.14752150811813772] ***
*** starting iteration: 3; err: [Inf, 0.19381436514481903, 0.15099969292990864, 0.14752150811813772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19381436514481903, 0.15099969292990864, 0.14752150811813772, 0.1465495321471244] ***
*** finished computation of 7 references, err: [Inf, 0.19381436514481903, 0.15099969292990864, 0.14752150811813772, 0.1465495321471244] ***
*** center 1: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 8, 0]]
** centroid: 2, normalized-entropy: 0.48977901368693744, [(1, 67), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 53, 10]]
** centroid: 3, normalized-entropy: 0.6312630180916119, [(2, 53), (3, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 47, 0]]
** centroid: 4, normalized-entropy: 0.995558084395954, [(1, 55), (2, 47)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 64, 0]]
** centroid: 5, normalized-entropy: 0.5713549744279549, [(1, 10), (2, 64)]
*** center 6: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19421134330891074] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19421134330891074, 0.14929746848903597] ***
*** starting iteration: 2; err: [Inf, 0.19421134330891074, 0.14929746848903597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19421134330891074, 0.14929746848903597, 0.14421764972247184] ***
*** starting iteration: 3; err: [Inf, 0.19421134330891074, 0.14929746848903597, 0.14421764972247184] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19421134330891074, 0.14929746848903597, 0.14421764972247184, 0.1434933721399866] ***
*** finished computation of 7 references, err: [Inf, 0.19421134330891074, 0.14929746848903597, 0.14421764972247184, 0.1434933721399866] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [67, 5, 0]]
** centroid: 1, normalized-entropy: 0.3638469981769295, [(1, 67), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 3, 0]]
** centroid: 2, normalized-entropy: 0.2795055456366802, [(1, 59), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 59, 9]]
** centroid: 3, normalized-entropy: 0.5638560041131417, [(2, 59), (3, 9)]
*** center 4: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 4, 0]]
** centroid: 5, normalized-entropy: 0.3533593350214213, [(1, 56), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [20, 52, 0]]
** centroid: 6, normalized-entropy: 0.8524051786494784, [(1, 20), (2, 52)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18543994323723018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18543994323723018, 0.14671954257879405] ***
*** starting iteration: 2; err: [Inf, 0.18543994323723018, 0.14671954257879405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18543994323723018, 0.14671954257879405, 0.1439922911711037] ***
*** starting iteration: 3; err: [Inf, 0.18543994323723018, 0.14671954257879405, 0.1439922911711037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18543994323723018, 0.14671954257879405, 0.1439922911711037, 0.1427549180071801] ***
*** starting iteration: 4; err: [Inf, 0.18543994323723018, 0.14671954257879405, 0.1439922911711037, 0.1427549180071801] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18543994323723018, 0.14671954257879405, 0.1439922911711037, 0.1427549180071801, 0.14145332594960927] ***
*** starting iteration: 5; err: [Inf, 0.18543994323723018, 0.14671954257879405, 0.1439922911711037, 0.1427549180071801, 0.14145332594960927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18543994323723018, 0.14671954257879405, 0.1439922911711037, 0.1427549180071801, 0.14145332594960927, 0.13979262687265873] ***
*** starting iteration: 6; err: [Inf, 0.18543994323723018, 0.14671954257879405, 0.1439922911711037, 0.1427549180071801, 0.14145332594960927, 0.13979262687265873] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18543994323723018, 0.14671954257879405, 0.1439922911711037, 0.1427549180071801, 0.14145332594960927, 0.13979262687265873, 0.13931132425833492] ***
*** finished computation of 7 references, err: [Inf, 0.18543994323723018, 0.14671954257879405, 0.1439922911711037, 0.1427549180071801, 0.14145332594960927, 0.13979262687265873, 0.13931132425833492] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [41, 30, 0]]
** centroid: 1, normalized-entropy: 0.9826154285526119, [(1, 41), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 11, 0]]
** centroid: 2, normalized-entropy: 0.6274303352684106, [(1, 59), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 71, 14]]
** centroid: 4, normalized-entropy: 0.6454495903301855, [(2, 71), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 52, 0]]
** centroid: 5, normalized-entropy: 0.8224042259549892, [(1, 18), (2, 52)]
*** center 6: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18400180009938777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18400180009938777, 0.14585353156365455] ***
*** starting iteration: 2; err: [Inf, 0.18400180009938777, 0.14585353156365455] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18400180009938777, 0.14585353156365455, 0.1422895035892725] ***
*** starting iteration: 3; err: [Inf, 0.18400180009938777, 0.14585353156365455, 0.1422895035892725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18400180009938777, 0.14585353156365455, 0.1422895035892725, 0.1417710599899292] ***
*** finished computation of 7 references, err: [Inf, 0.18400180009938777, 0.14585353156365455, 0.1422895035892725, 0.1417710599899292] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 79, 6]]
** centroid: 1, normalized-entropy: 0.3681150054280774, [(2, 79), (3, 6)]
*** center 2: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 15, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 60), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [87, 8, 0]]
** centroid: 4, normalized-entropy: 0.4168441963431652, [(1, 87), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 29, 0]]
** centroid: 5, normalized-entropy: 0.9969954265557693, [(1, 33), (2, 29)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 65, 4]]
** centroid: 6, normalized-entropy: 0.3193373865339728, [(2, 65), (3, 4)]
*** center 7: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18240854670852422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18240854670852422, 0.1449590029027313] ***
*** starting iteration: 2; err: [Inf, 0.18240854670852422, 0.1449590029027313] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18240854670852422, 0.1449590029027313, 0.14088285340974108] ***
*** starting iteration: 3; err: [Inf, 0.18240854670852422, 0.1449590029027313, 0.14088285340974108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18240854670852422, 0.1449590029027313, 0.14088285340974108, 0.13966267689783127] ***
*** starting iteration: 4; err: [Inf, 0.18240854670852422, 0.1449590029027313, 0.14088285340974108, 0.13966267689783127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18240854670852422, 0.1449590029027313, 0.14088285340974108, 0.13966267689783127, 0.13937246752902865] ***
*** finished computation of 7 references, err: [Inf, 0.18240854670852422, 0.1449590029027313, 0.14088285340974108, 0.13966267689783127, 0.13937246752902865] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [10, 74, 0]]
** centroid: 1, normalized-entropy: 0.5266170655714281, [(1, 10), (2, 74)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 13, 0]]
** centroid: 2, normalized-entropy: 0.709825885194168, [(1, 54), (2, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 78, 12]]
** centroid: 4, normalized-entropy: 0.5665095065529052, [(2, 78), (3, 12)]
*** center 5: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [66, 6, 0]]
** centroid: 6, normalized-entropy: 0.4138168503036336, [(1, 66), (2, 6)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [57, 6, 0]]
** centroid: 7, normalized-entropy: 0.45371633918694493, [(1, 57), (2, 6)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1893673086129129] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1893673086129129, 0.14809021831676364] ***
*** starting iteration: 2; err: [Inf, 0.1893673086129129, 0.14809021831676364] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1893673086129129, 0.14809021831676364, 0.14481548074862804] ***
*** starting iteration: 3; err: [Inf, 0.1893673086129129, 0.14809021831676364, 0.14481548074862804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1893673086129129, 0.14809021831676364, 0.14481548074862804, 0.14455177057534457] ***
*** finished computation of 7 references, err: [Inf, 0.1893673086129129, 0.14809021831676364, 0.14481548074862804, 0.14455177057534457] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 78, 12]]
** centroid: 1, normalized-entropy: 0.5665095065529052, [(2, 78), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 3, 0]]
** centroid: 3, normalized-entropy: 0.2795055456366802, [(1, 59), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [52, 18, 0]]
** centroid: 4, normalized-entropy: 0.8224042259549892, [(1, 52), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 14, 0]]
** centroid: 5, normalized-entropy: 0.6840384356390419, [(1, 63), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 55, 0]]
** centroid: 6, normalized-entropy: 0.3576467062456333, [(1, 4), (2, 55)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 1, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1884909657537937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1884909657537937, 0.14784931548126043] ***
*** starting iteration: 2; err: [Inf, 0.1884909657537937, 0.14784931548126043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1884909657537937, 0.14784931548126043, 0.14607696421071886] ***
*** starting iteration: 3; err: [Inf, 0.1884909657537937, 0.14784931548126043, 0.14607696421071886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1884909657537937, 0.14784931548126043, 0.14607696421071886, 0.14560776960104704] ***
*** finished computation of 7 references, err: [Inf, 0.1884909657537937, 0.14784931548126043, 0.14607696421071886, 0.14560776960104704] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 68, 4]]
** centroid: 1, normalized-entropy: 0.3095434291503252, [(2, 68), (3, 4)]
*** center 2: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [60, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [49, 12, 0]]
** centroid: 4, normalized-entropy: 0.7153220528038851, [(1, 49), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 28, 0]]
** centroid: 5, normalized-entropy: 0.8944518845341284, [(1, 62), (2, 28)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 79, 2]]
** centroid: 6, normalized-entropy: 0.16702680404522793, [(2, 79), (3, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 1, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19406029414758086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19406029414758086, 0.15039211622439325] ***
*** starting iteration: 2; err: [Inf, 0.19406029414758086, 0.15039211622439325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19406029414758086, 0.15039211622439325, 0.14506897811964153] ***
*** starting iteration: 3; err: [Inf, 0.19406029414758086, 0.15039211622439325, 0.14506897811964153] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19406029414758086, 0.15039211622439325, 0.14506897811964153, 0.14455827359948306] ***
*** finished computation of 7 references, err: [Inf, 0.19406029414758086, 0.15039211622439325, 0.14506897811964153, 0.14455827359948306] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [23, 63, 0]]
** centroid: 1, normalized-entropy: 0.8377698690066789, [(1, 23), (2, 63)]
*** center 2: selecting labels [1] (freq >= 2) [from [64, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 57, 13]]
** centroid: 4, normalized-entropy: 0.6924194863274741, [(2, 57), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 7, 0]]
** centroid: 5, normalized-entropy: 0.4434581453896789, [(1, 69), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [58, 2, 0]]
** centroid: 6, normalized-entropy: 0.2108423003185322, [(1, 58), (2, 2)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 51, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20901473950129001] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20901473950129001, 0.1527600293830037] ***
*** starting iteration: 2; err: [Inf, 0.20901473950129001, 0.1527600293830037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20901473950129001, 0.1527600293830037, 0.1484128934359178] ***
*** starting iteration: 3; err: [Inf, 0.20901473950129001, 0.1527600293830037, 0.1484128934359178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20901473950129001, 0.1527600293830037, 0.1484128934359178, 0.14793022166192532] ***
*** finished computation of 7 references, err: [Inf, 0.20901473950129001, 0.1527600293830037, 0.1484128934359178, 0.14793022166192532] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [26, 27, 0]]
** centroid: 1, normalized-entropy: 0.9997431860710851, [(1, 26), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 5, 0]]
** centroid: 2, normalized-entropy: 0.45668363153944286, [(1, 47), (2, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 75, 13]]
** centroid: 4, normalized-entropy: 0.6041234581483739, [(2, 75), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 19, 0]]
** centroid: 5, normalized-entropy: 0.785889583138768, [(1, 62), (2, 19)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 65, 0]]
** centroid: 6, normalized-entropy: 0.4178642624458583, [(1, 6), (2, 65)]
*** center 7: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1885527033638209] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1885527033638209, 0.1484834980610758] ***
*** starting iteration: 2; err: [Inf, 0.1885527033638209, 0.1484834980610758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1885527033638209, 0.1484834980610758, 0.14437664413778112] ***
*** starting iteration: 3; err: [Inf, 0.1885527033638209, 0.1484834980610758, 0.14437664413778112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1885527033638209, 0.1484834980610758, 0.14437664413778112, 0.1435359687572345] ***
*** finished computation of 7 references, err: [Inf, 0.1885527033638209, 0.1484834980610758, 0.14437664413778112, 0.1435359687572345] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 59, 1]]
*** center 2: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 20, 0]]
** centroid: 3, normalized-entropy: 0.7686913027030167, [(1, 69), (2, 20)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [87, 2, 0]]
** centroid: 4, normalized-entropy: 0.1551032721030341, [(1, 87), (2, 2)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 67, 7]]
** centroid: 5, normalized-entropy: 0.45162282218200417, [(2, 67), (3, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [36, 24, 0]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(1, 36), (2, 24)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18630659104324876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18630659104324876, 0.14656390986219048] ***
*** starting iteration: 2; err: [Inf, 0.18630659104324876, 0.14656390986219048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18630659104324876, 0.14656390986219048, 0.14409242561738939] ***
*** starting iteration: 3; err: [Inf, 0.18630659104324876, 0.14656390986219048, 0.14409242561738939] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18630659104324876, 0.14656390986219048, 0.14409242561738939, 0.14325752158043906] ***
*** finished computation of 7 references, err: [Inf, 0.18630659104324876, 0.14656390986219048, 0.14409242561738939, 0.14325752158043906] ***
*** center 1: selecting labels [1] (freq >= 2) [from [71, 1, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [66, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 53, 17]]
** centroid: 3, normalized-entropy: 0.7997594113291759, [(2, 53), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 65, 0]]
** centroid: 5, normalized-entropy: 0.8158009273789572, [(1, 22), (2, 65)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 57, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19092993299663066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19092993299663066, 0.1506769894240424] ***
*** starting iteration: 2; err: [Inf, 0.19092993299663066, 0.1506769894240424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19092993299663066, 0.1506769894240424, 0.1458142002914101] ***
*** starting iteration: 3; err: [Inf, 0.19092993299663066, 0.1506769894240424, 0.1458142002914101] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19092993299663066, 0.1506769894240424, 0.1458142002914101, 0.14445156278833746] ***
*** starting iteration: 4; err: [Inf, 0.19092993299663066, 0.1506769894240424, 0.1458142002914101, 0.14445156278833746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19092993299663066, 0.1506769894240424, 0.1458142002914101, 0.14445156278833746, 0.14370284525211902] ***
*** finished computation of 7 references, err: [Inf, 0.19092993299663066, 0.1506769894240424, 0.1458142002914101, 0.14445156278833746, 0.14370284525211902] ***
*** center 1: selecting labels [1] (freq >= 2) [from [68, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [56, 3, 0]]
** centroid: 2, normalized-entropy: 0.2899860470332091, [(1, 56), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 52, 8]]
** centroid: 3, normalized-entropy: 0.5665095065529052, [(2, 52), (3, 8)]
*** center 4: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 65, 0]]
** centroid: 5, normalized-entropy: 0.7713111060849788, [(1, 19), (2, 65)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 57, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [69, 2, 0]]
** centroid: 7, normalized-entropy: 0.18512476010054582, [(1, 69), (2, 2)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18417271069716662] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18417271069716662, 0.1461279981294647] ***
*** starting iteration: 2; err: [Inf, 0.18417271069716662, 0.1461279981294647] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18417271069716662, 0.1461279981294647, 0.14301340119726955] ***
*** starting iteration: 3; err: [Inf, 0.18417271069716662, 0.1461279981294647, 0.14301340119726955] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18417271069716662, 0.1461279981294647, 0.14301340119726955, 0.14241165016801097] ***
*** finished computation of 7 references, err: [Inf, 0.18417271069716662, 0.1461279981294647, 0.14301340119726955, 0.14241165016801097] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 75, 5]]
** centroid: 1, normalized-entropy: 0.3372900666170139, [(2, 75), (3, 5)]
*** center 2: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 2, 0]]
** centroid: 3, normalized-entropy: 0.2108423003185322, [(1, 58), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 22, 0]]
** centroid: 4, normalized-entropy: 0.903116172156872, [(1, 47), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 11, 0]]
** centroid: 5, normalized-entropy: 0.5869185834047994, [(1, 67), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [72, 3, 0]]
** centroid: 6, normalized-entropy: 0.24229218908241482, [(1, 72), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 66, 0]]
** centroid: 7, normalized-entropy: 0.2580186686648155, [(1, 3), (2, 66)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19571244676038624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19571244676038624, 0.1478879834394902] ***
*** starting iteration: 2; err: [Inf, 0.19571244676038624, 0.1478879834394902] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19571244676038624, 0.1478879834394902, 0.14319292609021067] ***
*** starting iteration: 3; err: [Inf, 0.19571244676038624, 0.1478879834394902, 0.14319292609021067] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19571244676038624, 0.1478879834394902, 0.14319292609021067, 0.14230186484567822] ***
*** finished computation of 7 references, err: [Inf, 0.19571244676038624, 0.1478879834394902, 0.14319292609021067, 0.14230186484567822] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 64, 11]]
** centroid: 1, normalized-entropy: 0.6014353864290773, [(2, 64), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [88, 3, 0]]
** centroid: 3, normalized-entropy: 0.20905980566852464, [(1, 88), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 27, 0]]
** centroid: 4, normalized-entropy: 0.8976844934141643, [(1, 59), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 15, 0]]
** centroid: 5, normalized-entropy: 0.7855602922535471, [(1, 49), (2, 15)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 57, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19019444269128144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19019444269128144, 0.15032072766683996] ***
*** starting iteration: 2; err: [Inf, 0.19019444269128144, 0.15032072766683996] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19019444269128144, 0.15032072766683996, 0.1476320010367781] ***
*** starting iteration: 3; err: [Inf, 0.19019444269128144, 0.15032072766683996, 0.1476320010367781] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19019444269128144, 0.15032072766683996, 0.1476320010367781, 0.1474442028719932] ***
*** finished computation of 7 references, err: [Inf, 0.19019444269128144, 0.15032072766683996, 0.1476320010367781, 0.1474442028719932] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 70, 16]]
** centroid: 1, normalized-entropy: 0.6931274153282881, [(2, 70), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [62, 2, 0]]
** centroid: 3, normalized-entropy: 0.2006223243127146, [(1, 62), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [52, 16, 0]]
** centroid: 4, normalized-entropy: 0.787126586201269, [(1, 52), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 19, 0]]
** centroid: 5, normalized-entropy: 0.7809756883263416, [(1, 63), (2, 19)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [63, 5, 0]]
** centroid: 6, normalized-entropy: 0.378958787501346, [(1, 63), (2, 5)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 57, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21388710504211486] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21388710504211486, 0.15256613388098778] ***
*** starting iteration: 2; err: [Inf, 0.21388710504211486, 0.15256613388098778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21388710504211486, 0.15256613388098778, 0.1478016471285373] ***
*** starting iteration: 3; err: [Inf, 0.21388710504211486, 0.15256613388098778, 0.1478016471285373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21388710504211486, 0.15256613388098778, 0.1478016471285373, 0.14733591591753065] ***
*** finished computation of 7 references, err: [Inf, 0.21388710504211486, 0.15256613388098778, 0.1478016471285373, 0.14733591591753065] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [15, 46, 0]]
** centroid: 1, normalized-entropy: 0.8047175193210769, [(1, 15), (2, 46)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 31, 0]]
** centroid: 2, normalized-entropy: 0.9075250687540451, [(1, 65), (2, 31)]
*** center 3: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 74, 14]]
** centroid: 4, normalized-entropy: 0.6321302781219708, [(2, 74), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 26, 0]]
** centroid: 5, normalized-entropy: 0.9310558233850329, [(1, 49), (2, 26)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18380463981814682] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18380463981814682, 0.14353923206590116] ***
*** starting iteration: 2; err: [Inf, 0.18380463981814682, 0.14353923206590116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18380463981814682, 0.14353923206590116, 0.14126855959836393] ***
*** starting iteration: 3; err: [Inf, 0.18380463981814682, 0.14353923206590116, 0.14126855959836393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18380463981814682, 0.14353923206590116, 0.14126855959836393, 0.14090645678713917] ***
*** finished computation of 7 references, err: [Inf, 0.18380463981814682, 0.14353923206590116, 0.14126855959836393, 0.14090645678713917] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [73, 2, 0]]
** centroid: 1, normalized-entropy: 0.1773894531859976, [(1, 73), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 5, 0]]
** centroid: 2, normalized-entropy: 0.3602750564216625, [(1, 68), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 50, 15]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(2, 50), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 65, 0]]
** centroid: 5, normalized-entropy: 0.7713111060849788, [(1, 19), (2, 65)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 52, 0]]
** centroid: 6, normalized-entropy: 0.4288109647301171, [(1, 5), (2, 52)]
*** center 7: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19100672232732177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19100672232732177, 0.14837967139855027] ***
*** starting iteration: 2; err: [Inf, 0.19100672232732177, 0.14837967139855027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19100672232732177, 0.14837967139855027, 0.14533947625197471] ***
*** starting iteration: 3; err: [Inf, 0.19100672232732177, 0.14837967139855027, 0.14533947625197471] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19100672232732177, 0.14837967139855027, 0.14533947625197471, 0.14510117432195693] ***
*** finished computation of 7 references, err: [Inf, 0.19100672232732177, 0.14837967139855027, 0.14533947625197471, 0.14510117432195693] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [59, 48, 0]]
** centroid: 1, normalized-entropy: 0.9923628747472766, [(1, 59), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [76, 6, 0]]
** centroid: 2, normalized-entropy: 0.3776463213737003, [(1, 76), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 61, 12]]
** centroid: 4, normalized-entropy: 0.644694043811662, [(2, 61), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [40, 20, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 40), (2, 20)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 52, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18793563596718013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18793563596718013, 0.15199520206451417] ***
*** starting iteration: 2; err: [Inf, 0.18793563596718013, 0.15199520206451417] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18793563596718013, 0.15199520206451417, 0.14670072434283793] ***
*** starting iteration: 3; err: [Inf, 0.18793563596718013, 0.15199520206451417, 0.14670072434283793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18793563596718013, 0.15199520206451417, 0.14670072434283793, 0.14558707118872552] ***
*** starting iteration: 4; err: [Inf, 0.18793563596718013, 0.15199520206451417, 0.14670072434283793, 0.14558707118872552] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18793563596718013, 0.15199520206451417, 0.14670072434283793, 0.14558707118872552, 0.14514459226187318] ***
*** finished computation of 7 references, err: [Inf, 0.18793563596718013, 0.15199520206451417, 0.14670072434283793, 0.14558707118872552, 0.14514459226187318] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 62, 10]]
** centroid: 1, normalized-entropy: 0.581321498763703, [(2, 62), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 2, 0]]
** centroid: 3, normalized-entropy: 0.19364280468389852, [(1, 65), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 32, 0]]
** centroid: 4, normalized-entropy: 0.9389320105807949, [(1, 58), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 10, 0]]
** centroid: 5, normalized-entropy: 0.576291461217437, [(1, 63), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [88, 2, 0]]
** centroid: 6, normalized-entropy: 0.1537421803287618, [(1, 88), (2, 2)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19141853008046747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19141853008046747, 0.15323753307759763] ***
*** starting iteration: 2; err: [Inf, 0.19141853008046747, 0.15323753307759763] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19141853008046747, 0.15323753307759763, 0.14657991492934525] ***
*** starting iteration: 3; err: [Inf, 0.19141853008046747, 0.15323753307759763, 0.14657991492934525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19141853008046747, 0.15323753307759763, 0.14657991492934525, 0.14519509452581406] ***
*** starting iteration: 4; err: [Inf, 0.19141853008046747, 0.15323753307759763, 0.14657991492934525, 0.14519509452581406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19141853008046747, 0.15323753307759763, 0.14657991492934525, 0.14519509452581406, 0.14462056756205857] ***
*** finished computation of 7 references, err: [Inf, 0.19141853008046747, 0.15323753307759763, 0.14657991492934525, 0.14519509452581406, 0.14462056756205857] ***
*** center 1: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 51, 13]]
** centroid: 2, normalized-entropy: 0.7281342378690551, [(2, 51), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [38, 5, 0]]
** centroid: 3, normalized-entropy: 0.5185697317883058, [(1, 38), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [84, 17, 0]]
** centroid: 4, normalized-entropy: 0.653839880626333, [(1, 84), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 54, 0]]
** centroid: 5, normalized-entropy: 0.9004854334784268, [(1, 25), (2, 54)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 1, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 44, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.187815956722945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.187815956722945, 0.15098258530301972] ***
*** starting iteration: 2; err: [Inf, 0.187815956722945, 0.15098258530301972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.187815956722945, 0.15098258530301972, 0.14678091094922274] ***
*** starting iteration: 3; err: [Inf, 0.187815956722945, 0.15098258530301972, 0.14678091094922274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.187815956722945, 0.15098258530301972, 0.14678091094922274, 0.14518314952100628] ***
*** starting iteration: 4; err: [Inf, 0.187815956722945, 0.15098258530301972, 0.14678091094922274, 0.14518314952100628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.187815956722945, 0.15098258530301972, 0.14678091094922274, 0.14518314952100628, 0.14465514233149587] ***
*** finished computation of 7 references, err: [Inf, 0.187815956722945, 0.15098258530301972, 0.14678091094922274, 0.14518314952100628, 0.14465514233149587] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [9, 63, 0]]
** centroid: 1, normalized-entropy: 0.5435644431995963, [(1, 9), (2, 63)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [76, 3, 0]]
** centroid: 3, normalized-entropy: 0.23292785546981223, [(1, 76), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [84, 2, 0]]
** centroid: 4, normalized-entropy: 0.15935006268563429, [(1, 84), (2, 2)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 61, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [65, 9, 0]]
** centroid: 6, normalized-entropy: 0.5340042729285396, [(1, 65), (2, 9)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 42, 13]]
** centroid: 7, normalized-entropy: 0.7889406572966208, [(2, 42), (3, 13)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1870166908148676] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1870166908148676, 0.15146733975037932] ***
*** starting iteration: 2; err: [Inf, 0.1870166908148676, 0.15146733975037932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1870166908148676, 0.15146733975037932, 0.14837769728340208] ***
*** starting iteration: 3; err: [Inf, 0.1870166908148676, 0.15146733975037932, 0.14837769728340208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1870166908148676, 0.15146733975037932, 0.14837769728340208, 0.147736642354168] ***
*** finished computation of 7 references, err: [Inf, 0.1870166908148676, 0.15146733975037932, 0.14837769728340208, 0.147736642354168] ***
*** center 1: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 55, 13]]
** centroid: 2, normalized-entropy: 0.7039260680195971, [(2, 55), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 2, 0]]
** centroid: 3, normalized-entropy: 0.23519338181924157, [(1, 50), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [3, 65, 0]]
** centroid: 4, normalized-entropy: 0.260862909647207, [(1, 3), (2, 65)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [32, 46, 0]]
** centroid: 5, normalized-entropy: 0.9766349114440099, [(1, 32), (2, 46)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [78, 3, 0]]
** centroid: 7, normalized-entropy: 0.22853814395352806, [(1, 78), (2, 3)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20577349602710457] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20577349602710457, 0.14837303105182945] ***
*** starting iteration: 2; err: [Inf, 0.20577349602710457, 0.14837303105182945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20577349602710457, 0.14837303105182945, 0.14478808926790954] ***
*** starting iteration: 3; err: [Inf, 0.20577349602710457, 0.14837303105182945, 0.14478808926790954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20577349602710457, 0.14837303105182945, 0.14478808926790954, 0.14433071678876877] ***
*** finished computation of 7 references, err: [Inf, 0.20577349602710457, 0.14837303105182945, 0.14478808926790954, 0.14433071678876877] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [40, 52, 0]]
** centroid: 1, normalized-entropy: 0.9876925088958032, [(1, 40), (2, 52)]
*** center 2: selecting labels [1] (freq >= 2) [from [53, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [67, 9, 0]]
** centroid: 4, normalized-entropy: 0.524805134842907, [(1, 67), (2, 9)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 65, 16]]
** centroid: 5, normalized-entropy: 0.7169622516889513, [(2, 65), (3, 16)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 49, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 1, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17997638474777342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17997638474777342, 0.14760309404321015] ***
*** starting iteration: 2; err: [Inf, 0.17997638474777342, 0.14760309404321015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17997638474777342, 0.14760309404321015, 0.1439872250687331] ***
*** starting iteration: 3; err: [Inf, 0.17997638474777342, 0.14760309404321015, 0.1439872250687331] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17997638474777342, 0.14760309404321015, 0.1439872250687331, 0.14297048865631223] ***
*** starting iteration: 4; err: [Inf, 0.17997638474777342, 0.14760309404321015, 0.1439872250687331, 0.14297048865631223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17997638474777342, 0.14760309404321015, 0.1439872250687331, 0.14297048865631223, 0.14265542764915154] ***
*** finished computation of 7 references, err: [Inf, 0.17997638474777342, 0.14760309404321015, 0.1439872250687331, 0.14297048865631223, 0.14265542764915154] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 53, 15]]
** centroid: 1, normalized-entropy: 0.7612401496918493, [(2, 53), (3, 15)]
*** center 2: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 4, 0]]
** centroid: 4, normalized-entropy: 0.32625881462949274, [(1, 63), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [94, 13, 0]]
** centroid: 5, normalized-entropy: 0.5336439173027161, [(1, 94), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 82, 0]]
** centroid: 6, normalized-entropy: 0.1623261801753929, [(1, 2), (2, 82)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [46, 18, 0]]
** centroid: 7, normalized-entropy: 0.8571484374283717, [(1, 46), (2, 18)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.186211806345731] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.186211806345731, 0.1500296401735395] ***
*** starting iteration: 2; err: [Inf, 0.186211806345731, 0.1500296401735395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.186211806345731, 0.1500296401735395, 0.14661983257532119] ***
*** starting iteration: 3; err: [Inf, 0.186211806345731, 0.1500296401735395, 0.14661983257532119] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.186211806345731, 0.1500296401735395, 0.14661983257532119, 0.14577610310539604] ***
*** finished computation of 7 references, err: [Inf, 0.186211806345731, 0.1500296401735395, 0.14661983257532119, 0.14577610310539604] ***
*** center 1: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [76, 2, 0]]
** centroid: 2, normalized-entropy: 0.17203694935311387, [(1, 76), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 63, 10]]
** centroid: 3, normalized-entropy: 0.576291461217437, [(2, 63), (3, 10)]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 13, 0]]
** centroid: 5, normalized-entropy: 0.7281342378690551, [(1, 51), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [13, 54, 0]]
** centroid: 6, normalized-entropy: 0.709825885194168, [(1, 13), (2, 54)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [20, 50, 0]]
** centroid: 7, normalized-entropy: 0.8631205685666311, [(1, 20), (2, 50)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19380262171663343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19380262171663343, 0.14579481102526187] ***
*** starting iteration: 2; err: [Inf, 0.19380262171663343, 0.14579481102526187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19380262171663343, 0.14579481102526187, 0.14142767793033273] ***
*** starting iteration: 3; err: [Inf, 0.19380262171663343, 0.14579481102526187, 0.14142767793033273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19380262171663343, 0.14579481102526187, 0.14142767793033273, 0.14052967900782823] ***
*** finished computation of 7 references, err: [Inf, 0.19380262171663343, 0.14579481102526187, 0.14142767793033273, 0.14052967900782823] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [12, 73, 0]]
** centroid: 1, normalized-entropy: 0.5873116089977589, [(1, 12), (2, 73)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 23, 0]]
** centroid: 2, normalized-entropy: 0.9134601452569628, [(1, 47), (2, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 4, 0]]
** centroid: 4, normalized-entropy: 0.3411538931451763, [(1, 59), (2, 4)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 73, 10]]
** centroid: 5, normalized-entropy: 0.530744566923854, [(2, 73), (3, 10)]
*** center 6: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [66, 3, 0]]
** centroid: 7, normalized-entropy: 0.2580186686648155, [(1, 66), (2, 3)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21119703369680792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21119703369680792, 0.15492086803913116] ***
*** starting iteration: 2; err: [Inf, 0.21119703369680792, 0.15492086803913116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21119703369680792, 0.15492086803913116, 0.1508719788119197] ***
*** starting iteration: 3; err: [Inf, 0.21119703369680792, 0.15492086803913116, 0.1508719788119197] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21119703369680792, 0.15492086803913116, 0.1508719788119197, 0.14989419161900877] ***
*** finished computation of 7 references, err: [Inf, 0.21119703369680792, 0.15492086803913116, 0.1508719788119197, 0.14989419161900877] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [66, 33, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 66), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 30, 0]]
** centroid: 2, normalized-entropy: 0.9740248644357521, [(1, 44), (2, 30)]
*** center 3: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 84, 17]]
** centroid: 4, normalized-entropy: 0.653839880626333, [(2, 84), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 33, 0]]
** centroid: 5, normalized-entropy: 0.9561550236844027, [(1, 20), (2, 33)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19780065234471111] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19780065234471111, 0.14803543625678867] ***
*** starting iteration: 2; err: [Inf, 0.19780065234471111, 0.14803543625678867] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19780065234471111, 0.14803543625678867, 0.14426658828859218] ***
*** starting iteration: 3; err: [Inf, 0.19780065234471111, 0.14803543625678867, 0.14426658828859218] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19780065234471111, 0.14803543625678867, 0.14426658828859218, 0.14338349846750498] ***
*** finished computation of 7 references, err: [Inf, 0.19780065234471111, 0.14803543625678867, 0.14426658828859218, 0.14338349846750498] ***
*** center 1: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [80, 14, 0]]
** centroid: 2, normalized-entropy: 0.607171654871303, [(1, 80), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 67, 17]]
** centroid: 3, normalized-entropy: 0.7266645172796352, [(2, 67), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 31, 0]]
** centroid: 5, normalized-entropy: 0.99919835426364, [(1, 29), (2, 31)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 57, 0]]
** centroid: 6, normalized-entropy: 0.2863969571159561, [(1, 3), (2, 57)]
*** center 7: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18987698485702276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18987698485702276, 0.15216968455910682] ***
*** starting iteration: 2; err: [Inf, 0.18987698485702276, 0.15216968455910682] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18987698485702276, 0.15216968455910682, 0.14651979815540836] ***
*** starting iteration: 3; err: [Inf, 0.18987698485702276, 0.15216968455910682, 0.14651979815540836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18987698485702276, 0.15216968455910682, 0.14651979815540836, 0.14551997648691758] ***
*** finished computation of 7 references, err: [Inf, 0.18987698485702276, 0.15216968455910682, 0.14651979815540836, 0.14551997648691758] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [60, 48, 0]]
** centroid: 1, normalized-entropy: 0.9910760598382222, [(1, 60), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 3, 0]]
** centroid: 2, normalized-entropy: 0.2761954276479391, [(1, 60), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 69, 14]]
** centroid: 4, normalized-entropy: 0.6546640527143932, [(2, 69), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 8, 0]]
** centroid: 5, normalized-entropy: 0.4986751363204345, [(1, 65), (2, 8)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 9 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 352,3 => 25,1 => 623), Dict(2 => 374,3 => 49,1 => 577))
[ Info: ===== scores for single classifier: {"micro_f1":0.945,"precision":0.945,"recall":0.945,"macro_recall":0.9525482163875476,"macro_f1":0.9304414487820859,"accuracy":0.945,"class_f1":{"2":0.9217638691322902,"3":0.9074074074074074,"1":0.9621530698065601},"class_precision":{"2":0.9848024316109423,"3":0.8305084745762712,"1":0.934640522875817},"class_recall":{"2":0.8663101604278075,"3":1.0,"1":0.9913344887348353}}
[ Info: ===== scores for 1: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9675482923593259,"macro_f1":0.9598425110799212,"accuracy":0.966,"class_f1":{"2":0.9540540540540541,"3":0.9504950495049506,"1":0.9749784296807593},"class_precision":{"2":0.9644808743169399,"3":0.9230769230769231,"1":0.9707903780068728},"class_recall":{"2":0.9438502673796791,"3":0.9795918367346939,"1":0.9792027729636048}}
[ Info: ===== scores for 5: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9756685406161836,"macro_f1":0.9652078937870905,"accuracy":0.973,"class_f1":{"2":0.9644268774703557,"3":0.9504950495049506,"1":0.9807017543859651},"class_precision":{"2":0.9506493506493506,"3":0.9230769230769231,"1":0.9928952042628775},"class_recall":{"2":0.9786096256684492,"3":0.9795918367346939,"1":0.9688041594454073}}
[ Info: ===== scores for 7: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9745131391141615,"macro_f1":0.9637658885389518,"accuracy":0.971,"class_f1":{"2":0.961892247043364,"3":0.9504950495049506,"1":0.9789103690685412},"class_precision":{"2":0.9457364341085271,"3":0.9230769230769231,"1":0.9928698752228164},"class_recall":{"2":0.9786096256684492,"3":0.9795918367346939,"1":0.9653379549393414}}
[ Info: ===== scores for 9: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.9747772750190355,"macro_f1":0.9644659930555689,"accuracy":0.972,"class_f1":{"2":0.9630606860158312,"3":0.9504950495049506,"1":0.9798422436459248},"class_precision":{"2":0.9505208333333334,"3":0.9230769230769231,"1":0.9911347517730497},"class_recall":{"2":0.9759358288770054,"3":0.9795918367346939,"1":0.9688041594454073}}
[ Info: ===== scores for 11: {"micro_f1":0.976,"precision":0.976,"recall":0.976,"macro_recall":0.9774016428692164,"macro_f1":0.9673753652080618,"accuracy":0.976,"class_f1":{"2":0.9682539682539684,"3":0.9504950495049506,"1":0.9833770778652667},"class_precision":{"2":0.9581151832460733,"3":0.9230769230769231,"1":0.9929328621908127},"class_recall":{"2":0.9786096256684492,"3":0.9795918367346939,"1":0.9740034662045061}}
(score = 0.972, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.98, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.98,"k":3,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.98,"precision":0.98,"recall":0.98,"macro_recall":0.9797124458732603,"macro_f1":0.9674547736736074,"accuracy":0.98,"class_f1":{"2":0.973404255319149,"3":0.9411764705882353,"1":0.987783595113438},"class_precision":{"2":0.9682539682539683,"3":0.9056603773584906,"1":0.9947275922671354},"class_recall":{"2":0.9786096256684492,"3":0.9795918367346939,"1":0.9809358752166378}}
Test Summary: | Pass  Total
AKNC          |    8      8
[386, 3, 2, 6, 2, 4, 1, 1, 1, 3, 2, 1, 4, 3, 2, 2, 4, 4, 5, 4, 19, 32, 2, 8, 3, 2, 15, 5, 5, 8, 14, 32, 8, 5, 4, 62, 6, 12, 3, 6, 13, 1, 4, 3, 11, 12, 33, 78, 9, 47, 3, 24, 10, 11, 46, 8, 30, 3, 19, 4, 5, 10, 30, 21, 63, 4, 5, 4, 6, 7, 126, 13, 4, 13, 6, 16, 12, 6, 10, 147, 38, 7, 29, 41, 1, 8, 5, 8, 4, 17, 6, 7, 16, 24, 35, 39, 24, 8, 31, 84, 8, 10, 7, 55, 12, 9, 30, 47, 30, 18, 1, 65, 30, 10, 53, 11, 89, 27, 15, 8, 117, 13, 27, 30, 4, 2, 32, 28, 18, 18, 11, 3, 13, 75, 72, 34, 3, 12, 17, 41, 15, 85, 16, 12, 8, 13, 21, 2, 24, 118, 28, 38, 19, 4, 24, 43, 36, 4, 15, 43, 23, 45, 42, 22, 1, 199, 27, 10, 8, 7, 23, 448, 21, 2, 3, 9, 32, 21, 11, 60, 17, 40, 24, 8, 39, 49, 26, 11, 4, 3, 3, 12, 35, 43, 8, 13, 32, 21, 68, 8, 22, 5, 239, 5, 26, 9, 27, 12, 42, 11, 39, 288, 7, 7, 1, 27, 26, 19, 28, 13, 646, 2, 100, 38, 4, 3, 1, 197, 16, 79, 20, 159, 9, 19, 92, 57, 5, 25, 12, 140, 26, 6, 5, 6, 23, 16, 14, 104, 6, 15, 65, 5, 71, 10, 12, 57, 11, 3, 97, 40, 27, 291, 6, 46, 36, 14, 16, 3, 3, 26, 2, 12, 4, 8, 9, 12, 34, 41, 12, 7, 27, 98, 60, 28, 49, 15, 105, 15, 28, 4, 8, 4, 25, 7, 3, 413, 206, 11, 58, 7]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6469999999999998, speedup = 0.2573552008308048, eval_ratio = 0.066978)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3893973214285713,"recall":0.38368055555555547,"f1":null,"seconds":0.0001433640718460083,"exhaustive_search_seconds":0.00037853047251701355,"evaluations":451.21875,"distances_sum":1790.363781346397}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5442708333333335,"recall":0.5442708333333335,"f1":null,"seconds":0.000214284285902977,"exhaustive_search_seconds":0.00037853047251701355,"evaluations":545.6953125,"distances_sum":1693.2712999684154}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.647569444444444,"recall":0.647569444444444,"f1":null,"seconds":0.0002920236438512802,"exhaustive_search_seconds":0.00037853047251701355,"evaluations":651.2734375,"distances_sum":1641.4708254837851}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7265624999999993,"recall":0.7265624999999993,"f1":0.7265624999999993,"seconds":0.00034682638943195343,"exhaustive_search_seconds":0.00037853047251701355,"evaluations":747.1953125,"distances_sum":1609.414441532135}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7682291666666655,"recall":0.7682291666666655,"f1":0.7682291666666655,"seconds":0.00041409581899642944,"exhaustive_search_seconds":0.00037853047251701355,"evaluations":837.0,"distances_sum":1593.6058641543711}
KCenters.DeloneInvIndex> reached performance {"precision":0.8255208333333326,"recall":0.8255208333333326,"f1":0.8255208333333326,"seconds":0.0005272980779409409,"exhaustive_search_seconds":0.00037853047251701355,"evaluations":954.0546875,"distances_sum":1576.202413904446}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8309999999999998, speedup = 0.43435129294284225, eval_ratio = 0.098473)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
