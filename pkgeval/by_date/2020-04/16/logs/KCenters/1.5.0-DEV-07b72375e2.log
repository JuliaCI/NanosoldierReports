Julia Version 1.5.0-DEV.633
Commit 07b72375e2 (2020-04-15 15:23 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed InvertedIndices ───────────── v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed TableTraits ───────────────── v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed JSON ──────────────────────── v0.21.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataPattern ─────────────── v0.5.1
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed DataStructures ────────────── v0.17.12
  Installed StatsBase ─────────────────── v0.32.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataAPI ───────────────────── v1.1.0
  Installed OrderedCollections ────────── v1.1.0
  Installed Compat ────────────────────── v3.8.0
  Installed Parsers ───────────────────── v1.0.1
  Installed Tables ────────────────────── v1.0.4
  Installed DataFrames ────────────────── v0.20.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.12
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.1
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_U3Ixc9/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_U3Ixc9/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.12
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.1
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9326678744951884
[ Info: 0.8326150393486023
[ Info: 0.5546240802109241
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32533089476327104
mean(cdnet.distances) = 0.3446249212572972
mean(crand.distances) = 0.33697024737795195
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6376953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6376953125,"f1":0.7654203435453442,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":7.375,"distances_sum":1800.169659945753}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6376953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6376953125,"f1":0.7654203435453442,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":7.375,"distances_sum":1800.169659945753}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8904798326673333,"seconds":5.943700671195984e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.3984375,"distances_sum":2405.813769871805}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7158203125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7158203125,"f1":0.8221237096237104,"seconds":5.48921525478363e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":7.8515625,"distances_sum":2046.0929557107972}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8046875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8046875,"f1":0.8814685314685322,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.2578125,"distances_sum":2361.950785992418}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8154296875,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.8154296875,"f1":0.8904798326673333,"seconds":5.943700671195984e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.3984375,"distances_sum":2405.813769871805}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.921875,"f1":0.955070970695971,"seconds":6.722286343574524e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.765625,"distances_sum":2841.8672338467827}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.96560782967033,"seconds":6.416812539100647e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.859375,"distances_sum":2877.9568648243826}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9588598901098907,"seconds":6.0927122831344604e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.8984375,"distances_sum":2820.116025695766}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.96560782967033,"seconds":6.416812539100647e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.859375,"distances_sum":2877.9568648243826}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.96560782967033,"seconds":6.416812539100647e-6,"exhaustive_search_seconds":1.8123537302017212e-6,"evaluations":8.859375,"distances_sum":2877.9568648243826}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3740234375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3740234375,"f1":null,"seconds":3.550201654434204e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":6.0,"distances_sum":837.3725981624377}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6943359375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6943359375,"f1":0.8095680361305371,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.8671875,"distances_sum":1614.4323102116364}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6943359375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6943359375,"f1":0.8095680361305371,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.8671875,"distances_sum":1614.4323102116364}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8713343947718956,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.421875,"distances_sum":1859.7941649484724}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7822265625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7822265625,"f1":0.8713343947718956,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.421875,"distances_sum":1859.7941649484724}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.9184326090576096,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.5546875,"distances_sum":2184.5377378416238}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9517742673992677,"seconds":6.031244993209839e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.78125,"distances_sum":2371.07688432312}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9278388278388285,"seconds":6.031244993209839e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.6875,"distances_sum":2223.603929145809}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9403216575091581,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.765625,"distances_sum":2299.565128574153}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9517742673992677,"seconds":6.031244993209839e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.78125,"distances_sum":2371.07688432312}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9130859375,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9517742673992677,"seconds":6.031244993209839e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.78125,"distances_sum":2371.07688432312}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.638671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.638671875,"f1":0.7675531066156073,"seconds":4.731118679046631e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.625,"distances_sum":1597.474207170393}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3203125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3203125,"f1":null,"seconds":0.00011798925697803497,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":5.453125,"distances_sum":782.6179839566736}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.638671875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.638671875,"f1":0.7675531066156073,"seconds":4.731118679046631e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.625,"distances_sum":1597.474207170393}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8735779845154854,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.171875,"distances_sum":2096.545540468809}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9233126248751253,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.65625,"distances_sum":2275.0957268992265}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.873046875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.873046875,"f1":0.9233126248751253,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.65625,"distances_sum":2275.0957268992265}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9657738095238099,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.9140625,"distances_sum":2504.6342652649632}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9655734890109894,"seconds":5.563721060752869e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.90625,"distances_sum":2515.1679003318827}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9608859890109895,"seconds":5.735084414482117e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8984375,"distances_sum":2477.114083332009}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9536916208791215,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8359375,"distances_sum":2443.9747244587115}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9657738095238099,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.9140625,"distances_sum":2504.6342652649632}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9657738095238099,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.9140625,"distances_sum":2504.6342652649632}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8563528485403494,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.421875,"distances_sum":1884.8331037240741}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8563528485403494,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.421875,"distances_sum":1884.8331037240741}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9691792582417588,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9765625,"distances_sum":2569.5646404244394}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9691792582417588,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9765625,"distances_sum":2569.5646404244394}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9758184523809528,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.984375,"distances_sum":2620.0001165703216}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9758184523809528,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.984375,"distances_sum":2620.0001165703216}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9758184523809528,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.984375,"distances_sum":2620.0001165703216}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5693359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5693359375,"f1":null,"seconds":4.36045229434967e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.5546875,"distances_sum":1334.2275153026046}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3740234375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3740234375,"f1":null,"seconds":3.589317202568054e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.296875,"distances_sum":865.0316185674086}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8623808483183493,"seconds":5.155801773071289e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.421875,"distances_sum":1904.4501663645678}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7685546875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7685546875,"f1":0.8623808483183493,"seconds":5.155801773071289e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.421875,"distances_sum":1904.4501663645678}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8749146686646695,"seconds":5.217269062995911e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.515625,"distances_sum":1963.7373681631914}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9654990842490847,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9140625,"distances_sum":2565.5417140485383}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9654990842490847,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9140625,"distances_sum":2565.5417140485383}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9746108058608061,"seconds":6.416812539100647e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.953125,"distances_sum":2639.604864790311}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9798363095238098,"seconds":6.2175095081329346e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.96875,"distances_sum":2667.417729640596}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":5,"bsize":13}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.9811755952380955,"seconds":6.549060344696045e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.984375,"distances_sum":2680.4552128023233}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9658203125,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9811755952380955,"seconds":6.549060344696045e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.984375,"distances_sum":2680.4552128023233}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9658203125,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9811755952380955,"seconds":6.549060344696045e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.984375,"distances_sum":2680.4552128023233}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1845703125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1845703125,"f1":null,"seconds":3.3285468816757202e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":4.84375,"distances_sum":439.05179218458306}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.330078125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.330078125,"f1":null,"seconds":3.589317202568054e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":5.1953125,"distances_sum":759.0964600520516}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9893229166666665,"recall":0.7734375,"f1":0.8583942099567105,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.234375,"distances_sum":1889.8524842842949}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":0.9893229166666665,"recall":0.7734375,"f1":0.8583942099567105,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.234375,"distances_sum":1889.8524842842949}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":0.9905784970238095,"recall":0.830078125,"f1":0.8958672187187818,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.546875,"distances_sum":2138.6291240248083}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":3,"bsize":6}, perf: {"precision":0.9925502232142858,"recall":0.8388671875,"f1":0.9022290860181489,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.5703125,"distances_sum":2183.334804436012}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8388671875,"state":{"ssize":3,"bsize":6},"perf":{"precision":0.9925502232142858,"recall":0.8388671875,"f1":0.9022290860181489,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.5703125,"distances_sum":2183.334804436012}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":0.9917224702380952,"recall":0.93359375,"f1":0.9598972641941397,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8984375,"distances_sum":2612.451939320445}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9916480654761904,"recall":0.89453125,"f1":0.9365313072344326,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8125,"distances_sum":2455.7565655620897}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":7,"bsize":10}, perf: {"precision":0.9930245535714286,"recall":0.9384765625,"f1":0.9629306891025643,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8828125,"distances_sum":2637.3753065197975}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":3,"bsize":7}, perf: {"precision":0.9911644345238095,"recall":0.8798828125,"f1":0.9277229281135537,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.765625,"distances_sum":2389.8619885494422}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":7,"bsize":10},"perf":{"precision":0.9930245535714286,"recall":0.9384765625,"f1":0.9629306891025643,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8828125,"distances_sum":2637.3753065197975}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":7,"bsize":10},"perf":{"precision":0.9930245535714286,"recall":0.9384765625,"f1":0.9629306891025643,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8828125,"distances_sum":2637.3753065197975}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2255859375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2255859375,"f1":null,"seconds":3.3918768167495728e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":5.7890625,"distances_sum":505.4035077846912}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8627084720834729,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.4140625,"distances_sum":1808.2882937611325}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7724609375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7724609375,"f1":0.8627084720834729,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.4140625,"distances_sum":1808.2882937611325}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9634901556776561,"seconds":6.102025508880615e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.828125,"distances_sum":2534.096388026405}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9303347693972698,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.625,"distances_sum":2308.569267479664}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.919785943223444,"seconds":5.681067705154419e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.6328125,"distances_sum":2184.690551511405}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8748262154512164,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.421875,"distances_sum":1869.7685812681457}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9634901556776561,"seconds":6.102025508880615e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.828125,"distances_sum":2534.096388026405}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9793898809523813,"seconds":6.362795829772949e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.953125,"distances_sum":2620.554818765044}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9740327380952386,"seconds":6.3478946685791016e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.921875,"distances_sum":2587.433886891808}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9737179487179488,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.890625,"distances_sum":2613.872073151754}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9793898809523813,"seconds":6.362795829772949e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.953125,"distances_sum":2620.554818765044}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9793898809523813,"seconds":6.362795829772949e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.953125,"distances_sum":2620.554818765044}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5576171875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5576171875,"f1":0.701017038517039,"seconds":4.639849066734314e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":6.8515625,"distances_sum":1177.8801495019263}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.42578125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.42578125,"f1":null,"seconds":4.151836037635803e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":6.171875,"distances_sum":872.9609621685452}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5576171875,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.5576171875,"f1":0.701017038517039,"seconds":4.639849066734314e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":6.8515625,"distances_sum":1177.8801495019263}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9229114635364645,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.2578125,"distances_sum":2368.257172930669}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8662109375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8662109375,"f1":0.9229114635364645,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.2578125,"distances_sum":2368.257172930669}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9524267399267403,"seconds":9.717606008052826e-5,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.6875,"distances_sum":2659.4268799877505}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.952329441391942,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.7578125,"distances_sum":2613.365172901812}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9662030677655681,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.875,"distances_sum":2705.0317104270534}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.946829212454213,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.71875,"distances_sum":2586.4175258066157}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9662030677655681,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.875,"distances_sum":2705.0317104270534}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9662030677655681,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.875,"distances_sum":2705.0317104270534}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4365234375, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.4365234375,"f1":0.5841956654456654,"seconds":3.8333237171173096e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":6.265625,"distances_sum":878.3240063233309}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.22265625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.22265625,"f1":null,"seconds":3.382563591003418e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":5.90625,"distances_sum":508.33251272583504}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4228515625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4228515625,"f1":null,"seconds":3.7811696529388428e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":6.2890625,"distances_sum":872.7181772087115}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4365234375,"state":{"ssize":1,"bsize":2},"perf":{"precision":1.0,"recall":0.4365234375,"f1":0.5841956654456654,"seconds":3.8333237171173096e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":6.265625,"distances_sum":878.3240063233309}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.595703125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.595703125,"f1":0.7326368076368083,"seconds":4.427507519721985e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":7.109375,"distances_sum":1299.6837365244064}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.864800824175825,"seconds":5.073845386505127e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.171875,"distances_sum":1922.4877709652935}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8658659049284058,"seconds":5.213543772697449e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.109375,"distances_sum":1924.1378005372644}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5888671875, conf: {"ssize":8,"bsize":3}, perf: {"precision":1.0,"recall":0.5888671875,"f1":0.7284465534465541,"seconds":4.1406601667404175e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":7.015625,"distances_sum":1299.0506040105213}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7955747377622385,"seconds":4.727393388748169e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":7.5625,"distances_sum":1552.5395697452009}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7931672494172503,"seconds":4.45730984210968e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":7.5703125,"distances_sum":1570.5936511604561}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.8658659049284058,"seconds":5.213543772697449e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.109375,"distances_sum":1924.1378005372644}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.867895646020647,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.15625,"distances_sum":1963.958759638998}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8626923423798432,"seconds":5.256384611129761e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.1484375,"distances_sum":1955.7260933245582}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9540006868131875,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.75,"distances_sum":2620.557103383581}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9243475274725282,"seconds":5.543231964111328e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.5546875,"distances_sum":2355.4803383139097}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9558836996337002,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.765625,"distances_sum":2618.9447751162106}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9572401556776563,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.75,"distances_sum":2665.1538992264645}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.950251831501832,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.6015625,"distances_sum":2546.3442934267787}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9525729478854483,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.75,"distances_sum":2602.612953971397}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9432780760905766,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.5546875,"distances_sum":2538.1144394922085}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.943077755577756,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.5703125,"distances_sum":2509.4025016878527}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9572401556776563,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.75,"distances_sum":2665.1538992264645}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.923828125,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9572401556776563,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.75,"distances_sum":2665.1538992264645}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5810546875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5810546875,"f1":0.7215007215007222,"seconds":4.336237907409668e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":6.7890625,"distances_sum":1276.1603864478357}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.8423290251415259,"seconds":5.0477683544158936e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.859375,"distances_sum":1840.4948883878224}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5498046875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5498046875,"f1":0.6890080405705411,"seconds":4.114583134651184e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":6.6328125,"distances_sum":1199.6562945022931}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7431640625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7431640625,"f1":0.8423290251415259,"seconds":5.0477683544158936e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.859375,"distances_sum":1840.4948883878224}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9598099816849824,"seconds":5.768612027168274e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8828125,"distances_sum":2627.525131516902}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8540818556443565,"seconds":5.070120096206665e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.953125,"distances_sum":1898.605885158475}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9642544955044959,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.859375,"distances_sum":2716.6664907688046}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9400412087912093,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.6640625,"distances_sum":2492.575477985841}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9642544955044959,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.859375,"distances_sum":2716.6664907688046}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9709306318681326,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.9375,"distances_sum":2731.663238406707}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9765853937728939,"seconds":5.8710575103759766e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.953125,"distances_sum":2779.5294209146746}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9763221153846156,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.9609375,"distances_sum":2769.9759458322706}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":9,"bsize":12}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.977586996336997,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.9765625,"distances_sum":2767.586654028347}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9674736721611723,"seconds":5.904585123062134e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8515625,"distances_sum":2738.1806811001275}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":9,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.977586996336997,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.9765625,"distances_sum":2767.586654028347}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":9,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.977586996336997,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.9765625,"distances_sum":2767.586654028347}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.544921875, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.544921875,"f1":null,"seconds":4.014000296592712e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.1484375,"distances_sum":1228.5656307292836}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5546875, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5546875,"f1":null,"seconds":4.0065497159957886e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.28125,"distances_sum":1234.8358126387825}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5546875,"state":{"ssize":3,"bsize":3},"perf":{"precision":null,"recall":0.5546875,"f1":null,"seconds":4.0065497159957886e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.28125,"distances_sum":1234.8358126387825}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.56640625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.56640625,"f1":0.7125541125541132,"seconds":4.433095455169678e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.3046875,"distances_sum":1286.2053123734315}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5791015625, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.5791015625,"f1":0.7154336982461987,"seconds":4.0978193283081055e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.421875,"distances_sum":1339.4678870467608}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5791015625,"state":{"ssize":6,"bsize":3},"perf":{"precision":1.0,"recall":0.5791015625,"f1":0.7154336982461987,"seconds":4.0978193283081055e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.421875,"distances_sum":1339.4678870467608}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.8011356698856708,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.03125,"distances_sum":1661.5326977526868}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8505924630924638,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.2734375,"distances_sum":1911.4195903187647}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":8,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8505924630924638,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.2734375,"distances_sum":1911.4195903187647}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7548828125,"state":{"ssize":8,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8505924630924638,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.2734375,"distances_sum":1911.4195903187647}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8724586177711184,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.28125,"distances_sum":2081.3686626942035}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.37109375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.37109375,"f1":null,"seconds":3.676861524581909e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":5.6015625,"distances_sum":922.6244558920602}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7890625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7890625,"f1":0.8724586177711184,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.28125,"distances_sum":2081.3686626942035}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.941884157509158,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.46875,"distances_sum":2571.675028610015}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9437385531135534,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.6328125,"distances_sum":2583.175407460328}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9437385531135534,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.6328125,"distances_sum":2583.175407460328}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9451381951381957,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.546875,"distances_sum":2574.1005130034027}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9451381951381957,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.546875,"distances_sum":2574.1005130034027}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.90625,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9451381951381957,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.546875,"distances_sum":2574.1005130034027}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6943359375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6943359375,"f1":0.8085003538128545,"seconds":6.241723895072937e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.1015625,"distances_sum":1694.0133902465082}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.23828125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.23828125,"f1":null,"seconds":3.285706043243408e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.5078125,"distances_sum":551.6098904302999}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6943359375,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6943359375,"f1":0.8085003538128545,"seconds":6.241723895072937e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.1015625,"distances_sum":1694.0133902465082}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8724218489843499,"seconds":5.347654223442078e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.2265625,"distances_sum":2008.8450458277316}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9453957500832508,"seconds":5.694106221199036e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.515625,"distances_sum":2521.697048438284}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9304201007326013,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.515625,"distances_sum":2399.4247359248493}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9052734375,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.9052734375,"f1":0.9453957500832508,"seconds":5.694106221199036e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.515625,"distances_sum":2521.697048438284}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9545844780219784,"seconds":7.111579179763794e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.609375,"distances_sum":2584.889875134541}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9488381410256413,"seconds":6.016343832015991e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.765625,"distances_sum":2564.1780454642485}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9705757783882789,"seconds":6.1318278312683105e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.9296875,"distances_sum":2718.8731005236596}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9720295329670333,"seconds":6.085261702537537e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.890625,"distances_sum":2750.220615690468}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9720295329670333,"seconds":6.085261702537537e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.890625,"distances_sum":2750.220615690468}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9720295329670333,"seconds":6.085261702537537e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.890625,"distances_sum":2750.220615690468}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2470703125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2470703125,"f1":null,"seconds":3.7122517824172974e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.8671875,"distances_sum":509.9532243463397}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2490234375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2490234375,"f1":null,"seconds":3.973022103309631e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.9921875,"distances_sum":558.6517537199207}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2490234375,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.2490234375,"f1":null,"seconds":3.973022103309631e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.9921875,"distances_sum":558.6517537199207}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2490234375,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.2490234375,"f1":null,"seconds":3.973022103309631e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.9921875,"distances_sum":558.6517537199207}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.658203125,"f1":null,"seconds":4.893168807029724e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.078125,"distances_sum":1233.0702863748725}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5537109375, conf: {"ssize":3,"bsize":3}, perf: {"precision":0.9811197916666666,"recall":0.5537109375,"f1":0.692029064685315,"seconds":4.500150680541992e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.6171875,"distances_sum":1025.8699789754796}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.658203125,"state":{"ssize":1,"bsize":4},"perf":{"precision":null,"recall":0.658203125,"f1":null,"seconds":4.893168807029724e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.078125,"distances_sum":1233.0702863748725}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":4,"bsize":7}, perf: {"precision":0.9824869791666666,"recall":0.8720703125,"f1":0.919986979166667,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9140625,"distances_sum":1810.375907014523}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":4,"bsize":5}, perf: {"precision":0.9836588541666667,"recall":0.7666015625,"f1":0.8550793607434239,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.703125,"distances_sum":1522.416182142182}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8720703125,"state":{"ssize":4,"bsize":7},"perf":{"precision":0.9824869791666666,"recall":0.8720703125,"f1":0.919986979166667,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9140625,"distances_sum":1810.375907014523}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":3,"bsize":8}, perf: {"precision":0.9851841517857143,"recall":0.8994140625,"f1":0.9361285199175827,"seconds":6.016343832015991e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8515625,"distances_sum":1918.2303101528935}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":2,"bsize":8}, perf: {"precision":0.9889787946428572,"recall":0.8994140625,"f1":0.9386353880494509,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.75,"distances_sum":1924.7572908112027}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":5,"bsize":8}, perf: {"precision":0.9878627232142858,"recall":0.90625,"f1":0.941811899038462,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.859375,"distances_sum":1922.3198387257694}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":0.9888392857142858,"recall":0.9267578125,"f1":0.9537431318681324,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9296875,"distances_sum":1996.56549163443}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":0.9888392857142858,"recall":0.9267578125,"f1":0.9537431318681324,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9296875,"distances_sum":1996.56549163443}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":0.9888392857142858,"recall":0.9267578125,"f1":0.9537431318681324,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9296875,"distances_sum":1996.56549163443}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7060546875, conf: {"ssize":2,"bsize":5}, perf: {"precision":0.9837797619047618,"recall":0.7060546875,"f1":0.8151421495171501,"seconds":5.461275577545166e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.1796875,"distances_sum":1366.1899679487685}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4287109375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4287109375,"f1":null,"seconds":4.112720489501953e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.578125,"distances_sum":807.5501851758553}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7060546875,"state":{"ssize":2,"bsize":5},"perf":{"precision":0.9837797619047618,"recall":0.7060546875,"f1":0.8151421495171501,"seconds":5.461275577545166e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.1796875,"distances_sum":1366.1899679487685}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.716796875, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.978627232142857,"recall":0.716796875,"f1":0.8220781822344327,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.265625,"distances_sum":1422.3873517219542}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":1,"bsize":6}, perf: {"precision":0.9863746279761906,"recall":0.8291015625,"f1":0.8964307177197807,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.578125,"distances_sum":1695.5922809412816}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8291015625,"state":{"ssize":1,"bsize":6},"perf":{"precision":0.9863746279761906,"recall":0.8291015625,"f1":0.8964307177197807,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.578125,"distances_sum":1695.5922809412816}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":3,"bsize":9}, perf: {"precision":0.9874441964285715,"recall":0.9228515625,"f1":0.9508771176739932,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9140625,"distances_sum":2021.86107657343}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":0.9869791666666667,"recall":0.8798828125,"f1":0.9257900953213457,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8359375,"distances_sum":1901.7134582120264}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":3,"bsize":8}, perf: {"precision":0.9885137648809523,"recall":0.8935546875,"f1":0.934892256181319,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8984375,"distances_sum":1915.782627641895}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":4,"bsize":8}, perf: {"precision":0.9863002232142858,"recall":0.890625,"f1":0.9306053972069602,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8359375,"distances_sum":1929.1880998317758}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":3,"bsize":9},"perf":{"precision":0.9874441964285715,"recall":0.9228515625,"f1":0.9508771176739932,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9140625,"distances_sum":2021.86107657343}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9228515625,"state":{"ssize":3,"bsize":9},"perf":{"precision":0.9874441964285715,"recall":0.9228515625,"f1":0.9508771176739932,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9140625,"distances_sum":2021.86107657343}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4111328125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4111328125,"f1":null,"seconds":4.325062036514282e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":6.546875,"distances_sum":768.753416117493}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4111328125,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4111328125,"f1":null,"seconds":4.325062036514282e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":6.546875,"distances_sum":768.753416117493}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8998371420246427,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.53125,"distances_sum":1748.1732934786683}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.828125,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.828125,"f1":0.8998371420246427,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.53125,"distances_sum":1748.1732934786683}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.828125,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.828125,"f1":0.8998371420246427,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.53125,"distances_sum":1748.1732934786683}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.828125,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.828125,"f1":0.8998371420246427,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.53125,"distances_sum":1748.1732934786683}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.708984375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.708984375,"f1":0.8159172424797434,"seconds":4.973262548446655e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.0546875,"distances_sum":1371.7061019933494}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.708984375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.708984375,"f1":0.8159172424797434,"seconds":4.973262548446655e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.0546875,"distances_sum":1371.7061019933494}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8570079226329235,"seconds":5.09992241859436e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.4609375,"distances_sum":1541.4636890023296}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.8570079226329235,"seconds":5.09992241859436e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.4609375,"distances_sum":1541.4636890023296}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8985124250749256,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.7109375,"distances_sum":1709.8319907727857}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8291015625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8291015625,"f1":0.8985124250749256,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.7109375,"distances_sum":1709.8319907727857}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8291015625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8291015625,"f1":0.8985124250749256,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.7109375,"distances_sum":1709.8319907727857}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8437166999667006,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.5078125,"distances_sum":1549.0821973611844}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.361328125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.361328125,"f1":null,"seconds":3.974884748458862e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":6.296875,"distances_sum":692.3057000323292}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.7990467865467873,"seconds":5.288049578666687e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.0703125,"distances_sum":1414.6618345345428}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7470703125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7470703125,"f1":0.8437166999667006,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.5078125,"distances_sum":1549.0821973611844}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9442937271062276,"seconds":6.42240047454834e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8125,"distances_sum":2022.7307231971047}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9023075882450889,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.703125,"distances_sum":1816.384006405449}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.8473568098568107,"seconds":5.0906091928482056e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.4296875,"distances_sum":1563.2723566742318}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9442937271062276,"seconds":6.42240047454834e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8125,"distances_sum":2022.7307231971047}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9455643315018321,"seconds":5.971640348434448e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8046875,"distances_sum":2035.9106994686456}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":10,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9716746794871799,"seconds":5.898997187614441e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.921875,"distances_sum":2182.845437626274}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":9,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9737751831501834,"seconds":6.314367055892944e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.90625,"distances_sum":2197.590170128569}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9511446886446894,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8984375,"distances_sum":2051.911990827847}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9468406593406599,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.765625,"distances_sum":2043.6878631467093}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":9,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9737751831501834,"seconds":6.314367055892944e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.90625,"distances_sum":2197.590170128569}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":9,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9737751831501834,"seconds":6.314367055892944e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.90625,"distances_sum":2197.590170128569}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5634765625, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.5634765625,"f1":null,"seconds":4.582107067108154e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":7.0390625,"distances_sum":1097.3124650206805}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":2,"bsize":4}, perf: {"precision":null,"recall":0.6767578125,"f1":null,"seconds":5.02169132232666e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":7.765625,"distances_sum":1391.895395062538}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6767578125,"state":{"ssize":2,"bsize":4},"perf":{"precision":null,"recall":0.6767578125,"f1":null,"seconds":5.02169132232666e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":7.765625,"distances_sum":1391.895395062538}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8569087162837171,"seconds":5.213543772697449e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.25,"distances_sum":1617.551488598282}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9304060522810528,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.7109375,"distances_sum":2011.7954751556374}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.880859375,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.880859375,"f1":0.9304060522810528,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.7109375,"distances_sum":2011.7954751556374}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9437728937728942,"seconds":6.1746686697006226e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.7890625,"distances_sum":2068.111735571333}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9545621045621051,"seconds":5.9194862842559814e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.828125,"distances_sum":2134.959618710573}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9545621045621051,"seconds":5.9194862842559814e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.828125,"distances_sum":2134.959618710573}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9208984375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9545621045621051,"seconds":5.9194862842559814e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.828125,"distances_sum":2134.959618710573}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.79070668914419,"seconds":5.025416612625122e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":7.8203125,"distances_sum":1397.9283332313257}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3876953125, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3876953125,"f1":null,"seconds":3.863126039505005e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":6.2109375,"distances_sum":777.3860879776063}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2158203125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2158203125,"f1":null,"seconds":3.42540442943573e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":5.4609375,"distances_sum":413.8418038287868}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6708984375,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6708984375,"f1":0.79070668914419,"seconds":5.025416612625122e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":7.8203125,"distances_sum":1397.9283332313257}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.924219010156511,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.75,"distances_sum":1991.61759504807}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8446667915417925,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.25,"distances_sum":1642.853527023405}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9254750457875467,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.8046875,"distances_sum":1969.26286833807}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9065455377955387,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.7734375,"distances_sum":1893.369453496131}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87109375,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.87109375,"f1":0.924219010156511,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.75,"distances_sum":1991.61759504807}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9299393315018323,"seconds":6.277114152908325e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.828125,"distances_sum":2018.7523506342784}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.952443910256411,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.765625,"distances_sum":2187.8336465546954}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9618532509157514,"seconds":6.197020411491394e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.8984375,"distances_sum":2207.5535182854223}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9380322802197809,"seconds":5.619600415229797e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.7109375,"distances_sum":2074.230729740587}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9618532509157514,"seconds":6.197020411491394e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.8984375,"distances_sum":2207.5535182854223}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9618532509157514,"seconds":6.197020411491394e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.8984375,"distances_sum":2207.5535182854223}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.40234375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.40234375,"f1":null,"seconds":3.861263394355774e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.3671875,"distances_sum":772.0051853356787}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2021484375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2021484375,"f1":null,"seconds":3.3490359783172607e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":5.65625,"distances_sum":382.2998524765292}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.40234375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.40234375,"f1":null,"seconds":3.861263394355774e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.3671875,"distances_sum":772.0051853356787}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7898778305028313,"seconds":4.760921001434326e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.65625,"distances_sum":1318.9939496517534}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8564373126873134,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.2890625,"distances_sum":1580.0469055899837}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.8564373126873134,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.2890625,"distances_sum":1580.0469055899837}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8937130577755587,"seconds":5.245208740234375e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.546875,"distances_sum":1720.0365395261247}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9163867382617389,"seconds":5.669891834259033e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.7890625,"distances_sum":1838.17519805188}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.857421875,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.857421875,"f1":0.9163867382617389,"seconds":5.669891834259033e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.7890625,"distances_sum":1838.17519805188}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.857421875,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.857421875,"f1":0.9163867382617389,"seconds":5.669891834259033e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.7890625,"distances_sum":1838.17519805188}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.400390625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.400390625,"f1":null,"seconds":4.421919584274292e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":6.6171875,"distances_sum":785.585814855412}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.576171875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.576171875,"f1":0.7138457029082034,"seconds":4.634261131286621e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.078125,"distances_sum":1171.5683092440438}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.576171875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.576171875,"f1":0.7138457029082034,"seconds":4.634261131286621e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.078125,"distances_sum":1171.5683092440438}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8533294830169837,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.375,"distances_sum":1662.6353697407585}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9468978937728944,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.921875,"distances_sum":2117.8012047712396}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7944111444111452,"seconds":4.984438419342041e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.1015625,"distances_sum":1410.347825925677}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9052734375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.9052734375,"f1":0.9468978937728944,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.921875,"distances_sum":2117.8012047712396}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9627461080586084,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.859375,"distances_sum":2245.649606716664}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9627461080586084,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.859375,"distances_sum":2245.649606716664}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9627461080586084,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.859375,"distances_sum":2245.649606716664}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8572287087912096,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.1875,"distances_sum":1591.5316148466427}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8414450133200142,"seconds":4.909932613372803e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":7.96875,"distances_sum":1573.8779360342735}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.8572287087912096,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.1875,"distances_sum":1591.5316148466427}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9235634157509163,"seconds":5.381181836128235e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.6015625,"distances_sum":1930.9426038060765}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9289980852480857,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.5078125,"distances_sum":2001.3160651938858}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8017578125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8017578125,"f1":0.8810928654678664,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.140625,"distances_sum":1724.3391738589362}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9450606684981689,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.703125,"distances_sum":2047.1128301602635}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9033203125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9450606684981689,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.703125,"distances_sum":2047.1128301602635}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9729166666666669,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.9140625,"distances_sum":2216.102147714613}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9680631868131871,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.8828125,"distances_sum":2167.04365625799}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9726018772893776,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.8125,"distances_sum":2242.449184175654}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9571116383616389,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.84375,"distances_sum":2127.006660647266}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9729166666666669,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.9140625,"distances_sum":2216.102147714613}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9729166666666669,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.9140625,"distances_sum":2216.102147714613}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8519954004329012,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.15625,"distances_sum":1594.793967653662}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6953125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6953125,"f1":0.8094483641358649,"seconds":4.71062958240509e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.65625,"distances_sum":1402.2708648997038}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7587890625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7587890625,"f1":0.8519954004329012,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.15625,"distances_sum":1594.793967653662}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.9016311813186819,"seconds":5.504116415977478e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.3828125,"distances_sum":1816.7994087254062}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.83203125,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.83203125,"f1":0.9016311813186819,"seconds":5.504116415977478e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.3828125,"distances_sum":1816.7994087254062}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9506181318681322,"seconds":5.474314093589783e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.6640625,"distances_sum":2119.065419181209}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9042618839493848,"seconds":5.474314093589783e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.34375,"distances_sum":1828.1376012842707}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9506181318681322,"seconds":5.474314093589783e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.6640625,"distances_sum":2119.065419181209}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9130859375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9506181318681322,"seconds":5.474314093589783e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.6640625,"distances_sum":2119.065419181209}}, n: 9
mean(cfft.distances) = 0.32863136240326624
mean(cdnet.distances) = 0.6292471704779196
mean(crand.distances) = 0.3401332392479361
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.9288888888888889
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9111111111111111
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8955555555555555
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8577777777777778
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8911111111111111
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9333333333333332
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9466666666666667
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8666666666666667
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9044444444444445
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9044444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8733333333333334
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9333333333333332
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9333333333333335
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9266666666666667
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9222222222222222
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9044444444444445
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9044444444444445
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8333333333333334
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9111111111111111
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9066666666666667
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9111111111111111
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8822222222222221
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8888888888888888
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5257430661718051] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 1, 1]]
** centroid: 3, normalized-entropy: 1.0, [(2, 1), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 14, 10]]
** centroid: 11, normalized-entropy: 0.9798687566511527, [(2, 14), (3, 10)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
finished with 15 centroids; started with 12
acc = 0.9666666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.29480110016838834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29480110016838834, 0.23001350606050533] ***
*** finished computation of 7 references, err: [Inf, 0.29480110016838834, 0.23001350606050533] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [21, 30, 0]]
** centroid: 1, normalized-entropy: 0.9774178175281716, [(1, 21), (2, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [130, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [11, 51, 6]]
** centroid: 3, normalized-entropy: 0.659602337249523, [(1, 11), (2, 51), (3, 6)]
*** center 4: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [116, 22, 0]]
** centroid: 5, normalized-entropy: 0.6329208984823799, [(1, 116), (2, 22)]
*** center 6: selecting labels [1, 2, 3] (freq >= 1) [from [14, 166, 13]]
** centroid: 6, normalized-entropy: 0.45661980702116306, [(1, 14), (2, 166), (3, 13)]
*** center 7: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3339155103586826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3339155103586826, 0.2258718395207742] ***
*** finished computation of 7 references, err: [Inf, 0.3339155103586826, 0.2258718395207742] ***
*** center 1: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 86, 24]]
** centroid: 3, normalized-entropy: 0.7568336324184036, [(2, 86), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [157, 48, 0]]
** centroid: 4, normalized-entropy: 0.7851695745756854, [(1, 157), (2, 48)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 54, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [56, 11, 0]]
** centroid: 6, normalized-entropy: 0.6442142137378306, [(1, 56), (2, 11)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [31, 40, 0]]
** centroid: 7, normalized-entropy: 0.9883779727795042, [(1, 31), (2, 40)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2768617839844984] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2768617839844984, 0.215451889122645] ***
*** finished computation of 7 references, err: [Inf, 0.2768617839844984, 0.215451889122645] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 61, 23]]
** centroid: 1, normalized-entropy: 0.8468781063424823, [(2, 61), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [85, 105, 0]]
** centroid: 3, normalized-entropy: 0.9919924034538556, [(1, 85), (2, 105)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [5, 71, 0]]
** centroid: 4, normalized-entropy: 0.35001059292688486, [(1, 5), (2, 71)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [78, 3, 0]]
** centroid: 5, normalized-entropy: 0.22853814395352806, [(1, 78), (2, 3)]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3250733315413286] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3250733315413286, 0.2968710378852782] ***
*** starting iteration: 2; err: [Inf, 0.3250733315413286, 0.2968710378852782] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3250733315413286, 0.2968710378852782, 0.2955379420891404] ***
*** starting iteration: 3; err: [Inf, 0.3250733315413286, 0.2968710378852782, 0.2955379420891404] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3250733315413286, 0.2968710378852782, 0.2955379420891404, 0.2950332617085125] ***
*** finished computation of 3 references, err: [Inf, 0.3250733315413286, 0.2968710378852782, 0.2955379420891404, 0.2950332617085125] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [204, 10, 0]]
** centroid: 1, normalized-entropy: 0.2723359083120876, [(1, 204), (2, 10)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 214, 19]]
** centroid: 2, normalized-entropy: 0.4076000594814323, [(2, 214), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [174, 45, 0]]
** centroid: 3, normalized-entropy: 0.7327525499549903, [(1, 174), (2, 45)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34763697933858034] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34763697933858034, 0.3368021541134059] ***
*** starting iteration: 2; err: [Inf, 0.34763697933858034, 0.3368021541134059] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34763697933858034, 0.3368021541134059, 0.3367403898607364] ***
*** finished computation of 3 references, err: [Inf, 0.34763697933858034, 0.3368021541134059, 0.3367403898607364] ***
*** center 1: selecting labels [1] (freq >= 2) [from [191, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [133, 86, 0]]
** centroid: 2, normalized-entropy: 0.9665161334548785, [(1, 133), (2, 86)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [80, 153, 24]]
** centroid: 3, normalized-entropy: 0.8132655594119351, [(1, 80), (2, 153), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36778068178329154] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36778068178329154, 0.3033185969546683] ***
*** starting iteration: 2; err: [Inf, 0.36778068178329154, 0.3033185969546683] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36778068178329154, 0.3033185969546683, 0.2965710280320678] ***
*** starting iteration: 3; err: [Inf, 0.36778068178329154, 0.3033185969546683, 0.2965710280320678] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36778068178329154, 0.3033185969546683, 0.2965710280320678, 0.2953253907655579] ***
*** finished computation of 3 references, err: [Inf, 0.36778068178329154, 0.3033185969546683, 0.2965710280320678, 0.2953253907655579] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 190, 23]]
** centroid: 1, normalized-entropy: 0.49379651894794435, [(2, 190), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [146, 42, 0]]
** centroid: 2, normalized-entropy: 0.7663350359691776, [(1, 146), (2, 42)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [258, 8, 0]]
** centroid: 3, normalized-entropy: 0.19476878174480033, [(1, 258), (2, 8)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.29760424481626524] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29760424481626524, 0.2393925112627402] ***
*** starting iteration: 2; err: [Inf, 0.29760424481626524, 0.2393925112627402] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29760424481626524, 0.2393925112627402, 0.23392547856367477] ***
*** starting iteration: 3; err: [Inf, 0.29760424481626524, 0.2393925112627402, 0.23392547856367477] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29760424481626524, 0.2393925112627402, 0.23392547856367477, 0.23316960410961696] ***
*** finished computation of 3 references, err: [Inf, 0.29760424481626524, 0.2393925112627402, 0.23392547856367477, 0.23316960410961696] ***
*** center 1: selecting labels [1] (freq >= 1) [from [195, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [14, 229, 19]]
** centroid: 2, normalized-entropy: 0.4227845041593384, [(1, 14), (2, 229), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [169, 40, 0]]
** centroid: 3, normalized-entropy: 0.7043651199890951, [(1, 169), (2, 40)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.40038447867174154] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40038447867174154, 0.25234439622644317] ***
*** starting iteration: 2; err: [Inf, 0.40038447867174154, 0.25234439622644317] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40038447867174154, 0.25234439622644317, 0.23546986839408685] ***
*** starting iteration: 3; err: [Inf, 0.40038447867174154, 0.25234439622644317, 0.23546986839408685] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40038447867174154, 0.25234439622644317, 0.23546986839408685, 0.23302730636439403] ***
*** finished computation of 3 references, err: [Inf, 0.40038447867174154, 0.25234439622644317, 0.23546986839408685, 0.23302730636439403] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [132, 42, 0]]
** centroid: 1, normalized-entropy: 0.7973265101474423, [(1, 132), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [267, 1, 0]]
** centroid: 2, normalized-entropy: 0.03547048239591834, [(1, 267), (2, 1)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [5, 196, 24]]
** centroid: 3, normalized-entropy: 0.4037078284046392, [(1, 5), (2, 196), (3, 24)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28677907531502944] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28677907531502944, 0.23299371446392078] ***
*** starting iteration: 2; err: [Inf, 0.28677907531502944, 0.23299371446392078] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28677907531502944, 0.23299371446392078, 0.23284162376131834] ***
*** finished computation of 3 references, err: [Inf, 0.28677907531502944, 0.23299371446392078, 0.23284162376131834] ***
*** center 1: selecting labels [1] (freq >= 1) [from [193, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [136, 75, 0]]
** centroid: 2, normalized-entropy: 0.938841614312696, [(1, 136), (2, 75)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [75, 165, 23]]
** centroid: 3, normalized-entropy: 0.7858774696820372, [(1, 75), (2, 165), (3, 23)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22489240030721724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22489240030721724, 0.19788970851951893] ***
*** starting iteration: 2; err: [Inf, 0.22489240030721724, 0.19788970851951893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22489240030721724, 0.19788970851951893, 0.19103885457121036] ***
*** starting iteration: 3; err: [Inf, 0.22489240030721724, 0.19788970851951893, 0.19103885457121036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22489240030721724, 0.19788970851951893, 0.19103885457121036, 0.18747508703582771] ***
*** finished computation of 7 references, err: [Inf, 0.22489240030721724, 0.19788970851951893, 0.19103885457121036, 0.18747508703582771] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [40, 50, 0]]
** centroid: 1, normalized-entropy: 0.9910760598382222, [(1, 40), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 74, 0]]
** centroid: 2, normalized-entropy: 0.9669852958320848, [(1, 48), (2, 74)]
*** center 3: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 91, 19]]
** centroid: 6, normalized-entropy: 0.6639057588563916, [(2, 91), (3, 19)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [21, 54, 0]]
** centroid: 7, normalized-entropy: 0.8554508105601307, [(1, 21), (2, 54)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2084473320338847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2084473320338847, 0.19069479935630776] ***
*** starting iteration: 2; err: [Inf, 0.2084473320338847, 0.19069479935630776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2084473320338847, 0.19069479935630776, 0.1851818717686624] ***
*** starting iteration: 3; err: [Inf, 0.2084473320338847, 0.19069479935630776, 0.1851818717686624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2084473320338847, 0.19069479935630776, 0.1851818717686624, 0.18194442773670674] ***
*** finished computation of 7 references, err: [Inf, 0.2084473320338847, 0.19069479935630776, 0.1851818717686624, 0.18194442773670674] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [78, 39, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 78), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [2, 99, 0]]
** centroid: 2, normalized-entropy: 0.1403272709905931, [(1, 2), (2, 99)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 71, 24]]
** centroid: 3, normalized-entropy: 0.8154224977821039, [(2, 71), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [92, 1, 0]]
** centroid: 4, normalized-entropy: 0.0857426825355026, [(1, 92), (2, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [63, 29, 0]]
** centroid: 6, normalized-entropy: 0.8991045208483789, [(1, 63), (2, 29)]
*** center 7: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21356316144833679] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21356316144833679, 0.1951795937081539] ***
*** starting iteration: 2; err: [Inf, 0.21356316144833679, 0.1951795937081539] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21356316144833679, 0.1951795937081539, 0.18648244563428715] ***
*** starting iteration: 3; err: [Inf, 0.21356316144833679, 0.1951795937081539, 0.18648244563428715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21356316144833679, 0.1951795937081539, 0.18648244563428715, 0.18320829754505402] ***
*** finished computation of 7 references, err: [Inf, 0.21356316144833679, 0.1951795937081539, 0.18648244563428715, 0.18320829754505402] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [77, 39, 0]]
** centroid: 1, normalized-entropy: 0.9211426316005454, [(1, 77), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [40, 64, 0]]
** centroid: 2, normalized-entropy: 0.961236604722876, [(1, 40), (2, 64)]
*** center 3: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [3, 60, 0]]
** centroid: 4, normalized-entropy: 0.2761954276479391, [(1, 3), (2, 60)]
*** center 5: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [96, 3, 0]]
** centroid: 6, normalized-entropy: 0.19590927087360496, [(1, 96), (2, 3)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 74, 23]]
** centroid: 7, normalized-entropy: 0.790206924188637, [(2, 74), (3, 23)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3250152064856511] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3250152064856511, 0.29496802988828524] ***
*** finished computation of 3 references, err: [Inf, 0.3250152064856511, 0.29496802988828524] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [1, 199, 19]]
** centroid: 1, normalized-entropy: 0.29466275925965774, [(1, 1), (2, 199), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [229, 9, 0]]
** centroid: 2, normalized-entropy: 0.2321833410928974, [(1, 229), (2, 9)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [148, 61, 0]]
** centroid: 3, normalized-entropy: 0.8711195354090138, [(1, 148), (2, 61)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3753701559892078] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3753701559892078, 0.33658990340455364] ***
*** finished computation of 3 references, err: [Inf, 0.3753701559892078, 0.33658990340455364] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [140, 105, 0]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(1, 140), (2, 105)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [59, 131, 24]]
** centroid: 2, normalized-entropy: 0.8201511351899264, [(1, 59), (2, 131), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [205, 3, 0]]
** centroid: 3, normalized-entropy: 0.108861314771958, [(1, 205), (2, 3)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34075542527350083] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34075542527350083, 0.3007932578742705] ***
*** finished computation of 3 references, err: [Inf, 0.34075542527350083, 0.3007932578742705] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [129, 109, 0]]
** centroid: 1, normalized-entropy: 0.9949000853655704, [(1, 129), (2, 109)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [78, 131, 23]]
** centroid: 2, normalized-entropy: 0.8359000103281328, [(1, 78), (2, 131), (3, 23)]
*** center 3: selecting labels [1] (freq >= 1) [from [197, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2682883959115335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2682883959115335, 0.20315443437445807] ***
*** finished computation of 7 references, err: [Inf, 0.2682883959115335, 0.20315443437445807] ***
*** center 1: selecting labels [1] (freq >= 1) [from [219, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [107, 24, 0]]
** centroid: 2, normalized-entropy: 0.6870408064059199, [(1, 107), (2, 24)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 69, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [29, 87, 0]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(1, 29), (2, 87)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 77, 0]]
** centroid: 5, normalized-entropy: 0.7780113035465377, [(1, 23), (2, 77)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 12, 19]]
** centroid: 6, normalized-entropy: 0.9629004147713269, [(2, 12), (3, 19)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17891522942633106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17891522942633106, 0.14780121032048066] ***
*** finished computation of 7 references, err: [Inf, 0.17891522942633106, 0.14780121032048066] ***
*** center 1: selecting labels [1] (freq >= 1) [from [130, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [88, 42, 0]]
** centroid: 2, normalized-entropy: 0.9076961653608385, [(1, 88), (2, 42)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [38, 52, 0]]
** centroid: 3, normalized-entropy: 0.9824740868386409, [(1, 38), (2, 52)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [68, 4, 0]]
** centroid: 4, normalized-entropy: 0.3095434291503252, [(1, 68), (2, 4)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 58, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 83, 24]]
** centroid: 7, normalized-entropy: 0.7679401376244881, [(2, 83), (3, 24)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2789162259962203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2789162259962203, 0.21313998193341843] ***
*** finished computation of 7 references, err: [Inf, 0.2789162259962203, 0.21313998193341843] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [98, 85, 0]]
** centroid: 1, normalized-entropy: 0.9963567000600257, [(1, 98), (2, 85)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [89, 155, 23]]
** centroid: 2, normalized-entropy: 0.8129407720098263, [(1, 89), (2, 155), (3, 23)]
*** center 3: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2761579470432087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2761579470432087, 0.16961022876007287] ***
*** starting iteration: 2; err: [Inf, 0.2761579470432087, 0.16961022876007287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2761579470432087, 0.16961022876007287, 0.1555825031695289] ***
*** starting iteration: 3; err: [Inf, 0.2761579470432087, 0.16961022876007287, 0.1555825031695289] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2761579470432087, 0.16961022876007287, 0.1555825031695289, 0.15155033621791605] ***
*** finished computation of 7 references, err: [Inf, 0.2761579470432087, 0.16961022876007287, 0.1555825031695289, 0.15155033621791605] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [20, 74, 0]]
** centroid: 1, normalized-entropy: 0.7467366074830678, [(1, 20), (2, 74)]
*** center 2: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [105, 5, 0]]
** centroid: 3, normalized-entropy: 0.2667649878030262, [(1, 105), (2, 5)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 55, 14]]
** centroid: 4, normalized-entropy: 0.7276874545656657, [(2, 55), (3, 14)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 92, 5]]
** centroid: 5, normalized-entropy: 0.29292995113885967, [(2, 92), (3, 5)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [73, 17, 0]]
** centroid: 6, normalized-entropy: 0.6991413063352633, [(1, 73), (2, 17)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [69, 26, 0]]
** centroid: 7, normalized-entropy: 0.846701711600821, [(1, 69), (2, 26)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18295975544977225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18295975544977225, 0.1520856126048218] ***
*** starting iteration: 2; err: [Inf, 0.18295975544977225, 0.1520856126048218] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18295975544977225, 0.1520856126048218, 0.14690016791422753] ***
*** starting iteration: 3; err: [Inf, 0.18295975544977225, 0.1520856126048218, 0.14690016791422753] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18295975544977225, 0.1520856126048218, 0.14690016791422753, 0.14439951326848863] ***
*** finished computation of 7 references, err: [Inf, 0.18295975544977225, 0.1520856126048218, 0.14690016791422753, 0.14439951326848863] ***
*** center 1: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 96, 24]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(2, 96), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 70, 0]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(1, 20), (2, 70)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [97, 36, 0]]
** centroid: 6, normalized-entropy: 0.842433971260027, [(1, 97), (2, 36)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [67, 37, 0]]
** centroid: 7, normalized-entropy: 0.9391151961320356, [(1, 67), (2, 37)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2157693736763417] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2157693736763417, 0.16502061200284887] ***
*** starting iteration: 2; err: [Inf, 0.2157693736763417, 0.16502061200284887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2157693736763417, 0.16502061200284887, 0.15569592367947058] ***
*** starting iteration: 3; err: [Inf, 0.2157693736763417, 0.16502061200284887, 0.15569592367947058] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2157693736763417, 0.16502061200284887, 0.15569592367947058, 0.15002584913424377] ***
*** finished computation of 7 references, err: [Inf, 0.2157693736763417, 0.16502061200284887, 0.15569592367947058, 0.15002584913424377] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [53, 34, 0]]
** centroid: 1, normalized-entropy: 0.9653168212008997, [(1, 53), (2, 34)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 104, 23]]
** centroid: 2, normalized-entropy: 0.6824826735754346, [(2, 104), (3, 23)]
*** center 3: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 70, 0]]
** centroid: 5, normalized-entropy: 0.9357110512652843, [(1, 38), (2, 70)]
*** center 6: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [46, 32, 0]]
** centroid: 7, normalized-entropy: 0.9766349114440099, [(1, 46), (2, 32)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26617480687204154] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26617480687204154, 0.23475346873953445] ***
*** starting iteration: 2; err: [Inf, 0.26617480687204154, 0.23475346873953445] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26617480687204154, 0.23475346873953445, 0.23311853348123687] ***
*** starting iteration: 3; err: [Inf, 0.26617480687204154, 0.23475346873953445, 0.23311853348123687] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26617480687204154, 0.23475346873953445, 0.23311853348123687, 0.2326984016323328] ***
*** finished computation of 3 references, err: [Inf, 0.26617480687204154, 0.23475346873953445, 0.23311853348123687, 0.2326984016323328] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [147, 74, 0]]
** centroid: 1, normalized-entropy: 0.9197967505792691, [(1, 147), (2, 74)]
*** center 2: selecting labels [1] (freq >= 1) [from [177, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [54, 195, 19]]
** centroid: 3, normalized-entropy: 0.6752077068040152, [(1, 54), (2, 195), (3, 19)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27411537030446476] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27411537030446476, 0.23107808281289138] ***
*** starting iteration: 2; err: [Inf, 0.27411537030446476, 0.23107808281289138] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27411537030446476, 0.23107808281289138, 0.2300124019593827] ***
*** starting iteration: 3; err: [Inf, 0.27411537030446476, 0.23107808281289138, 0.2300124019593827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27411537030446476, 0.23107808281289138, 0.2300124019593827, 0.2296680375414229] ***
*** finished computation of 3 references, err: [Inf, 0.27411537030446476, 0.23107808281289138, 0.2300124019593827, 0.2296680375414229] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 172, 24]]
** centroid: 1, normalized-entropy: 0.5363596511250623, [(2, 172), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [186, 43, 0]]
** centroid: 2, normalized-entropy: 0.6967892757900267, [(1, 186), (2, 43)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [218, 24, 0]]
** centroid: 3, normalized-entropy: 0.46637033306518266, [(1, 218), (2, 24)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27968926307070874] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27968926307070874, 0.23528802732349202] ***
*** starting iteration: 2; err: [Inf, 0.27968926307070874, 0.23528802732349202] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27968926307070874, 0.23528802732349202, 0.23429948497197775] ***
*** finished computation of 3 references, err: [Inf, 0.27968926307070874, 0.23528802732349202, 0.23429948497197775] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [109, 114, 5]]
** centroid: 1, normalized-entropy: 0.7128613221173048, [(1, 109), (2, 114), (3, 5)]
*** center 2: selecting labels [1] (freq >= 1) [from [200, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [95, 126, 18]]
** centroid: 3, normalized-entropy: 0.8182946761717584, [(1, 95), (2, 126), (3, 18)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30789814714213704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30789814714213704, 0.2958827842608676] ***
*** starting iteration: 2; err: [Inf, 0.30789814714213704, 0.2958827842608676] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30789814714213704, 0.2958827842608676, 0.2952789721168667] ***
*** finished computation of 3 references, err: [Inf, 0.30789814714213704, 0.2958827842608676, 0.2952789721168667] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 219, 19]]
** centroid: 1, normalized-entropy: 0.4015867178958213, [(2, 219), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [163, 39, 0]]
** centroid: 2, normalized-entropy: 0.707848236834501, [(1, 163), (2, 39)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [215, 11, 0]]
** centroid: 3, normalized-entropy: 0.28073112849154064, [(1, 215), (2, 11)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31887078357893955] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31887078357893955, 0.29902780441863314] ***
*** starting iteration: 2; err: [Inf, 0.31887078357893955, 0.29902780441863314] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31887078357893955, 0.29902780441863314, 0.2961950101729097] ***
*** starting iteration: 3; err: [Inf, 0.31887078357893955, 0.29902780441863314, 0.2961950101729097] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31887078357893955, 0.29902780441863314, 0.2961950101729097, 0.29564012867584266] ***
*** finished computation of 3 references, err: [Inf, 0.31887078357893955, 0.29902780441863314, 0.2961950101729097, 0.29564012867584266] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [96, 157, 24]]
** centroid: 1, normalized-entropy: 0.8201075995330004, [(1, 96), (2, 157), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [203, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [105, 82, 0]]
** centroid: 3, normalized-entropy: 0.9890600014190497, [(1, 105), (2, 82)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38121628912928135] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38121628912928135, 0.32466559062643474] ***
*** starting iteration: 2; err: [Inf, 0.38121628912928135, 0.32466559062643474] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38121628912928135, 0.32466559062643474, 0.2988149625133315] ***
*** starting iteration: 3; err: [Inf, 0.38121628912928135, 0.32466559062643474, 0.2988149625133315] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38121628912928135, 0.32466559062643474, 0.2988149625133315, 0.29771251825411904] ***
*** finished computation of 3 references, err: [Inf, 0.38121628912928135, 0.32466559062643474, 0.2988149625133315, 0.29771251825411904] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [207, 25, 0]]
** centroid: 1, normalized-entropy: 0.49311804277098414, [(1, 207), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [197, 27, 0]]
** centroid: 2, normalized-entropy: 0.530898801560641, [(1, 197), (2, 27)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 188, 23]]
** centroid: 3, normalized-entropy: 0.49690663370857324, [(2, 188), (3, 23)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18248279827895822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18248279827895822, 0.15881892817210988] ***
*** starting iteration: 2; err: [Inf, 0.18248279827895822, 0.15881892817210988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18248279827895822, 0.15881892817210988, 0.15469638841483999] ***
*** starting iteration: 3; err: [Inf, 0.18248279827895822, 0.15881892817210988, 0.15469638841483999] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18248279827895822, 0.15881892817210988, 0.15469638841483999, 0.15278060735530546] ***
*** starting iteration: 4; err: [Inf, 0.18248279827895822, 0.15881892817210988, 0.15469638841483999, 0.15278060735530546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18248279827895822, 0.15881892817210988, 0.15469638841483999, 0.15278060735530546, 0.150696314885295] ***
*** starting iteration: 5; err: [Inf, 0.18248279827895822, 0.15881892817210988, 0.15469638841483999, 0.15278060735530546, 0.150696314885295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18248279827895822, 0.15881892817210988, 0.15469638841483999, 0.15278060735530546, 0.150696314885295, 0.14874393408894315] ***
*** starting iteration: 6; err: [Inf, 0.18248279827895822, 0.15881892817210988, 0.15469638841483999, 0.15278060735530546, 0.150696314885295, 0.14874393408894315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18248279827895822, 0.15881892817210988, 0.15469638841483999, 0.15278060735530546, 0.150696314885295, 0.14874393408894315, 0.14657680057730335] ***
*** starting iteration: 7; err: [Inf, 0.18248279827895822, 0.15881892817210988, 0.15469638841483999, 0.15278060735530546, 0.150696314885295, 0.14874393408894315, 0.14657680057730335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18248279827895822, 0.15881892817210988, 0.15469638841483999, 0.15278060735530546, 0.150696314885295, 0.14874393408894315, 0.14657680057730335, 0.14492652727732877] ***
*** starting iteration: 8; err: [Inf, 0.18248279827895822, 0.15881892817210988, 0.15469638841483999, 0.15278060735530546, 0.150696314885295, 0.14874393408894315, 0.14657680057730335, 0.14492652727732877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18248279827895822, 0.15881892817210988, 0.15469638841483999, 0.15278060735530546, 0.150696314885295, 0.14874393408894315, 0.14657680057730335, 0.14492652727732877, 0.14418563392158742] ***
*** finished computation of 7 references, err: [Inf, 0.18248279827895822, 0.15881892817210988, 0.15469638841483999, 0.15278060735530546, 0.150696314885295, 0.14874393408894315, 0.14657680057730335, 0.14492652727732877, 0.14418563392158742] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [38, 57, 0]]
** centroid: 1, normalized-entropy: 0.9709505944546688, [(1, 38), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [94, 3, 0]]
** centroid: 2, normalized-entropy: 0.19902377455969078, [(1, 94), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 90, 19]]
** centroid: 4, normalized-entropy: 0.6674742199595056, [(2, 90), (3, 19)]
*** center 5: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [62, 44, 0]]
** centroid: 7, normalized-entropy: 0.9790981671667148, [(1, 62), (2, 44)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1957405071120536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1957405071120536, 0.16166232013795664] ***
*** starting iteration: 2; err: [Inf, 0.1957405071120536, 0.16166232013795664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1957405071120536, 0.16166232013795664, 0.15600130019634068] ***
*** starting iteration: 3; err: [Inf, 0.1957405071120536, 0.16166232013795664, 0.15600130019634068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1957405071120536, 0.16166232013795664, 0.15600130019634068, 0.15284707917757834] ***
*** starting iteration: 4; err: [Inf, 0.1957405071120536, 0.16166232013795664, 0.15600130019634068, 0.15284707917757834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1957405071120536, 0.16166232013795664, 0.15600130019634068, 0.15284707917757834, 0.15097058464310828] ***
*** starting iteration: 5; err: [Inf, 0.1957405071120536, 0.16166232013795664, 0.15600130019634068, 0.15284707917757834, 0.15097058464310828] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1957405071120536, 0.16166232013795664, 0.15600130019634068, 0.15284707917757834, 0.15097058464310828, 0.15029749708638332] ***
*** finished computation of 7 references, err: [Inf, 0.1957405071120536, 0.16166232013795664, 0.15600130019634068, 0.15284707917757834, 0.15097058464310828, 0.15029749708638332] ***
*** center 1: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [104, 26, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 104), (2, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 40, 0]]
** centroid: 3, normalized-entropy: 0.9876925088958032, [(1, 52), (2, 40)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 53, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [52, 36, 0]]
** centroid: 6, normalized-entropy: 0.976020648236615, [(1, 52), (2, 36)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 84, 24]]
** centroid: 7, normalized-entropy: 0.7642045065086204, [(2, 84), (3, 24)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20196553323811656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20196553323811656, 0.14959006476763362] ***
*** starting iteration: 2; err: [Inf, 0.20196553323811656, 0.14959006476763362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20196553323811656, 0.14959006476763362, 0.14661041455346158] ***
*** starting iteration: 3; err: [Inf, 0.20196553323811656, 0.14959006476763362, 0.14661041455346158] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20196553323811656, 0.14959006476763362, 0.14661041455346158, 0.14611082080740487] ***
*** finished computation of 7 references, err: [Inf, 0.20196553323811656, 0.14959006476763362, 0.14661041455346158, 0.14611082080740487] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 78, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 38, 0]]
** centroid: 3, normalized-entropy: 0.9918977415529348, [(1, 47), (2, 38)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [16, 79, 0]]
** centroid: 4, normalized-entropy: 0.6540800387941991, [(1, 16), (2, 79)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [100, 10, 0]]
** centroid: 5, normalized-entropy: 0.43949698692151346, [(1, 100), (2, 10)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 35, 23]]
** centroid: 6, normalized-entropy: 0.9688977092243805, [(2, 35), (3, 23)]
*** center 7: selecting labels [1] (freq >= 2) [from [132, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5009332549542904] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5009332549542904, 0.29524081650710254] ***
*** starting iteration: 2; err: [Inf, 0.5009332549542904, 0.29524081650710254] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5009332549542904, 0.29524081650710254, 0.29240066751798577] ***
*** starting iteration: 3; err: [Inf, 0.5009332549542904, 0.29524081650710254, 0.29240066751798577] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5009332549542904, 0.29524081650710254, 0.29240066751798577, 0.29221239219721706] ***
*** finished computation of 3 references, err: [Inf, 0.5009332549542904, 0.29524081650710254, 0.29240066751798577, 0.29221239219721706] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [74, 166, 19]]
** centroid: 1, normalized-entropy: 0.7597627569007853, [(1, 74), (2, 166), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [113, 103, 0]]
** centroid: 2, normalized-entropy: 0.9984533491413032, [(1, 113), (2, 103)]
*** center 3: selecting labels [1] (freq >= 1) [from [191, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4915972700512883] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4915972700512883, 0.2922339176220157] ***
*** starting iteration: 2; err: [Inf, 0.4915972700512883, 0.2922339176220157] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4915972700512883, 0.2922339176220157, 0.2912046482735572] ***
*** starting iteration: 3; err: [Inf, 0.4915972700512883, 0.2922339176220157, 0.2912046482735572] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4915972700512883, 0.2922339176220157, 0.2912046482735572, 0.2908916858107276] ***
*** finished computation of 3 references, err: [Inf, 0.4915972700512883, 0.2922339176220157, 0.2912046482735572, 0.2908916858107276] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [219, 25, 0]]
** centroid: 1, normalized-entropy: 0.4767423752799965, [(1, 219), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [185, 41, 0]]
** centroid: 2, normalized-entropy: 0.6831647925706782, [(1, 185), (2, 41)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 173, 24]]
** centroid: 3, normalized-entropy: 0.5345909900225635, [(2, 173), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4235311923283285] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4235311923283285, 0.300857908585328] ***
*** starting iteration: 2; err: [Inf, 0.4235311923283285, 0.300857908585328] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4235311923283285, 0.300857908585328, 0.2970276110787419] ***
*** starting iteration: 3; err: [Inf, 0.4235311923283285, 0.300857908585328, 0.2970276110787419] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4235311923283285, 0.300857908585328, 0.2970276110787419, 0.295788343714458] ***
*** starting iteration: 4; err: [Inf, 0.4235311923283285, 0.300857908585328, 0.2970276110787419, 0.295788343714458] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4235311923283285, 0.300857908585328, 0.2970276110787419, 0.295788343714458, 0.29511432233633056] ***
*** finished computation of 3 references, err: [Inf, 0.4235311923283285, 0.300857908585328, 0.2970276110787419, 0.295788343714458, 0.29511432233633056] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [88, 153, 23]]
** centroid: 1, normalized-entropy: 0.8146349891993144, [(1, 88), (2, 153), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [188, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [128, 87, 0]]
** centroid: 3, normalized-entropy: 0.9736064117343936, [(1, 128), (2, 87)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.21576712968935435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21576712968935435, 0.18789236875832663] ***
*** finished computation of 7 references, err: [Inf, 0.21576712968935435, 0.18789236875832663] ***
*** center 1: selecting labels [1] (freq >= 1) [from [119, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 50, 19]]
** centroid: 2, normalized-entropy: 0.849054424254048, [(2, 50), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [65, 1, 0]]
** centroid: 3, normalized-entropy: 0.11327430349709665, [(1, 65), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [20, 91, 0]]
** centroid: 4, normalized-entropy: 0.680471054135434, [(1, 20), (2, 91)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [72, 18, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 72), (2, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [8, 109, 0]]
** centroid: 6, normalized-entropy: 0.35983402385105434, [(1, 8), (2, 109)]
*** center 7: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22168216941950805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22168216941950805, 0.18469992860302753] ***
*** finished computation of 7 references, err: [Inf, 0.22168216941950805, 0.18469992860302753] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [19, 69, 0]]
** centroid: 1, normalized-entropy: 0.7526269564427315, [(1, 19), (2, 69)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [73, 14, 0]]
** centroid: 2, normalized-entropy: 0.6365048555378351, [(1, 73), (2, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 82, 24]]
** centroid: 4, normalized-entropy: 0.7717094696953635, [(2, 82), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [48, 74, 0]]
** centroid: 5, normalized-entropy: 0.9669852958320848, [(1, 48), (2, 74)]
*** center 6: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22914013219194423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22914013219194423, 0.18463860474096827] ***
*** finished computation of 7 references, err: [Inf, 0.22914013219194423, 0.18463860474096827] ***
*** center 1: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 58, 23]]
** centroid: 2, normalized-entropy: 0.8607781176165941, [(2, 58), (3, 23)]
*** center 3: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [83, 28, 0]]
** centroid: 4, normalized-entropy: 0.8148283832923793, [(1, 83), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [34, 83, 0]]
** centroid: 5, normalized-entropy: 0.8694928443329235, [(1, 34), (2, 83)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [5, 71, 0]]
** centroid: 6, normalized-entropy: 0.35001059292688486, [(1, 5), (2, 71)]
*** center 7: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19447238087463933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19447238087463933, 0.15565835954915094] ***
*** finished computation of 7 references, err: [Inf, 0.19447238087463933, 0.15565835954915094] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 109, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 5, 0]]
** centroid: 3, normalized-entropy: 0.35678001438394347, [(1, 69), (2, 5)]
*** center 4: selecting labels [1] (freq >= 2) [from [123, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [95, 18, 0]]
** centroid: 5, normalized-entropy: 0.6326131852700402, [(1, 95), (2, 18)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 101, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 35, 19]]
** centroid: 7, normalized-entropy: 0.9357110512652843, [(2, 35), (3, 19)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17927370616898075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17927370616898075, 0.15201969205184018] ***
*** finished computation of 7 references, err: [Inf, 0.17927370616898075, 0.15201969205184018] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [90, 74, 0]]
** centroid: 1, normalized-entropy: 0.9931231770192241, [(1, 90), (2, 74)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 6, 0]]
** centroid: 2, normalized-entropy: 0.4637773498877517, [(1, 55), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 56, 24]]
** centroid: 4, normalized-entropy: 0.8812908992306927, [(2, 56), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [3, 103, 0]]
** centroid: 5, normalized-entropy: 0.1858030790723033, [(1, 3), (2, 103)]
*** center 6: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19531031722842396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19531031722842396, 0.1507512029076087] ***
*** finished computation of 7 references, err: [Inf, 0.19531031722842396, 0.1507512029076087] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [29, 75, 0]]
** centroid: 1, normalized-entropy: 0.8538738465459897, [(1, 29), (2, 75)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 25, 0]]
** centroid: 2, normalized-entropy: 0.8566727035015875, [(1, 64), (2, 25)]
*** center 3: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 87, 23]]
** centroid: 4, normalized-entropy: 0.73974144872329, [(2, 87), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 53, 0]]
** centroid: 5, normalized-entropy: 0.9985358500505679, [(1, 58), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22772774110162244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22772774110162244, 0.18574801845722147] ***
*** starting iteration: 2; err: [Inf, 0.22772774110162244, 0.18574801845722147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22772774110162244, 0.18574801845722147, 0.18147319621286234] ***
*** starting iteration: 3; err: [Inf, 0.22772774110162244, 0.18574801845722147, 0.18147319621286234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22772774110162244, 0.18574801845722147, 0.18147319621286234, 0.1805871595711064] ***
*** finished computation of 7 references, err: [Inf, 0.22772774110162244, 0.18574801845722147, 0.18147319621286234, 0.1805871595711064] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [93, 7, 0]]
** centroid: 1, normalized-entropy: 0.36592365090022316, [(1, 93), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [72, 15, 0]]
** centroid: 2, normalized-entropy: 0.6631968402398286, [(1, 72), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 60, 19]]
** centroid: 3, normalized-entropy: 0.7958812735955936, [(2, 60), (3, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [26, 80, 0]]
** centroid: 5, normalized-entropy: 0.8037159237834126, [(1, 26), (2, 80)]
*** center 6: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 107, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23194161394605417] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23194161394605417, 0.19565925648438742] ***
*** starting iteration: 2; err: [Inf, 0.23194161394605417, 0.19565925648438742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23194161394605417, 0.19565925648438742, 0.19056109020994721] ***
*** starting iteration: 3; err: [Inf, 0.23194161394605417, 0.19565925648438742, 0.19056109020994721] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23194161394605417, 0.19565925648438742, 0.19056109020994721, 0.1880380393461795] ***
*** finished computation of 7 references, err: [Inf, 0.23194161394605417, 0.19565925648438742, 0.19056109020994721, 0.1880380393461795] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 100, 24]]
** centroid: 1, normalized-entropy: 0.708835673332196, [(2, 100), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [68, 34, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 68), (2, 34)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [69, 4, 0]]
** centroid: 4, normalized-entropy: 0.306424729870515, [(1, 69), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [77, 17, 0]]
** centroid: 5, normalized-entropy: 0.6819353204567525, [(1, 77), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 84, 0]]
** centroid: 6, normalized-entropy: 0.15935006268563429, [(1, 2), (2, 84)]
*** center 7: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23433262072894526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23433262072894526, 0.19642467625338633] ***
*** starting iteration: 2; err: [Inf, 0.23433262072894526, 0.19642467625338633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23433262072894526, 0.19642467625338633, 0.19030569751315501] ***
*** starting iteration: 3; err: [Inf, 0.23433262072894526, 0.19642467625338633, 0.19030569751315501] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23433262072894526, 0.19642467625338633, 0.19030569751315501, 0.1888899517188343] ***
*** finished computation of 7 references, err: [Inf, 0.23433262072894526, 0.19642467625338633, 0.19030569751315501, 0.1888899517188343] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [83, 9, 0]]
** centroid: 1, normalized-entropy: 0.4620663276355394, [(1, 83), (2, 9)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 70, 23]]
** centroid: 2, normalized-entropy: 0.8069896049203007, [(2, 70), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [72, 22, 0]]
** centroid: 3, normalized-entropy: 0.7849920887641585, [(1, 72), (2, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [53, 40, 0]]
** centroid: 5, normalized-entropy: 0.9858587262978805, [(1, 53), (2, 40)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 99, 0]]
** centroid: 6, normalized-entropy: 0.1914332548141934, [(1, 3), (2, 99)]
*** center 7: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9420048791306277, 0.9390078701455947, 0.9380158601715488, 0.9209988431545318, 0.9160268052483621, 0.9080158002313691, 0.896998795202388, 0.8850227472981964, 0.882993772215329, 0.8770327213440986, 0.8769697841554129, 0.8749827671983361, 0.8730137322951693, 0.8670466874059688, 0.8619847392302482, 0.8130256004507502]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 1) => 0.9420048791306277
finished with 18
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.3024410291437854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3024410291437854, 0.26977221547086183] ***
*** finished computation of 3 references, err: [Inf, 0.3024410291437854, 0.26977221547086183] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [22, 179, 19]]
** centroid: 1, normalized-entropy: 0.5548682880843676, [(1, 22), (2, 179), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [261, 83, 0]]
** centroid: 2, normalized-entropy: 0.7971608654389162, [(1, 261), (2, 83)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [95, 7, 0]]
** centroid: 3, normalized-entropy: 0.3607805650514635, [(1, 95), (2, 7)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27484322733886685] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27484322733886685, 0.2322404312138827] ***
*** finished computation of 3 references, err: [Inf, 0.27484322733886685, 0.2322404312138827] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [162, 75, 0]]
** centroid: 1, normalized-entropy: 0.9004854334784268, [(1, 162), (2, 75)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [49, 164, 24]]
** centroid: 2, normalized-entropy: 0.7396353265320161, [(1, 49), (2, 164), (3, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [193, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3786421580955029] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3786421580955029, 0.24049487529040456] ***
*** finished computation of 3 references, err: [Inf, 0.3786421580955029, 0.24049487529040456] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [88, 190, 23]]
** centroid: 1, normalized-entropy: 0.7704785233270435, [(1, 88), (2, 190), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [150, 50, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 150), (2, 50)]
*** center 3: selecting labels [1] (freq >= 1) [from [166, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.33105987369561113] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33105987369561113, 0.29563882696098304] ***
*** finished computation of 3 references, err: [Inf, 0.33105987369561113, 0.29563882696098304] ***
*** center 1: selecting labels [1] (freq >= 1) [from [174, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [127, 83, 0]]
** centroid: 2, normalized-entropy: 0.9680968128001235, [(1, 127), (2, 83)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [77, 186, 19]]
** centroid: 3, normalized-entropy: 0.7379120732745799, [(1, 77), (2, 186), (3, 19)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4396823852935965] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4396823852935965, 0.29900411203520366] ***
*** finished computation of 3 references, err: [Inf, 0.4396823852935965, 0.29900411203520366] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [171, 14, 0]]
** centroid: 1, normalized-entropy: 0.3867557904930961, [(1, 171), (2, 14)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [11, 219, 24]]
** centroid: 2, normalized-entropy: 0.4430286801266354, [(1, 11), (2, 219), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [222, 6, 0]]
** centroid: 3, normalized-entropy: 0.17556502585750275, [(1, 222), (2, 6)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4052549352369521] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4052549352369521, 0.33573948463489267] ***
*** finished computation of 3 references, err: [Inf, 0.4052549352369521, 0.33573948463489267] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [280, 6, 0]]
** centroid: 1, normalized-entropy: 0.14690273625769862, [(1, 280), (2, 6)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [82, 149, 2]]
** centroid: 2, normalized-entropy: 0.6319587316990913, [(1, 82), (2, 149), (3, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [42, 85, 21]]
** centroid: 3, normalized-entropy: 0.8674639152462367, [(1, 42), (2, 85), (3, 21)]
finished with 7 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 18)
[0.9420048791306277, 0.9390078701455947, 0.9380158601715488, 0.9209988431545318, 0.9160268052483621, 0.9080158002313691, 0.896998795202388, 0.8850227472981964, 0.882993772215329, 0.8770327213440986, 0.8769697841554129, 0.8749827671983361, 0.8730137322951693, 0.8670466874059688, 0.8619847392302482, 0.859038679397961, 0.858951766137395, 0.8130256004507502]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 1) => 0.9420048791306277
finished with 20
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.24022287312984555] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24022287312984555, 0.1675607086276054] ***
*** finished computation of 7 references, err: [Inf, 0.24022287312984555, 0.1675607086276054] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [87, 87, 0]]
** centroid: 1, normalized-entropy: 1.0, [(1, 87), (2, 87)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [82, 13, 0]]
** centroid: 2, normalized-entropy: 0.5759084429149787, [(1, 82), (2, 13)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 77, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [43, 15, 0]]
** centroid: 4, normalized-entropy: 0.8246578332945033, [(1, 43), (2, 15)]
*** center 5: selecting labels [1] (freq >= 2) [from [166, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 67, 5]]
** centroid: 6, normalized-entropy: 0.3638469981769295, [(2, 67), (3, 5)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 10, 14]]
** centroid: 7, normalized-entropy: 0.9798687566511527, [(2, 10), (3, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23520752231449424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23520752231449424, 0.18491403791268748] ***
*** finished computation of 7 references, err: [Inf, 0.23520752231449424, 0.18491403791268748] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [141, 15, 0]]
** centroid: 1, normalized-entropy: 0.45668363153944286, [(1, 141), (2, 15)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 8, 15]]
** centroid: 2, normalized-entropy: 0.9321115676166747, [(2, 8), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 30, 0]]
** centroid: 3, normalized-entropy: 0.8776296673746861, [(1, 71), (2, 30)]
*** center 4: selecting labels [1] (freq >= 2) [from [187, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 107, 0]]
** centroid: 5, normalized-entropy: 0.2631887790276081, [(1, 5), (2, 107)]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 1, 9]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 78, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.189904586047582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.189904586047582, 0.1640396319117503] ***
*** finished computation of 7 references, err: [Inf, 0.189904586047582, 0.1640396319117503] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [52, 26, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 52), (2, 26)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [2, 118, 23]]
** centroid: 2, normalized-entropy: 0.4662164804795789, [(1, 2), (2, 118), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 81, 0]]
** centroid: 3, normalized-entropy: 0.9913193665477971, [(1, 65), (2, 81)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 15, 0]]
** centroid: 4, normalized-entropy: 0.743898745288434, [(1, 56), (2, 15)]
*** center 5: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2961498827955968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2961498827955968, 0.23164042507440927] ***
*** finished computation of 7 references, err: [Inf, 0.2961498827955968, 0.23164042507440927] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [43, 19, 0]]
** centroid: 1, normalized-entropy: 0.8890349038123858, [(1, 43), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [168, 4, 0]]
** centroid: 2, normalized-entropy: 0.15935006268563429, [(1, 168), (2, 4)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [38, 3, 0]]
** centroid: 3, normalized-entropy: 0.3776463213737003, [(1, 38), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 29, 0]]
** centroid: 4, normalized-entropy: 0.9221231306777973, [(1, 57), (2, 29)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 134, 19]]
** centroid: 5, normalized-entropy: 0.5412664421908896, [(2, 134), (3, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 80, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28693939619620834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28693939619620834, 0.22854417519898027] ***
*** finished computation of 7 references, err: [Inf, 0.28693939619620834, 0.22854417519898027] ***
*** center 1: selecting labels [1] (freq >= 2) [from [185, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 4, 0]]
** centroid: 2, normalized-entropy: 0.3451173149449528, [(1, 58), (2, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [105, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [23, 91, 0]]
** centroid: 4, normalized-entropy: 0.7254230207665605, [(1, 23), (2, 91)]
*** center 5: selecting labels [2] (freq >= 2) [from [1, 69, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 60, 24]]
** centroid: 6, normalized-entropy: 0.8631205685666311, [(2, 60), (3, 24)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [32, 14, 0]]
** centroid: 7, normalized-entropy: 0.8865408928220899, [(1, 32), (2, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29912235852082386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29912235852082386, 0.24413485226055226] ***
*** finished computation of 7 references, err: [Inf, 0.29912235852082386, 0.24413485226055226] ***
*** center 1: selecting labels [1] (freq >= 2) [from [132, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 129, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 43), (2, 129)]
*** center 3: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 6: selecting labels [1, 2, 3] (freq >= 2) [from [35, 111, 23]]
** centroid: 6, normalized-entropy: 0.7952015846697762, [(1, 35), (2, 111), (3, 23)]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 20)
[0.9489998981016945, 0.9420048791306277, 0.9390078701455947, 0.9380158601715488, 0.9209988431545318, 0.9160268052483621, 0.9080158002313691, 0.897993802185419, 0.896998795202388, 0.8850227472981964, 0.882993772215329, 0.8770327213440986, 0.8769697841554129, 0.8749827671983361, 0.8730137322951693, 0.8670466874059688, 0.8619847392302482, 0.859038679397961, 0.858951766137395, 0.8130256004507502]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 2) => 0.9489998981016945
finished with 21
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.20491094652153607] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20491094652153607, 0.167959184601187] ***
*** finished computation of 7 references, err: [Inf, 0.20491094652153607, 0.167959184601187] ***
*** center 1: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [38, 108, 0]]
** centroid: 4, normalized-entropy: 0.8271595195340525, [(1, 38), (2, 108)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 38, 0]]
** centroid: 5, normalized-entropy: 0.9328330312384981, [(1, 71), (2, 38)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 82, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 41, 19]]
** centroid: 7, normalized-entropy: 0.9007196798623592, [(2, 41), (3, 19)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22675440990683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22675440990683, 0.15449408499867484] ***
*** finished computation of 7 references, err: [Inf, 0.22675440990683, 0.15449408499867484] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 34, 0]]
** centroid: 1, normalized-entropy: 0.9117517586347538, [(1, 70), (2, 34)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [2, 148, 24]]
** centroid: 2, normalized-entropy: 0.4207430125916394, [(1, 2), (2, 148), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [105, 1, 0]]
** centroid: 3, normalized-entropy: 0.07701687574298331, [(1, 105), (2, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22752502114641882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22752502114641882, 0.16462628966870382] ***
*** finished computation of 7 references, err: [Inf, 0.22752502114641882, 0.16462628966870382] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [29, 105, 0]]
** centroid: 1, normalized-entropy: 0.753572561997754, [(1, 29), (2, 105)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [92, 64, 0]]
** centroid: 2, normalized-entropy: 0.9766349114440099, [(1, 92), (2, 64)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 7, 21]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 7), (3, 21)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 64, 2]]
** centroid: 4, normalized-entropy: 0.19590927087360496, [(2, 64), (3, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [139, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 21)
[0.9489998981016945, 0.9440008871146596, 0.9420048791306277, 0.9390078701455947, 0.9380158601715488, 0.9209988431545318, 0.9160268052483621, 0.9080158002313691, 0.897993802185419, 0.896998795202388, 0.8850227472981964, 0.882993772215329, 0.8770327213440986, 0.8769697841554129, 0.8749827671983361, 0.8730137322951693, 0.8670466874059688, 0.8619847392302482, 0.859038679397961, 0.858951766137395, 0.8130256004507502]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 2) => 0.9489998981016945
finished with 21
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 21)
[0.9489998981016945, 0.9440008871146596, 0.9420048791306277, 0.9390078701455947, 0.9380158601715488, 0.9209988431545318, 0.9160268052483621, 0.9080158002313691, 0.897993802185419, 0.896998795202388, 0.8850227472981964, 0.882993772215329, 0.8770327213440986, 0.8769697841554129, 0.8749827671983361, 0.8730137322951693, 0.8670466874059688, 0.8619847392302482, 0.859038679397961, 0.858951766137395, 0.8130256004507502]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 2) => 0.9489998981016945
finished with 22
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.35379509388136343] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35379509388136343, 0.30560150481592696] ***
*** starting iteration: 2; err: [Inf, 0.35379509388136343, 0.30560150481592696] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35379509388136343, 0.30560150481592696, 0.29761049913818594] ***
*** starting iteration: 3; err: [Inf, 0.35379509388136343, 0.30560150481592696, 0.29761049913818594] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35379509388136343, 0.30560150481592696, 0.29761049913818594, 0.29332344358166057] ***
*** starting iteration: 4; err: [Inf, 0.35379509388136343, 0.30560150481592696, 0.29761049913818594, 0.29332344358166057] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35379509388136343, 0.30560150481592696, 0.29761049913818594, 0.29332344358166057, 0.29264195479715505] ***
*** finished computation of 3 references, err: [Inf, 0.35379509388136343, 0.30560150481592696, 0.29761049913818594, 0.29332344358166057, 0.29264195479715505] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [75, 172, 19]]
** centroid: 1, normalized-entropy: 0.7531203665072533, [(1, 75), (2, 172), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [112, 97, 0]]
** centroid: 2, normalized-entropy: 0.9962811561832605, [(1, 112), (2, 97)]
*** center 3: selecting labels [1] (freq >= 1) [from [191, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3778277789584656] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3778277789584656, 0.30409370510206407] ***
*** starting iteration: 2; err: [Inf, 0.3778277789584656, 0.30409370510206407] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3778277789584656, 0.30409370510206407, 0.2941129105347118] ***
*** starting iteration: 3; err: [Inf, 0.3778277789584656, 0.30409370510206407, 0.2941129105347118] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3778277789584656, 0.30409370510206407, 0.2941129105347118, 0.2920773760869407] ***
*** starting iteration: 4; err: [Inf, 0.3778277789584656, 0.30409370510206407, 0.2941129105347118, 0.2920773760869407] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3778277789584656, 0.30409370510206407, 0.2941129105347118, 0.2920773760869407, 0.2915775922945291] ***
*** finished computation of 3 references, err: [Inf, 0.3778277789584656, 0.30409370510206407, 0.2941129105347118, 0.2920773760869407, 0.2915775922945291] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [165, 41, 0]]
** centroid: 1, normalized-entropy: 0.7199820925235048, [(1, 165), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [239, 16, 0]]
** centroid: 2, normalized-entropy: 0.3382468991827838, [(1, 239), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 182, 24]]
** centroid: 3, normalized-entropy: 0.519230019739187, [(2, 182), (3, 24)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33732222521159594] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33732222521159594, 0.3009191039849123] ***
*** starting iteration: 2; err: [Inf, 0.33732222521159594, 0.3009191039849123] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33732222521159594, 0.3009191039849123, 0.2958522608937944] ***
*** starting iteration: 3; err: [Inf, 0.33732222521159594, 0.3009191039849123, 0.2958522608937944] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33732222521159594, 0.3009191039849123, 0.2958522608937944, 0.29550055503660905] ***
*** finished computation of 3 references, err: [Inf, 0.33732222521159594, 0.3009191039849123, 0.2958522608937944, 0.29550055503660905] ***
*** center 1: selecting labels [1] (freq >= 1) [from [187, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [129, 86, 0]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(1, 129), (2, 86)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [88, 154, 23]]
** centroid: 3, normalized-entropy: 0.8134299487236575, [(1, 88), (2, 154), (3, 23)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 22)
[0.9489998981016945, 0.9440008871146596, 0.9420048791306277, 0.9390078701455947, 0.9380158601715488, 0.9209988431545318, 0.9160268052483621, 0.9080158002313691, 0.8999958041874209, 0.897993802185419, 0.896998795202388, 0.8850227472981964, 0.882993772215329, 0.8770327213440986, 0.8769697841554129, 0.8749827671983361, 0.8730137322951693, 0.8670466874059688, 0.8619847392302482, 0.859038679397961, 0.858951766137395, 0.8130256004507502]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 2) => 0.9489998981016945
finished with 24
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.30073026012469856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30073026012469856, 0.21632239590021404] ***
*** starting iteration: 2; err: [Inf, 0.30073026012469856, 0.21632239590021404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30073026012469856, 0.21632239590021404, 0.19981544854136202] ***
*** starting iteration: 3; err: [Inf, 0.30073026012469856, 0.21632239590021404, 0.19981544854136202] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30073026012469856, 0.21632239590021404, 0.19981544854136202, 0.1907567825621447] ***
*** finished computation of 7 references, err: [Inf, 0.30073026012469856, 0.21632239590021404, 0.19981544854136202, 0.1907567825621447] ***
*** center 1: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [40, 48, 0]]
** centroid: 3, normalized-entropy: 0.9940302114769566, [(1, 40), (2, 48)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [91, 32, 0]]
** centroid: 4, normalized-entropy: 0.8269916414523998, [(1, 91), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [68, 22, 0]]
** centroid: 5, normalized-entropy: 0.80235344282919, [(1, 68), (2, 22)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 104, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 63, 19]]
** centroid: 7, normalized-entropy: 0.7809756883263416, [(2, 63), (3, 19)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23658604091913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23658604091913, 0.1968599220249464] ***
*** starting iteration: 2; err: [Inf, 0.23658604091913, 0.1968599220249464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23658604091913, 0.1968599220249464, 0.18570419340471234] ***
*** starting iteration: 3; err: [Inf, 0.23658604091913, 0.1968599220249464, 0.18570419340471234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23658604091913, 0.1968599220249464, 0.18570419340471234, 0.1820242688020711] ***
*** finished computation of 7 references, err: [Inf, 0.23658604091913, 0.1968599220249464, 0.18570419340471234, 0.1820242688020711] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [54, 46, 0]]
** centroid: 1, normalized-entropy: 0.9953784388202258, [(1, 54), (2, 46)]
*** center 2: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [10, 93, 0]]
** centroid: 3, normalized-entropy: 0.4596942127956402, [(1, 10), (2, 93)]
*** center 4: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [51, 27, 0]]
** centroid: 5, normalized-entropy: 0.9305861291319927, [(1, 51), (2, 27)]
*** center 6: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 73, 24]]
** centroid: 7, normalized-entropy: 0.8071675554288905, [(2, 73), (3, 24)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2855492497262345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2855492497262345, 0.22517984486890139] ***
*** starting iteration: 2; err: [Inf, 0.2855492497262345, 0.22517984486890139] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2855492497262345, 0.22517984486890139, 0.21143485251897903] ***
*** starting iteration: 3; err: [Inf, 0.2855492497262345, 0.22517984486890139, 0.21143485251897903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2855492497262345, 0.22517984486890139, 0.21143485251897903, 0.20057752054544917] ***
*** finished computation of 7 references, err: [Inf, 0.2855492497262345, 0.22517984486890139, 0.21143485251897903, 0.20057752054544917] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 76, 23]]
** centroid: 1, normalized-entropy: 0.7820392866349247, [(2, 76), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [10, 96, 0]]
** centroid: 2, normalized-entropy: 0.4507913883546652, [(1, 10), (2, 96)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [96, 14, 0]]
** centroid: 3, normalized-entropy: 0.54991090463341, [(1, 96), (2, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [69, 54, 0]]
** centroid: 5, normalized-entropy: 0.9892452969285004, [(1, 69), (2, 54)]
*** center 6: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24820252497437167] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24820252497437167, 0.19334178443930977] ***
*** starting iteration: 2; err: [Inf, 0.24820252497437167, 0.19334178443930977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24820252497437167, 0.19334178443930977, 0.17288845231303493] ***
*** starting iteration: 3; err: [Inf, 0.24820252497437167, 0.19334178443930977, 0.17288845231303493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24820252497437167, 0.19334178443930977, 0.17288845231303493, 0.16170855202535922] ***
*** finished computation of 7 references, err: [Inf, 0.24820252497437167, 0.19334178443930977, 0.17288845231303493, 0.16170855202535922] ***
*** center 1: selecting labels [1] (freq >= 1) [from [155, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [9, 91, 0]]
** centroid: 2, normalized-entropy: 0.4364698170641031, [(1, 9), (2, 91)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [116, 18, 0]]
** centroid: 3, normalized-entropy: 0.569190343735683, [(1, 116), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [98, 46, 0]]
** centroid: 4, normalized-entropy: 0.9037762882345833, [(1, 98), (2, 46)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 71, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 36, 6]]
** centroid: 6, normalized-entropy: 0.5916727785823274, [(2, 36), (3, 6)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 7, 13]]
** centroid: 7, normalized-entropy: 0.9340680553754911, [(2, 7), (3, 13)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21829736648292197] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21829736648292197, 0.16828464037589339] ***
*** starting iteration: 2; err: [Inf, 0.21829736648292197, 0.16828464037589339] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21829736648292197, 0.16828464037589339, 0.16023520677946676] ***
*** starting iteration: 3; err: [Inf, 0.21829736648292197, 0.16828464037589339, 0.16023520677946676] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21829736648292197, 0.16828464037589339, 0.16023520677946676, 0.15601697399642603] ***
*** finished computation of 7 references, err: [Inf, 0.21829736648292197, 0.16828464037589339, 0.16023520677946676, 0.15601697399642603] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [106, 33, 0]]
** centroid: 1, normalized-entropy: 0.7907067265182696, [(1, 106), (2, 33)]
*** center 2: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [78, 50, 0]]
** centroid: 3, normalized-entropy: 0.9652016987500656, [(1, 78), (2, 50)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [4, 93, 0]]
** centroid: 4, normalized-entropy: 0.24793583772272637, [(1, 4), (2, 93)]
*** center 5: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 27, 14]]
** centroid: 6, normalized-entropy: 0.9262122127346664, [(2, 27), (3, 14)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 36, 10]]
** centroid: 7, normalized-entropy: 0.7553754125614286, [(2, 36), (3, 10)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1969213706037697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1969213706037697, 0.16488735108584657] ***
*** starting iteration: 2; err: [Inf, 0.1969213706037697, 0.16488735108584657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1969213706037697, 0.16488735108584657, 0.15727949620823542] ***
*** starting iteration: 3; err: [Inf, 0.1969213706037697, 0.16488735108584657, 0.15727949620823542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1969213706037697, 0.16488735108584657, 0.15727949620823542, 0.15374115347719822] ***
*** finished computation of 7 references, err: [Inf, 0.1969213706037697, 0.16488735108584657, 0.15727949620823542, 0.15374115347719822] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [83, 10, 0]]
** centroid: 1, normalized-entropy: 0.49241092131589825, [(1, 83), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 29, 0]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(1, 58), (2, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [27, 83, 0]]
** centroid: 3, normalized-entropy: 0.803993937522765, [(1, 27), (2, 83)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 114, 23]]
** centroid: 4, normalized-entropy: 0.6528394800109512, [(2, 114), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [78, 4, 0]]
** centroid: 5, normalized-entropy: 0.2811937964320427, [(1, 78), (2, 4)]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 24)
[0.9489998981016945, 0.9440008871146596, 0.9420048791306277, 0.9390078701455947, 0.9380158601715488, 0.9209988431545318, 0.9160268052483621, 0.9119898341455227, 0.90900481319643, 0.9080158002313691, 0.8999958041874209, 0.897993802185419, 0.896998795202388, 0.8850227472981964, 0.882993772215329, 0.8770327213440986, 0.8769697841554129, 0.8749827671983361, 0.8730137322951693, 0.8670466874059688, 0.8619847392302482, 0.859038679397961, 0.858951766137395, 0.8130256004507502]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 2) => 0.9489998981016945
finished with 24
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 24)
[0.9489998981016945, 0.9440008871146596, 0.9420048791306277, 0.9390078701455947, 0.9380158601715488, 0.9209988431545318, 0.9160268052483621, 0.9119898341455227, 0.90900481319643, 0.9080158002313691, 0.8999958041874209, 0.897993802185419, 0.896998795202388, 0.8850227472981964, 0.882993772215329, 0.8770327213440986, 0.8769697841554129, 0.8749827671983361, 0.8730137322951693, 0.8670466874059688, 0.8619847392302482, 0.859038679397961, 0.858951766137395, 0.8130256004507502]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 2) => 0.9489998981016945
finished with 25
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.26435898446377265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26435898446377265, 0.17383740728933578] ***
*** starting iteration: 2; err: [Inf, 0.26435898446377265, 0.17383740728933578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26435898446377265, 0.17383740728933578, 0.14929923321911925] ***
*** starting iteration: 3; err: [Inf, 0.26435898446377265, 0.17383740728933578, 0.14929923321911925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26435898446377265, 0.17383740728933578, 0.14929923321911925, 0.14446971871730713] ***
*** finished computation of 7 references, err: [Inf, 0.26435898446377265, 0.17383740728933578, 0.14929923321911925, 0.14446971871730713] ***
*** center 1: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 90, 18]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(2, 90), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [77, 21, 0]]
** centroid: 3, normalized-entropy: 0.7495952572594798, [(1, 77), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [98, 3, 0]]
** centroid: 4, normalized-entropy: 0.192900074578984, [(1, 98), (2, 3)]
*** center 5: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [47, 44, 0]]
** centroid: 6, normalized-entropy: 0.9992158792218827, [(1, 47), (2, 44)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 111, 1]]
** centroid: 7, normalized-entropy: 0.07360348308562395, [(2, 111), (3, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20592226168752342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20592226168752342, 0.164972517079488] ***
*** starting iteration: 2; err: [Inf, 0.20592226168752342, 0.164972517079488] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20592226168752342, 0.164972517079488, 0.1522705536356651] ***
*** starting iteration: 3; err: [Inf, 0.20592226168752342, 0.164972517079488, 0.1522705536356651] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20592226168752342, 0.164972517079488, 0.1522705536356651, 0.14840643428059397] ***
*** finished computation of 7 references, err: [Inf, 0.20592226168752342, 0.164972517079488, 0.1522705536356651, 0.14840643428059397] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [60, 38, 0]]
** centroid: 1, normalized-entropy: 0.9633355456726842, [(1, 60), (2, 38)]
*** center 2: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 120, 24]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 120), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [81, 49, 0]]
** centroid: 5, normalized-entropy: 0.9558398699876869, [(1, 81), (2, 49)]
*** center 6: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [46, 32, 0]]
** centroid: 7, normalized-entropy: 0.9766349114440099, [(1, 46), (2, 32)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.16125804950438463] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16125804950438463, 0.1521291079598645] ***
*** starting iteration: 2; err: [Inf, 0.16125804950438463, 0.1521291079598645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16125804950438463, 0.1521291079598645, 0.14877694952957934] ***
*** starting iteration: 3; err: [Inf, 0.16125804950438463, 0.1521291079598645, 0.14877694952957934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16125804950438463, 0.1521291079598645, 0.14877694952957934, 0.14691443491979841] ***
*** finished computation of 7 references, err: [Inf, 0.16125804950438463, 0.1521291079598645, 0.14877694952957934, 0.14691443491979841] ***
*** center 1: selecting labels [1] (freq >= 1) [from [136, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [29, 50, 0]]
** centroid: 2, normalized-entropy: 0.9484103893488014, [(1, 29), (2, 50)]
*** center 3: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [21, 75, 0]]
** centroid: 4, normalized-entropy: 0.7578784625383954, [(1, 21), (2, 75)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 70, 23]]
** centroid: 5, normalized-entropy: 0.8069896049203007, [(2, 70), (3, 23)]
*** center 6: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [38, 45, 0]]
** centroid: 7, normalized-entropy: 0.9948631079048572, [(1, 38), (2, 45)]
finished with 11 centroids; started with 7
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.20236947594955562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20236947594955562, 0.16069977274816483] ***
*** finished computation of 7 references, err: [Inf, 0.20236947594955562, 0.16069977274816483] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [210, 28, 0]]
** centroid: 1, normalized-entropy: 0.5225593745369407, [(1, 210), (2, 28)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 86, 33]]
** centroid: 2, normalized-entropy: 0.8517608318524026, [(2, 86), (3, 33)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [93, 103, 0]]
** centroid: 3, normalized-entropy: 0.9981214577227674, [(1, 93), (2, 103)]
*** center 4: selecting labels [1] (freq >= 2) [from [89, 1, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 156, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [128, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2460913030570373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2460913030570373, 0.17293229235243052] ***
*** finished computation of 7 references, err: [Inf, 0.2460913030570373, 0.17293229235243052] ***
*** center 1: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [26, 23, 0]]
** centroid: 2, normalized-entropy: 0.9972943816462351, [(1, 26), (2, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [103, 23, 0]]
** centroid: 3, normalized-entropy: 0.68560151644291, [(1, 103), (2, 23)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 6, 0]]
** centroid: 5, normalized-entropy: 0.43055186701043935, [(1, 62), (2, 6)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 20, 13]]
** centroid: 7, normalized-entropy: 0.9672947789468944, [(2, 20), (3, 13)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20791643233876675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20791643233876675, 0.1731748486123979] ***
*** finished computation of 7 references, err: [Inf, 0.20791643233876675, 0.1731748486123979] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 10, 0]]
** centroid: 1, normalized-entropy: 0.581321498763703, [(1, 62), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [69, 13, 0]]
** centroid: 2, normalized-entropy: 0.6307970795750609, [(1, 69), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [66, 23, 0]]
** centroid: 3, normalized-entropy: 0.8243633538094403, [(1, 66), (2, 23)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 28, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 23, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 89, 15]]
** centroid: 7, normalized-entropy: 0.5952124653513116, [(2, 89), (3, 15)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21501654949132354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21501654949132354, 0.16023168122582138] ***
*** finished computation of 7 references, err: [Inf, 0.21501654949132354, 0.16023168122582138] ***
*** center 1: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 85, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [102, 1, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 44, 18]]
** centroid: 5, normalized-entropy: 0.8691375806126381, [(2, 44), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [21, 52, 0]]
** centroid: 6, normalized-entropy: 0.8656939941993219, [(1, 21), (2, 52)]
*** center 7: selecting labels [1] (freq >= 2) [from [41, 1, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1820212890682742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1820212890682742, 0.1601293290760368] ***
*** finished computation of 7 references, err: [Inf, 0.1820212890682742, 0.1601293290760368] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 91, 16]]
** centroid: 1, normalized-entropy: 0.6086696755779567, [(2, 91), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [101, 3, 0]]
** centroid: 2, normalized-entropy: 0.18857195602479668, [(1, 101), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [26, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [22, 63, 0]]
** centroid: 4, normalized-entropy: 0.8249658680139929, [(1, 22), (2, 63)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 38, 0]]
** centroid: 5, normalized-entropy: 0.9580420222262997, [(1, 62), (2, 38)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [24, 3, 0]]
** centroid: 6, normalized-entropy: 0.5032583347756457, [(1, 24), (2, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21197902990691364] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21197902990691364, 0.15643252412602304] ***
*** finished computation of 7 references, err: [Inf, 0.21197902990691364, 0.15643252412602304] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [25, 53, 0]]
** centroid: 1, normalized-entropy: 0.9049382594235603, [(1, 25), (2, 53)]
*** center 2: selecting labels [1] (freq >= 2) [from [60, 1, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [1, 36, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [34, 64, 0]]
** centroid: 4, normalized-entropy: 0.9313043685793762, [(1, 34), (2, 64)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 28, 20]]
** centroid: 5, normalized-entropy: 0.9798687566511527, [(2, 28), (3, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2172351905759424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2172351905759424, 0.16276691888086497] ***
*** finished computation of 7 references, err: [Inf, 0.2172351905759424, 0.16276691888086497] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [44, 62, 0]]
** centroid: 1, normalized-entropy: 0.9790981671667148, [(1, 44), (2, 62)]
*** center 2: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 91, 17]]
** centroid: 4, normalized-entropy: 0.6280710155029396, [(2, 91), (3, 17)]
*** center 5: selecting labels [1] (freq >= 2) [from [27, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [66, 35, 0]]
** centroid: 6, normalized-entropy: 0.9309350721504903, [(1, 66), (2, 35)]
*** center 7: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20888084358908235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20888084358908235, 0.16866292965412139] ***
*** finished computation of 7 references, err: [Inf, 0.20888084358908235, 0.16866292965412139] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [29, 22, 0]]
** centroid: 1, normalized-entropy: 0.9863676072907089, [(1, 29), (2, 22)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 91, 16]]
** centroid: 2, normalized-entropy: 0.6086696755779567, [(2, 91), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [46, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 31, 0]]
** centroid: 5, normalized-entropy: 0.9731560354421095, [(1, 21), (2, 31)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [106, 36, 0]]
** centroid: 6, normalized-entropy: 0.8168114277045246, [(1, 106), (2, 36)]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17992428202182054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17992428202182054, 0.1508625362534076] ***
*** finished computation of 7 references, err: [Inf, 0.17992428202182054, 0.1508625362534076] ***
*** center 1: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [31, 41, 0]]
** centroid: 2, normalized-entropy: 0.9860400318404435, [(1, 31), (2, 41)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [15, 58, 0]]
** centroid: 3, normalized-entropy: 0.7327525499549903, [(1, 15), (2, 58)]
*** center 4: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 60, 16]]
** centroid: 5, normalized-entropy: 0.7424875695421234, [(2, 60), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [31, 37, 0]]
** centroid: 6, normalized-entropy: 0.9943766625699823, [(1, 31), (2, 37)]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17356489951722323] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17356489951722323, 0.15494395934790373] ***
*** finished computation of 7 references, err: [Inf, 0.17356489951722323, 0.15494395934790373] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 53, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [24, 55, 0]]
** centroid: 2, normalized-entropy: 0.8858834790484443, [(1, 24), (2, 55)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 50, 19]]
** centroid: 3, normalized-entropy: 0.849054424254048, [(2, 50), (3, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [86, 21, 0]]
** centroid: 4, normalized-entropy: 0.7143881566559658, [(1, 86), (2, 21)]
*** center 5: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [26, 12, 0]]
** centroid: 6, normalized-entropy: 0.8997437586982626, [(1, 26), (2, 12)]
*** center 7: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21630050837434828] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21630050837434828, 0.16010002244263888] ***
*** finished computation of 7 references, err: [Inf, 0.21630050837434828, 0.16010002244263888] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 57, 21]]
** centroid: 1, normalized-entropy: 0.8403586716091169, [(2, 57), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [26, 68, 0]]
** centroid: 2, normalized-entropy: 0.8507707040532602, [(1, 26), (2, 68)]
*** center 3: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [37, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 69, 0]]
** centroid: 5, normalized-entropy: 0.8669837150190186, [(1, 28), (2, 69)]
*** center 6: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19517321887984873] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19517321887984873, 0.16342871422693134] ***
*** finished computation of 7 references, err: [Inf, 0.19517321887984873, 0.16342871422693134] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [20, 44, 0]]
** centroid: 1, normalized-entropy: 0.8960382325345574, [(1, 20), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 16, 0]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(1, 40), (2, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 68, 0]]
** centroid: 3, normalized-entropy: 0.9630928243932294, [(1, 43), (2, 68)]
*** center 4: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 63, 21]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 63), (3, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22494772167876362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22494772167876362, 0.17237829475663602] ***
*** finished computation of 7 references, err: [Inf, 0.22494772167876362, 0.17237829475663602] ***
*** center 1: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [19, 97, 6]]
** centroid: 2, normalized-entropy: 0.564413269234187, [(1, 19), (2, 97), (3, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [86, 1, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 55, 13]]
** centroid: 4, normalized-entropy: 0.7039260680195971, [(2, 55), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 17, 0]]
** centroid: 5, normalized-entropy: 0.9788698505067782, [(1, 24), (2, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3732676537092775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3732676537092775, 0.19649057281343266] ***
*** finished computation of 7 references, err: [Inf, 0.3732676537092775, 0.19649057281343266] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [96, 70, 0]]
** centroid: 1, normalized-entropy: 0.9822309298084991, [(1, 96), (2, 70)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 101, 15]]
** centroid: 2, normalized-entropy: 0.5555437650236148, [(2, 101), (3, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [138, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 8, 0]]
** centroid: 6, normalized-entropy: 0.9819407868640977, [(1, 11), (2, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [36, 1, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17351358697377145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17351358697377145, 0.15073268510587515] ***
*** finished computation of 7 references, err: [Inf, 0.17351358697377145, 0.15073268510587515] ***
*** center 1: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 83, 13]]
** centroid: 3, normalized-entropy: 0.572108447204188, [(2, 83), (3, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [23, 53, 0]]
** centroid: 6, normalized-entropy: 0.8844839729019952, [(1, 23), (2, 53)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [53, 42, 0]]
** centroid: 7, normalized-entropy: 0.9903070204513952, [(1, 53), (2, 42)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21098790120333433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21098790120333433, 0.16120189225301146] ***
*** finished computation of 7 references, err: [Inf, 0.21098790120333433, 0.16120189225301146] ***
*** center 1: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [30, 1, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 3, 0]]
** centroid: 4, normalized-entropy: 0.3138129641688652, [(1, 50), (2, 3)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 61, 18]]
** centroid: 5, normalized-entropy: 0.7742411580847273, [(2, 61), (3, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [67, 56, 0]]
** centroid: 7, normalized-entropy: 0.9942230305758529, [(1, 67), (2, 56)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21612432742118837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21612432742118837, 0.16603281899075956] ***
*** finished computation of 7 references, err: [Inf, 0.21612432742118837, 0.16603281899075956] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 41, 21]]
** centroid: 1, normalized-entropy: 0.9235785996175947, [(2, 41), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [4, 80, 0]]
** centroid: 4, normalized-entropy: 0.2761954276479391, [(1, 4), (2, 80)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [111, 7, 0]]
** centroid: 5, normalized-entropy: 0.3247477475036634, [(1, 111), (2, 7)]
*** center 6: selecting labels [1] (freq >= 2) [from [51, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19762230012379586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19762230012379586, 0.17075906318426132] ***
*** finished computation of 7 references, err: [Inf, 0.19762230012379586, 0.17075906318426132] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 41, 3]]
** centroid: 1, normalized-entropy: 0.3591016256485496, [(2, 41), (3, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [31, 64, 0]]
** centroid: 2, normalized-entropy: 0.9111178649415465, [(1, 31), (2, 64)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [56, 60, 0]]
** centroid: 3, normalized-entropy: 0.999142103991909, [(1, 56), (2, 60)]
*** center 4: selecting labels [1] (freq >= 2) [from [118, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 17, 13]]
** centroid: 5, normalized-entropy: 0.9871377743721862, [(2, 17), (3, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.32052560545690356] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32052560545690356, 0.18953920671716332] ***
*** finished computation of 7 references, err: [Inf, 0.32052560545690356, 0.18953920671716332] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 35, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 7, 18]]
** centroid: 2, normalized-entropy: 0.8554508105601307, [(2, 7), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 14, 0]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(1, 49), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [11, 43, 0]]
** centroid: 4, normalized-entropy: 0.7292739418449411, [(1, 11), (2, 43)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 23, 4]]
** centroid: 5, normalized-entropy: 0.6051865766334207, [(2, 23), (3, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [159, 4, 0]]
** centroid: 6, normalized-entropy: 0.16622269478192112, [(1, 159), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [69, 64, 0]]
** centroid: 7, normalized-entropy: 0.9989802737140191, [(1, 69), (2, 64)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2205474419752136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2205474419752136, 0.15558123953361064] ***
*** finished computation of 7 references, err: [Inf, 0.2205474419752136, 0.15558123953361064] ***
*** center 1: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [89, 6, 0]]
** centroid: 3, normalized-entropy: 0.3398550782221443, [(1, 89), (2, 6)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 61, 20]]
** centroid: 4, normalized-entropy: 0.8063495153650776, [(2, 61), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 84, 0]]
** centroid: 5, normalized-entropy: 0.3533593350214213, [(1, 6), (2, 84)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [38, 38, 0]]
** centroid: 6, normalized-entropy: 1.0, [(1, 38), (2, 38)]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23662925288453698] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23662925288453698, 0.17381813444569708] ***
*** finished computation of 7 references, err: [Inf, 0.23662925288453698, 0.17381813444569708] ***
*** center 1: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 74, 13]]
** centroid: 4, normalized-entropy: 0.6084002154765848, [(2, 74), (3, 13)]
*** center 5: selecting labels [1, 2, 3] (freq >= 2) [from [36, 91, 6]]
** centroid: 5, normalized-entropy: 0.6855605691274423, [(1, 36), (2, 91), (3, 6)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [13, 20, 0]]
** centroid: 6, normalized-entropy: 0.9672947789468944, [(1, 13), (2, 20)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [54, 9, 0]]
** centroid: 7, normalized-entropy: 0.5916727785823274, [(1, 54), (2, 9)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2587388854685705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2587388854685705, 0.1636807409382891] ***
*** finished computation of 7 references, err: [Inf, 0.2587388854685705, 0.1636807409382891] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 5, 0]]
** centroid: 1, normalized-entropy: 0.4186843105268563, [(1, 54), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [80, 38, 0]]
** centroid: 2, normalized-entropy: 0.9065795484987461, [(1, 80), (2, 38)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [39, 25, 0]]
** centroid: 3, normalized-entropy: 0.9652016987500656, [(1, 39), (2, 25)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 123, 16]]
** centroid: 4, normalized-entropy: 0.5151332730348276, [(2, 123), (3, 16)]
*** center 5: selecting labels [1] (freq >= 2) [from [39, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23653534186538308] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23653534186538308, 0.15942225011857228] ***
*** finished computation of 7 references, err: [Inf, 0.23653534186538308, 0.15942225011857228] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 54, 12]]
** centroid: 1, normalized-entropy: 0.6840384356390419, [(2, 54), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [32, 45, 0]]
** centroid: 3, normalized-entropy: 0.9793399259567798, [(1, 32), (2, 45)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 71, 8]]
** centroid: 4, normalized-entropy: 0.47299536229314826, [(2, 71), (3, 8)]
*** center 5: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [47, 3, 0]]
** centroid: 6, normalized-entropy: 0.3274449191544762, [(1, 47), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [60, 9, 0]]
** centroid: 7, normalized-entropy: 0.5586293734521991, [(1, 60), (2, 9)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1848850853824988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1848850853824988, 0.15369720015302302] ***
*** finished computation of 7 references, err: [Inf, 0.1848850853824988, 0.15369720015302302] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [84, 2, 0]]
** centroid: 1, normalized-entropy: 0.15935006268563429, [(1, 84), (2, 2)]
*** center 2: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 49, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [53, 3, 0]]
** centroid: 4, normalized-entropy: 0.3013786435930858, [(1, 53), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 68, 0]]
** centroid: 5, normalized-entropy: 0.44749925503686355, [(1, 7), (2, 68)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [37, 42, 0]]
** centroid: 6, normalized-entropy: 0.9971085167216716, [(1, 37), (2, 42)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 25, 20]]
** centroid: 7, normalized-entropy: 0.9910760598382222, [(2, 25), (3, 20)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23119029792025686] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23119029792025686, 0.19268497413909064] ***
*** finished computation of 7 references, err: [Inf, 0.23119029792025686, 0.19268497413909064] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [43, 72, 0]]
** centroid: 1, normalized-entropy: 0.9536293156744908, [(1, 43), (2, 72)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [119, 15, 0]]
** centroid: 2, normalized-entropy: 0.5057408862206602, [(1, 119), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 114, 15]]
** centroid: 3, normalized-entropy: 0.5185697317883058, [(2, 114), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [41, 1, 0]]
finished with 6 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2468388348724693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2468388348724693, 0.19490608606673776] ***
*** finished computation of 7 references, err: [Inf, 0.2468388348724693, 0.19490608606673776] ***
*** center 1: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [9, 17, 0]]
** centroid: 2, normalized-entropy: 0.9305861291319927, [(1, 9), (2, 17)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [10, 75, 13]]
** centroid: 3, normalized-entropy: 0.6422296130807383, [(1, 10), (2, 75), (3, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [121, 21, 0]]
** centroid: 4, normalized-entropy: 0.6045279815569363, [(1, 121), (2, 21)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 62, 5]]
** centroid: 5, normalized-entropy: 0.3829576722723533, [(2, 62), (3, 5)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 4, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1838461979664862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1838461979664862, 0.16471383032575249] ***
*** finished computation of 7 references, err: [Inf, 0.1838461979664862, 0.16471383032575249] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [90, 34, 0]]
** centroid: 1, normalized-entropy: 0.8474179614176633, [(1, 90), (2, 34)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 97, 15]]
** centroid: 2, normalized-entropy: 0.5681147021801115, [(2, 97), (3, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 11, 0]]
** centroid: 6, normalized-entropy: 0.8960382325345574, [(1, 5), (2, 11)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [23, 50, 0]]
** centroid: 7, normalized-entropy: 0.8989377852081333, [(1, 23), (2, 50)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20665496721677482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20665496721677482, 0.16421441291924566] ***
*** finished computation of 7 references, err: [Inf, 0.20665496721677482, 0.16421441291924566] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [27, 38, 0]]
** centroid: 1, normalized-entropy: 0.9792415350396869, [(1, 27), (2, 38)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 48, 15]]
** centroid: 3, normalized-entropy: 0.7918583525674836, [(2, 48), (3, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [94, 4, 0]]
** centroid: 4, normalized-entropy: 0.2460225782203316, [(1, 94), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 39, 0]]
** centroid: 5, normalized-entropy: 0.9721439323621084, [(1, 58), (2, 39)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [36, 3, 0]]
** centroid: 6, normalized-entropy: 0.3912435636292556, [(1, 36), (2, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3009336341638118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3009336341638118, 0.1764418415427208] ***
*** finished computation of 7 references, err: [Inf, 0.3009336341638118, 0.1764418415427208] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [46, 56, 0]]
** centroid: 1, normalized-entropy: 0.9930554830121975, [(1, 46), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 2, 0]]
** centroid: 2, normalized-entropy: 0.24988229283318547, [(1, 46), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [6, 61, 0]]
** centroid: 4, normalized-entropy: 0.43497348007474274, [(1, 6), (2, 61)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [1, 60, 18]]
** centroid: 5, normalized-entropy: 0.7793498372920851, [(2, 60), (3, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25348653808794913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25348653808794913, 0.17638570471201093] ***
*** finished computation of 7 references, err: [Inf, 0.25348653808794913, 0.17638570471201093] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [108, 24, 0]]
** centroid: 1, normalized-entropy: 0.6840384356390419, [(1, 108), (2, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [2, 65, 0]]
** centroid: 4, normalized-entropy: 0.19364280468389852, [(1, 2), (2, 65)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 13, 0]]
** centroid: 5, normalized-entropy: 0.7746319868686841, [(1, 44), (2, 13)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 31, 1]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 38, 13]]
** centroid: 7, normalized-entropy: 0.8189555018403103, [(2, 38), (3, 13)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19420551471132785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19420551471132785, 0.16736656959727406] ***
*** finished computation of 7 references, err: [Inf, 0.19420551471132785, 0.16736656959727406] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [13, 68, 0]]
** centroid: 1, normalized-entropy: 0.635489638182683, [(1, 13), (2, 68)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 100, 14]]
** centroid: 2, normalized-entropy: 0.5373760853377334, [(2, 100), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [120, 19, 0]]
** centroid: 3, normalized-entropy: 0.5755058624468863, [(1, 120), (2, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [35, 1, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
finished with 8 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 374,3 => 33,1 => 593), Dict(2 => 370,3 => 30,1 => 600))
[ Info: ===== scores for single classifier: {"micro_f1":0.928,"precision":0.928,"recall":0.928,"macro_recall":0.9297597597597598,"macro_f1":0.8850830738488856,"accuracy":0.928,"class_f1":{"2":0.8968481375358166,"3":0.8055555555555556,"1":0.9528455284552846},"class_precision":{"2":0.9542682926829268,"3":0.6904761904761905,"1":0.9301587301587302},"class_recall":{"2":0.845945945945946,"3":0.9666666666666667,"1":0.9766666666666667}}
[ Info: ===== scores for 1: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9505405405405405,"macro_f1":0.9496677079126453,"accuracy":0.967,"class_f1":{"2":0.9538461538461539,"3":0.9180327868852459,"1":0.977124183006536},"class_precision":{"2":0.9884057971014493,"3":0.9032258064516129,"1":0.9583333333333334},"class_recall":{"2":0.9216216216216216,"3":0.9333333333333333,"1":0.9966666666666667}}
[ Info: ===== scores for 5: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9733183183183183,"macro_f1":0.9675895349462859,"accuracy":0.97,"class_f1":{"2":0.9578651685393259,"3":0.967741935483871,"1":0.9771615008156607},"class_precision":{"2":0.9970760233918129,"3":0.9375,"1":0.9568690095846646},"class_recall":{"2":0.9216216216216216,"3":1.0,"1":0.9983333333333333}}
[ Info: ===== scores for 7: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9498498498498499,"macro_f1":0.944935804788786,"accuracy":0.967,"class_f1":{"2":0.9535864978902954,"3":0.9032258064516129,"1":0.9779951100244498},"class_precision":{"2":0.9941348973607038,"3":0.875,"1":0.9569377990430622},"class_recall":{"2":0.9162162162162162,"3":0.9333333333333333,"1":1.0}}
[ Info: ===== scores for 9: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9654654654654654,"macro_f1":0.954956469850087,"accuracy":0.973,"class_f1":{"2":0.9622377622377624,"3":0.9206349206349207,"1":0.9819967266775776},"class_precision":{"2":0.9971014492753624,"3":0.8787878787878788,"1":0.9646302250803859},"class_recall":{"2":0.9297297297297298,"3":0.9666666666666667,"1":1.0}}
[ Info: ===== scores for 11: {"micro_f1":0.975,"precision":0.975,"recall":0.975,"macro_recall":0.9788588588588588,"macro_f1":0.9573323754335217,"accuracy":0.975,"class_f1":{"2":0.9654218533886583,"3":0.923076923076923,"1":0.9834983498349835},"class_precision":{"2":0.9886685552407932,"3":0.8571428571428571,"1":0.9738562091503268},"class_recall":{"2":0.9432432432432433,"3":1.0,"1":0.9933333333333333}}
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.97,"k":5,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9733183183183183,"macro_f1":0.9675895349462859,"accuracy":0.97,"class_f1":{"2":0.9578651685393259,"3":0.967741935483871,"1":0.9771615008156607},"class_precision":{"2":0.9970760233918129,"3":0.9375,"1":0.9568690095846646},"class_recall":{"2":0.9216216216216216,"3":1.0,"1":0.9983333333333333}}
Test Summary: | Pass  Total
AKNC          |    8      8
[84, 2, 3, 1, 6, 12, 1, 9, 24, 9, 1, 10, 2, 2, 2, 3, 10, 11, 5, 5, 2, 8, 2, 2, 14, 2, 2, 4, 8, 5, 2, 13, 1, 2, 4, 2, 5, 17, 31, 43, 1, 14, 18, 10, 63, 34, 20, 13, 8, 9, 7, 23, 12, 9, 13, 4, 15, 5, 99, 15, 1, 29, 2, 43, 5, 41, 2, 11, 9, 24, 13, 17, 6, 13, 21, 7, 12, 15, 3, 30, 14, 9, 164, 25, 21, 5, 11, 6, 10, 34, 7, 14, 15, 67, 94, 3, 36, 2, 27, 3, 11, 8, 13, 20, 9, 14, 10, 7, 6, 9, 3, 541, 56, 4, 32, 12, 7, 5, 39, 10, 26, 13, 105, 5, 39, 1, 38, 8, 22, 2, 29, 28, 24, 14, 44, 8, 5, 11, 85, 49, 24, 5, 8, 30, 9, 7, 6, 62, 832, 1, 24, 23, 2, 31, 3, 11, 13, 70, 14, 3, 35, 3, 7, 57, 24, 2, 17, 114, 19, 31, 6, 26, 27, 26, 13, 18, 4, 24, 14, 80, 20, 3, 36, 17, 24, 5, 20, 60, 32, 4, 12, 21, 8, 49, 358, 16, 17, 5, 63, 31, 10, 16, 210, 83, 10, 160, 10, 33, 19, 6, 18, 47, 15, 64, 7, 12, 31, 9, 15, 40, 28, 45, 7, 2, 88, 10, 6, 24, 46, 215, 295, 30, 39, 7, 58, 26, 28, 153, 22, 28, 5, 27, 11, 8, 6, 11, 6, 12, 11, 34, 329, 168, 16, 45, 3, 10, 21, 99, 127, 46, 121, 15, 3, 12, 12, 10, 29, 9, 37, 38, 11, 97, 2, 44, 333, 7, 4, 19, 5, 57, 7, 4, 27, 10, 58, 63, 50, 8, 6, 63, 1, 3, 1, 4, 17, 14, 15, 9, 19, 257]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.66, speedup = 0.2723162523291437, eval_ratio = 0.08158)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":null,"recall":0.3489583333333333,"f1":null,"seconds":0.00015738606452941895,"exhaustive_search_seconds":0.00035344623029232025,"evaluations":465.34375,"distances_sum":1781.2356467079437}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5625,"recall":0.5625,"f1":null,"seconds":0.00027617253363132477,"exhaustive_search_seconds":0.00035344623029232025,"evaluations":630.0625,"distances_sum":1685.0916213333671}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.645833333333333,"recall":0.645833333333333,"f1":0.645833333333333,"seconds":0.00036150217056274414,"exhaustive_search_seconds":0.00035344623029232025,"evaluations":746.03125,"distances_sum":1644.4555112567596}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7343749999999998,"recall":0.7343749999999998,"f1":0.7343749999999998,"seconds":0.0006393510848283768,"exhaustive_search_seconds":0.00035344623029232025,"evaluations":871.0703125,"distances_sum":1609.5241276030592}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7934027777777771,"recall":0.7934027777777771,"f1":0.7934027777777771,"seconds":0.0005506910383701324,"exhaustive_search_seconds":0.00035344623029232025,"evaluations":975.609375,"distances_sum":1591.5774526061607}
KCenters.DeloneInvIndex> reached performance {"precision":0.8211805555555547,"recall":0.8211805555555547,"f1":0.8211805555555547,"seconds":0.0006183963268995285,"exhaustive_search_seconds":0.00035344623029232025,"evaluations":1081.703125,"distances_sum":1584.2981018116993}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.831, speedup = 0.5410289718009766, eval_ratio = 0.11321600000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
