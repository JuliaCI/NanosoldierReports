Julia Version 1.5.0-DEV.638
Commit b0f3403f06 (2020-04-16 01:02 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed OrderedCollections ────────── v1.1.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Compat ────────────────────── v3.8.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.1
  Installed Tables ────────────────────── v1.0.4
  Installed JSON ──────────────────────── v0.21.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.1.0
  Installed Missings ──────────────────── v0.4.3
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataPattern ─────────────── v0.5.1
  Installed DataFrames ────────────────── v0.20.2
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataValueInterfaces ───────── v1.0.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed DataStructures ────────────── v0.17.12
  Installed SimilaritySearch ──────────── v0.3.19
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.12
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.1
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_RYf0ZI/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_RYf0ZI/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.12
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.1
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9326678744951884
[ Info: 0.8326150393486023
[ Info: 0.5544419614970684
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33258443139493465
mean(cdnet.distances) = 0.3970875812073549
mean(crand.distances) = 0.3493211496124665
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5322265625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5322265625,"f1":0.6779501748251754,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":7.2265625,"distances_sum":1585.7859097280782}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.874528076090577,"seconds":3.7569552659988403e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.7890625,"distances_sum":2558.16252256299}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7880859375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7880859375,"f1":0.874528076090577,"seconds":3.7569552659988403e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.7890625,"distances_sum":2558.16252256299}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9472584706959711,"seconds":6.707385182380676e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.875,"distances_sum":3136.2894651337365}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9037348068598074,"seconds":6.426125764846802e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.765625,"distances_sum":2765.113739323701}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9391082875457882,"seconds":6.766989827156067e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.8828125,"distances_sum":3062.3123498275086}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9472584706959711,"seconds":6.707385182380676e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.875,"distances_sum":3136.2894651337365}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9732715201465203,"seconds":7.178634405136108e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.9140625,"distances_sum":3381.9680062930406}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9654418498168502,"seconds":6.921589374542236e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.9296875,"distances_sum":3285.9773927747624}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9579269688644694,"seconds":6.860122084617615e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.828125,"distances_sum":3253.8347589692344}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9732715201465203,"seconds":7.178634405136108e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.9140625,"distances_sum":3381.9680062930406}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9732715201465203,"seconds":7.178634405136108e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.9140625,"distances_sum":3381.9680062930406}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7855840340215348,"seconds":3.3695250749588013e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":7.9609375,"distances_sum":1807.4201061757396}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.7997911810411819,"seconds":5.1781535148620605e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.0,"distances_sum":1928.5001215512352}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5751953125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5751953125,"f1":0.7157174422799428,"seconds":4.781410098075867e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":7.421875,"distances_sum":1499.2063926695314}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6845703125,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6845703125,"f1":0.7997911810411819,"seconds":5.1781535148620605e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.0,"distances_sum":1928.5001215512352}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9484088827838835,"seconds":6.163492798805237e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.796875,"distances_sum":2905.2070030369455}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9170902014652024,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.640625,"distances_sum":2607.8277835669414}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9484088827838835,"seconds":6.163492798805237e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.796875,"distances_sum":2905.2070030369455}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9772893772893775,"seconds":6.51925802230835e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.9140625,"distances_sum":3175.736898444768}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9632326007326011,"seconds":6.3963234424591064e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.8984375,"distances_sum":3017.5838025916933}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":12,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9632497710622713,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.921875,"distances_sum":3028.5365292403076}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9543956043956048,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.859375,"distances_sum":2943.6004417526437}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9772893772893775,"seconds":6.51925802230835e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.9140625,"distances_sum":3175.736898444768}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9772893772893775,"seconds":6.51925802230835e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.9140625,"distances_sum":3175.736898444768}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8644121503496512,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.21875,"distances_sum":2187.779402014698}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4541015625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4541015625,"f1":null,"seconds":3.606081008911133e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":6.1328125,"distances_sum":1143.082332019945}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7724609375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7724609375,"f1":0.8644121503496512,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.21875,"distances_sum":2187.779402014698}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9358745421245426,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.5390625,"distances_sum":2724.298874812683}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9658138736263739,"seconds":4.284083843231201e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8125,"distances_sum":3047.881187187781}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9562728937728944,"seconds":3.8929283618927e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.734375,"distances_sum":2945.5087223848723}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9658138736263739,"seconds":4.284083843231201e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8125,"distances_sum":3047.881187187781}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9665235805860809,"seconds":6.368383765220642e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8359375,"distances_sum":3038.5926447197003}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9686584249084254,"seconds":6.662681698799133e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8359375,"distances_sum":3053.511917510294}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.97498282967033,"seconds":6.601214408874512e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.921875,"distances_sum":3074.201987420256}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9729739010989016,"seconds":6.634742021560669e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8671875,"distances_sum":3091.6005802763375}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9722470238095241,"seconds":6.970018148422241e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8828125,"distances_sum":3081.3423904659835}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.97498282967033,"seconds":6.601214408874512e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.921875,"distances_sum":3074.201987420256}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.97498282967033,"seconds":6.601214408874512e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.921875,"distances_sum":3074.201987420256}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.376953125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.376953125,"f1":null,"seconds":3.7383288145065308e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":5.859375,"distances_sum":1061.429336703946}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7275390625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7275390625,"f1":0.8326418373293383,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.875,"distances_sum":2131.9259293697255}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7867582070707079,"seconds":5.0496309995651245e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.5859375,"distances_sum":1929.67730274385}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7275390625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7275390625,"f1":0.8326418373293383,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.875,"distances_sum":2131.9259293697255}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9474390193140201,"seconds":6.491318345069885e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.78125,"distances_sum":2946.2817161796147}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8521856615606621,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.96875,"distances_sum":2293.212878630543}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9203385156510162,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.734375,"distances_sum":2634.5317525627934}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.734375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.734375,"f1":0.8372422716172724,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.90625,"distances_sum":2157.2319189376485}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9387222152847158,"seconds":6.692484021186829e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.625,"distances_sum":2861.5645833942094}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9155250999001008,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.65625,"distances_sum":2657.3559099271724}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9217204670329676,"seconds":7.0426613092422485e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.671875,"distances_sum":2713.3849850912684}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9474390193140201,"seconds":6.491318345069885e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.78125,"distances_sum":2946.2817161796147}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9599931318681323,"seconds":6.6980719566345215e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.859375,"distances_sum":3016.5851918917383}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9483516483516489,"seconds":4.932284355163574e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.765625,"distances_sum":2972.2119944191127}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9714114010989017,"seconds":4.4852495193481445e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8359375,"distances_sum":3147.3656654920273}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9540064102564108,"seconds":4.3567270040512085e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.78125,"distances_sum":3004.8509614723635}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9714114010989017,"seconds":4.4852495193481445e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8359375,"distances_sum":3147.3656654920273}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9714114010989017,"seconds":4.4852495193481445e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8359375,"distances_sum":3147.3656654920273}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6455078125, conf: {"ssize":3,"bsize":4}, perf: {"precision":0.9768043154761904,"recall":0.6455078125,"f1":0.7681045516983023,"seconds":5.284324288368225e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.8984375,"distances_sum":904.7894780978752}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1865234375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1865234375,"f1":null,"seconds":3.7606805562973022e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":5.84375,"distances_sum":268.096900575876}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6455078125,"state":{"ssize":3,"bsize":4},"perf":{"precision":0.9768043154761904,"recall":0.6455078125,"f1":0.7681045516983023,"seconds":5.284324288368225e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.8984375,"distances_sum":904.7894780978752}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":5,"bsize":8}, perf: {"precision":0.9846912202380952,"recall":0.9072265625,"f1":0.9408525068681323,"seconds":6.670132279396057e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9609375,"distances_sum":1403.2914631078872}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":3,"bsize":8}, perf: {"precision":0.9805152529761905,"recall":0.9111328125,"f1":0.9390932635073264,"seconds":4.244968295097351e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9296875,"distances_sum":1434.6646784278032}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":3,"bsize":8},"perf":{"precision":0.9805152529761905,"recall":0.9111328125,"f1":0.9390932635073264,"seconds":4.244968295097351e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9296875,"distances_sum":1434.6646784278032}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":2,"bsize":10}, perf: {"precision":0.9843284970238094,"recall":0.9365234375,"f1":0.9578432635073262,"seconds":7.951632142066956e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":9.0,"distances_sum":1497.0200307681755}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":2,"bsize":11}, perf: {"precision":0.9786551339285714,"recall":0.9404296875,"f1":0.9575814159798538,"seconds":8.128583431243896e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9765625,"distances_sum":1524.6339936685476}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":2,"bsize":9}, perf: {"precision":0.9858816964285715,"recall":0.9326171875,"f1":0.9563544528388279,"seconds":7.78399407863617e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.984375,"distances_sum":1479.1993595677225}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":3,"bsize":12}, perf: {"precision":0.9810267857142858,"recall":0.9423828125,"f1":0.9590831043956047,"seconds":8.206814527511597e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":9.0,"distances_sum":1530.0567074897992}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":4,"bsize":12}, perf: {"precision":0.9850725446428572,"recall":0.9423828125,"f1":0.9610455299908427,"seconds":1.16787850856781e-5,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.96875,"distances_sum":1511.0175528362247}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":3,"bsize":12},"perf":{"precision":0.9810267857142858,"recall":0.9423828125,"f1":0.9590831043956047,"seconds":8.206814527511597e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":9.0,"distances_sum":1530.0567074897992}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":3,"bsize":12},"perf":{"precision":0.9810267857142858,"recall":0.9423828125,"f1":0.9590831043956047,"seconds":8.206814527511597e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":9.0,"distances_sum":1530.0567074897992}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.21875,"f1":null,"seconds":4.407018423080444e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":6.71875,"distances_sum":304.9250623958456}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2275390625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2275390625,"f1":null,"seconds":4.773959517478943e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":6.9609375,"distances_sum":331.0391448650766}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.61328125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.61328125,"f1":0.7447892385392393,"seconds":6.075948476791382e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":7.5703125,"distances_sum":941.1354976365885}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.61328125,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.61328125,"f1":0.7447892385392393,"seconds":6.075948476791382e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":7.5703125,"distances_sum":941.1354976365885}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9299627455877463,"seconds":7.852911949157715e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.8046875,"distances_sum":1481.3523639685473}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8936527014652024,"seconds":8.402392268180847e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.859375,"distances_sum":1310.162557147563}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8717782217782226,"seconds":7.227063179016113e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.5390625,"distances_sum":1267.5034307462272}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.880859375,"state":{"ssize":9,"bsize":7},"perf":{"precision":1.0,"recall":0.880859375,"f1":0.9299627455877463,"seconds":7.852911949157715e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.8046875,"distances_sum":1481.3523639685473}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9674336080586087,"seconds":7.90134072303772e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.8984375,"distances_sum":1644.711459742822}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":11,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9613152472527478,"seconds":7.795169949531555e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.9140625,"distances_sum":1595.8422178016579}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9399839743589747,"seconds":8.130446076393127e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.8515625,"distances_sum":1512.6143812252817}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9411234598734604,"seconds":7.743015885353088e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.8515625,"distances_sum":1529.4105531317114}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.961166437728938,"seconds":8.180737495422363e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.921875,"distances_sum":1602.1770475297385}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":10,"bsize":9},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9674336080586087,"seconds":7.90134072303772e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.8984375,"distances_sum":1644.711459742822}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":10,"bsize":9},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9674336080586087,"seconds":7.90134072303772e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.8984375,"distances_sum":1644.711459742822}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.529296875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.529296875,"f1":0.674547674547675,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":2.117827534675598e-6,"evaluations":6.96875,"distances_sum":817.4881373049213}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.384765625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.384765625,"f1":null,"seconds":4.8335641622543335e-6,"exhaustive_search_seconds":2.117827534675598e-6,"evaluations":6.1328125,"distances_sum":590.190850656509}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.529296875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.529296875,"f1":0.674547674547675,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":2.117827534675598e-6,"evaluations":6.96875,"distances_sum":817.4881373049213}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9259672619047625,"seconds":7.674098014831543e-6,"exhaustive_search_seconds":2.117827534675598e-6,"evaluations":8.6796875,"distances_sum":1470.7200200154}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8903971028971036,"seconds":6.707385182380676e-6,"exhaustive_search_seconds":2.117827534675598e-6,"evaluations":8.46875,"distances_sum":1356.1306973948074}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.73828125,"f1":0.8402273074148083,"seconds":6.183981895446777e-6,"exhaustive_search_seconds":2.117827534675598e-6,"evaluations":8.21875,"distances_sum":1198.0259895994293}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5576171875, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.5576171875,"f1":0.6945745226995232,"seconds":5.155801773071289e-6,"exhaustive_search_seconds":2.117827534675598e-6,"evaluations":7.015625,"distances_sum":899.7886454421405}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7742429445554453,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":2.117827534675598e-6,"evaluations":7.75,"distances_sum":1040.8851133420924}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.873046875,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.873046875,"f1":0.9259672619047625,"seconds":7.674098014831543e-6,"exhaustive_search_seconds":2.117827534675598e-6,"evaluations":8.6796875,"distances_sum":1470.7200200154}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9619276556776561,"seconds":7.100403308868408e-6,"exhaustive_search_seconds":2.117827534675598e-6,"evaluations":8.8671875,"distances_sum":1612.5745808216263}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9554945054945061,"seconds":7.051974534988403e-6,"exhaustive_search_seconds":2.117827534675598e-6,"evaluations":8.890625,"distances_sum":1581.6377955045048}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9406796328671333,"seconds":6.925314664840698e-6,"exhaustive_search_seconds":2.117827534675598e-6,"evaluations":8.7890625,"distances_sum":1537.221575294683}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9643830128205133,"seconds":7.212162017822266e-6,"exhaustive_search_seconds":2.117827534675598e-6,"evaluations":8.8359375,"distances_sum":1654.7903762041997}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9508101273726279,"seconds":6.996095180511475e-6,"exhaustive_search_seconds":2.117827534675598e-6,"evaluations":8.828125,"distances_sum":1591.4374248048198}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9283253205128212,"seconds":8.458271622657776e-6,"exhaustive_search_seconds":2.117827534675598e-6,"evaluations":8.59375,"distances_sum":1478.8083660857915}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9446027930402935,"seconds":6.925314664840698e-6,"exhaustive_search_seconds":2.117827534675598e-6,"evaluations":8.78125,"distances_sum":1573.6558429060287}, best_list's length: 15, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9643830128205133,"seconds":7.212162017822266e-6,"exhaustive_search_seconds":2.117827534675598e-6,"evaluations":8.8359375,"distances_sum":1654.7903762041997}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9643830128205133,"seconds":7.212162017822266e-6,"exhaustive_search_seconds":2.117827534675598e-6,"evaluations":8.8359375,"distances_sum":1654.7903762041997}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.599609375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.599609375,"f1":0.7326253607503614,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":7.3125,"distances_sum":1021.9020453553566}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4130859375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4130859375,"f1":null,"seconds":4.539266228675842e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":6.4609375,"distances_sum":646.8802157215267}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.599609375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.599609375,"f1":0.7326253607503614,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":7.3125,"distances_sum":1021.9020453553566}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9251290376290382,"seconds":5.027279257774353e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":8.7578125,"distances_sum":1566.1806191319824}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7392578125,"f1":0.8424048174048182,"seconds":4.9658119678497314e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":8.4765625,"distances_sum":1239.135126316877}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.654296875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.654296875,"f1":0.7763672091797097,"seconds":4.298985004425049e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":7.671875,"distances_sum":1114.2561607611049}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.805244755244756,"seconds":4.326924681663513e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":7.8046875,"distances_sum":1178.8637222191728}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8740234375,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8740234375,"f1":0.9251290376290382,"seconds":5.027279257774353e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":8.7578125,"distances_sum":1566.1806191319824}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9622596153846159,"seconds":5.3960829973220825e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":8.8984375,"distances_sum":1718.6761666451919}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9743704212454216,"seconds":3.7495046854019165e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":8.9375,"distances_sum":1802.876741667762}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9639709249084254,"seconds":3.7588179111480713e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":8.828125,"distances_sum":1741.614522941458}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9545444139194145,"seconds":3.7085264921188354e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":8.8125,"distances_sum":1701.6730921847327}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9743704212454216,"seconds":3.7495046854019165e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":8.9375,"distances_sum":1802.876741667762}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9743704212454216,"seconds":3.7495046854019165e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":8.9375,"distances_sum":1802.876741667762}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.18359375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.18359375,"f1":null,"seconds":2.0135194063186646e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":5.9921875,"distances_sum":321.45951128766774}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1796875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1796875,"f1":null,"seconds":1.9613653421401978e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":5.8203125,"distances_sum":298.90600477581063}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7858141858141867,"seconds":3.1385570764541626e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.84375,"distances_sum":1201.4618799128457}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6630859375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6630859375,"f1":0.7858141858141867,"seconds":3.1385570764541626e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.84375,"distances_sum":1201.4618799128457}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8076171875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8076171875,"f1":0.8873204920079928,"seconds":3.4943222999572754e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.4921875,"distances_sum":1521.3137406975109}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8076171875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8076171875,"f1":0.8873204920079928,"seconds":3.4943222999572754e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.4921875,"distances_sum":1521.3137406975109}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9449690934065944,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.78125,"distances_sum":1776.379495502458}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9449690934065944,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.78125,"distances_sum":1776.379495502458}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.904296875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9449690934065944,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.78125,"distances_sum":1776.379495502458}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5693359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5693359375,"f1":0.7098441489066495,"seconds":3.8798898458480835e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":7.4609375,"distances_sum":939.8015821027184}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2333984375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2333984375,"f1":null,"seconds":3.1813979148864746e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":6.8984375,"distances_sum":386.5948733738054}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.70703125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.70703125,"f1":0.8206397768897777,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.203125,"distances_sum":1214.7139295948891}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.70703125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.70703125,"f1":0.8206397768897777,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.203125,"distances_sum":1214.7139295948891}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8520760489510499,"seconds":5.356967449188232e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.4609375,"distances_sum":1354.8525877757397}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9038633241758248,"seconds":5.114823579788208e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.9609375,"distances_sum":1469.852613436958}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8509776681651692,"seconds":5.012378096580505e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.6171875,"distances_sum":1339.2095826015425}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8349609375,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.8349609375,"f1":0.9038633241758248,"seconds":5.114823579788208e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.9609375,"distances_sum":1469.852613436958}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.952967865467866,"seconds":6.584450602531433e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.9296875,"distances_sum":1726.964303692512}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9559981684981685,"seconds":6.606802344322205e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.8671875,"distances_sum":1747.4757412603578}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9634901556776561,"seconds":6.5676867961883545e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.953125,"distances_sum":1791.5933972396613}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9435413544788548,"seconds":6.541609764099121e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.8828125,"distances_sum":1675.4837427558655}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9307093947718951,"seconds":5.166977643966675e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.8359375,"distances_sum":1645.7280599475755}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9090034965034973,"seconds":4.9602240324020386e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.8984375,"distances_sum":1538.7123320725377}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9634901556776561,"seconds":6.5676867961883545e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.953125,"distances_sum":1791.5933972396613}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9634901556776561,"seconds":6.5676867961883545e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.953125,"distances_sum":1791.5933972396613}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.8002903346653356,"seconds":4.718080163002014e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.1953125,"distances_sum":1184.6384307098954}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5859375,"f1":0.725773185148186,"seconds":4.742294549942017e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":7.515625,"distances_sum":997.0464780534356}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7976513070263079,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.203125,"distances_sum":1178.235284939672}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6796875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6796875,"f1":0.8002903346653356,"seconds":4.718080163002014e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.1953125,"distances_sum":1184.6384307098954}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9409913003663009,"seconds":6.759539246559143e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.90625,"distances_sum":1697.0618043278012}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9404678654678659,"seconds":6.8303197622299194e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.875,"distances_sum":1723.8610195139447}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9469837454212459,"seconds":6.323680281639099e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.875,"distances_sum":1740.162579951998}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9469837454212459,"seconds":6.323680281639099e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.875,"distances_sum":1740.162579951998}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.964159798534799,"seconds":7.111579179763794e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.984375,"distances_sum":1799.6901781987178}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9745192307692312,"seconds":6.595626473426819e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.890625,"distances_sum":1887.074499628526}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9644033050283056,"seconds":6.789341568946838e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.9609375,"distances_sum":1830.6590317651194}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9504120879120885,"seconds":6.819143891334534e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.921875,"distances_sum":1736.0535898009134}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9738667582417588,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.96875,"distances_sum":1865.3623570389514}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9628949175824181,"seconds":6.5695494413375854e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.8671875,"distances_sum":1840.2252913120913}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.950976107226108,"seconds":6.556510925292969e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.8671875,"distances_sum":1774.4086050508815}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9745192307692312,"seconds":6.595626473426819e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.890625,"distances_sum":1887.074499628526}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9745192307692312,"seconds":6.595626473426819e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":8.890625,"distances_sum":1887.074499628526}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8698036338661347,"seconds":4.893168807029724e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.2421875,"distances_sum":1157.1768277184983}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8772670038295046,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.296875,"distances_sum":1175.8494561921607}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7919921875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7919921875,"f1":0.8772670038295046,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.296875,"distances_sum":1175.8494561921607}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9409684065934066,"seconds":6.5583735704422e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.71875,"distances_sum":1400.221325964472}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9586538461538464,"seconds":6.627291440963745e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.828125,"distances_sum":1448.3833490334653}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9551968864468868,"seconds":6.949529051780701e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.765625,"distances_sum":1466.7192073352535}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9586538461538464,"seconds":6.627291440963745e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.828125,"distances_sum":1448.3833490334653}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9808035714285717,"seconds":6.454065442085266e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.9609375,"distances_sum":1553.1249010972988}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.969144917582418,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.8828125,"distances_sum":1504.2640180487294}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.972619047619048,"seconds":6.489455699920654e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.875,"distances_sum":1531.30317237376}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9808035714285717,"seconds":6.454065442085266e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.9609375,"distances_sum":1553.1249010972988}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9808035714285717,"seconds":6.454065442085266e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.9609375,"distances_sum":1553.1249010972988}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.529296875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.529296875,"f1":0.6725527944277947,"seconds":4.157423973083496e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.0078125,"distances_sum":821.5580959519477}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.529296875,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.529296875,"f1":0.6725527944277947,"seconds":4.157423973083496e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.0078125,"distances_sum":821.5580959519477}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9278388278388287,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.703125,"distances_sum":1511.1579540202463}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7275390625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7275390625,"f1":0.8308935855810866,"seconds":5.336478352546692e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.046875,"distances_sum":1189.9478955826035}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.8440543831168839,"seconds":5.045905709266663e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.0859375,"distances_sum":1255.7588675014817}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6513671875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6513671875,"f1":0.7767936924186932,"seconds":4.911795258522034e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.75,"distances_sum":1051.7114261011366}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8759765625,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8759765625,"f1":0.9278388278388287,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.703125,"distances_sum":1511.1579540202463}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.955105311355312,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8125,"distances_sum":1624.672813694617}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9498397435897443,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8359375,"distances_sum":1614.6321139634874}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.955105311355312,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8125,"distances_sum":1624.672813694617}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.921875,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.955105311355312,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8125,"distances_sum":1624.672813694617}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3447265625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3447265625,"f1":null,"seconds":3.421679139137268e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":5.8515625,"distances_sum":540.5385633139855}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7908617424242431,"seconds":4.753470420837402e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.09375,"distances_sum":1063.1580458362369}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6669921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6669921875,"f1":0.7908617424242431,"seconds":4.753470420837402e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.09375,"distances_sum":1063.1580458362369}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9068827006327016,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.6953125,"distances_sum":1397.801323379054}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.8471367174492183,"seconds":3.516674041748047e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.359375,"distances_sum":1221.2025916048244}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.734375,"f1":0.8363105644355654,"seconds":3.4905970096588135e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.328125,"distances_sum":1185.876759977339}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.84375,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.84375,"f1":0.9068827006327016,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.6953125,"distances_sum":1397.801323379054}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9739411630036632,"seconds":4.3138861656188965e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.9453125,"distances_sum":1707.9838851554205}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9631353021978027,"seconds":4.1816383600234985e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.921875,"distances_sum":1647.0260122733052}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9367502289377295,"seconds":4.276633262634277e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8671875,"distances_sum":1500.3252741239592}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9632669413919419,"seconds":3.723427653312683e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8984375,"distances_sum":1647.8148120785947}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9385130494505503,"seconds":3.913417458534241e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8671875,"distances_sum":1524.5176917719896}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9573717948717951,"seconds":3.820285201072693e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.9140625,"distances_sum":1623.4867829632683}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9739411630036632,"seconds":4.3138861656188965e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.9453125,"distances_sum":1707.9838851554205}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9739411630036632,"seconds":4.3138861656188965e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.9453125,"distances_sum":1707.9838851554205}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.185546875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.185546875,"f1":null,"seconds":1.7918646335601807e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":4.265625,"distances_sum":282.5457795984722}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2197265625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2197265625,"f1":null,"seconds":3.0137598514556885e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":4.609375,"distances_sum":351.7866635041454}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2197265625,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.2197265625,"f1":null,"seconds":3.0137598514556885e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":4.609375,"distances_sum":351.7866635041454}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.30859375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.30859375,"f1":null,"seconds":3.4961849451065063e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":4.8203125,"distances_sum":453.2041633527609}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.599609375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.599609375,"f1":0.7340045371295378,"seconds":3.2670795917510986e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.234375,"distances_sum":936.5029170428993}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.478515625, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.478515625,"f1":null,"seconds":2.4121254682540894e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":6.3671875,"distances_sum":721.4633297394724}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.599609375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.599609375,"f1":0.7340045371295378,"seconds":3.2670795917510986e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.234375,"distances_sum":936.5029170428993}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9322687728937736,"seconds":4.772096872329712e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.5703125,"distances_sum":1502.2396976172722}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9339806027306033,"seconds":5.2694231271743774e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.7109375,"distances_sum":1475.056030760478}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9371940559440565,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.5546875,"distances_sum":1501.200543616143}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6142578125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6142578125,"f1":0.7465073121323128,"seconds":4.230067133903503e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.390625,"distances_sum":965.6679134481415}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9199207042957049,"seconds":5.107372999191284e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.6484375,"distances_sum":1412.7874718416958}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9371940559440565,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.5546875,"distances_sum":1501.200543616143}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.890625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9371940559440565,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.5546875,"distances_sum":1501.200543616143}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8399754759129767,"seconds":3.4440308809280396e-6,"exhaustive_search_seconds":9.5367431640625e-7,"evaluations":8.203125,"distances_sum":1180.023861904845}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7783421439671449,"seconds":3.388151526451111e-6,"exhaustive_search_seconds":9.5367431640625e-7,"evaluations":7.96875,"distances_sum":1002.7384175512619}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3818359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3818359375,"f1":null,"seconds":2.203509211540222e-6,"exhaustive_search_seconds":9.5367431640625e-7,"evaluations":5.71875,"distances_sum":560.7931085100777}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7412109375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7412109375,"f1":0.8399754759129767,"seconds":3.4440308809280396e-6,"exhaustive_search_seconds":9.5367431640625e-7,"evaluations":8.203125,"distances_sum":1180.023861904845}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9478537087912093,"seconds":3.5371631383895874e-6,"exhaustive_search_seconds":9.5367431640625e-7,"evaluations":8.75,"distances_sum":1559.8178667953628}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9119963369963378,"seconds":3.462657332420349e-6,"exhaustive_search_seconds":9.5367431640625e-7,"evaluations":8.75,"distances_sum":1399.1181363038177}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9393315018315022,"seconds":3.976747393608093e-6,"exhaustive_search_seconds":9.5367431640625e-7,"evaluations":8.71875,"distances_sum":1531.9110065344141}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9512133699633704,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":9.5367431640625e-7,"evaluations":8.75,"distances_sum":1579.194607593852}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9512133699633704,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":9.5367431640625e-7,"evaluations":8.75,"distances_sum":1579.194607593852}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9667410714285719,"seconds":5.323439836502075e-6,"exhaustive_search_seconds":9.5367431640625e-7,"evaluations":8.8828125,"distances_sum":1630.6181765211784}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9677827380952384,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":9.5367431640625e-7,"evaluations":8.8828125,"distances_sum":1625.131528548582}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9559752747252752,"seconds":5.289912223815918e-6,"exhaustive_search_seconds":9.5367431640625e-7,"evaluations":8.828125,"distances_sum":1589.3554303502417}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9660542582417587,"seconds":3.6749988794326782e-6,"exhaustive_search_seconds":9.5367431640625e-7,"evaluations":8.8515625,"distances_sum":1630.4908676432824}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.977461080586081,"seconds":4.049390554428101e-6,"exhaustive_search_seconds":9.5367431640625e-7,"evaluations":8.9140625,"distances_sum":1679.4661307844765}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.972825091575092,"seconds":3.85381281375885e-6,"exhaustive_search_seconds":9.5367431640625e-7,"evaluations":8.8671875,"distances_sum":1667.8927727396133}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9579670329670333,"seconds":6.055459380149841e-6,"exhaustive_search_seconds":9.5367431640625e-7,"evaluations":8.765625,"distances_sum":1606.1421378470443}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9702380952380957,"seconds":4.393979907035828e-6,"exhaustive_search_seconds":9.5367431640625e-7,"evaluations":8.8671875,"distances_sum":1650.3606948053236}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.977461080586081,"seconds":4.049390554428101e-6,"exhaustive_search_seconds":9.5367431640625e-7,"evaluations":8.9140625,"distances_sum":1679.4661307844765}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.977461080586081,"seconds":4.049390554428101e-6,"exhaustive_search_seconds":9.5367431640625e-7,"evaluations":8.9140625,"distances_sum":1679.4661307844765}}, n: 9
mean(cfft.distances) = 0.3450473106084851
mean(cdnet.distances) = 0.3486069464214877
mean(crand.distances) = 0.38091463300271566
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8577777777777778
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8866666666666667
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9222222222222222
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9111111111111111
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8777777777777778
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.8888888888888888
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8666666666666667
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9022222222222221
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9222222222222222
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9333333333333332
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8866666666666666
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9355555555555556
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9333333333333335
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8622222222222221
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8777777777777778
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8799999999999999
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.888888888888889
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8711111111111111
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9111111111111111
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8911111111111111
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8844444444444445
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9066666666666666
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8844444444444445
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9177777777777778
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8844444444444445
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 8, 14]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(2, 8), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 8, 14]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(2, 8), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 8, 14]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(2, 8), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 8, 14]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(2, 8), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 8, 14]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(2, 8), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 8, 14]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(2, 8), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.94
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 8, 14]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(2, 8), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5666118808090687] ***
*** center 1: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 8, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.2633044504075991] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2633044504075991, 0.2419264140446578] ***
*** finished computation of 3 references, err: [Inf, 0.2633044504075991, 0.2419264140446578] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 132, 21]]
** centroid: 1, normalized-entropy: 0.577004250315725, [(2, 132), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [124, 88, 0]]
** centroid: 2, normalized-entropy: 0.9790981671667148, [(1, 124), (2, 88)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [275, 26, 0]]
** centroid: 3, normalized-entropy: 0.42426559043088324, [(1, 275), (2, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.19222748031568443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19222748031568443, 0.14712611818616209] ***
*** starting iteration: 2; err: [Inf, 0.19222748031568443, 0.14712611818616209] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19222748031568443, 0.14712611818616209, 0.14379868427271936] ***
*** starting iteration: 3; err: [Inf, 0.19222748031568443, 0.14712611818616209, 0.14379868427271936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19222748031568443, 0.14712611818616209, 0.14379868427271936, 0.1431405277203981] ***
*** finished computation of 7 references, err: [Inf, 0.19222748031568443, 0.14712611818616209, 0.14379868427271936, 0.1431405277203981] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 72, 21]]
** centroid: 1, normalized-entropy: 0.7706290693639406, [(2, 72), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [99, 1, 0]]
** centroid: 3, normalized-entropy: 0.08079313589591128, [(1, 99), (2, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [85, 10, 0]]
** centroid: 5, normalized-entropy: 0.48546076074591343, [(1, 85), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [25, 80, 0]]
** centroid: 6, normalized-entropy: 0.7918583525674836, [(1, 25), (2, 80)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 83, 0]]
** centroid: 7, normalized-entropy: 0.314682604134666, [(1, 5), (2, 83)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27677300516823156] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27677300516823156, 0.24174566257806465] ***
*** finished computation of 3 references, err: [Inf, 0.27677300516823156, 0.24174566257806465] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [274, 30, 0]]
** centroid: 1, normalized-entropy: 0.46481070884016484, [(1, 274), (2, 30)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 128, 22]]
** centroid: 2, normalized-entropy: 0.6014353864290773, [(2, 128), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [134, 79, 0]]
** centroid: 3, normalized-entropy: 0.9513545468580794, [(1, 134), (2, 79)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32242753076530445] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32242753076530445, 0.23857286340952188] ***
*** finished computation of 3 references, err: [Inf, 0.32242753076530445, 0.23857286340952188] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [89, 197, 23]]
** centroid: 1, normalized-entropy: 0.7635590832643263, [(1, 89), (2, 197), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [158, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [140, 60, 0]]
** centroid: 3, normalized-entropy: 0.8812908992306927, [(1, 140), (2, 60)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.26132227742048847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26132227742048847, 0.21272041346156248] ***
*** starting iteration: 2; err: [Inf, 0.26132227742048847, 0.21272041346156248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26132227742048847, 0.21272041346156248, 0.20241644667243366] ***
*** starting iteration: 3; err: [Inf, 0.26132227742048847, 0.21272041346156248, 0.20241644667243366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26132227742048847, 0.21272041346156248, 0.20241644667243366, 0.19665016229446228] ***
*** finished computation of 7 references, err: [Inf, 0.26132227742048847, 0.21272041346156248, 0.20241644667243366, 0.19665016229446228] ***
*** center 1: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [104, 23, 0]]
** centroid: 2, normalized-entropy: 0.6824826735754346, [(1, 104), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 48, 21]]
** centroid: 3, normalized-entropy: 0.8865408928220899, [(2, 48), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [156, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 40, 0]]
** centroid: 5, normalized-entropy: 0.9774178175281716, [(1, 28), (2, 40)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 52, 0]]
** centroid: 6, normalized-entropy: 0.47983202361612853, [(1, 6), (2, 52)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 83, 0]]
** centroid: 7, normalized-entropy: 0.35620480393132253, [(1, 6), (2, 83)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.286231463986576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.286231463986576, 0.20896641314560283] ***
*** starting iteration: 2; err: [Inf, 0.286231463986576, 0.20896641314560283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.286231463986576, 0.20896641314560283, 0.2011940530536213] ***
*** starting iteration: 3; err: [Inf, 0.286231463986576, 0.20896641314560283, 0.2011940530536213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.286231463986576, 0.20896641314560283, 0.2011940530536213, 0.1968147561716466] ***
*** finished computation of 7 references, err: [Inf, 0.286231463986576, 0.20896641314560283, 0.2011940530536213, 0.1968147561716466] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [13, 63, 0]]
** centroid: 4, normalized-entropy: 0.6601070987550468, [(1, 13), (2, 63)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 30, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 30), (2, 30)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [106, 51, 0]]
** centroid: 6, normalized-entropy: 0.9095681334505735, [(1, 106), (2, 51)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 93, 22]]
** centroid: 7, normalized-entropy: 0.7041920940481365, [(2, 93), (3, 22)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2897566845165803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2897566845165803, 0.2026113658679881] ***
*** starting iteration: 2; err: [Inf, 0.2897566845165803, 0.2026113658679881] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2897566845165803, 0.2026113658679881, 0.1952726019021386] ***
*** starting iteration: 3; err: [Inf, 0.2897566845165803, 0.2026113658679881, 0.1952726019021386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2897566845165803, 0.2026113658679881, 0.1952726019021386, 0.1934003146830248] ***
*** finished computation of 7 references, err: [Inf, 0.2897566845165803, 0.2026113658679881, 0.1952726019021386, 0.1934003146830248] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [49, 38, 0]]
** centroid: 1, normalized-entropy: 0.9884374283487116, [(1, 49), (2, 38)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [118, 3, 0]]
** centroid: 2, normalized-entropy: 0.1675676395319437, [(1, 118), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 99, 23]]
** centroid: 3, normalized-entropy: 0.6983747934875366, [(2, 99), (3, 23)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 101, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [84, 16, 0]]
** centroid: 6, normalized-entropy: 0.634309554640566, [(1, 84), (2, 16)]
*** center 7: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2964891379771827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2964891379771827, 0.24706774374173657] ***
*** finished computation of 3 references, err: [Inf, 0.2964891379771827, 0.24706774374173657] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [260, 62, 0]]
** centroid: 1, normalized-entropy: 0.7067684227376467, [(1, 260), (2, 62)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [139, 71, 0]]
** centroid: 2, normalized-entropy: 0.9229843053165991, [(1, 139), (2, 71)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 113, 21]]
** centroid: 3, normalized-entropy: 0.6263959917169504, [(2, 113), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27403246496861305] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27403246496861305, 0.23519324574611153] ***
*** finished computation of 3 references, err: [Inf, 0.27403246496861305, 0.23519324574611153] ***
*** center 1: selecting labels [1] (freq >= 1) [from [184, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [105, 128, 16]]
** centroid: 2, normalized-entropy: 0.8033451226251042, [(1, 105), (2, 128), (3, 16)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [119, 109, 6]]
** centroid: 3, normalized-entropy: 0.7224419732272696, [(1, 119), (2, 109), (3, 6)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3530923648328259] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3530923648328259, 0.25478968687349934] ***
*** finished computation of 3 references, err: [Inf, 0.3530923648328259, 0.25478968687349934] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [188, 100, 0]]
** centroid: 1, normalized-entropy: 0.9315627684809641, [(1, 188), (2, 100)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [199, 30, 0]]
** centroid: 2, normalized-entropy: 0.560186245055714, [(1, 199), (2, 30)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 127, 23]]
** centroid: 3, normalized-entropy: 0.6181194891000383, [(2, 127), (3, 23)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3713712959883136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3713712959883136, 0.22871712950133793] ***
*** starting iteration: 2; err: [Inf, 0.3713712959883136, 0.22871712950133793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3713712959883136, 0.22871712950133793, 0.1988400620311868] ***
*** starting iteration: 3; err: [Inf, 0.3713712959883136, 0.22871712950133793, 0.1988400620311868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3713712959883136, 0.22871712950133793, 0.1988400620311868, 0.19109539338597306] ***
*** finished computation of 7 references, err: [Inf, 0.3713712959883136, 0.22871712950133793, 0.1988400620311868, 0.19109539338597306] ***
*** center 1: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [138, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [1, 63, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [43, 54, 0]]
** centroid: 4, normalized-entropy: 0.9907034651869471, [(1, 43), (2, 54)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [98, 15, 0]]
** centroid: 5, normalized-entropy: 0.5649141512875933, [(1, 98), (2, 15)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 53, 21]]
** centroid: 6, normalized-entropy: 0.8605553930586318, [(2, 53), (3, 21)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [13, 61, 0]]
** centroid: 7, normalized-entropy: 0.6705250693158382, [(1, 13), (2, 61)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29674009891363723] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29674009891363723, 0.2439489953856597] ***
*** starting iteration: 2; err: [Inf, 0.29674009891363723, 0.2439489953856597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29674009891363723, 0.2439489953856597, 0.22014604565775445] ***
*** starting iteration: 3; err: [Inf, 0.29674009891363723, 0.2439489953856597, 0.22014604565775445] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29674009891363723, 0.2439489953856597, 0.22014604565775445, 0.20883207003316512] ***
*** finished computation of 7 references, err: [Inf, 0.29674009891363723, 0.2439489953856597, 0.22014604565775445, 0.20883207003316512] ***
*** center 1: selecting labels [1] (freq >= 2) [from [148, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [131, 32, 0]]
** centroid: 2, normalized-entropy: 0.7145047603574212, [(1, 131), (2, 32)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [104, 9, 0]]
** centroid: 3, normalized-entropy: 0.40093068188727266, [(1, 104), (2, 9)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 57, 2]]
** centroid: 4, normalized-entropy: 0.21357981533827744, [(2, 57), (3, 2)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 63, 20]]
** centroid: 5, normalized-entropy: 0.7966394665488286, [(2, 63), (3, 20)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [25, 49, 0]]
** centroid: 6, normalized-entropy: 0.9227346209530939, [(1, 25), (2, 49)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 27, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23368331769375184] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23368331769375184, 0.19421780513839676] ***
*** starting iteration: 2; err: [Inf, 0.23368331769375184, 0.19421780513839676] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23368331769375184, 0.19421780513839676, 0.18860176519258298] ***
*** starting iteration: 3; err: [Inf, 0.23368331769375184, 0.19421780513839676, 0.18860176519258298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23368331769375184, 0.19421780513839676, 0.18860176519258298, 0.18732435700680497] ***
*** finished computation of 7 references, err: [Inf, 0.23368331769375184, 0.19421780513839676, 0.18860176519258298, 0.18732435700680497] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 57, 23]]
** centroid: 1, normalized-entropy: 0.8654698974285927, [(2, 57), (3, 23)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 94, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [104, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [85, 2, 0]]
** centroid: 4, normalized-entropy: 0.15790637433488164, [(1, 85), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 84, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 21), (2, 84)]
*** center 6: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [51, 19, 0]]
** centroid: 7, normalized-entropy: 0.8435070855739035, [(1, 51), (2, 19)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.39705503944799797] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39705503944799797, 0.31671967713005683] ***
*** starting iteration: 2; err: [Inf, 0.39705503944799797, 0.31671967713005683] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39705503944799797, 0.31671967713005683, 0.29908382466381733] ***
*** starting iteration: 3; err: [Inf, 0.39705503944799797, 0.31671967713005683, 0.29908382466381733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39705503944799797, 0.31671967713005683, 0.29908382466381733, 0.29348083633045713] ***
*** finished computation of 3 references, err: [Inf, 0.39705503944799797, 0.31671967713005683, 0.29908382466381733, 0.29348083633045713] ***
*** center 1: selecting labels [1] (freq >= 1) [from [197, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [140, 93, 0]]
** centroid: 2, normalized-entropy: 0.9704462656613952, [(1, 140), (2, 93)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [62, 153, 21]]
** centroid: 3, normalized-entropy: 0.7713506093051717, [(1, 62), (2, 153), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.46321900763389734] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46321900763389734, 0.3071042598941471] ***
*** starting iteration: 2; err: [Inf, 0.46321900763389734, 0.3071042598941471] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46321900763389734, 0.3071042598941471, 0.29663865017457525] ***
*** starting iteration: 3; err: [Inf, 0.46321900763389734, 0.3071042598941471, 0.29663865017457525] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46321900763389734, 0.3071042598941471, 0.29663865017457525, 0.2945561021583146] ***
*** finished computation of 3 references, err: [Inf, 0.46321900763389734, 0.3071042598941471, 0.29663865017457525, 0.2945561021583146] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [236, 18, 0]]
** centroid: 1, normalized-entropy: 0.3691476408061968, [(1, 236), (2, 18)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 180, 22]]
** centroid: 2, normalized-entropy: 0.4966221117153493, [(2, 180), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [172, 39, 0]]
** centroid: 3, normalized-entropy: 0.6905388837574764, [(1, 172), (2, 39)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4735387946539063] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4735387946539063, 0.33767635830031567] ***
*** starting iteration: 2; err: [Inf, 0.4735387946539063, 0.33767635830031567] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4735387946539063, 0.33767635830031567, 0.3084324973466425] ***
*** starting iteration: 3; err: [Inf, 0.4735387946539063, 0.33767635830031567, 0.3084324973466425] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4735387946539063, 0.33767635830031567, 0.3084324973466425, 0.299779590647919] ***
*** finished computation of 3 references, err: [Inf, 0.4735387946539063, 0.33767635830031567, 0.3084324973466425, 0.299779590647919] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [89, 178, 23]]
** centroid: 1, normalized-entropy: 0.7856400059126526, [(1, 89), (2, 178), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [111, 79, 0]]
** centroid: 2, normalized-entropy: 0.9794406595369853, [(1, 111), (2, 79)]
*** center 3: selecting labels [1] (freq >= 1) [from [187, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4221150662901031] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4221150662901031, 0.3138707918184879] ***
*** finished computation of 3 references, err: [Inf, 0.4221150662901031, 0.3138707918184879] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [153, 4, 0]]
** centroid: 1, normalized-entropy: 0.17117909327394715, [(1, 153), (2, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 181, 21]]
** centroid: 2, normalized-entropy: 0.33054633489381907, [(1, 1), (2, 181), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [245, 61, 0]]
** centroid: 3, normalized-entropy: 0.7206189778332864, [(1, 245), (2, 61)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.47073423537960474] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47073423537960474, 0.33783179022528154] ***
*** finished computation of 3 references, err: [Inf, 0.47073423537960474, 0.33783179022528154] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [100, 129, 0]]
** centroid: 1, normalized-entropy: 0.9884005788084188, [(1, 100), (2, 129)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [75, 106, 22]]
** centroid: 2, normalized-entropy: 0.8628965961109989, [(1, 75), (2, 106), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [233, 2, 0]]
** centroid: 3, normalized-entropy: 0.07074940739713882, [(1, 233), (2, 2)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36767777353050424] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36767777353050424, 0.2992847999906924] ***
*** finished computation of 3 references, err: [Inf, 0.36767777353050424, 0.2992847999906924] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [4, 210, 23]]
** centroid: 1, normalized-entropy: 0.366308407653652, [(1, 4), (2, 210), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [135, 42, 0]]
** centroid: 2, normalized-entropy: 0.7905013842153699, [(1, 135), (2, 42)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [248, 5, 0]]
** centroid: 3, normalized-entropy: 0.1401069128350934, [(1, 248), (2, 5)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.23542206205410865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23542206205410865, 0.19070077379648057] ***
*** starting iteration: 2; err: [Inf, 0.23542206205410865, 0.19070077379648057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23542206205410865, 0.19070077379648057, 0.17203567825906627] ***
*** starting iteration: 3; err: [Inf, 0.23542206205410865, 0.19070077379648057, 0.17203567825906627] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23542206205410865, 0.19070077379648057, 0.17203567825906627, 0.1586653070143975] ***
*** starting iteration: 4; err: [Inf, 0.23542206205410865, 0.19070077379648057, 0.17203567825906627, 0.1586653070143975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23542206205410865, 0.19070077379648057, 0.17203567825906627, 0.1586653070143975, 0.15271711636155666] ***
*** starting iteration: 5; err: [Inf, 0.23542206205410865, 0.19070077379648057, 0.17203567825906627, 0.1586653070143975, 0.15271711636155666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23542206205410865, 0.19070077379648057, 0.17203567825906627, 0.1586653070143975, 0.15271711636155666, 0.14912730301366756] ***
*** starting iteration: 6; err: [Inf, 0.23542206205410865, 0.19070077379648057, 0.17203567825906627, 0.1586653070143975, 0.15271711636155666, 0.14912730301366756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23542206205410865, 0.19070077379648057, 0.17203567825906627, 0.1586653070143975, 0.15271711636155666, 0.14912730301366756, 0.14760312024020106] ***
*** starting iteration: 7; err: [Inf, 0.23542206205410865, 0.19070077379648057, 0.17203567825906627, 0.1586653070143975, 0.15271711636155666, 0.14912730301366756, 0.14760312024020106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23542206205410865, 0.19070077379648057, 0.17203567825906627, 0.1586653070143975, 0.15271711636155666, 0.14912730301366756, 0.14760312024020106, 0.14680109576912256] ***
*** finished computation of 7 references, err: [Inf, 0.23542206205410865, 0.19070077379648057, 0.17203567825906627, 0.1586653070143975, 0.15271711636155666, 0.14912730301366756, 0.14760312024020106, 0.14680109576912256] ***
*** center 1: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [37, 45, 0]]
** centroid: 2, normalized-entropy: 0.9931231770192241, [(1, 37), (2, 45)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 61, 15]]
** centroid: 3, normalized-entropy: 0.7166336117927455, [(2, 61), (3, 15)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 84, 6]]
** centroid: 4, normalized-entropy: 0.3533593350214213, [(2, 84), (3, 6)]
*** center 5: selecting labels [1] (freq >= 2) [from [125, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [105, 30, 0]]
** centroid: 6, normalized-entropy: 0.7642045065086204, [(1, 105), (2, 30)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [67, 26, 0]]
** centroid: 7, normalized-entropy: 0.8548640967818041, [(1, 67), (2, 26)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.17990746364734697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17990746364734697, 0.15246723249074312] ***
*** starting iteration: 2; err: [Inf, 0.17990746364734697, 0.15246723249074312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17990746364734697, 0.15246723249074312, 0.1474062919489637] ***
*** starting iteration: 3; err: [Inf, 0.17990746364734697, 0.15246723249074312, 0.1474062919489637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17990746364734697, 0.15246723249074312, 0.1474062919489637, 0.14614585994266677] ***
*** starting iteration: 4; err: [Inf, 0.17990746364734697, 0.15246723249074312, 0.1474062919489637, 0.14614585994266677] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17990746364734697, 0.15246723249074312, 0.1474062919489637, 0.14614585994266677, 0.1457330552551119] ***
*** finished computation of 7 references, err: [Inf, 0.17990746364734697, 0.15246723249074312, 0.1474062919489637, 0.14614585994266677, 0.1457330552551119] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [91, 2, 0]]
** centroid: 1, normalized-entropy: 0.14981136747274781, [(1, 91), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [92, 12, 0]]
** centroid: 2, normalized-entropy: 0.5159469300074472, [(1, 92), (2, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [38, 62, 0]]
** centroid: 3, normalized-entropy: 0.9580420222262997, [(1, 38), (2, 62)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 73, 22]]
** centroid: 4, normalized-entropy: 0.7807536250860868, [(2, 73), (3, 22)]
*** center 5: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 77, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [61, 11, 0]]
** centroid: 7, normalized-entropy: 0.6167482598263911, [(1, 61), (2, 11)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22536478932204096] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22536478932204096, 0.1589313930897475] ***
*** starting iteration: 2; err: [Inf, 0.22536478932204096, 0.1589313930897475] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22536478932204096, 0.1589313930897475, 0.1505262436571418] ***
*** starting iteration: 3; err: [Inf, 0.22536478932204096, 0.1589313930897475, 0.1505262436571418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22536478932204096, 0.1589313930897475, 0.1505262436571418, 0.14772701442152306] ***
*** starting iteration: 4; err: [Inf, 0.22536478932204096, 0.1589313930897475, 0.1505262436571418, 0.14772701442152306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22536478932204096, 0.1589313930897475, 0.1505262436571418, 0.14772701442152306, 0.1465132034089098] ***
*** starting iteration: 5; err: [Inf, 0.22536478932204096, 0.1589313930897475, 0.1505262436571418, 0.14772701442152306, 0.1465132034089098] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22536478932204096, 0.1589313930897475, 0.1505262436571418, 0.14772701442152306, 0.1465132034089098, 0.1461313661206039] ***
*** finished computation of 7 references, err: [Inf, 0.22536478932204096, 0.1589313930897475, 0.1505262436571418, 0.14772701442152306, 0.1465132034089098, 0.1461313661206039] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [17, 93, 0]]
** centroid: 1, normalized-entropy: 0.6210993704855443, [(1, 17), (2, 93)]
*** center 2: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 90, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [55, 11, 0]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(1, 55), (2, 11)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 63, 23]]
** centroid: 6, normalized-entropy: 0.8377698690066789, [(2, 63), (3, 23)]
*** center 7: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1886182658351969] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1886182658351969, 0.15194404422482852] ***
*** starting iteration: 2; err: [Inf, 0.1886182658351969, 0.15194404422482852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1886182658351969, 0.15194404422482852, 0.1474213208577343] ***
*** starting iteration: 3; err: [Inf, 0.1886182658351969, 0.15194404422482852, 0.1474213208577343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1886182658351969, 0.15194404422482852, 0.1474213208577343, 0.14656291453089604] ***
*** finished computation of 7 references, err: [Inf, 0.1886182658351969, 0.15194404422482852, 0.1474213208577343, 0.14656291453089604] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 101, 22]]
** centroid: 1, normalized-entropy: 0.6775807218599569, [(2, 101), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [79, 2, 0]]
** centroid: 3, normalized-entropy: 0.16702680404522793, [(1, 79), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [63, 32, 0]]
** centroid: 4, normalized-entropy: 0.9217647116941611, [(1, 63), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [77, 5, 0]]
** centroid: 5, normalized-entropy: 0.3313056130577883, [(1, 77), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [96, 8, 0]]
** centroid: 6, normalized-entropy: 0.3912435636292556, [(1, 96), (2, 8)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 89, 0]]
** centroid: 7, normalized-entropy: 0.20731018585948177, [(1, 3), (2, 89)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17872818215223757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17872818215223757, 0.15262696141728954] ***
*** starting iteration: 2; err: [Inf, 0.17872818215223757, 0.15262696141728954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17872818215223757, 0.15262696141728954, 0.14879193766645785] ***
*** starting iteration: 3; err: [Inf, 0.17872818215223757, 0.15262696141728954, 0.14879193766645785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17872818215223757, 0.15262696141728954, 0.14879193766645785, 0.14757473523291512] ***
*** finished computation of 7 references, err: [Inf, 0.17872818215223757, 0.15262696141728954, 0.14879193766645785, 0.14757473523291512] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 106, 23]]
** centroid: 1, normalized-entropy: 0.6763319595084449, [(2, 106), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 2, 0]]
** centroid: 3, normalized-entropy: 0.18312206830137262, [(1, 70), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [54, 25, 0]]
** centroid: 4, normalized-entropy: 0.9004854334784268, [(1, 54), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [93, 6, 0]]
** centroid: 5, normalized-entropy: 0.32984607020714635, [(1, 93), (2, 6)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 93, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [76, 25, 0]]
** centroid: 7, normalized-entropy: 0.8073313266519867, [(1, 76), (2, 25)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 10)
[0.9289948631265997, 0.9230098361834888, 0.9149868431305558, 0.9110158062253871, 0.9079978181774587, 0.886988785192378, 0.8640167113221006, 0.8490406574238909, 0.8029736323149498, 0.7969226711741682]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9289948631265997
finished with 11
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.3038149303113398] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3038149303113398, 0.24419665006730515] ***
*** starting iteration: 2; err: [Inf, 0.3038149303113398, 0.24419665006730515] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3038149303113398, 0.24419665006730515, 0.23689333785656705] ***
*** starting iteration: 3; err: [Inf, 0.3038149303113398, 0.24419665006730515, 0.23689333785656705] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3038149303113398, 0.24419665006730515, 0.23689333785656705, 0.23547192188623073] ***
*** finished computation of 3 references, err: [Inf, 0.3038149303113398, 0.24419665006730515, 0.23689333785656705, 0.23547192188623073] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [155, 53, 0]]
** centroid: 1, normalized-entropy: 0.8188095887691865, [(1, 155), (2, 53)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 191, 21]]
** centroid: 2, normalized-entropy: 0.3198060795215045, [(1, 1), (2, 191), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [243, 2, 0]]
** centroid: 3, normalized-entropy: 0.06835451705887763, [(1, 243), (2, 2)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24888243224901863] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24888243224901863, 0.23658689146099063] ***
*** starting iteration: 2; err: [Inf, 0.24888243224901863, 0.23658689146099063] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24888243224901863, 0.23658689146099063, 0.23504036898666092] ***
*** starting iteration: 3; err: [Inf, 0.24888243224901863, 0.23658689146099063, 0.23504036898666092] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24888243224901863, 0.23658689146099063, 0.23504036898666092, 0.23473659412435505] ***
*** finished computation of 3 references, err: [Inf, 0.24888243224901863, 0.23658689146099063, 0.23504036898666092, 0.23473659412435505] ***
*** center 1: selecting labels [1] (freq >= 1) [from [198, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [120, 92, 0]]
** centroid: 2, normalized-entropy: 0.987380023288353, [(1, 120), (2, 92)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [90, 145, 22]]
** centroid: 3, normalized-entropy: 0.8199249252733547, [(1, 90), (2, 145), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.28739425915292] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28739425915292, 0.2431138162089252] ***
*** starting iteration: 2; err: [Inf, 0.28739425915292, 0.2431138162089252] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28739425915292, 0.2431138162089252, 0.2364393784741367] ***
*** starting iteration: 3; err: [Inf, 0.28739425915292, 0.2431138162089252, 0.2364393784741367] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28739425915292, 0.2431138162089252, 0.2364393784741367, 0.23440799928190692] ***
*** finished computation of 3 references, err: [Inf, 0.28739425915292, 0.2431138162089252, 0.2364393784741367, 0.23440799928190692] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [180, 27, 0]]
** centroid: 1, normalized-entropy: 0.5586293734521991, [(1, 180), (2, 27)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 190, 23]]
** centroid: 2, normalized-entropy: 0.49379651894794435, [(2, 190), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [207, 40, 0]]
** centroid: 3, normalized-entropy: 0.6389383894880993, [(1, 207), (2, 40)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9289948631265997, 0.9230098361834888, 0.9149868431305558, 0.9110158062253871, 0.9079978181774587, 0.8909538280795766, 0.886988785192378, 0.8640167113221006, 0.8490406574238909, 0.8029736323149498, 0.7969226711741682]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9289948631265997
finished with 13
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.6308059523479214] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6308059523479214, 0.3605487376546582] ***
*** starting iteration: 2; err: [Inf, 0.6308059523479214, 0.3605487376546582] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6308059523479214, 0.3605487376546582, 0.3443429335076418] ***
*** starting iteration: 3; err: [Inf, 0.6308059523479214, 0.3605487376546582, 0.3443429335076418] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6308059523479214, 0.3605487376546582, 0.3443429335076418, 0.3377619389229239] ***
*** starting iteration: 4; err: [Inf, 0.6308059523479214, 0.3605487376546582, 0.3443429335076418, 0.3377619389229239] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6308059523479214, 0.3605487376546582, 0.3443429335076418, 0.3377619389229239, 0.3350810670802879] ***
*** starting iteration: 5; err: [Inf, 0.6308059523479214, 0.3605487376546582, 0.3443429335076418, 0.3377619389229239, 0.3350810670802879] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6308059523479214, 0.3605487376546582, 0.3443429335076418, 0.3377619389229239, 0.3350810670802879, 0.3336426176902679] ***
*** starting iteration: 6; err: [Inf, 0.6308059523479214, 0.3605487376546582, 0.3443429335076418, 0.3377619389229239, 0.3350810670802879, 0.3336426176902679] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6308059523479214, 0.3605487376546582, 0.3443429335076418, 0.3377619389229239, 0.3350810670802879, 0.3336426176902679, 0.33164640176515503] ***
*** starting iteration: 7; err: [Inf, 0.6308059523479214, 0.3605487376546582, 0.3443429335076418, 0.3377619389229239, 0.3350810670802879, 0.3336426176902679, 0.33164640176515503] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6308059523479214, 0.3605487376546582, 0.3443429335076418, 0.3377619389229239, 0.3350810670802879, 0.3336426176902679, 0.33164640176515503, 0.3288792668892121] ***
*** starting iteration: 8; err: [Inf, 0.6308059523479214, 0.3605487376546582, 0.3443429335076418, 0.3377619389229239, 0.3350810670802879, 0.3336426176902679, 0.33164640176515503, 0.3288792668892121] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6308059523479214, 0.3605487376546582, 0.3443429335076418, 0.3377619389229239, 0.3350810670802879, 0.3336426176902679, 0.33164640176515503, 0.3288792668892121, 0.3252426190301776] ***
*** starting iteration: 9; err: [Inf, 0.6308059523479214, 0.3605487376546582, 0.3443429335076418, 0.3377619389229239, 0.3350810670802879, 0.3336426176902679, 0.33164640176515503, 0.3288792668892121, 0.3252426190301776] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6308059523479214, 0.3605487376546582, 0.3443429335076418, 0.3377619389229239, 0.3350810670802879, 0.3336426176902679, 0.33164640176515503, 0.3288792668892121, 0.3252426190301776, 0.3169973891643757] ***
*** starting iteration: 10; err: [Inf, 0.6308059523479214, 0.3605487376546582, 0.3443429335076418, 0.3377619389229239, 0.3350810670802879, 0.3336426176902679, 0.33164640176515503, 0.3288792668892121, 0.3252426190301776, 0.3169973891643757] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6308059523479214, 0.3605487376546582, 0.3443429335076418, 0.3377619389229239, 0.3350810670802879, 0.3336426176902679, 0.33164640176515503, 0.3288792668892121, 0.3252426190301776, 0.3169973891643757, 0.2974442802341627] ***
*** finished computation of 3 references, err: [Inf, 0.6308059523479214, 0.3605487376546582, 0.3443429335076418, 0.3377619389229239, 0.3350810670802879, 0.3336426176902679, 0.33164640176515503, 0.3288792668892121, 0.3252426190301776, 0.3169973891643757, 0.2974442802341627] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [19, 174, 21]]
** centroid: 1, normalized-entropy: 0.5561984185408081, [(1, 19), (2, 174), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [233, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [147, 72, 0]]
** centroid: 3, normalized-entropy: 0.9136617865655933, [(1, 147), (2, 72)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.42176468402700223] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42176468402700223, 0.3019027277168216] ***
*** starting iteration: 2; err: [Inf, 0.42176468402700223, 0.3019027277168216] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42176468402700223, 0.3019027277168216, 0.29537482635638884] ***
*** starting iteration: 3; err: [Inf, 0.42176468402700223, 0.3019027277168216, 0.29537482635638884] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42176468402700223, 0.3019027277168216, 0.29537482635638884, 0.2951344639046126] ***
*** finished computation of 3 references, err: [Inf, 0.42176468402700223, 0.3019027277168216, 0.29537482635638884, 0.2951344639046126] ***
*** center 1: selecting labels [1] (freq >= 2) [from [211, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [116, 102, 0]]
** centroid: 2, normalized-entropy: 0.9970229471810967, [(1, 116), (2, 102)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [81, 135, 22]]
** centroid: 3, normalized-entropy: 0.8269982690649276, [(1, 81), (2, 135), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4616251553505145] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4616251553505145, 0.33981782985736675] ***
*** starting iteration: 2; err: [Inf, 0.4616251553505145, 0.33981782985736675] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4616251553505145, 0.33981782985736675, 0.30056945666547924] ***
*** starting iteration: 3; err: [Inf, 0.4616251553505145, 0.33981782985736675, 0.30056945666547924] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4616251553505145, 0.33981782985736675, 0.30056945666547924, 0.29514062046206024] ***
*** starting iteration: 4; err: [Inf, 0.4616251553505145, 0.33981782985736675, 0.30056945666547924, 0.29514062046206024] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4616251553505145, 0.33981782985736675, 0.30056945666547924, 0.29514062046206024, 0.2941064143733497] ***
*** starting iteration: 5; err: [Inf, 0.4616251553505145, 0.33981782985736675, 0.30056945666547924, 0.29514062046206024, 0.2941064143733497] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4616251553505145, 0.33981782985736675, 0.30056945666547924, 0.29514062046206024, 0.2941064143733497, 0.2938826930593291] ***
*** finished computation of 3 references, err: [Inf, 0.4616251553505145, 0.33981782985736675, 0.30056945666547924, 0.29514062046206024, 0.2941064143733497, 0.2938826930593291] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [3, 195, 23]]
** centroid: 1, normalized-entropy: 0.3679954655684056, [(1, 3), (2, 195), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [152, 58, 0]]
** centroid: 2, normalized-entropy: 0.8502079949955315, [(1, 152), (2, 58)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [232, 4, 0]]
** centroid: 3, normalized-entropy: 0.12394986771100755, [(1, 232), (2, 4)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.26795159274147257] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26795159274147257, 0.23356520367909345] ***
*** starting iteration: 2; err: [Inf, 0.26795159274147257, 0.23356520367909345] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26795159274147257, 0.23356520367909345, 0.23148540735899195] ***
*** starting iteration: 3; err: [Inf, 0.26795159274147257, 0.23356520367909345, 0.23148540735899195] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26795159274147257, 0.23356520367909345, 0.23148540735899195, 0.231208136649215] ***
*** finished computation of 3 references, err: [Inf, 0.26795159274147257, 0.23356520367909345, 0.23148540735899195, 0.231208136649215] ***
*** center 1: selecting labels [1] (freq >= 2) [from [182, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [135, 99, 0]]
** centroid: 2, normalized-entropy: 0.9828586897127057, [(1, 135), (2, 99)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [82, 147, 21]]
** centroid: 3, normalized-entropy: 0.8064198517558634, [(1, 82), (2, 147), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2605901731239601] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2605901731239601, 0.235243567362612] ***
*** starting iteration: 2; err: [Inf, 0.2605901731239601, 0.235243567362612] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2605901731239601, 0.235243567362612, 0.2324405218009604] ***
*** starting iteration: 3; err: [Inf, 0.2605901731239601, 0.235243567362612, 0.2324405218009604] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2605901731239601, 0.235243567362612, 0.2324405218009604, 0.2315259683902363] ***
*** finished computation of 3 references, err: [Inf, 0.2605901731239601, 0.235243567362612, 0.2324405218009604, 0.2315259683902363] ***
*** center 1: selecting labels [1] (freq >= 2) [from [205, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [74, 155, 22]]
** centroid: 2, normalized-entropy: 0.7929381978579851, [(1, 74), (2, 155), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [129, 82, 0]]
** centroid: 3, normalized-entropy: 0.9639068648764616, [(1, 129), (2, 82)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5130056175591795] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5130056175591795, 0.2547417583706408] ***
*** starting iteration: 2; err: [Inf, 0.5130056175591795, 0.2547417583706408] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5130056175591795, 0.2547417583706408, 0.23637293536646076] ***
*** starting iteration: 3; err: [Inf, 0.5130056175591795, 0.2547417583706408, 0.23637293536646076] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5130056175591795, 0.2547417583706408, 0.23637293536646076, 0.2328544046493831] ***
*** starting iteration: 4; err: [Inf, 0.5130056175591795, 0.2547417583706408, 0.23637293536646076, 0.2328544046493831] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5130056175591795, 0.2547417583706408, 0.23637293536646076, 0.2328544046493831, 0.2324161239700026] ***
*** finished computation of 3 references, err: [Inf, 0.5130056175591795, 0.2547417583706408, 0.23637293536646076, 0.2328544046493831, 0.2324161239700026] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [124, 94, 0]]
** centroid: 1, normalized-entropy: 0.9862958176866949, [(1, 124), (2, 94)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [76, 163, 23]]
** centroid: 2, normalized-entropy: 0.7899378289836472, [(1, 76), (2, 163), (3, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [187, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 13)
[0.9289948631265997, 0.9230098361834888, 0.9170038301774829, 0.9149868431305558, 0.9110158062253871, 0.9079978181774587, 0.8909538280795766, 0.886991782201363, 0.886988785192378, 0.8640167113221006, 0.8490406574238909, 0.8029736323149498, 0.7969226711741682]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9289948631265997
finished with 14
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.271041625474409] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.271041625474409, 0.19255220333489032] ***
*** starting iteration: 2; err: [Inf, 0.271041625474409, 0.19255220333489032] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.271041625474409, 0.19255220333489032, 0.17112970399368252] ***
*** starting iteration: 3; err: [Inf, 0.271041625474409, 0.19255220333489032, 0.17112970399368252] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.271041625474409, 0.19255220333489032, 0.17112970399368252, 0.15739195168230896] ***
*** finished computation of 7 references, err: [Inf, 0.271041625474409, 0.19255220333489032, 0.17112970399368252, 0.15739195168230896] ***
*** center 1: selecting labels [1] (freq >= 2) [from [153, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [112, 47, 0]]
** centroid: 2, normalized-entropy: 0.8758425320183139, [(1, 112), (2, 47)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [24, 57, 0]]
** centroid: 3, normalized-entropy: 0.876716288999464, [(1, 24), (2, 57)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 49, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 53, 9]]
** centroid: 5, normalized-entropy: 0.5975977764379984, [(2, 53), (3, 9)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [110, 2, 0]]
** centroid: 6, normalized-entropy: 0.12923377484588472, [(1, 110), (2, 2)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 38, 12]]
** centroid: 7, normalized-entropy: 0.7950402793845225, [(2, 38), (3, 12)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21198343090750374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21198343090750374, 0.16395943546723546] ***
*** starting iteration: 2; err: [Inf, 0.21198343090750374, 0.16395943546723546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21198343090750374, 0.16395943546723546, 0.15490051918569533] ***
*** starting iteration: 3; err: [Inf, 0.21198343090750374, 0.16395943546723546, 0.15490051918569533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21198343090750374, 0.16395943546723546, 0.15490051918569533, 0.1518527612193436] ***
*** finished computation of 7 references, err: [Inf, 0.21198343090750374, 0.16395943546723546, 0.15490051918569533, 0.1518527612193436] ***
*** center 1: selecting labels [1] (freq >= 2) [from [140, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [92, 18, 0]]
** centroid: 2, normalized-entropy: 0.6429383500409613, [(1, 92), (2, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 21, 0]]
** centroid: 3, normalized-entropy: 0.8304955225035798, [(1, 59), (2, 21)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 45, 11]]
** centroid: 4, normalized-entropy: 0.7147274731317893, [(2, 45), (3, 11)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 71, 11]]
** centroid: 5, normalized-entropy: 0.5687008669370753, [(2, 71), (3, 11)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [17, 76, 0]]
** centroid: 6, normalized-entropy: 0.6861549474202007, [(1, 17), (2, 76)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [100, 6, 0]]
** centroid: 7, normalized-entropy: 0.3138129641688652, [(1, 100), (2, 6)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20605628694110234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20605628694110234, 0.16587841844554807] ***
*** starting iteration: 2; err: [Inf, 0.20605628694110234, 0.16587841844554807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20605628694110234, 0.16587841844554807, 0.1541226313364269] ***
*** starting iteration: 3; err: [Inf, 0.20605628694110234, 0.16587841844554807, 0.1541226313364269] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20605628694110234, 0.16587841844554807, 0.1541226313364269, 0.14975058429384383] ***
*** finished computation of 7 references, err: [Inf, 0.20605628694110234, 0.16587841844554807, 0.1541226313364269, 0.14975058429384383] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 94, 23]]
** centroid: 2, normalized-entropy: 0.7150375653354627, [(2, 94), (3, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [74, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [93, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 94, 0]]
** centroid: 5, normalized-entropy: 0.4839112332593779, [(1, 11), (2, 94)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [61, 67, 0]]
** centroid: 6, normalized-entropy: 0.9984144269374468, [(1, 61), (2, 67)]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9419779060497624, 0.9289948631265997, 0.9230098361834888, 0.9170038301774829, 0.9149868431305558, 0.9110158062253871, 0.9079978181774587, 0.8909538280795766, 0.886991782201363, 0.886988785192378, 0.8640167113221006, 0.8490406574238909, 0.8029736323149498, 0.7969226711741682]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9419779060497624
finished with 14
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9419779060497624, 0.9289948631265997, 0.9230098361834888, 0.9170038301774829, 0.9149868431305558, 0.9110158062253871, 0.9079978181774587, 0.8909538280795766, 0.886991782201363, 0.886988785192378, 0.8640167113221006, 0.8490406574238909, 0.8029736323149498, 0.7969226711741682]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9419779060497624
finished with 16
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.316717453861005] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.316717453861005, 0.22130097252982403] ***
*** starting iteration: 2; err: [Inf, 0.316717453861005, 0.22130097252982403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.316717453861005, 0.22130097252982403, 0.19809914090427327] ***
*** starting iteration: 3; err: [Inf, 0.316717453861005, 0.22130097252982403, 0.19809914090427327] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.316717453861005, 0.22130097252982403, 0.19809914090427327, 0.1912414428998937] ***
*** starting iteration: 4; err: [Inf, 0.316717453861005, 0.22130097252982403, 0.19809914090427327, 0.1912414428998937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.316717453861005, 0.22130097252982403, 0.19809914090427327, 0.1912414428998937, 0.18797242130480102] ***
*** starting iteration: 5; err: [Inf, 0.316717453861005, 0.22130097252982403, 0.19809914090427327, 0.1912414428998937, 0.18797242130480102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.316717453861005, 0.22130097252982403, 0.19809914090427327, 0.1912414428998937, 0.18797242130480102, 0.18424790748569825] ***
*** starting iteration: 6; err: [Inf, 0.316717453861005, 0.22130097252982403, 0.19809914090427327, 0.1912414428998937, 0.18797242130480102, 0.18424790748569825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.316717453861005, 0.22130097252982403, 0.19809914090427327, 0.1912414428998937, 0.18797242130480102, 0.18424790748569825, 0.18338006897689635] ***
*** finished computation of 7 references, err: [Inf, 0.316717453861005, 0.22130097252982403, 0.19809914090427327, 0.1912414428998937, 0.18797242130480102, 0.18424790748569825, 0.18338006897689635] ***
*** center 1: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [23, 75, 0]]
** centroid: 2, normalized-entropy: 0.7861044688447759, [(1, 23), (2, 75)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [16, 86, 0]]
** centroid: 3, normalized-entropy: 0.6267511370265896, [(1, 16), (2, 86)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 67, 21]]
** centroid: 4, normalized-entropy: 0.7927652363756529, [(2, 67), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 18, 0]]
** centroid: 5, normalized-entropy: 0.7495952572594798, [(1, 66), (2, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20634696778814787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20634696778814787, 0.18845541563549678] ***
*** starting iteration: 2; err: [Inf, 0.20634696778814787, 0.18845541563549678] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20634696778814787, 0.18845541563549678, 0.1863547261564181] ***
*** starting iteration: 3; err: [Inf, 0.20634696778814787, 0.18845541563549678, 0.1863547261564181] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20634696778814787, 0.18845541563549678, 0.1863547261564181, 0.18587502364328934] ***
*** finished computation of 7 references, err: [Inf, 0.20634696778814787, 0.18845541563549678, 0.1863547261564181, 0.18587502364328934] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [26, 56, 0]]
** centroid: 1, normalized-entropy: 0.9011701959974223, [(1, 26), (2, 56)]
*** center 2: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 88, 22]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(2, 88), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 52, 0]]
** centroid: 5, normalized-entropy: 0.9935161367990846, [(1, 43), (2, 52)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [52, 41, 0]]
** centroid: 6, normalized-entropy: 0.989884644089986, [(1, 52), (2, 41)]
*** center 7: selecting labels [1] (freq >= 2) [from [123, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23709119912313725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23709119912313725, 0.2009027718487468] ***
*** starting iteration: 2; err: [Inf, 0.23709119912313725, 0.2009027718487468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23709119912313725, 0.2009027718487468, 0.195109318694689] ***
*** starting iteration: 3; err: [Inf, 0.23709119912313725, 0.2009027718487468, 0.195109318694689] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23709119912313725, 0.2009027718487468, 0.195109318694689, 0.1932429065467089] ***
*** starting iteration: 4; err: [Inf, 0.23709119912313725, 0.2009027718487468, 0.195109318694689, 0.1932429065467089] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23709119912313725, 0.2009027718487468, 0.195109318694689, 0.1932429065467089, 0.19228954867612028] ***
*** finished computation of 7 references, err: [Inf, 0.23709119912313725, 0.2009027718487468, 0.195109318694689, 0.1932429065467089, 0.19228954867612028] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 68, 18]]
** centroid: 1, normalized-entropy: 0.7401470427139037, [(2, 68), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [35, 63, 0]]
** centroid: 4, normalized-entropy: 0.940285958670631, [(1, 35), (2, 63)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 54, 0]]
** centroid: 5, normalized-entropy: 0.9924760039430819, [(1, 44), (2, 54)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 72, 5]]
** centroid: 6, normalized-entropy: 0.34673146824966367, [(2, 72), (3, 5)]
*** center 7: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21169979728942923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21169979728942923, 0.17236545847661727] ***
*** starting iteration: 2; err: [Inf, 0.21169979728942923, 0.17236545847661727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21169979728942923, 0.17236545847661727, 0.15915915321848179] ***
*** starting iteration: 3; err: [Inf, 0.21169979728942923, 0.17236545847661727, 0.15915915321848179] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21169979728942923, 0.17236545847661727, 0.15915915321848179, 0.15507004018131834] ***
*** starting iteration: 4; err: [Inf, 0.21169979728942923, 0.17236545847661727, 0.15915915321848179, 0.15507004018131834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21169979728942923, 0.17236545847661727, 0.15915915321848179, 0.15507004018131834, 0.15304055358926477] ***
*** starting iteration: 5; err: [Inf, 0.21169979728942923, 0.17236545847661727, 0.15915915321848179, 0.15507004018131834, 0.15304055358926477] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21169979728942923, 0.17236545847661727, 0.15915915321848179, 0.15507004018131834, 0.15304055358926477, 0.1512427839804329] ***
*** starting iteration: 6; err: [Inf, 0.21169979728942923, 0.17236545847661727, 0.15915915321848179, 0.15507004018131834, 0.15304055358926477, 0.1512427839804329] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21169979728942923, 0.17236545847661727, 0.15915915321848179, 0.15507004018131834, 0.15304055358926477, 0.1512427839804329, 0.14860069323869496] ***
*** starting iteration: 7; err: [Inf, 0.21169979728942923, 0.17236545847661727, 0.15915915321848179, 0.15507004018131834, 0.15304055358926477, 0.1512427839804329, 0.14860069323869496] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21169979728942923, 0.17236545847661727, 0.15915915321848179, 0.15507004018131834, 0.15304055358926477, 0.1512427839804329, 0.14860069323869496, 0.14617060186472852] ***
*** starting iteration: 8; err: [Inf, 0.21169979728942923, 0.17236545847661727, 0.15915915321848179, 0.15507004018131834, 0.15304055358926477, 0.1512427839804329, 0.14860069323869496, 0.14617060186472852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21169979728942923, 0.17236545847661727, 0.15915915321848179, 0.15507004018131834, 0.15304055358926477, 0.1512427839804329, 0.14860069323869496, 0.14617060186472852, 0.1447972155794188] ***
*** starting iteration: 9; err: [Inf, 0.21169979728942923, 0.17236545847661727, 0.15915915321848179, 0.15507004018131834, 0.15304055358926477, 0.1512427839804329, 0.14860069323869496, 0.14617060186472852, 0.1447972155794188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21169979728942923, 0.17236545847661727, 0.15915915321848179, 0.15507004018131834, 0.15304055358926477, 0.1512427839804329, 0.14860069323869496, 0.14617060186472852, 0.1447972155794188, 0.14396742295876547] ***
*** finished computation of 7 references, err: [Inf, 0.21169979728942923, 0.17236545847661727, 0.15915915321848179, 0.15507004018131834, 0.15304055358926477, 0.1512427839804329, 0.14860069323869496, 0.14617060186472852, 0.1447972155794188, 0.14396742295876547] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 54, 21]]
** centroid: 1, normalized-entropy: 0.8554508105601307, [(2, 54), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [113, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [67, 11, 0]]
** centroid: 4, normalized-entropy: 0.5869185834047994, [(1, 67), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [104, 5, 0]]
** centroid: 5, normalized-entropy: 0.2685937636658219, [(1, 104), (2, 5)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 91, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 84, 0]]
** centroid: 7, normalized-entropy: 0.3912435636292556, [(1, 7), (2, 84)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2382261322586444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2382261322586444, 0.16036157364080167] ***
*** starting iteration: 2; err: [Inf, 0.2382261322586444, 0.16036157364080167] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2382261322586444, 0.16036157364080167, 0.15195898127196164] ***
*** starting iteration: 3; err: [Inf, 0.2382261322586444, 0.16036157364080167, 0.15195898127196164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2382261322586444, 0.16036157364080167, 0.15195898127196164, 0.14995253226556432] ***
*** starting iteration: 4; err: [Inf, 0.2382261322586444, 0.16036157364080167, 0.15195898127196164, 0.14995253226556432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2382261322586444, 0.16036157364080167, 0.15195898127196164, 0.14995253226556432, 0.149152639830929] ***
*** finished computation of 7 references, err: [Inf, 0.2382261322586444, 0.16036157364080167, 0.15195898127196164, 0.14995253226556432, 0.149152639830929] ***
*** center 1: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [16, 68, 0]]
** centroid: 2, normalized-entropy: 0.7024665512903904, [(1, 16), (2, 68)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [37, 44, 0]]
** centroid: 3, normalized-entropy: 0.994605981300523, [(1, 37), (2, 44)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 94, 22]]
** centroid: 4, normalized-entropy: 0.7007495497162061, [(2, 94), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [115, 31, 0]]
** centroid: 5, normalized-entropy: 0.745910576136207, [(1, 115), (2, 31)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2416950704947371] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2416950704947371, 0.16725148430661016] ***
*** starting iteration: 2; err: [Inf, 0.2416950704947371, 0.16725148430661016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2416950704947371, 0.16725148430661016, 0.1548550077127586] ***
*** starting iteration: 3; err: [Inf, 0.2416950704947371, 0.16725148430661016, 0.1548550077127586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2416950704947371, 0.16725148430661016, 0.1548550077127586, 0.15122627616598866] ***
*** starting iteration: 4; err: [Inf, 0.2416950704947371, 0.16725148430661016, 0.1548550077127586, 0.15122627616598866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2416950704947371, 0.16725148430661016, 0.1548550077127586, 0.15122627616598866, 0.14992151914354318] ***
*** starting iteration: 5; err: [Inf, 0.2416950704947371, 0.16725148430661016, 0.1548550077127586, 0.15122627616598866, 0.14992151914354318] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2416950704947371, 0.16725148430661016, 0.1548550077127586, 0.15122627616598866, 0.14992151914354318, 0.14880628459507422] ***
*** starting iteration: 6; err: [Inf, 0.2416950704947371, 0.16725148430661016, 0.1548550077127586, 0.15122627616598866, 0.14992151914354318, 0.14880628459507422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2416950704947371, 0.16725148430661016, 0.1548550077127586, 0.15122627616598866, 0.14992151914354318, 0.14880628459507422, 0.1473989801363031] ***
*** starting iteration: 7; err: [Inf, 0.2416950704947371, 0.16725148430661016, 0.1548550077127586, 0.15122627616598866, 0.14992151914354318, 0.14880628459507422, 0.1473989801363031] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2416950704947371, 0.16725148430661016, 0.1548550077127586, 0.15122627616598866, 0.14992151914354318, 0.14880628459507422, 0.1473989801363031, 0.14706083804695705] ***
*** finished computation of 7 references, err: [Inf, 0.2416950704947371, 0.16725148430661016, 0.1548550077127586, 0.15122627616598866, 0.14992151914354318, 0.14880628459507422, 0.1473989801363031, 0.14706083804695705] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [72, 17, 0]]
** centroid: 1, normalized-entropy: 0.7035821005719904, [(1, 72), (2, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [74, 10, 0]]
** centroid: 3, normalized-entropy: 0.5266170655714281, [(1, 74), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [91, 2, 0]]
** centroid: 4, normalized-entropy: 0.14981136747274781, [(1, 91), (2, 2)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 89, 23]]
** centroid: 5, normalized-entropy: 0.7325138475458123, [(2, 89), (3, 23)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 108, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [64, 31, 0]]
** centroid: 7, normalized-entropy: 0.9111178649415465, [(1, 64), (2, 31)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9419868970767175, 0.9419779060497624, 0.9289948631265997, 0.9250058441675209, 0.9230098361834888, 0.9170038301774829, 0.9149868431305558, 0.9110158062253871, 0.9079978181774587, 0.8909538280795766, 0.886991782201363, 0.886988785192378, 0.8640167113221006, 0.8490406574238909, 0.8029736323149498, 0.7969226711741682]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 2) => 0.9419868970767175
finished with 16
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9419868970767175, 0.9419779060497624, 0.9289948631265997, 0.9250058441675209, 0.9230098361834888, 0.9170038301774829, 0.9149868431305558, 0.9110158062253871, 0.9079978181774587, 0.8909538280795766, 0.886991782201363, 0.886988785192378, 0.8640167113221006, 0.8490406574238909, 0.8029736323149498, 0.7969226711741682]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 2) => 0.9419868970767175
finished with 16
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9419868970767175, 0.9419779060497624, 0.9289948631265997, 0.9250058441675209, 0.9230098361834888, 0.9170038301774829, 0.9149868431305558, 0.9110158062253871, 0.9079978181774587, 0.8909538280795766, 0.886991782201363, 0.886988785192378, 0.8640167113221006, 0.8490406574238909, 0.8029736323149498, 0.7969226711741682]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 2) => 0.9419868970767175
finished with 16
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.18459820210002362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18459820210002362, 0.15971300927130505] ***
*** starting iteration: 2; err: [Inf, 0.18459820210002362, 0.15971300927130505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18459820210002362, 0.15971300927130505, 0.15352035105531103] ***
*** starting iteration: 3; err: [Inf, 0.18459820210002362, 0.15971300927130505, 0.15352035105531103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18459820210002362, 0.15971300927130505, 0.15352035105531103, 0.15137414849782363] ***
*** starting iteration: 4; err: [Inf, 0.18459820210002362, 0.15971300927130505, 0.15352035105531103, 0.15137414849782363] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18459820210002362, 0.15971300927130505, 0.15352035105531103, 0.15137414849782363, 0.15011302208306734] ***
*** starting iteration: 5; err: [Inf, 0.18459820210002362, 0.15971300927130505, 0.15352035105531103, 0.15137414849782363, 0.15011302208306734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18459820210002362, 0.15971300927130505, 0.15352035105531103, 0.15137414849782363, 0.15011302208306734, 0.14954734593536706] ***
*** finished computation of 7 references, err: [Inf, 0.18459820210002362, 0.15971300927130505, 0.15352035105531103, 0.15137414849782363, 0.15011302208306734, 0.14954734593536706] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [90, 6, 0]]
** centroid: 1, normalized-entropy: 0.3372900666170139, [(1, 90), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 54, 0]]
** centroid: 2, normalized-entropy: 0.9879565014919159, [(1, 70), (2, 54)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [172, 52, 0]]
** centroid: 3, normalized-entropy: 0.7817281222714539, [(1, 172), (2, 52)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 143, 33]]
** centroid: 4, normalized-entropy: 0.6962122601251459, [(2, 143), (3, 33)]
*** center 5: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [170, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 115, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21871870203642174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21871870203642174, 0.1734730486869812] ***
*** starting iteration: 2; err: [Inf, 0.21871870203642174, 0.1734730486869812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21871870203642174, 0.1734730486869812, 0.157186596583575] ***
*** starting iteration: 3; err: [Inf, 0.21871870203642174, 0.1734730486869812, 0.157186596583575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21871870203642174, 0.1734730486869812, 0.157186596583575, 0.14847859820420853] ***
*** starting iteration: 4; err: [Inf, 0.21871870203642174, 0.1734730486869812, 0.157186596583575, 0.14847859820420853] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21871870203642174, 0.1734730486869812, 0.157186596583575, 0.14847859820420853, 0.14629615777730942] ***
*** starting iteration: 5; err: [Inf, 0.21871870203642174, 0.1734730486869812, 0.157186596583575, 0.14847859820420853, 0.14629615777730942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21871870203642174, 0.1734730486869812, 0.157186596583575, 0.14847859820420853, 0.14629615777730942, 0.1454399947533384] ***
*** finished computation of 7 references, err: [Inf, 0.21871870203642174, 0.1734730486869812, 0.157186596583575, 0.14847859820420853, 0.14629615777730942, 0.1454399947533384] ***
*** center 1: selecting labels [1] (freq >= 2) [from [85, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 51, 17]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 51), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 43, 0]]
** centroid: 5, normalized-entropy: 0.9770012394218561, [(1, 30), (2, 43)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [26, 23, 0]]
** centroid: 6, normalized-entropy: 0.9972943816462351, [(1, 26), (2, 23)]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20871127790492028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20871127790492028, 0.15533230112306773] ***
*** starting iteration: 2; err: [Inf, 0.20871127790492028, 0.15533230112306773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20871127790492028, 0.15533230112306773, 0.1518543274588883] ***
*** starting iteration: 3; err: [Inf, 0.20871127790492028, 0.15533230112306773, 0.1518543274588883] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20871127790492028, 0.15533230112306773, 0.1518543274588883, 0.15056738728657365] ***
*** starting iteration: 4; err: [Inf, 0.20871127790492028, 0.15533230112306773, 0.1518543274588883, 0.15056738728657365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20871127790492028, 0.15533230112306773, 0.1518543274588883, 0.15056738728657365, 0.14988884636387229] ***
*** finished computation of 7 references, err: [Inf, 0.20871127790492028, 0.15533230112306773, 0.1518543274588883, 0.15056738728657365, 0.14988884636387229] ***
*** center 1: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [1, 49, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 76, 15]]
** centroid: 3, normalized-entropy: 0.6457523329916605, [(2, 76), (3, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [91, 30, 0]]
** centroid: 4, normalized-entropy: 0.8079869552387523, [(1, 91), (2, 30)]
*** center 5: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [20, 41, 0]]
** centroid: 6, normalized-entropy: 0.9127341558073343, [(1, 20), (2, 41)]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18999359274469316] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18999359274469316, 0.15513941062241793] ***
*** starting iteration: 2; err: [Inf, 0.18999359274469316, 0.15513941062241793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18999359274469316, 0.15513941062241793, 0.14897148904111238] ***
*** starting iteration: 3; err: [Inf, 0.18999359274469316, 0.15513941062241793, 0.14897148904111238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18999359274469316, 0.15513941062241793, 0.14897148904111238, 0.14665295582392718] ***
*** starting iteration: 4; err: [Inf, 0.18999359274469316, 0.15513941062241793, 0.14897148904111238, 0.14665295582392718] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18999359274469316, 0.15513941062241793, 0.14897148904111238, 0.14665295582392718, 0.14529860241897405] ***
*** starting iteration: 5; err: [Inf, 0.18999359274469316, 0.15513941062241793, 0.14897148904111238, 0.14665295582392718, 0.14529860241897405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18999359274469316, 0.15513941062241793, 0.14897148904111238, 0.14665295582392718, 0.14529860241897405, 0.14445699734054507] ***
*** finished computation of 7 references, err: [Inf, 0.18999359274469316, 0.15513941062241793, 0.14897148904111238, 0.14665295582392718, 0.14529860241897405, 0.14445699734054507] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 58, 16]]
** centroid: 1, normalized-entropy: 0.7531979910695015, [(2, 58), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [96, 4, 0]]
** centroid: 2, normalized-entropy: 0.24229218908241482, [(1, 96), (2, 4)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [61, 27, 0]]
** centroid: 3, normalized-entropy: 0.8894663896628687, [(1, 61), (2, 27)]
*** center 4: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [32, 25, 0]]
** centroid: 6, normalized-entropy: 0.9890934397021431, [(1, 32), (2, 25)]
*** center 7: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18848622738569976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18848622738569976, 0.1519883976546116] ***
*** starting iteration: 2; err: [Inf, 0.18848622738569976, 0.1519883976546116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18848622738569976, 0.1519883976546116, 0.14922449375595898] ***
*** starting iteration: 3; err: [Inf, 0.18848622738569976, 0.1519883976546116, 0.14922449375595898] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18848622738569976, 0.1519883976546116, 0.14922449375595898, 0.1486753282751888] ***
*** finished computation of 7 references, err: [Inf, 0.18848622738569976, 0.1519883976546116, 0.14922449375595898, 0.1486753282751888] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 13, 0]]
** centroid: 2, normalized-entropy: 0.7158259310602146, [(1, 53), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [78, 33, 0]]
** centroid: 3, normalized-entropy: 0.8779620013943914, [(1, 78), (2, 33)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 57, 17]]
** centroid: 4, normalized-entropy: 0.77753986416076, [(2, 57), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 18, 0]]
** centroid: 5, normalized-entropy: 0.9305861291319927, [(1, 34), (2, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21528410982899368] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21528410982899368, 0.16367966093402356] ***
*** starting iteration: 2; err: [Inf, 0.21528410982899368, 0.16367966093402356] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21528410982899368, 0.16367966093402356, 0.15763099232222885] ***
*** starting iteration: 3; err: [Inf, 0.21528410982899368, 0.16367966093402356, 0.15763099232222885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21528410982899368, 0.16367966093402356, 0.15763099232222885, 0.15403683576872573] ***
*** starting iteration: 4; err: [Inf, 0.21528410982899368, 0.16367966093402356, 0.15763099232222885, 0.15403683576872573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21528410982899368, 0.16367966093402356, 0.15763099232222885, 0.15403683576872573, 0.15203944746218623] ***
*** starting iteration: 5; err: [Inf, 0.21528410982899368, 0.16367966093402356, 0.15763099232222885, 0.15403683576872573, 0.15203944746218623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21528410982899368, 0.16367966093402356, 0.15763099232222885, 0.15403683576872573, 0.15203944746218623, 0.15056007909215988] ***
*** starting iteration: 6; err: [Inf, 0.21528410982899368, 0.16367966093402356, 0.15763099232222885, 0.15403683576872573, 0.15203944746218623, 0.15056007909215988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21528410982899368, 0.16367966093402356, 0.15763099232222885, 0.15403683576872573, 0.15203944746218623, 0.15056007909215988, 0.14842593266628681] ***
*** starting iteration: 7; err: [Inf, 0.21528410982899368, 0.16367966093402356, 0.15763099232222885, 0.15403683576872573, 0.15203944746218623, 0.15056007909215988, 0.14842593266628681] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21528410982899368, 0.16367966093402356, 0.15763099232222885, 0.15403683576872573, 0.15203944746218623, 0.15056007909215988, 0.14842593266628681, 0.1474454123042524] ***
*** finished computation of 7 references, err: [Inf, 0.21528410982899368, 0.16367966093402356, 0.15763099232222885, 0.15403683576872573, 0.15203944746218623, 0.15056007909215988, 0.14842593266628681, 0.1474454123042524] ***
*** center 1: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 56, 7]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(2, 56), (3, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [30, 41, 0]]
** centroid: 4, normalized-entropy: 0.9826154285526119, [(1, 30), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 18, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 72), (2, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [44, 8, 0]]
** centroid: 6, normalized-entropy: 0.6193821946787638, [(1, 44), (2, 8)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 72, 5]]
** centroid: 7, normalized-entropy: 0.34673146824966367, [(2, 72), (3, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21676283078640698] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21676283078640698, 0.15998123089037836] ***
*** starting iteration: 2; err: [Inf, 0.21676283078640698, 0.15998123089037836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21676283078640698, 0.15998123089037836, 0.15168175769224762] ***
*** starting iteration: 3; err: [Inf, 0.21676283078640698, 0.15998123089037836, 0.15168175769224762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21676283078640698, 0.15998123089037836, 0.15168175769224762, 0.1492191698316019] ***
*** starting iteration: 4; err: [Inf, 0.21676283078640698, 0.15998123089037836, 0.15168175769224762, 0.1492191698316019] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21676283078640698, 0.15998123089037836, 0.15168175769224762, 0.1492191698316019, 0.14778481051046402] ***
*** starting iteration: 5; err: [Inf, 0.21676283078640698, 0.15998123089037836, 0.15168175769224762, 0.1492191698316019, 0.14778481051046402] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21676283078640698, 0.15998123089037836, 0.15168175769224762, 0.1492191698316019, 0.14778481051046402, 0.14706232574069872] ***
*** finished computation of 7 references, err: [Inf, 0.21676283078640698, 0.15998123089037836, 0.15168175769224762, 0.1492191698316019, 0.14778481051046402, 0.14706232574069872] ***
*** center 1: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [27, 32, 0]]
** centroid: 3, normalized-entropy: 0.9948131754904235, [(1, 27), (2, 32)]
*** center 4: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 55, 0]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(1, 11), (2, 55)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 80, 14]]
** centroid: 6, normalized-entropy: 0.607171654871303, [(2, 80), (3, 14)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [81, 34, 0]]
** centroid: 7, normalized-entropy: 0.8759110349777134, [(1, 81), (2, 34)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2122931755334139] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2122931755334139, 0.16502502421103418] ***
*** starting iteration: 2; err: [Inf, 0.2122931755334139, 0.16502502421103418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2122931755334139, 0.16502502421103418, 0.15719102261960508] ***
*** starting iteration: 3; err: [Inf, 0.2122931755334139, 0.16502502421103418, 0.15719102261960508] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2122931755334139, 0.16502502421103418, 0.15719102261960508, 0.15415237947087734] ***
*** starting iteration: 4; err: [Inf, 0.2122931755334139, 0.16502502421103418, 0.15719102261960508, 0.15415237947087734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2122931755334139, 0.16502502421103418, 0.15719102261960508, 0.15415237947087734, 0.15260418052598834] ***
*** starting iteration: 5; err: [Inf, 0.2122931755334139, 0.16502502421103418, 0.15719102261960508, 0.15415237947087734, 0.15260418052598834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2122931755334139, 0.16502502421103418, 0.15719102261960508, 0.15415237947087734, 0.15260418052598834, 0.15198192289844156] ***
*** finished computation of 7 references, err: [Inf, 0.2122931755334139, 0.16502502421103418, 0.15719102261960508, 0.15415237947087734, 0.15260418052598834, 0.15198192289844156] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 37, 9]]
** centroid: 1, normalized-entropy: 0.7131467486384921, [(2, 37), (3, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [79, 13, 0]]
** centroid: 2, normalized-entropy: 0.5876446142980418, [(1, 79), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 46, 6]]
** centroid: 3, normalized-entropy: 0.5159469300074472, [(2, 46), (3, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [42, 35, 0]]
** centroid: 4, normalized-entropy: 0.9940302114769566, [(1, 42), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 41, 0]]
** centroid: 5, normalized-entropy: 0.9915528503834039, [(1, 33), (2, 41)]
*** center 6: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1828314232751727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1828314232751727, 0.15255492169689386] ***
*** starting iteration: 2; err: [Inf, 0.1828314232751727, 0.15255492169689386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1828314232751727, 0.15255492169689386, 0.14772794525511562] ***
*** starting iteration: 3; err: [Inf, 0.1828314232751727, 0.15255492169689386, 0.14772794525511562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1828314232751727, 0.15255492169689386, 0.14772794525511562, 0.14588671154528857] ***
*** starting iteration: 4; err: [Inf, 0.1828314232751727, 0.15255492169689386, 0.14772794525511562, 0.14588671154528857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1828314232751727, 0.15255492169689386, 0.14772794525511562, 0.14588671154528857, 0.1447776724509895] ***
*** starting iteration: 5; err: [Inf, 0.1828314232751727, 0.15255492169689386, 0.14772794525511562, 0.14588671154528857, 0.1447776724509895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1828314232751727, 0.15255492169689386, 0.14772794525511562, 0.14588671154528857, 0.1447776724509895, 0.1441409444930032] ***
*** finished computation of 7 references, err: [Inf, 0.1828314232751727, 0.15255492169689386, 0.14772794525511562, 0.14588671154528857, 0.1447776724509895, 0.1441409444930032] ***
*** center 1: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 47, 0]]
** centroid: 2, normalized-entropy: 0.9812872088817248, [(1, 65), (2, 47)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 77, 12]]
** centroid: 3, normalized-entropy: 0.5705411428522262, [(2, 77), (3, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [60, 3, 0]]
** centroid: 5, normalized-entropy: 0.2761954276479391, [(1, 60), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [12, 57, 0]]
** centroid: 6, normalized-entropy: 0.6665783579949205, [(1, 12), (2, 57)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [57, 2, 0]]
** centroid: 7, normalized-entropy: 0.21357981533827744, [(1, 57), (2, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2401176082129823] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2401176082129823, 0.17514947945438325] ***
*** starting iteration: 2; err: [Inf, 0.2401176082129823, 0.17514947945438325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2401176082129823, 0.17514947945438325, 0.15660281897708775] ***
*** starting iteration: 3; err: [Inf, 0.2401176082129823, 0.17514947945438325, 0.15660281897708775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2401176082129823, 0.17514947945438325, 0.15660281897708775, 0.14849638855922967] ***
*** starting iteration: 4; err: [Inf, 0.2401176082129823, 0.17514947945438325, 0.15660281897708775, 0.14849638855922967] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2401176082129823, 0.17514947945438325, 0.15660281897708775, 0.14849638855922967, 0.146654776468873] ***
*** starting iteration: 5; err: [Inf, 0.2401176082129823, 0.17514947945438325, 0.15660281897708775, 0.14849638855922967, 0.146654776468873] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2401176082129823, 0.17514947945438325, 0.15660281897708775, 0.14849638855922967, 0.146654776468873, 0.1459824100676924] ***
*** finished computation of 7 references, err: [Inf, 0.2401176082129823, 0.17514947945438325, 0.15660281897708775, 0.14849638855922967, 0.146654776468873, 0.1459824100676924] ***
*** center 1: selecting labels [1] (freq >= 2) [from [76, 1, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [67, 3, 0]]
** centroid: 4, normalized-entropy: 0.25524211319019174, [(1, 67), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [15, 62, 0]]
** centroid: 5, normalized-entropy: 0.7114160189012126, [(1, 15), (2, 62)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 50, 15]]
** centroid: 6, normalized-entropy: 0.7793498372920851, [(2, 50), (3, 15)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [33, 29, 0]]
** centroid: 7, normalized-entropy: 0.9969954265557693, [(1, 33), (2, 29)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2283404993824661] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2283404993824661, 0.16555388423614203] ***
*** starting iteration: 2; err: [Inf, 0.2283404993824661, 0.16555388423614203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2283404993824661, 0.16555388423614203, 0.1564787546917796] ***
*** starting iteration: 3; err: [Inf, 0.2283404993824661, 0.16555388423614203, 0.1564787546917796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2283404993824661, 0.16555388423614203, 0.1564787546917796, 0.15254051665589213] ***
*** starting iteration: 4; err: [Inf, 0.2283404993824661, 0.16555388423614203, 0.1564787546917796, 0.15254051665589213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2283404993824661, 0.16555388423614203, 0.1564787546917796, 0.15254051665589213, 0.14987650414556264] ***
*** starting iteration: 5; err: [Inf, 0.2283404993824661, 0.16555388423614203, 0.1564787546917796, 0.15254051665589213, 0.14987650414556264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2283404993824661, 0.16555388423614203, 0.1564787546917796, 0.15254051665589213, 0.14987650414556264, 0.14908116583898665] ***
*** finished computation of 7 references, err: [Inf, 0.2283404993824661, 0.16555388423614203, 0.1564787546917796, 0.15254051665589213, 0.14987650414556264, 0.14908116583898665] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 63, 17]]
** centroid: 1, normalized-entropy: 0.7462343013654809, [(2, 63), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [27, 37, 0]]
** centroid: 2, normalized-entropy: 0.9823166080205502, [(1, 27), (2, 37)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 11, 0]]
** centroid: 3, normalized-entropy: 0.7292739418449411, [(1, 43), (2, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [81, 21, 0]]
** centroid: 7, normalized-entropy: 0.7335379291086666, [(1, 81), (2, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22413434251770378] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22413434251770378, 0.16699894259683787] ***
*** starting iteration: 2; err: [Inf, 0.22413434251770378, 0.16699894259683787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22413434251770378, 0.16699894259683787, 0.15987292321771382] ***
*** starting iteration: 3; err: [Inf, 0.22413434251770378, 0.16699894259683787, 0.15987292321771382] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22413434251770378, 0.16699894259683787, 0.15987292321771382, 0.15737146147992462] ***
*** starting iteration: 4; err: [Inf, 0.22413434251770378, 0.16699894259683787, 0.15987292321771382, 0.15737146147992462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22413434251770378, 0.16699894259683787, 0.15987292321771382, 0.15737146147992462, 0.15564393213018776] ***
*** starting iteration: 5; err: [Inf, 0.22413434251770378, 0.16699894259683787, 0.15987292321771382, 0.15737146147992462, 0.15564393213018776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22413434251770378, 0.16699894259683787, 0.15987292321771382, 0.15737146147992462, 0.15564393213018776, 0.1541766805490479] ***
*** starting iteration: 6; err: [Inf, 0.22413434251770378, 0.16699894259683787, 0.15987292321771382, 0.15737146147992462, 0.15564393213018776, 0.1541766805490479] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22413434251770378, 0.16699894259683787, 0.15987292321771382, 0.15737146147992462, 0.15564393213018776, 0.1541766805490479, 0.15232551347464324] ***
*** starting iteration: 7; err: [Inf, 0.22413434251770378, 0.16699894259683787, 0.15987292321771382, 0.15737146147992462, 0.15564393213018776, 0.1541766805490479, 0.15232551347464324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22413434251770378, 0.16699894259683787, 0.15987292321771382, 0.15737146147992462, 0.15564393213018776, 0.1541766805490479, 0.15232551347464324, 0.15077462326735258] ***
*** starting iteration: 8; err: [Inf, 0.22413434251770378, 0.16699894259683787, 0.15987292321771382, 0.15737146147992462, 0.15564393213018776, 0.1541766805490479, 0.15232551347464324, 0.15077462326735258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22413434251770378, 0.16699894259683787, 0.15987292321771382, 0.15737146147992462, 0.15564393213018776, 0.1541766805490479, 0.15232551347464324, 0.15077462326735258, 0.1500063751284033] ***
*** finished computation of 7 references, err: [Inf, 0.22413434251770378, 0.16699894259683787, 0.15987292321771382, 0.15737146147992462, 0.15564393213018776, 0.1541766805490479, 0.15232551347464324, 0.15077462326735258, 0.1500063751284033] ***
*** center 1: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 49, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [26, 40, 0]]
** centroid: 4, normalized-entropy: 0.9672947789468944, [(1, 26), (2, 40)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 61, 0]]
** centroid: 5, normalized-entropy: 0.6944460704939805, [(1, 14), (2, 61)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [87, 2, 0]]
** centroid: 6, normalized-entropy: 0.1551032721030341, [(1, 87), (2, 2)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 33, 15]]
** centroid: 7, normalized-entropy: 0.8960382325345574, [(2, 33), (3, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20297418008185922] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20297418008185922, 0.15360961688589306] ***
*** starting iteration: 2; err: [Inf, 0.20297418008185922, 0.15360961688589306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20297418008185922, 0.15360961688589306, 0.14575864384509624] ***
*** starting iteration: 3; err: [Inf, 0.20297418008185922, 0.15360961688589306, 0.14575864384509624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20297418008185922, 0.15360961688589306, 0.14575864384509624, 0.14382479003071785] ***
*** starting iteration: 4; err: [Inf, 0.20297418008185922, 0.15360961688589306, 0.14575864384509624, 0.14382479003071785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20297418008185922, 0.15360961688589306, 0.14575864384509624, 0.14382479003071785, 0.1427706020846963] ***
*** starting iteration: 5; err: [Inf, 0.20297418008185922, 0.15360961688589306, 0.14575864384509624, 0.14382479003071785, 0.1427706020846963] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20297418008185922, 0.15360961688589306, 0.14575864384509624, 0.14382479003071785, 0.1427706020846963, 0.14194645825214683] ***
*** finished computation of 7 references, err: [Inf, 0.20297418008185922, 0.15360961688589306, 0.14575864384509624, 0.14382479003071785, 0.1427706020846963, 0.14194645825214683] ***
*** center 1: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [16, 63, 0]]
** centroid: 2, normalized-entropy: 0.7269625813353975, [(1, 16), (2, 63)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [13, 61, 0]]
** centroid: 3, normalized-entropy: 0.6705250693158382, [(1, 13), (2, 61)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 3, 0]]
** centroid: 4, normalized-entropy: 0.24229218908241482, [(1, 72), (2, 3)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 64, 14]]
** centroid: 5, normalized-entropy: 0.6789538995185759, [(2, 64), (3, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18574449996184558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18574449996184558, 0.15009634534828364] ***
*** starting iteration: 2; err: [Inf, 0.18574449996184558, 0.15009634534828364] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18574449996184558, 0.15009634534828364, 0.14751412918977438] ***
*** starting iteration: 3; err: [Inf, 0.18574449996184558, 0.15009634534828364, 0.14751412918977438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18574449996184558, 0.15009634534828364, 0.14751412918977438, 0.14654470748081802] ***
*** finished computation of 7 references, err: [Inf, 0.18574449996184558, 0.15009634534828364, 0.14751412918977438, 0.14654470748081802] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [7, 72, 0]]
** centroid: 1, normalized-entropy: 0.43180499427520785, [(1, 7), (2, 72)]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 3, 0]]
** centroid: 3, normalized-entropy: 0.24988229283318547, [(1, 69), (2, 3)]
*** center 4: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [56, 1, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 51, 14]]
** centroid: 6, normalized-entropy: 0.7516499461153354, [(2, 51), (3, 14)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [15, 54, 0]]
** centroid: 7, normalized-entropy: 0.7553754125614286, [(1, 15), (2, 54)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1823780364850536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1823780364850536, 0.15619051857106386] ***
*** starting iteration: 2; err: [Inf, 0.1823780364850536, 0.15619051857106386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1823780364850536, 0.15619051857106386, 0.14922348314896225] ***
*** starting iteration: 3; err: [Inf, 0.1823780364850536, 0.15619051857106386, 0.14922348314896225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1823780364850536, 0.15619051857106386, 0.14922348314896225, 0.14738534050108865] ***
*** starting iteration: 4; err: [Inf, 0.1823780364850536, 0.15619051857106386, 0.14922348314896225, 0.14738534050108865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1823780364850536, 0.15619051857106386, 0.14922348314896225, 0.14738534050108865, 0.14648784635402262] ***
*** finished computation of 7 references, err: [Inf, 0.1823780364850536, 0.15619051857106386, 0.14922348314896225, 0.14738534050108865, 0.14648784635402262] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [30, 39, 0]]
** centroid: 2, normalized-entropy: 0.9876925088958032, [(1, 30), (2, 39)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [13, 55, 0]]
** centroid: 3, normalized-entropy: 0.7039260680195971, [(1, 13), (2, 55)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 67, 19]]
** centroid: 4, normalized-entropy: 0.7618624463753669, [(2, 67), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 16, 0]]
** centroid: 5, normalized-entropy: 0.6840384356390419, [(1, 72), (2, 16)]
*** center 6: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1987898777332157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1987898777332157, 0.15369628830254078] ***
*** starting iteration: 2; err: [Inf, 0.1987898777332157, 0.15369628830254078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1987898777332157, 0.15369628830254078, 0.14803896660357713] ***
*** starting iteration: 3; err: [Inf, 0.1987898777332157, 0.15369628830254078, 0.14803896660357713] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1987898777332157, 0.15369628830254078, 0.14803896660357713, 0.14562795614125207] ***
*** starting iteration: 4; err: [Inf, 0.1987898777332157, 0.15369628830254078, 0.14803896660357713, 0.14562795614125207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1987898777332157, 0.15369628830254078, 0.14803896660357713, 0.14562795614125207, 0.14460391110181808] ***
*** starting iteration: 5; err: [Inf, 0.1987898777332157, 0.15369628830254078, 0.14803896660357713, 0.14562795614125207, 0.14460391110181808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1987898777332157, 0.15369628830254078, 0.14803896660357713, 0.14562795614125207, 0.14460391110181808, 0.14425844657048584] ***
*** finished computation of 7 references, err: [Inf, 0.1987898777332157, 0.15369628830254078, 0.14803896660357713, 0.14562795614125207, 0.14460391110181808, 0.14425844657048584] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [56, 15, 0]]
** centroid: 1, normalized-entropy: 0.743898745288434, [(1, 56), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [19, 50, 0]]
** centroid: 2, normalized-entropy: 0.849054424254048, [(1, 19), (2, 50)]
*** center 3: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 49, 19]]
** centroid: 4, normalized-entropy: 0.8546480601169081, [(2, 49), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [87, 3, 0]]
** centroid: 5, normalized-entropy: 0.2108423003185322, [(1, 87), (2, 3)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 71, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18264587279979605] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18264587279979605, 0.161256075900048] ***
*** starting iteration: 2; err: [Inf, 0.18264587279979605, 0.161256075900048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18264587279979605, 0.161256075900048, 0.15695181704871355] ***
*** starting iteration: 3; err: [Inf, 0.18264587279979605, 0.161256075900048, 0.15695181704871355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18264587279979605, 0.161256075900048, 0.15695181704871355, 0.1546774187926203] ***
*** starting iteration: 4; err: [Inf, 0.18264587279979605, 0.161256075900048, 0.15695181704871355, 0.1546774187926203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18264587279979605, 0.161256075900048, 0.15695181704871355, 0.1546774187926203, 0.15281482560932635] ***
*** starting iteration: 5; err: [Inf, 0.18264587279979605, 0.161256075900048, 0.15695181704871355, 0.1546774187926203, 0.15281482560932635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18264587279979605, 0.161256075900048, 0.15695181704871355, 0.1546774187926203, 0.15281482560932635, 0.15160697211558] ***
*** starting iteration: 6; err: [Inf, 0.18264587279979605, 0.161256075900048, 0.15695181704871355, 0.1546774187926203, 0.15281482560932635, 0.15160697211558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18264587279979605, 0.161256075900048, 0.15695181704871355, 0.1546774187926203, 0.15281482560932635, 0.15160697211558, 0.1501862524934113] ***
*** starting iteration: 7; err: [Inf, 0.18264587279979605, 0.161256075900048, 0.15695181704871355, 0.1546774187926203, 0.15281482560932635, 0.15160697211558, 0.1501862524934113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18264587279979605, 0.161256075900048, 0.15695181704871355, 0.1546774187926203, 0.15281482560932635, 0.15160697211558, 0.1501862524934113, 0.14900412646215408] ***
*** starting iteration: 8; err: [Inf, 0.18264587279979605, 0.161256075900048, 0.15695181704871355, 0.1546774187926203, 0.15281482560932635, 0.15160697211558, 0.1501862524934113, 0.14900412646215408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18264587279979605, 0.161256075900048, 0.15695181704871355, 0.1546774187926203, 0.15281482560932635, 0.15160697211558, 0.1501862524934113, 0.14900412646215408, 0.14824296857602895] ***
*** finished computation of 7 references, err: [Inf, 0.18264587279979605, 0.161256075900048, 0.15695181704871355, 0.1546774187926203, 0.15281482560932635, 0.15160697211558, 0.1501862524934113, 0.14900412646215408, 0.14824296857602895] ***
*** center 1: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [41, 37, 0]]
** centroid: 2, normalized-entropy: 0.9981021327390103, [(1, 41), (2, 37)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 71, 20]]
** centroid: 3, normalized-entropy: 0.7597659876428757, [(2, 71), (3, 20)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 32, 0]]
** centroid: 4, normalized-entropy: 0.9738354819891416, [(1, 47), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 40, 0]]
** centroid: 5, normalized-entropy: 0.8935711016541908, [(1, 18), (2, 40)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [64, 7, 0]]
** centroid: 7, normalized-entropy: 0.4645149440905521, [(1, 64), (2, 7)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18604960687458516] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18604960687458516, 0.15330633867532015] ***
*** starting iteration: 2; err: [Inf, 0.18604960687458516, 0.15330633867532015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18604960687458516, 0.15330633867532015, 0.15111403307691215] ***
*** starting iteration: 3; err: [Inf, 0.18604960687458516, 0.15330633867532015, 0.15111403307691215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18604960687458516, 0.15330633867532015, 0.15111403307691215, 0.1505542221032083] ***
*** finished computation of 7 references, err: [Inf, 0.18604960687458516, 0.15330633867532015, 0.15111403307691215, 0.1505542221032083] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [66, 21, 0]]
** centroid: 1, normalized-entropy: 0.7973265101474423, [(1, 66), (2, 21)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 54, 10]]
** centroid: 2, normalized-entropy: 0.625262405223423, [(2, 54), (3, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [83, 18, 0]]
** centroid: 4, normalized-entropy: 0.6761627418829197, [(1, 83), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [27, 35, 0]]
** centroid: 5, normalized-entropy: 0.9879565014919159, [(1, 27), (2, 35)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 61, 7]]
** centroid: 6, normalized-entropy: 0.4782501641071144, [(2, 61), (3, 7)]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19929273713938891] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19929273713938891, 0.15080249090399594] ***
*** starting iteration: 2; err: [Inf, 0.19929273713938891, 0.15080249090399594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19929273713938891, 0.15080249090399594, 0.14771008548606188] ***
*** starting iteration: 3; err: [Inf, 0.19929273713938891, 0.15080249090399594, 0.14771008548606188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19929273713938891, 0.15080249090399594, 0.14771008548606188, 0.14641977877914905] ***
*** starting iteration: 4; err: [Inf, 0.19929273713938891, 0.15080249090399594, 0.14771008548606188, 0.14641977877914905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19929273713938891, 0.15080249090399594, 0.14771008548606188, 0.14641977877914905, 0.1455666225478053] ***
*** finished computation of 7 references, err: [Inf, 0.19929273713938891, 0.15080249090399594, 0.14771008548606188, 0.14641977877914905, 0.1455666225478053] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 54, 16]]
** centroid: 1, normalized-entropy: 0.775512658133148, [(2, 54), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 3, 0]]
** centroid: 2, normalized-entropy: 0.25524211319019174, [(1, 67), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 4, 0]]
** centroid: 3, normalized-entropy: 0.37601985096927276, [(1, 51), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [26, 55, 0]]
** centroid: 4, normalized-entropy: 0.9054522631867892, [(1, 26), (2, 55)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [17, 55, 0]]
** centroid: 5, normalized-entropy: 0.7885131605379784, [(1, 17), (2, 55)]
*** center 6: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22821063142083586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22821063142083586, 0.16280182990804315] ***
*** starting iteration: 2; err: [Inf, 0.22821063142083586, 0.16280182990804315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22821063142083586, 0.16280182990804315, 0.15341387629602105] ***
*** starting iteration: 3; err: [Inf, 0.22821063142083586, 0.16280182990804315, 0.15341387629602105] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22821063142083586, 0.16280182990804315, 0.15341387629602105, 0.15023778371233493] ***
*** starting iteration: 4; err: [Inf, 0.22821063142083586, 0.16280182990804315, 0.15341387629602105, 0.15023778371233493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22821063142083586, 0.16280182990804315, 0.15341387629602105, 0.15023778371233493, 0.14799875322543085] ***
*** starting iteration: 5; err: [Inf, 0.22821063142083586, 0.16280182990804315, 0.15341387629602105, 0.15023778371233493, 0.14799875322543085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22821063142083586, 0.16280182990804315, 0.15341387629602105, 0.15023778371233493, 0.14799875322543085, 0.14733875196287408] ***
*** finished computation of 7 references, err: [Inf, 0.22821063142083586, 0.16280182990804315, 0.15341387629602105, 0.15023778371233493, 0.14799875322543085, 0.14733875196287408] ***
*** center 1: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 11, 0]]
** centroid: 2, normalized-entropy: 0.693965967334286, [(1, 48), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 54, 17]]
** centroid: 3, normalized-entropy: 0.7941021417852022, [(2, 54), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [47, 44, 0]]
** centroid: 6, normalized-entropy: 0.9992158792218827, [(1, 47), (2, 44)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 86, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20066122968529818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20066122968529818, 0.16392620889516546] ***
*** starting iteration: 2; err: [Inf, 0.20066122968529818, 0.16392620889516546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20066122968529818, 0.16392620889516546, 0.15099980655964465] ***
*** starting iteration: 3; err: [Inf, 0.20066122968529818, 0.16392620889516546, 0.15099980655964465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20066122968529818, 0.16392620889516546, 0.15099980655964465, 0.14664892709814012] ***
*** starting iteration: 4; err: [Inf, 0.20066122968529818, 0.16392620889516546, 0.15099980655964465, 0.14664892709814012] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20066122968529818, 0.16392620889516546, 0.15099980655964465, 0.14664892709814012, 0.14509293504501694] ***
*** starting iteration: 5; err: [Inf, 0.20066122968529818, 0.16392620889516546, 0.15099980655964465, 0.14664892709814012, 0.14509293504501694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20066122968529818, 0.16392620889516546, 0.15099980655964465, 0.14664892709814012, 0.14509293504501694, 0.14476004978269338] ***
*** finished computation of 7 references, err: [Inf, 0.20066122968529818, 0.16392620889516546, 0.15099980655964465, 0.14664892709814012, 0.14509293504501694, 0.14476004978269338] ***
*** center 1: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 79, 17]]
** centroid: 3, normalized-entropy: 0.673654715229001, [(2, 79), (3, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [33, 34, 0]]
** centroid: 4, normalized-entropy: 0.9998393017810486, [(1, 33), (2, 34)]
*** center 5: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [46, 31, 0]]
** centroid: 6, normalized-entropy: 0.9724497147128791, [(1, 46), (2, 31)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [53, 20, 0]]
** centroid: 7, normalized-entropy: 0.847107490529376, [(1, 53), (2, 20)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1968869231492281] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968869231492281, 0.16135660197213292] ***
*** starting iteration: 2; err: [Inf, 0.1968869231492281, 0.16135660197213292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968869231492281, 0.16135660197213292, 0.15501183219067752] ***
*** starting iteration: 3; err: [Inf, 0.1968869231492281, 0.16135660197213292, 0.15501183219067752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968869231492281, 0.16135660197213292, 0.15501183219067752, 0.15223133125342428] ***
*** starting iteration: 4; err: [Inf, 0.1968869231492281, 0.16135660197213292, 0.15501183219067752, 0.15223133125342428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968869231492281, 0.16135660197213292, 0.15501183219067752, 0.15223133125342428, 0.1502500394359231] ***
*** starting iteration: 5; err: [Inf, 0.1968869231492281, 0.16135660197213292, 0.15501183219067752, 0.15223133125342428, 0.1502500394359231] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968869231492281, 0.16135660197213292, 0.15501183219067752, 0.15223133125342428, 0.1502500394359231, 0.14904802102874964] ***
*** starting iteration: 6; err: [Inf, 0.1968869231492281, 0.16135660197213292, 0.15501183219067752, 0.15223133125342428, 0.1502500394359231, 0.14904802102874964] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968869231492281, 0.16135660197213292, 0.15501183219067752, 0.15223133125342428, 0.1502500394359231, 0.14904802102874964, 0.14770407400652766] ***
*** starting iteration: 7; err: [Inf, 0.1968869231492281, 0.16135660197213292, 0.15501183219067752, 0.15223133125342428, 0.1502500394359231, 0.14904802102874964, 0.14770407400652766] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968869231492281, 0.16135660197213292, 0.15501183219067752, 0.15223133125342428, 0.1502500394359231, 0.14904802102874964, 0.14770407400652766, 0.1466380365304649] ***
*** starting iteration: 8; err: [Inf, 0.1968869231492281, 0.16135660197213292, 0.15501183219067752, 0.15223133125342428, 0.1502500394359231, 0.14904802102874964, 0.14770407400652766, 0.1466380365304649] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968869231492281, 0.16135660197213292, 0.15501183219067752, 0.15223133125342428, 0.1502500394359231, 0.14904802102874964, 0.14770407400652766, 0.1466380365304649, 0.14514619991835206] ***
*** starting iteration: 9; err: [Inf, 0.1968869231492281, 0.16135660197213292, 0.15501183219067752, 0.15223133125342428, 0.1502500394359231, 0.14904802102874964, 0.14770407400652766, 0.1466380365304649, 0.14514619991835206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968869231492281, 0.16135660197213292, 0.15501183219067752, 0.15223133125342428, 0.1502500394359231, 0.14904802102874964, 0.14770407400652766, 0.1466380365304649, 0.14514619991835206, 0.1442007676959038] ***
*** finished computation of 7 references, err: [Inf, 0.1968869231492281, 0.16135660197213292, 0.15501183219067752, 0.15223133125342428, 0.1502500394359231, 0.14904802102874964, 0.14770407400652766, 0.1466380365304649, 0.14514619991835206, 0.1442007676959038] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [48, 11, 0]]
** centroid: 1, normalized-entropy: 0.693965967334286, [(1, 48), (2, 11)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 51, 18]]
** centroid: 2, normalized-entropy: 0.828055725379504, [(2, 51), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [12, 61, 0]]
** centroid: 3, normalized-entropy: 0.644694043811662, [(1, 12), (2, 61)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 2, 0]]
** centroid: 4, normalized-entropy: 0.1792560669283214, [(1, 72), (2, 2)]
*** center 5: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 69, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21538243298791349] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21538243298791349, 0.16847679130360485] ***
*** starting iteration: 2; err: [Inf, 0.21538243298791349, 0.16847679130360485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21538243298791349, 0.16847679130360485, 0.15436651448439806] ***
*** starting iteration: 3; err: [Inf, 0.21538243298791349, 0.16847679130360485, 0.15436651448439806] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21538243298791349, 0.16847679130360485, 0.15436651448439806, 0.1493876660056412] ***
*** starting iteration: 4; err: [Inf, 0.21538243298791349, 0.16847679130360485, 0.15436651448439806, 0.1493876660056412] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21538243298791349, 0.16847679130360485, 0.15436651448439806, 0.1493876660056412, 0.14650290906243027] ***
*** starting iteration: 5; err: [Inf, 0.21538243298791349, 0.16847679130360485, 0.15436651448439806, 0.1493876660056412, 0.14650290906243027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21538243298791349, 0.16847679130360485, 0.15436651448439806, 0.1493876660056412, 0.14650290906243027, 0.14566934029199183] ***
*** finished computation of 7 references, err: [Inf, 0.21538243298791349, 0.16847679130360485, 0.15436651448439806, 0.1493876660056412, 0.14650290906243027, 0.14566934029199183] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 43, 14]]
** centroid: 1, normalized-entropy: 0.8042522359016421, [(2, 43), (3, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [91, 2, 0]]
** centroid: 3, normalized-entropy: 0.14981136747274781, [(1, 91), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [6, 49, 0]]
** centroid: 4, normalized-entropy: 0.4971677614160751, [(1, 6), (2, 49)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 25, 0]]
** centroid: 5, normalized-entropy: 0.9997226475394071, [(1, 26), (2, 25)]
*** center 6: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.16321633369289337] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16321633369289337, 0.15048180929664523] ***
*** starting iteration: 2; err: [Inf, 0.16321633369289337, 0.15048180929664523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16321633369289337, 0.15048180929664523, 0.14864229957107455] ***
*** starting iteration: 3; err: [Inf, 0.16321633369289337, 0.15048180929664523, 0.14864229957107455] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16321633369289337, 0.15048180929664523, 0.14864229957107455, 0.14805853683128953] ***
*** finished computation of 7 references, err: [Inf, 0.16321633369289337, 0.15048180929664523, 0.14864229957107455, 0.14805853683128953] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 3, 0]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(1, 63), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 12, 0]]
** centroid: 2, normalized-entropy: 0.7355085815538399, [(1, 46), (2, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 29, 0]]
** centroid: 3, normalized-entropy: 0.9815886212101388, [(1, 40), (2, 29)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [45, 37, 0]]
** centroid: 4, normalized-entropy: 0.9931231770192241, [(1, 45), (2, 37)]
*** center 5: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 81, 18]]
** centroid: 6, normalized-entropy: 0.6840384356390419, [(2, 81), (3, 18)]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19074268453754484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19074268453754484, 0.15661714791506529] ***
*** starting iteration: 2; err: [Inf, 0.19074268453754484, 0.15661714791506529] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19074268453754484, 0.15661714791506529, 0.14868354425020516] ***
*** starting iteration: 3; err: [Inf, 0.19074268453754484, 0.15661714791506529, 0.14868354425020516] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19074268453754484, 0.15661714791506529, 0.14868354425020516, 0.14556736209243537] ***
*** starting iteration: 4; err: [Inf, 0.19074268453754484, 0.15661714791506529, 0.14868354425020516, 0.14556736209243537] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19074268453754484, 0.15661714791506529, 0.14868354425020516, 0.14556736209243537, 0.14385489429533482] ***
*** starting iteration: 5; err: [Inf, 0.19074268453754484, 0.15661714791506529, 0.14868354425020516, 0.14556736209243537, 0.14385489429533482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19074268453754484, 0.15661714791506529, 0.14868354425020516, 0.14556736209243537, 0.14385489429533482, 0.1433268075734377] ***
*** finished computation of 7 references, err: [Inf, 0.19074268453754484, 0.15661714791506529, 0.14868354425020516, 0.14556736209243537, 0.14385489429533482, 0.1433268075734377] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 73, 0]]
** centroid: 1, normalized-entropy: 0.3877431810559867, [(1, 6), (2, 73)]
*** center 2: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 47, 16]]
** centroid: 3, normalized-entropy: 0.8175072881213616, [(2, 47), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [4, 56, 0]]
** centroid: 5, normalized-entropy: 0.3533593350214213, [(1, 4), (2, 56)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [66, 5, 0]]
** centroid: 6, normalized-entropy: 0.3674984948272913, [(1, 66), (2, 5)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [65, 2, 0]]
** centroid: 7, normalized-entropy: 0.19364280468389852, [(1, 65), (2, 2)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17362680816277862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17362680816277862, 0.15180496061593293] ***
*** starting iteration: 2; err: [Inf, 0.17362680816277862, 0.15180496061593293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17362680816277862, 0.15180496061593293, 0.1491347603723407] ***
*** starting iteration: 3; err: [Inf, 0.17362680816277862, 0.15180496061593293, 0.1491347603723407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17362680816277862, 0.15180496061593293, 0.1491347603723407, 0.14838867604359984] ***
*** finished computation of 7 references, err: [Inf, 0.17362680816277862, 0.15180496061593293, 0.1491347603723407, 0.14838867604359984] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 59, 0]]
** centroid: 1, normalized-entropy: 0.4441260450795996, [(1, 6), (2, 59)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [45, 18, 0]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(1, 45), (2, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [13, 59, 0]]
** centroid: 3, normalized-entropy: 0.6812908868842175, [(1, 13), (2, 59)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 41, 15]]
** centroid: 4, normalized-entropy: 0.8383729377099398, [(2, 41), (3, 15)]
*** center 5: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1688835392408073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1688835392408073, 0.15373300184635447] ***
*** starting iteration: 2; err: [Inf, 0.1688835392408073, 0.15373300184635447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1688835392408073, 0.15373300184635447, 0.15262808941677214] ***
*** starting iteration: 3; err: [Inf, 0.1688835392408073, 0.15373300184635447, 0.15262808941677214] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1688835392408073, 0.15373300184635447, 0.15262808941677214, 0.151722067813389] ***
*** finished computation of 7 references, err: [Inf, 0.1688835392408073, 0.15373300184635447, 0.15262808941677214, 0.151722067813389] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [76, 3, 0]]
** centroid: 1, normalized-entropy: 0.23292785546981223, [(1, 76), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 63, 4]]
** centroid: 2, normalized-entropy: 0.32625881462949274, [(2, 63), (3, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [84, 1, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 35, 13]]
** centroid: 4, normalized-entropy: 0.842657877202239, [(2, 35), (3, 13)]
*** center 5: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [24, 31, 0]]
** centroid: 6, normalized-entropy: 0.9882836109919163, [(1, 24), (2, 31)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [27, 52, 0]]
** centroid: 7, normalized-entropy: 0.9265044456232997, [(1, 27), (2, 52)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21936023520678283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21936023520678283, 0.18863048351556064] ***
*** starting iteration: 2; err: [Inf, 0.21936023520678283, 0.18863048351556064] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21936023520678283, 0.18863048351556064, 0.17594981552287936] ***
*** starting iteration: 3; err: [Inf, 0.21936023520678283, 0.18863048351556064, 0.17594981552287936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21936023520678283, 0.18863048351556064, 0.17594981552287936, 0.1573657548762858] ***
*** starting iteration: 4; err: [Inf, 0.21936023520678283, 0.18863048351556064, 0.17594981552287936, 0.1573657548762858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21936023520678283, 0.18863048351556064, 0.17594981552287936, 0.1573657548762858, 0.15044289015047252] ***
*** starting iteration: 5; err: [Inf, 0.21936023520678283, 0.18863048351556064, 0.17594981552287936, 0.1573657548762858, 0.15044289015047252] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21936023520678283, 0.18863048351556064, 0.17594981552287936, 0.1573657548762858, 0.15044289015047252, 0.14845101755671203] ***
*** starting iteration: 6; err: [Inf, 0.21936023520678283, 0.18863048351556064, 0.17594981552287936, 0.1573657548762858, 0.15044289015047252, 0.14845101755671203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21936023520678283, 0.18863048351556064, 0.17594981552287936, 0.1573657548762858, 0.15044289015047252, 0.14845101755671203, 0.14711600472405553] ***
*** starting iteration: 7; err: [Inf, 0.21936023520678283, 0.18863048351556064, 0.17594981552287936, 0.1573657548762858, 0.15044289015047252, 0.14845101755671203, 0.14711600472405553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21936023520678283, 0.18863048351556064, 0.17594981552287936, 0.1573657548762858, 0.15044289015047252, 0.14845101755671203, 0.14711600472405553, 0.14632440599612892] ***
*** finished computation of 7 references, err: [Inf, 0.21936023520678283, 0.18863048351556064, 0.17594981552287936, 0.1573657548762858, 0.15044289015047252, 0.14845101755671203, 0.14711600472405553, 0.14632440599612892] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [66, 10, 0]]
** centroid: 1, normalized-entropy: 0.5617526078313283, [(1, 66), (2, 10)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [73, 2, 0]]
** centroid: 3, normalized-entropy: 0.1773894531859976, [(1, 73), (2, 2)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 36, 0]]
** centroid: 5, normalized-entropy: 0.9994110647387552, [(1, 34), (2, 36)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 50, 19]]
** centroid: 6, normalized-entropy: 0.849054424254048, [(2, 50), (3, 19)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [51, 18, 0]]
** centroid: 7, normalized-entropy: 0.828055725379504, [(1, 51), (2, 18)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18897991497535258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18897991497535258, 0.15679079508036375] ***
*** starting iteration: 2; err: [Inf, 0.18897991497535258, 0.15679079508036375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18897991497535258, 0.15679079508036375, 0.1502733636572957] ***
*** starting iteration: 3; err: [Inf, 0.18897991497535258, 0.15679079508036375, 0.1502733636572957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18897991497535258, 0.15679079508036375, 0.1502733636572957, 0.14729785515065305] ***
*** starting iteration: 4; err: [Inf, 0.18897991497535258, 0.15679079508036375, 0.1502733636572957, 0.14729785515065305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18897991497535258, 0.15679079508036375, 0.1502733636572957, 0.14729785515065305, 0.1467035923752701] ***
*** finished computation of 7 references, err: [Inf, 0.18897991497535258, 0.15679079508036375, 0.1502733636572957, 0.14729785515065305, 0.1467035923752701] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 69, 0]]
** centroid: 1, normalized-entropy: 0.35678001438394347, [(1, 5), (2, 69)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 57, 17]]
** centroid: 3, normalized-entropy: 0.77753986416076, [(2, 57), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 46, 0]]
** centroid: 5, normalized-entropy: 0.9930554830121975, [(1, 56), (2, 46)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 12, 0]]
** centroid: 6, normalized-entropy: 0.7793498372920851, [(1, 40), (2, 12)]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2006249636011198] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2006249636011198, 0.15728362999483944] ***
*** starting iteration: 2; err: [Inf, 0.2006249636011198, 0.15728362999483944] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2006249636011198, 0.15728362999483944, 0.1502273400053382] ***
*** starting iteration: 3; err: [Inf, 0.2006249636011198, 0.15728362999483944, 0.1502273400053382] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2006249636011198, 0.15728362999483944, 0.1502273400053382, 0.14743157897982748] ***
*** starting iteration: 4; err: [Inf, 0.2006249636011198, 0.15728362999483944, 0.1502273400053382, 0.14743157897982748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2006249636011198, 0.15728362999483944, 0.1502273400053382, 0.14743157897982748, 0.14576101599261165] ***
*** starting iteration: 5; err: [Inf, 0.2006249636011198, 0.15728362999483944, 0.1502273400053382, 0.14743157897982748, 0.14576101599261165] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2006249636011198, 0.15728362999483944, 0.1502273400053382, 0.14743157897982748, 0.14576101599261165, 0.14481536119431257] ***
*** finished computation of 7 references, err: [Inf, 0.2006249636011198, 0.15728362999483944, 0.1502273400053382, 0.14743157897982748, 0.14576101599261165, 0.14481536119431257] ***
*** center 1: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 3, 0]]
** centroid: 2, normalized-entropy: 0.3013786435930858, [(1, 53), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [15, 61, 0]]
** centroid: 3, normalized-entropy: 0.7166336117927455, [(1, 15), (2, 61)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [14, 57, 0]]
** centroid: 4, normalized-entropy: 0.7162583911075451, [(1, 14), (2, 57)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [77, 2, 0]]
** centroid: 5, normalized-entropy: 0.17033057560105982, [(1, 77), (2, 2)]
*** center 6: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 48, 20]]
** centroid: 7, normalized-entropy: 0.8739810481273581, [(2, 48), (3, 20)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21948453585989774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21948453585989774, 0.17982735134102404] ***
*** starting iteration: 2; err: [Inf, 0.21948453585989774, 0.17982735134102404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21948453585989774, 0.17982735134102404, 0.1633349775171373] ***
*** starting iteration: 3; err: [Inf, 0.21948453585989774, 0.17982735134102404, 0.1633349775171373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21948453585989774, 0.17982735134102404, 0.1633349775171373, 0.15511360804736615] ***
*** starting iteration: 4; err: [Inf, 0.21948453585989774, 0.17982735134102404, 0.1633349775171373, 0.15511360804736615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21948453585989774, 0.17982735134102404, 0.1633349775171373, 0.15511360804736615, 0.15076899551507086] ***
*** starting iteration: 5; err: [Inf, 0.21948453585989774, 0.17982735134102404, 0.1633349775171373, 0.15511360804736615, 0.15076899551507086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21948453585989774, 0.17982735134102404, 0.1633349775171373, 0.15511360804736615, 0.15076899551507086, 0.1487341314186342] ***
*** starting iteration: 6; err: [Inf, 0.21948453585989774, 0.17982735134102404, 0.1633349775171373, 0.15511360804736615, 0.15076899551507086, 0.1487341314186342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21948453585989774, 0.17982735134102404, 0.1633349775171373, 0.15511360804736615, 0.15076899551507086, 0.1487341314186342, 0.14798728752415627] ***
*** finished computation of 7 references, err: [Inf, 0.21948453585989774, 0.17982735134102404, 0.1633349775171373, 0.15511360804736615, 0.15076899551507086, 0.1487341314186342, 0.14798728752415627] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [34, 20, 0]]
** centroid: 1, normalized-entropy: 0.9509560484549724, [(1, 34), (2, 20)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 66, 15]]
** centroid: 2, normalized-entropy: 0.6912898694057888, [(2, 66), (3, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 11, 0]]
** centroid: 4, normalized-entropy: 0.6442142137378306, [(1, 56), (2, 11)]
*** center 5: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [66, 38, 0]]
** centroid: 6, normalized-entropy: 0.9470622432515328, [(1, 66), (2, 38)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 370,3 => 33,1 => 597), Dict(2 => 398,3 => 43,1 => 559))
[ Info: ===== scores for single classifier: {"micro_f1":0.956,"precision":0.956,"recall":0.956,"macro_recall":0.9665261309529161,"macro_f1":0.9205607585908543,"accuracy":0.956,"class_f1":{"2":0.9435897435897436,"3":0.8431372549019608,"1":0.9749552772808586},"class_precision":{"2":0.9633507853403142,"3":0.7288135593220338,"1":0.9749552772808586},"class_recall":{"2":0.9246231155778895,"3":1.0,"1":0.9749552772808586}}
[ Info: ===== scores for 1: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9687105773350954,"macro_f1":0.9732956694037845,"accuracy":0.978,"class_f1":{"2":0.9720101781170485,"3":0.9647058823529412,"1":0.9831709477413639},"class_precision":{"2":0.9845360824742269,"3":0.9761904761904762,"1":0.9736842105263158},"class_recall":{"2":0.9597989949748744,"3":0.9534883720930233,"1":0.9928443649373881}}
[ Info: ===== scores for 5: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9658159611414256,"macro_f1":0.9581289531138989,"accuracy":0.966,"class_f1":{"2":0.9560723514211886,"3":0.9438202247191011,"1":0.9744942832014072},"class_precision":{"2":0.9840425531914894,"3":0.9130434782608695,"1":0.9584775086505191},"class_recall":{"2":0.9296482412060302,"3":0.9767441860465116,"1":0.9910554561717353}}
[ Info: ===== scores for 7: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9778828549425721,"macro_f1":0.9654635527246992,"accuracy":0.971,"class_f1":{"2":0.9630573248407643,"3":0.9555555555555556,"1":0.9777777777777777},"class_precision":{"2":0.9767441860465116,"3":0.9148936170212766,"1":0.9717314487632509},"class_recall":{"2":0.949748743718593,"3":1.0,"1":0.9838998211091234}}
[ Info: ===== scores for 9: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9801541997405033,"macro_f1":0.964425384565005,"accuracy":0.974,"class_f1":{"2":0.9669211195928753,"3":0.945054945054945,"1":0.981300089047195},"class_precision":{"2":0.979381443298969,"3":0.8958333333333334,"1":0.9769503546099291},"class_recall":{"2":0.9547738693467337,"3":1.0,"1":0.9856887298747764}}
[ Info: ===== scores for 11: {"micro_f1":0.975,"precision":0.975,"recall":0.975,"macro_recall":0.9809917206785267,"macro_f1":0.9651544774498658,"accuracy":0.975,"class_f1":{"2":0.9682337992376111,"3":0.945054945054945,"1":0.9821746880570411},"class_precision":{"2":0.9794344473007712,"3":0.8958333333333334,"1":0.9786856127886323},"class_recall":{"2":0.957286432160804,"3":1.0,"1":0.9856887298747764}}
(score = 0.973, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.978,"k":1,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9687105773350954,"macro_f1":0.9732956694037845,"accuracy":0.978,"class_f1":{"2":0.9720101781170485,"3":0.9647058823529412,"1":0.9831709477413639},"class_precision":{"2":0.9845360824742269,"3":0.9761904761904762,"1":0.9736842105263158},"class_recall":{"2":0.9597989949748744,"3":0.9534883720930233,"1":0.9928443649373881}}
Test Summary: | Pass  Total
AKNC          |    8      8
[78, 1, 4, 4, 2, 3, 1, 2, 2, 5, 6, 6, 50, 13, 2, 4, 5, 1, 2, 3, 3, 11, 7, 54, 9, 3, 4, 19, 5, 10, 3, 20, 23, 3, 1, 2, 23, 7, 46, 1, 5, 13, 17, 11, 127, 32, 2, 4, 17, 6, 6, 11, 61, 29, 8, 3, 10, 6, 14, 2, 2, 15, 25, 35, 7, 13, 12, 8, 46, 17, 15, 2, 7, 12, 35, 3, 32, 96, 10, 16, 4, 34, 17, 15, 6, 8, 26, 12, 123, 29, 19, 7, 31, 26, 19, 111, 13, 5, 29, 43, 31, 34, 5, 43, 49, 18, 6, 5, 26, 21, 44, 32, 10, 26, 92, 2, 52, 101, 24, 17, 87, 3, 58, 22, 160, 28, 15, 14, 22, 2, 5, 28, 8, 24, 43, 2, 12, 27, 9, 28, 3, 30, 16, 49, 4, 32, 10, 35, 2, 46, 31, 8, 36, 73, 8, 16, 61, 5, 17, 50, 101, 77, 6, 2, 36, 27, 16, 14, 4, 15, 31, 14, 13, 282, 11, 20, 340, 16, 19, 239, 10, 57, 18, 48, 1620, 15, 43, 2, 125, 41, 99, 18, 20, 2, 29, 37, 2, 22, 78, 18, 10, 10, 15, 25, 13, 13, 51, 2, 35, 8, 48, 171, 2, 11, 14, 74, 60, 135, 1, 14, 8, 6, 4, 62, 12, 4, 5, 41, 60, 37, 18, 45, 1, 25, 27, 39, 22, 9, 6, 19, 24, 12, 8, 3, 12, 32, 21, 11, 8, 43, 51, 8, 8, 37, 97, 7, 14, 17, 17, 19, 41, 48, 25, 25, 53, 27, 17, 118, 48, 40, 221, 6, 44, 22, 18, 5, 22, 3, 8, 27, 137, 21, 12, 3, 33, 2, 1, 13, 23, 9, 32, 5, 29, 19, 9, 5, 8, 8, 9, 22]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6499999999999999, speedup = 0.2817852336250272, eval_ratio = 0.10005900000000001)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.36483134920634913,"recall":0.36458333333333326,"f1":null,"seconds":0.0002454277127981186,"exhaustive_search_seconds":0.00034978240728378296,"evaluations":592.6953125,"distances_sum":1732.1585302661292}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5434027777777777,"recall":0.5434027777777777,"f1":null,"seconds":0.0005768612027168274,"exhaustive_search_seconds":0.00034978240728378296,"evaluations":870.8984375,"distances_sum":1627.3432594029455}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.645833333333333,"recall":0.645833333333333,"f1":null,"seconds":0.0005379244685173035,"exhaustive_search_seconds":0.00034978240728378296,"evaluations":1071.3828125,"distances_sum":1560.2950089828284}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7317708333333329,"recall":0.7317708333333329,"f1":null,"seconds":0.0006228853017091751,"exhaustive_search_seconds":0.00034978240728378296,"evaluations":1194.3515625,"distances_sum":1527.118118666801}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7864583333333324,"recall":0.7864583333333324,"f1":0.7864583333333324,"seconds":0.0007202532142400742,"exhaustive_search_seconds":0.00034978240728378296,"evaluations":1322.921875,"distances_sum":1510.8873130146815}
KCenters.DeloneInvIndex> reached performance {"precision":0.8298611111111099,"recall":0.8298611111111099,"f1":0.8298611111111099,"seconds":0.0009228978306055069,"exhaustive_search_seconds":0.00034978240728378296,"evaluations":1470.7265625,"distances_sum":1500.0258388654968}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8070000000000005, speedup = 0.5113880518357364, eval_ratio = 0.137844)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
