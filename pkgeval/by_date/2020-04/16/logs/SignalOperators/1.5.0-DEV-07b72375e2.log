Julia Version 1.5.0-DEV.633
Commit 07b72375e2 (2020-04-15 15:23 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed MKL_jll ────────────────────── v2019.0.117+2
  Installed FFTW_jll ───────────────────── v3.3.9+5
  Installed Mocking ────────────────────── v0.7.1
  Installed Libiconv_jll ───────────────── v1.16.0+2
  Installed SignalOperators ────────────── v0.4.0
  Installed MacroTools ─────────────────── v0.5.5
  Installed IterTools ──────────────────── v1.3.0
  Installed TimeZones ──────────────────── v1.0.1
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed XML2_jll ───────────────────── v2.9.9+4
  Installed MetaArrays ─────────────────── v0.2.7
  Installed LambdaFn ───────────────────── v0.3.0
  Installed ConstructionBase ───────────── v1.0.0
  Installed EzXML ──────────────────────── v1.1.0
  Installed Requires ───────────────────── v0.5.2
  Installed DSP ────────────────────────── v0.6.4
  Installed Polynomials ────────────────── v0.7.0
  Installed Unitful ────────────────────── v0.18.0
  Installed FFTW ───────────────────────── v1.2.0
  Installed IntelOpenMP_jll ────────────── v2018.0.3+0
  Installed FillArrays ─────────────────── v0.8.7
  Installed ExprTools ──────────────────── v0.1.1
  Installed RecipesBase ────────────────── v1.0.0
  Installed Reexport ───────────────────── v0.2.0
  Installed Zlib_jll ───────────────────── v1.2.11+9
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed SignalBase ─────────────────── v0.1.1
  Installed SpecialFunctions ───────────── v0.10.0
  Installed FileIO ─────────────────────── v1.2.4
  Installed Intervals ──────────────────── v1.1.0
  Installed PrettyPrinting ─────────────── v0.2.0
  Installed Compat ─────────────────────── v2.2.0
  Installed AbstractFFTs ───────────────── v0.5.0
Updating `~/.julia/environments/v1.5/Project.toml`
  [4d633899] + SignalOperators v0.4.0
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [34da2185] + Compat v2.2.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [187b0558] + ConstructionBase v1.0.0
  [717857b8] + DSP v0.6.4
  [e2ba6199] + ExprTools v0.1.1
  [8f5d6c58] + EzXML v1.1.0
  [7a1cc6ca] + FFTW v1.2.0
  [f5851436] + FFTW_jll v3.3.9+5
  [5789e2e9] + FileIO v1.2.4
  [1a297f60] + FillArrays v0.8.7
  [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+0
  [d8418881] + Intervals v1.1.0
  [c8e1da08] + IterTools v1.3.0
  [fcefd6c4] + LambdaFn v0.3.0
  [94ce4f54] + Libiconv_jll v1.16.0+2
  [856f044c] + MKL_jll v2019.0.117+2
  [1914dd2f] + MacroTools v0.5.5
  [36b8f3f0] + MetaArrays v0.2.7
  [78c3b35d] + Mocking v0.7.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [f27b6e38] + Polynomials v0.7.0
  [54e16d92] + PrettyPrinting v0.2.0
  [3cdcf5f2] + RecipesBase v1.0.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v0.5.2
  [00c44e92] + SignalBase v0.1.1
  [4d633899] + SignalOperators v0.4.0
  [276daf66] + SpecialFunctions v0.10.0
  [f269a46b] + TimeZones v1.0.1
  [1986cc42] + Unitful v0.18.0
  [02c8fc9c] + XML2_jll v2.9.9+4
  [83775a58] + Zlib_jll v1.2.11+9
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building TimeZones → `~/.julia/packages/TimeZones/zymSN/deps/build.log`
   Building FFTW ─────→ `~/.julia/packages/FFTW/qqcBj/deps/build.log`
    Testing SignalOperators
Status `/tmp/jl_VFWrdD/Project.toml`
  [39de3d68] AxisArrays v0.4.2
  [6e4b80f9] BenchmarkTools v0.5.0
  [34da2185] Compat v2.2.0
  [717857b8] DSP v0.6.4
  [0703355e] DimensionalData v0.1.1
  [5789e2e9] FileIO v1.2.4
  [1a297f60] FillArrays v0.8.7
  [53c48c17] FixedPointNumbers v0.8.0
  [fcefd6c4] LambdaFn v0.3.0
  [36b8f3f0] MetaArrays v0.2.7
  [54e16d92] PrettyPrinting v0.2.0
  [92933f4c] ProgressMeter v1.2.0
  [ae029012] Requires v0.5.2
  [00c44e92] SignalBase v0.1.1
  [4d633899] SignalOperators v0.4.0
  [1986cc42] Unitful v0.18.0
  [8149f6b0] WAV v1.0.3
  [44cfe95a] Pkg
  [9a3f8284] Random
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_VFWrdD/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [39de3d68] AxisArrays v0.4.2
  [6e4b80f9] BenchmarkTools v0.5.0
  [34da2185] Compat v2.2.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [187b0558] ConstructionBase v1.0.0
  [717857b8] DSP v0.6.4
  [0703355e] DimensionalData v0.1.1
  [da5c29d0] EllipsisNotation v0.4.0
  [e2ba6199] ExprTools v0.1.1
  [8f5d6c58] EzXML v1.1.0
  [7a1cc6ca] FFTW v1.2.0
  [f5851436] FFTW_jll v3.3.9+5
  [5789e2e9] FileIO v1.2.4
  [1a297f60] FillArrays v0.8.7
  [53c48c17] FixedPointNumbers v0.8.0
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [8197267c] IntervalSets v0.4.0
  [d8418881] Intervals v1.1.0
  [c8e1da08] IterTools v1.3.0
  [682c06a0] JSON v0.21.0
  [fcefd6c4] LambdaFn v0.3.0
  [94ce4f54] Libiconv_jll v1.16.0+2
  [856f044c] MKL_jll v2019.0.117+2
  [1914dd2f] MacroTools v0.5.5
  [36b8f3f0] MetaArrays v0.2.7
  [78c3b35d] Mocking v0.7.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [69de0a69] Parsers v1.0.1
  [f27b6e38] Polynomials v0.7.0
  [54e16d92] PrettyPrinting v0.2.0
  [92933f4c] ProgressMeter v1.2.0
  [b3c3ace0] RangeArrays v0.3.2
  [3cdcf5f2] RecipesBase v1.0.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v0.5.2
  [00c44e92] SignalBase v0.1.1
  [4d633899] SignalOperators v0.4.0
  [276daf66] SpecialFunctions v0.10.0
  [f269a46b] TimeZones v1.0.1
  [1986cc42] Unitful v0.18.0
  [8149f6b0] WAV v1.0.3
  [02c8fc9c] XML2_jll v2.9.9+4
  [83775a58] Zlib_jll v1.2.11+9
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running tests...  3%|█                                  |  ETA: 0:05:06[KRunning tests...  6%|██▏                                |  ETA: 0:04:11[KRunning tests...  9%|███▏                               |  ETA: 0:03:40[KRunning tests... 12%|████▎                              |  ETA: 0:03:26[KRunning tests... 15%|█████▎                             |  ETA: 0:02:41[KRunning tests... 18%|██████▍                            |  ETA: 0:02:34[KRunning tests... 21%|███████▍                           |  ETA: 0:02:25[KRunning tests... 24%|████████▌                          |  ETA: 0:02:45[KRunning tests... 27%|█████████▌                         |  ETA: 0:03:29[KRunning tests... 30%|██████████▋                        |  ETA: 0:03:38[KRunning tests... 33%|███████████▋                       |  ETA: 0:03:20[KRunning tests... 36%|████████████▊                      |  ETA: 0:03:18[KFiltering: Error During Test at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:314
  Got exception outside of a @test
  UndefVarError: Forward not defined
  Stacktrace:
   [1] SigChannel(::UnitRange{Int64}) at /home/pkgeval/.julia/packages/DimensionalData/sszkE/src/dimension.jl:192
   [2] initsink(::SignalOperators.FilteredSignal{Float64,SignalOperators.MapSignal{SignalOperators.FnBr{typeof(+)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64}},typeof(zero),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(zero),true},SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(zero),true}}},SignalOperators.FilterFn{UnionAll,ZeroPoleGain{Complex{Float64},Complex{Float64},Float64},Tuple{Quantity{Int64,𝐓^-1,Unitful.FreeUnits{(Hz,),𝐓^-1,nothing}}}},Float64}, ::Type{DimensionalArray}) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/DimensionalData.jl:39
   [3] sink(::SignalOperators.FilteredSignal{Float64,SignalOperators.MapSignal{SignalOperators.FnBr{typeof(+)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64}},typeof(zero),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(zero),true},SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(zero),true}}},SignalOperators.FilterFn{UnionAll,ZeroPoleGain{Complex{Float64},Complex{Float64},Float64},Tuple{Quantity{Int64,𝐓^-1,Unitful.FreeUnits{(Hz,),𝐓^-1,nothing}}}},Float64}, ::Type{DimensionalArray}, ::SignalOperators.SinkCut) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/sink.jl:89
   [4] sink at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/sink.jl:64 [inlined]
   [5] DimensionalArray(::SignalOperators.FilteredSignal{Float64,SignalOperators.MapSignal{SignalOperators.FnBr{typeof(+)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64}},typeof(zero),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(zero),true},SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(zero),true}}},SignalOperators.FilterFn{UnionAll,ZeroPoleGain{Complex{Float64},Complex{Float64},Float64},Tuple{Quantity{Int64,𝐓^-1,Unitful.FreeUnits{(Hz,),𝐓^-1,nothing}}}},Float64}) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/DimensionalData.jl:42
   [6] |>(::SignalOperators.FilteredSignal{Float64,SignalOperators.MapSignal{SignalOperators.FnBr{typeof(+)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64}},typeof(zero),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(zero),true},SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(zero),true}}},SignalOperators.FilterFn{UnionAll,ZeroPoleGain{Complex{Float64},Complex{Float64},Float64},Tuple{Quantity{Int64,𝐓^-1,Unitful.FreeUnits{(Hz,),𝐓^-1,nothing}}}},Float64}, ::Type{T} where T) at ./operators.jl:823
   [7] top-level scope at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:319
   [8] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [9] top-level scope at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:315
   [10] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [11] top-level scope at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:31
   [12] include(::String) at ./client.jl:442
   [13] top-level scope at none:6
   [14] eval(::Module, ::Any) at ./boot.jl:331
   [15] exec_options(::Base.JLOptions) at ./client.jl:265
   [16] _start() at ./client.jl:491
  
Running tests... 39%|█████████████▊                     |  ETA: 0:03:08[KRamps: Error During Test at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:373
  Got exception outside of a @test
  UndefVarError: Forward not defined
  Stacktrace:
   [1] SigChannel(::UnitRange{Int64}) at /home/pkgeval/.julia/packages/DimensionalData/sszkE/src/dimension.jl:192
   [2] initsink(::SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}},SignalOperators.RampSignal{:off,SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:off,SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}}, ::Type{DimensionalArray}) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/DimensionalData.jl:39
   [3] sink(::SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}},SignalOperators.RampSignal{:off,SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:off,SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}}, ::Type{DimensionalArray}, ::SignalOperators.SinkCut) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/sink.jl:89
   [4] sink at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/sink.jl:64 [inlined]
   [5] DimensionalArray(::SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}},SignalOperators.RampSignal{:off,SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:off,SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}}) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/DimensionalData.jl:42
   [6] |>(::SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}},SignalOperators.RampSignal{:off,SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:off,SignalOperators.MapSignal{SignalOperators.FnBr{typeof(*)},2,1,Float64,Float64,Tuple{Float64},Tuple{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64}},typeof(one),Tuple{SignalOperators.PaddedSignal{SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},typeof(one),true},SignalOperators.PaddedSignal{SignalOperators.RampSignal{:on,SignalOperators.CutApply{SignalOperators.SignalFunction{typeof(sin),Int64,Tuple{Float64},Float64,Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}},Quantity{Int64,𝐓,Unitful.FreeUnits{(ms,),𝐓,nothing}},typeof(sinramp),Float64},typeof(one),true}}}, ::Type{T} where T) at ./operators.jl:823
   [7] top-level scope at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:376
   [8] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [9] top-level scope at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:374
   [10] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [11] top-level scope at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:31
   [12] include(::String) at ./client.jl:442
   [13] top-level scope at none:6
   [14] eval(::Module, ::Any) at ./boot.jl:331
   [15] exec_options(::Base.JLOptions) at ./client.jl:265
   [16] _start() at ./client.jl:491
  
Running tests... 42%|██████████████▉                    |  ETA: 0:02:52[KRunning tests... 45%|███████████████▉                   |  ETA: 0:02:48[KRunning tests... 48%|█████████████████                  |  ETA: 0:02:36[KRunning tests... 52%|██████████████████                 |  ETA: 0:02:29[KRunning tests... 55%|███████████████████▏               |  ETA: 0:02:13[KRunning tests... 58%|████████████████████▏              |  ETA: 0:02:13[KRunning tests... 61%|█████████████████████▎             |  ETA: 0:02:16[KRunning tests... 64%|██████████████████████▎            |  ETA: 0:02:02[KRunning tests... 67%|███████████████████████▍           |  ETA: 0:01:47[KRunning tests... 70%|████████████████████████▍          |  ETA: 0:01:44[KRunning tests... 73%|█████████████████████████▌         |  ETA: 0:01:35[KNon-lazy operators: Error During Test at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:672
  Got exception outside of a @test
  UndefVarError: Forward not defined
  Stacktrace:
   [1] SigChannel(::UnitRange{Int64}) at /home/pkgeval/.julia/packages/DimensionalData/sszkE/src/dimension.jl:192
   [2] initsink(::Tuple{Array{Float64,2},Float64}, ::Type{DimensionalArray}) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/DimensionalData.jl:39
   [3] sink(::Tuple{Array{Float64,2},Float64}, ::Type{DimensionalArray}, ::SignalOperators.DataCut) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/sink.jl:72
   [4] sink(::Tuple{Array{Float64,2},Float64}, ::Type{DimensionalArray}) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/sink.jl:64
   [5] (::SignalOperators.var"#9#10"{UnionAll})(::Tuple{Array{Float64,2},Float64}) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/sink.jl:29
   [6] |>(::Tuple{Array{Float64,2},Float64}, ::SignalOperators.var"#9#10"{UnionAll}) at ./operators.jl:823
   [7] top-level scope at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:673
   [8] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [9] top-level scope at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:673
   [10] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [11] top-level scope at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:31
   [12] include(::String) at ./client.jl:442
   [13] top-level scope at none:6
   [14] eval(::Module, ::Any) at ./boot.jl:331
   [15] exec_options(::Base.JLOptions) at ./client.jl:265
   [16] _start() at ./client.jl:491
  
Running tests... 76%|██████████████████████████▌        |  ETA: 0:01:21[KRunning tests... 79%|███████████████████████████▋       |  ETA: 0:01:19[KRunning tests... 82%|████████████████████████████▋      |  ETA: 0:01:15[KRunning tests... 85%|█████████████████████████████▊     |  ETA: 0:01:04[KStress tests: Error During Test at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:821
  Test threw exception
  Expression: (sink(x, DimensionalArray))[Time(Between(2s, 4s))] ≈ sink(afterx, DimensionalArray)
  UndefVarError: Forward not defined
  Stacktrace:
   [1] SigChannel(::UnitRange{Int64}) at /home/pkgeval/.julia/packages/DimensionalData/sszkE/src/dimension.jl:192
   [2] initsink(::SignalOperators.CutApply{SignalOperators.FilteredSignal{Float64,Tuple{Array{Float64,2},Float64},SignalOperators.FilterFn{UnionAll,ZeroPoleGain{Complex{Float64},Complex{Float64},Float64},Tuple{Quantity{Int64,𝐓^-1,Unitful.FreeUnits{(Hz,),𝐓^-1,nothing}}}},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64}, ::Type{DimensionalArray}) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/DimensionalData.jl:39
   [3] sink(::SignalOperators.CutApply{SignalOperators.FilteredSignal{Float64,Tuple{Array{Float64,2},Float64},SignalOperators.FilterFn{UnionAll,ZeroPoleGain{Complex{Float64},Complex{Float64},Float64},Tuple{Quantity{Int64,𝐓^-1,Unitful.FreeUnits{(Hz,),𝐓^-1,nothing}}}},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64}, ::Type{DimensionalArray}, ::SignalOperators.SinkCut) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/sink.jl:89
   [4] sink(::SignalOperators.CutApply{SignalOperators.FilteredSignal{Float64,Tuple{Array{Float64,2},Float64},SignalOperators.FilterFn{UnionAll,ZeroPoleGain{Complex{Float64},Complex{Float64},Float64},Tuple{Quantity{Int64,𝐓^-1,Unitful.FreeUnits{(Hz,),𝐓^-1,nothing}}}},Float64},Quantity{Int64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Val{:Until},Float64}, ::Type{DimensionalArray}) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/sink.jl:64
   [5] top-level scope at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:821
   [6] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [7] top-level scope at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:810
   [8] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [9] top-level scope at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:31
  
Running tests... 88%|██████████████████████████████▊    |  ETA: 0:01:04[KRunning tests... 91%|███████████████████████████████▉   |  ETA: 0:00:56[KTesting DimensionalData: Error During Test at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:920
  Got exception outside of a @test
  UndefVarError: Forward not defined
  Stacktrace:
   [1] SigChannel(::UnitRange{Int64}) at /home/pkgeval/.julia/packages/DimensionalData/sszkE/src/dimension.jl:192
   [2] initsink(::Tuple{Array{Float64,2},Float64}, ::Type{DimensionalArray}) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/DimensionalData.jl:39
   [3] sink(::Tuple{Array{Float64,2},Float64}, ::Type{DimensionalArray}, ::SignalOperators.DataCut) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/sink.jl:72
   [4] sink(::Tuple{Array{Float64,2},Float64}, ::Type{DimensionalArray}) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/sink.jl:64
   [5] (::SignalOperators.var"#9#10"{UnionAll})(::Tuple{Array{Float64,2},Float64}) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/sink.jl:29
   [6] |>(::Tuple{Array{Float64,2},Float64}, ::SignalOperators.var"#9#10"{UnionAll}) at ./operators.jl:823
   [7] top-level scope at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:924
   [8] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [9] top-level scope at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:921
   [10] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [11] top-level scope at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:31
   [12] include(::String) at ./client.jl:442
   [13] top-level scope at none:6
   [14] eval(::Module, ::Any) at ./boot.jl:331
   [15] exec_options(::Base.JLOptions) at ./client.jl:265
   [16] _start() at ./client.jl:491
  
Running tests... 94%|████████████████████████████████▉  |  ETA: 0:00:37[K Activating new environment at `~/.julia/packages/SignalOperators/VmWyE/test/jl_1xn6pI/Project.toml`
  Resolving package versions...
  Installed Ogg_jll ─────────── v1.3.3+0
  Installed libsndfile_jll ──── v1.0.28+1
  Installed FLAC_jll ────────── v1.3.3+1
  Installed TreeViews ───────── v0.3.0
  Installed FixedPointNumbers ─ v0.6.1
  Installed LibSndFile ──────── v2.3.0
  Installed Unitful ─────────── v0.17.0
  Installed SampledSignals ──── v2.1.0
  Installed libvorbis_jll ───── v1.3.6+2
  Installed IntervalSets ────── v0.3.2
Updating `~/.julia/packages/SignalOperators/VmWyE/test/jl_1xn6pI/Project.toml`
  [b13ce0c6] + LibSndFile v2.3.0
Updating `~/.julia/packages/SignalOperators/VmWyE/test/jl_1xn6pI/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [34da2185] + Compat v2.2.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [717857b8] + DSP v0.6.4
  [e2ba6199] + ExprTools v0.1.1
  [8f5d6c58] + EzXML v1.1.0
  [7a1cc6ca] + FFTW v1.2.0
  [f5851436] + FFTW_jll v3.3.9+5
  [1d38b3a6] + FLAC_jll v1.3.3+1
  [5789e2e9] + FileIO v1.2.4
  [53c48c17] + FixedPointNumbers v0.6.1
  [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+0
  [8197267c] + IntervalSets v0.3.2
  [d8418881] + Intervals v1.1.0
  [c8e1da08] + IterTools v1.3.0
  [b13ce0c6] + LibSndFile v2.3.0
  [94ce4f54] + Libiconv_jll v1.16.0+2
  [856f044c] + MKL_jll v2019.0.117+2
  [78c3b35d] + Mocking v0.7.1
  [e7412a2a] + Ogg_jll v1.3.3+0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [f27b6e38] + Polynomials v0.7.0
  [3cdcf5f2] + RecipesBase v1.0.0
  [189a3867] + Reexport v0.2.0
  [bd7594eb] + SampledSignals v2.1.0
  [276daf66] + SpecialFunctions v0.10.0
  [f269a46b] + TimeZones v1.0.1
  [a2a6695c] + TreeViews v0.3.0
  [1986cc42] + Unitful v0.17.0
  [02c8fc9c] + XML2_jll v2.9.9+4
  [83775a58] + Zlib_jll v1.2.11+9
  [5bf562c0] + libsndfile_jll v1.0.28+1
  [f27f6e37] + libvorbis_jll v1.3.6+2
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
  Resolving package versions...
Updating `~/.julia/packages/SignalOperators/VmWyE/test/jl_1xn6pI/Project.toml`
  [bd7594eb] + SampledSignals v2.1.0
No Changes to `~/.julia/packages/SignalOperators/VmWyE/test/jl_1xn6pI/Manifest.toml`
[ Info: Loading LibSndFile backend for SignalOperators.
Running tests... 97%|██████████████████████████████████ |  ETA: 0:00:21[KTest adaptive return type: Error During Test at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:954
  Test threw exception
  Expression: sink(Mix(1, data)) isa DimensionalArray
  UndefVarError: Forward not defined
  Stacktrace:
   [1] SigChannel(::UnitRange{Int64}) at /home/pkgeval/.julia/packages/DimensionalData/sszkE/src/dimension.jl:192
   [2] initsink(::SignalOperators.MapSignal{SignalOperators.FnBr{typeof(+)},2,2,Float64,Float64,Tuple{Float64,Float64},Tuple{SignalOperators.MapSignal{SignalOperators.AsNChannels,1,1,Int64,Float64,Tuple{Int64,Int64},Tuple{SignalOperators.NumberSignal{Int64,Float64,false}},typeof(zero),Tuple{SignalOperators.NumberSignal{Int64,Float64,false}}},DimensionalArray{Float64,2,Tuple{Time{StepRangeLen{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Base.TwicePrecision{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}}},Base.TwicePrecision{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}}}},Nothing,DimensionalData.Forward},X{LinRange{Float64},Nothing,DimensionalData.Forward}},Tuple{},Array{Float64,2}}},typeof(zero),Tuple{SignalOperators.MapSignal{SignalOperators.AsNChannels,1,1,Int64,Float64,Tuple{Int64,Int64},Tuple{SignalOperators.NumberSignal{Int64,Float64,false}},typeof(zero),Tuple{SignalOperators.NumberSignal{Int64,Float64,false}}},SignalOperators.PaddedSignal{DimensionalArray{Float64,2,Tuple{Time{StepRangeLen{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Base.TwicePrecision{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}}},Base.TwicePrecision{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}}}},Nothing,DimensionalData.Forward},X{LinRange{Float64},Nothing,DimensionalData.Forward}},Tuple{},Array{Float64,2}},typeof(zero),true}}}, ::Type{DimensionalArray{Float64,2,Tuple{Time{StepRangeLen{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Base.TwicePrecision{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}}},Base.TwicePrecision{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}}}},Nothing,DimensionalData.Forward},X{LinRange{Float64},Nothing,DimensionalData.Forward}},Tuple{},Array{Float64,2}}}) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/DimensionalData.jl:39
   [3] sink(::SignalOperators.MapSignal{SignalOperators.FnBr{typeof(+)},2,2,Float64,Float64,Tuple{Float64,Float64},Tuple{SignalOperators.MapSignal{SignalOperators.AsNChannels,1,1,Int64,Float64,Tuple{Int64,Int64},Tuple{SignalOperators.NumberSignal{Int64,Float64,false}},typeof(zero),Tuple{SignalOperators.NumberSignal{Int64,Float64,false}}},DimensionalArray{Float64,2,Tuple{Time{StepRangeLen{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Base.TwicePrecision{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}}},Base.TwicePrecision{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}}}},Nothing,DimensionalData.Forward},X{LinRange{Float64},Nothing,DimensionalData.Forward}},Tuple{},Array{Float64,2}}},typeof(zero),Tuple{SignalOperators.MapSignal{SignalOperators.AsNChannels,1,1,Int64,Float64,Tuple{Int64,Int64},Tuple{SignalOperators.NumberSignal{Int64,Float64,false}},typeof(zero),Tuple{SignalOperators.NumberSignal{Int64,Float64,false}}},SignalOperators.PaddedSignal{DimensionalArray{Float64,2,Tuple{Time{StepRangeLen{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Base.TwicePrecision{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}}},Base.TwicePrecision{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}}}},Nothing,DimensionalData.Forward},X{LinRange{Float64},Nothing,DimensionalData.Forward}},Tuple{},Array{Float64,2}},typeof(zero),true}}}, ::Type{DimensionalArray{Float64,2,Tuple{Time{StepRangeLen{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Base.TwicePrecision{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}}},Base.TwicePrecision{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}}}},Nothing,DimensionalData.Forward},X{LinRange{Float64},Nothing,DimensionalData.Forward}},Tuple{},Array{Float64,2}}}, ::SignalOperators.SinkCut) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/sink.jl:89
   [4] sink at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/sink.jl:64 [inlined]
   [5] sink(::SignalOperators.MapSignal{SignalOperators.FnBr{typeof(+)},2,2,Float64,Float64,Tuple{Float64,Float64},Tuple{SignalOperators.MapSignal{SignalOperators.AsNChannels,1,1,Int64,Float64,Tuple{Int64,Int64},Tuple{SignalOperators.NumberSignal{Int64,Float64,false}},typeof(zero),Tuple{SignalOperators.NumberSignal{Int64,Float64,false}}},DimensionalArray{Float64,2,Tuple{Time{StepRangeLen{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Base.TwicePrecision{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}}},Base.TwicePrecision{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}}}},Nothing,DimensionalData.Forward},X{LinRange{Float64},Nothing,DimensionalData.Forward}},Tuple{},Array{Float64,2}}},typeof(zero),Tuple{SignalOperators.MapSignal{SignalOperators.AsNChannels,1,1,Int64,Float64,Tuple{Int64,Int64},Tuple{SignalOperators.NumberSignal{Int64,Float64,false}},typeof(zero),Tuple{SignalOperators.NumberSignal{Int64,Float64,false}}},SignalOperators.PaddedSignal{DimensionalArray{Float64,2,Tuple{Time{StepRangeLen{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}},Base.TwicePrecision{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}}},Base.TwicePrecision{Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}}}},Nothing,DimensionalData.Forward},X{LinRange{Float64},Nothing,DimensionalData.Forward}},Tuple{},Array{Float64,2}},typeof(zero),true}}}) at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/src/sink.jl:30
   [6] top-level scope at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:954
   [7] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:951
   [9] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:31
  
Running tests...100%|███████████████████████████████████| Time: 0:11:18[K
Test Summary:                           | Pass  Error  Total
SignalOperators.jl                      |  404      6    410
  Function Currying                     |   11            11
  Basic signals                         |   12            12
  Array tuple output                    |    2             2
  Function signals                      |    6             6
  Sink to arrays                        |    1             1
  Files as signals                      |    2             2
  Change channel Count                  |    6             6
  Cutting Operators                     |   36            36
  Padding                               |   78            78
  Appending                             |   14            14
  Mixing                                |    6             6
  Handling of padded Mix and Amplify    |    7             7
  Filtering                             |           1      1
  Ramps                                 |           1      1
  Resampling                            |   34            34
  Automatic reformatting                |    4             4
  Axis Arrays                           |    2             2
  Operating over empty signals          |    4             4
  Normpower                             |    4             4
  Handling of arrays/numbers            |   23            23
  Handling of infinite signals          |   20            20
  Test that non-signals correctly error |   16            16
  Handle of frame units                 |    7             7
  Handle printing                       |   21            21
  Non-lazy operators                    |           1      1
  Handle lower bitrate                  |   18            18
  Handle fixed point numbers            |   20            20
  Handle unknown frame rates            |   22            22
  Short-block Operators                 |    8             8
  Stress tests                          |   10      1     11
  README Examples                       |    3             3
  Testing DimensionalData               |    1      1      2
  Testing LibSndFile                    |    2             2
  Test adaptive return type             |    4      1      5
ERROR: LoadError: Some tests did not pass: 404 passed, 0 failed, 6 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/SignalOperators/VmWyE/test/runtests.jl:29
ERROR: Package SignalOperators errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1516
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:316
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:303
 [5] #test#68 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [7] #test#67 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [11] top-level scope at none:16
