Julia Version 1.5.0-DEV.667
Commit a8275e544a (2020-04-23 15:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.2.4
Updating `~/.julia/environments/v1.5/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [5789e2e9] + FileIO v1.2.4
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_cvBew5/Project.toml`
  [5789e2e9] FileIO v1.2.4
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_cvBew5/Manifest.toml`
  [5789e2e9] FileIO v1.2.4
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723362780381064
curgen: 20 fitness: 0.21723362780381064
curgen: 30 fitness: 0.21723362780381064
curgen: 40 fitness: 0.21723362780381064
curgen: 50 fitness: 0.21723362780381064
CoordinateCreature{Array{Float64,1}}([0.22255119177676028], -0.21723362780381064) 0.22255119177676028 -0.21723362780381064
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.258059902527254
curgen: 100 fitness: 3.258204805844367
curgen: 150 fitness: 3.2582166144662805
curgen: 200 fitness: 3.258364523267023
curgen: 250 fitness: 3.258400755740481
curgen: 300 fitness: 3.2584614792167677
curgen: 350 fitness: 3.258465956233865
curgen: 400 fitness: 3.2584746525754325
curgen: 450 fitness: 3.2584750253293717
curgen: 500 fitness: 3.25847909270675
CoordinateCreature{Array{Float64,1}}([-0.2226788275537965, 0.22262891078598418, -0.22255587990098946, -0.2226727086084371, -0.22215595215744094, 0.22265404386432106, 0.2225343737571519, 0.2228235584550078, 0.22260785738875602, 0.2226826030507362, 0.2228468484121871, -0.2223703669624372, 0.22238343457321688, -0.22247290879818651, -0.22288978574316642], -3.25847909270675) [-0.2226788275537965, 0.22262891078598418, -0.22255587990098946, -0.2226727086084371, -0.22215595215744094, 0.22265404386432106, 0.2225343737571519, 0.2228235584550078, 0.22260785738875602, 0.2226826030507362, 0.2228468484121871, -0.2223703669624372, 0.22238343457321688, -0.22247290879818651, -0.22288978574316642] -3.25847909270675
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0012179293184431117
curgen: 100 fitness: -0.0011780132719252379
curgen: 150 fitness: -0.0011651852366867388
curgen: 200 fitness: -0.0011651852366867388
curgen: 250 fitness: -0.001123860881506289
curgen: 300 fitness: -0.001123860881506289
curgen: 350 fitness: -0.0010731735644355922
curgen: 400 fitness: -0.0010731735644355922
curgen: 450 fitness: -0.0010731735644355922
curgen: 500 fitness: -0.0010731735644355922
CoordinateCreature{Array{Float64,1}}([-0.00037110186442797645, -0.00020972322996468728, 0.00014344257628223864, -0.0008880696795229888, -0.0004788573661804078, -0.0005612086628170688, 0.0002187656277738148, -0.00019515413678040025, 0.00025410516720043917, -0.0008758810636729703, 0.0013720987647660738, -0.0002648256882431671, -0.000348244808859071, 4.770465719079265e-6, 0.0009393649252483494], 0.0010731735644355922) [-0.00037110186442797645, -0.00020972322996468728, 0.00014344257628223864, -0.0008880696795229888, -0.0004788573661804078, -0.0005612086628170688, 0.0002187656277738148, -0.00019515413678040025, 0.00025410516720043917, -0.0008758810636729703, 0.0013720987647660738, -0.0002648256882431671, -0.000348244808859071, 4.770465719079265e-6, 0.0009393649252483494] 0.0010731735644355922
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
