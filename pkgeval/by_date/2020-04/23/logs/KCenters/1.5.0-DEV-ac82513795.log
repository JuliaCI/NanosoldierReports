Julia Version 1.5.0-DEV.662
Commit ac82513795 (2020-04-22 15:15 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed PooledArrays ──────────────── v0.5.3
  Installed LearnBase ─────────────────── v0.2.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed SimilaritySearch ──────────── v0.3.19
  Installed InvertedIndices ───────────── v1.0.0
  Installed Tables ────────────────────── v1.0.4
  Installed Compat ────────────────────── v3.8.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Parsers ───────────────────── v1.0.2
  Installed JSON ──────────────────────── v0.21.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataPattern ─────────────── v0.5.1
  Installed StatsBase ─────────────────── v0.32.2
  Installed DataFrames ────────────────── v0.20.2
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed DataAPI ───────────────────── v1.2.0
  Installed Missings ──────────────────── v0.4.3
  Installed MappedArrays ──────────────── v0.2.2
  Installed OrderedCollections ────────── v1.1.0
  Installed DataStructures ────────────── v0.17.13
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.2.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.13
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_k6XCo5/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_k6XCo5/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.2.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.13
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9367083616058032
[ Info: 0.8302954188982645
[ Info: 0.5538560461501281
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3297804680218299
mean(cdnet.distances) = 0.3853200734158357
mean(crand.distances) = 0.3401809769868851
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8703416375291381,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.4921875,"distances_sum":2227.649680402536}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5087890625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5087890625,"f1":0.6591762404262409,"seconds":3.1422823667526245e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":7.0390625,"distances_sum":1425.0785324407482}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7841796875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7841796875,"f1":0.8703416375291381,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.4921875,"distances_sum":2227.649680402536}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9485550907425915,"seconds":6.3534826040267944e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.8125,"distances_sum":2768.5223652684135}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9485550907425915,"seconds":6.3534826040267944e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.8125,"distances_sum":2768.5223652684135}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9485550907425915,"seconds":6.3534826040267944e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.8125,"distances_sum":2768.5223652684135}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9111328125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9485550907425915,"seconds":6.3534826040267944e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.8125,"distances_sum":2768.5223652684135}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6484375,"f1":0.7731567044067051,"seconds":3.3956021070480347e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":7.5546875,"distances_sum":1721.0178192960925}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5517578125,"f1":null,"seconds":4.375353455543518e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":6.96875,"distances_sum":1387.1042794296789}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6484375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6484375,"f1":0.7731567044067051,"seconds":3.3956021070480347e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":7.5546875,"distances_sum":1721.0178192960925}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9185616466866471,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":8.625,"distances_sum":2384.3304445071535}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.861328125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.861328125,"f1":0.9185616466866471,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":8.625,"distances_sum":2384.3304445071535}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9419700091575098,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":8.8125,"distances_sum":2531.390170715812}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9449061355311359,"seconds":6.146728992462158e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":8.75,"distances_sum":2587.1155331373047}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9536515567765571,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":8.765625,"distances_sum":2642.4105156611754}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9536515567765571,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":8.765625,"distances_sum":2642.4105156611754}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91796875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9536515567765571,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.7043203115463257e-6,"evaluations":8.765625,"distances_sum":2642.4105156611754}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1552734375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1552734375,"f1":null,"seconds":3.0919909477233887e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":4.4140625,"distances_sum":418.8440183866908}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1552734375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.1552734375,"f1":null,"seconds":3.0919909477233887e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":4.4140625,"distances_sum":418.8440183866908}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1552734375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.1552734375,"f1":null,"seconds":3.0919909477233887e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":4.4140625,"distances_sum":418.8440183866908}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.43359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.43359375,"f1":null,"seconds":2.766028046607971e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":6.3203125,"distances_sum":963.9717423444895}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.595703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.595703125,"f1":null,"seconds":3.039836883544922e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.03125,"distances_sum":1397.2303186185122}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.21875,"f1":null,"seconds":2.4978071451187134e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":6.25,"distances_sum":538.2448215277934}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8608433233433241,"seconds":4.217028617858887e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.9765625,"distances_sum":1905.8146765199272}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8608433233433241,"seconds":4.217028617858887e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.9765625,"distances_sum":1905.8146765199272}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9604395604395608,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.75,"distances_sum":2557.033199013237}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9220956127206132,"seconds":0.00012275762856006622,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.6015625,"distances_sum":2236.513559102721}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.9016369047619057,"seconds":7.657334208488464e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.4609375,"distances_sum":2115.4423335610513}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9604395604395608,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.75,"distances_sum":2557.033199013237}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9705185439560444,"seconds":8.063390851020813e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8984375,"distances_sum":2586.868232676011}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9705185439560444,"seconds":8.063390851020813e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8984375,"distances_sum":2586.868232676011}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9705185439560444,"seconds":8.063390851020813e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8984375,"distances_sum":2586.868232676011}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8635172119547128,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.328125,"distances_sum":1754.4514576429874}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.34375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.34375,"f1":null,"seconds":3.857538104057312e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":5.5390625,"distances_sum":761.431643285539}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7734375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7734375,"f1":0.8635172119547128,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.328125,"distances_sum":1754.4514576429874}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8046875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8046875,"f1":0.8827245670995679,"seconds":6.128102540969849e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.515625,"distances_sum":1858.068300824502}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8715237887112895,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.296875,"distances_sum":1789.0539341632757}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8046875,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8046875,"f1":0.8827245670995679,"seconds":6.128102540969849e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.515625,"distances_sum":1858.068300824502}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9446314102564108,"seconds":6.3534826040267944e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.7578125,"distances_sum":2229.042843689464}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.8894090284715294,"seconds":6.141141057014465e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.5546875,"distances_sum":1897.298352008352}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":10,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8948150807525816,"seconds":6.1802566051483154e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.6640625,"distances_sum":1902.195796859102}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":12,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.924536401098902,"seconds":6.331130862236023e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.6328125,"distances_sum":2099.136324409209}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9486664377289382,"seconds":6.515532732009888e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.78125,"distances_sum":2262.8331629570703}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9273179945054951,"seconds":6.413087248802185e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.7421875,"distances_sum":2121.402076752013}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9486664377289382,"seconds":6.515532732009888e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.78125,"distances_sum":2262.8331629570703}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9091796875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9486664377289382,"seconds":6.515532732009888e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.78125,"distances_sum":2262.8331629570703}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5517578125,"f1":0.6905266608391615,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":2.436339855194092e-6,"evaluations":6.875,"distances_sum":1192.7260399406198}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2109375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2109375,"f1":null,"seconds":5.016103386878967e-6,"exhaustive_search_seconds":2.436339855194092e-6,"evaluations":6.2578125,"distances_sum":471.1356161957879}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8659486346986355,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":2.436339855194092e-6,"evaluations":8.234375,"distances_sum":1817.7688751879243}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.779296875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.779296875,"f1":0.8659486346986355,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":2.436339855194092e-6,"evaluations":8.234375,"distances_sum":1817.7688751879243}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9286005661005667,"seconds":6.368383765220642e-6,"exhaustive_search_seconds":2.436339855194092e-6,"evaluations":8.7265625,"distances_sum":2195.0965359971246}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8798828125,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9286005661005667,"seconds":6.368383765220642e-6,"exhaustive_search_seconds":2.436339855194092e-6,"evaluations":8.7265625,"distances_sum":2195.0965359971246}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9716002747252752,"seconds":7.838010787963867e-6,"exhaustive_search_seconds":2.436339855194092e-6,"evaluations":8.9296875,"distances_sum":2444.611159855315}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9360119047619055,"seconds":6.571412086486816e-6,"exhaustive_search_seconds":2.436339855194092e-6,"evaluations":8.703125,"distances_sum":2252.6184651431677}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.940713973526474,"seconds":7.603317499160767e-6,"exhaustive_search_seconds":2.436339855194092e-6,"evaluations":8.71875,"distances_sum":2270.461051904675}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9716002747252752,"seconds":7.838010787963867e-6,"exhaustive_search_seconds":2.436339855194092e-6,"evaluations":8.9296875,"distances_sum":2444.611159855315}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9716002747252752,"seconds":7.838010787963867e-6,"exhaustive_search_seconds":2.436339855194092e-6,"evaluations":8.9296875,"distances_sum":2444.611159855315}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5498046875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5498046875,"f1":0.6907028735153741,"seconds":6.034970283508301e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":7.25,"distances_sum":1139.7673242959443}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.66015625,"f1":0.7787970709845716,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":7.609375,"distances_sum":1426.7179289329943}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.66015625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.66015625,"f1":0.7787970709845716,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":7.609375,"distances_sum":1426.7179289329943}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9099020770895779,"seconds":6.34416937828064e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.703125,"distances_sum":2024.4432092737097}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9047998876123885,"seconds":6.575137376785278e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.5859375,"distances_sum":2006.6011889160982}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8466796875,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8466796875,"f1":0.9099020770895779,"seconds":6.34416937828064e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.703125,"distances_sum":2024.4432092737097}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9585451007326011,"seconds":6.856396794319153e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.859375,"distances_sum":2300.057252678312}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9585451007326011,"seconds":6.856396794319153e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.859375,"distances_sum":2300.057252678312}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9585451007326011,"seconds":6.856396794319153e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.859375,"distances_sum":2300.057252678312}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5673828125, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.5673828125,"f1":null,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":6.921875,"distances_sum":1282.4113847585852}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5673828125,"state":{"ssize":4,"bsize":3},"perf":{"precision":null,"recall":0.5673828125,"f1":null,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":6.921875,"distances_sum":1282.4113847585852}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8740363802863812,"seconds":8.471310138702393e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.3125,"distances_sum":1914.4953772090842}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.792366314241315,"seconds":7.299706339836121e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":7.6171875,"distances_sum":1522.991562496009}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.79296875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.79296875,"f1":0.8740363802863812,"seconds":8.471310138702393e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.3125,"distances_sum":1914.4953772090842}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9321943681318685,"seconds":6.625428795814514e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.71875,"distances_sum":2207.002743320787}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9317822802197809,"seconds":8.512288331985474e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.7734375,"distances_sum":2189.5891864706114}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9302026098901107,"seconds":6.577000021934509e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.7734375,"distances_sum":2210.652116106304}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8960997335997344,"seconds":8.210539817810059e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.4375,"distances_sum":1981.1933931565868}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.951608287545788,"seconds":7.852911949157715e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.734375,"distances_sum":2367.915854167689}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9211080586080592,"seconds":7.621943950653076e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.625,"distances_sum":2129.033528371646}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.951608287545788,"seconds":7.852911949157715e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.734375,"distances_sum":2367.915854167689}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9140625,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.951608287545788,"seconds":7.852911949157715e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.734375,"distances_sum":2367.915854167689}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.19921875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.19921875,"f1":null,"seconds":4.71062958240509e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":5.7578125,"distances_sum":441.04429511397757}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5419921875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5419921875,"f1":0.6896450771450777,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":6.921875,"distances_sum":1080.5972461810939}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3955078125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3955078125,"f1":null,"seconds":5.403533577919006e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":6.015625,"distances_sum":775.5693419476937}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5419921875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5419921875,"f1":0.6896450771450777,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":6.921875,"distances_sum":1080.5972461810939}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9053576631701638,"seconds":7.657334208488464e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.5390625,"distances_sum":1928.4966454989687}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9302369505494511,"seconds":7.51204788684845e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.796875,"distances_sum":2061.4526326095734}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.867949238261739,"seconds":6.193295121192932e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.296875,"distances_sum":1703.9164918706329}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8833343739593748,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.28125,"distances_sum":1807.9339218768525}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8577537046287055,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.0078125,"distances_sum":1672.571117495999}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.87890625,"f1":0.9302369505494511,"seconds":7.51204788684845e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.796875,"distances_sum":2061.4526326095734}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9402644230769238,"seconds":6.362795829772949e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.8359375,"distances_sum":2156.8443249096745}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9682864010989014,"seconds":6.5583735704422e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.9375,"distances_sum":2290.2704371810105}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9709134615384618,"seconds":6.644055247306824e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.90625,"distances_sum":2347.309469062714}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9602938727938731,"seconds":6.6123902797698975e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.796875,"distances_sum":2297.161046928609}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9709134615384618,"seconds":6.644055247306824e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.90625,"distances_sum":2347.309469062714}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9709134615384618,"seconds":6.644055247306824e-6,"exhaustive_search_seconds":1.8272548913955688e-6,"evaluations":8.90625,"distances_sum":2347.309469062714}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3291015625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3291015625,"f1":null,"seconds":3.943219780921936e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":5.109375,"distances_sum":708.5202464509782}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4951171875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.4951171875,"f1":0.6448523698523704,"seconds":4.451721906661987e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":6.375,"distances_sum":1093.6423944735707}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4951171875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.4951171875,"f1":0.6448523698523704,"seconds":4.451721906661987e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":6.375,"distances_sum":1093.6423944735707}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8992965367965374,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.4609375,"distances_sum":2016.6801749380631}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8291015625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8291015625,"f1":0.8992965367965374,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.4609375,"distances_sum":2016.6801749380631}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9117361804861812,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.515625,"distances_sum":2169.209686720957}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9466434607059612,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.71875,"distances_sum":2366.9974751924697}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9466434607059612,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.71875,"distances_sum":2366.9974751924697}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9072265625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9466434607059612,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.71875,"distances_sum":2366.9974751924697}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6484375,"f1":0.7748563936063944,"seconds":4.880130290985107e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":7.7578125,"distances_sum":1526.6779758926334}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6484375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6484375,"f1":0.7748563936063944,"seconds":4.880130290985107e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":7.7578125,"distances_sum":1526.6779758926334}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7373046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7373046875,"f1":0.8374261155511163,"seconds":4.377216100692749e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.1796875,"distances_sum":1828.2338027567228}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8920964452214458,"seconds":4.544854164123535e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.484375,"distances_sum":2079.367659584476}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8203125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8203125,"f1":0.8920964452214458,"seconds":4.544854164123535e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.484375,"distances_sum":2079.367659584476}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9498798076923082,"seconds":6.495043635368347e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.8125,"distances_sum":2491.0168596899075}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9498798076923082,"seconds":6.495043635368347e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.8125,"distances_sum":2491.0168596899075}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9130859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9498798076923082,"seconds":6.495043635368347e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.8125,"distances_sum":2491.0168596899075}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2294921875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2294921875,"f1":null,"seconds":3.9637088775634766e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":6.7421875,"distances_sum":464.67059353561126}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4384765625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4384765625,"f1":null,"seconds":4.5709311962127686e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.1328125,"distances_sum":914.0472570570391}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8693540834165843,"seconds":5.999580025672913e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.421875,"distances_sum":1894.8117336588439}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.78125,"f1":0.8693540834165843,"seconds":5.999580025672913e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.421875,"distances_sum":1894.8117336588439}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9152306027306033,"seconds":6.340444087982178e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.7734375,"distances_sum":2161.3482767159676}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9551396520146528,"seconds":6.634742021560669e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8828125,"distances_sum":2447.771509758642}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9063280469530477,"seconds":6.24731183052063e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.53125,"distances_sum":2105.717359501507}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9063993298368307,"seconds":6.277114152908325e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.4921875,"distances_sum":2085.8777075575044}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9108604936729945,"seconds":6.3478946685791016e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.640625,"distances_sum":2082.176864331795}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9551396520146528,"seconds":6.634742021560669e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8828125,"distances_sum":2447.771509758642}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":11,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9786458333333335,"seconds":6.891787052154541e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.953125,"distances_sum":2624.4568473088066}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":12,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.960531135531136,"seconds":6.7818909883499146e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.890625,"distances_sum":2488.8848688037306}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":12,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9690132783882788,"seconds":6.9551169872283936e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.9375,"distances_sum":2529.6147951537464}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":8,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9787774725274729,"seconds":6.8675726652145386e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.96875,"distances_sum":2608.736870384657}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9628033424908428,"seconds":6.744638085365295e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8984375,"distances_sum":2504.822404960464}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9648294413919418,"seconds":6.588175892829895e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.9140625,"distances_sum":2511.0039930993867}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9607371794871798,"seconds":6.582587957382202e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.90625,"distances_sum":2475.28871480715}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":11,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9786458333333335,"seconds":6.891787052154541e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.953125,"distances_sum":2624.4568473088066}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":11,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9786458333333335,"seconds":6.891787052154541e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.953125,"distances_sum":2624.4568473088066}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.158203125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.158203125,"f1":null,"seconds":3.07522714138031e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":4.3515625,"distances_sum":347.1925055044909}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7794448606948616,"seconds":5.204230546951294e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":6.9453125,"distances_sum":1534.8496641201773}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.328125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.328125,"f1":null,"seconds":4.034489393234253e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":5.25,"distances_sum":744.2869651249362}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6572265625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6572265625,"f1":0.7794448606948616,"seconds":5.204230546951294e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":6.9453125,"distances_sum":1534.8496641201773}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9323202838827844,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.609375,"distances_sum":2433.5150842278335}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.72265625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.72265625,"f1":0.8299226814851822,"seconds":5.619600415229797e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.546875,"distances_sum":1771.3406953736405}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9392914377289384,"seconds":6.50063157081604e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.6640625,"distances_sum":2459.0303977618705}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7119140625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7119140625,"f1":0.8238131660006668,"seconds":5.535781383514404e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.5078125,"distances_sum":1743.4631094691338}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.89453125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.9392914377289384,"seconds":6.50063157081604e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.6640625,"distances_sum":2459.0303977618705}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9768429487179492,"seconds":6.7818909883499146e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.90625,"distances_sum":2728.4355630569585}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9615155677655681,"seconds":6.67572021484375e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8125,"distances_sum":2625.4975824398034}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.953685897435898,"seconds":6.5229833126068115e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.7421875,"distances_sum":2567.0933941834355}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.960622710622711,"seconds":6.906688213348389e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.7578125,"distances_sum":2648.523778161487}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9477767024642032,"seconds":6.295740604400635e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.734375,"distances_sum":2519.8330688751935}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9768429487179492,"seconds":6.7818909883499146e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.90625,"distances_sum":2728.4355630569585}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9768429487179492,"seconds":6.7818909883499146e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.90625,"distances_sum":2728.4355630569585}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5732421875, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5732421875,"f1":null,"seconds":5.00120222568512e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.484375,"distances_sum":1312.1777983331292}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5703125,"f1":0.7132374569874574,"seconds":4.999339580535889e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.53125,"distances_sum":1298.621288295991}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5732421875,"state":{"ssize":3,"bsize":3},"perf":{"precision":null,"recall":0.5732421875,"f1":null,"seconds":5.00120222568512e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.484375,"distances_sum":1312.1777983331292}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8442781177156183,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.515625,"distances_sum":1806.3540182276981}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7816100566100573,"seconds":5.381181836128235e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.84375,"distances_sum":1575.5837652527198}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8574638902763909,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.5078125,"distances_sum":1895.7572379734017}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.870475878288379,"seconds":7.1283429861068726e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.53125,"distances_sum":1955.1963745448645}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8739213911088919,"seconds":6.1318278312683105e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.625,"distances_sum":1973.4172537286559}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7880859375,"state":{"ssize":8,"bsize":5},"perf":{"precision":1.0,"recall":0.7880859375,"f1":0.8739213911088919,"seconds":6.1318278312683105e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.625,"distances_sum":1973.4172537286559}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9524069680319682,"seconds":6.802380084991455e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8515625,"distances_sum":2443.5865547057297}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":10,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9373256951381957,"seconds":7.811933755874634e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8046875,"distances_sum":2362.67573481257}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9598843864468869,"seconds":6.690621376037598e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.9296875,"distances_sum":2495.7091411445313}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9530422702297707,"seconds":6.77257776260376e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.828125,"distances_sum":2473.977520149867}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.948537920412921,"seconds":6.549060344696045e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.875,"distances_sum":2417.8401885692883}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9508246961371966,"seconds":6.536021828651428e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8203125,"distances_sum":2466.3478416739604}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9083707958707966,"seconds":6.234273314476013e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.875,"distances_sum":2121.67319440775}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9598843864468869,"seconds":6.690621376037598e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.9296875,"distances_sum":2495.7091411445313}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9296875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9598843864468869,"seconds":6.690621376037598e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.9296875,"distances_sum":2495.7091411445313}}, n: 9
mean(cfft.distances) = 0.8548064667191017
mean(cdnet.distances) = 0.38889792227616793
mean(crand.distances) = 0.3830017834403021
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.9088888888888889
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8777777777777778
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8866666666666667
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9266666666666667
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8555555555555555
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8777777777777778
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9111111111111111
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9177777777777778
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9222222222222222
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9422222222222222
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8866666666666667
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9355555555555556
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8266666666666667
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9022222222222221
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9155555555555556
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8955555555555555
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9177777777777778
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9288888888888889
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9066666666666666
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9199999999999999
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9133333333333334
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9466666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.554153057038784] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 18]]
** centroid: 1, normalized-entropy: 0.9927744539878083, [(2, 22), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 11: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
finished with 14 centroids; started with 12
acc = 0.9133333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.1915894221771766] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1915894221771766, 0.1622087575198786] ***
*** starting iteration: 2; err: [Inf, 0.1915894221771766, 0.1622087575198786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1915894221771766, 0.1622087575198786, 0.1535291797020011] ***
*** starting iteration: 3; err: [Inf, 0.1915894221771766, 0.1622087575198786, 0.1535291797020011] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1915894221771766, 0.1622087575198786, 0.1535291797020011, 0.15074242292148238] ***
*** starting iteration: 4; err: [Inf, 0.1915894221771766, 0.1622087575198786, 0.1535291797020011, 0.15074242292148238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1915894221771766, 0.1622087575198786, 0.1535291797020011, 0.15074242292148238, 0.14948738741236753] ***
*** starting iteration: 5; err: [Inf, 0.1915894221771766, 0.1622087575198786, 0.1535291797020011, 0.15074242292148238, 0.14948738741236753] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1915894221771766, 0.1622087575198786, 0.1535291797020011, 0.15074242292148238, 0.14948738741236753, 0.1492372123460221] ***
*** finished computation of 7 references, err: [Inf, 0.1915894221771766, 0.1622087575198786, 0.1535291797020011, 0.15074242292148238, 0.14948738741236753, 0.1492372123460221] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [82, 25, 0]]
** centroid: 1, normalized-entropy: 0.7843112002044088, [(1, 82), (2, 25)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 79, 27]]
** centroid: 2, normalized-entropy: 0.8186691181065503, [(2, 79), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [28, 65, 0]]
** centroid: 3, normalized-entropy: 0.8826013308449944, [(1, 28), (2, 65)]
*** center 4: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [6, 73, 0]]
** centroid: 5, normalized-entropy: 0.3877431810559867, [(1, 6), (2, 73)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [64, 1, 0]]
** centroid: 6, normalized-entropy: 0.11467550533614682, [(1, 64), (2, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4831201940321842] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4831201940321842, 0.3048013738879526] ***
*** finished computation of 3 references, err: [Inf, 0.4831201940321842, 0.3048013738879526] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [270, 15, 0]]
** centroid: 1, normalized-entropy: 0.2974722489192896, [(1, 270), (2, 15)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 172, 27]]
** centroid: 2, normalized-entropy: 0.3882481053393154, [(1, 1), (2, 172), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [125, 56, 0]]
** centroid: 3, normalized-entropy: 0.8924706869838313, [(1, 125), (2, 56)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20880302890571117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20880302890571117, 0.16111963844231178] ***
*** starting iteration: 2; err: [Inf, 0.20880302890571117, 0.16111963844231178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20880302890571117, 0.16111963844231178, 0.15695302838507086] ***
*** starting iteration: 3; err: [Inf, 0.20880302890571117, 0.16111963844231178, 0.15695302838507086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20880302890571117, 0.16111963844231178, 0.15695302838507086, 0.15463001770840057] ***
*** starting iteration: 4; err: [Inf, 0.20880302890571117, 0.16111963844231178, 0.15695302838507086, 0.15463001770840057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20880302890571117, 0.16111963844231178, 0.15695302838507086, 0.15463001770840057, 0.15230924877682994] ***
*** starting iteration: 5; err: [Inf, 0.20880302890571117, 0.16111963844231178, 0.15695302838507086, 0.15463001770840057, 0.15230924877682994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20880302890571117, 0.16111963844231178, 0.15695302838507086, 0.15463001770840057, 0.15230924877682994, 0.15036067220757993] ***
*** starting iteration: 6; err: [Inf, 0.20880302890571117, 0.16111963844231178, 0.15695302838507086, 0.15463001770840057, 0.15230924877682994, 0.15036067220757993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20880302890571117, 0.16111963844231178, 0.15695302838507086, 0.15463001770840057, 0.15230924877682994, 0.15036067220757993, 0.14876518705496747] ***
*** starting iteration: 7; err: [Inf, 0.20880302890571117, 0.16111963844231178, 0.15695302838507086, 0.15463001770840057, 0.15230924877682994, 0.15036067220757993, 0.14876518705496747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20880302890571117, 0.16111963844231178, 0.15695302838507086, 0.15463001770840057, 0.15230924877682994, 0.15036067220757993, 0.14876518705496747, 0.14793665657054517] ***
*** finished computation of 7 references, err: [Inf, 0.20880302890571117, 0.16111963844231178, 0.15695302838507086, 0.15463001770840057, 0.15230924877682994, 0.15036067220757993, 0.14876518705496747, 0.14793665657054517] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [100, 18, 0]]
** centroid: 1, normalized-entropy: 0.6161661934005354, [(1, 100), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [72, 4, 0]]
** centroid: 2, normalized-entropy: 0.2974722489192896, [(1, 72), (2, 4)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [14, 94, 0]]
** centroid: 3, normalized-entropy: 0.5564215672884282, [(1, 14), (2, 94)]
*** center 4: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 105, 22]]
** centroid: 5, normalized-entropy: 0.6650368524023751, [(2, 105), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [75, 29, 0]]
** centroid: 6, normalized-entropy: 0.8538738465459897, [(1, 75), (2, 29)]
*** center 7: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19055119014486135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19055119014486135, 0.15673463885299582] ***
*** starting iteration: 2; err: [Inf, 0.19055119014486135, 0.15673463885299582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19055119014486135, 0.15673463885299582, 0.15404711942770694] ***
*** starting iteration: 3; err: [Inf, 0.19055119014486135, 0.15673463885299582, 0.15404711942770694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19055119014486135, 0.15673463885299582, 0.15404711942770694, 0.1526094294701894] ***
*** starting iteration: 4; err: [Inf, 0.19055119014486135, 0.15673463885299582, 0.15404711942770694, 0.1526094294701894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19055119014486135, 0.15673463885299582, 0.15404711942770694, 0.1526094294701894, 0.1508783399940062] ***
*** starting iteration: 5; err: [Inf, 0.19055119014486135, 0.15673463885299582, 0.15404711942770694, 0.1526094294701894, 0.1508783399940062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19055119014486135, 0.15673463885299582, 0.15404711942770694, 0.1526094294701894, 0.1508783399940062, 0.14925396516416473] ***
*** starting iteration: 6; err: [Inf, 0.19055119014486135, 0.15673463885299582, 0.15404711942770694, 0.1526094294701894, 0.1508783399940062, 0.14925396516416473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19055119014486135, 0.15673463885299582, 0.15404711942770694, 0.1526094294701894, 0.1508783399940062, 0.14925396516416473, 0.14778107075848668] ***
*** starting iteration: 7; err: [Inf, 0.19055119014486135, 0.15673463885299582, 0.15404711942770694, 0.1526094294701894, 0.1508783399940062, 0.14925396516416473, 0.14778107075848668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19055119014486135, 0.15673463885299582, 0.15404711942770694, 0.1526094294701894, 0.1508783399940062, 0.14925396516416473, 0.14778107075848668, 0.1463785126827646] ***
*** starting iteration: 8; err: [Inf, 0.19055119014486135, 0.15673463885299582, 0.15404711942770694, 0.1526094294701894, 0.1508783399940062, 0.14925396516416473, 0.14778107075848668, 0.1463785126827646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19055119014486135, 0.15673463885299582, 0.15404711942770694, 0.1526094294701894, 0.1508783399940062, 0.14925396516416473, 0.14778107075848668, 0.1463785126827646, 0.1453395945479398] ***
*** starting iteration: 9; err: [Inf, 0.19055119014486135, 0.15673463885299582, 0.15404711942770694, 0.1526094294701894, 0.1508783399940062, 0.14925396516416473, 0.14778107075848668, 0.1463785126827646, 0.1453395945479398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19055119014486135, 0.15673463885299582, 0.15404711942770694, 0.1526094294701894, 0.1508783399940062, 0.14925396516416473, 0.14778107075848668, 0.1463785126827646, 0.1453395945479398, 0.1449209462426815] ***
*** finished computation of 7 references, err: [Inf, 0.19055119014486135, 0.15673463885299582, 0.15404711942770694, 0.1526094294701894, 0.1508783399940062, 0.14925396516416473, 0.14778107075848668, 0.1463785126827646, 0.1453395945479398, 0.1449209462426815] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 110, 17]]
** centroid: 1, normalized-entropy: 0.5679253419771396, [(2, 110), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 33, 0]]
** centroid: 3, normalized-entropy: 0.904803273542669, [(1, 70), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [69, 4, 0]]
** centroid: 4, normalized-entropy: 0.306424729870515, [(1, 69), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 22, 0]]
** centroid: 5, normalized-entropy: 0.8582307926411409, [(1, 56), (2, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [15, 94, 0]]
** centroid: 6, normalized-entropy: 0.5779576184299016, [(1, 15), (2, 94)]
*** center 7: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2699090486239256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2699090486239256, 0.21960546205228604] ***
*** starting iteration: 2; err: [Inf, 0.2699090486239256, 0.21960546205228604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2699090486239256, 0.21960546205228604, 0.20170024454009133] ***
*** starting iteration: 3; err: [Inf, 0.2699090486239256, 0.21960546205228604, 0.20170024454009133] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2699090486239256, 0.21960546205228604, 0.20170024454009133, 0.19750422050871583] ***
*** finished computation of 7 references, err: [Inf, 0.2699090486239256, 0.21960546205228604, 0.20170024454009133, 0.19750422050871583] ***
*** center 1: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [93, 12, 0]]
** centroid: 2, normalized-entropy: 0.5127091420308771, [(1, 93), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 118, 27]]
** centroid: 3, normalized-entropy: 0.6934687977176178, [(2, 118), (3, 27)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 3, 0]]
** centroid: 4, normalized-entropy: 0.2667649878030262, [(1, 63), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [39, 50, 0]]
** centroid: 5, normalized-entropy: 0.9889525767600615, [(1, 39), (2, 50)]
*** center 6: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [60, 60, 0]]
** centroid: 7, normalized-entropy: 1.0, [(1, 60), (2, 60)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2385106475093867] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2385106475093867, 0.19926043514949807] ***
*** starting iteration: 2; err: [Inf, 0.2385106475093867, 0.19926043514949807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2385106475093867, 0.19926043514949807, 0.195373623677972] ***
*** starting iteration: 3; err: [Inf, 0.2385106475093867, 0.19926043514949807, 0.195373623677972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2385106475093867, 0.19926043514949807, 0.195373623677972, 0.1932900680879737] ***
*** finished computation of 7 references, err: [Inf, 0.2385106475093867, 0.19926043514949807, 0.195373623677972, 0.1932900680879737] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [101, 3, 0]]
** centroid: 1, normalized-entropy: 0.18857195602479668, [(1, 101), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 36, 0]]
** centroid: 2, normalized-entropy: 0.9872927315785851, [(1, 47), (2, 36)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [73, 41, 0]]
** centroid: 3, normalized-entropy: 0.9423915493613846, [(1, 73), (2, 41)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 122, 22]]
** centroid: 4, normalized-entropy: 0.6167482598263911, [(2, 122), (3, 22)]
*** center 5: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [46, 48, 0]]
** centroid: 7, normalized-entropy: 0.9996734260048917, [(1, 46), (2, 48)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3190649595039002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3190649595039002, 0.2232726270101149] ***
*** starting iteration: 2; err: [Inf, 0.3190649595039002, 0.2232726270101149] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3190649595039002, 0.2232726270101149, 0.2061690524460628] ***
*** starting iteration: 3; err: [Inf, 0.3190649595039002, 0.2232726270101149, 0.2061690524460628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3190649595039002, 0.2232726270101149, 0.2061690524460628, 0.19656322506881937] ***
*** finished computation of 7 references, err: [Inf, 0.3190649595039002, 0.2232726270101149, 0.2061690524460628, 0.19656322506881937] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [69, 15, 0]]
** centroid: 1, normalized-entropy: 0.6769418697808861, [(1, 69), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 24, 0]]
** centroid: 2, normalized-entropy: 0.927526588431676, [(1, 46), (2, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [3, 112, 0]]
** centroid: 5, normalized-entropy: 0.17437145292163486, [(1, 3), (2, 112)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 63, 17]]
** centroid: 6, normalized-entropy: 0.7462343013654809, [(2, 63), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [64, 49, 0]]
** centroid: 7, normalized-entropy: 0.9872516848785046, [(1, 64), (2, 49)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25952040712879104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25952040712879104, 0.2208264663496667] ***
*** starting iteration: 2; err: [Inf, 0.25952040712879104, 0.2208264663496667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25952040712879104, 0.2208264663496667, 0.20826681596213006] ***
*** starting iteration: 3; err: [Inf, 0.25952040712879104, 0.2208264663496667, 0.20826681596213006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25952040712879104, 0.2208264663496667, 0.20826681596213006, 0.20248390194490082] ***
*** starting iteration: 4; err: [Inf, 0.25952040712879104, 0.2208264663496667, 0.20826681596213006, 0.20248390194490082] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25952040712879104, 0.2208264663496667, 0.20826681596213006, 0.20248390194490082, 0.19655818539439468] ***
*** starting iteration: 5; err: [Inf, 0.25952040712879104, 0.2208264663496667, 0.20826681596213006, 0.20248390194490082, 0.19655818539439468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25952040712879104, 0.2208264663496667, 0.20826681596213006, 0.20248390194490082, 0.19655818539439468, 0.19357093553374838] ***
*** starting iteration: 6; err: [Inf, 0.25952040712879104, 0.2208264663496667, 0.20826681596213006, 0.20248390194490082, 0.19655818539439468, 0.19357093553374838] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25952040712879104, 0.2208264663496667, 0.20826681596213006, 0.20248390194490082, 0.19655818539439468, 0.19357093553374838, 0.19181275303411233] ***
*** starting iteration: 7; err: [Inf, 0.25952040712879104, 0.2208264663496667, 0.20826681596213006, 0.20248390194490082, 0.19655818539439468, 0.19357093553374838, 0.19181275303411233] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25952040712879104, 0.2208264663496667, 0.20826681596213006, 0.20248390194490082, 0.19655818539439468, 0.19357093553374838, 0.19181275303411233, 0.19088990091242725] ***
*** finished computation of 7 references, err: [Inf, 0.25952040712879104, 0.2208264663496667, 0.20826681596213006, 0.20248390194490082, 0.19655818539439468, 0.19357093553374838, 0.19181275303411233, 0.19088990091242725] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [66, 21, 0]]
** centroid: 1, normalized-entropy: 0.7973265101474423, [(1, 66), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [107, 28, 0]]
** centroid: 2, normalized-entropy: 0.7364977795505668, [(1, 107), (2, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [68, 35, 0]]
** centroid: 3, normalized-entropy: 0.9246327718618892, [(1, 68), (2, 35)]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 79, 3]]
** centroid: 6, normalized-entropy: 0.22641094842107634, [(2, 79), (3, 3)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 80, 24]]
** centroid: 7, normalized-entropy: 0.7793498372920851, [(2, 80), (3, 24)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3080709065035589] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3080709065035589, 0.21111604435623496] ***
*** starting iteration: 2; err: [Inf, 0.3080709065035589, 0.21111604435623496] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3080709065035589, 0.21111604435623496, 0.2001037261402723] ***
*** starting iteration: 3; err: [Inf, 0.3080709065035589, 0.21111604435623496, 0.2001037261402723] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3080709065035589, 0.21111604435623496, 0.2001037261402723, 0.1941594813965719] ***
*** starting iteration: 4; err: [Inf, 0.3080709065035589, 0.21111604435623496, 0.2001037261402723, 0.1941594813965719] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3080709065035589, 0.21111604435623496, 0.2001037261402723, 0.1941594813965719, 0.1911934344900836] ***
*** starting iteration: 5; err: [Inf, 0.3080709065035589, 0.21111604435623496, 0.2001037261402723, 0.1941594813965719, 0.1911934344900836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3080709065035589, 0.21111604435623496, 0.2001037261402723, 0.1941594813965719, 0.1911934344900836, 0.18910387523662203] ***
*** starting iteration: 6; err: [Inf, 0.3080709065035589, 0.21111604435623496, 0.2001037261402723, 0.1941594813965719, 0.1911934344900836, 0.18910387523662203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3080709065035589, 0.21111604435623496, 0.2001037261402723, 0.1941594813965719, 0.1911934344900836, 0.18910387523662203, 0.18798191980856738] ***
*** starting iteration: 7; err: [Inf, 0.3080709065035589, 0.21111604435623496, 0.2001037261402723, 0.1941594813965719, 0.1911934344900836, 0.18910387523662203, 0.18798191980856738] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3080709065035589, 0.21111604435623496, 0.2001037261402723, 0.1941594813965719, 0.1911934344900836, 0.18910387523662203, 0.18798191980856738, 0.18724107765138842] ***
*** finished computation of 7 references, err: [Inf, 0.3080709065035589, 0.21111604435623496, 0.2001037261402723, 0.1941594813965719, 0.1911934344900836, 0.18910387523662203, 0.18798191980856738, 0.18724107765138842] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [99, 16, 0]]
** centroid: 1, normalized-entropy: 0.5819569606149722, [(1, 99), (2, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 74, 22]]
** centroid: 3, normalized-entropy: 0.7765557854444601, [(2, 74), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 35, 0]]
** centroid: 5, normalized-entropy: 0.9246327718618892, [(1, 68), (2, 35)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [63, 35, 0]]
** centroid: 6, normalized-entropy: 0.940285958670631, [(1, 63), (2, 35)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 90, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.257393803936185] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.257393803936185, 0.20011010469702623] ***
*** starting iteration: 2; err: [Inf, 0.257393803936185, 0.20011010469702623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.257393803936185, 0.20011010469702623, 0.1911074585313427] ***
*** starting iteration: 3; err: [Inf, 0.257393803936185, 0.20011010469702623, 0.1911074585313427] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.257393803936185, 0.20011010469702623, 0.1911074585313427, 0.18791345491826625] ***
*** starting iteration: 4; err: [Inf, 0.257393803936185, 0.20011010469702623, 0.1911074585313427, 0.18791345491826625] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.257393803936185, 0.20011010469702623, 0.1911074585313427, 0.18791345491826625, 0.18665147793927472] ***
*** starting iteration: 5; err: [Inf, 0.257393803936185, 0.20011010469702623, 0.1911074585313427, 0.18791345491826625, 0.18665147793927472] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.257393803936185, 0.20011010469702623, 0.1911074585313427, 0.18791345491826625, 0.18665147793927472, 0.18571645377631085] ***
*** finished computation of 7 references, err: [Inf, 0.257393803936185, 0.20011010469702623, 0.1911074585313427, 0.18791345491826625, 0.18665147793927472, 0.18571645377631085] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 23, 0]]
** centroid: 1, normalized-entropy: 0.8796975782775168, [(1, 54), (2, 23)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 125, 17]]
** centroid: 2, normalized-entropy: 0.5285506132792125, [(2, 125), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [14, 91, 0]]
** centroid: 3, normalized-entropy: 0.5665095065529052, [(1, 14), (2, 91)]
*** center 4: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [93, 22, 0]]
** centroid: 5, normalized-entropy: 0.7041920940481365, [(1, 93), (2, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [64, 2, 0]]
** centroid: 7, normalized-entropy: 0.19590927087360496, [(1, 64), (2, 2)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25632000573443714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25632000573443714, 0.21910945290990463] ***
*** starting iteration: 2; err: [Inf, 0.25632000573443714, 0.21910945290990463] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25632000573443714, 0.21910945290990463, 0.20701690931338118] ***
*** starting iteration: 3; err: [Inf, 0.25632000573443714, 0.21910945290990463, 0.20701690931338118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25632000573443714, 0.21910945290990463, 0.20701690931338118, 0.19888543748585563] ***
*** finished computation of 7 references, err: [Inf, 0.25632000573443714, 0.21910945290990463, 0.20701690931338118, 0.19888543748585563] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [95, 34, 0]]
** centroid: 1, normalized-entropy: 0.8320798182608387, [(1, 95), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 21, 0]]
** centroid: 2, normalized-entropy: 0.8354065254460503, [(1, 58), (2, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [137, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 57, 4]]
** centroid: 4, normalized-entropy: 0.34918437350730797, [(2, 57), (3, 4)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 74, 23]]
** centroid: 5, normalized-entropy: 0.790206924188637, [(2, 74), (3, 23)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [44, 57, 0]]
** centroid: 6, normalized-entropy: 0.9880162151534644, [(1, 44), (2, 57)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23431422330182175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23431422330182175, 0.2041119903010474] ***
*** starting iteration: 2; err: [Inf, 0.23431422330182175, 0.2041119903010474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23431422330182175, 0.2041119903010474, 0.19611942580436123] ***
*** starting iteration: 3; err: [Inf, 0.23431422330182175, 0.2041119903010474, 0.19611942580436123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23431422330182175, 0.2041119903010474, 0.19611942580436123, 0.1868713956544067] ***
*** finished computation of 7 references, err: [Inf, 0.23431422330182175, 0.2041119903010474, 0.19611942580436123, 0.1868713956544067] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [33, 63, 0]]
** centroid: 2, normalized-entropy: 0.9283620723948678, [(1, 33), (2, 63)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [68, 16, 0]]
** centroid: 3, normalized-entropy: 0.7024665512903904, [(1, 68), (2, 16)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 75, 22]]
** centroid: 4, normalized-entropy: 0.772398436030307, [(2, 75), (3, 22)]
*** center 5: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [16, 91, 0]]
** centroid: 6, normalized-entropy: 0.6086696755779567, [(1, 16), (2, 91)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [79, 5, 0]]
** centroid: 7, normalized-entropy: 0.3255517134879513, [(1, 79), (2, 5)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28251245353479815] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28251245353479815, 0.21951012824476324] ***
*** starting iteration: 2; err: [Inf, 0.28251245353479815, 0.21951012824476324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28251245353479815, 0.21951012824476324, 0.20041941464519075] ***
*** starting iteration: 3; err: [Inf, 0.28251245353479815, 0.21951012824476324, 0.20041941464519075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28251245353479815, 0.21951012824476324, 0.20041941464519075, 0.1946226559562617] ***
*** finished computation of 7 references, err: [Inf, 0.28251245353479815, 0.21951012824476324, 0.20041941464519075, 0.1946226559562617] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [22, 87, 0]]
** centroid: 1, normalized-entropy: 0.725582675704817, [(1, 22), (2, 87)]
*** center 2: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [4, 73, 0]]
** centroid: 4, normalized-entropy: 0.29461520565280713, [(1, 4), (2, 73)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [55, 5, 0]]
** centroid: 5, normalized-entropy: 0.4138168503036336, [(1, 55), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [95, 9, 0]]
** centroid: 6, normalized-entropy: 0.42480887386781474, [(1, 95), (2, 9)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 89, 17]]
** centroid: 7, normalized-entropy: 0.6352115521361693, [(2, 89), (3, 17)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2817336315381433] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2817336315381433, 0.24052388126704585] ***
*** starting iteration: 2; err: [Inf, 0.2817336315381433, 0.24052388126704585] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2817336315381433, 0.24052388126704585, 0.23855176946433546] ***
*** starting iteration: 3; err: [Inf, 0.2817336315381433, 0.24052388126704585, 0.23855176946433546] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2817336315381433, 0.24052388126704585, 0.23855176946433546, 0.23780082782042455] ***
*** finished computation of 3 references, err: [Inf, 0.2817336315381433, 0.24052388126704585, 0.23855176946433546, 0.23780082782042455] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [75, 154, 27]]
** centroid: 1, normalized-entropy: 0.8216172016976367, [(1, 75), (2, 154), (3, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [108, 89, 0]]
** centroid: 2, normalized-entropy: 0.9932796083413308, [(1, 108), (2, 89)]
*** center 3: selecting labels [1] (freq >= 1) [from [213, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4349779793615641] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4349779793615641, 0.2807746010384281] ***
*** starting iteration: 2; err: [Inf, 0.4349779793615641, 0.2807746010384281] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4349779793615641, 0.2807746010384281, 0.25742690945658525] ***
*** starting iteration: 3; err: [Inf, 0.4349779793615641, 0.2807746010384281, 0.25742690945658525] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4349779793615641, 0.2807746010384281, 0.25742690945658525, 0.24145913932813162] ***
*** starting iteration: 4; err: [Inf, 0.4349779793615641, 0.2807746010384281, 0.25742690945658525, 0.24145913932813162] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4349779793615641, 0.2807746010384281, 0.25742690945658525, 0.24145913932813162, 0.23652192051878487] ***
*** starting iteration: 5; err: [Inf, 0.4349779793615641, 0.2807746010384281, 0.25742690945658525, 0.24145913932813162, 0.23652192051878487] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4349779793615641, 0.2807746010384281, 0.25742690945658525, 0.24145913932813162, 0.23652192051878487, 0.2352235875269775] ***
*** starting iteration: 6; err: [Inf, 0.4349779793615641, 0.2807746010384281, 0.25742690945658525, 0.24145913932813162, 0.23652192051878487, 0.2352235875269775] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4349779793615641, 0.2807746010384281, 0.25742690945658525, 0.24145913932813162, 0.23652192051878487, 0.2352235875269775, 0.23478585652688677] ***
*** finished computation of 3 references, err: [Inf, 0.4349779793615641, 0.2807746010384281, 0.25742690945658525, 0.24145913932813162, 0.23652192051878487, 0.2352235875269775, 0.23478585652688677] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [230, 33, 0]]
** centroid: 1, normalized-entropy: 0.5448972491552861, [(1, 230), (2, 33)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 176, 22]]
** centroid: 2, normalized-entropy: 0.5032583347756457, [(2, 176), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [165, 41, 0]]
** centroid: 3, normalized-entropy: 0.7199820925235048, [(1, 165), (2, 41)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2907474918634459] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2907474918634459, 0.2465599730779798] ***
*** starting iteration: 2; err: [Inf, 0.2907474918634459, 0.2465599730779798] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2907474918634459, 0.2465599730779798, 0.23895194230536962] ***
*** starting iteration: 3; err: [Inf, 0.2907474918634459, 0.2465599730779798, 0.23895194230536962] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2907474918634459, 0.2465599730779798, 0.23895194230536962, 0.23711196903273396] ***
*** starting iteration: 4; err: [Inf, 0.2907474918634459, 0.2465599730779798, 0.23895194230536962, 0.23711196903273396] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2907474918634459, 0.2465599730779798, 0.23895194230536962, 0.23711196903273396, 0.23645992692478973] ***
*** finished computation of 3 references, err: [Inf, 0.2907474918634459, 0.2465599730779798, 0.23895194230536962, 0.23711196903273396, 0.23645992692478973] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [8, 214, 17]]
** centroid: 1, normalized-entropy: 0.36468891722308217, [(1, 8), (2, 214), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [222, 1, 0]]
** centroid: 2, normalized-entropy: 0.04143657108746376, [(1, 222), (2, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [157, 48, 0]]
** centroid: 3, normalized-entropy: 0.7851695745756854, [(1, 157), (2, 48)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24371401444650828] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24371401444650828, 0.22379735952058621] ***
*** finished computation of 7 references, err: [Inf, 0.24371401444650828, 0.22379735952058621] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [3, 55, 23]]
** centroid: 1, normalized-entropy: 0.6757666869195083, [(1, 3), (2, 55), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 84, 4]]
** centroid: 3, normalized-entropy: 0.2667649878030262, [(2, 84), (3, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [46, 4, 0]]
** centroid: 4, normalized-entropy: 0.4021791902022729, [(1, 46), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 71, 0]]
** centroid: 5, normalized-entropy: 0.35001059292688486, [(1, 5), (2, 71)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [74, 29, 0]]
** centroid: 6, normalized-entropy: 0.857558799850773, [(1, 74), (2, 29)]
*** center 7: selecting labels [1] (freq >= 2) [from [182, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2812411816988973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2812411816988973, 0.2018067730336577] ***
*** finished computation of 7 references, err: [Inf, 0.2812411816988973, 0.2018067730336577] ***
*** center 1: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [77, 12, 0]]
** centroid: 2, normalized-entropy: 0.5705411428522262, [(1, 77), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [28, 83, 0]]
** centroid: 4, normalized-entropy: 0.8148283832923793, [(1, 28), (2, 83)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [105, 23, 0]]
** centroid: 5, normalized-entropy: 0.6793929348105144, [(1, 105), (2, 23)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 75, 22]]
** centroid: 6, normalized-entropy: 0.772398436030307, [(2, 75), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 57, 0]]
** centroid: 7, normalized-entropy: 0.6079696120060726, [(1, 10), (2, 57)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24769039375978386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24769039375978386, 0.2140500683859661] ***
*** finished computation of 7 references, err: [Inf, 0.24769039375978386, 0.2140500683859661] ***
*** center 1: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [41, 54, 0]]
** centroid: 2, normalized-entropy: 0.9864497419502243, [(1, 41), (2, 54)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [41, 39, 0]]
** centroid: 3, normalized-entropy: 0.9995491108252483, [(1, 41), (2, 39)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [82, 16, 0]]
** centroid: 4, normalized-entropy: 0.6420642892306891, [(1, 82), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 79, 0]]
** centroid: 5, normalized-entropy: 0.5357150195407704, [(1, 11), (2, 79)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 75, 17]]
** centroid: 6, normalized-entropy: 0.6904285855304167, [(2, 75), (3, 17)]
*** center 7: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4402336171763885] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4402336171763885, 0.310369892230442] ***
*** finished computation of 3 references, err: [Inf, 0.4402336171763885, 0.310369892230442] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [151, 73, 0]]
** centroid: 1, normalized-entropy: 0.9106749736811393, [(1, 151), (2, 73)]
*** center 2: selecting labels [1] (freq >= 1) [from [164, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [81, 170, 27]]
** centroid: 3, normalized-entropy: 0.8069531321205563, [(1, 81), (2, 170), (3, 27)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3173456332357279] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3173456332357279, 0.29520579159114585] ***
*** finished computation of 3 references, err: [Inf, 0.3173456332357279, 0.29520579159114585] ***
*** center 1: selecting labels [1] (freq >= 1) [from [230, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [61, 156, 22]]
** centroid: 2, normalized-entropy: 0.7705842007090937, [(1, 61), (2, 156), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [104, 94, 0]]
** centroid: 3, normalized-entropy: 0.9981592324817737, [(1, 104), (2, 94)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36667491736887453] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36667491736887453, 0.2968096741177756] ***
*** finished computation of 3 references, err: [Inf, 0.36667491736887453, 0.2968096741177756] ***
*** center 1: selecting labels [1] (freq >= 1) [from [222, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [152, 78, 0]]
** centroid: 2, normalized-entropy: 0.923984159141417, [(1, 152), (2, 78)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [13, 185, 17]]
** centroid: 3, normalized-entropy: 0.4547486587034814, [(1, 13), (2, 185), (3, 17)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.40692696475732454] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40692696475732454, 0.29743936476388433] ***
*** finished computation of 3 references, err: [Inf, 0.40692696475732454, 0.29743936476388433] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [261, 17, 0]]
** centroid: 1, normalized-entropy: 0.3319974273781996, [(1, 261), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [134, 52, 0]]
** centroid: 2, normalized-entropy: 0.8548640967818041, [(1, 134), (2, 52)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 181, 22]]
** centroid: 3, normalized-entropy: 0.4949930542685224, [(2, 181), (3, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4921092126920618] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4921092126920618, 0.3021142676198992] ***
*** finished computation of 3 references, err: [Inf, 0.4921092126920618, 0.3021142676198992] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [266, 5, 0]]
** centroid: 1, normalized-entropy: 0.1326480512514611, [(1, 266), (2, 5)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [5, 204, 17]]
** centroid: 2, normalized-entropy: 0.3380476029878972, [(1, 5), (2, 204), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [116, 54, 0]]
** centroid: 3, normalized-entropy: 0.9018043446575508, [(1, 116), (2, 54)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38539261145478076] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38539261145478076, 0.24249587890303306] ***
*** starting iteration: 2; err: [Inf, 0.38539261145478076, 0.24249587890303306] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38539261145478076, 0.24249587890303306, 0.23929322915090187] ***
*** starting iteration: 3; err: [Inf, 0.38539261145478076, 0.24249587890303306, 0.23929322915090187] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38539261145478076, 0.24249587890303306, 0.23929322915090187, 0.23873477563955584] ***
*** finished computation of 3 references, err: [Inf, 0.38539261145478076, 0.24249587890303306, 0.23929322915090187, 0.23873477563955584] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [90, 139, 25]]
** centroid: 1, normalized-entropy: 0.8426387736841299, [(1, 90), (2, 139), (3, 25)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [101, 104, 2]]
** centroid: 2, normalized-entropy: 0.6742923356081401, [(1, 101), (2, 104), (3, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [205, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3963284130044829] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3963284130044829, 0.23513002796140478] ***
*** starting iteration: 2; err: [Inf, 0.3963284130044829, 0.23513002796140478] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3963284130044829, 0.23513002796140478, 0.2347617977922936] ***
*** finished computation of 3 references, err: [Inf, 0.3963284130044829, 0.23513002796140478, 0.2347617977922936] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [230, 34, 0]]
** centroid: 1, normalized-entropy: 0.5541045423898253, [(1, 230), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [165, 41, 0]]
** centroid: 2, normalized-entropy: 0.7199820925235048, [(1, 165), (2, 41)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 175, 22]]
** centroid: 3, normalized-entropy: 0.504948062194051, [(2, 175), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32006972495360353] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32006972495360353, 0.23503388121243807] ***
*** starting iteration: 2; err: [Inf, 0.32006972495360353, 0.23503388121243807] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32006972495360353, 0.23503388121243807, 0.2315011526998328] ***
*** starting iteration: 3; err: [Inf, 0.32006972495360353, 0.23503388121243807, 0.2315011526998328] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32006972495360353, 0.23503388121243807, 0.2315011526998328, 0.23069812005771131] ***
*** finished computation of 3 references, err: [Inf, 0.32006972495360353, 0.23503388121243807, 0.2315011526998328, 0.23069812005771131] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [239, 22, 0]]
** centroid: 1, normalized-entropy: 0.41712184822728116, [(1, 239), (2, 22)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 192, 17]]
** centroid: 2, normalized-entropy: 0.40688224959419506, [(2, 192), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [148, 49, 0]]
** centroid: 3, normalized-entropy: 0.8092605480110476, [(1, 148), (2, 49)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.18811186748716208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18811186748716208, 0.15285013434575037] ***
*** starting iteration: 2; err: [Inf, 0.18811186748716208, 0.15285013434575037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18811186748716208, 0.15285013434575037, 0.1495774148938221] ***
*** starting iteration: 3; err: [Inf, 0.18811186748716208, 0.15285013434575037, 0.1495774148938221] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18811186748716208, 0.15285013434575037, 0.1495774148938221, 0.1491705848983637] ***
*** finished computation of 7 references, err: [Inf, 0.18811186748716208, 0.15285013434575037, 0.1495774148938221, 0.1491705848983637] ***
*** center 1: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [79, 21, 0]]
** centroid: 2, normalized-entropy: 0.7414827399312738, [(1, 79), (2, 21)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 59, 27]]
** centroid: 3, normalized-entropy: 0.8976844934141643, [(2, 59), (3, 27)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [8, 81, 0]]
** centroid: 4, normalized-entropy: 0.43609466429612137, [(1, 8), (2, 81)]
*** center 5: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [16, 81, 0]]
** centroid: 6, normalized-entropy: 0.6460174789535751, [(1, 16), (2, 81)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [59, 1, 0]]
** centroid: 7, normalized-entropy: 0.12229159706937456, [(1, 59), (2, 1)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19275230900949983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19275230900949983, 0.15407771467073433] ***
*** starting iteration: 2; err: [Inf, 0.19275230900949983, 0.15407771467073433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19275230900949983, 0.15407771467073433, 0.15030905808708903] ***
*** starting iteration: 3; err: [Inf, 0.19275230900949983, 0.15407771467073433, 0.15030905808708903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19275230900949983, 0.15407771467073433, 0.15030905808708903, 0.1495637489270525] ***
*** finished computation of 7 references, err: [Inf, 0.19275230900949983, 0.15407771467073433, 0.15030905808708903, 0.1495637489270525] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [117, 3, 0]]
** centroid: 1, normalized-entropy: 0.1686609314966701, [(1, 117), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 29, 0]]
** centroid: 2, normalized-entropy: 0.8991045208483789, [(1, 63), (2, 29)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 68, 22]]
** centroid: 3, normalized-entropy: 0.80235344282919, [(2, 68), (3, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [36, 56, 0]]
** centroid: 5, normalized-entropy: 0.9656361333706099, [(1, 36), (2, 56)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 94, 0]]
** centroid: 6, normalized-entropy: 0.14609425012013613, [(1, 2), (2, 94)]
*** center 7: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1784958511910707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1784958511910707, 0.15151922450564254] ***
*** starting iteration: 2; err: [Inf, 0.1784958511910707, 0.15151922450564254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1784958511910707, 0.15151922450564254, 0.14615179399709807] ***
*** starting iteration: 3; err: [Inf, 0.1784958511910707, 0.15151922450564254, 0.14615179399709807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1784958511910707, 0.15151922450564254, 0.14615179399709807, 0.14487655822332876] ***
*** finished computation of 7 references, err: [Inf, 0.1784958511910707, 0.15151922450564254, 0.14615179399709807, 0.14487655822332876] ***
*** center 1: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 71, 17]]
** centroid: 2, normalized-entropy: 0.7080803256135676, [(2, 71), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 18, 0]]
** centroid: 3, normalized-entropy: 0.8003922080453356, [(1, 56), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [77, 2, 0]]
** centroid: 4, normalized-entropy: 0.17033057560105982, [(1, 77), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [13, 85, 0]]
** centroid: 5, normalized-entropy: 0.5646695797525669, [(1, 13), (2, 85)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [20, 87, 0]]
** centroid: 6, normalized-entropy: 0.6949749673676271, [(1, 20), (2, 87)]
*** center 7: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23478001299630236] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23478001299630236, 0.19823664503854452] ***
*** starting iteration: 2; err: [Inf, 0.23478001299630236, 0.19823664503854452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23478001299630236, 0.19823664503854452, 0.19363355834467766] ***
*** starting iteration: 3; err: [Inf, 0.23478001299630236, 0.19823664503854452, 0.19363355834467766] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23478001299630236, 0.19823664503854452, 0.19363355834467766, 0.1925631370150705] ***
*** starting iteration: 4; err: [Inf, 0.23478001299630236, 0.19823664503854452, 0.19363355834467766, 0.1925631370150705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23478001299630236, 0.19823664503854452, 0.19363355834467766, 0.1925631370150705, 0.19217398118328405] ***
*** finished computation of 7 references, err: [Inf, 0.23478001299630236, 0.19823664503854452, 0.19363355834467766, 0.1925631370150705, 0.19217398118328405] ***
*** center 1: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 72, 27]]
** centroid: 2, normalized-entropy: 0.8453509366224364, [(2, 72), (3, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [29, 68, 0]]
** centroid: 4, normalized-entropy: 0.8800270477157599, [(1, 29), (2, 68)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [88, 17, 0]]
** centroid: 5, normalized-entropy: 0.6388469391771899, [(1, 88), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 85, 0]]
** centroid: 6, normalized-entropy: 0.3095434291503252, [(1, 5), (2, 85)]
*** center 7: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2351775140385667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2351775140385667, 0.19438886083767232] ***
*** starting iteration: 2; err: [Inf, 0.2351775140385667, 0.19438886083767232] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2351775140385667, 0.19438886083767232, 0.18868485122857645] ***
*** starting iteration: 3; err: [Inf, 0.2351775140385667, 0.19438886083767232, 0.18868485122857645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2351775140385667, 0.19438886083767232, 0.18868485122857645, 0.18766404733737593] ***
*** starting iteration: 4; err: [Inf, 0.2351775140385667, 0.19438886083767232, 0.18868485122857645, 0.18766404733737593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2351775140385667, 0.19438886083767232, 0.18868485122857645, 0.18766404733737593, 0.18725920466753632] ***
*** finished computation of 7 references, err: [Inf, 0.2351775140385667, 0.19438886083767232, 0.18868485122857645, 0.18766404733737593, 0.18725920466753632] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [72, 36, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 72), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 29, 0]]
** centroid: 2, normalized-entropy: 0.8800270477157599, [(1, 68), (2, 29)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 84, 22]]
** centroid: 3, normalized-entropy: 0.7367680100024784, [(2, 84), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [15, 101, 0]]
** centroid: 5, normalized-entropy: 0.5555437650236148, [(1, 15), (2, 101)]
*** center 6: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2266737256182366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2266737256182366, 0.19362643499603158] ***
*** starting iteration: 2; err: [Inf, 0.2266737256182366, 0.19362643499603158] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2266737256182366, 0.19362643499603158, 0.19008526332659656] ***
*** starting iteration: 3; err: [Inf, 0.2266737256182366, 0.19362643499603158, 0.19008526332659656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2266737256182366, 0.19362643499603158, 0.19008526332659656, 0.18913364515540707] ***
*** finished computation of 7 references, err: [Inf, 0.2266737256182366, 0.19362643499603158, 0.19008526332659656, 0.18913364515540707] ***
*** center 1: selecting labels [1] (freq >= 2) [from [109, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 66, 17]]
** centroid: 2, normalized-entropy: 0.7314625617214586, [(2, 66), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [92, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 15, 0]]
** centroid: 4, normalized-entropy: 0.6631968402398286, [(1, 72), (2, 15)]
*** center 5: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 92, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [13, 88, 0]]
** centroid: 7, normalized-entropy: 0.5538976334852961, [(1, 13), (2, 88)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1942330017188066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1942330017188066, 0.15296974589953105] ***
*** starting iteration: 2; err: [Inf, 0.1942330017188066, 0.15296974589953105] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1942330017188066, 0.15296974589953105, 0.14946918012105856] ***
*** starting iteration: 3; err: [Inf, 0.1942330017188066, 0.15296974589953105, 0.14946918012105856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1942330017188066, 0.15296974589953105, 0.14946918012105856, 0.14894494577730494] ***
*** finished computation of 7 references, err: [Inf, 0.1942330017188066, 0.15296974589953105, 0.14946918012105856, 0.14894494577730494] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [118, 6, 0]]
** centroid: 1, normalized-entropy: 0.2795055456366802, [(1, 118), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [79, 2, 0]]
** centroid: 2, normalized-entropy: 0.16702680404522793, [(1, 79), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 51, 27]]
** centroid: 3, normalized-entropy: 0.9305861291319927, [(2, 51), (3, 27)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [111, 11, 0]]
** centroid: 5, normalized-entropy: 0.4370167722360665, [(1, 111), (2, 11)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 91, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 82, 0]]
** centroid: 7, normalized-entropy: 0.1623261801753929, [(1, 2), (2, 82)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1968352901407223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968352901407223, 0.15065446068118069] ***
*** starting iteration: 2; err: [Inf, 0.1968352901407223, 0.15065446068118069] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968352901407223, 0.15065446068118069, 0.1455645182126689] ***
*** starting iteration: 3; err: [Inf, 0.1968352901407223, 0.15065446068118069, 0.1455645182126689] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968352901407223, 0.15065446068118069, 0.1455645182126689, 0.144052404377643] ***
*** finished computation of 7 references, err: [Inf, 0.1968352901407223, 0.15065446068118069, 0.1455645182126689, 0.144052404377643] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 84, 20]]
** centroid: 1, normalized-entropy: 0.7062740891876008, [(2, 84), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 16, 0]]
** centroid: 3, normalized-entropy: 0.6931274153282881, [(1, 70), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [92, 25, 0]]
** centroid: 4, normalized-entropy: 0.7484492947832908, [(1, 92), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 35, 0]]
** centroid: 5, normalized-entropy: 0.9583485169215336, [(1, 57), (2, 35)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 90, 2]]
** centroid: 6, normalized-entropy: 0.1510969705171136, [(2, 90), (3, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1887371965392173] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887371965392173, 0.15440641244527126] ***
*** starting iteration: 2; err: [Inf, 0.1887371965392173, 0.15440641244527126] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887371965392173, 0.15440641244527126, 0.1506203021686608] ***
*** starting iteration: 3; err: [Inf, 0.1887371965392173, 0.15440641244527126, 0.1506203021686608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887371965392173, 0.15440641244527126, 0.1506203021686608, 0.149595953808955] ***
*** finished computation of 7 references, err: [Inf, 0.1887371965392173, 0.15440641244527126, 0.1506203021686608, 0.149595953808955] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [59, 52, 0]]
** centroid: 1, normalized-entropy: 0.9971293325151022, [(1, 59), (2, 52)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 25, 0]]
** centroid: 2, normalized-entropy: 0.869620774054375, [(1, 61), (2, 25)]
*** center 3: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 113, 17]]
** centroid: 4, normalized-entropy: 0.5595440356886702, [(2, 113), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [27, 73, 0]]
** centroid: 5, normalized-entropy: 0.8414646362081756, [(1, 27), (2, 73)]
*** center 6: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.923012833192474, 0.9229888571205936, 0.919017820215425, 0.908009806213399, 0.902009794225363, 0.898997800195405, 0.894996793200386, 0.8879538220855586, 0.8859877841913771, 0.8769997542452632, 0.8740087392782003, 0.8550106993220766, 0.837948727170284]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.3, 1) => 0.923012833192474
finished with 14
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.2305280463049865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2305280463049865, 0.1817348181464438] ***
*** starting iteration: 2; err: [Inf, 0.2305280463049865, 0.1817348181464438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2305280463049865, 0.1817348181464438, 0.16693513421481615] ***
*** starting iteration: 3; err: [Inf, 0.2305280463049865, 0.1817348181464438, 0.16693513421481615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2305280463049865, 0.1817348181464438, 0.16693513421481615, 0.15841431470375295] ***
*** starting iteration: 4; err: [Inf, 0.2305280463049865, 0.1817348181464438, 0.16693513421481615, 0.15841431470375295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2305280463049865, 0.1817348181464438, 0.16693513421481615, 0.15841431470375295, 0.15457851267853254] ***
*** starting iteration: 5; err: [Inf, 0.2305280463049865, 0.1817348181464438, 0.16693513421481615, 0.15841431470375295, 0.15457851267853254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2305280463049865, 0.1817348181464438, 0.16693513421481615, 0.15841431470375295, 0.15457851267853254, 0.15212254480713303] ***
*** starting iteration: 6; err: [Inf, 0.2305280463049865, 0.1817348181464438, 0.16693513421481615, 0.15841431470375295, 0.15457851267853254, 0.15212254480713303] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2305280463049865, 0.1817348181464438, 0.16693513421481615, 0.15841431470375295, 0.15457851267853254, 0.15212254480713303, 0.15070927616169638] ***
*** starting iteration: 7; err: [Inf, 0.2305280463049865, 0.1817348181464438, 0.16693513421481615, 0.15841431470375295, 0.15457851267853254, 0.15212254480713303, 0.15070927616169638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2305280463049865, 0.1817348181464438, 0.16693513421481615, 0.15841431470375295, 0.15457851267853254, 0.15212254480713303, 0.15070927616169638, 0.15016749069477814] ***
*** finished computation of 7 references, err: [Inf, 0.2305280463049865, 0.1817348181464438, 0.16693513421481615, 0.15841431470375295, 0.15457851267853254, 0.15212254480713303, 0.15070927616169638, 0.15016749069477814] ***
*** center 1: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 50, 0]]
** centroid: 2, normalized-entropy: 0.9996995428565171, [(1, 48), (2, 50)]
*** center 3: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [89, 35, 0]]
** centroid: 4, normalized-entropy: 0.8585093672491074, [(1, 89), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 14, 0]]
** centroid: 5, normalized-entropy: 0.6739468651941155, [(1, 65), (2, 14)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 67, 2]]
** centroid: 6, normalized-entropy: 0.18927843126120178, [(2, 67), (3, 2)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 77, 25]]
** centroid: 7, normalized-entropy: 0.8034158480707552, [(2, 77), (3, 25)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2049897691595188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2049897691595188, 0.16996742804175888] ***
*** starting iteration: 2; err: [Inf, 0.2049897691595188, 0.16996742804175888] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2049897691595188, 0.16996742804175888, 0.1600734559983864] ***
*** starting iteration: 3; err: [Inf, 0.2049897691595188, 0.16996742804175888, 0.1600734559983864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2049897691595188, 0.16996742804175888, 0.1600734559983864, 0.15611945467860042] ***
*** starting iteration: 4; err: [Inf, 0.2049897691595188, 0.16996742804175888, 0.1600734559983864, 0.15611945467860042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2049897691595188, 0.16996742804175888, 0.1600734559983864, 0.15611945467860042, 0.15279017981543935] ***
*** starting iteration: 5; err: [Inf, 0.2049897691595188, 0.16996742804175888, 0.1600734559983864, 0.15611945467860042, 0.15279017981543935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2049897691595188, 0.16996742804175888, 0.1600734559983864, 0.15611945467860042, 0.15279017981543935, 0.1494375317311403] ***
*** starting iteration: 6; err: [Inf, 0.2049897691595188, 0.16996742804175888, 0.1600734559983864, 0.15611945467860042, 0.15279017981543935, 0.1494375317311403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2049897691595188, 0.16996742804175888, 0.1600734559983864, 0.15611945467860042, 0.15279017981543935, 0.1494375317311403, 0.1473665706034208] ***
*** starting iteration: 7; err: [Inf, 0.2049897691595188, 0.16996742804175888, 0.1600734559983864, 0.15611945467860042, 0.15279017981543935, 0.1494375317311403, 0.1473665706034208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2049897691595188, 0.16996742804175888, 0.1600734559983864, 0.15611945467860042, 0.15279017981543935, 0.1494375317311403, 0.1473665706034208, 0.14650843199551933] ***
*** finished computation of 7 references, err: [Inf, 0.2049897691595188, 0.16996742804175888, 0.1600734559983864, 0.15611945467860042, 0.15279017981543935, 0.1494375317311403, 0.1473665706034208, 0.14650843199551933] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [97, 4, 0]]
** centroid: 1, normalized-entropy: 0.24047340659188013, [(1, 97), (2, 4)]
*** center 2: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [70, 34, 0]]
** centroid: 4, normalized-entropy: 0.9117517586347538, [(1, 70), (2, 34)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 34, 0]]
** centroid: 5, normalized-entropy: 0.9534158774525225, [(1, 57), (2, 34)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 97, 22]]
** centroid: 6, normalized-entropy: 0.6906241389199443, [(2, 97), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [68, 10, 0]]
** centroid: 7, normalized-entropy: 0.552495114325111, [(1, 68), (2, 10)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2511251723233923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2511251723233923, 0.19813300058562616] ***
*** starting iteration: 2; err: [Inf, 0.2511251723233923, 0.19813300058562616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2511251723233923, 0.19813300058562616, 0.18203451435571757] ***
*** starting iteration: 3; err: [Inf, 0.2511251723233923, 0.19813300058562616, 0.18203451435571757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2511251723233923, 0.19813300058562616, 0.18203451435571757, 0.1728263137767139] ***
*** starting iteration: 4; err: [Inf, 0.2511251723233923, 0.19813300058562616, 0.18203451435571757, 0.1728263137767139] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2511251723233923, 0.19813300058562616, 0.18203451435571757, 0.1728263137767139, 0.16578468316509717] ***
*** starting iteration: 5; err: [Inf, 0.2511251723233923, 0.19813300058562616, 0.18203451435571757, 0.1728263137767139, 0.16578468316509717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2511251723233923, 0.19813300058562616, 0.18203451435571757, 0.1728263137767139, 0.16578468316509717, 0.1582862006156877] ***
*** starting iteration: 6; err: [Inf, 0.2511251723233923, 0.19813300058562616, 0.18203451435571757, 0.1728263137767139, 0.16578468316509717, 0.1582862006156877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2511251723233923, 0.19813300058562616, 0.18203451435571757, 0.1728263137767139, 0.16578468316509717, 0.1582862006156877, 0.15174962631796768] ***
*** starting iteration: 7; err: [Inf, 0.2511251723233923, 0.19813300058562616, 0.18203451435571757, 0.1728263137767139, 0.16578468316509717, 0.1582862006156877, 0.15174962631796768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2511251723233923, 0.19813300058562616, 0.18203451435571757, 0.1728263137767139, 0.16578468316509717, 0.1582862006156877, 0.15174962631796768, 0.14782302841234177] ***
*** starting iteration: 8; err: [Inf, 0.2511251723233923, 0.19813300058562616, 0.18203451435571757, 0.1728263137767139, 0.16578468316509717, 0.1582862006156877, 0.15174962631796768, 0.14782302841234177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2511251723233923, 0.19813300058562616, 0.18203451435571757, 0.1728263137767139, 0.16578468316509717, 0.1582862006156877, 0.15174962631796768, 0.14782302841234177, 0.14634953254018387] ***
*** starting iteration: 9; err: [Inf, 0.2511251723233923, 0.19813300058562616, 0.18203451435571757, 0.1728263137767139, 0.16578468316509717, 0.1582862006156877, 0.15174962631796768, 0.14782302841234177, 0.14634953254018387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2511251723233923, 0.19813300058562616, 0.18203451435571757, 0.1728263137767139, 0.16578468316509717, 0.1582862006156877, 0.15174962631796768, 0.14782302841234177, 0.14634953254018387, 0.14570701713610937] ***
*** finished computation of 7 references, err: [Inf, 0.2511251723233923, 0.19813300058562616, 0.18203451435571757, 0.1728263137767139, 0.16578468316509717, 0.1582862006156877, 0.15174962631796768, 0.14782302841234177, 0.14634953254018387, 0.14570701713610937] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 80, 16]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 80), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [85, 35, 0]]
** centroid: 2, normalized-entropy: 0.8708644692353648, [(1, 85), (2, 35)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [56, 27, 0]]
** centroid: 3, normalized-entropy: 0.9100534290139191, [(1, 56), (2, 27)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 19, 0]]
** centroid: 4, normalized-entropy: 0.7958812735955936, [(1, 60), (2, 19)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 102, 1]]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9320038601475727, 0.923012833192474, 0.9229888571205936, 0.919017820215425, 0.908009806213399, 0.902009794225363, 0.898997800195405, 0.894996793200386, 0.8879538220855586, 0.8859877841913771, 0.8769997542452632, 0.8740087392782003, 0.8550106993220766, 0.837948727170284]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.6, 2) => 0.9320038601475727
finished with 15
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.2007800359782335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2007800359782335, 0.16165586918530925] ***
*** finished computation of 7 references, err: [Inf, 0.2007800359782335, 0.16165586918530925] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [8, 77, 0]]
** centroid: 1, normalized-entropy: 0.4500666580964382, [(1, 8), (2, 77)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 81, 0]]
** centroid: 2, normalized-entropy: 0.9980524950332399, [(1, 73), (2, 81)]
*** center 3: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [43, 6, 0]]
** centroid: 4, normalized-entropy: 0.5363596511250623, [(1, 43), (2, 6)]
*** center 5: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [122, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 79, 27]]
** centroid: 7, normalized-entropy: 0.8186691181065503, [(2, 79), (3, 27)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24405258202107102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24405258202107102, 0.1634571758521975] ***
*** finished computation of 7 references, err: [Inf, 0.24405258202107102, 0.1634571758521975] ***
*** center 1: selecting labels [1] (freq >= 2) [from [131, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 46, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 32, 22]]
** centroid: 3, normalized-entropy: 0.975119064940866, [(2, 32), (3, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [4, 64, 0]]
** centroid: 4, normalized-entropy: 0.32275695889739825, [(1, 4), (2, 64)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [147, 3, 0]]
** centroid: 5, normalized-entropy: 0.14144054254182067, [(1, 147), (2, 3)]
*** center 6: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [23, 105, 0]]
** centroid: 7, normalized-entropy: 0.6793929348105144, [(1, 23), (2, 105)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1947823797493637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1947823797493637, 0.16049645777171787] ***
*** finished computation of 7 references, err: [Inf, 0.1947823797493637, 0.16049645777171787] ***
*** center 1: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 34, 17]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 34), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 40, 0]]
** centroid: 3, normalized-entropy: 0.9819407868640977, [(1, 55), (2, 40)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 38, 0]]
** centroid: 4, normalized-entropy: 0.9470622432515328, [(1, 66), (2, 38)]
*** center 5: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [74, 55, 0]]
** centroid: 6, normalized-entropy: 0.9842944391410947, [(1, 74), (2, 55)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 96, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9370208531885179, 0.9320038601475727, 0.923012833192474, 0.9229888571205936, 0.919017820215425, 0.908009806213399, 0.902009794225363, 0.898997800195405, 0.894996793200386, 0.8879538220855586, 0.8859877841913771, 0.8769997542452632, 0.8740087392782003, 0.8550106993220766, 0.837948727170284]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9370208531885179
finished with 16
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.24259682760752915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24259682760752915, 0.19325885218645059] ***
*** starting iteration: 2; err: [Inf, 0.24259682760752915, 0.19325885218645059] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24259682760752915, 0.19325885218645059, 0.1902083384129009] ***
*** starting iteration: 3; err: [Inf, 0.24259682760752915, 0.19325885218645059, 0.1902083384129009] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24259682760752915, 0.19325885218645059, 0.1902083384129009, 0.18997613773205774] ***
*** finished computation of 7 references, err: [Inf, 0.24259682760752915, 0.19325885218645059, 0.1902083384129009, 0.18997613773205774] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [60, 37, 0]]
** centroid: 1, normalized-entropy: 0.9590550044058676, [(1, 60), (2, 37)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [74, 3, 0]]
** centroid: 2, normalized-entropy: 0.23750814382859295, [(1, 74), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 89, 27]]
** centroid: 4, normalized-entropy: 0.7827892889687528, [(2, 89), (3, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [88, 26, 0]]
** centroid: 5, normalized-entropy: 0.7746319868686841, [(1, 88), (2, 26)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 88, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22599132132969205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22599132132969205, 0.19597351172592664] ***
*** starting iteration: 2; err: [Inf, 0.22599132132969205, 0.19597351172592664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22599132132969205, 0.19597351172592664, 0.1918506990885013] ***
*** starting iteration: 3; err: [Inf, 0.22599132132969205, 0.19597351172592664, 0.1918506990885013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22599132132969205, 0.19597351172592664, 0.1918506990885013, 0.1910564023303217] ***
*** finished computation of 7 references, err: [Inf, 0.22599132132969205, 0.19597351172592664, 0.1918506990885013, 0.1910564023303217] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [111, 3, 0]]
** centroid: 1, normalized-entropy: 0.17556502585750275, [(1, 111), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 12, 0]]
** centroid: 2, normalized-entropy: 0.6145715612236268, [(1, 67), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 70, 22]]
** centroid: 3, normalized-entropy: 0.7935912300117066, [(2, 70), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [35, 71, 0]]
** centroid: 5, normalized-entropy: 0.9151190292999326, [(1, 35), (2, 71)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 94, 0]]
** centroid: 6, normalized-entropy: 0.3966277727783787, [(1, 8), (2, 94)]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23463323985602053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23463323985602053, 0.1934728330333551] ***
*** starting iteration: 2; err: [Inf, 0.23463323985602053, 0.1934728330333551] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23463323985602053, 0.1934728330333551, 0.1900593556988722] ***
*** starting iteration: 3; err: [Inf, 0.23463323985602053, 0.1934728330333551, 0.1900593556988722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23463323985602053, 0.1934728330333551, 0.1900593556988722, 0.18947145253045672] ***
*** finished computation of 7 references, err: [Inf, 0.23463323985602053, 0.1934728330333551, 0.1900593556988722, 0.18947145253045672] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [55, 65, 0]]
** centroid: 1, normalized-entropy: 0.9949848281859699, [(1, 55), (2, 65)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 20, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 60), (2, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 94, 17]]
** centroid: 4, normalized-entropy: 0.6176751423955683, [(2, 94), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 83, 0]]
** centroid: 5, normalized-entropy: 0.7101234912653349, [(1, 20), (2, 83)]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [105, 1, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 16)
[0.9370208531885179, 0.9320038601475727, 0.923012833192474, 0.9229888571205936, 0.919017820215425, 0.908009806213399, 0.902009794225363, 0.898997800195405, 0.894996793200386, 0.8939987892083701, 0.8879538220855586, 0.8859877841913771, 0.8769997542452632, 0.8740087392782003, 0.8550106993220766, 0.837948727170284]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9370208531885179
finished with 16
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9370208531885179, 0.9320038601475727, 0.923012833192474, 0.9229888571205936, 0.919017820215425, 0.908009806213399, 0.902009794225363, 0.898997800195405, 0.894996793200386, 0.8939987892083701, 0.8879538220855586, 0.8859877841913771, 0.8769997542452632, 0.8740087392782003, 0.8550106993220766, 0.837948727170284]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9370208531885179
finished with 16
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9370208531885179, 0.9320038601475727, 0.923012833192474, 0.9229888571205936, 0.919017820215425, 0.908009806213399, 0.902009794225363, 0.898997800195405, 0.894996793200386, 0.8939987892083701, 0.8879538220855586, 0.8859877841913771, 0.8769997542452632, 0.8740087392782003, 0.8550106993220766, 0.837948727170284]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9370208531885179
finished with 16
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9370208531885179, 0.9320038601475727, 0.923012833192474, 0.9229888571205936, 0.919017820215425, 0.908009806213399, 0.902009794225363, 0.898997800195405, 0.894996793200386, 0.8939987892083701, 0.8879538220855586, 0.8859877841913771, 0.8769997542452632, 0.8740087392782003, 0.8550106993220766, 0.837948727170284]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9370208531885179
finished with 16
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9370208531885179, 0.9320038601475727, 0.923012833192474, 0.9229888571205936, 0.919017820215425, 0.908009806213399, 0.902009794225363, 0.898997800195405, 0.894996793200386, 0.8939987892083701, 0.8879538220855586, 0.8859877841913771, 0.8769997542452632, 0.8740087392782003, 0.8550106993220766, 0.837948727170284]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :rand, 0.6, 2) => 0.9370208531885179
finished with 16
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.1706704284022562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1706704284022562, 0.15103934529609978] ***
*** finished computation of 7 references, err: [Inf, 0.1706704284022562, 0.15103934529609978] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [106, 36, 0]]
** centroid: 1, normalized-entropy: 0.8168114277045246, [(1, 106), (2, 36)]
*** center 2: selecting labels [1] (freq >= 2) [from [140, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [79, 84, 0]]
** centroid: 3, normalized-entropy: 0.9993211442960652, [(1, 79), (2, 84)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [147, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 148, 33]]
** centroid: 6, normalized-entropy: 0.6851270801665561, [(2, 148), (3, 33)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [31, 110, 0]]
** centroid: 7, normalized-entropy: 0.7599084154505263, [(1, 31), (2, 110)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18591515469364822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18591515469364822, 0.1653718795683235] ***
*** finished computation of 7 references, err: [Inf, 0.18591515469364822, 0.1653718795683235] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 41, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 21, 0]]
** centroid: 2, normalized-entropy: 0.8656939941993219, [(1, 52), (2, 21)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 4, 16]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [3, 73, 0]]
** centroid: 5, normalized-entropy: 0.23987382528036535, [(1, 3), (2, 73)]
*** center 6: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [17, 63, 0]]
** centroid: 7, normalized-entropy: 0.7462343013654809, [(1, 17), (2, 63)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19040265838615597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19040265838615597, 0.15920298416540027] ***
*** finished computation of 7 references, err: [Inf, 0.19040265838615597, 0.15920298416540027] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [46, 25, 0]]
** centroid: 1, normalized-entropy: 0.935940714955517, [(1, 46), (2, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [78, 19, 0]]
** centroid: 5, normalized-entropy: 0.7136036068604937, [(1, 78), (2, 19)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 118, 16]]
** centroid: 6, normalized-entropy: 0.52764232609436, [(2, 118), (3, 16)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [51, 23, 0]]
** centroid: 7, normalized-entropy: 0.8941071841443881, [(1, 51), (2, 23)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19183149435557426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19183149435557426, 0.152090074300766] ***
*** finished computation of 7 references, err: [Inf, 0.19183149435557426, 0.152090074300766] ***
*** center 1: selecting labels [1] (freq >= 2) [from [29, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [25, 54, 0]]
** centroid: 3, normalized-entropy: 0.9004854334784268, [(1, 25), (2, 54)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 63, 17]]
** centroid: 4, normalized-entropy: 0.7462343013654809, [(2, 63), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [37, 40, 0]]
** centroid: 5, normalized-entropy: 0.9989047442823606, [(1, 37), (2, 40)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 40, 0]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(1, 8), (2, 40)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [79, 4, 0]]
** centroid: 7, normalized-entropy: 0.27866980356389914, [(1, 79), (2, 4)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18150861649028957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18150861649028957, 0.1507950882744044] ***
*** finished computation of 7 references, err: [Inf, 0.18150861649028957, 0.1507950882744044] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [50, 33, 0]]
** centroid: 1, normalized-entropy: 0.9695235828220429, [(1, 50), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [71, 6, 0]]
** centroid: 2, normalized-entropy: 0.39481484603049416, [(1, 71), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 75, 3]]
** centroid: 3, normalized-entropy: 0.23519338181924157, [(2, 75), (3, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 15, 0]]
** centroid: 4, normalized-entropy: 0.7012065844539666, [(1, 64), (2, 15)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 59, 11]]
** centroid: 5, normalized-entropy: 0.6274303352684106, [(2, 59), (3, 11)]
*** center 6: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29257516354415564] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29257516354415564, 0.18609683295898138] ***
*** finished computation of 7 references, err: [Inf, 0.29257516354415564, 0.18609683295898138] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [53, 4, 0]]
** centroid: 1, normalized-entropy: 0.36657801255334593, [(1, 53), (2, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [19, 139, 13]]
** centroid: 2, normalized-entropy: 0.5538295172547496, [(1, 19), (2, 139), (3, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 42, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 42), (2, 42)]
*** center 6: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21311468265764416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21311468265764416, 0.15051825296133756] ***
*** finished computation of 7 references, err: [Inf, 0.21311468265764416, 0.15051825296133756] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 28, 12]]
** centroid: 1, normalized-entropy: 0.8812908992306927, [(2, 28), (3, 12)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 56, 0]]
** centroid: 2, normalized-entropy: 0.9995090461828581, [(1, 59), (2, 56)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [38, 20, 0]]
** centroid: 4, normalized-entropy: 0.9293636260137188, [(1, 38), (2, 20)]
*** center 5: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 33, 0]]
** centroid: 6, normalized-entropy: 0.9933570282728464, [(1, 40), (2, 33)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21137866935506464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21137866935506464, 0.156875624679029] ***
*** finished computation of 7 references, err: [Inf, 0.21137866935506464, 0.156875624679029] ***
*** center 1: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 47, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [102, 33, 0]]
** centroid: 3, normalized-entropy: 0.80235344282919, [(1, 102), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [36, 23, 0]]
** centroid: 4, normalized-entropy: 0.9646900825612559, [(1, 36), (2, 23)]
*** center 5: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 92, 18]]
** centroid: 6, normalized-entropy: 0.6429383500409613, [(2, 92), (3, 18)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [35, 4, 0]]
** centroid: 7, normalized-entropy: 0.4770713062193298, [(1, 35), (2, 4)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23960128296539188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23960128296539188, 0.16206284116674213] ***
*** finished computation of 7 references, err: [Inf, 0.23960128296539188, 0.16206284116674213] ***
*** center 1: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [61, 45, 0]]
** centroid: 4, normalized-entropy: 0.9835018986559216, [(1, 61), (2, 45)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 27, 16]]
** centroid: 5, normalized-entropy: 0.9522656254366643, [(2, 27), (3, 16)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 46, 1]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [12, 68, 0]]
** centroid: 7, normalized-entropy: 0.6098403047164005, [(1, 12), (2, 68)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18699790532514454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18699790532514454, 0.16220386720262467] ***
*** finished computation of 7 references, err: [Inf, 0.18699790532514454, 0.16220386720262467] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [4, 39, 0]]
** centroid: 1, normalized-entropy: 0.446481346896803, [(1, 4), (2, 39)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 25, 18]]
** centroid: 2, normalized-entropy: 0.9807983646944296, [(2, 25), (3, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 62, 1]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [16, 41, 0]]
** centroid: 5, normalized-entropy: 0.8564052389131375, [(1, 16), (2, 41)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [60, 16, 0]]
** centroid: 6, normalized-entropy: 0.7424875695421234, [(1, 60), (2, 16)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [95, 7, 0]]
** centroid: 7, normalized-entropy: 0.3607805650514635, [(1, 95), (2, 7)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2405942353014834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2405942353014834, 0.16553509897226468] ***
*** finished computation of 7 references, err: [Inf, 0.2405942353014834, 0.16553509897226468] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 15, 15]]
** centroid: 1, normalized-entropy: 1.0, [(2, 15), (3, 15)]
*** center 2: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 32, 0]]
** centroid: 3, normalized-entropy: 0.9738354819891416, [(1, 47), (2, 32)]
*** center 4: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 74, 2]]
** centroid: 5, normalized-entropy: 0.17556502585750275, [(2, 74), (3, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [96, 27, 0]]
** centroid: 6, normalized-entropy: 0.7592757847892834, [(1, 96), (2, 27)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 41, 0]]
** centroid: 7, normalized-entropy: 0.43275015878875417, [(1, 4), (2, 41)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1950033451942727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1950033451942727, 0.15691671482473613] ***
*** finished computation of 7 references, err: [Inf, 0.1950033451942727, 0.15691671482473613] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 51, 2]]
** centroid: 1, normalized-entropy: 0.23181305002459035, [(2, 51), (3, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 36, 0]]
** centroid: 2, normalized-entropy: 0.9683211863989214, [(1, 55), (2, 36)]
*** center 3: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 15, 17]]
** centroid: 4, normalized-entropy: 0.9971803988942641, [(2, 15), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [8, 66, 0]]
** centroid: 5, normalized-entropy: 0.4941829348497886, [(1, 8), (2, 66)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [135, 3, 0]]
** centroid: 6, normalized-entropy: 0.1510969705171136, [(1, 135), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [31, 11, 0]]
** centroid: 7, normalized-entropy: 0.8296071030882032, [(1, 31), (2, 11)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2237910262197256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2237910262197256, 0.1659536717357114] ***
*** finished computation of 7 references, err: [Inf, 0.2237910262197256, 0.1659536717357114] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [39, 58, 0]]
** centroid: 1, normalized-entropy: 0.9721439323621084, [(1, 39), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [98, 8, 0]]
** centroid: 2, normalized-entropy: 0.3860189005698936, [(1, 98), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 92, 18]]
** centroid: 3, normalized-entropy: 0.6429383500409613, [(2, 92), (3, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 15, 0]]
** centroid: 4, normalized-entropy: 0.7382848661434506, [(1, 57), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 15, 0]]
** centroid: 5, normalized-entropy: 0.9963165195589622, [(1, 13), (2, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18539314324222506] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18539314324222506, 0.14837307403609157] ***
*** finished computation of 7 references, err: [Inf, 0.18539314324222506, 0.14837307403609157] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 52, 0]]
** centroid: 1, normalized-entropy: 0.4288109647301171, [(1, 5), (2, 52)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 12, 0]]
** centroid: 2, normalized-entropy: 0.644694043811662, [(1, 61), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 101, 13]]
** centroid: 3, normalized-entropy: 0.5119682940439919, [(2, 101), (3, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [35, 17, 0]]
** centroid: 4, normalized-entropy: 0.9117517586347538, [(1, 35), (2, 17)]
*** center 5: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [49, 1, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20502689435705543] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20502689435705543, 0.17051354600302876] ***
*** finished computation of 7 references, err: [Inf, 0.20502689435705543, 0.17051354600302876] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [21, 84, 6]]
** centroid: 1, normalized-entropy: 0.622273265304913, [(1, 21), (2, 84), (3, 6)]
*** center 2: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [27, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [81, 9, 0]]
** centroid: 4, normalized-entropy: 0.46899559358928133, [(1, 81), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [77, 11, 0]]
** centroid: 5, normalized-entropy: 0.5435644431995963, [(1, 77), (2, 11)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 67, 10]]
** centroid: 6, normalized-entropy: 0.557081908103416, [(2, 67), (3, 10)]
*** center 7: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2462532907295972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2462532907295972, 0.17500299207679929] ***
*** finished computation of 7 references, err: [Inf, 0.2462532907295972, 0.17500299207679929] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 43, 12]]
** centroid: 2, normalized-entropy: 0.7568336324184036, [(2, 43), (3, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [44, 10, 0]]
** centroid: 4, normalized-entropy: 0.6912898694057888, [(1, 44), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [88, 58, 0]]
** centroid: 5, normalized-entropy: 0.9693253797191861, [(1, 88), (2, 58)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [35, 20, 0]]
** centroid: 6, normalized-entropy: 0.9456603046006401, [(1, 35), (2, 20)]
*** center 7: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.177534019544255] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.177534019544255, 0.15279300583153962] ***
*** finished computation of 7 references, err: [Inf, 0.177534019544255, 0.15279300583153962] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 31, 14]]
** centroid: 1, normalized-entropy: 0.8944518845341284, [(2, 31), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 20, 0]]
** centroid: 2, normalized-entropy: 0.787126586201269, [(1, 65), (2, 20)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 82, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [40, 54, 0]]
** centroid: 4, normalized-entropy: 0.9839393951635759, [(1, 40), (2, 54)]
*** center 5: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [37, 4, 0]]
** centroid: 6, normalized-entropy: 0.4612160405139095, [(1, 37), (2, 4)]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19650481046829374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19650481046829374, 0.15361176820471883] ***
*** finished computation of 7 references, err: [Inf, 0.19650481046829374, 0.15361176820471883] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 49, 0]]
** centroid: 1, normalized-entropy: 0.9578630237479795, [(1, 30), (2, 49)]
*** center 2: selecting labels [1] (freq >= 2) [from [85, 1, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [1, 66, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [41, 7, 0]]
** centroid: 4, normalized-entropy: 0.5993142373098089, [(1, 41), (2, 7)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 42, 18]]
** centroid: 5, normalized-entropy: 0.8812908992306927, [(2, 42), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [51, 29, 0]]
** centroid: 6, normalized-entropy: 0.9447388286467892, [(1, 51), (2, 29)]
*** center 7: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24581564358249305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24581564358249305, 0.1722968806568533] ***
*** finished computation of 7 references, err: [Inf, 0.24581564358249305, 0.1722968806568533] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [48, 54, 0]]
** centroid: 1, normalized-entropy: 0.9975025463691153, [(1, 48), (2, 54)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 55, 19]]
** centroid: 2, normalized-entropy: 0.8218127305034848, [(2, 55), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [6, 46, 0]]
** centroid: 3, normalized-entropy: 0.5159469300074472, [(1, 6), (2, 46)]
*** center 4: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 2, 0]]
** centroid: 5, normalized-entropy: 0.23868451135100152, [(1, 49), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [55, 7, 0]]
** centroid: 6, normalized-entropy: 0.5086113313826895, [(1, 55), (2, 7)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [52, 15, 0]]
** centroid: 7, normalized-entropy: 0.7671903206448686, [(1, 52), (2, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23177407657913865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23177407657913865, 0.17143570818006992] ***
*** finished computation of 7 references, err: [Inf, 0.23177407657913865, 0.17143570818006992] ***
*** center 1: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [64, 68, 0]]
** centroid: 3, normalized-entropy: 0.9993375041688846, [(1, 64), (2, 68)]
*** center 4: selecting labels [1] (freq >= 2) [from [39, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 14, 0]]
** centroid: 5, normalized-entropy: 0.9494520153879484, [(1, 24), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [42, 25, 0]]
** centroid: 6, normalized-entropy: 0.9530483471581301, [(1, 42), (2, 25)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 96, 17]]
** centroid: 7, normalized-entropy: 0.6109464989595527, [(2, 96), (3, 17)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1580307514127344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1580307514127344, 0.15265083010308444] ***
*** finished computation of 7 references, err: [Inf, 0.1580307514127344, 0.15265083010308444] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 42, 12]]
** centroid: 1, normalized-entropy: 0.7642045065086204, [(2, 42), (3, 12)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [7, 45, 0]]
** centroid: 2, normalized-entropy: 0.5699613760403499, [(1, 7), (2, 45)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [101, 6, 0]]
** centroid: 3, normalized-entropy: 0.31166198862303296, [(1, 101), (2, 6)]
*** center 4: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 19, 0]]
** centroid: 5, normalized-entropy: 0.8890349038123858, [(1, 43), (2, 19)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 77, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2655875782798976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2655875782798976, 0.16774724950431846] ***
*** finished computation of 7 references, err: [Inf, 0.2655875782798976, 0.16774724950431846] ***
*** center 1: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [42, 16, 0]]
** centroid: 2, normalized-entropy: 0.8497511372532974, [(1, 42), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 77, 16]]
** centroid: 3, normalized-entropy: 0.6623570516079519, [(2, 77), (3, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 69, 0]]
** centroid: 4, normalized-entropy: 0.9996734260048917, [(1, 72), (2, 69)]
*** center 5: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [37, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [39, 25, 0]]
** centroid: 7, normalized-entropy: 0.9652016987500656, [(1, 39), (2, 25)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24713993936032058] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24713993936032058, 0.16351221818849446] ***
*** finished computation of 7 references, err: [Inf, 0.24713993936032058, 0.16351221818849446] ***
*** center 1: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [32, 31, 0]]
** centroid: 2, normalized-entropy: 0.9998182469603427, [(1, 32), (2, 31)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 8, 0]]
** centroid: 3, normalized-entropy: 0.47299536229314826, [(1, 71), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [36, 15, 0]]
** centroid: 4, normalized-entropy: 0.8739810481273581, [(1, 36), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 93, 0]]
** centroid: 5, normalized-entropy: 0.32984607020714635, [(1, 6), (2, 93)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 42, 21]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 42), (3, 21)]
*** center 7: selecting labels [1] (freq >= 2) [from [46, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2123628492988646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2123628492988646, 0.16958744802698494] ***
*** finished computation of 7 references, err: [Inf, 0.2123628492988646, 0.16958744802698494] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 40, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [39, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [61, 68, 0]]
** centroid: 3, normalized-entropy: 0.9978749236685321, [(1, 61), (2, 68)]
*** center 4: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 53, 16]]
** centroid: 5, normalized-entropy: 0.7812812090702043, [(2, 53), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [28, 23, 0]]
** centroid: 6, normalized-entropy: 0.9930554830121975, [(1, 28), (2, 23)]
*** center 7: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18090452566742898] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18090452566742898, 0.15930277303047477] ***
*** finished computation of 7 references, err: [Inf, 0.18090452566742898, 0.15930277303047477] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 62, 13]]
** centroid: 1, normalized-entropy: 0.6652735227649414, [(2, 62), (3, 13)]
*** center 2: selecting labels [2] (freq >= 2) [from [1, 45, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 21, 0]]
** centroid: 4, normalized-entropy: 0.7973265101474423, [(1, 66), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [40, 65, 0]]
** centroid: 5, normalized-entropy: 0.9587118829771317, [(1, 40), (2, 65)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2297410596758127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2297410596758127, 0.16246764140203596] ***
*** finished computation of 7 references, err: [Inf, 0.2297410596758127, 0.16246764140203596] ***
*** center 1: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 18, 0]]
** centroid: 2, normalized-entropy: 0.8571484374283717, [(1, 46), (2, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [4, 57, 0]]
** centroid: 3, normalized-entropy: 0.34918437350730797, [(1, 4), (2, 57)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 67, 0]]
** centroid: 4, normalized-entropy: 0.9962572968375276, [(1, 58), (2, 67)]
*** center 5: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [87, 5, 0]]
** centroid: 6, normalized-entropy: 0.30458668852140236, [(1, 87), (2, 5)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 46, 14]]
** centroid: 7, normalized-entropy: 0.7837769474847011, [(2, 46), (3, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19459723243676125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19459723243676125, 0.1650032140184194] ***
*** finished computation of 7 references, err: [Inf, 0.19459723243676125, 0.1650032140184194] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 11, 0]]
** centroid: 1, normalized-entropy: 0.6115516951951333, [(1, 62), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [84, 27, 0]]
** centroid: 2, normalized-entropy: 0.8003922080453356, [(1, 84), (2, 27)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [6, 69, 0]]
** centroid: 4, normalized-entropy: 0.4021791902022729, [(1, 6), (2, 69)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [40, 6, 0]]
** centroid: 5, normalized-entropy: 0.5586293734521991, [(1, 40), (2, 6)]
*** center 6: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 20, 17]]
** centroid: 7, normalized-entropy: 0.9952525494396791, [(2, 20), (3, 17)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21489022127911447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21489022127911447, 0.16430829871445896] ***
*** finished computation of 7 references, err: [Inf, 0.21489022127911447, 0.16430829871445896] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 77, 21]]
** centroid: 1, normalized-entropy: 0.7495952572594798, [(2, 77), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [31, 3, 0]]
** centroid: 3, normalized-entropy: 0.43055186701043935, [(1, 31), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [10, 78, 0]]
** centroid: 4, normalized-entropy: 0.5107878229540133, [(1, 10), (2, 78)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [98, 3, 0]]
** centroid: 5, normalized-entropy: 0.192900074578984, [(1, 98), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [47, 18, 0]]
** centroid: 6, normalized-entropy: 0.8512243352621381, [(1, 47), (2, 18)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [23, 15, 0]]
** centroid: 7, normalized-entropy: 0.9677884628267678, [(1, 23), (2, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19975814175698905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19975814175698905, 0.16412846496049316] ***
*** finished computation of 7 references, err: [Inf, 0.19975814175698905, 0.16412846496049316] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [88, 9, 0]]
** centroid: 2, normalized-entropy: 0.44569317772256106, [(1, 88), (2, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 25, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [17, 75, 1]]
** centroid: 5, normalized-entropy: 0.6904285855304167, [(1, 17), (2, 75)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [56, 12, 0]]
** centroid: 6, normalized-entropy: 0.6722948170756378, [(1, 56), (2, 12)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 69, 13]]
** centroid: 7, normalized-entropy: 0.6307970795750609, [(2, 69), (3, 13)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21817728381324558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21817728381324558, 0.1594671122855507] ***
*** finished computation of 7 references, err: [Inf, 0.21817728381324558, 0.1594671122855507] ***
*** center 1: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [38, 5, 0]]
** centroid: 3, normalized-entropy: 0.5185697317883058, [(1, 38), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [77, 11, 0]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(1, 77), (2, 11)]
*** center 5: selecting labels [1, 2, 3] (freq >= 2) [from [11, 83, 3]]
** centroid: 5, normalized-entropy: 0.44395754299450224, [(1, 11), (2, 83), (3, 3)]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [1, 89, 15]]
** centroid: 7, normalized-entropy: 0.5952124653513116, [(2, 89), (3, 15)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19984462343528867] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19984462343528867, 0.1649531035926193] ***
*** finished computation of 7 references, err: [Inf, 0.19984462343528867, 0.1649531035926193] ***
*** center 1: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [19, 34, 0]]
** centroid: 2, normalized-entropy: 0.9414231081869789, [(1, 19), (2, 34)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [86, 2, 0]]
** centroid: 3, normalized-entropy: 0.1564910629057016, [(1, 86), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 4, 0]]
** centroid: 4, normalized-entropy: 0.32984607020714635, [(1, 62), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 74, 0]]
** centroid: 5, normalized-entropy: 0.9933005848443246, [(1, 61), (2, 74)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 34, 16]]
** centroid: 6, normalized-entropy: 0.9043814577244941, [(2, 34), (3, 16)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 43, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 378,3 => 33,1 => 589), Dict(2 => 328,3 => 41,1 => 631))
[ Info: ===== scores for single classifier: {"micro_f1":0.936,"precision":0.936,"recall":0.936,"macro_recall":0.9427673199077473,"macro_f1":0.8820434046240498,"accuracy":0.936,"class_f1":{"2":0.8974358974358975,"3":0.780952380952381,"1":0.967741935483871},"class_precision":{"2":0.9459459459459459,"3":0.640625,"1":0.9609375},"class_recall":{"2":0.8536585365853658,"3":1.0,"1":0.9746434231378764}}
[ Info: ===== scores for 1: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9541072371896461,"macro_f1":0.9568675571541867,"accuracy":0.979,"class_f1":{"2":0.968133535660091,"3":0.9135802469135802,"1":0.9888888888888889},"class_precision":{"2":0.9637462235649547,"3":0.925,"1":0.9904610492845787},"class_recall":{"2":0.9725609756097561,"3":0.9024390243902439,"1":0.9873217115689382}}
[ Info: ===== scores for 5: {"micro_f1":0.982,"precision":0.982,"recall":0.982,"macro_recall":0.9809374718152887,"macro_f1":0.974945995661953,"accuracy":0.982,"class_f1":{"2":0.9729729729729729,"3":0.963855421686747,"1":0.9880095923261392},"class_precision":{"2":0.9585798816568047,"3":0.9523809523809523,"1":0.9967741935483871},"class_recall":{"2":0.9878048780487805,"3":0.975609756097561,"1":0.9793977812995246}}
[ Info: ===== scores for 7: {"micro_f1":0.976,"precision":0.976,"recall":0.976,"macro_recall":0.9848817208457347,"macro_f1":0.970672505650345,"accuracy":0.976,"class_f1":{"2":0.9641791044776119,"3":0.9647058823529412,"1":0.983132530120482},"class_precision":{"2":0.9444444444444444,"3":0.9318181818181818,"1":0.996742671009772},"class_recall":{"2":0.9847560975609756,"3":1.0,"1":0.9698890649762282}}
[ Info: ===== scores for 9: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9837849329364926,"macro_f1":0.9684503478810879,"accuracy":0.973,"class_f1":{"2":0.96,"3":0.9647058823529412,"1":0.9806451612903226},"class_precision":{"2":0.9337175792507204,"3":0.9318181818181818,"1":0.9983579638752053},"class_recall":{"2":0.9878048780487805,"3":1.0,"1":0.9635499207606973}}
[ Info: ===== scores for 11: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.9822806746292502,"macro_f1":0.9641660113095907,"accuracy":0.972,"class_f1":{"2":0.9583333333333333,"3":0.9534883720930233,"1":0.9806763285024155},"class_precision":{"2":0.936046511627907,"3":0.9111111111111111,"1":0.9967266775777414},"class_recall":{"2":0.9817073170731707,"3":1.0,"1":0.96513470681458}}
(score = 0.98, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.975, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.982,"k":5,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.982,"precision":0.982,"recall":0.982,"macro_recall":0.9809374718152887,"macro_f1":0.974945995661953,"accuracy":0.982,"class_f1":{"2":0.9729729729729729,"3":0.963855421686747,"1":0.9880095923261392},"class_precision":{"2":0.9585798816568047,"3":0.9523809523809523,"1":0.9967741935483871},"class_recall":{"2":0.9878048780487805,"3":0.975609756097561,"1":0.9793977812995246}}
Test Summary: | Pass  Total
AKNC          |    8      8
[718, 1, 3, 1, 3, 2, 2, 4, 3, 1, 1, 1, 1, 13, 7, 17, 8, 4, 4, 1, 11, 12, 2, 1, 2, 6, 3, 8, 14, 4, 5, 4, 16, 1, 7, 2, 9, 1, 3, 4, 12, 19, 10, 7, 5, 6, 1, 8, 18, 2, 4, 7, 35, 49, 3, 11, 3, 42, 9, 3, 45, 16, 55, 8, 5, 2, 2, 4, 2, 5, 49, 39, 19, 12, 24, 14, 10, 10, 119, 21, 21, 47, 6, 19, 11, 4, 5, 5, 5, 11, 9, 9, 107, 14, 53, 4, 22, 6, 15, 36, 11, 3, 132, 13, 33, 268, 74, 12, 7, 302, 37, 14, 15, 5, 2, 37, 2, 33, 28, 8, 6, 6, 50, 19, 24, 19, 11, 8, 1, 49, 4, 14, 11, 33, 1, 45, 8, 7, 19, 7, 6, 5, 11, 4, 138, 22, 9, 75, 4, 13, 14, 9, 11, 57, 50, 137, 28, 5, 10, 7, 32, 25, 64, 71, 11, 18, 31, 10, 5, 10, 2, 17, 90, 28, 80, 134, 16, 23, 106, 33, 56, 23, 8, 25, 57, 15, 27, 94, 19, 10, 19, 13, 7, 10, 19, 3, 4, 161, 22, 33, 91, 2, 231, 5, 58, 50, 63, 122, 127, 16, 52, 42, 7, 24, 15, 62, 60, 17, 6, 36, 13, 9, 7, 14, 5, 53, 6, 14, 11, 95, 53, 38, 20, 337, 34, 44, 69, 23, 24, 13, 33, 7, 14, 2, 29, 20, 92, 7, 12, 22, 80, 18, 42, 20, 3, 46, 18, 74, 23, 18, 6, 70, 75, 2, 8, 111, 4, 46, 21, 14, 45, 5, 19, 4, 527, 13, 24, 5, 27, 263, 51, 39, 5, 6, 28, 15, 49, 6, 59, 27, 18, 6, 44, 56, 148, 5, 9, 21, 85, 28]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.648, speedup = 0.2936878638346017, eval_ratio = 0.069266)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3849826388888889,"recall":0.37934027777777773,"f1":null,"seconds":0.00015446916222572327,"exhaustive_search_seconds":0.0003302115947008133,"evaluations":463.46875,"distances_sum":1684.6854849811323}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5338541666666665,"recall":0.5338541666666665,"f1":0.5338541666666665,"seconds":0.0002565886825323105,"exhaustive_search_seconds":0.0003302115947008133,"evaluations":601.5078125,"distances_sum":1602.0096793396438}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6493055555555551,"recall":0.6493055555555551,"f1":0.6493055555555551,"seconds":0.00047289207577705383,"exhaustive_search_seconds":0.0003302115947008133,"evaluations":728.859375,"distances_sum":1550.8840176166962}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7213541666666664,"recall":0.7213541666666664,"f1":0.7213541666666664,"seconds":0.0003383271396160126,"exhaustive_search_seconds":0.0003302115947008133,"evaluations":832.3203125,"distances_sum":1524.405428623077}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7873263888888883,"recall":0.7873263888888883,"f1":0.7873263888888883,"seconds":0.0004584509879350662,"exhaustive_search_seconds":0.0003302115947008133,"evaluations":939.5078125,"distances_sum":1505.5436585032517}
KCenters.DeloneInvIndex> reached performance {"precision":0.8272569444444438,"recall":0.8272569444444438,"f1":0.8272569444444438,"seconds":0.0005050897598266602,"exhaustive_search_seconds":0.0003302115947008133,"evaluations":1034.765625,"distances_sum":1494.188863645059}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8300000000000003, speedup = 0.6893765729230686, eval_ratio = 0.09858)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
