Julia Version 1.5.0-DEV.642
Commit 2848bfb527 (2020-04-18 12:32 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Missings ──────────────────── v0.4.3
  Installed KCenters ──────────────────── v0.2.2
  Installed JSON ──────────────────────── v0.21.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed DataStructures ────────────── v0.17.12
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed StatsBase ─────────────────── v0.32.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Tables ────────────────────── v1.0.4
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.1.0
  Installed Parsers ───────────────────── v1.0.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataFrames ────────────────── v0.20.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed MLDataPattern ─────────────── v0.5.1
  Installed Reexport ──────────────────── v0.2.0
  Installed Compat ────────────────────── v3.8.0
  Installed OrderedCollections ────────── v1.1.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed DataValueInterfaces ───────── v1.0.0
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.12
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_J490OE/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_J490OE/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.12
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9370718047022819
[ Info: 0.8321307849884033
[ Info: 0.555438105414311
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3328977065036694
mean(cdnet.distances) = 0.4331572692841291
mean(crand.distances) = 0.3498186214019855
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8537837162837172,"seconds":6.560236215591431e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.3984375,"distances_sum":2217.4752143234764}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8534116924741935,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.53125,"distances_sum":2205.44919457702}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.755859375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.755859375,"f1":0.8537837162837172,"seconds":6.560236215591431e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.3984375,"distances_sum":2217.4752143234764}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9073832417582426,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.578125,"distances_sum":2523.352385113449}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.8994796869796879,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.5390625,"distances_sum":2531.176915751625}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9689560439560444,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.875,"distances_sum":3090.312609688865}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9546932234432239,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.7890625,"distances_sum":2984.4695805284423}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9689560439560444,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.875,"distances_sum":3090.312609688865}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9689560439560444,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.875,"distances_sum":3090.312609688865}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9689560439560444,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.875,"distances_sum":3090.312609688865}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.197265625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.197265625,"f1":null,"seconds":4.1853636503219604e-6,"exhaustive_search_seconds":1.8589198589324951e-6,"evaluations":5.8359375,"distances_sum":529.2710355850404}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7958380161505169,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.8589198589324951e-6,"evaluations":7.6953125,"distances_sum":1874.0287813275481}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5576171875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5576171875,"f1":null,"seconds":5.513429641723633e-6,"exhaustive_search_seconds":1.8589198589324951e-6,"evaluations":7.0859375,"distances_sum":1452.6958230949924}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6728515625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6728515625,"f1":0.7958380161505169,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.8589198589324951e-6,"evaluations":7.6953125,"distances_sum":1874.0287813275481}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9530391483516486,"seconds":7.4375420808792114e-6,"exhaustive_search_seconds":1.8589198589324951e-6,"evaluations":8.7890625,"distances_sum":2872.760867194942}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8986242923742933,"seconds":6.5229833126068115e-6,"exhaustive_search_seconds":1.8589198589324951e-6,"evaluations":8.3828125,"distances_sum":2473.4730878459177}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.8469442016317025,"seconds":6.452202796936035e-6,"exhaustive_search_seconds":1.8589198589324951e-6,"evaluations":8.234375,"distances_sum":2136.305613740884}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9530391483516486,"seconds":7.4375420808792114e-6,"exhaustive_search_seconds":1.8589198589324951e-6,"evaluations":8.7890625,"distances_sum":2872.760867194942}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9758012820512825,"seconds":6.895512342453003e-6,"exhaustive_search_seconds":1.8589198589324951e-6,"evaluations":8.9140625,"distances_sum":3092.5620217288756}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9678056318681323,"seconds":6.882473826408386e-6,"exhaustive_search_seconds":1.8589198589324951e-6,"evaluations":8.8984375,"distances_sum":3016.7877062017737}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9758012820512825,"seconds":6.895512342453003e-6,"exhaustive_search_seconds":1.8589198589324951e-6,"evaluations":8.9140625,"distances_sum":3092.5620217288756}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9758012820512825,"seconds":6.895512342453003e-6,"exhaustive_search_seconds":1.8589198589324951e-6,"evaluations":8.9140625,"distances_sum":3092.5620217288756}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8667415917415925,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.234375,"distances_sum":2174.8938884629697}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.423828125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.423828125,"f1":null,"seconds":4.37907874584198e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":6.6328125,"distances_sum":1034.356391498454}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5498046875, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5498046875,"f1":null,"seconds":4.5299530029296875e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":6.8515625,"distances_sum":1391.7745303133274}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.779296875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.779296875,"f1":0.8667415917415925,"seconds":5.338340997695923e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.234375,"distances_sum":2174.8938884629697}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8753210331335339,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.2890625,"distances_sum":2191.6348266192945}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9374115467865475,"seconds":5.76116144657135e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.546875,"distances_sum":2628.743187633349}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.926757617382618,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.4609375,"distances_sum":2589.8079702300947}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.9115244130869137,"seconds":5.587935447692871e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.4609375,"distances_sum":2414.228845172646}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9374115467865475,"seconds":5.76116144657135e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.546875,"distances_sum":2628.743187633349}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9764709249084254,"seconds":6.293877959251404e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.921875,"distances_sum":2953.4454690523753}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9657222985347986,"seconds":6.642192602157593e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.84375,"distances_sum":2871.085096822465}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9566620879120883,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.7421875,"distances_sum":2801.6813331060534}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9399668040293048,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.6015625,"distances_sum":2635.2302738898775}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.95917467948718,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.765625,"distances_sum":2826.893500116773}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9431089743589749,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.6875,"distances_sum":2712.558884433291}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9764709249084254,"seconds":6.293877959251404e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.921875,"distances_sum":2953.4454690523753}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9764709249084254,"seconds":6.293877959251404e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.921875,"distances_sum":2953.4454690523753}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1689453125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1689453125,"f1":null,"seconds":3.475695848464966e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":5.3828125,"distances_sum":426.2606600832995}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.66015625,"f1":null,"seconds":4.692003130912781e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.7734375,"distances_sum":1776.6183997408232}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.416015625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.416015625,"f1":null,"seconds":4.120171070098877e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":6.203125,"distances_sum":1009.0645282691644}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.66015625,"state":{"ssize":1,"bsize":4},"perf":{"precision":null,"recall":0.66015625,"f1":null,"seconds":4.692003130912781e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.7734375,"distances_sum":1776.6183997408232}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8470394189144196,"seconds":5.511566996574402e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.09375,"distances_sum":2123.4354396344}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.913982892107893,"seconds":5.600973963737488e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.4765625,"distances_sum":2509.5289755920962}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9121768856143865,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.40625,"distances_sum":2466.5326882981435}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8960799617049624,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.2578125,"distances_sum":2404.5113283931737}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8674164377289386,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.1875,"distances_sum":2218.4774910762517}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7021484375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.7021484375,"f1":0.8159860972360982,"seconds":5.085021257400513e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.1015625,"distances_sum":1941.8959581695265}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8580018939393947,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.15625,"distances_sum":2157.207295681947}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8515625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8515625,"f1":0.913982892107893,"seconds":5.600973963737488e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.4765625,"distances_sum":2509.5289755920962}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9677827380952386,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.90625,"distances_sum":2956.360155153607}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9459306318681324,"seconds":6.023794412612915e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.6953125,"distances_sum":2820.810208546269}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9575950091575097,"seconds":6.157904863357544e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.7890625,"distances_sum":2912.5186505360343}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9211283508158514,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.46875,"distances_sum":2585.907196974702}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9586309523809527,"seconds":5.939975380897522e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8125,"distances_sum":2904.2137111422007}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9677827380952386,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.90625,"distances_sum":2956.360155153607}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9677827380952386,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.90625,"distances_sum":2956.360155153607}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.287109375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.287109375,"f1":null,"seconds":3.6545097827911377e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.1875,"distances_sum":435.77718722133415}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.287109375,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.287109375,"f1":null,"seconds":3.6545097827911377e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.1875,"distances_sum":435.77718722133415}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5361328125, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.5361328125,"f1":null,"seconds":4.567205905914307e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.8828125,"distances_sum":734.5634619311728}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7898745351870359,"seconds":4.76837158203125e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.6796875,"distances_sum":917.1960960863781}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6630859375,"state":{"ssize":7,"bsize":4},"perf":{"precision":1.0,"recall":0.6630859375,"f1":0.7898745351870359,"seconds":4.76837158203125e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.6796875,"distances_sum":917.1960960863781}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8076171875, conf: {"ssize":11,"bsize":6}, perf: {"precision":1.0,"recall":0.8076171875,"f1":0.8879635989010998,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.6328125,"distances_sum":1189.2676435339358}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8539585414585421,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.203125,"distances_sum":1101.8893589771014}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8975675366300376,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.6328125,"distances_sum":1218.6734706274535}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8667575480075489,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.234375,"distances_sum":1124.995911027859}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.851880411255412,"seconds":5.366280674934387e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.078125,"distances_sum":1068.5278594785102}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.82421875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.82421875,"f1":0.8975675366300376,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.6328125,"distances_sum":1218.6734706274535}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.82421875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.82421875,"f1":0.8975675366300376,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.6328125,"distances_sum":1218.6734706274535}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8475826257076263,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.109375,"distances_sum":1229.8054337301126}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2080078125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2080078125,"f1":null,"seconds":3.606081008911133e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":5.015625,"distances_sum":401.5441307059505}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7490234375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7490234375,"f1":0.8475826257076263,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.109375,"distances_sum":1229.8054337301126}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9492101648351655,"seconds":6.126239895820618e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.78125,"distances_sum":1657.7106350026224}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9292525183150191,"seconds":6.118789315223694e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7734375,"distances_sum":1534.7866109058898}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9492101648351655,"seconds":6.126239895820618e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.78125,"distances_sum":1657.7106350026224}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9587886072261077,"seconds":6.055459380149841e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8125,"distances_sum":1711.3815652133808}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9724358974358979,"seconds":6.197020411491394e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8984375,"distances_sum":1750.1017885984802}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.961149267399268,"seconds":6.318092346191406e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7890625,"distances_sum":1691.2246328714455}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9628033424908429,"seconds":6.493180990219116e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8828125,"distances_sum":1694.4481199412016}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9605139652014656,"seconds":6.191432476043701e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8125,"distances_sum":1685.1337480414743}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9724358974358979,"seconds":6.197020411491394e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8984375,"distances_sum":1750.1017885984802}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9724358974358979,"seconds":6.197020411491394e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8984375,"distances_sum":1750.1017885984802}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7021484375, conf: {"ssize":2,"bsize":4}, perf: {"precision":null,"recall":0.7021484375,"f1":null,"seconds":4.956498742103577e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.8046875,"distances_sum":1182.1190955937575}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5322265625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5322265625,"f1":0.6787053224553228,"seconds":5.2265822887420654e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":6.6875,"distances_sum":876.4575469408904}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7021484375,"state":{"ssize":2,"bsize":4},"perf":{"precision":null,"recall":0.7021484375,"f1":null,"seconds":4.956498742103577e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.8046875,"distances_sum":1182.1190955937575}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8507445679320687,"seconds":5.342066287994385e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.015625,"distances_sum":1329.5005801409468}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9435585248085256,"seconds":6.031244993209839e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.71875,"distances_sum":1715.8545771984975}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9293440934065941,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.703125,"distances_sum":1599.6440493236958}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9435585248085256,"seconds":6.031244993209839e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.71875,"distances_sum":1715.8545771984975}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":10,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9756524725274729,"seconds":6.372109055519104e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.921875,"distances_sum":1835.2935241183977}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9684555028305032,"seconds":6.528571248054504e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8671875,"distances_sum":1827.6530501362506}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":12,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9650526556776561,"seconds":6.12996518611908e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8984375,"distances_sum":1789.0773250350696}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9660943223443227,"seconds":6.748363375663757e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8828125,"distances_sum":1783.3072049613638}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9498225732600736,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8203125,"distances_sum":1723.6617030926702}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":10,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9756524725274729,"seconds":6.372109055519104e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.921875,"distances_sum":1835.2935241183977}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":10,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9756524725274729,"seconds":6.372109055519104e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.921875,"distances_sum":1835.2935241183977}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.244140625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.244140625,"f1":null,"seconds":3.330409526824951e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":5.8125,"distances_sum":389.5182412000426}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2109375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2109375,"f1":null,"seconds":3.3676624298095703e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":5.5390625,"distances_sum":356.1202281333512}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.642578125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.642578125,"f1":0.7691718004218013,"seconds":4.777684807777405e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.71875,"distances_sum":1167.7094329498966}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.642578125,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.642578125,"f1":0.7691718004218013,"seconds":4.777684807777405e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.71875,"distances_sum":1167.7094329498966}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.8054299866799876,"seconds":4.796311259269714e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.921875,"distances_sum":1251.9013891624018}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8675740925740933,"seconds":5.33275306224823e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.484375,"distances_sum":1475.557080920863}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7792991730491737,"seconds":4.6603381633758545e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.8046875,"distances_sum":1192.8664792745433}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8527139527139537,"seconds":5.168840289115906e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.34375,"distances_sum":1417.6008492539813}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7763671875,"state":{"ssize":7,"bsize":5},"perf":{"precision":1.0,"recall":0.7763671875,"f1":0.8675740925740933,"seconds":5.33275306224823e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.484375,"distances_sum":1475.557080920863}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8953504828504837,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.6484375,"distances_sum":1552.1413993034957}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.964938186813187,"seconds":5.580484867095947e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8671875,"distances_sum":1901.452897071676}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.901620775058276,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.609375,"distances_sum":1589.0184636830095}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":12,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9624828296703299,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.890625,"distances_sum":1895.3107188760225}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9416151556776562,"seconds":5.725771188735962e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9140625,"distances_sum":1772.40072886794}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.896986867299368,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.6796875,"distances_sum":1558.1462451677753}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9101539085914095,"seconds":5.358830094337463e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.6875,"distances_sum":1612.918862455662}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":10,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.964938186813187,"seconds":5.580484867095947e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8671875,"distances_sum":1901.452897071676}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":10,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.964938186813187,"seconds":5.580484867095947e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8671875,"distances_sum":1901.452897071676}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4443359375, conf: {"ssize":3,"bsize":2}, perf: {"precision":1.0,"recall":0.4443359375,"f1":0.5973790098790103,"seconds":3.719702363014221e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.4296875,"distances_sum":769.5342146618927}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4443359375,"state":{"ssize":3,"bsize":2},"perf":{"precision":1.0,"recall":0.4443359375,"f1":0.5973790098790103,"seconds":3.719702363014221e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.4296875,"distances_sum":769.5342146618927}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7889537545787553,"seconds":4.649162292480469e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.140625,"distances_sum":1184.442961095674}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7886882215007224,"seconds":4.7050416469573975e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.1328125,"distances_sum":1216.5611783327695}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6708984375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6708984375,"f1":0.7886882215007224,"seconds":4.7050416469573975e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.1328125,"distances_sum":1216.5611783327695}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9235233516483523,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.75,"distances_sum":1725.79993213234}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.862752872127873,"seconds":5.0496309995651245e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.4765625,"distances_sum":1450.2237519162425}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7929615523365532,"seconds":4.818663001060486e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.2265625,"distances_sum":1200.4795800162249}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.796875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.796875,"f1":0.8818311896436906,"seconds":5.3960829973220825e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6953125,"distances_sum":1513.9484402119592}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8981945138195145,"seconds":5.3122639656066895e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6875,"distances_sum":1576.1277385769208}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.869140625,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.869140625,"f1":0.9235233516483523,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.75,"distances_sum":1725.79993213234}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.869140625,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.869140625,"f1":0.9235233516483523,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.75,"distances_sum":1725.79993213234}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8619014665889675,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.3046875,"distances_sum":1513.7438503638675}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6640625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6640625,"f1":0.7880687021312031,"seconds":4.628673195838928e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.03125,"distances_sum":1133.4391403213087}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3974609375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3974609375,"f1":null,"seconds":3.3527612686157227e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":6.234375,"distances_sum":688.8592409282357}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7763671875,"f1":0.8619014665889675,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.3046875,"distances_sum":1513.7438503638675}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.927838827838828,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.6796875,"distances_sum":1760.7385527760352}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.8746909340659351,"seconds":5.09992241859436e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.5,"distances_sum":1538.929506100136}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.876953125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.876953125,"f1":0.927838827838828,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.6796875,"distances_sum":1760.7385527760352}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9700721153846155,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.859375,"distances_sum":1956.9442284158451}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9506581959706965,"seconds":5.304813385009766e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.7890625,"distances_sum":1870.7118484516327}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9630437271062275,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8671875,"distances_sum":1918.0827033896044}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9479967948717954,"seconds":5.230307579040527e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.7890625,"distances_sum":1843.9980741941376}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9427941849816853,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.8203125,"distances_sum":1834.4779457729624}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9328213453213456,"seconds":5.161389708518982e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.703125,"distances_sum":1757.5760900482521}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9700721153846155,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.859375,"distances_sum":1956.9442284158451}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9700721153846155,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.859375,"distances_sum":1956.9442284158451}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7353515625,"f1":0.8344343156843165,"seconds":4.680827260017395e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.15625,"distances_sum":1713.5390057188101}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7353515625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7353515625,"f1":0.8344343156843165,"seconds":4.680827260017395e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.15625,"distances_sum":1713.5390057188101}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9530792124542131,"seconds":5.248934030532837e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.7890625,"distances_sum":2407.958769288295}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8463227744477752,"seconds":4.801899194717407e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.1484375,"distances_sum":1774.1444117107187}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9530792124542131,"seconds":5.248934030532837e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.7890625,"distances_sum":2407.958769288295}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":9,"bsize":13}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9749255952380955,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9296875,"distances_sum":2564.3919351789477}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9643257783882789,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8359375,"distances_sum":2523.981752814515}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":9,"bsize":13},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9749255952380955,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9296875,"distances_sum":2564.3919351789477}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":9,"bsize":13},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9749255952380955,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9296875,"distances_sum":2564.3919351789477}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2109375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2109375,"f1":null,"seconds":3.3210963010787964e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":5.484375,"distances_sum":517.628847929224}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2275390625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2275390625,"f1":null,"seconds":3.337860107421875e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":5.78125,"distances_sum":595.9310390859351}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.541015625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.541015625,"f1":null,"seconds":4.077330231666565e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.1953125,"distances_sum":1200.0144072124206}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.734375,"f1":0.839001103063604,"seconds":5.140900611877441e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.078125,"distances_sum":1794.7641146022954}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.734375,"f1":0.839001103063604,"seconds":5.140900611877441e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.078125,"distances_sum":1794.7641146022954}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9540579212454217,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.796875,"distances_sum":2545.209460771509}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8547077922077931,"seconds":5.083158612251282e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.1015625,"distances_sum":1848.5455388992846}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8992164085914095,"seconds":5.206093192100525e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.1953125,"distances_sum":2129.4523144726486}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9432520604395612,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.625,"distances_sum":2530.852924584143}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9212168040293046,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.53125,"distances_sum":2280.585322828041}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9540579212454217,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.796875,"distances_sum":2545.209460771509}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9676568223443228,"seconds":5.9138983488082886e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.875,"distances_sum":2653.3369330365913}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9676568223443228,"seconds":5.9138983488082886e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.875,"distances_sum":2653.3369330365913}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9676568223443228,"seconds":5.9138983488082886e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.875,"distances_sum":2653.3369330365913}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.23046875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.23046875,"f1":null,"seconds":3.246590495109558e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":6.6171875,"distances_sum":494.554789742203}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.255859375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.255859375,"f1":null,"seconds":3.3155083656311035e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":6.7890625,"distances_sum":597.9300033527938}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.255859375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.255859375,"f1":null,"seconds":3.3155083656311035e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":6.7890625,"distances_sum":597.9300033527938}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.369140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.369140625,"f1":null,"seconds":3.591179847717285e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":6.578125,"distances_sum":790.2192691031199}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5634765625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5634765625,"f1":0.7074075230325236,"seconds":4.390254616737366e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.8671875,"distances_sum":1287.7168701050007}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.638671875, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.638671875,"f1":0.7694440975690985,"seconds":4.675239324569702e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.0078125,"distances_sum":1489.423499494813}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8487559315684324,"seconds":5.282461643218994e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.4453125,"distances_sum":1820.5906375313757}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.856225024975026,"seconds":5.15766441822052e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.5859375,"distances_sum":1844.2510166860102}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.759765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.759765625,"f1":0.856225024975026,"seconds":5.15766441822052e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.5859375,"distances_sum":1844.2510166860102}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9507898351648356,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8515625,"distances_sum":2501.465205685733}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9125291375291383,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.7578125,"distances_sum":2217.203563317592}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9578182234432241,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.90625,"distances_sum":2552.948887894148}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9338255494505501,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.734375,"distances_sum":2329.1709024937036}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9515625000000005,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.828125,"distances_sum":2510.4027883906397}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9496909340659345,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8359375,"distances_sum":2474.697152930537}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8576845029970039,"seconds":5.256384611129761e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.5859375,"distances_sum":1855.6099904355642}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9402586996337002,"seconds":5.500391125679016e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8125,"distances_sum":2360.8023500418985}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9578182234432241,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.90625,"distances_sum":2552.948887894148}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9578182234432241,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.90625,"distances_sum":2552.948887894148}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7848578504828512,"seconds":4.591420292854309e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.984375,"distances_sum":1529.9269942381973}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7887976606726614,"seconds":4.470348358154297e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.0390625,"distances_sum":1534.2266552813621}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6630859375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6630859375,"f1":0.7887976606726614,"seconds":4.470348358154297e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.0390625,"distances_sum":1534.2266552813621}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9312442765567772,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.78125,"distances_sum":2319.9609217068296}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8952755577755585,"seconds":5.2694231271743774e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.5234375,"distances_sum":2075.2505672403277}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9408997252747258,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.796875,"distances_sum":2411.8276947343115}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7294921875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7294921875,"f1":0.8341542138417145,"seconds":5.204230546951294e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.3359375,"distances_sum":1698.260220168292}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.896484375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9408997252747258,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.796875,"distances_sum":2411.8276947343115}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9665579212454218,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8984375,"distances_sum":2585.1143385791556}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9517914377289384,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.7890625,"distances_sum":2496.7145286929717}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9665579212454218,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8984375,"distances_sum":2585.1143385791556}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9665579212454218,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8984375,"distances_sum":2585.1143385791556}}, n: 9
mean(cfft.distances) = 0.35946802005238687
mean(cdnet.distances) = 0.33965306101425335
mean(crand.distances) = 0.3407517619119988
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.88
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8466666666666667
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8755555555555556
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8866666666666667
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9222222222222222
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9377777777777778
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8644444444444445
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8977777777777778
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.931111111111111
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9466666666666667
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9088888888888889
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9266666666666666
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9155555555555556
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8755555555555556
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9177777777777778
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8644444444444445
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9400000000000001
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444443
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8733333333333334
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8688888888888889
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9133333333333332
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9066666666666667
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.9333333333333333
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 2]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.5495617046952248] ***
*** center 1: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 8, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.21375408469959423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21375408469959423, 0.15713367535377498] ***
*** finished computation of 7 references, err: [Inf, 0.21375408469959423, 0.15713367535377498] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 69, 3]]
** centroid: 1, normalized-entropy: 0.24988229283318547, [(2, 69), (3, 3)]
*** center 2: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [110, 26, 0]]
** centroid: 3, normalized-entropy: 0.7039260680195971, [(1, 110), (2, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 68, 0]]
** centroid: 5, normalized-entropy: 0.9987117514654895, [(1, 74), (2, 68)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 74, 0]]
** centroid: 6, normalized-entropy: 0.4951734787020683, [(1, 9), (2, 74)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 13, 21]]
** centroid: 7, normalized-entropy: 0.9596868937742168, [(2, 13), (3, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18959108259467347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18959108259467347, 0.15424700552043882] ***
*** finished computation of 7 references, err: [Inf, 0.18959108259467347, 0.15424700552043882] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [69, 73, 0]]
** centroid: 1, normalized-entropy: 0.9994275398149994, [(1, 69), (2, 73)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [68, 10, 0]]
** centroid: 2, normalized-entropy: 0.552495114325111, [(1, 68), (2, 10)]
*** center 3: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 64, 24]]
** centroid: 4, normalized-entropy: 0.8453509366224364, [(2, 64), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [100, 13, 0]]
** centroid: 5, normalized-entropy: 0.5149459065452171, [(1, 100), (2, 13)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 90, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18719156949489058] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18719156949489058, 0.1645825223067309] ***
*** finished computation of 7 references, err: [Inf, 0.18719156949489058, 0.1645825223067309] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [108, 20, 0]]
** centroid: 1, normalized-entropy: 0.625262405223423, [(1, 108), (2, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [19, 107, 0]]
** centroid: 3, normalized-entropy: 0.6118228576241159, [(1, 19), (2, 107)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 45, 27]]
** centroid: 4, normalized-entropy: 0.954434002924965, [(2, 45), (3, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 51, 0]]
** centroid: 5, normalized-entropy: 0.8435070855739035, [(1, 19), (2, 51)]
*** center 6: selecting labels [1] (freq >= 2) [from [141, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 25, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3000840005510929] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3000840005510929, 0.18883435842979035] ***
*** finished computation of 7 references, err: [Inf, 0.3000840005510929, 0.18883435842979035] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [32, 79, 0]]
** centroid: 1, normalized-entropy: 0.8664998383682039, [(1, 32), (2, 79)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 110, 25]]
** centroid: 2, normalized-entropy: 0.6912898694057888, [(2, 110), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [188, 10, 0]]
** centroid: 3, normalized-entropy: 0.2885385136944103, [(1, 188), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [86, 18, 0]]
** centroid: 4, normalized-entropy: 0.6646953053493416, [(1, 86), (2, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [29, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [44, 16, 0]]
** centroid: 6, normalized-entropy: 0.8366407419411671, [(1, 44), (2, 16)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [19, 11, 0]]
** centroid: 7, normalized-entropy: 0.9480782435939054, [(1, 19), (2, 11)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.35937152061521915] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35937152061521915, 0.2519163819443848] ***
*** starting iteration: 2; err: [Inf, 0.35937152061521915, 0.2519163819443848] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35937152061521915, 0.2519163819443848, 0.2456824735013975] ***
*** starting iteration: 3; err: [Inf, 0.35937152061521915, 0.2519163819443848, 0.2456824735013975] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35937152061521915, 0.2519163819443848, 0.2456824735013975, 0.2438076802084709] ***
*** starting iteration: 4; err: [Inf, 0.35937152061521915, 0.2519163819443848, 0.2456824735013975, 0.2438076802084709] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35937152061521915, 0.2519163819443848, 0.2456824735013975, 0.2438076802084709, 0.24244610488683255] ***
*** starting iteration: 5; err: [Inf, 0.35937152061521915, 0.2519163819443848, 0.2456824735013975, 0.2438076802084709, 0.24244610488683255] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35937152061521915, 0.2519163819443848, 0.2456824735013975, 0.2438076802084709, 0.24244610488683255, 0.24127130475882497] ***
*** starting iteration: 6; err: [Inf, 0.35937152061521915, 0.2519163819443848, 0.2456824735013975, 0.2438076802084709, 0.24244610488683255, 0.24127130475882497] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35937152061521915, 0.2519163819443848, 0.2456824735013975, 0.2438076802084709, 0.24244610488683255, 0.24127130475882497, 0.24075817179589257] ***
*** finished computation of 3 references, err: [Inf, 0.35937152061521915, 0.2519163819443848, 0.2456824735013975, 0.2438076802084709, 0.24244610488683255, 0.24127130475882497, 0.24075817179589257] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [256, 9, 0]]
** centroid: 1, normalized-entropy: 0.21388883242044526, [(1, 256), (2, 9)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [3, 173, 24]]
** centroid: 2, normalized-entropy: 0.40312173630662435, [(1, 3), (2, 173), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [133, 68, 0]]
** centroid: 3, normalized-entropy: 0.9231908099516587, [(1, 133), (2, 68)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3264384667949005] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3264384667949005, 0.24651720463067875] ***
*** starting iteration: 2; err: [Inf, 0.3264384667949005, 0.24651720463067875] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3264384667949005, 0.24651720463067875, 0.239422884287321] ***
*** starting iteration: 3; err: [Inf, 0.3264384667949005, 0.24651720463067875, 0.239422884287321] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3264384667949005, 0.24651720463067875, 0.239422884287321, 0.2379283826746538] ***
*** starting iteration: 4; err: [Inf, 0.3264384667949005, 0.24651720463067875, 0.239422884287321, 0.2379283826746538] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3264384667949005, 0.24651720463067875, 0.239422884287321, 0.2379283826746538, 0.23726125091392508] ***
*** finished computation of 3 references, err: [Inf, 0.3264384667949005, 0.24651720463067875, 0.239422884287321, 0.2379283826746538, 0.23726125091392508] ***
*** center 1: selecting labels [1] (freq >= 1) [from [216, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [93, 107, 2]]
** centroid: 2, normalized-entropy: 0.6730333281297759, [(1, 93), (2, 107), (3, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [83, 141, 25]]
** centroid: 3, normalized-entropy: 0.8365243275848006, [(1, 83), (2, 141), (3, 25)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26075110247713335] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26075110247713335, 0.24013548362315976] ***
*** starting iteration: 2; err: [Inf, 0.26075110247713335, 0.24013548362315976] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26075110247713335, 0.24013548362315976, 0.2374478604761825] ***
*** starting iteration: 3; err: [Inf, 0.26075110247713335, 0.24013548362315976, 0.2374478604761825] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26075110247713335, 0.24013548362315976, 0.2374478604761825, 0.2363890325804164] ***
*** starting iteration: 4; err: [Inf, 0.26075110247713335, 0.24013548362315976, 0.2374478604761825, 0.2363890325804164] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26075110247713335, 0.24013548362315976, 0.2374478604761825, 0.2363890325804164, 0.23552099274083235] ***
*** finished computation of 3 references, err: [Inf, 0.26075110247713335, 0.24013548362315976, 0.2374478604761825, 0.2363890325804164, 0.23552099274083235] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [96, 96, 4]]
** centroid: 1, normalized-entropy: 0.7087347531332552, [(1, 96), (2, 96), (3, 4)]
*** center 2: selecting labels [1] (freq >= 1) [from [202, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [100, 148, 21]]
** centroid: 3, normalized-entropy: 0.8152831882772389, [(1, 100), (2, 148), (3, 21)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2914785593943866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2914785593943866, 0.20811124970191144] ***
*** starting iteration: 2; err: [Inf, 0.2914785593943866, 0.20811124970191144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2914785593943866, 0.20811124970191144, 0.1616399734492159] ***
*** starting iteration: 3; err: [Inf, 0.2914785593943866, 0.20811124970191144, 0.1616399734492159] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2914785593943866, 0.20811124970191144, 0.1616399734492159, 0.15391395799885574] ***
*** starting iteration: 4; err: [Inf, 0.2914785593943866, 0.20811124970191144, 0.1616399734492159, 0.15391395799885574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2914785593943866, 0.20811124970191144, 0.1616399734492159, 0.15391395799885574, 0.15057461799259433] ***
*** starting iteration: 5; err: [Inf, 0.2914785593943866, 0.20811124970191144, 0.1616399734492159, 0.15391395799885574, 0.15057461799259433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2914785593943866, 0.20811124970191144, 0.1616399734492159, 0.15391395799885574, 0.15057461799259433, 0.14877317993560465] ***
*** starting iteration: 6; err: [Inf, 0.2914785593943866, 0.20811124970191144, 0.1616399734492159, 0.15391395799885574, 0.15057461799259433, 0.14877317993560465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2914785593943866, 0.20811124970191144, 0.1616399734492159, 0.15391395799885574, 0.15057461799259433, 0.14877317993560465, 0.14790673465565876] ***
*** finished computation of 7 references, err: [Inf, 0.2914785593943866, 0.20811124970191144, 0.1616399734492159, 0.15391395799885574, 0.15057461799259433, 0.14877317993560465, 0.14790673465565876] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [70, 19, 0]]
** centroid: 1, normalized-entropy: 0.748088105780153, [(1, 70), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [80, 37, 0]]
** centroid: 2, normalized-entropy: 0.9002448724102409, [(1, 80), (2, 37)]
*** center 3: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [48, 52, 0]]
** centroid: 4, normalized-entropy: 0.998845535995202, [(1, 48), (2, 52)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 76, 5]]
** centroid: 5, normalized-entropy: 0.33426813256179383, [(2, 76), (3, 5)]
*** center 6: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 66, 19]]
** centroid: 7, normalized-entropy: 0.7665599404543365, [(2, 66), (3, 19)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17849395605505095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17849395605505095, 0.15897638865430996] ***
*** starting iteration: 2; err: [Inf, 0.17849395605505095, 0.15897638865430996] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17849395605505095, 0.15897638865430996, 0.15267246425419911] ***
*** starting iteration: 3; err: [Inf, 0.17849395605505095, 0.15897638865430996, 0.15267246425419911] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17849395605505095, 0.15897638865430996, 0.15267246425419911, 0.14898520288639877] ***
*** starting iteration: 4; err: [Inf, 0.17849395605505095, 0.15897638865430996, 0.15267246425419911, 0.14898520288639877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17849395605505095, 0.15897638865430996, 0.15267246425419911, 0.14898520288639877, 0.14741086476793822] ***
*** starting iteration: 5; err: [Inf, 0.17849395605505095, 0.15897638865430996, 0.15267246425419911, 0.14898520288639877, 0.14741086476793822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17849395605505095, 0.15897638865430996, 0.15267246425419911, 0.14898520288639877, 0.14741086476793822, 0.14610226353493588] ***
*** starting iteration: 6; err: [Inf, 0.17849395605505095, 0.15897638865430996, 0.15267246425419911, 0.14898520288639877, 0.14741086476793822, 0.14610226353493588] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17849395605505095, 0.15897638865430996, 0.15267246425419911, 0.14898520288639877, 0.14741086476793822, 0.14610226353493588, 0.1453324047739672] ***
*** finished computation of 7 references, err: [Inf, 0.17849395605505095, 0.15897638865430996, 0.15267246425419911, 0.14898520288639877, 0.14741086476793822, 0.14610226353493588, 0.1453324047739672] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [96, 16, 0]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(1, 96), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [2, 82, 0]]
** centroid: 2, normalized-entropy: 0.1623261801753929, [(1, 2), (2, 82)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 28, 0]]
** centroid: 3, normalized-entropy: 0.9103480624345157, [(1, 58), (2, 28)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 79, 27]]
** centroid: 5, normalized-entropy: 0.8186691181065503, [(2, 79), (3, 27)]
*** center 6: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [65, 43, 0]]
** centroid: 7, normalized-entropy: 0.9698570179131006, [(1, 65), (2, 43)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20366985351196315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20366985351196315, 0.16322734656518903] ***
*** starting iteration: 2; err: [Inf, 0.20366985351196315, 0.16322734656518903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20366985351196315, 0.16322734656518903, 0.15853426167762363] ***
*** starting iteration: 3; err: [Inf, 0.20366985351196315, 0.16322734656518903, 0.15853426167762363] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20366985351196315, 0.16322734656518903, 0.15853426167762363, 0.15652194360481936] ***
*** starting iteration: 4; err: [Inf, 0.20366985351196315, 0.16322734656518903, 0.15853426167762363, 0.15652194360481936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20366985351196315, 0.16322734656518903, 0.15853426167762363, 0.15652194360481936, 0.1546141361423965] ***
*** starting iteration: 5; err: [Inf, 0.20366985351196315, 0.16322734656518903, 0.15853426167762363, 0.15652194360481936, 0.1546141361423965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20366985351196315, 0.16322734656518903, 0.15853426167762363, 0.15652194360481936, 0.1546141361423965, 0.15336404435861592] ***
*** starting iteration: 6; err: [Inf, 0.20366985351196315, 0.16322734656518903, 0.15853426167762363, 0.15652194360481936, 0.1546141361423965, 0.15336404435861592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20366985351196315, 0.16322734656518903, 0.15853426167762363, 0.15652194360481936, 0.1546141361423965, 0.15336404435861592, 0.15216279096309393] ***
*** starting iteration: 7; err: [Inf, 0.20366985351196315, 0.16322734656518903, 0.15853426167762363, 0.15652194360481936, 0.1546141361423965, 0.15336404435861592, 0.15216279096309393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20366985351196315, 0.16322734656518903, 0.15853426167762363, 0.15652194360481936, 0.1546141361423965, 0.15336404435861592, 0.15216279096309393, 0.15090924090561994] ***
*** starting iteration: 8; err: [Inf, 0.20366985351196315, 0.16322734656518903, 0.15853426167762363, 0.15652194360481936, 0.1546141361423965, 0.15336404435861592, 0.15216279096309393, 0.15090924090561994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20366985351196315, 0.16322734656518903, 0.15853426167762363, 0.15652194360481936, 0.1546141361423965, 0.15336404435861592, 0.15216279096309393, 0.15090924090561994, 0.15019939517297934] ***
*** finished computation of 7 references, err: [Inf, 0.20366985351196315, 0.16322734656518903, 0.15853426167762363, 0.15652194360481936, 0.1546141361423965, 0.15336404435861592, 0.15216279096309393, 0.15090924090561994, 0.15019939517297934] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [89, 25, 0]]
** centroid: 1, normalized-entropy: 0.7588840483719564, [(1, 89), (2, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [137, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [66, 25, 0]]
** centroid: 3, normalized-entropy: 0.8481636883083004, [(1, 66), (2, 25)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [28, 38, 0]]
** centroid: 4, normalized-entropy: 0.9833761901392238, [(1, 28), (2, 38)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 57, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [78, 29, 0]]
** centroid: 6, normalized-entropy: 0.8429359403268015, [(1, 78), (2, 29)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 70, 25]]
** centroid: 7, normalized-entropy: 0.8314743880097292, [(2, 70), (3, 25)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4021874424279877] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4021874424279877, 0.3155432521916546] ***
*** starting iteration: 2; err: [Inf, 0.4021874424279877, 0.3155432521916546] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4021874424279877, 0.3155432521916546, 0.3098489732590613] ***
*** starting iteration: 3; err: [Inf, 0.4021874424279877, 0.3155432521916546, 0.3098489732590613] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4021874424279877, 0.3155432521916546, 0.3098489732590613, 0.30806358379532806] ***
*** starting iteration: 4; err: [Inf, 0.4021874424279877, 0.3155432521916546, 0.3098489732590613, 0.30806358379532806] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4021874424279877, 0.3155432521916546, 0.3098489732590613, 0.30806358379532806, 0.30712087185040965] ***
*** finished computation of 3 references, err: [Inf, 0.4021874424279877, 0.3155432521916546, 0.3098489732590613, 0.30806358379532806, 0.30712087185040965] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [1, 188, 24]]
** centroid: 1, normalized-entropy: 0.5095157180881823, [(2, 188), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [126, 53, 0]]
** centroid: 2, normalized-entropy: 0.8764579311590105, [(1, 126), (2, 53)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [265, 9, 0]]
** centroid: 3, normalized-entropy: 0.2084729931160756, [(1, 265), (2, 9)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32583940961863145] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32583940961863145, 0.3004196015768859] ***
*** starting iteration: 2; err: [Inf, 0.32583940961863145, 0.3004196015768859] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32583940961863145, 0.3004196015768859, 0.2952065950628186] ***
*** starting iteration: 3; err: [Inf, 0.32583940961863145, 0.3004196015768859, 0.2952065950628186] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32583940961863145, 0.3004196015768859, 0.2952065950628186, 0.29460185591125865] ***
*** finished computation of 3 references, err: [Inf, 0.32583940961863145, 0.3004196015768859, 0.2952065950628186, 0.29460185591125865] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [100, 141, 27]]
** centroid: 1, normalized-entropy: 0.8528559533312929, [(1, 100), (2, 141), (3, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [86, 107, 0]]
** centroid: 2, normalized-entropy: 0.9914428587742818, [(1, 86), (2, 107)]
*** center 3: selecting labels [1] (freq >= 2) [from [206, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39274013401574637] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39274013401574637, 0.333597117708228] ***
*** starting iteration: 2; err: [Inf, 0.39274013401574637, 0.333597117708228] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39274013401574637, 0.333597117708228, 0.3249260376373688] ***
*** starting iteration: 3; err: [Inf, 0.39274013401574637, 0.333597117708228, 0.3249260376373688] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39274013401574637, 0.333597117708228, 0.3249260376373688, 0.31622878959153905] ***
*** starting iteration: 4; err: [Inf, 0.39274013401574637, 0.333597117708228, 0.3249260376373688, 0.31622878959153905] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39274013401574637, 0.333597117708228, 0.3249260376373688, 0.31622878959153905, 0.2995046395389573] ***
*** starting iteration: 5; err: [Inf, 0.39274013401574637, 0.333597117708228, 0.3249260376373688, 0.31622878959153905, 0.2995046395389573] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39274013401574637, 0.333597117708228, 0.3249260376373688, 0.31622878959153905, 0.2995046395389573, 0.2885232829758297] ***
*** starting iteration: 6; err: [Inf, 0.39274013401574637, 0.333597117708228, 0.3249260376373688, 0.31622878959153905, 0.2995046395389573, 0.2885232829758297] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39274013401574637, 0.333597117708228, 0.3249260376373688, 0.31622878959153905, 0.2995046395389573, 0.2885232829758297, 0.2884293406799637] ***
*** finished computation of 3 references, err: [Inf, 0.39274013401574637, 0.333597117708228, 0.3249260376373688, 0.31622878959153905, 0.2995046395389573, 0.2885232829758297, 0.2884293406799637] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [105, 101, 0]]
** centroid: 1, normalized-entropy: 0.9997280072178101, [(1, 105), (2, 101)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [75, 143, 25]]
** centroid: 2, normalized-entropy: 0.827245054097504, [(1, 75), (2, 143), (3, 25)]
*** center 3: selecting labels [1] (freq >= 2) [from [218, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2782078093986164] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2782078093986164, 0.24202353652012912] ***
*** starting iteration: 2; err: [Inf, 0.2782078093986164, 0.24202353652012912] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2782078093986164, 0.24202353652012912, 0.2376218696429699] ***
*** starting iteration: 3; err: [Inf, 0.2782078093986164, 0.24202353652012912, 0.2376218696429699] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2782078093986164, 0.24202353652012912, 0.2376218696429699, 0.23581093145316248] ***
*** starting iteration: 4; err: [Inf, 0.2782078093986164, 0.24202353652012912, 0.2376218696429699, 0.23581093145316248] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2782078093986164, 0.24202353652012912, 0.2376218696429699, 0.23581093145316248, 0.23520337144477857] ***
*** finished computation of 3 references, err: [Inf, 0.2782078093986164, 0.24202353652012912, 0.2376218696429699, 0.23581093145316248, 0.23520337144477857] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [98, 96, 0]]
** centroid: 1, normalized-entropy: 0.9999233329473267, [(1, 98), (2, 96)]
*** center 2: selecting labels [1] (freq >= 1) [from [221, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [73, 154, 24]]
** centroid: 3, normalized-entropy: 0.8040609298755494, [(1, 73), (2, 154), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.28790107748654115] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28790107748654115, 0.2507755367966394] ***
*** starting iteration: 2; err: [Inf, 0.28790107748654115, 0.2507755367966394] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28790107748654115, 0.2507755367966394, 0.24655597793940884] ***
*** starting iteration: 3; err: [Inf, 0.28790107748654115, 0.2507755367966394, 0.24655597793940884] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28790107748654115, 0.2507755367966394, 0.24655597793940884, 0.2458935790357349] ***
*** finished computation of 3 references, err: [Inf, 0.28790107748654115, 0.2507755367966394, 0.24655597793940884, 0.2458935790357349] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [178, 54, 0]]
** centroid: 1, normalized-entropy: 0.7827892889687528, [(1, 178), (2, 54)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 166, 27]]
** centroid: 2, normalized-entropy: 0.5839673576722091, [(2, 166), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [214, 28, 0]]
** centroid: 3, normalized-entropy: 0.5168802913760063, [(1, 214), (2, 28)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3758977721494132] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3758977721494132, 0.27221297097393776] ***
*** starting iteration: 2; err: [Inf, 0.3758977721494132, 0.27221297097393776] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3758977721494132, 0.27221297097393776, 0.23727880541453028] ***
*** starting iteration: 3; err: [Inf, 0.3758977721494132, 0.27221297097393776, 0.23727880541453028] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3758977721494132, 0.27221297097393776, 0.23727880541453028, 0.23042535644465836] ***
*** starting iteration: 4; err: [Inf, 0.3758977721494132, 0.27221297097393776, 0.23727880541453028, 0.23042535644465836] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3758977721494132, 0.27221297097393776, 0.23727880541453028, 0.23042535644465836, 0.22974149322603596] ***
*** finished computation of 3 references, err: [Inf, 0.3758977721494132, 0.27221297097393776, 0.23727880541453028, 0.23042535644465836, 0.22974149322603596] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [104, 95, 0]]
** centroid: 1, normalized-entropy: 0.9985240503018717, [(1, 104), (2, 95)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [76, 149, 25]]
** centroid: 2, normalized-entropy: 0.8198328116981245, [(1, 76), (2, 149), (3, 25)]
*** center 3: selecting labels [1] (freq >= 1) [from [218, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3928245866724343] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3928245866724343, 0.29415904449343727] ***
*** finished computation of 3 references, err: [Inf, 0.3928245866724343, 0.29415904449343727] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [84, 110, 0]]
** centroid: 1, normalized-entropy: 0.9870044298101771, [(1, 84), (2, 110)]
*** center 2: selecting labels [1] (freq >= 1) [from [235, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [73, 140, 24]]
** centroid: 3, normalized-entropy: 0.8242983684380424, [(1, 73), (2, 140), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3562437806074609] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3562437806074609, 0.3039620614804696] ***
*** finished computation of 3 references, err: [Inf, 0.3562437806074609, 0.3039620614804696] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [104, 101, 0]]
** centroid: 1, normalized-entropy: 0.9998455119707883, [(1, 104), (2, 101)]
*** center 2: selecting labels [1] (freq >= 1) [from [216, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [72, 147, 27]]
** centroid: 3, normalized-entropy: 0.8281342113601404, [(1, 72), (2, 147), (3, 27)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31492773028274906] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31492773028274906, 0.2888243388694556] ***
*** finished computation of 3 references, err: [Inf, 0.31492773028274906, 0.2888243388694556] ***
*** center 1: selecting labels [1] (freq >= 1) [from [218, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [74, 133, 25]]
** centroid: 2, normalized-entropy: 0.8406134731415285, [(1, 74), (2, 133), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [106, 111, 0]]
** centroid: 3, normalized-entropy: 0.9996169958151667, [(1, 106), (2, 111)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.43951365398522746] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43951365398522746, 0.307721409602678] ***
*** starting iteration: 2; err: [Inf, 0.43951365398522746, 0.307721409602678] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43951365398522746, 0.307721409602678, 0.2990936790690855] ***
*** starting iteration: 3; err: [Inf, 0.43951365398522746, 0.307721409602678, 0.2990936790690855] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43951365398522746, 0.307721409602678, 0.2990936790690855, 0.29518932948873433] ***
*** finished computation of 3 references, err: [Inf, 0.43951365398522746, 0.307721409602678, 0.2990936790690855, 0.29518932948873433] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [75, 164, 24]]
** centroid: 1, normalized-entropy: 0.7926124926230688, [(1, 75), (2, 164), (3, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [221, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [96, 86, 0]]
** centroid: 3, normalized-entropy: 0.9978211842997324, [(1, 96), (2, 86)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4580775407956972] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4580775407956972, 0.3067733624850915] ***
*** starting iteration: 2; err: [Inf, 0.4580775407956972, 0.3067733624850915] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4580775407956972, 0.3067733624850915, 0.3021313536945714] ***
*** starting iteration: 3; err: [Inf, 0.4580775407956972, 0.3067733624850915, 0.3021313536945714] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4580775407956972, 0.3067733624850915, 0.3021313536945714, 0.29901286179124414] ***
*** finished computation of 3 references, err: [Inf, 0.4580775407956972, 0.3067733624850915, 0.3021313536945714, 0.29901286179124414] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [254, 16, 0]]
** centroid: 1, normalized-entropy: 0.32449741023553424, [(1, 254), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [138, 62, 0]]
** centroid: 2, normalized-entropy: 0.8931734583778567, [(1, 138), (2, 62)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 170, 27]]
** centroid: 3, normalized-entropy: 0.5764760747770721, [(2, 170), (3, 27)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4189986401227773] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4189986401227773, 0.2916309483701187] ***
*** starting iteration: 2; err: [Inf, 0.4189986401227773, 0.2916309483701187] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4189986401227773, 0.2916309483701187, 0.2891525269012669] ***
*** starting iteration: 3; err: [Inf, 0.4189986401227773, 0.2916309483701187, 0.2891525269012669] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4189986401227773, 0.2916309483701187, 0.2891525269012669, 0.2886764450945418] ***
*** finished computation of 3 references, err: [Inf, 0.4189986401227773, 0.2916309483701187, 0.2891525269012669, 0.2886764450945418] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [76, 144, 25]]
** centroid: 1, normalized-entropy: 0.8268223662299885, [(1, 76), (2, 144), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [105, 100, 0]]
** centroid: 2, normalized-entropy: 0.9995708393473225, [(1, 105), (2, 100)]
*** center 3: selecting labels [1] (freq >= 2) [from [217, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3442569301916739] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3442569301916739, 0.23783435998938968] ***
*** starting iteration: 2; err: [Inf, 0.3442569301916739, 0.23783435998938968] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3442569301916739, 0.23783435998938968, 0.23483423910952556] ***
*** starting iteration: 3; err: [Inf, 0.3442569301916739, 0.23783435998938968, 0.23483423910952556] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3442569301916739, 0.23783435998938968, 0.23483423910952556, 0.23459151953489552] ***
*** finished computation of 3 references, err: [Inf, 0.3442569301916739, 0.23783435998938968, 0.23483423910952556, 0.23459151953489552] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [81, 156, 24]]
** centroid: 1, normalized-entropy: 0.810282459355125, [(1, 81), (2, 156), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [96, 94, 0]]
** centroid: 2, normalized-entropy: 0.9999200708207958, [(1, 96), (2, 94)]
*** center 3: selecting labels [1] (freq >= 2) [from [215, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3190508227686452] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3190508227686452, 0.24273445037915475] ***
*** starting iteration: 2; err: [Inf, 0.3190508227686452, 0.24273445037915475] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3190508227686452, 0.24273445037915475, 0.23771874613590774] ***
*** starting iteration: 3; err: [Inf, 0.3190508227686452, 0.24273445037915475, 0.23771874613590774] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3190508227686452, 0.24273445037915475, 0.23771874613590774, 0.23538865836691866] ***
*** starting iteration: 4; err: [Inf, 0.3190508227686452, 0.24273445037915475, 0.23771874613590774, 0.23538865836691866] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3190508227686452, 0.24273445037915475, 0.23771874613590774, 0.23538865836691866, 0.23352158304186596] ***
*** starting iteration: 5; err: [Inf, 0.3190508227686452, 0.24273445037915475, 0.23771874613590774, 0.23538865836691866, 0.23352158304186596] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3190508227686452, 0.24273445037915475, 0.23771874613590774, 0.23538865836691866, 0.23352158304186596, 0.23167682158993907] ***
*** starting iteration: 6; err: [Inf, 0.3190508227686452, 0.24273445037915475, 0.23771874613590774, 0.23538865836691866, 0.23352158304186596, 0.23167682158993907] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3190508227686452, 0.24273445037915475, 0.23771874613590774, 0.23538865836691866, 0.23352158304186596, 0.23167682158993907, 0.23075061270442124] ***
*** finished computation of 3 references, err: [Inf, 0.3190508227686452, 0.24273445037915475, 0.23771874613590774, 0.23538865836691866, 0.23352158304186596, 0.23167682158993907, 0.23075061270442124] ***
*** center 1: selecting labels [1] (freq >= 2) [from [240, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [122, 72, 0]]
** centroid: 2, normalized-entropy: 0.9515388458648668, [(1, 122), (2, 72)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [30, 175, 27]]
** centroid: 3, normalized-entropy: 0.6622069154836343, [(1, 30), (2, 175), (3, 27)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30372056330943753] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30372056330943753, 0.24640442200306653] ***
*** starting iteration: 2; err: [Inf, 0.30372056330943753, 0.24640442200306653] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30372056330943753, 0.24640442200306653, 0.23743738615089494] ***
*** starting iteration: 3; err: [Inf, 0.30372056330943753, 0.24640442200306653, 0.23743738615089494] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30372056330943753, 0.24640442200306653, 0.23743738615089494, 0.2359190459923073] ***
*** starting iteration: 4; err: [Inf, 0.30372056330943753, 0.24640442200306653, 0.23743738615089494, 0.2359190459923073] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30372056330943753, 0.24640442200306653, 0.23743738615089494, 0.2359190459923073, 0.23480149632043343] ***
*** starting iteration: 5; err: [Inf, 0.30372056330943753, 0.24640442200306653, 0.23743738615089494, 0.2359190459923073, 0.23480149632043343] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30372056330943753, 0.24640442200306653, 0.23743738615089494, 0.2359190459923073, 0.23480149632043343, 0.2341228917658586] ***
*** finished computation of 3 references, err: [Inf, 0.30372056330943753, 0.24640442200306653, 0.23743738615089494, 0.2359190459923073, 0.23480149632043343, 0.2341228917658586] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [104, 141, 16]]
** centroid: 1, normalized-entropy: 0.7923148007827648, [(1, 104), (2, 141), (3, 16)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [87, 103, 9]]
** centroid: 2, normalized-entropy: 0.766986540156556, [(1, 87), (2, 103), (3, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [207, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3115322004413573] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3115322004413573, 0.2564477236415665] ***
*** finished computation of 3 references, err: [Inf, 0.3115322004413573, 0.2564477236415665] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [298, 68, 0]]
** centroid: 1, normalized-entropy: 0.6925859248885583, [(1, 298), (2, 68)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 142, 24]]
** centroid: 2, normalized-entropy: 0.5961045458832345, [(2, 142), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [94, 40, 0]]
** centroid: 3, normalized-entropy: 0.8794587736429037, [(1, 94), (2, 40)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.42165537468106046] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42165537468106046, 0.24371817475010263] ***
*** finished computation of 3 references, err: [Inf, 0.42165537468106046, 0.24371817475010263] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [252, 1, 0]]
** centroid: 1, normalized-entropy: 0.03724440188016406, [(1, 252), (2, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [36, 172, 27]]
** centroid: 2, normalized-entropy: 0.695807272185633, [(1, 36), (2, 172), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [104, 75, 0]]
** centroid: 3, normalized-entropy: 0.9809826349521635, [(1, 104), (2, 75)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31589908827085056] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31589908827085056, 0.2408507100559179] ***
*** finished computation of 3 references, err: [Inf, 0.31589908827085056, 0.2408507100559179] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [283, 26, 0]]
** centroid: 1, normalized-entropy: 0.41660958003029336, [(1, 283), (2, 26)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [5, 154, 25]]
** centroid: 2, normalized-entropy: 0.47163448650406326, [(1, 5), (2, 154), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [110, 64, 0]]
** centroid: 3, normalized-entropy: 0.9489804585630239, [(1, 110), (2, 64)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.19731900922331339] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19731900922331339, 0.15233137671007724] ***
*** finished computation of 7 references, err: [Inf, 0.19731900922331339, 0.15233137671007724] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [2, 109, 0]]
** centroid: 1, normalized-entropy: 0.1301627906682592, [(1, 2), (2, 109)]
*** center 2: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [76, 2, 0]]
** centroid: 3, normalized-entropy: 0.17203694935311387, [(1, 76), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [100, 9, 0]]
** centroid: 4, normalized-entropy: 0.41116649000212574, [(1, 100), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [97, 8, 0]]
** centroid: 5, normalized-entropy: 0.38861174916944274, [(1, 97), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [5, 91, 0]]
** centroid: 6, normalized-entropy: 0.29518174309075856, [(1, 5), (2, 91)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 29, 27]]
** centroid: 7, normalized-entropy: 0.9990797181805819, [(2, 29), (3, 27)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19332403399125636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19332403399125636, 0.15673554973883452] ***
*** finished computation of 7 references, err: [Inf, 0.19332403399125636, 0.15673554973883452] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 120, 21]]
** centroid: 1, normalized-entropy: 0.607171654871303, [(2, 120), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 7, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 56), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [77, 29, 0]]
** centroid: 4, normalized-entropy: 0.8465618461461522, [(1, 77), (2, 29)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [98, 8, 0]]
** centroid: 5, normalized-entropy: 0.3860189005698936, [(1, 98), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [79, 1, 0]]
** centroid: 6, normalized-entropy: 0.09694460606247329, [(1, 79), (2, 1)]
*** center 7: selecting labels [1, 2, 3] (freq >= 1) [from [1, 79, 4]]
** centroid: 7, normalized-entropy: 0.23251251921117091, [(1, 1), (2, 79), (3, 4)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19478155242407824] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19478155242407824, 0.1555542930388717] ***
*** finished computation of 7 references, err: [Inf, 0.19478155242407824, 0.1555542930388717] ***
*** center 1: selecting labels [1] (freq >= 2) [from [155, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 54, 24]]
** centroid: 2, normalized-entropy: 0.8904916402194913, [(2, 54), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 16, 0]]
** centroid: 3, normalized-entropy: 0.775512658133148, [(1, 54), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [81, 9, 0]]
** centroid: 4, normalized-entropy: 0.46899559358928133, [(1, 81), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 81, 0]]
** centroid: 5, normalized-entropy: 0.6840384356390419, [(1, 18), (2, 81)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 90, 0]]
** centroid: 6, normalized-entropy: 0.2974722489192896, [(1, 5), (2, 90)]
*** center 7: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19490667065742356] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19490667065742356, 0.15410186171341783] ***
*** finished computation of 7 references, err: [Inf, 0.19490667065742356, 0.15410186171341783] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 82, 27]]
** centroid: 1, normalized-entropy: 0.8076226097576925, [(2, 82), (3, 27)]
*** center 2: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [61, 11, 0]]
** centroid: 3, normalized-entropy: 0.6167482598263911, [(1, 61), (2, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [109, 20, 0]]
** centroid: 5, normalized-entropy: 0.6223074624121516, [(1, 109), (2, 20)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 81, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [37, 54, 0]]
** centroid: 7, normalized-entropy: 0.974677061681131, [(1, 37), (2, 54)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1919849294801892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1919849294801892, 0.1479406789667078] ***
*** finished computation of 7 references, err: [Inf, 0.1919849294801892, 0.1479406789667078] ***
*** center 1: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 73, 25]]
** centroid: 2, normalized-entropy: 0.8192649712314392, [(2, 73), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [61, 34, 0]]
** centroid: 3, normalized-entropy: 0.9409217747114994, [(1, 61), (2, 34)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 55, 0]]
** centroid: 5, normalized-entropy: 0.9989725613141186, [(1, 51), (2, 55)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [15, 82, 0]]
** centroid: 7, normalized-entropy: 0.6213290966942344, [(1, 15), (2, 82)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19954911664732405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19954911664732405, 0.15072599793546596] ***
*** finished computation of 7 references, err: [Inf, 0.19954911664732405, 0.15072599793546596] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [101, 13, 0]]
** centroid: 1, normalized-entropy: 0.5119682940439919, [(1, 101), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 43, 0]]
** centroid: 2, normalized-entropy: 0.9840304711717017, [(1, 58), (2, 43)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 65, 24]]
** centroid: 3, normalized-entropy: 0.8409805336163159, [(2, 65), (3, 24)]
*** center 4: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [54, 53, 0]]
** centroid: 5, normalized-entropy: 0.9999369937966904, [(1, 54), (2, 53)]
*** center 6: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 76, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18527546064785752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18527546064785752, 0.14965602526555713] ***
*** finished computation of 7 references, err: [Inf, 0.18527546064785752, 0.14965602526555713] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [42, 80, 0]]
** centroid: 1, normalized-entropy: 0.9288391461883213, [(1, 42), (2, 80)]
*** center 2: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 74, 27]]
** centroid: 4, normalized-entropy: 0.837602456861142, [(2, 74), (3, 27)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [86, 17, 0]]
** centroid: 5, normalized-entropy: 0.646251622274129, [(1, 86), (2, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [8, 77, 0]]
** centroid: 7, normalized-entropy: 0.4500666580964382, [(1, 8), (2, 77)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19720473841762637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19720473841762637, 0.14975436411468476] ***
*** finished computation of 7 references, err: [Inf, 0.19720473841762637, 0.14975436411468476] ***
*** center 1: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 67, 25]]
** centroid: 2, normalized-entropy: 0.8439491244805034, [(2, 67), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [59, 2, 0]]
** centroid: 3, normalized-entropy: 0.20818094555717087, [(1, 59), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [88, 30, 0]]
** centroid: 4, normalized-entropy: 0.8179252501386403, [(1, 88), (2, 30)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 68, 0]]
** centroid: 5, normalized-entropy: 0.9831491282282879, [(1, 50), (2, 68)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [8, 77, 0]]
** centroid: 6, normalized-entropy: 0.4500666580964382, [(1, 8), (2, 77)]
*** center 7: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9319918721116326, 0.918004831178484, 0.9160028291764819, 0.9139858421295547, 0.9129878381375387, 0.9019768271265277, 0.8949907991824159, 0.8899708091324857, 0.8739487990984998, 0.8669837502172831, 0.8659917402432372, 0.8049726373079666, 0.8009716303129477, 0.7528336719953487]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9319918721116326
finished with 15
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.3858480360974242] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3858480360974242, 0.33510333939816234] ***
*** starting iteration: 2; err: [Inf, 0.3858480360974242, 0.33510333939816234] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3858480360974242, 0.33510333939816234, 0.3265711864954359] ***
*** starting iteration: 3; err: [Inf, 0.3858480360974242, 0.33510333939816234, 0.3265711864954359] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3858480360974242, 0.33510333939816234, 0.3265711864954359, 0.2952471169120109] ***
*** starting iteration: 4; err: [Inf, 0.3858480360974242, 0.33510333939816234, 0.3265711864954359, 0.2952471169120109] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3858480360974242, 0.33510333939816234, 0.3265711864954359, 0.2952471169120109, 0.2935736039122035] ***
*** starting iteration: 5; err: [Inf, 0.3858480360974242, 0.33510333939816234, 0.3265711864954359, 0.2952471169120109, 0.2935736039122035] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3858480360974242, 0.33510333939816234, 0.3265711864954359, 0.2952471169120109, 0.2935736039122035, 0.29332199837179024] ***
*** finished computation of 3 references, err: [Inf, 0.3858480360974242, 0.33510333939816234, 0.3265711864954359, 0.2952471169120109, 0.2935736039122035, 0.29332199837179024] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [94, 115, 0]]
** centroid: 1, normalized-entropy: 0.9927050272181983, [(1, 94), (2, 115)]
*** center 2: selecting labels [1] (freq >= 1) [from [218, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [80, 135, 24]]
** centroid: 3, normalized-entropy: 0.8372192688532318, [(1, 80), (2, 135), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4026192064415189] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4026192064415189, 0.33408039816581214] ***
*** starting iteration: 2; err: [Inf, 0.4026192064415189, 0.33408039816581214] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4026192064415189, 0.33408039816581214, 0.3155606532123113] ***
*** starting iteration: 3; err: [Inf, 0.4026192064415189, 0.33408039816581214, 0.3155606532123113] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4026192064415189, 0.33408039816581214, 0.3155606532123113, 0.3106730225114808] ***
*** starting iteration: 4; err: [Inf, 0.4026192064415189, 0.33408039816581214, 0.3155606532123113, 0.3106730225114808] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4026192064415189, 0.33408039816581214, 0.3155606532123113, 0.3106730225114808, 0.30982917476573896] ***
*** finished computation of 3 references, err: [Inf, 0.4026192064415189, 0.33408039816581214, 0.3155606532123113, 0.3106730225114808, 0.30982917476573896] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [129, 67, 0]]
** centroid: 1, normalized-entropy: 0.9265654986546442, [(1, 129), (2, 67)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [262, 12, 0]]
** centroid: 2, normalized-entropy: 0.25943216905006755, [(1, 262), (2, 12)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [1, 169, 27]]
** centroid: 3, normalized-entropy: 0.3920527706670997, [(1, 1), (2, 169), (3, 27)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4359482109345596] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4359482109345596, 0.3244270119177962] ***
*** starting iteration: 2; err: [Inf, 0.4359482109345596, 0.3244270119177962] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4359482109345596, 0.3244270119177962, 0.30173765774467204] ***
*** starting iteration: 3; err: [Inf, 0.4359482109345596, 0.3244270119177962, 0.30173765774467204] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4359482109345596, 0.3244270119177962, 0.30173765774467204, 0.2956468532032248] ***
*** starting iteration: 4; err: [Inf, 0.4359482109345596, 0.3244270119177962, 0.30173765774467204, 0.2956468532032248] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4359482109345596, 0.3244270119177962, 0.30173765774467204, 0.2956468532032248, 0.29423295609608313] ***
*** starting iteration: 5; err: [Inf, 0.4359482109345596, 0.3244270119177962, 0.30173765774467204, 0.2956468532032248, 0.29423295609608313] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4359482109345596, 0.3244270119177962, 0.30173765774467204, 0.2956468532032248, 0.29423295609608313, 0.2939270966291159] ***
*** finished computation of 3 references, err: [Inf, 0.4359482109345596, 0.3244270119177962, 0.30173765774467204, 0.2956468532032248, 0.29423295609608313, 0.2939270966291159] ***
*** center 1: selecting labels [1] (freq >= 1) [from [201, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [110, 142, 25]]
** centroid: 2, normalized-entropy: 0.8432057634759733, [(1, 110), (2, 142), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [87, 102, 0]]
** centroid: 3, normalized-entropy: 0.9954515828457716, [(1, 87), (2, 102)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 15)
[0.9319918721116326, 0.918004831178484, 0.9160028291764819, 0.9139858421295547, 0.9129878381375387, 0.902998807190424, 0.9019768271265277, 0.8949907991824159, 0.8899708091324857, 0.8739487990984998, 0.8669837502172831, 0.8659917402432372, 0.8049726373079666, 0.8009716303129477, 0.7528336719953487]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9319918721116326
finished with 17
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.4634071081043319] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4634071081043319, 0.30071065545098874] ***
*** finished computation of 3 references, err: [Inf, 0.4634071081043319, 0.30071065545098874] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [271, 4, 0]]
** centroid: 1, normalized-entropy: 0.10960638947784311, [(1, 271), (2, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [9, 174, 24]]
** centroid: 2, normalized-entropy: 0.484356563312185, [(1, 9), (2, 174), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [112, 72, 0]]
** centroid: 3, normalized-entropy: 0.9656361333706099, [(1, 112), (2, 72)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4579478648897523] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4579478648897523, 0.29599256415584724] ***
*** finished computation of 3 references, err: [Inf, 0.4579478648897523, 0.29599256415584724] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [109, 139, 27]]
** centroid: 1, normalized-entropy: 0.8552133145129719, [(1, 109), (2, 139), (3, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [84, 109, 0]]
** centroid: 2, normalized-entropy: 0.987862452220926, [(1, 84), (2, 109)]
*** center 3: selecting labels [1] (freq >= 1) [from [199, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4342222983028734] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4342222983028734, 0.30449736091298524] ***
*** finished computation of 3 references, err: [Inf, 0.4342222983028734, 0.30449736091298524] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [267, 15, 0]]
** centroid: 1, normalized-entropy: 0.2998025130558691, [(1, 267), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [130, 61, 0]]
** centroid: 2, normalized-entropy: 0.9036969260198581, [(1, 130), (2, 61)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [1, 168, 25]]
** centroid: 3, normalized-entropy: 0.37848422073191695, [(1, 1), (2, 168), (3, 25)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3501376703230513] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3501376703230513, 0.24336500122357305] ***
*** finished computation of 3 references, err: [Inf, 0.3501376703230513, 0.24336500122357305] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [259, 52, 0]]
** centroid: 1, normalized-entropy: 0.6512652657764089, [(1, 259), (2, 52)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [133, 61, 0]]
** centroid: 2, normalized-entropy: 0.8982244838727241, [(1, 133), (2, 61)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 137, 24]]
** centroid: 3, normalized-entropy: 0.6075038633139965, [(2, 137), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32671507625705165] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32671507625705165, 0.2420824793023595] ***
*** finished computation of 3 references, err: [Inf, 0.32671507625705165, 0.2420824793023595] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [268, 48, 0]]
** centroid: 1, normalized-entropy: 0.6145715612236268, [(1, 268), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [124, 55, 0]]
** centroid: 2, normalized-entropy: 0.8899882536227548, [(1, 124), (2, 55)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 145, 27]]
** centroid: 3, normalized-entropy: 0.6270276581289633, [(2, 145), (3, 27)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.321999484910511] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.321999484910511, 0.25667810080519904] ***
*** finished computation of 3 references, err: [Inf, 0.321999484910511, 0.25667810080519904] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [299, 47, 0]]
** centroid: 1, normalized-entropy: 0.5732346536075847, [(1, 299), (2, 47)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 149, 25]]
** centroid: 2, normalized-entropy: 0.5937911148531525, [(2, 149), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [99, 48, 0]]
** centroid: 3, normalized-entropy: 0.9113423759758414, [(1, 99), (2, 48)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 17)
[0.9319918721116326, 0.918004831178484, 0.9160028291764819, 0.9139858421295547, 0.9129878381375387, 0.9079828331325337, 0.902998807190424, 0.9019768271265277, 0.8949907991824159, 0.8899708091324857, 0.8739487990984998, 0.8669837502172831, 0.8659917402432372, 0.836039632446818, 0.8049726373079666, 0.8009716303129477, 0.7528336719953487]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9319918721116326
finished with 18
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.2680135075486749] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2680135075486749, 0.2036305406437096] ***
*** finished computation of 7 references, err: [Inf, 0.2680135075486749, 0.2036305406437096] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [58, 7, 0]]
** centroid: 1, normalized-entropy: 0.49291577961610966, [(1, 58), (2, 7)]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [36, 43, 0]]
** centroid: 3, normalized-entropy: 0.9943290455933883, [(1, 36), (2, 43)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [68, 28, 0]]
** centroid: 4, normalized-entropy: 0.8708644692353648, [(1, 68), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 84, 0]]
** centroid: 5, normalized-entropy: 0.9908375918145715, [(1, 67), (2, 84)]
*** center 6: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 88, 24]]
** centroid: 7, normalized-entropy: 0.7495952572594798, [(2, 88), (3, 24)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2588798062934511] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2588798062934511, 0.19906012580703492] ***
*** finished computation of 7 references, err: [Inf, 0.2588798062934511, 0.19906012580703492] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 67, 27]]
** centroid: 1, normalized-entropy: 0.8651214227512075, [(2, 67), (3, 27)]
*** center 2: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [9, 70, 0]]
** centroid: 3, normalized-entropy: 0.511639783631173, [(1, 9), (2, 70)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [82, 49, 0]]
** centroid: 4, normalized-entropy: 0.9537279882525033, [(1, 82), (2, 49)]
*** center 5: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [22, 62, 0]]
** centroid: 7, normalized-entropy: 0.8296071030882032, [(1, 22), (2, 62)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33327073935486345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33327073935486345, 0.2076934264900199] ***
*** finished computation of 7 references, err: [Inf, 0.33327073935486345, 0.2076934264900199] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [26, 90, 0]]
** centroid: 1, normalized-entropy: 0.7676515870125797, [(1, 26), (2, 90)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 6, 0]]
** centroid: 2, normalized-entropy: 0.43497348007474274, [(1, 61), (2, 6)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [124, 14, 0]]
** centroid: 3, normalized-entropy: 0.47357292491745173, [(1, 124), (2, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [128, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 55, 0]]
** centroid: 5, normalized-entropy: 0.5858732928619204, [(1, 9), (2, 55)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 74, 25]]
** centroid: 6, normalized-entropy: 0.8152560766360704, [(2, 74), (3, 25)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [50, 5, 0]]
** centroid: 7, normalized-entropy: 0.43949698692151346, [(1, 50), (2, 5)]
finished with 13 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 18)
[0.9319918721116326, 0.918004831178484, 0.9169708630786474, 0.9160028291764819, 0.9139858421295547, 0.9129878381375387, 0.9079828331325337, 0.902998807190424, 0.9019768271265277, 0.8949907991824159, 0.8899708091324857, 0.8739487990984998, 0.8669837502172831, 0.8659917402432372, 0.836039632446818, 0.8049726373079666, 0.8009716303129477, 0.7528336719953487]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9319918721116326
finished with 18
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9319918721116326, 0.918004831178484, 0.9169708630786474, 0.9160028291764819, 0.9139858421295547, 0.9129878381375387, 0.9079828331325337, 0.902998807190424, 0.9019768271265277, 0.8949907991824159, 0.8899708091324857, 0.8739487990984998, 0.8669837502172831, 0.8659917402432372, 0.836039632446818, 0.8049726373079666, 0.8009716303129477, 0.7528336719953487]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9319918721116326
finished with 18
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9319918721116326, 0.918004831178484, 0.9169708630786474, 0.9160028291764819, 0.9139858421295547, 0.9129878381375387, 0.9079828331325337, 0.902998807190424, 0.9019768271265277, 0.8949907991824159, 0.8899708091324857, 0.8739487990984998, 0.8669837502172831, 0.8659917402432372, 0.836039632446818, 0.8049726373079666, 0.8009716303129477, 0.7528336719953487]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9319918721116326
finished with 18
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9319918721116326, 0.918004831178484, 0.9169708630786474, 0.9160028291764819, 0.9139858421295547, 0.9129878381375387, 0.9079828331325337, 0.902998807190424, 0.9019768271265277, 0.8949907991824159, 0.8899708091324857, 0.8739487990984998, 0.8669837502172831, 0.8659917402432372, 0.836039632446818, 0.8049726373079666, 0.8009716303129477, 0.7528336719953487]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9319918721116326
finished with 19
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.3606337589566951] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3606337589566951, 0.23508938004097737] ***
*** starting iteration: 2; err: [Inf, 0.3606337589566951, 0.23508938004097737] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3606337589566951, 0.23508938004097737, 0.2341451941095796] ***
*** finished computation of 3 references, err: [Inf, 0.3606337589566951, 0.23508938004097737, 0.2341451941095796] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [61, 166, 24]]
** centroid: 1, normalized-entropy: 0.7661317377951029, [(1, 61), (2, 166), (3, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [225, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [106, 84, 0]]
** centroid: 3, normalized-entropy: 0.9903070204513952, [(1, 106), (2, 84)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4315963397961462] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4315963397961462, 0.24539215013180962] ***
*** starting iteration: 2; err: [Inf, 0.4315963397961462, 0.24539215013180962] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4315963397961462, 0.24539215013180962, 0.2450261251244141] ***
*** finished computation of 3 references, err: [Inf, 0.4315963397961462, 0.24539215013180962, 0.2450261251244141] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [208, 39, 0]]
** centroid: 1, normalized-entropy: 0.6292492238560344, [(1, 208), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [184, 47, 0]]
** centroid: 2, normalized-entropy: 0.7288006607089608, [(1, 184), (2, 47)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 162, 27]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(2, 162), (3, 27)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3340057416398754] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3340057416398754, 0.25462388161798827] ***
*** starting iteration: 2; err: [Inf, 0.3340057416398754, 0.25462388161798827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3340057416398754, 0.25462388161798827, 0.25406788329759994] ***
*** finished computation of 3 references, err: [Inf, 0.3340057416398754, 0.25462388161798827, 0.25406788329759994] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [278, 36, 0]]
** centroid: 1, normalized-entropy: 0.5137834295634159, [(1, 278), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [120, 52, 0]]
** centroid: 2, normalized-entropy: 0.8841151220488478, [(1, 120), (2, 52)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 156, 25]]
** centroid: 3, normalized-entropy: 0.5792980921280737, [(2, 156), (3, 25)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 19)
[0.9319918721116326, 0.918004831178484, 0.9169708630786474, 0.9160028291764819, 0.9139858421295547, 0.9129878381375387, 0.9079828331325337, 0.902998807190424, 0.9019768271265277, 0.8949907991824159, 0.8899708091324857, 0.8739487990984998, 0.8669837502172831, 0.8659917402432372, 0.8489507471543399, 0.836039632446818, 0.8049726373079666, 0.8009716303129477, 0.7528336719953487]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9319918721116326
finished with 19
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.19536633484065533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19536633484065533, 0.15164551316108554] ***
*** finished computation of 7 references, err: [Inf, 0.19536633484065533, 0.15164551316108554] ***
*** center 1: selecting labels [1] (freq >= 1) [from [153, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [125, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 70, 38]]
** centroid: 3, normalized-entropy: 0.9357110512652843, [(2, 70), (3, 38)]
*** center 4: selecting labels [1] (freq >= 1) [from [206, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [98, 61, 0]]
** centroid: 5, normalized-entropy: 0.9605776577080883, [(1, 98), (2, 61)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [7, 133, 0]]
** centroid: 6, normalized-entropy: 0.2863969571159561, [(1, 7), (2, 133)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 107, 0]]
** centroid: 7, normalized-entropy: 0.13206535647488304, [(1, 2), (2, 107)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18999260606989266] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18999260606989266, 0.1533388882111758] ***
*** finished computation of 7 references, err: [Inf, 0.18999260606989266, 0.1533388882111758] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [89, 15, 0]]
** centroid: 1, normalized-entropy: 0.5952124653513116, [(1, 89), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [40, 4, 0]]
** centroid: 2, normalized-entropy: 0.43949698692151346, [(1, 40), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 33, 18]]
** centroid: 3, normalized-entropy: 0.9366673818775627, [(2, 33), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [74, 14, 0]]
** centroid: 5, normalized-entropy: 0.6321302781219708, [(1, 74), (2, 14)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 58, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18821242349222303] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18821242349222303, 0.1566490027909167] ***
*** finished computation of 7 references, err: [Inf, 0.18821242349222303, 0.1566490027909167] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 91, 17]]
** centroid: 1, normalized-entropy: 0.6280710155029396, [(2, 91), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 1, 0]]
** centroid: 3, normalized-entropy: 0.14372616993938164, [(1, 48), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [54, 23, 0]]
** centroid: 4, normalized-entropy: 0.8796975782775168, [(1, 54), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [65, 9, 0]]
** centroid: 5, normalized-entropy: 0.5340042729285396, [(1, 65), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 66, 0]]
** centroid: 6, normalized-entropy: 0.1914332548141934, [(1, 2), (2, 66)]
*** center 7: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19444821581430732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19444821581430732, 0.15568121304549276] ***
*** finished computation of 7 references, err: [Inf, 0.19444821581430732, 0.15568121304549276] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [89, 2, 0]]
** centroid: 1, normalized-entropy: 0.15240699892386778, [(1, 89), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [43, 14, 0]]
** centroid: 2, normalized-entropy: 0.8042522359016421, [(1, 43), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 41, 18]]
** centroid: 3, normalized-entropy: 0.8874179270685693, [(2, 41), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [22, 67, 0]]
** centroid: 5, normalized-entropy: 0.8067955503968327, [(1, 22), (2, 67)]
*** center 6: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 72, 0]]
** centroid: 7, normalized-entropy: 0.34673146824966367, [(1, 5), (2, 72)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19144126334786415] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19144126334786415, 0.1500376423764974] ***
*** finished computation of 7 references, err: [Inf, 0.19144126334786415, 0.1500376423764974] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [33, 40, 0]]
** centroid: 1, normalized-entropy: 0.9933570282728464, [(1, 33), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [53, 22, 0]]
** centroid: 2, normalized-entropy: 0.8729882944709463, [(1, 53), (2, 22)]
*** center 3: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 64, 20]]
** centroid: 4, normalized-entropy: 0.7918583525674836, [(2, 64), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 48, 0]]
** centroid: 5, normalized-entropy: 0.9086185980409245, [(1, 23), (2, 48)]
*** center 6: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18786813173792324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18786813173792324, 0.15121335025131702] ***
*** finished computation of 7 references, err: [Inf, 0.18786813173792324, 0.15121335025131702] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [72, 16, 0]]
** centroid: 1, normalized-entropy: 0.6840384356390419, [(1, 72), (2, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 33, 24]]
** centroid: 3, normalized-entropy: 0.9819407868640977, [(2, 33), (3, 24)]
*** center 4: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [47, 32, 0]]
** centroid: 5, normalized-entropy: 0.9738354819891416, [(1, 47), (2, 32)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 53, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 56, 0]]
** centroid: 7, normalized-entropy: 0.1274185117923586, [(1, 1), (2, 56)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19157932122144847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19157932122144847, 0.15656080897711216] ***
*** finished computation of 7 references, err: [Inf, 0.19157932122144847, 0.15656080897711216] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [9, 85, 0]]
** centroid: 1, normalized-entropy: 0.45535954758523894, [(1, 9), (2, 85)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [37, 24, 0]]
** centroid: 2, normalized-entropy: 0.9669852958320848, [(1, 37), (2, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 73, 21]]
** centroid: 4, normalized-entropy: 0.7663350359691776, [(2, 73), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [82, 14, 0]]
** centroid: 5, normalized-entropy: 0.5993142373098089, [(1, 82), (2, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [47, 2, 0]]
** centroid: 7, normalized-entropy: 0.2460225782203316, [(1, 47), (2, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20518276451528072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20518276451528072, 0.15024532647803426] ***
*** finished computation of 7 references, err: [Inf, 0.20518276451528072, 0.15024532647803426] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [21, 66, 0]]
** centroid: 1, normalized-entropy: 0.7973265101474423, [(1, 21), (2, 66)]
*** center 2: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 37, 0]]
** centroid: 3, normalized-entropy: 0.9915017866855546, [(1, 46), (2, 37)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [51, 23, 0]]
** centroid: 4, normalized-entropy: 0.8941071841443881, [(1, 51), (2, 23)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 48, 19]]
** centroid: 5, normalized-entropy: 0.8602858652332406, [(2, 48), (3, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1894304400123656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1894304400123656, 0.15160991537198423] ***
*** finished computation of 7 references, err: [Inf, 0.1894304400123656, 0.15160991537198423] ***
*** center 1: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 36, 23]]
** centroid: 2, normalized-entropy: 0.9646900825612559, [(2, 36), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [51, 14, 0]]
** centroid: 3, normalized-entropy: 0.7516499461153354, [(1, 51), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [49, 19, 0]]
** centroid: 4, normalized-entropy: 0.8546480601169081, [(1, 49), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [26, 50, 0]]
** centroid: 5, normalized-entropy: 0.9268190639645774, [(1, 26), (2, 50)]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 68, 0]]
** centroid: 7, normalized-entropy: 0.18717625687320805, [(1, 2), (2, 68)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2017018297945615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2017018297945615, 0.15006654828833416] ***
*** finished computation of 7 references, err: [Inf, 0.2017018297945615, 0.15006654828833416] ***
*** center 1: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 38, 18]]
** centroid: 2, normalized-entropy: 0.9059282160429994, [(2, 38), (3, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 24, 0]]
** centroid: 5, normalized-entropy: 0.8812908992306927, [(1, 56), (2, 24)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 61, 0]]
** centroid: 6, normalized-entropy: 0.20307392998664567, [(1, 2), (2, 61)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 63, 0]]
** centroid: 7, normalized-entropy: 0.378958787501346, [(1, 5), (2, 63)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1881319240536541] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1881319240536541, 0.14533260152675212] ***
*** finished computation of 7 references, err: [Inf, 0.1881319240536541, 0.14533260152675212] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 75, 18]]
** centroid: 1, normalized-entropy: 0.708835673332196, [(2, 75), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [34, 30, 0]]
** centroid: 4, normalized-entropy: 0.9971803988942641, [(1, 34), (2, 30)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [59, 22, 0]]
** centroid: 5, normalized-entropy: 0.8437582063121657, [(1, 59), (2, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 64, 0]]
** centroid: 6, normalized-entropy: 0.11467550533614682, [(1, 1), (2, 64)]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18337239915691317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18337239915691317, 0.15271997011452915] ***
*** finished computation of 7 references, err: [Inf, 0.18337239915691317, 0.15271997011452915] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 85, 15]]
** centroid: 1, normalized-entropy: 0.6098403047164005, [(2, 85), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [35, 22, 0]]
** centroid: 4, normalized-entropy: 0.9621461334087003, [(1, 35), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [70, 11, 0]]
** centroid: 5, normalized-entropy: 0.5731393980555147, [(1, 70), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 72, 0]]
** centroid: 6, normalized-entropy: 0.1792560669283214, [(1, 2), (2, 72)]
*** center 7: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1973476078994572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1973476078994572, 0.14964359590271487] ***
*** finished computation of 7 references, err: [Inf, 0.1973476078994572, 0.14964359590271487] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [77, 16, 0]]
** centroid: 1, normalized-entropy: 0.6623570516079519, [(1, 77), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 5, 0]]
** centroid: 2, normalized-entropy: 0.4507913883546652, [(1, 48), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 51, 22]]
** centroid: 3, normalized-entropy: 0.8829589691462253, [(2, 51), (3, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [7, 84, 0]]
** centroid: 5, normalized-entropy: 0.3912435636292556, [(1, 7), (2, 84)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [34, 31, 0]]
** centroid: 6, normalized-entropy: 0.9984628557283827, [(1, 34), (2, 31)]
*** center 7: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1977211627503857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1977211627503857, 0.15441876284126194] ***
*** finished computation of 7 references, err: [Inf, 0.1977211627503857, 0.15441876284126194] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [11, 77, 0]]
** centroid: 1, normalized-entropy: 0.5435644431995963, [(1, 11), (2, 77)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [45, 18, 0]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(1, 45), (2, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 75, 22]]
** centroid: 4, normalized-entropy: 0.772398436030307, [(2, 75), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 10, 0]]
** centroid: 5, normalized-entropy: 0.5392163432092415, [(1, 71), (2, 10)]
*** center 6: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [47, 4, 0]]
** centroid: 7, normalized-entropy: 0.3966277727783787, [(1, 47), (2, 4)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20776928317174315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20776928317174315, 0.1491621952522546] ***
*** finished computation of 7 references, err: [Inf, 0.20776928317174315, 0.1491621952522546] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [33, 49, 0]]
** centroid: 1, normalized-entropy: 0.9723594643683989, [(1, 33), (2, 49)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 3, 0]]
** centroid: 2, normalized-entropy: 0.2667649878030262, [(1, 63), (2, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 44, 21]]
** centroid: 4, normalized-entropy: 0.9076961653608385, [(2, 44), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [51, 29, 0]]
** centroid: 5, normalized-entropy: 0.9447388286467892, [(1, 51), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 62, 0]]
** centroid: 6, normalized-entropy: 0.269828447703074, [(1, 3), (2, 62)]
*** center 7: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19936227353475988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19936227353475988, 0.15490571786835788] ***
*** finished computation of 7 references, err: [Inf, 0.19936227353475988, 0.15490571786835788] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [67, 31, 0]]
** centroid: 1, normalized-entropy: 0.9003418708227195, [(1, 67), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [46, 4, 0]]
** centroid: 2, normalized-entropy: 0.4021791902022729, [(1, 46), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 50, 21]]
** centroid: 3, normalized-entropy: 0.8760643678555242, [(2, 50), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [53, 27, 0]]
** centroid: 5, normalized-entropy: 0.9224062617590724, [(1, 53), (2, 27)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 69, 0]]
** centroid: 6, normalized-entropy: 0.24988229283318547, [(1, 3), (2, 69)]
*** center 7: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18789625897351653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18789625897351653, 0.14869709312310442] ***
*** finished computation of 7 references, err: [Inf, 0.18789625897351653, 0.14869709312310442] ***
*** center 1: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 52, 19]]
** centroid: 2, normalized-entropy: 0.8380078505079931, [(2, 52), (3, 19)]
*** center 3: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [71, 31, 0]]
** centroid: 4, normalized-entropy: 0.8860318997477157, [(1, 71), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [39, 40, 0]]
** centroid: 5, normalized-entropy: 0.9998844148717589, [(1, 39), (2, 40)]
*** center 6: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [6, 53, 0]]
** centroid: 7, normalized-entropy: 0.4743454375622396, [(1, 6), (2, 53)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18720738146454097] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18720738146454097, 0.14999479140155017] ***
*** finished computation of 7 references, err: [Inf, 0.18720738146454097, 0.14999479140155017] ***
*** center 1: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 51, 20]]
** centroid: 2, normalized-entropy: 0.8577435372751958, [(2, 51), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [39, 4, 0]]
** centroid: 3, normalized-entropy: 0.446481346896803, [(1, 39), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [62, 34, 0]]
** centroid: 4, normalized-entropy: 0.9377342939868042, [(1, 62), (2, 34)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [31, 48, 0]]
** centroid: 5, normalized-entropy: 0.966334094295981, [(1, 31), (2, 48)]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 60, 0]]
** centroid: 7, normalized-entropy: 0.12068101401352371, [(1, 1), (2, 60)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1944555066935718] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1944555066935718, 0.14960707665141673] ***
*** finished computation of 7 references, err: [Inf, 0.1944555066935718, 0.14960707665141673] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [78, 1, 0]]
** centroid: 1, normalized-entropy: 0.09794058271817412, [(1, 78), (2, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 38, 22]]
** centroid: 3, normalized-entropy: 0.9480782435939054, [(2, 38), (3, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [41, 29, 0]]
** centroid: 5, normalized-entropy: 0.9786961448300948, [(1, 41), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 64, 0]]
** centroid: 6, normalized-entropy: 0.19590927087360496, [(1, 2), (2, 64)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 61, 0]]
** centroid: 7, normalized-entropy: 0.20307392998664567, [(1, 2), (2, 61)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18088340346887707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18088340346887707, 0.1495712926313281] ***
*** finished computation of 7 references, err: [Inf, 0.18088340346887707, 0.1495712926313281] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [60, 51, 0]]
** centroid: 1, normalized-entropy: 0.9952525494396791, [(1, 60), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [47, 5, 0]]
** centroid: 2, normalized-entropy: 0.45668363153944286, [(1, 47), (2, 5)]
*** center 3: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 54, 14]]
** centroid: 4, normalized-entropy: 0.7335379291086666, [(2, 54), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [68, 23, 0]]
** centroid: 5, normalized-entropy: 0.8156034512499668, [(1, 68), (2, 23)]
*** center 6: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 47, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19202728757075965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19202728757075965, 0.1504248172007501] ***
*** finished computation of 7 references, err: [Inf, 0.19202728757075965, 0.1504248172007501] ***
*** center 1: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 6, 0]]
** centroid: 2, normalized-entropy: 0.45868581620054033, [(1, 56), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 41, 17]]
** centroid: 3, normalized-entropy: 0.8726965039103788, [(2, 41), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [55, 25, 0]]
** centroid: 5, normalized-entropy: 0.8960382325345574, [(1, 55), (2, 25)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [20, 55, 0]]
** centroid: 6, normalized-entropy: 0.8366407419411671, [(1, 20), (2, 55)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 49, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19696536609344184] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19696536609344184, 0.14998608712293207] ***
*** finished computation of 7 references, err: [Inf, 0.19696536609344184, 0.14998608712293207] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [54, 34, 0]]
** centroid: 1, normalized-entropy: 0.9624127354629922, [(1, 54), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [39, 7, 0]]
** centroid: 2, normalized-entropy: 0.6152538910563409, [(1, 39), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 45, 23]]
** centroid: 3, normalized-entropy: 0.9231199835423002, [(2, 45), (3, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 23, 0]]
** centroid: 5, normalized-entropy: 0.8989377852081333, [(1, 50), (2, 23)]
*** center 6: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 69, 0]]
** centroid: 7, normalized-entropy: 0.24988229283318547, [(1, 3), (2, 69)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18368100654520095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18368100654520095, 0.14688901129737497] ***
*** finished computation of 7 references, err: [Inf, 0.18368100654520095, 0.14688901129737497] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [43, 48, 0]]
** centroid: 1, normalized-entropy: 0.9978211842997324, [(1, 43), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [60, 19, 0]]
** centroid: 2, normalized-entropy: 0.7958812735955936, [(1, 60), (2, 19)]
*** center 3: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 59, 1]]
** centroid: 4, normalized-entropy: 0.12229159706937456, [(2, 59), (3, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 19, 0]]
** centroid: 5, normalized-entropy: 0.776116265618875, [(1, 64), (2, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 50, 21]]
** centroid: 7, normalized-entropy: 0.8760643678555242, [(2, 50), (3, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.186603495946154] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.186603495946154, 0.14950841778889298] ***
*** finished computation of 7 references, err: [Inf, 0.186603495946154, 0.14950841778889298] ***
*** center 1: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 53, 20]]
** centroid: 2, normalized-entropy: 0.847107490529376, [(2, 53), (3, 20)]
*** center 3: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [61, 34, 0]]
** centroid: 4, normalized-entropy: 0.9409217747114994, [(1, 61), (2, 34)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [29, 46, 0]]
** centroid: 5, normalized-entropy: 0.9626147059982517, [(1, 29), (2, 46)]
*** center 6: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [7, 48, 0]]
** centroid: 7, normalized-entropy: 0.54991090463341, [(1, 7), (2, 48)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18347719461470843] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18347719461470843, 0.1541113762408495] ***
*** finished computation of 7 references, err: [Inf, 0.18347719461470843, 0.1541113762408495] ***
*** center 1: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 25, 21]]
** centroid: 2, normalized-entropy: 0.9945386816500111, [(2, 25), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [49, 10, 0]]
** centroid: 3, normalized-entropy: 0.656540281386946, [(1, 49), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [57, 1, 0]]
** centroid: 4, normalized-entropy: 0.12565805017256745, [(1, 57), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [10, 76, 0]]
** centroid: 5, normalized-entropy: 0.5185697317883058, [(1, 10), (2, 76)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 60, 0]]
** centroid: 6, normalized-entropy: 0.2055925081850832, [(1, 2), (2, 60)]
*** center 7: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19144582653976977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19144582653976977, 0.14831525287684053] ***
*** finished computation of 7 references, err: [Inf, 0.19144582653976977, 0.14831525287684053] ***
*** center 1: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 53, 16]]
** centroid: 2, normalized-entropy: 0.7812812090702043, [(2, 53), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [39, 32, 0]]
** centroid: 3, normalized-entropy: 0.9929768866085175, [(1, 39), (2, 32)]
*** center 4: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [36, 50, 0]]
** centroid: 5, normalized-entropy: 0.9807983646944296, [(1, 36), (2, 50)]
*** center 6: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [7, 54, 0]]
** centroid: 7, normalized-entropy: 0.5140912790181233, [(1, 7), (2, 54)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2087871636953205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2087871636953205, 0.14915539923962207] ***
*** finished computation of 7 references, err: [Inf, 0.2087871636953205, 0.14915539923962207] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 63, 18]]
** centroid: 1, normalized-entropy: 0.7642045065086204, [(2, 63), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [37, 4, 0]]
** centroid: 3, normalized-entropy: 0.4612160405139095, [(1, 37), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [65, 20, 0]]
** centroid: 4, normalized-entropy: 0.787126586201269, [(1, 65), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [49, 38, 0]]
** centroid: 5, normalized-entropy: 0.9884374283487116, [(1, 49), (2, 38)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 67, 0]]
** centroid: 6, normalized-entropy: 0.11058084476988722, [(1, 1), (2, 67)]
*** center 7: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1921895775552839] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1921895775552839, 0.15327918508043512] ***
*** finished computation of 7 references, err: [Inf, 0.1921895775552839, 0.15327918508043512] ***
*** center 1: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 45, 20]]
** centroid: 2, normalized-entropy: 0.8904916402194913, [(2, 45), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [52, 14, 0]]
** centroid: 3, normalized-entropy: 0.7455178428108284, [(1, 52), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [29, 60, 0]]
** centroid: 4, normalized-entropy: 0.9106223680988619, [(1, 29), (2, 60)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [14, 74, 0]]
** centroid: 5, normalized-entropy: 0.6321302781219708, [(1, 14), (2, 74)]
*** center 6: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1925636383490637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1925636383490637, 0.15158437904622407] ***
*** finished computation of 7 references, err: [Inf, 0.1925636383490637, 0.15158437904622407] ***
*** center 1: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 56, 17]]
** centroid: 2, normalized-entropy: 0.7829924501610913, [(2, 56), (3, 17)]
*** center 3: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 31, 0]]
** centroid: 4, normalized-entropy: 0.9039324555927869, [(1, 66), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [31, 47, 0]]
** centroid: 5, normalized-entropy: 0.9694309156463241, [(1, 31), (2, 47)]
*** center 6: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [8, 44, 0]]
** centroid: 7, normalized-entropy: 0.6193821946787638, [(1, 8), (2, 44)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19180331049580127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19180331049580127, 0.15151964479312302] ***
*** finished computation of 7 references, err: [Inf, 0.19180331049580127, 0.15151964479312302] ***
*** center 1: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 13, 0]]
** centroid: 2, normalized-entropy: 0.7473944462440388, [(1, 48), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 52, 23]]
** centroid: 3, normalized-entropy: 0.8892881527272397, [(2, 52), (3, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [26, 56, 0]]
** centroid: 5, normalized-entropy: 0.9011701959974223, [(1, 26), (2, 56)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [16, 61, 0]]
** centroid: 6, normalized-entropy: 0.7372413771710565, [(1, 16), (2, 61)]
*** center 7: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1955583178587258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1955583178587258, 0.14904445845261216] ***
*** finished computation of 7 references, err: [Inf, 0.1955583178587258, 0.14904445845261216] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 11, 0]]
** centroid: 3, normalized-entropy: 0.693965967334286, [(1, 48), (2, 11)]
*** center 4: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [89, 10, 0]]
** centroid: 5, normalized-entropy: 0.47218938467675087, [(1, 89), (2, 10)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 32, 17]]
** centroid: 7, normalized-entropy: 0.9313043685793762, [(2, 32), (3, 17)]
finished with 9 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 371,3 => 38,1 => 591), Dict(2 => 373,3 => 40,1 => 587))
[ Info: ===== scores for single classifier: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9797062660899775,"macro_f1":0.9439584422253401,"accuracy":0.97,"class_f1":{"2":0.9603174603174602,"3":0.888888888888889,"1":0.9826689774696707},"class_precision":{"2":0.9477806788511749,"3":0.8,"1":1.0},"class_recall":{"2":0.9731903485254692,"3":1.0,"1":0.9659284497444633}}
[ Info: ===== scores for 1: {"micro_f1":0.968,"precision":0.968,"recall":0.968,"macro_recall":0.9633653953015363,"macro_f1":0.957623465666798,"accuracy":0.968,"class_f1":{"2":0.9578947368421052,"3":0.9382716049382716,"1":0.9767040552200172},"class_precision":{"2":0.9405684754521964,"3":0.926829268292683,"1":0.9895104895104895},"class_recall":{"2":0.9758713136729222,"3":0.95,"1":0.9642248722316865}}
[ Info: ===== scores for 5: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9790638087974021,"macro_f1":0.9572310385051201,"accuracy":0.966,"class_f1":{"2":0.9558441558441559,"3":0.9411764705882353,"1":0.9746724890829693},"class_precision":{"2":0.9269521410579346,"3":0.8888888888888888,"1":1.0},"class_recall":{"2":0.9865951742627346,"3":1.0,"1":0.9505962521294719}}
[ Info: ===== scores for 7: {"micro_f1":0.968,"precision":0.968,"recall":0.968,"macro_recall":0.9798737312610278,"macro_f1":0.9552696725322605,"accuracy":0.968,"class_f1":{"2":0.95822454308094,"3":0.9302325581395349,"1":0.9773519163763066},"class_precision":{"2":0.9338422391857506,"3":0.8695652173913043,"1":1.0},"class_recall":{"2":0.9839142091152815,"3":1.0,"1":0.9557069846678024}}
[ Info: ===== scores for 9: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.9804415904319536,"macro_f1":0.955983877281288,"accuracy":0.969,"class_f1":{"2":0.9594771241830066,"3":0.9302325581395349,"1":0.9782419495213228},"class_precision":{"2":0.9362244897959183,"3":0.8695652173913043,"1":1.0},"class_recall":{"2":0.9839142091152815,"3":1.0,"1":0.9574105621805792}}
[ Info: ===== scores for 11: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9815773087738048,"macro_f1":0.9574140235460704,"accuracy":0.971,"class_f1":{"2":0.9619921363040629,"3":0.9302325581395349,"1":0.9800173761946134},"class_precision":{"2":0.941025641025641,"3":0.8695652173913043,"1":1.0},"class_recall":{"2":0.9839142091152815,"3":1.0,"1":0.9608177172061328}}
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.972,"k":3,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.9740538979040972,"macro_f1":0.9610126444914443,"accuracy":0.972,"class_f1":{"2":0.963157894736842,"3":0.9397590361445783,"1":0.9801210025929127},"class_precision":{"2":0.9457364341085271,"3":0.9069767441860465,"1":0.9947368421052631},"class_recall":{"2":0.9812332439678284,"3":0.975,"1":0.9659284497444633}}
Test Summary: | Pass  Total
AKNC          |    8      8
[14, 1, 1, 7, 6, 5, 1, 13, 6, 9, 1, 3, 3, 15, 1, 12, 7, 10, 5, 40, 2, 5, 10, 75, 13, 34, 30, 14, 6, 18, 26, 10, 1, 24, 3, 30, 3, 36, 5, 7, 29, 10, 1, 70, 7, 12, 5, 7, 28, 10, 3, 9, 4, 2, 11, 43, 2, 1, 3, 24, 171, 12, 76, 29, 60, 1, 10, 12, 3, 10, 4, 3, 17, 12, 18, 16, 53, 33, 44, 17, 10, 8, 3, 7, 89, 15, 3, 2, 4, 18, 27, 14, 21, 9, 22, 21, 29, 4, 13, 10, 24, 6, 1, 690, 173, 8, 6, 15, 18, 26, 8, 39, 97, 12, 43, 13, 12, 4, 113, 16, 5, 41, 1, 5, 30, 9, 33, 25, 6, 44, 81, 16, 7, 12, 17, 17, 30, 6, 9, 24, 18, 7, 6, 53, 4, 22, 9, 20, 7, 34, 21, 4, 44, 16, 6, 57, 525, 44, 42, 17, 47, 2, 1, 11, 6, 16, 25, 5, 19, 2, 6, 4, 10, 199, 20, 21, 77, 24, 19, 31, 34, 5, 12, 142, 23, 100, 45, 57, 12, 85, 12, 18, 6, 64, 3, 78, 92, 167, 29, 6, 12, 96, 17, 86, 13, 14, 18, 2, 2, 53, 5, 33, 7, 10, 28, 17, 14, 56, 25, 116, 248, 16, 28, 19, 2, 19, 61, 12, 177, 73, 129, 25, 16, 14, 19, 10, 52, 18, 9, 24, 6, 34, 3, 79, 23, 9, 8, 13, 20, 4, 14, 20, 146, 1, 23, 14, 96, 10, 12, 25, 3, 307, 16, 13, 16, 20, 17, 782, 3, 19, 23, 54, 23, 10, 4, 10, 1, 55, 42, 37, 10, 12, 46, 2, 6, 7, 17, 14, 7, 21, 15, 13, 47, 53, 39, 22, 44, 41, 7, 11]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6359999999999999, speedup = 0.24109934692262022, eval_ratio = 0.080065)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.36487475198412694,"recall":0.36111111111111105,"f1":null,"seconds":0.00018630735576152802,"exhaustive_search_seconds":0.00037166476249694824,"evaluations":505.0625,"distances_sum":1752.1108875772532}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5564236111111114,"recall":0.5564236111111114,"f1":null,"seconds":0.00035021640360355377,"exhaustive_search_seconds":0.00037166476249694824,"evaluations":698.1328125,"distances_sum":1665.5936400790522}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6605902777777776,"recall":0.6605902777777776,"f1":null,"seconds":0.0004864931106567383,"exhaustive_search_seconds":0.00037166476249694824,"evaluations":825.5546875,"distances_sum":1611.2862505833298}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7309027777777773,"recall":0.7309027777777773,"f1":null,"seconds":0.0007814858108758926,"exhaustive_search_seconds":0.00037166476249694824,"evaluations":928.1328125,"distances_sum":1583.3029115015477}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7951388888888881,"recall":0.7951388888888881,"f1":null,"seconds":0.0005729105323553085,"exhaustive_search_seconds":0.00037166476249694824,"evaluations":1046.125,"distances_sum":1562.664492629424}
KCenters.DeloneInvIndex> reached performance {"precision":0.8333333333333324,"recall":0.8333333333333324,"f1":0.8333333333333324,"seconds":0.0006717182695865631,"exhaustive_search_seconds":0.00037166476249694824,"evaluations":1160.6875,"distances_sum":1548.5239800744632}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8390000000000001, speedup = 0.48689289508654254, eval_ratio = 0.117704)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
