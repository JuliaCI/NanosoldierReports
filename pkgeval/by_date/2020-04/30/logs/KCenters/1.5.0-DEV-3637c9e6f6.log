Julia Version 1.5.0-DEV.740
Commit 3637c9e6f6 (2020-04-30 17:40 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Reexport ──────────────────── v0.2.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed KCenters ──────────────────── v0.2.2
  Installed JSON ──────────────────────── v0.21.0
  Installed SimilaritySearch ──────────── v0.3.19
  Installed TableTraits ───────────────── v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Compat ────────────────────── v3.9.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Tables ────────────────────── v1.0.4
  Installed DataFrames ────────────────── v0.20.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed OrderedCollections ────────── v1.1.0
  Installed Parsers ───────────────────── v1.0.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed DataStructures ────────────── v0.17.15
  Installed MLDataPattern ─────────────── v0.5.3
  Installed MLDataUtils ───────────────── v0.5.1
  Installed StatsBase ─────────────────── v0.32.2
  Installed MappedArrays ──────────────── v0.2.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.9.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_NZgpyU/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_NZgpyU/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.9.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9367083616058032
[ Info: 0.8326150393486023
[ Info: 0.5524173142015933
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32185535944998267
mean(cdnet.distances) = 0.3639789593219757
mean(crand.distances) = 0.3439010543872913
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8557905636030645,"seconds":7.398426532745361e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.4609375,"distances_sum":2291.392073796063}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5458984375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5458984375,"f1":null,"seconds":4.507601261138916e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":6.8984375,"distances_sum":1476.8202686950488}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8557905636030645,"seconds":7.398426532745361e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.4609375,"distances_sum":2291.392073796063}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8981201090576099,"seconds":5.543231964111328e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.734375,"distances_sum":2503.7291710615805}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9660771520146523,"seconds":5.923211574554443e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.90625,"distances_sum":3098.5420845921963}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9614068223443228,"seconds":6.554648280143738e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.859375,"distances_sum":3085.073718540921}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9499344405594412,"seconds":5.679205060005188e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.828125,"distances_sum":2967.3882245372524}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8730056401931412,"seconds":5.461275577545166e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.4296875,"distances_sum":2392.525362850947}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9660771520146523,"seconds":5.923211574554443e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.90625,"distances_sum":3098.5420845921963}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9667296245421246,"seconds":6.2230974435806274e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.921875,"distances_sum":3099.0764422447646}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.968458104395605,"seconds":6.146728992462158e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.921875,"distances_sum":3141.2992734555505}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.968458104395605,"seconds":6.146728992462158e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.921875,"distances_sum":3141.2992734555505}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.968458104395605,"seconds":6.146728992462158e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.921875,"distances_sum":3141.2992734555505}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8542020479520487,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.4609375,"distances_sum":2061.50266553408}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.365234375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.365234375,"f1":null,"seconds":3.85381281375885e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":5.734375,"distances_sum":964.1085971680691}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.150390625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.150390625,"f1":null,"seconds":3.112480044364929e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":4.125,"distances_sum":466.6929793999487}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.759765625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.759765625,"f1":0.8542020479520487,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.4609375,"distances_sum":2061.50266553408}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9482200091575097,"seconds":5.811452865600586e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.7734375,"distances_sum":2753.6100962562596}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.876717553280054,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.6328125,"distances_sum":2214.781465875472}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8958593489843495,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.7265625,"distances_sum":2322.4107277413405}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9482200091575097,"seconds":5.811452865600586e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.7734375,"distances_sum":2753.6100962562596}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9775869963369969,"seconds":3.6265701055526733e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.9375,"distances_sum":2976.288773808483}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9632841117216123,"seconds":3.676861524581909e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.875,"distances_sum":2870.095676284614}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9600103021978029,"seconds":3.7960708141326904e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.8984375,"distances_sum":2825.382137783799}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9510302197802203,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.84375,"distances_sum":2778.825472561168}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9775869963369969,"seconds":3.6265701055526733e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.9375,"distances_sum":2976.288773808483}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9775869963369969,"seconds":3.6265701055526733e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.9375,"distances_sum":2976.288773808483}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2021484375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2021484375,"f1":null,"seconds":3.643333911895752e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":5.8671875,"distances_sum":531.1869380351519}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.8074024933399941,"seconds":5.064532160758972e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":7.84375,"distances_sum":1735.3675586663473}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6904296875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6904296875,"f1":0.8074024933399941,"seconds":5.064532160758972e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":7.84375,"distances_sum":1735.3675586663473}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.9185038919413926,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.453125,"distances_sum":2405.3512576641606}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9211252289377295,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.4609375,"distances_sum":2436.132480425117}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.852378871128872,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.25,"distances_sum":1997.4670999461343}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.86328125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.86328125,"f1":0.9211252289377295,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.4609375,"distances_sum":2436.132480425117}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9552655677655683,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.75,"distances_sum":2733.124134159215}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9311355311355317,"seconds":5.533918738365173e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.5390625,"distances_sum":2518.780206304164}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9241732226107234,"seconds":6.355345249176025e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.4296875,"distances_sum":2489.7836483405795}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9314331501831508,"seconds":5.804002285003662e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.546875,"distances_sum":2472.4507689752886}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9707417582417586,"seconds":4.546716809272766e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.890625,"distances_sum":2819.834812944303}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9634157509157513,"seconds":7.245689630508423e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.828125,"distances_sum":2776.3458307816272}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9707417582417586,"seconds":4.546716809272766e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.890625,"distances_sum":2819.834812944303}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9707417582417586,"seconds":4.546716809272766e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.890625,"distances_sum":2819.834812944303}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.447265625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.447265625,"f1":null,"seconds":3.032386302947998e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":6.3671875,"distances_sum":1127.9781053235072}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.447265625,"state":{"ssize":2,"bsize":2},"perf":{"precision":null,"recall":0.447265625,"f1":null,"seconds":3.032386302947998e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":6.3671875,"distances_sum":1127.9781053235072}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8587688353313362,"seconds":4.0959566831588745e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.3828125,"distances_sum":2131.233948358968}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.8587688353313362,"seconds":4.0959566831588745e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.3828125,"distances_sum":2131.233948358968}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8623064435564444,"seconds":4.036352038383484e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.484375,"distances_sum":2164.917732833176}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8739911130536139,"seconds":4.0978193283081055e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.4140625,"distances_sum":2249.5673675598405}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7880859375,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.7880859375,"f1":0.8739911130536139,"seconds":4.0978193283081055e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.4140625,"distances_sum":2249.5673675598405}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7880859375,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.7880859375,"f1":0.8739911130536139,"seconds":4.0978193283081055e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.4140625,"distances_sum":2249.5673675598405}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.427734375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.427734375,"f1":null,"seconds":2.773478627204895e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":5.859375,"distances_sum":1116.6840701504054}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.427734375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.427734375,"f1":null,"seconds":2.773478627204895e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":5.859375,"distances_sum":1116.6840701504054}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4853515625, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.4853515625,"f1":null,"seconds":5.0924718379974365e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":6.125,"distances_sum":1219.2734654776298}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.857339015151516,"seconds":6.971880793571472e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.140625,"distances_sum":2081.700123473448}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7685546875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7685546875,"f1":0.857339015151516,"seconds":6.971880793571472e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.140625,"distances_sum":2081.700123473448}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8941142191142198,"seconds":7.102265954017639e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.2890625,"distances_sum":2265.2963227895953}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8686162795537803,"seconds":6.791204214096069e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.1875,"distances_sum":2105.963329169933}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9615384615384623,"seconds":7.420778274536133e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.859375,"distances_sum":2804.589911676957}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8675147768897777,"seconds":6.645917892456055e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.15625,"distances_sum":2108.0757514619613}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9615384615384623,"seconds":7.420778274536133e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.859375,"distances_sum":2804.589911676957}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9615384615384623,"seconds":7.420778274536133e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.859375,"distances_sum":2804.589911676957}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1552734375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1552734375,"f1":null,"seconds":5.323439836502075e-6,"exhaustive_search_seconds":2.0228326320648193e-6,"evaluations":5.40625,"distances_sum":344.9332057915012}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5263671875, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.5263671875,"f1":null,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":2.0228326320648193e-6,"evaluations":6.890625,"distances_sum":1140.0296922307373}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5263671875,"state":{"ssize":4,"bsize":3},"perf":{"precision":null,"recall":0.5263671875,"f1":null,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":2.0228326320648193e-6,"evaluations":6.890625,"distances_sum":1140.0296922307373}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6376953125, conf: {"ssize":2,"bsize":4}, perf: {"precision":0.9783854166666667,"recall":0.6376953125,"f1":0.7598911505161513,"seconds":6.426125764846802e-6,"exhaustive_search_seconds":2.0228326320648193e-6,"evaluations":7.5390625,"distances_sum":1498.3791499499175}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":7,"bsize":5}, perf: {"precision":0.9882068452380951,"recall":0.74609375,"f1":0.8405530667249422,"seconds":6.847083568572998e-6,"exhaustive_search_seconds":2.0228326320648193e-6,"evaluations":8.171875,"distances_sum":1801.2500560383696}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.74609375,"state":{"ssize":7,"bsize":5},"perf":{"precision":0.9882068452380951,"recall":0.74609375,"f1":0.8405530667249422,"seconds":6.847083568572998e-6,"exhaustive_search_seconds":2.0228326320648193e-6,"evaluations":8.171875,"distances_sum":1801.2500560383696}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":8,"bsize":7}, perf: {"precision":0.9876674107142857,"recall":0.8671875,"f1":0.916475191475192,"seconds":7.772818207740784e-6,"exhaustive_search_seconds":2.0228326320648193e-6,"evaluations":8.6171875,"distances_sum":2246.98823681764}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":9,"bsize":7}, perf: {"precision":0.9842819940476191,"recall":0.8623046875,"f1":0.9127177509990014,"seconds":7.599592208862305e-6,"exhaustive_search_seconds":2.0228326320648193e-6,"evaluations":8.71875,"distances_sum":2242.670142093433}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.818359375, conf: {"ssize":2,"bsize":6}, perf: {"precision":0.9893694196428571,"recall":0.818359375,"f1":0.8879202178030308,"seconds":7.2196125984191895e-6,"exhaustive_search_seconds":2.0228326320648193e-6,"evaluations":8.375,"distances_sum":2032.7975280452515}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":2,"bsize":7}, perf: {"precision":0.9904668898809524,"recall":0.8857421875,"f1":0.9296324118589746,"seconds":7.72625207901001e-6,"exhaustive_search_seconds":2.0228326320648193e-6,"evaluations":8.734375,"distances_sum":2294.4459414029398}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":7}, perf: {"precision":0.9890159970238095,"recall":0.8955078125,"f1":0.9356706444597072,"seconds":7.990747690200806e-6,"exhaustive_search_seconds":2.0228326320648193e-6,"evaluations":8.734375,"distances_sum":2354.931867255543}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8955078125,"state":{"ssize":1,"bsize":7},"perf":{"precision":0.9890159970238095,"recall":0.8955078125,"f1":0.9356706444597072,"seconds":7.990747690200806e-6,"exhaustive_search_seconds":2.0228326320648193e-6,"evaluations":8.734375,"distances_sum":2354.931867255543}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8955078125,"state":{"ssize":1,"bsize":7},"perf":{"precision":0.9890159970238095,"recall":0.8955078125,"f1":0.9356706444597072,"seconds":7.990747690200806e-6,"exhaustive_search_seconds":2.0228326320648193e-6,"evaluations":8.734375,"distances_sum":2354.931867255543}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6611328125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6611328125,"f1":0.7854067807192814,"seconds":6.875023245811462e-6,"exhaustive_search_seconds":2.2258609533309937e-6,"evaluations":7.6640625,"distances_sum":1478.4585073225858}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6611328125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6611328125,"f1":0.7854067807192814,"seconds":6.875023245811462e-6,"exhaustive_search_seconds":2.2258609533309937e-6,"evaluations":7.6640625,"distances_sum":1478.4585073225858}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8630197927072935,"seconds":7.096678018569946e-6,"exhaustive_search_seconds":2.2258609533309937e-6,"evaluations":8.0546875,"distances_sum":1844.017127872094}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9152935606060613,"seconds":7.312744855880737e-6,"exhaustive_search_seconds":2.2258609533309937e-6,"evaluations":8.5390625,"distances_sum":2135.406977356691}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9117018398268405,"seconds":7.333233952522278e-6,"exhaustive_search_seconds":2.2258609533309937e-6,"evaluations":8.5078125,"distances_sum":2111.7383548372977}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.85546875,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.85546875,"f1":0.9152935606060613,"seconds":7.312744855880737e-6,"exhaustive_search_seconds":2.2258609533309937e-6,"evaluations":8.5390625,"distances_sum":2135.406977356691}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":11,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9644001831501835,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":2.2258609533309937e-6,"evaluations":8.7890625,"distances_sum":2534.338151559241}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9287030677655683,"seconds":4.727393388748169e-6,"exhaustive_search_seconds":2.2258609533309937e-6,"evaluations":8.5625,"distances_sum":2267.9349912052207}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9631181318681323,"seconds":4.881992936134338e-6,"exhaustive_search_seconds":2.2258609533309937e-6,"evaluations":8.8359375,"distances_sum":2491.309600923523}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9502804487179491,"seconds":3.5874545574188232e-6,"exhaustive_search_seconds":2.2258609533309937e-6,"evaluations":8.78125,"distances_sum":2394.57403297761}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":11,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9644001831501835,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":2.2258609533309937e-6,"evaluations":8.7890625,"distances_sum":2534.338151559241}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":11,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9644001831501835,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":2.2258609533309937e-6,"evaluations":8.7890625,"distances_sum":2534.338151559241}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.201171875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.201171875,"f1":null,"seconds":2.0135194063186646e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":5.65625,"distances_sum":429.93789755779227}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.552734375, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.552734375,"f1":null,"seconds":2.7492642402648926e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.1640625,"distances_sum":1083.551787768431}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.19921875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.19921875,"f1":null,"seconds":2.074986696243286e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":5.6015625,"distances_sum":376.0067231384482}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.552734375,"state":{"ssize":3,"bsize":3},"perf":{"precision":null,"recall":0.552734375,"f1":null,"seconds":2.7492642402648926e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.1640625,"distances_sum":1083.551787768431}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5556640625, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.5556640625,"f1":0.6957320457320464,"seconds":2.7976930141448975e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.1953125,"distances_sum":1131.3489226295956}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.685546875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.685546875,"f1":0.8022248584748592,"seconds":2.905726432800293e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.6953125,"distances_sum":1436.940546598371}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.685546875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.685546875,"f1":0.8022248584748592,"seconds":2.905726432800293e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.6953125,"distances_sum":1436.940546598371}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9451350732600737,"seconds":3.732740879058838e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.640625,"distances_sum":2315.0212775262094}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9492273351648356,"seconds":4.641711711883545e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.6484375,"distances_sum":2307.5340319975335}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9419356684981692,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.65625,"distances_sum":2263.4643628599306}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8665532384282393,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.25,"distances_sum":1755.0587361856303}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":9,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.8036359473859482,"seconds":4.347413778305054e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":7.5078125,"distances_sum":1457.8217806177702}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":9,"bsize":7},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9492273351648356,"seconds":4.641711711883545e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.6484375,"distances_sum":2307.5340319975335}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91015625,"state":{"ssize":9,"bsize":7},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9492273351648356,"seconds":4.641711711883545e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.6484375,"distances_sum":2307.5340319975335}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.408203125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.408203125,"f1":null,"seconds":3.470107913017273e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.4375,"distances_sum":823.0788291590616}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.8013949592074598,"seconds":4.582107067108154e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.1640625,"distances_sum":1518.1317137612348}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.68359375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.68359375,"f1":0.8013949592074598,"seconds":4.582107067108154e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.1640625,"distances_sum":1518.1317137612348}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9146811521811529,"seconds":5.187466740608215e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.6640625,"distances_sum":2076.135680437805}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.933436355311356,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.6796875,"distances_sum":2184.582354015477}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9342891483516489,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.6640625,"distances_sum":2195.403778402505}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.9342891483516489,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.6640625,"distances_sum":2195.403778402505}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9378663003663008,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.7421875,"distances_sum":2228.2467614558796}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9423482767232773,"seconds":5.4854899644851685e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.6953125,"distances_sum":2304.898646365421}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.958250603563104,"seconds":6.156042218208313e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8359375,"distances_sum":2379.3833122508186}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9578411172161178,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8125,"distances_sum":2372.003166844357}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9386961996337001,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.6875,"distances_sum":2284.7776210713528}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.958250603563104,"seconds":6.156042218208313e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8359375,"distances_sum":2379.3833122508186}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.927734375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.958250603563104,"seconds":6.156042218208313e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8359375,"distances_sum":2379.3833122508186}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.866635968198469,"seconds":3.4067779779434204e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.1875,"distances_sum":1922.3281697934392}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.866635968198469,"seconds":3.4067779779434204e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.1875,"distances_sum":1922.3281697934392}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9479827464202468,"seconds":3.591179847717285e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.6953125,"distances_sum":2423.503764591234}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9619448260073263,"seconds":3.5353004932403564e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.828125,"distances_sum":2511.5724817948485}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9619448260073263,"seconds":3.5353004932403564e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.828125,"distances_sum":2511.5724817948485}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.974776785714286,"seconds":3.7942081689834595e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9296875,"distances_sum":2577.3236891092174}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9704670329670333,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.921875,"distances_sum":2542.431366719038}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9745364010989014,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9453125,"distances_sum":2604.709250078009}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9656822344322349,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.90625,"distances_sum":2527.2075318675948}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.974776785714286,"seconds":3.7942081689834595e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9296875,"distances_sum":2577.3236891092174}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.974776785714286,"seconds":3.7942081689834595e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9296875,"distances_sum":2577.3236891092174}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2470703125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2470703125,"f1":null,"seconds":3.3527612686157227e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":7.125,"distances_sum":500.1037248954664}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2470703125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2470703125,"f1":null,"seconds":3.3527612686157227e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":7.125,"distances_sum":500.1037248954664}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.421875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.421875,"f1":null,"seconds":3.3099204301834106e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":6.5234375,"distances_sum":960.2270797215602}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6640625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6640625,"f1":0.7856206293706303,"seconds":2.948567271232605e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.46875,"distances_sum":1577.6807783436916}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.40625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.40625,"f1":null,"seconds":2.896413207054138e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":6.5390625,"distances_sum":857.150173837917}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6640625,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6640625,"f1":0.7856206293706303,"seconds":2.948567271232605e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.46875,"distances_sum":1577.6807783436916}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7392578125,"f1":0.8422707500832509,"seconds":5.068257451057434e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.7734375,"distances_sum":1866.6932915391026}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7392578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7392578125,"f1":0.8422707500832509,"seconds":5.068257451057434e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.7734375,"distances_sum":1866.6932915391026}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.806640625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.806640625,"f1":0.886965118215119,"seconds":3.3937394618988037e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.296875,"distances_sum":2149.7982796621745}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9248371420246426,"seconds":3.591179847717285e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.6171875,"distances_sum":2416.2871139207587}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9268575174825181,"seconds":3.4365803003311157e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.65625,"distances_sum":2445.433914436725}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7998046875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.7998046875,"f1":0.8796009546009553,"seconds":3.6209821701049805e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.265625,"distances_sum":2103.070308766278}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.875,"f1":0.9268575174825181,"seconds":3.4365803003311157e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.65625,"distances_sum":2445.433914436725}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.875,"f1":0.9268575174825181,"seconds":3.4365803003311157e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.65625,"distances_sum":2445.433914436725}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.45703125, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.45703125,"f1":null,"seconds":2.514570951461792e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":7.046875,"distances_sum":972.2654559756411}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5888671875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5888671875,"f1":0.7254337676212681,"seconds":2.7995556592941284e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":7.5546875,"distances_sum":1296.912839114955}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5888671875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5888671875,"f1":0.7254337676212681,"seconds":2.7995556592941284e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":7.5546875,"distances_sum":1296.912839114955}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6015625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.6015625,"f1":0.7351382992007998,"seconds":2.767890691757202e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":7.6484375,"distances_sum":1393.1526324948118}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9202698343323351,"seconds":3.511086106300354e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.515625,"distances_sum":2263.3252229755185}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.69921875,"f1":0.8125900141525149,"seconds":3.069639205932617e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":7.9453125,"distances_sum":1628.7434219696715}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.58984375, conf: {"ssize":8,"bsize":3}, perf: {"precision":null,"recall":0.58984375,"f1":null,"seconds":2.9187649488449097e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":7.546875,"distances_sum":1323.090898758246}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.861328125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.861328125,"f1":0.9202698343323351,"seconds":3.511086106300354e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.515625,"distances_sum":2263.3252229755185}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.952667124542125,"seconds":3.6954879760742188e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.6171875,"distances_sum":2524.0124641926036}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9660771520146522,"seconds":4.319474101066589e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.8359375,"distances_sum":2648.910586992665}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9614239926739929,"seconds":4.6584755182266235e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.78125,"distances_sum":2605.258728866642}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9483318764568773,"seconds":4.256144165992737e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.75,"distances_sum":2498.533274790481}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9473099816849821,"seconds":3.987923264503479e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.75,"distances_sum":2506.6072684608007}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9535428113553119,"seconds":3.825873136520386e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.5546875,"distances_sum":2500.8537693407193}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9333848443223449,"seconds":3.7178397178649902e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.5078125,"distances_sum":2406.3765116157742}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9660771520146522,"seconds":4.319474101066589e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.8359375,"distances_sum":2648.910586992665}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9660771520146522,"seconds":4.319474101066589e-6,"exhaustive_search_seconds":8.735805749893188e-7,"evaluations":8.8359375,"distances_sum":2648.910586992665}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.208984375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.208984375,"f1":null,"seconds":3.915280103683472e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":6.734375,"distances_sum":511.6626043809563}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.728515625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.728515625,"f1":0.8309940059940069,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.875,"distances_sum":1836.6655996892744}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.728515625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.728515625,"f1":0.8309940059940069,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.875,"distances_sum":1836.6655996892744}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9196517024642034,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.3046875,"distances_sum":2366.631645386039}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.861328125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.861328125,"f1":0.9196517024642034,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.3046875,"distances_sum":2366.631645386039}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.861328125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.861328125,"f1":0.9196517024642034,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.3046875,"distances_sum":2366.631645386039}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.861328125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.861328125,"f1":0.9196517024642034,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.3046875,"distances_sum":2366.631645386039}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.208984375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.208984375,"f1":null,"seconds":3.1478703022003174e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":5.25,"distances_sum":582.0795611044946}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3935546875, conf: {"ssize":5,"bsize":2}, perf: {"precision":1.0,"recall":0.3935546875,"f1":0.5417353479853477,"seconds":3.771856427192688e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":5.8359375,"distances_sum":1037.0986273035694}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.205078125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.205078125,"f1":null,"seconds":3.606081008911133e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":5.265625,"distances_sum":547.8507694317167}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3935546875,"state":{"ssize":5,"bsize":2},"perf":{"precision":1.0,"recall":0.3935546875,"f1":0.5417353479853477,"seconds":3.771856427192688e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":5.8359375,"distances_sum":1037.0986273035694}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.8038872585747594,"seconds":5.077570676803589e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.515625,"distances_sum":1728.8127839477436}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8960258491508498,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.6171875,"distances_sum":2222.979426256442}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.9000379828504835,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.5625,"distances_sum":2246.6345378300716}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7197265625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7197265625,"f1":0.8268928987678996,"seconds":5.204230546951294e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.84375,"distances_sum":1854.1619037495789}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7951168623043632,"seconds":4.937872290611267e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.4921875,"distances_sum":1671.8122288075447}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.556640625,"f1":0.6953520437895443,"seconds":4.338100552558899e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":6.8828125,"distances_sum":1350.076702395031}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55078125, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.55078125,"f1":null,"seconds":4.580244421958923e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":6.9609375,"distances_sum":1360.135425800639}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.828125,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.828125,"f1":0.9000379828504835,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.5625,"distances_sum":2246.6345378300716}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9587282509157512,"seconds":6.3497573137283325e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.7578125,"distances_sum":2713.1748067682497}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9671932234432237,"seconds":6.249174475669861e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.90625,"distances_sum":2743.8594353889694}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9616071428571433,"seconds":6.1746686697006226e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8125,"distances_sum":2722.326586770603}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9671932234432237,"seconds":6.249174475669861e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.90625,"distances_sum":2743.8594353889694}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9671932234432237,"seconds":6.249174475669861e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.90625,"distances_sum":2743.8594353889694}}, n: 9
mean(cfft.distances) = 0.32185535867254633
mean(cdnet.distances) = 0.7122010388400177
mean(crand.distances) = 0.42018547150964336
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8844444444444445
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8444444444444444
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8577777777777778
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9133333333333332
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8977777777777778
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8933333333333332
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.86
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9333333333333332
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8888888888888888
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9266666666666667
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9222222222222222
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9022222222222221
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8755555555555555
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8711111111111111
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9199999999999999
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9266666666666666
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9111111111111111
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8822222222222221
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8488888888888888
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9133333333333334
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8911111111111111
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8466666666666667
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9111111111111111
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 6]]
** centroid: 10, normalized-entropy: 0.9709505944546688, [(2, 4), (3, 6)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 1, 2, 3, 3, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 6]]
** centroid: 10, normalized-entropy: 0.9709505944546688, [(2, 4), (3, 6)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 1, 2, 3, 3, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 6]]
** centroid: 10, normalized-entropy: 0.9709505944546688, [(2, 4), (3, 6)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 1, 2, 3, 3, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 6]]
** centroid: 10, normalized-entropy: 0.9709505944546688, [(2, 4), (3, 6)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 1, 2, 3, 3, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 6]]
** centroid: 10, normalized-entropy: 0.9709505944546688, [(2, 4), (3, 6)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 1, 2, 3, 3, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 6]]
** centroid: 10, normalized-entropy: 0.9709505944546688, [(2, 4), (3, 6)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 1, 2, 3, 3, 2]
acc = 0.94
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 9: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 6]]
** centroid: 10, normalized-entropy: 0.9709505944546688, [(2, 4), (3, 6)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 1, 2, 3, 2, 3, 3, 1, 2, 3, 3, 2]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5388816325863203] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 4, 12]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 4), (3, 12)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 19, 1]]
** centroid: 7, normalized-entropy: 0.2863969571159561, [(2, 19), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 12, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
finished with 14 centroids; started with 12
acc = 0.96
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.20434742839377676] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20434742839377676, 0.1714943710283877] ***
*** starting iteration: 2; err: [Inf, 0.20434742839377676, 0.1714943710283877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20434742839377676, 0.1714943710283877, 0.16269799483822542] ***
*** starting iteration: 3; err: [Inf, 0.20434742839377676, 0.1714943710283877, 0.16269799483822542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20434742839377676, 0.1714943710283877, 0.16269799483822542, 0.15657519414222468] ***
*** starting iteration: 4; err: [Inf, 0.20434742839377676, 0.1714943710283877, 0.16269799483822542, 0.15657519414222468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20434742839377676, 0.1714943710283877, 0.16269799483822542, 0.15657519414222468, 0.15288455309919655] ***
*** starting iteration: 5; err: [Inf, 0.20434742839377676, 0.1714943710283877, 0.16269799483822542, 0.15657519414222468, 0.15288455309919655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20434742839377676, 0.1714943710283877, 0.16269799483822542, 0.15657519414222468, 0.15288455309919655, 0.15047764174175915] ***
*** starting iteration: 6; err: [Inf, 0.20434742839377676, 0.1714943710283877, 0.16269799483822542, 0.15657519414222468, 0.15288455309919655, 0.15047764174175915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20434742839377676, 0.1714943710283877, 0.16269799483822542, 0.15657519414222468, 0.15288455309919655, 0.15047764174175915, 0.1493509732488845] ***
*** starting iteration: 7; err: [Inf, 0.20434742839377676, 0.1714943710283877, 0.16269799483822542, 0.15657519414222468, 0.15288455309919655, 0.15047764174175915, 0.1493509732488845] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20434742839377676, 0.1714943710283877, 0.16269799483822542, 0.15657519414222468, 0.15288455309919655, 0.15047764174175915, 0.1493509732488845, 0.14910698932240363] ***
*** finished computation of 7 references, err: [Inf, 0.20434742839377676, 0.1714943710283877, 0.16269799483822542, 0.15657519414222468, 0.15288455309919655, 0.15047764174175915, 0.1493509732488845, 0.14910698932240363] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [79, 14, 0]]
** centroid: 1, normalized-entropy: 0.6111841012714984, [(1, 79), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 55, 0]]
** centroid: 2, normalized-entropy: 0.9989725613141186, [(1, 51), (2, 55)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 83, 21]]
** centroid: 3, normalized-entropy: 0.7257576154473545, [(2, 83), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [4, 82, 0]]
** centroid: 4, normalized-entropy: 0.2713895875081112, [(1, 4), (2, 82)]
*** center 5: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [100, 3, 0]]
** centroid: 6, normalized-entropy: 0.18999075553626757, [(1, 100), (2, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24157969816203886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24157969816203886, 0.17396113274666458] ***
*** starting iteration: 2; err: [Inf, 0.24157969816203886, 0.17396113274666458] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24157969816203886, 0.17396113274666458, 0.15785192988392815] ***
*** starting iteration: 3; err: [Inf, 0.24157969816203886, 0.17396113274666458, 0.15785192988392815] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24157969816203886, 0.17396113274666458, 0.15785192988392815, 0.15270052811708942] ***
*** starting iteration: 4; err: [Inf, 0.24157969816203886, 0.17396113274666458, 0.15785192988392815, 0.15270052811708942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24157969816203886, 0.17396113274666458, 0.15785192988392815, 0.15270052811708942, 0.15142841908851754] ***
*** starting iteration: 5; err: [Inf, 0.24157969816203886, 0.17396113274666458, 0.15785192988392815, 0.15270052811708942, 0.15142841908851754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24157969816203886, 0.17396113274666458, 0.15785192988392815, 0.15270052811708942, 0.15142841908851754, 0.1511890006138534] ***
*** finished computation of 7 references, err: [Inf, 0.24157969816203886, 0.17396113274666458, 0.15785192988392815, 0.15270052811708942, 0.15142841908851754, 0.1511890006138534] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 114, 20]]
** centroid: 1, normalized-entropy: 0.6079696120060726, [(2, 114), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 39, 0]]
** centroid: 3, normalized-entropy: 0.9721439323621084, [(1, 58), (2, 39)]
*** center 4: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 54, 0]]
** centroid: 5, normalized-entropy: 0.9907034651869471, [(1, 43), (2, 54)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [89, 28, 0]]
** centroid: 6, normalized-entropy: 0.7939013591250944, [(1, 89), (2, 28)]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1852757535236741] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1852757535236741, 0.1570257377047008] ***
*** starting iteration: 2; err: [Inf, 0.1852757535236741, 0.1570257377047008] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1852757535236741, 0.1570257377047008, 0.15238247558089166] ***
*** starting iteration: 3; err: [Inf, 0.1852757535236741, 0.1570257377047008, 0.15238247558089166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1852757535236741, 0.1570257377047008, 0.15238247558089166, 0.1508886410576896] ***
*** starting iteration: 4; err: [Inf, 0.1852757535236741, 0.1570257377047008, 0.15238247558089166, 0.1508886410576896] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1852757535236741, 0.1570257377047008, 0.15238247558089166, 0.1508886410576896, 0.15026905430820137] ***
*** finished computation of 7 references, err: [Inf, 0.1852757535236741, 0.1570257377047008, 0.15238247558089166, 0.1508886410576896, 0.15026905430820137] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [29, 63, 0]]
** centroid: 1, normalized-entropy: 0.8991045208483789, [(1, 29), (2, 63)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [8, 90, 0]]
** centroid: 2, normalized-entropy: 0.4079059801389762, [(1, 8), (2, 90)]
*** center 3: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 78, 21]]
** centroid: 4, normalized-entropy: 0.7455178428108284, [(2, 78), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [82, 3, 0]]
** centroid: 5, normalized-entropy: 0.22028326695127437, [(1, 82), (2, 3)]
*** center 6: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [92, 2, 0]]
** centroid: 7, normalized-entropy: 0.14854949043034832, [(1, 92), (2, 2)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2465388682578598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2465388682578598, 0.17606390775223305] ***
*** starting iteration: 2; err: [Inf, 0.2465388682578598, 0.17606390775223305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2465388682578598, 0.17606390775223305, 0.1615446452310102] ***
*** starting iteration: 3; err: [Inf, 0.2465388682578598, 0.17606390775223305, 0.1615446452310102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2465388682578598, 0.17606390775223305, 0.1615446452310102, 0.15399578041690695] ***
*** finished computation of 7 references, err: [Inf, 0.2465388682578598, 0.17606390775223305, 0.1615446452310102, 0.15399578041690695] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [88, 3, 0]]
** centroid: 1, normalized-entropy: 0.20905980566852464, [(1, 88), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [79, 44, 0]]
** centroid: 2, normalized-entropy: 0.9407773482170269, [(1, 79), (2, 44)]
*** center 3: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 101, 21]]
** centroid: 5, normalized-entropy: 0.6625567995605484, [(2, 101), (3, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 89, 0]]
** centroid: 7, normalized-entropy: 0.20731018585948177, [(1, 3), (2, 89)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.215941417905065] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.215941417905065, 0.16388454149872334] ***
*** starting iteration: 2; err: [Inf, 0.215941417905065, 0.16388454149872334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.215941417905065, 0.16388454149872334, 0.150518877234874] ***
*** starting iteration: 3; err: [Inf, 0.215941417905065, 0.16388454149872334, 0.150518877234874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.215941417905065, 0.16388454149872334, 0.150518877234874, 0.14858802566667836] ***
*** finished computation of 7 references, err: [Inf, 0.215941417905065, 0.16388454149872334, 0.150518877234874, 0.14858802566667836] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [41, 43, 0]]
** centroid: 1, normalized-entropy: 0.9995910341890979, [(1, 41), (2, 43)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 127, 20]]
** centroid: 2, normalized-entropy: 0.5738116841709745, [(2, 127), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [69, 36, 0]]
** centroid: 6, normalized-entropy: 0.927526588431676, [(1, 69), (2, 36)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [70, 29, 0]]
** centroid: 7, normalized-entropy: 0.8724752054851931, [(1, 70), (2, 29)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24211024268945006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24211024268945006, 0.18504230357284868] ***
*** starting iteration: 2; err: [Inf, 0.24211024268945006, 0.18504230357284868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24211024268945006, 0.18504230357284868, 0.17073956224857934] ***
*** starting iteration: 3; err: [Inf, 0.24211024268945006, 0.18504230357284868, 0.17073956224857934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24211024268945006, 0.18504230357284868, 0.17073956224857934, 0.16307701237466202] ***
*** finished computation of 7 references, err: [Inf, 0.24211024268945006, 0.18504230357284868, 0.17073956224857934, 0.16307701237466202] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 108, 17]]
** centroid: 1, normalized-entropy: 0.5736665363828041, [(2, 108), (3, 17)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [9, 99, 4]]
** centroid: 2, normalized-entropy: 0.3920108567120615, [(1, 9), (2, 99), (3, 4)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [109, 19, 0]]
** centroid: 3, normalized-entropy: 0.6059162956553665, [(1, 109), (2, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [32, 10, 0]]
** centroid: 4, normalized-entropy: 0.7918583525674836, [(1, 32), (2, 10)]
*** center 5: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [145, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3054991072503844] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3054991072503844, 0.2747987457320329] ***
*** starting iteration: 2; err: [Inf, 0.3054991072503844, 0.2747987457320329] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3054991072503844, 0.2747987457320329, 0.27260806319351355] ***
*** starting iteration: 3; err: [Inf, 0.3054991072503844, 0.2747987457320329, 0.27260806319351355] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3054991072503844, 0.2747987457320329, 0.27260806319351355, 0.27114475329403764] ***
*** finished computation of 3 references, err: [Inf, 0.3054991072503844, 0.2747987457320329, 0.27260806319351355, 0.27114475329403764] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [165, 111, 0]]
** centroid: 1, normalized-entropy: 0.9722080563599758, [(1, 165), (2, 111)]
*** center 2: selecting labels [1] (freq >= 1) [from [243, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 126, 21]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(2, 126), (3, 21)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3444093457420358] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3444093457420358, 0.28059258853466523] ***
*** starting iteration: 2; err: [Inf, 0.3444093457420358, 0.28059258853466523] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3444093457420358, 0.28059258853466523, 0.250234586606989] ***
*** starting iteration: 3; err: [Inf, 0.3444093457420358, 0.28059258853466523, 0.250234586606989] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3444093457420358, 0.28059258853466523, 0.250234586606989, 0.23677892849195575] ***
*** finished computation of 3 references, err: [Inf, 0.3444093457420358, 0.28059258853466523, 0.250234586606989, 0.23677892849195575] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [270, 4, 0]]
** centroid: 1, normalized-entropy: 0.10992912236299265, [(1, 270), (2, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [2, 199, 20]]
** centroid: 2, normalized-entropy: 0.3226009613418372, [(1, 2), (2, 199), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [140, 32, 0]]
** centroid: 3, normalized-entropy: 0.6931274153282881, [(1, 140), (2, 32)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30860213021366584] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30860213021366584, 0.25380222668321145] ***
*** starting iteration: 2; err: [Inf, 0.30860213021366584, 0.25380222668321145] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30860213021366584, 0.25380222668321145, 0.24209597014795536] ***
*** starting iteration: 3; err: [Inf, 0.30860213021366584, 0.25380222668321145, 0.24209597014795536] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30860213021366584, 0.25380222668321145, 0.24209597014795536, 0.23846967359659202] ***
*** finished computation of 3 references, err: [Inf, 0.30860213021366584, 0.25380222668321145, 0.24209597014795536, 0.23846967359659202] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [120, 76, 0]]
** centroid: 1, normalized-entropy: 0.9633355456726842, [(1, 120), (2, 76)]
*** center 2: selecting labels [1] (freq >= 1) [from [235, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [55, 160, 21]]
** centroid: 3, normalized-entropy: 0.744769302857248, [(1, 55), (2, 160), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.1910383194452851] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1910383194452851, 0.15325789613049343] ***
*** starting iteration: 2; err: [Inf, 0.1910383194452851, 0.15325789613049343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1910383194452851, 0.15325789613049343, 0.14922721896043703] ***
*** starting iteration: 3; err: [Inf, 0.1910383194452851, 0.15325789613049343, 0.14922721896043703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1910383194452851, 0.15325789613049343, 0.14922721896043703, 0.1483219742814118] ***
*** finished computation of 7 references, err: [Inf, 0.1910383194452851, 0.15325789613049343, 0.14922721896043703, 0.1483219742814118] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [66, 6, 0]]
** centroid: 1, normalized-entropy: 0.4138168503036336, [(1, 66), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 47, 0]]
** centroid: 2, normalized-entropy: 0.9812872088817248, [(1, 65), (2, 47)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 88, 21]]
** centroid: 3, normalized-entropy: 0.70700406497476, [(2, 88), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [94, 13, 0]]
** centroid: 5, normalized-entropy: 0.5336439173027161, [(1, 94), (2, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 83, 0]]
** centroid: 7, normalized-entropy: 0.4294619720471057, [(1, 8), (2, 83)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19286660277431292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19286660277431292, 0.15737109346318057] ***
*** starting iteration: 2; err: [Inf, 0.19286660277431292, 0.15737109346318057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19286660277431292, 0.15737109346318057, 0.1481126971677926] ***
*** starting iteration: 3; err: [Inf, 0.19286660277431292, 0.15737109346318057, 0.1481126971677926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19286660277431292, 0.15737109346318057, 0.1481126971677926, 0.14605487368699313] ***
*** finished computation of 7 references, err: [Inf, 0.19286660277431292, 0.15737109346318057, 0.1481126971677926, 0.14605487368699313] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [104, 21, 0]]
** centroid: 1, normalized-entropy: 0.6531091121418665, [(1, 104), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 24, 0]]
** centroid: 2, normalized-entropy: 0.8858834790484443, [(1, 55), (2, 24)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 79, 4]]
** centroid: 3, normalized-entropy: 0.27866980356389914, [(2, 79), (3, 4)]
*** center 4: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 34, 0]]
** centroid: 5, normalized-entropy: 0.9624127354629922, [(1, 54), (2, 34)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 77, 16]]
** centroid: 7, normalized-entropy: 0.6623570516079519, [(2, 77), (3, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26135430991442976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26135430991442976, 0.1751872442316786] ***
*** starting iteration: 2; err: [Inf, 0.26135430991442976, 0.1751872442316786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26135430991442976, 0.1751872442316786, 0.1589306684432906] ***
*** starting iteration: 3; err: [Inf, 0.26135430991442976, 0.1751872442316786, 0.1589306684432906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26135430991442976, 0.1751872442316786, 0.1589306684432906, 0.15219985417856918] ***
*** finished computation of 7 references, err: [Inf, 0.26135430991442976, 0.1751872442316786, 0.1589306684432906, 0.15219985417856918] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [7, 86, 0]]
** centroid: 1, normalized-entropy: 0.3852851190780996, [(1, 7), (2, 86)]
*** center 2: selecting labels [1] (freq >= 2) [from [161, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [32, 17, 0]]
** centroid: 3, normalized-entropy: 0.9313043685793762, [(1, 32), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [119, 3, 0]]
** centroid: 4, normalized-entropy: 0.16648978563002756, [(1, 119), (2, 3)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 46, 21]]
** centroid: 5, normalized-entropy: 0.8970964164730478, [(2, 46), (3, 21)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 83, 0]]
** centroid: 6, normalized-entropy: 0.16082302082246946, [(1, 2), (2, 83)]
*** center 7: selecting labels [1] (freq >= 2) [from [89, 1, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3530238465050812] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3530238465050812, 0.3099850744579558] ***
*** starting iteration: 2; err: [Inf, 0.3530238465050812, 0.3099850744579558] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3530238465050812, 0.3099850744579558, 0.30109532482015927] ***
*** starting iteration: 3; err: [Inf, 0.3530238465050812, 0.3099850744579558, 0.30109532482015927] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3530238465050812, 0.3099850744579558, 0.30109532482015927, 0.29978588615004365] ***
*** starting iteration: 4; err: [Inf, 0.3530238465050812, 0.3099850744579558, 0.30109532482015927, 0.29978588615004365] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3530238465050812, 0.3099850744579558, 0.30109532482015927, 0.29978588615004365, 0.29983326091428286] ***
*** finished computation of 3 references, err: [Inf, 0.3530238465050812, 0.3099850744579558, 0.30109532482015927, 0.29978588615004365, 0.29983326091428286] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [1, 203, 21]]
** centroid: 1, normalized-entropy: 0.3078906659219739, [(1, 1), (2, 203), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [250, 6, 0]]
** centroid: 2, normalized-entropy: 0.16032872589902855, [(1, 250), (2, 6)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [157, 28, 0]]
** centroid: 3, normalized-entropy: 0.6132117556860507, [(1, 157), (2, 28)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3781441262765401] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3781441262765401, 0.327841655710067] ***
*** starting iteration: 2; err: [Inf, 0.3781441262765401, 0.327841655710067] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3781441262765401, 0.327841655710067, 0.32225054636705147] ***
*** starting iteration: 3; err: [Inf, 0.3781441262765401, 0.327841655710067, 0.32225054636705147] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3781441262765401, 0.327841655710067, 0.32225054636705147, 0.3196305557575797] ***
*** starting iteration: 4; err: [Inf, 0.3781441262765401, 0.327841655710067, 0.32225054636705147, 0.3196305557575797] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3781441262765401, 0.327841655710067, 0.32225054636705147, 0.3196305557575797, 0.31701310070837546] ***
*** starting iteration: 5; err: [Inf, 0.3781441262765401, 0.327841655710067, 0.32225054636705147, 0.3196305557575797, 0.31701310070837546] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3781441262765401, 0.327841655710067, 0.32225054636705147, 0.3196305557575797, 0.31701310070837546, 0.3145396797603619] ***
*** starting iteration: 6; err: [Inf, 0.3781441262765401, 0.327841655710067, 0.32225054636705147, 0.3196305557575797, 0.31701310070837546, 0.3145396797603619] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3781441262765401, 0.327841655710067, 0.32225054636705147, 0.3196305557575797, 0.31701310070837546, 0.3145396797603619, 0.30977602428414563] ***
*** starting iteration: 7; err: [Inf, 0.3781441262765401, 0.327841655710067, 0.32225054636705147, 0.3196305557575797, 0.31701310070837546, 0.3145396797603619, 0.30977602428414563] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3781441262765401, 0.327841655710067, 0.32225054636705147, 0.3196305557575797, 0.31701310070837546, 0.3145396797603619, 0.30977602428414563, 0.2929770339998058] ***
*** starting iteration: 8; err: [Inf, 0.3781441262765401, 0.327841655710067, 0.32225054636705147, 0.3196305557575797, 0.31701310070837546, 0.3145396797603619, 0.30977602428414563, 0.2929770339998058] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3781441262765401, 0.327841655710067, 0.32225054636705147, 0.3196305557575797, 0.31701310070837546, 0.3145396797603619, 0.30977602428414563, 0.2929770339998058, 0.29275707611632623] ***
*** finished computation of 3 references, err: [Inf, 0.3781441262765401, 0.327841655710067, 0.32225054636705147, 0.3196305557575797, 0.31701310070837546, 0.3145396797603619, 0.30977602428414563, 0.2929770339998058, 0.29275707611632623] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [61, 161, 20]]
** centroid: 1, normalized-entropy: 0.7505293883205986, [(1, 61), (2, 161), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [237, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [114, 74, 0]]
** centroid: 3, normalized-entropy: 0.9670941140642181, [(1, 114), (2, 74)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38792577369600767] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38792577369600767, 0.3021100569974402] ***
*** starting iteration: 2; err: [Inf, 0.38792577369600767, 0.3021100569974402] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38792577369600767, 0.3021100569974402, 0.29813636079531114] ***
*** starting iteration: 3; err: [Inf, 0.38792577369600767, 0.3021100569974402, 0.29813636079531114] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38792577369600767, 0.3021100569974402, 0.29813636079531114, 0.29728014517653695] ***
*** finished computation of 3 references, err: [Inf, 0.38792577369600767, 0.3021100569974402, 0.29813636079531114, 0.29728014517653695] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [2, 174, 21]]
** centroid: 1, normalized-entropy: 0.35944860494924313, [(1, 2), (2, 174), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [134, 57, 0]]
** centroid: 2, normalized-entropy: 0.8793624284088807, [(1, 134), (2, 57)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [274, 5, 0]]
** centroid: 3, normalized-entropy: 0.12960363725706872, [(1, 274), (2, 5)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39846973852520146] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39846973852520146, 0.32909074931212506] ***
*** starting iteration: 2; err: [Inf, 0.39846973852520146, 0.32909074931212506] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39846973852520146, 0.32909074931212506, 0.32378226099395985] ***
*** starting iteration: 3; err: [Inf, 0.39846973852520146, 0.32909074931212506, 0.32378226099395985] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39846973852520146, 0.32909074931212506, 0.32378226099395985, 0.3234535776492622] ***
*** finished computation of 3 references, err: [Inf, 0.39846973852520146, 0.32909074931212506, 0.32378226099395985, 0.3234535776492622] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [73, 117, 0]]
** centroid: 1, normalized-entropy: 0.9609615820704237, [(1, 73), (2, 117)]
*** center 2: selecting labels [1] (freq >= 2) [from [257, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [78, 120, 21]]
** centroid: 3, normalized-entropy: 0.8393712424809924, [(1, 78), (2, 120), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.42279203994844716] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42279203994844716, 0.3110010247688735] ***
*** starting iteration: 2; err: [Inf, 0.42279203994844716, 0.3110010247688735] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42279203994844716, 0.3110010247688735, 0.30041012417307233] ***
*** starting iteration: 3; err: [Inf, 0.42279203994844716, 0.3110010247688735, 0.30041012417307233] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42279203994844716, 0.3110010247688735, 0.30041012417307233, 0.2971290162844078] ***
*** finished computation of 3 references, err: [Inf, 0.42279203994844716, 0.3110010247688735, 0.30041012417307233, 0.2971290162844078] ***
*** center 1: selecting labels [1] (freq >= 2) [from [242, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [163, 54, 0]]
** centroid: 2, normalized-entropy: 0.8094470192809174, [(1, 163), (2, 54)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [7, 181, 20]]
** centroid: 3, normalized-entropy: 0.4189898614329259, [(1, 7), (2, 181), (3, 20)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36037647351901836] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36037647351901836, 0.3513510178333369] ***
*** starting iteration: 2; err: [Inf, 0.36037647351901836, 0.3513510178333369] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36037647351901836, 0.3513510178333369, 0.3482958881695499] ***
*** starting iteration: 3; err: [Inf, 0.36037647351901836, 0.3513510178333369, 0.3482958881695499] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36037647351901836, 0.3513510178333369, 0.3482958881695499, 0.34450742404913526] ***
*** finished computation of 3 references, err: [Inf, 0.36037647351901836, 0.3513510178333369, 0.3482958881695499, 0.34450742404913526] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [230, 4, 0]]
** centroid: 1, normalized-entropy: 0.1247975754927792, [(1, 230), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [102, 129, 0]]
** centroid: 2, normalized-entropy: 0.9901226308935799, [(1, 102), (2, 129)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [78, 103, 21]]
** centroid: 3, normalized-entropy: 0.8612788528851133, [(1, 78), (2, 103), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.47225674519779626] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47225674519779626, 0.32455501539280285] ***
*** finished computation of 3 references, err: [Inf, 0.47225674519779626, 0.32455501539280285] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [100, 99, 2]]
** centroid: 1, normalized-entropy: 0.6754070541437278, [(1, 100), (2, 99), (3, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [260, 25, 0]]
** centroid: 2, normalized-entropy: 0.4288109647301171, [(1, 260), (2, 25)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [48, 113, 19]]
** centroid: 3, normalized-entropy: 0.8029089776647625, [(1, 48), (2, 113), (3, 19)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3393718527750052] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3393718527750052, 0.30234233007977146] ***
*** finished computation of 3 references, err: [Inf, 0.3393718527750052, 0.30234233007977146] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [133, 66, 0]]
** centroid: 1, normalized-entropy: 0.9166116768284924, [(1, 133), (2, 66)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [279, 12, 0]]
** centroid: 2, normalized-entropy: 0.24793583772272637, [(1, 279), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 157, 20]]
** centroid: 3, normalized-entropy: 0.5088822762201008, [(2, 157), (3, 20)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3754241258824716] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3754241258824716, 0.3288473682115036] ***
*** finished computation of 3 references, err: [Inf, 0.3754241258824716, 0.3288473682115036] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [45, 148, 21]]
** centroid: 1, normalized-entropy: 0.7379601514782266, [(1, 45), (2, 148), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [241, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [124, 87, 0]]
** centroid: 3, normalized-entropy: 0.9777038018502567, [(1, 124), (2, 87)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3102056473537625] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3102056473537625, 0.2524572180814107] ***
*** finished computation of 3 references, err: [Inf, 0.3102056473537625, 0.2524572180814107] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [310, 53, 0]]
** centroid: 1, normalized-entropy: 0.5997531492165132, [(1, 310), (2, 53)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 152, 21]]
** centroid: 2, normalized-entropy: 0.5333354650830889, [(2, 152), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [98, 32, 0]]
** centroid: 3, normalized-entropy: 0.8051250074646822, [(1, 98), (2, 32)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3379214949545631] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3379214949545631, 0.235510116501682] ***
*** finished computation of 3 references, err: [Inf, 0.3379214949545631, 0.235510116501682] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [295, 20, 0]]
** centroid: 1, normalized-entropy: 0.3411538931451763, [(1, 295), (2, 20)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 176, 20]]
** centroid: 2, normalized-entropy: 0.47543164626872053, [(2, 176), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [117, 39, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 117), (2, 39)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3160889526114225] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3160889526114225, 0.24844898690917772] ***
*** finished computation of 3 references, err: [Inf, 0.3160889526114225, 0.24844898690917772] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [315, 36, 0]]
** centroid: 1, normalized-entropy: 0.4770713062193298, [(1, 315), (2, 36)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 144, 21]]
** centroid: 2, normalized-entropy: 0.54991090463341, [(2, 144), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [95, 56, 0]]
** centroid: 3, normalized-entropy: 0.9513308424597421, [(1, 95), (2, 56)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24137492112776227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24137492112776227, 0.19165381123227915] ***
*** finished computation of 7 references, err: [Inf, 0.24137492112776227, 0.19165381123227915] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [113, 5, 0]]
** centroid: 1, normalized-entropy: 0.2530679372656293, [(1, 113), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [71, 4, 0]]
** centroid: 2, normalized-entropy: 0.3003914173647818, [(1, 71), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 46, 21]]
** centroid: 3, normalized-entropy: 0.8970964164730478, [(2, 46), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [109, 20, 0]]
** centroid: 5, normalized-entropy: 0.6223074624121516, [(1, 109), (2, 20)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 80, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 82, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22790057648872508] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22790057648872508, 0.1946874945392208] ***
*** finished computation of 7 references, err: [Inf, 0.22790057648872508, 0.1946874945392208] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 113, 20]]
** centroid: 1, normalized-entropy: 0.6107802952706374, [(2, 113), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [41, 10, 0]]
** centroid: 3, normalized-entropy: 0.7140152804378671, [(1, 41), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [107, 24, 0]]
** centroid: 4, normalized-entropy: 0.6870408064059199, [(1, 107), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [54, 16, 0]]
** centroid: 5, normalized-entropy: 0.775512658133148, [(1, 54), (2, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [21, 72, 0]]
** centroid: 7, normalized-entropy: 0.7706290693639406, [(1, 21), (2, 72)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2559435554295555] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2559435554295555, 0.19216637017492993] ***
*** finished computation of 7 references, err: [Inf, 0.2559435554295555, 0.19216637017492993] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [101, 18, 0]]
** centroid: 1, normalized-entropy: 0.6129857483172468, [(1, 101), (2, 18)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 32, 21]]
** centroid: 2, normalized-entropy: 0.9687003436508602, [(2, 32), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [89, 1, 0]]
** centroid: 3, normalized-entropy: 0.08807225904068142, [(1, 89), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [104, 3, 0]]
** centroid: 4, normalized-entropy: 0.18445186314098744, [(1, 104), (2, 3)]
*** center 5: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 95, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [6, 87, 0]]
** centroid: 7, normalized-entropy: 0.3451173149449528, [(1, 6), (2, 87)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22244379909669942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22244379909669942, 0.19018868793657906] ***
*** starting iteration: 2; err: [Inf, 0.22244379909669942, 0.19018868793657906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22244379909669942, 0.19018868793657906, 0.18847614041090505] ***
*** starting iteration: 3; err: [Inf, 0.22244379909669942, 0.19018868793657906, 0.18847614041090505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22244379909669942, 0.19018868793657906, 0.18847614041090505, 0.1879495488704873] ***
*** finished computation of 7 references, err: [Inf, 0.22244379909669942, 0.19018868793657906, 0.18847614041090505, 0.1879495488704873] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [56, 62, 0]]
** centroid: 1, normalized-entropy: 0.9981341775041118, [(1, 56), (2, 62)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [67, 9, 0]]
** centroid: 2, normalized-entropy: 0.524805134842907, [(1, 67), (2, 9)]
*** center 3: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 65, 21]]
** centroid: 4, normalized-entropy: 0.8019325020834525, [(2, 65), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [93, 19, 0]]
** centroid: 5, normalized-entropy: 0.6568871346605055, [(1, 93), (2, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 82, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2356495064979271] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2356495064979271, 0.1890852314628091] ***
*** starting iteration: 2; err: [Inf, 0.2356495064979271, 0.1890852314628091] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2356495064979271, 0.1890852314628091, 0.18592642403641965] ***
*** starting iteration: 3; err: [Inf, 0.2356495064979271, 0.1890852314628091, 0.18592642403641965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2356495064979271, 0.1890852314628091, 0.18592642403641965, 0.18423019889448916] ***
*** finished computation of 7 references, err: [Inf, 0.2356495064979271, 0.1890852314628091, 0.18592642403641965, 0.18423019889448916] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 100, 20]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 100), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 4, 0]]
** centroid: 3, normalized-entropy: 0.3533593350214213, [(1, 56), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [69, 28, 0]]
** centroid: 4, normalized-entropy: 0.8669837150190186, [(1, 69), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [86, 16, 0]]
** centroid: 5, normalized-entropy: 0.6267511370265896, [(1, 86), (2, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [11, 87, 0]]
** centroid: 7, normalized-entropy: 0.5066503344840895, [(1, 11), (2, 87)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23405133269034673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23405133269034673, 0.18915086284082946] ***
*** starting iteration: 2; err: [Inf, 0.23405133269034673, 0.18915086284082946] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23405133269034673, 0.18915086284082946, 0.18632032101236654] ***
*** starting iteration: 3; err: [Inf, 0.23405133269034673, 0.18915086284082946, 0.18632032101236654] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23405133269034673, 0.18915086284082946, 0.18632032101236654, 0.18648029337364852] ***
*** finished computation of 7 references, err: [Inf, 0.23405133269034673, 0.18915086284082946, 0.18632032101236654, 0.18648029337364852] ***
*** center 1: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 30, 0]]
** centroid: 2, normalized-entropy: 0.954434002924965, [(1, 50), (2, 30)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 87, 21]]
** centroid: 3, normalized-entropy: 0.710676853856123, [(2, 87), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [70, 1, 0]]
** centroid: 4, normalized-entropy: 0.10679203237584184, [(1, 70), (2, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [68, 39, 0]]
** centroid: 6, normalized-entropy: 0.9463439981707659, [(1, 68), (2, 39)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 79, 0]]
** centroid: 7, normalized-entropy: 0.16702680404522793, [(1, 2), (2, 79)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9329928731126337, 0.9239898581215945, 0.9169918421415426, 0.9159848471225717, 0.9139798481115847, 0.9069908231584879, 0.9059748371125617, 0.8989558420696145, 0.8830117542692393, 0.8829757901614189, 0.8490136843430257, 0.7919626213039387]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9329928731126337
finished with 14
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.44509859995038303] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44509859995038303, 0.31859439880343843] ***
*** starting iteration: 2; err: [Inf, 0.44509859995038303, 0.31859439880343843] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44509859995038303, 0.31859439880343843, 0.3026724431730874] ***
*** starting iteration: 3; err: [Inf, 0.44509859995038303, 0.31859439880343843, 0.3026724431730874] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44509859995038303, 0.31859439880343843, 0.3026724431730874, 0.29938241965542955] ***
*** starting iteration: 4; err: [Inf, 0.44509859995038303, 0.31859439880343843, 0.3026724431730874, 0.29938241965542955] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44509859995038303, 0.31859439880343843, 0.3026724431730874, 0.29938241965542955, 0.2989842061571464] ***
*** finished computation of 3 references, err: [Inf, 0.44509859995038303, 0.31859439880343843, 0.3026724431730874, 0.29938241965542955, 0.2989842061571464] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [107, 107, 0]]
** centroid: 1, normalized-entropy: 1.0, [(1, 107), (2, 107)]
*** center 2: selecting labels [1] (freq >= 1) [from [228, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [73, 130, 21]]
** centroid: 3, normalized-entropy: 0.8220221187010406, [(1, 73), (2, 130), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.41970713265977433] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41970713265977433, 0.30391472821840193] ***
*** starting iteration: 2; err: [Inf, 0.41970713265977433, 0.30391472821840193] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41970713265977433, 0.30391472821840193, 0.29518697225115914] ***
*** starting iteration: 3; err: [Inf, 0.41970713265977433, 0.30391472821840193, 0.29518697225115914] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41970713265977433, 0.30391472821840193, 0.29518697225115914, 0.2922588837482426] ***
*** starting iteration: 4; err: [Inf, 0.41970713265977433, 0.30391472821840193, 0.29518697225115914, 0.2922588837482426] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41970713265977433, 0.30391472821840193, 0.29518697225115914, 0.2922588837482426, 0.291847241405716] ***
*** finished computation of 3 references, err: [Inf, 0.41970713265977433, 0.30391472821840193, 0.29518697225115914, 0.2922588837482426, 0.291847241405716] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [135, 38, 0]]
** centroid: 1, normalized-entropy: 0.759533712534306, [(1, 135), (2, 38)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [3, 190, 20]]
** centroid: 2, normalized-entropy: 0.34960953356069907, [(1, 3), (2, 190), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [274, 7, 0]]
** centroid: 3, normalized-entropy: 0.16819046546794553, [(1, 274), (2, 7)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4315619332914142] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4315619332914142, 0.318284945704903] ***
*** starting iteration: 2; err: [Inf, 0.4315619332914142, 0.318284945704903] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4315619332914142, 0.318284945704903, 0.30158513893318856] ***
*** starting iteration: 3; err: [Inf, 0.4315619332914142, 0.318284945704903, 0.30158513893318856] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4315619332914142, 0.318284945704903, 0.30158513893318856, 0.2998353219898264] ***
*** starting iteration: 4; err: [Inf, 0.4315619332914142, 0.318284945704903, 0.30158513893318856, 0.2998353219898264] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4315619332914142, 0.318284945704903, 0.30158513893318856, 0.2998353219898264, 0.30010654985893526] ***
*** finished computation of 3 references, err: [Inf, 0.4315619332914142, 0.318284945704903, 0.30158513893318856, 0.2998353219898264, 0.30010654985893526] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [120, 79, 0]]
** centroid: 1, normalized-entropy: 0.9691595422571497, [(1, 120), (2, 79)]
*** center 2: selecting labels [1] (freq >= 1) [from [210, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [80, 157, 21]]
** centroid: 3, normalized-entropy: 0.7914702227300918, [(1, 80), (2, 157), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34798139210947016] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34798139210947016, 0.25669819304080504] ***
*** starting iteration: 2; err: [Inf, 0.34798139210947016, 0.25669819304080504] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34798139210947016, 0.25669819304080504, 0.24144505603901772] ***
*** starting iteration: 3; err: [Inf, 0.34798139210947016, 0.25669819304080504, 0.24144505603901772] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34798139210947016, 0.25669819304080504, 0.24144505603901772, 0.2379006475920568] ***
*** starting iteration: 4; err: [Inf, 0.34798139210947016, 0.25669819304080504, 0.24144505603901772, 0.2379006475920568] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34798139210947016, 0.25669819304080504, 0.24144505603901772, 0.2379006475920568, 0.2370820122773762] ***
*** finished computation of 3 references, err: [Inf, 0.34798139210947016, 0.25669819304080504, 0.24144505603901772, 0.2379006475920568, 0.2370820122773762] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [3, 177, 21]]
** centroid: 1, normalized-entropy: 0.3738546135465109, [(1, 3), (2, 177), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [244, 9, 0]]
** centroid: 2, normalized-entropy: 0.221613197704883, [(1, 244), (2, 9)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [161, 51, 0]]
** centroid: 3, normalized-entropy: 0.7959803139169748, [(1, 161), (2, 51)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2790726838197777] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2790726838197777, 0.23961382182077623] ***
*** starting iteration: 2; err: [Inf, 0.2790726838197777, 0.23961382182077623] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2790726838197777, 0.23961382182077623, 0.23603962450895621] ***
*** starting iteration: 3; err: [Inf, 0.2790726838197777, 0.23961382182077623, 0.23603962450895621] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2790726838197777, 0.23961382182077623, 0.23603962450895621, 0.2349592562753713] ***
*** starting iteration: 4; err: [Inf, 0.2790726838197777, 0.23961382182077623, 0.23603962450895621, 0.2349592562753713] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2790726838197777, 0.23961382182077623, 0.23603962450895621, 0.2349592562753713, 0.2348030031486966] ***
*** finished computation of 3 references, err: [Inf, 0.2790726838197777, 0.23961382182077623, 0.23603962450895621, 0.2349592562753713, 0.2348030031486966] ***
*** center 1: selecting labels [1] (freq >= 1) [from [268, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [12, 172, 20]]
** centroid: 2, normalized-entropy: 0.489895675378451, [(1, 12), (2, 172), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [132, 63, 0]]
** centroid: 3, normalized-entropy: 0.9076961653608385, [(1, 132), (2, 63)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3116702322877463] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3116702322877463, 0.23911375530773418] ***
*** starting iteration: 2; err: [Inf, 0.3116702322877463, 0.23911375530773418] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3116702322877463, 0.23911375530773418, 0.23900893816656002] ***
*** finished computation of 3 references, err: [Inf, 0.3116702322877463, 0.23911375530773418, 0.23900893816656002] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [244, 6, 0]]
** centroid: 1, normalized-entropy: 0.1633455431834022, [(1, 244), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [164, 37, 0]]
** centroid: 2, normalized-entropy: 0.6889208290613323, [(1, 164), (2, 37)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [2, 193, 21]]
** centroid: 3, normalized-entropy: 0.3372927865850188, [(1, 2), (2, 193), (3, 21)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9329928731126337, 0.9239898581215945, 0.9169918421415426, 0.9159848471225717, 0.9139798481115847, 0.9069908231584879, 0.9059748371125617, 0.8989558420696145, 0.8830117542692393, 0.882987778197359, 0.8829757901614189, 0.8490136843430257, 0.8479947012881145, 0.7919626213039387]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9329928731126337
finished with 15
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.31714946353757706] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31714946353757706, 0.24105225121406643] ***
*** starting iteration: 2; err: [Inf, 0.31714946353757706, 0.24105225121406643] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31714946353757706, 0.24105225121406643, 0.23822670383239025] ***
*** starting iteration: 3; err: [Inf, 0.31714946353757706, 0.24105225121406643, 0.23822670383239025] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31714946353757706, 0.24105225121406643, 0.23822670383239025, 0.23724860051932098] ***
*** finished computation of 3 references, err: [Inf, 0.31714946353757706, 0.24105225121406643, 0.23822670383239025, 0.23724860051932098] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [166, 50, 0]]
** centroid: 1, normalized-entropy: 0.7805849322915901, [(1, 166), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [238, 2, 0]]
** centroid: 2, normalized-entropy: 0.06952964699480782, [(1, 238), (2, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [4, 185, 21]]
** centroid: 3, normalized-entropy: 0.3799018005262424, [(1, 4), (2, 185), (3, 21)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37460454245624336] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37460454245624336, 0.24611519215310151] ***
*** starting iteration: 2; err: [Inf, 0.37460454245624336, 0.24611519215310151] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37460454245624336, 0.24611519215310151, 0.23644660714025173] ***
*** starting iteration: 3; err: [Inf, 0.37460454245624336, 0.24611519215310151, 0.23644660714025173] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37460454245624336, 0.24611519215310151, 0.23644660714025173, 0.23431489373120232] ***
*** finished computation of 3 references, err: [Inf, 0.37460454245624336, 0.24611519215310151, 0.23644660714025173, 0.23431489373120232] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [174, 27, 0]]
** centroid: 1, normalized-entropy: 0.569190343735683, [(1, 174), (2, 27)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 192, 20]]
** centroid: 2, normalized-entropy: 0.4507913883546652, [(2, 192), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [238, 16, 0]]
** centroid: 3, normalized-entropy: 0.3392097746962188, [(1, 238), (2, 16)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3294977780886698] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3294977780886698, 0.26066362373865976] ***
*** starting iteration: 2; err: [Inf, 0.3294977780886698, 0.26066362373865976] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3294977780886698, 0.26066362373865976, 0.2431718379893023] ***
*** starting iteration: 3; err: [Inf, 0.3294977780886698, 0.26066362373865976, 0.2431718379893023] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3294977780886698, 0.26066362373865976, 0.2431718379893023, 0.23783507365719422] ***
*** finished computation of 3 references, err: [Inf, 0.3294977780886698, 0.26066362373865976, 0.2431718379893023, 0.23783507365719422] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [278, 8, 0]]
** centroid: 1, normalized-entropy: 0.18411742692826688, [(1, 278), (2, 8)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 190, 21]]
** centroid: 2, normalized-entropy: 0.46749145666342173, [(2, 190), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [131, 38, 0]]
** centroid: 3, normalized-entropy: 0.7689287930143606, [(1, 131), (2, 38)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9329928731126337, 0.9239898581215945, 0.9169918421415426, 0.9159848471225717, 0.9139798481115847, 0.912004819190448, 0.9069908231584879, 0.9059748371125617, 0.8989558420696145, 0.8830117542692393, 0.882987778197359, 0.8829757901614189, 0.8490136843430257, 0.8479947012881145, 0.7919626213039387]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9329928731126337
finished with 15
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9329928731126337, 0.9239898581215945, 0.9169918421415426, 0.9159848471225717, 0.9139798481115847, 0.912004819190448, 0.9069908231584879, 0.9059748371125617, 0.8989558420696145, 0.8830117542692393, 0.882987778197359, 0.8829757901614189, 0.8490136843430257, 0.8479947012881145, 0.7919626213039387]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9329928731126337
finished with 16
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.6148907145759365] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6148907145759365, 0.3719081314624631] ***
*** finished computation of 3 references, err: [Inf, 0.6148907145759365, 0.3719081314624631] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [51, 25, 0]]
** centroid: 1, normalized-entropy: 0.9138472873262908, [(1, 51), (2, 25)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [174, 212, 21]]
** centroid: 2, normalized-entropy: 0.779138126074292, [(1, 174), (2, 212), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [183, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5163907423654551] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5163907423654551, 0.34695451886489476] ***
*** finished computation of 3 references, err: [Inf, 0.5163907423654551, 0.34695451886489476] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 129, 20]]
** centroid: 1, normalized-entropy: 0.5689210181309736, [(2, 129), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [314, 85, 0]]
** centroid: 2, normalized-entropy: 0.7472395609750386, [(1, 314), (2, 85)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [98, 21, 0]]
** centroid: 3, normalized-entropy: 0.6722948170756378, [(1, 98), (2, 21)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4101660847998988] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4101660847998988, 0.3309293550898557] ***
*** finished computation of 3 references, err: [Inf, 0.4101660847998988, 0.3309293550898557] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [87, 218, 21]]
** centroid: 1, normalized-entropy: 0.7266267893062637, [(1, 87), (2, 218), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [160, 1, 0]]
** centroid: 2, normalized-entropy: 0.05446659748121354, [(1, 160), (2, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [163, 17, 0]]
** centroid: 3, normalized-entropy: 0.45113333276900025, [(1, 163), (2, 17)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 16)
[0.9329928731126337, 0.9239898581215945, 0.9169918421415426, 0.9159848471225717, 0.9139798481115847, 0.912004819190448, 0.9069908231584879, 0.9059748371125617, 0.8989558420696145, 0.8830117542692393, 0.882987778197359, 0.8829757901614189, 0.8490136843430257, 0.8479947012881145, 0.7919626213039387, 0.7610574646502789]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9329928731126337
finished with 17
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.30986493602171317] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30986493602171317, 0.24779353795052916] ***
*** starting iteration: 2; err: [Inf, 0.30986493602171317, 0.24779353795052916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30986493602171317, 0.24779353795052916, 0.23820468940137252] ***
*** starting iteration: 3; err: [Inf, 0.30986493602171317, 0.24779353795052916, 0.23820468940137252] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30986493602171317, 0.24779353795052916, 0.23820468940137252, 0.23601014668530262] ***
*** starting iteration: 4; err: [Inf, 0.30986493602171317, 0.24779353795052916, 0.23820468940137252, 0.23601014668530262] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30986493602171317, 0.24779353795052916, 0.23820468940137252, 0.23601014668530262, 0.23549178413216126] ***
*** finished computation of 3 references, err: [Inf, 0.30986493602171317, 0.24779353795052916, 0.23820468940137252, 0.23601014668530262, 0.23549178413216126] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [75, 156, 21]]
** centroid: 1, normalized-entropy: 0.787039117446681, [(1, 75), (2, 156), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [207, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [126, 81, 0]]
** centroid: 3, normalized-entropy: 0.9656361333706099, [(1, 126), (2, 81)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.28277200461830243] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28277200461830243, 0.23633779279574907] ***
*** starting iteration: 2; err: [Inf, 0.28277200461830243, 0.23633779279574907] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28277200461830243, 0.23633779279574907, 0.23349138065569405] ***
*** starting iteration: 3; err: [Inf, 0.28277200461830243, 0.23633779279574907, 0.23349138065569405] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28277200461830243, 0.23633779279574907, 0.23349138065569405, 0.23304823051923063] ***
*** finished computation of 3 references, err: [Inf, 0.28277200461830243, 0.23633779279574907, 0.23349138065569405, 0.23304823051923063] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [128, 71, 0]]
** centroid: 1, normalized-entropy: 0.9399811758962496, [(1, 128), (2, 71)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [57, 164, 20]]
** centroid: 2, normalized-entropy: 0.7368382727508828, [(1, 57), (2, 164), (3, 20)]
*** center 3: selecting labels [1] (freq >= 1) [from [227, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3755604418349275] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3755604418349275, 0.2400336293580438] ***
*** starting iteration: 2; err: [Inf, 0.3755604418349275, 0.2400336293580438] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3755604418349275, 0.2400336293580438, 0.236985395864948] ***
*** starting iteration: 3; err: [Inf, 0.3755604418349275, 0.2400336293580438, 0.236985395864948] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3755604418349275, 0.2400336293580438, 0.236985395864948, 0.23597959295401108] ***
*** starting iteration: 4; err: [Inf, 0.3755604418349275, 0.2400336293580438, 0.236985395864948, 0.23597959295401108] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3755604418349275, 0.2400336293580438, 0.236985395864948, 0.23597959295401108, 0.23539543674205957] ***
*** finished computation of 3 references, err: [Inf, 0.3755604418349275, 0.2400336293580438, 0.236985395864948, 0.23597959295401108, 0.23539543674205957] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [133, 63, 0]]
** centroid: 1, normalized-entropy: 0.9059282160429994, [(1, 133), (2, 63)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [275, 7, 0]]
** centroid: 2, normalized-entropy: 0.16772287095301597, [(1, 275), (2, 7)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [2, 166, 21]]
** centroid: 3, normalized-entropy: 0.36977359643417745, [(1, 2), (2, 166), (3, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 17)
[0.9329928731126337, 0.9239898581215945, 0.9169918421415426, 0.9159848471225717, 0.9139798481115847, 0.912004819190448, 0.908009806213399, 0.9069908231584879, 0.9059748371125617, 0.8989558420696145, 0.8830117542692393, 0.882987778197359, 0.8829757901614189, 0.8490136843430257, 0.8479947012881145, 0.7919626213039387, 0.7610574646502789]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9329928731126337
finished with 18
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.23879285493736957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23879285493736957, 0.21699787688080793] ***
*** starting iteration: 2; err: [Inf, 0.23879285493736957, 0.21699787688080793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23879285493736957, 0.21699787688080793, 0.21424969815293904] ***
*** starting iteration: 3; err: [Inf, 0.23879285493736957, 0.21699787688080793, 0.21424969815293904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23879285493736957, 0.21699787688080793, 0.21424969815293904, 0.19903538570852597] ***
*** finished computation of 7 references, err: [Inf, 0.23879285493736957, 0.21699787688080793, 0.21424969815293904, 0.19903538570852597] ***
*** center 1: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [72, 18, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 72), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 95, 4]]
** centroid: 3, normalized-entropy: 0.24414164238829597, [(2, 95), (3, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 29, 0]]
** centroid: 4, normalized-entropy: 0.9297432191769048, [(1, 55), (2, 29)]
*** center 5: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 7: selecting labels [1, 2, 3] (freq >= 2) [from [6, 95, 17]]
** centroid: 7, normalized-entropy: 0.5508281617677209, [(1, 6), (2, 95), (3, 17)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20910717554305258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20910717554305258, 0.189447530680734] ***
*** starting iteration: 2; err: [Inf, 0.20910717554305258, 0.189447530680734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20910717554305258, 0.189447530680734, 0.18751606983139643] ***
*** starting iteration: 3; err: [Inf, 0.20910717554305258, 0.189447530680734, 0.18751606983139643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20910717554305258, 0.189447530680734, 0.18751606983139643, 0.18700648681051202] ***
*** finished computation of 7 references, err: [Inf, 0.20910717554305258, 0.189447530680734, 0.18751606983139643, 0.18700648681051202] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [72, 27, 0]]
** centroid: 1, normalized-entropy: 0.8453509366224364, [(1, 72), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 9, 0]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(1, 63), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 83, 20]]
** centroid: 3, normalized-entropy: 0.7101234912653349, [(2, 83), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [89, 12, 0]]
** centroid: 5, normalized-entropy: 0.5259359840917625, [(1, 89), (2, 12)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 104, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2668746688655917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2668746688655917, 0.20355694819621553] ***
*** starting iteration: 2; err: [Inf, 0.2668746688655917, 0.20355694819621553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2668746688655917, 0.20355694819621553, 0.18991482187609846] ***
*** starting iteration: 3; err: [Inf, 0.2668746688655917, 0.20355694819621553, 0.18991482187609846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2668746688655917, 0.20355694819621553, 0.18991482187609846, 0.18670591705644884] ***
*** finished computation of 7 references, err: [Inf, 0.2668746688655917, 0.20355694819621553, 0.18991482187609846, 0.18670591705644884] ***
*** center 1: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [84, 12, 0]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(1, 84), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [26, 72, 0]]
** centroid: 4, normalized-entropy: 0.834648285181383, [(1, 26), (2, 72)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 72, 0]]
** centroid: 5, normalized-entropy: 0.34673146824966367, [(1, 5), (2, 72)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 80, 21]]
** centroid: 6, normalized-entropy: 0.7374895672137457, [(2, 80), (3, 21)]
*** center 7: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 18)
[0.9329988671306038, 0.9329928731126337, 0.9239898581215945, 0.9169918421415426, 0.9159848471225717, 0.9139798481115847, 0.912004819190448, 0.908009806213399, 0.9069908231584879, 0.9059748371125617, 0.8989558420696145, 0.8830117542692393, 0.882987778197359, 0.8829757901614189, 0.8490136843430257, 0.8479947012881145, 0.7919626213039387, 0.7610574646502789]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9329988671306038
finished with 18
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9329988671306038, 0.9329928731126337, 0.9239898581215945, 0.9169918421415426, 0.9159848471225717, 0.9139798481115847, 0.912004819190448, 0.908009806213399, 0.9069908231584879, 0.9059748371125617, 0.8989558420696145, 0.8830117542692393, 0.882987778197359, 0.8829757901614189, 0.8490136843430257, 0.8479947012881145, 0.7919626213039387, 0.7610574646502789]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.6, 2) => 0.9329988671306038
finished with 18
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.25258101383131] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25258101383131, 0.21198907423019409] ***
*** starting iteration: 2; err: [Inf, 0.25258101383131, 0.21198907423019409] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25258101383131, 0.21198907423019409, 0.1953528733244166] ***
*** starting iteration: 3; err: [Inf, 0.25258101383131, 0.21198907423019409, 0.1953528733244166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25258101383131, 0.21198907423019409, 0.1953528733244166, 0.19000470688007773] ***
*** finished computation of 7 references, err: [Inf, 0.25258101383131, 0.21198907423019409, 0.1953528733244166, 0.19000470688007773] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 98, 31]]
** centroid: 1, normalized-entropy: 0.7955555473202811, [(2, 98), (3, 31)]
*** center 2: selecting labels [1] (freq >= 2) [from [160, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [21, 91, 0]]
** centroid: 3, normalized-entropy: 0.6962122601251459, [(1, 21), (2, 91)]
*** center 4: selecting labels [1] (freq >= 2) [from [192, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [118, 14, 0]]
** centroid: 5, normalized-entropy: 0.48791799258948565, [(1, 118), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 145, 0]]
** centroid: 6, normalized-entropy: 0.32122717014200314, [(1, 9), (2, 145)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [115, 6, 0]]
** centroid: 7, normalized-entropy: 0.2846390152669077, [(1, 115), (2, 6)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2983421995416284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2983421995416284, 0.2209921121057123] ***
*** starting iteration: 2; err: [Inf, 0.2983421995416284, 0.2209921121057123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2983421995416284, 0.2209921121057123, 0.20177410145662725] ***
*** starting iteration: 3; err: [Inf, 0.2983421995416284, 0.2209921121057123, 0.20177410145662725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2983421995416284, 0.2209921121057123, 0.20177410145662725, 0.1968448972478509] ***
*** finished computation of 7 references, err: [Inf, 0.2983421995416284, 0.2209921121057123, 0.20177410145662725, 0.1968448972478509] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [19, 55, 0]]
** centroid: 1, normalized-entropy: 0.8218127305034848, [(1, 19), (2, 55)]
*** center 2: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 73, 23]]
** centroid: 3, normalized-entropy: 0.7943466904341503, [(2, 73), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 4, 0]]
** centroid: 5, normalized-entropy: 0.3451173149449528, [(1, 58), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [72, 7, 0]]
** centroid: 6, normalized-entropy: 0.43180499427520785, [(1, 72), (2, 7)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [40, 36, 0]]
** centroid: 7, normalized-entropy: 0.9980008838722993, [(1, 40), (2, 36)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2783879483230412] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2783879483230412, 0.20713573643565178] ***
*** starting iteration: 2; err: [Inf, 0.2783879483230412, 0.20713573643565178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2783879483230412, 0.20713573643565178, 0.19137134251557292] ***
*** starting iteration: 3; err: [Inf, 0.2783879483230412, 0.20713573643565178, 0.19137134251557292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2783879483230412, 0.20713573643565178, 0.19137134251557292, 0.18699113070219756] ***
*** finished computation of 7 references, err: [Inf, 0.2783879483230412, 0.20713573643565178, 0.19137134251557292, 0.18699113070219756] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 70, 14]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 70), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [81, 5, 0]]
** centroid: 2, normalized-entropy: 0.32001486274754665, [(1, 81), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 18, 0]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(1, 60), (2, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 14, 0]]
** centroid: 5, normalized-entropy: 0.7162583911075451, [(1, 57), (2, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 63, 3]]
** centroid: 7, normalized-entropy: 0.2667649878030262, [(2, 63), (3, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.31843940777890384] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31843940777890384, 0.21447130528418348] ***
*** starting iteration: 2; err: [Inf, 0.31843940777890384, 0.21447130528418348] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31843940777890384, 0.21447130528418348, 0.20514202535152434] ***
*** starting iteration: 3; err: [Inf, 0.31843940777890384, 0.21447130528418348, 0.20514202535152434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31843940777890384, 0.21447130528418348, 0.20514202535152434, 0.20299825801327825] ***
*** finished computation of 7 references, err: [Inf, 0.31843940777890384, 0.21447130528418348, 0.20514202535152434, 0.20299825801327825] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [43, 26, 0]]
** centroid: 1, normalized-entropy: 0.9557589912150007, [(1, 43), (2, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [59, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 87, 13]]
** centroid: 3, normalized-entropy: 0.557438185027989, [(2, 87), (3, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [40, 26, 0]]
** centroid: 4, normalized-entropy: 0.9672947789468944, [(1, 40), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 36, 0]]
** centroid: 5, normalized-entropy: 0.9709505944546688, [(1, 24), (2, 36)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [62, 10, 0]]
** centroid: 6, normalized-entropy: 0.581321498763703, [(1, 62), (2, 10)]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25087842541374267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25087842541374267, 0.20740708904340863] ***
*** starting iteration: 2; err: [Inf, 0.25087842541374267, 0.20740708904340863] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25087842541374267, 0.20740708904340863, 0.1979305413365364] ***
*** starting iteration: 3; err: [Inf, 0.25087842541374267, 0.20740708904340863, 0.1979305413365364] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25087842541374267, 0.20740708904340863, 0.1979305413365364, 0.19447170877316966] ***
*** finished computation of 7 references, err: [Inf, 0.25087842541374267, 0.20740708904340863, 0.1979305413365364, 0.19447170877316966] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 79, 12]]
** centroid: 1, normalized-entropy: 0.5625393752025972, [(2, 79), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 8, 0]]
** centroid: 3, normalized-entropy: 0.5983474220910422, [(1, 47), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 17, 0]]
** centroid: 4, normalized-entropy: 0.77753986416076, [(1, 57), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 17, 0]]
** centroid: 5, normalized-entropy: 0.7829924501610913, [(1, 56), (2, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2852104147318751] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2852104147318751, 0.22307987695652992] ***
*** starting iteration: 2; err: [Inf, 0.2852104147318751, 0.22307987695652992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2852104147318751, 0.22307987695652992, 0.20110735819488765] ***
*** starting iteration: 3; err: [Inf, 0.2852104147318751, 0.22307987695652992, 0.20110735819488765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2852104147318751, 0.22307987695652992, 0.20110735819488765, 0.19109536340087652] ***
*** finished computation of 7 references, err: [Inf, 0.2852104147318751, 0.22307987695652992, 0.20110735819488765, 0.19109536340087652] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 25, 0]]
** centroid: 1, normalized-entropy: 0.9004854334784268, [(1, 54), (2, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [92, 2, 0]]
** centroid: 4, normalized-entropy: 0.14854949043034832, [(1, 92), (2, 2)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 93, 13]]
** centroid: 5, normalized-entropy: 0.5369064378756415, [(2, 93), (3, 13)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [26, 9, 0]]
** centroid: 6, normalized-entropy: 0.8224042259549892, [(1, 26), (2, 9)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 59, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.267700700847432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.267700700847432, 0.20160164284519852] ***
*** starting iteration: 2; err: [Inf, 0.267700700847432, 0.20160164284519852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.267700700847432, 0.20160164284519852, 0.19617909497208894] ***
*** starting iteration: 3; err: [Inf, 0.267700700847432, 0.20160164284519852, 0.19617909497208894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.267700700847432, 0.20160164284519852, 0.19617909497208894, 0.19467152233608068] ***
*** finished computation of 7 references, err: [Inf, 0.267700700847432, 0.20160164284519852, 0.19617909497208894, 0.19467152233608068] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [67, 31, 0]]
** centroid: 1, normalized-entropy: 0.9003418708227195, [(1, 67), (2, 31)]
*** center 2: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 67, 17]]
** centroid: 3, normalized-entropy: 0.7266645172796352, [(2, 67), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [56, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 61, 0]]
** centroid: 5, normalized-entropy: 0.6167482598263911, [(1, 11), (2, 61)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [19, 37, 0]]
** centroid: 6, normalized-entropy: 0.9241335419915458, [(1, 19), (2, 37)]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27359647628292444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27359647628292444, 0.21494864714890718] ***
*** starting iteration: 2; err: [Inf, 0.27359647628292444, 0.21494864714890718] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27359647628292444, 0.21494864714890718, 0.20302974578086286] ***
*** starting iteration: 3; err: [Inf, 0.27359647628292444, 0.21494864714890718, 0.20302974578086286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27359647628292444, 0.21494864714890718, 0.20302974578086286, 0.19949246353842318] ***
*** finished computation of 7 references, err: [Inf, 0.27359647628292444, 0.21494864714890718, 0.20302974578086286, 0.19949246353842318] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [46, 4, 0]]
** centroid: 1, normalized-entropy: 0.4021791902022729, [(1, 46), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 41, 0]]
** centroid: 2, normalized-entropy: 0.9290950300256173, [(1, 78), (2, 41)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 75, 14]]
** centroid: 3, normalized-entropy: 0.6278191534832795, [(2, 75), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 50, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [64, 5, 0]]
** centroid: 7, normalized-entropy: 0.3750514064240124, [(1, 64), (2, 5)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23854950564354657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23854950564354657, 0.18983522245287895] ***
*** starting iteration: 2; err: [Inf, 0.23854950564354657, 0.18983522245287895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23854950564354657, 0.18983522245287895, 0.18675433150865137] ***
*** starting iteration: 3; err: [Inf, 0.23854950564354657, 0.18983522245287895, 0.18675433150865137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23854950564354657, 0.18983522245287895, 0.18675433150865137, 0.18607819448038937] ***
*** finished computation of 7 references, err: [Inf, 0.23854950564354657, 0.18983522245287895, 0.18675433150865137, 0.18607819448038937] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 53, 13]]
** centroid: 1, normalized-entropy: 0.7158259310602146, [(2, 53), (3, 13)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 8, 0]]
** centroid: 2, normalized-entropy: 0.5491087450260074, [(1, 55), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 65, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [72, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 61, 0]]
** centroid: 6, normalized-entropy: 0.5535072654547254, [(1, 9), (2, 61)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [76, 2, 0]]
** centroid: 7, normalized-entropy: 0.17203694935311387, [(1, 76), (2, 2)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2794141535721719] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2794141535721719, 0.22728811210952699] ***
*** starting iteration: 2; err: [Inf, 0.2794141535721719, 0.22728811210952699] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2794141535721719, 0.22728811210952699, 0.2140359547920525] ***
*** starting iteration: 3; err: [Inf, 0.2794141535721719, 0.22728811210952699, 0.2140359547920525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2794141535721719, 0.22728811210952699, 0.2140359547920525, 0.20134740605950355] ***
*** finished computation of 7 references, err: [Inf, 0.2794141535721719, 0.22728811210952699, 0.2140359547920525, 0.20134740605950355] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [20, 38, 0]]
** centroid: 1, normalized-entropy: 0.9293636260137188, [(1, 20), (2, 38)]
*** center 2: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [37, 31, 0]]
** centroid: 3, normalized-entropy: 0.9943766625699823, [(1, 37), (2, 31)]
*** center 4: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 8, 0]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(1, 64), (2, 8)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 61, 3]]
** centroid: 6, normalized-entropy: 0.2729708579140699, [(2, 61), (3, 3)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 52, 9]]
** centroid: 7, normalized-entropy: 0.603652249754401, [(2, 52), (3, 9)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23508011243643706] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23508011243643706, 0.20136872027814387] ***
*** starting iteration: 2; err: [Inf, 0.23508011243643706, 0.20136872027814387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23508011243643706, 0.20136872027814387, 0.19819275381788612] ***
*** starting iteration: 3; err: [Inf, 0.23508011243643706, 0.20136872027814387, 0.19819275381788612] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23508011243643706, 0.20136872027814387, 0.19819275381788612, 0.1967548625525087] ***
*** finished computation of 7 references, err: [Inf, 0.23508011243643706, 0.20136872027814387, 0.19819275381788612, 0.1967548625525087] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 78, 16]]
** centroid: 1, normalized-entropy: 0.6581912658132184, [(2, 78), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [31, 42, 0]]
** centroid: 3, normalized-entropy: 0.9835585673909616, [(1, 31), (2, 42)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 2, 0]]
** centroid: 4, normalized-entropy: 0.2006223243127146, [(1, 62), (2, 2)]
*** center 5: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [48, 17, 0]]
** centroid: 6, normalized-entropy: 0.829059069399666, [(1, 48), (2, 17)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [49, 35, 0]]
** centroid: 7, normalized-entropy: 0.9798687566511527, [(1, 49), (2, 35)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29528184612095354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29528184612095354, 0.21669087529182435] ***
*** starting iteration: 2; err: [Inf, 0.29528184612095354, 0.21669087529182435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29528184612095354, 0.21669087529182435, 0.20115543573442846] ***
*** starting iteration: 3; err: [Inf, 0.29528184612095354, 0.21669087529182435, 0.20115543573442846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29528184612095354, 0.21669087529182435, 0.20115543573442846, 0.19484641317185014] ***
*** finished computation of 7 references, err: [Inf, 0.29528184612095354, 0.21669087529182435, 0.20115543573442846, 0.19484641317185014] ***
*** center 1: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 68, 15]]
** centroid: 3, normalized-entropy: 0.6816559115981193, [(2, 68), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [75, 10, 0]]
** centroid: 5, normalized-entropy: 0.5225593745369407, [(1, 75), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [62, 16, 0]]
** centroid: 6, normalized-entropy: 0.7320666900931937, [(1, 62), (2, 16)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 80, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2601761272549629] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601761272549629, 0.20782273587584496] ***
*** starting iteration: 2; err: [Inf, 0.2601761272549629, 0.20782273587584496] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601761272549629, 0.20782273587584496, 0.20051113328523934] ***
*** starting iteration: 3; err: [Inf, 0.2601761272549629, 0.20782273587584496, 0.20051113328523934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2601761272549629, 0.20782273587584496, 0.20051113328523934, 0.19739872033987194] ***
*** finished computation of 7 references, err: [Inf, 0.2601761272549629, 0.20782273587584496, 0.20051113328523934, 0.19739872033987194] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [16, 43, 0]]
** centroid: 1, normalized-entropy: 0.8431619569518377, [(1, 16), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 3, 0]]
** centroid: 2, normalized-entropy: 0.29367630985136944, [(1, 55), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [9, 53, 0]]
** centroid: 3, normalized-entropy: 0.5975977764379984, [(1, 9), (2, 53)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 68, 18]]
** centroid: 4, normalized-entropy: 0.7401470427139037, [(2, 68), (3, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [73, 10, 0]]
** centroid: 6, normalized-entropy: 0.530744566923854, [(1, 73), (2, 10)]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3419137517381459] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3419137517381459, 0.22503774905204774] ***
*** starting iteration: 2; err: [Inf, 0.3419137517381459, 0.22503774905204774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3419137517381459, 0.22503774905204774, 0.19610757672786713] ***
*** starting iteration: 3; err: [Inf, 0.3419137517381459, 0.22503774905204774, 0.19610757672786713] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3419137517381459, 0.22503774905204774, 0.19610757672786713, 0.19221903686225414] ***
*** finished computation of 7 references, err: [Inf, 0.3419137517381459, 0.22503774905204774, 0.19610757672786713, 0.19221903686225414] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 59, 15]]
** centroid: 1, normalized-entropy: 0.7273006785144036, [(2, 59), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [56, 12, 0]]
** centroid: 2, normalized-entropy: 0.6722948170756378, [(1, 56), (2, 12)]
*** center 3: selecting labels [2] (freq >= 2) [from [1, 79, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 29, 0]]
** centroid: 5, normalized-entropy: 0.9335289015212996, [(1, 54), (2, 29)]
*** center 6: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [67, 6, 0]]
** centroid: 7, normalized-entropy: 0.4098553703184051, [(1, 67), (2, 6)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24615761800855399] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24615761800855399, 0.2001881360206753] ***
*** starting iteration: 2; err: [Inf, 0.24615761800855399, 0.2001881360206753] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24615761800855399, 0.2001881360206753, 0.1982658927468583] ***
*** starting iteration: 3; err: [Inf, 0.24615761800855399, 0.2001881360206753, 0.1982658927468583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24615761800855399, 0.2001881360206753, 0.1982658927468583, 0.1978251592842862] ***
*** finished computation of 7 references, err: [Inf, 0.24615761800855399, 0.2001881360206753, 0.1982658927468583, 0.1978251592842862] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [61, 13, 0]]
** centroid: 1, normalized-entropy: 0.6705250693158382, [(1, 61), (2, 13)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 90, 19]]
** centroid: 2, normalized-entropy: 0.6674742199595056, [(2, 90), (3, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [35, 49, 0]]
** centroid: 4, normalized-entropy: 0.9798687566511527, [(1, 35), (2, 49)]
*** center 5: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [53, 6, 0]]
** centroid: 6, normalized-entropy: 0.4743454375622396, [(1, 53), (2, 6)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [55, 17, 0]]
** centroid: 7, normalized-entropy: 0.7885131605379784, [(1, 55), (2, 17)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2684168829889968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2684168829889968, 0.20224743421189487] ***
*** starting iteration: 2; err: [Inf, 0.2684168829889968, 0.20224743421189487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2684168829889968, 0.20224743421189487, 0.19144528038799763] ***
*** starting iteration: 3; err: [Inf, 0.2684168829889968, 0.20224743421189487, 0.19144528038799763] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2684168829889968, 0.20224743421189487, 0.19144528038799763, 0.18585572063177824] ***
*** finished computation of 7 references, err: [Inf, 0.2684168829889968, 0.20224743421189487, 0.19144528038799763, 0.18585572063177824] ***
*** center 1: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [79, 18, 0]]
** centroid: 2, normalized-entropy: 0.6921053253628727, [(1, 79), (2, 18)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 63, 13]]
** centroid: 4, normalized-entropy: 0.6601070987550468, [(2, 63), (3, 13)]
*** center 5: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [29, 36, 0]]
** centroid: 6, normalized-entropy: 0.9916178297881032, [(1, 29), (2, 36)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [41, 6, 0]]
** centroid: 7, normalized-entropy: 0.5509844433017146, [(1, 41), (2, 6)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2818299142308533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2818299142308533, 0.20490105580724777] ***
*** starting iteration: 2; err: [Inf, 0.2818299142308533, 0.20490105580724777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2818299142308533, 0.20490105580724777, 0.19516350075788796] ***
*** starting iteration: 3; err: [Inf, 0.2818299142308533, 0.20490105580724777, 0.19516350075788796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2818299142308533, 0.20490105580724777, 0.19516350075788796, 0.1910134830409661] ***
*** finished computation of 7 references, err: [Inf, 0.2818299142308533, 0.20490105580724777, 0.19516350075788796, 0.1910134830409661] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 74, 3]]
** centroid: 1, normalized-entropy: 0.23750814382859295, [(2, 74), (3, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 13, 0]]
** centroid: 2, normalized-entropy: 0.7607859931846075, [(1, 46), (2, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [70, 7, 0]]
** centroid: 4, normalized-entropy: 0.43949698692151346, [(1, 70), (2, 7)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 10, 0]]
** centroid: 5, normalized-entropy: 0.625262405223423, [(1, 54), (2, 10)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 72, 14]]
** centroid: 6, normalized-entropy: 0.6409441847875289, [(2, 72), (3, 14)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [58, 4, 0]]
** centroid: 7, normalized-entropy: 0.3451173149449528, [(1, 58), (2, 4)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2338427158477716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2338427158477716, 0.19333630098681898] ***
*** starting iteration: 2; err: [Inf, 0.2338427158477716, 0.19333630098681898] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2338427158477716, 0.19333630098681898, 0.18966479668905958] ***
*** starting iteration: 3; err: [Inf, 0.2338427158477716, 0.19333630098681898, 0.18966479668905958] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2338427158477716, 0.19333630098681898, 0.18966479668905958, 0.1895547390282154] ***
*** finished computation of 7 references, err: [Inf, 0.2338427158477716, 0.19333630098681898, 0.18966479668905958, 0.1895547390282154] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [37, 14, 0]]
** centroid: 1, normalized-entropy: 0.8478617451660525, [(1, 37), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [72, 21, 0]]
** centroid: 2, normalized-entropy: 0.7706290693639406, [(1, 72), (2, 21)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 54, 1]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 58, 13]]
** centroid: 4, normalized-entropy: 0.6868088934028034, [(2, 58), (3, 13)]
*** center 5: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [49, 22, 0]]
** centroid: 7, normalized-entropy: 0.893010810044601, [(1, 49), (2, 22)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2942130543133244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2942130543133244, 0.21085912844911217] ***
*** starting iteration: 2; err: [Inf, 0.2942130543133244, 0.21085912844911217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2942130543133244, 0.21085912844911217, 0.19979425801336764] ***
*** starting iteration: 3; err: [Inf, 0.2942130543133244, 0.21085912844911217, 0.19979425801336764] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2942130543133244, 0.21085912844911217, 0.19979425801336764, 0.19507139574363827] ***
*** finished computation of 7 references, err: [Inf, 0.2942130543133244, 0.21085912844911217, 0.19979425801336764, 0.19507139574363827] ***
*** center 1: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [35, 25, 0]]
** centroid: 2, normalized-entropy: 0.9798687566511527, [(1, 35), (2, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 34, 0]]
** centroid: 3, normalized-entropy: 0.9681647320759545, [(1, 52), (2, 34)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 90, 20]]
** centroid: 4, normalized-entropy: 0.6840384356390419, [(2, 90), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 13, 0]]
** centroid: 5, normalized-entropy: 0.8507707040532602, [(1, 34), (2, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [63, 9, 0]]
** centroid: 7, normalized-entropy: 0.5435644431995963, [(1, 63), (2, 9)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.285851592246443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.285851592246443, 0.2105426629446447] ***
*** starting iteration: 2; err: [Inf, 0.285851592246443, 0.2105426629446447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.285851592246443, 0.2105426629446447, 0.20273445257544517] ***
*** starting iteration: 3; err: [Inf, 0.285851592246443, 0.2105426629446447, 0.20273445257544517] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.285851592246443, 0.2105426629446447, 0.20273445257544517, 0.20072060805279762] ***
*** finished computation of 7 references, err: [Inf, 0.285851592246443, 0.2105426629446447, 0.20273445257544517, 0.20072060805279762] ***
*** center 1: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 43, 0]]
** centroid: 2, normalized-entropy: 0.98025955447738, [(1, 60), (2, 43)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [23, 11, 0]]
** centroid: 3, normalized-entropy: 0.9081783472997053, [(1, 23), (2, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 67, 12]]
** centroid: 5, normalized-entropy: 0.6145715612236268, [(2, 67), (3, 12)]
*** center 6: selecting labels [1] (freq >= 2) [from [77, 1, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 64, 0]]
** centroid: 7, normalized-entropy: 0.4220005168831531, [(1, 6), (2, 64)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2665472077690065] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2665472077690065, 0.21390393791161477] ***
*** starting iteration: 2; err: [Inf, 0.2665472077690065, 0.21390393791161477] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2665472077690065, 0.21390393791161477, 0.20598866141866892] ***
*** starting iteration: 3; err: [Inf, 0.2665472077690065, 0.21390393791161477, 0.20598866141866892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2665472077690065, 0.21390393791161477, 0.20598866141866892, 0.20083021314442157] ***
*** finished computation of 7 references, err: [Inf, 0.2665472077690065, 0.21390393791161477, 0.20598866141866892, 0.20083021314442157] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 86, 16]]
** centroid: 1, normalized-entropy: 0.6267511370265896, [(2, 86), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [22, 7, 0]]
** centroid: 2, normalized-entropy: 0.7973265101474423, [(1, 22), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [23, 45, 0]]
** centroid: 3, normalized-entropy: 0.9231199835423002, [(1, 23), (2, 45)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [35, 21, 0]]
** centroid: 4, normalized-entropy: 0.954434002924965, [(1, 35), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 12, 0]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(1, 66), (2, 12)]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27134735717810693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27134735717810693, 0.21089481349661945] ***
*** starting iteration: 2; err: [Inf, 0.27134735717810693, 0.21089481349661945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27134735717810693, 0.21089481349661945, 0.1911944861607626] ***
*** starting iteration: 3; err: [Inf, 0.27134735717810693, 0.21089481349661945, 0.1911944861607626] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27134735717810693, 0.21089481349661945, 0.1911944861607626, 0.1895061295190826] ***
*** finished computation of 7 references, err: [Inf, 0.27134735717810693, 0.21089481349661945, 0.1911944861607626, 0.1895061295190826] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 2, 0]]
** centroid: 1, normalized-entropy: 0.2006223243127146, [(1, 62), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 37, 15]]
** centroid: 2, normalized-entropy: 0.8667256130949592, [(2, 37), (3, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [122, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [35, 32, 0]]
** centroid: 5, normalized-entropy: 0.9985532860835362, [(1, 35), (2, 32)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 45, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [11, 55, 0]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(1, 11), (2, 55)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3043017248101533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3043017248101533, 0.245241475045681] ***
*** starting iteration: 2; err: [Inf, 0.3043017248101533, 0.245241475045681] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3043017248101533, 0.245241475045681, 0.22857620333507658] ***
*** starting iteration: 3; err: [Inf, 0.3043017248101533, 0.245241475045681, 0.22857620333507658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3043017248101533, 0.245241475045681, 0.22857620333507658, 0.22057760030776263] ***
*** finished computation of 7 references, err: [Inf, 0.3043017248101533, 0.245241475045681, 0.22857620333507658, 0.22057760030776263] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [1, 28, 15]]
** centroid: 1, normalized-entropy: 0.9330252953592912, [(2, 28), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [6, 51, 0]]
** centroid: 2, normalized-entropy: 0.48546076074591343, [(1, 6), (2, 51)]
*** center 3: selecting labels [1] (freq >= 2) [from [139, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 55, 1]]
*** center 5: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [13, 34, 0]]
** centroid: 6, normalized-entropy: 0.8507707040532602, [(1, 13), (2, 34)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [63, 3, 0]]
** centroid: 7, normalized-entropy: 0.2667649878030262, [(1, 63), (2, 3)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2651111964583397] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2651111964583397, 0.1970235084760934] ***
*** starting iteration: 2; err: [Inf, 0.2651111964583397, 0.1970235084760934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2651111964583397, 0.1970235084760934, 0.19129518647491933] ***
*** starting iteration: 3; err: [Inf, 0.2651111964583397, 0.1970235084760934, 0.19129518647491933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2651111964583397, 0.1970235084760934, 0.19129518647491933, 0.18813942045718432] ***
*** finished computation of 7 references, err: [Inf, 0.2651111964583397, 0.1970235084760934, 0.19129518647491933, 0.18813942045718432] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 73, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [11, 58, 0]]
** centroid: 2, normalized-entropy: 0.6329208984823799, [(1, 11), (2, 58)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 12, 0]]
** centroid: 3, normalized-entropy: 0.6962122601251459, [(1, 52), (2, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [80, 8, 0]]
** centroid: 5, normalized-entropy: 0.43949698692151346, [(1, 80), (2, 8)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 43, 17]]
** centroid: 6, normalized-entropy: 0.8599530497177523, [(2, 43), (3, 17)]
*** center 7: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21737961363978683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21737961363978683, 0.20600850543007254] ***
*** starting iteration: 2; err: [Inf, 0.21737961363978683, 0.20600850543007254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21737961363978683, 0.20600850543007254, 0.19679590062610805] ***
*** starting iteration: 3; err: [Inf, 0.21737961363978683, 0.20600850543007254, 0.19679590062610805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21737961363978683, 0.20600850543007254, 0.19679590062610805, 0.19221181108802557] ***
*** finished computation of 7 references, err: [Inf, 0.21737961363978683, 0.20600850543007254, 0.19679590062610805, 0.19221181108802557] ***
*** center 1: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 4, 0]]
** centroid: 2, normalized-entropy: 0.3095434291503252, [(1, 68), (2, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 53, 17]]
** centroid: 4, normalized-entropy: 0.7997594113291759, [(2, 53), (3, 17)]
*** center 5: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 57, 0]]
** centroid: 6, normalized-entropy: 0.5381411852224502, [(1, 8), (2, 57)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [27, 60, 0]]
** centroid: 7, normalized-entropy: 0.8935711016541908, [(1, 27), (2, 60)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2451062409132719] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2451062409132719, 0.20173607635311783] ***
*** starting iteration: 2; err: [Inf, 0.2451062409132719, 0.20173607635311783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2451062409132719, 0.20173607635311783, 0.1988975320458412] ***
*** starting iteration: 3; err: [Inf, 0.2451062409132719, 0.20173607635311783, 0.1988975320458412] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2451062409132719, 0.20173607635311783, 0.1988975320458412, 0.1969368036831729] ***
*** finished computation of 7 references, err: [Inf, 0.2451062409132719, 0.20173607635311783, 0.1988975320458412, 0.1969368036831729] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [19, 33, 0]]
** centroid: 1, normalized-entropy: 0.9470622432515328, [(1, 19), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 37, 0]]
** centroid: 2, normalized-entropy: 0.9644590583765235, [(1, 58), (2, 37)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 20, 0]]
** centroid: 3, normalized-entropy: 0.8960382325345574, [(1, 44), (2, 20)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 76, 16]]
** centroid: 4, normalized-entropy: 0.6665783579949205, [(2, 76), (3, 16)]
*** center 5: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2559236460281536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2559236460281536, 0.22586728020757438] ***
*** starting iteration: 2; err: [Inf, 0.2559236460281536, 0.22586728020757438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2559236460281536, 0.22586728020757438, 0.21151835757493972] ***
*** starting iteration: 3; err: [Inf, 0.2559236460281536, 0.22586728020757438, 0.21151835757493972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2559236460281536, 0.22586728020757438, 0.21151835757493972, 0.20231080698780715] ***
*** finished computation of 7 references, err: [Inf, 0.2559236460281536, 0.22586728020757438, 0.21151835757493972, 0.20231080698780715] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 74, 18]]
** centroid: 1, normalized-entropy: 0.7131467486384921, [(2, 74), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [37, 11, 0]]
** centroid: 2, normalized-entropy: 0.7765557854444601, [(1, 37), (2, 11)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 18, 0]]
** centroid: 3, normalized-entropy: 0.8691375806126381, [(1, 44), (2, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 50, 0]]
** centroid: 5, normalized-entropy: 0.9268190639645774, [(1, 26), (2, 50)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [57, 25, 0]]
** centroid: 6, normalized-entropy: 0.8871723027673716, [(1, 57), (2, 25)]
*** center 7: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24244434598367662] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24244434598367662, 0.208126744735986] ***
*** starting iteration: 2; err: [Inf, 0.24244434598367662, 0.208126744735986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24244434598367662, 0.208126744735986, 0.19990363254398108] ***
*** starting iteration: 3; err: [Inf, 0.24244434598367662, 0.208126744735986, 0.19990363254398108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24244434598367662, 0.208126744735986, 0.19990363254398108, 0.19529871618375183] ***
*** finished computation of 7 references, err: [Inf, 0.24244434598367662, 0.208126744735986, 0.19990363254398108, 0.19529871618375183] ***
*** center 1: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 62, 19]]
** centroid: 2, normalized-entropy: 0.785889583138768, [(2, 62), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [9, 59, 0]]
** centroid: 3, normalized-entropy: 0.5638560041131417, [(1, 9), (2, 59)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [39, 3, 0]]
** centroid: 5, normalized-entropy: 0.3712323266408756, [(1, 39), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [80, 2, 0]]
** centroid: 6, normalized-entropy: 0.16542703399626665, [(1, 80), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [44, 48, 0]]
** centroid: 7, normalized-entropy: 0.9986359641585719, [(1, 44), (2, 48)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24446502747386695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24446502747386695, 0.21275216374266892] ***
*** starting iteration: 2; err: [Inf, 0.24446502747386695, 0.21275216374266892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24446502747386695, 0.21275216374266892, 0.20042268896009774] ***
*** starting iteration: 3; err: [Inf, 0.24446502747386695, 0.21275216374266892, 0.20042268896009774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24446502747386695, 0.21275216374266892, 0.20042268896009774, 0.19438805297575892] ***
*** finished computation of 7 references, err: [Inf, 0.24446502747386695, 0.21275216374266892, 0.20042268896009774, 0.19438805297575892] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [71, 9, 0]]
** centroid: 1, normalized-entropy: 0.5074109636646968, [(1, 71), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [42, 7, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 42), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [25, 31, 0]]
** centroid: 3, normalized-entropy: 0.9917033083725819, [(1, 25), (2, 31)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 82, 12]]
** centroid: 4, normalized-entropy: 0.5509844433017146, [(2, 82), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [8, 48, 0]]
** centroid: 5, normalized-entropy: 0.5916727785823274, [(1, 8), (2, 48)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [84, 8, 0]]
** centroid: 6, normalized-entropy: 0.42622865699814483, [(1, 84), (2, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24776834601629524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24776834601629524, 0.20516066965833307] ***
*** starting iteration: 2; err: [Inf, 0.24776834601629524, 0.20516066965833307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24776834601629524, 0.20516066965833307, 0.19818387164920567] ***
*** starting iteration: 3; err: [Inf, 0.24776834601629524, 0.20516066965833307, 0.19818387164920567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24776834601629524, 0.20516066965833307, 0.19818387164920567, 0.19524630095995962] ***
*** finished computation of 7 references, err: [Inf, 0.24776834601629524, 0.20516066965833307, 0.19818387164920567, 0.19524630095995962] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [61, 24, 0]]
** centroid: 1, normalized-entropy: 0.8586370819183629, [(1, 61), (2, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [15, 48, 0]]
** centroid: 3, normalized-entropy: 0.7918583525674836, [(1, 15), (2, 48)]
*** center 4: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 36, 0]]
** centroid: 5, normalized-entropy: 0.834648285181383, [(1, 13), (2, 36)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 66, 18]]
** centroid: 6, normalized-entropy: 0.7495952572594798, [(2, 66), (3, 18)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2529763914756477] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2529763914756477, 0.20031702597439288] ***
*** starting iteration: 2; err: [Inf, 0.2529763914756477, 0.20031702597439288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2529763914756477, 0.20031702597439288, 0.19275376477092504] ***
*** starting iteration: 3; err: [Inf, 0.2529763914756477, 0.20031702597439288, 0.19275376477092504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2529763914756477, 0.20031702597439288, 0.19275376477092504, 0.19035839518718423] ***
*** finished computation of 7 references, err: [Inf, 0.2529763914756477, 0.20031702597439288, 0.19275376477092504, 0.19035839518718423] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [2, 70, 0]]
** centroid: 1, normalized-entropy: 0.18312206830137262, [(1, 2), (2, 70)]
*** center 2: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [72, 10, 0]]
** centroid: 3, normalized-entropy: 0.5349436990971067, [(1, 72), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [73, 2, 0]]
** centroid: 4, normalized-entropy: 0.1773894531859976, [(1, 73), (2, 2)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 63, 14]]
** centroid: 5, normalized-entropy: 0.6840384356390419, [(2, 63), (3, 14)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [53, 27, 0]]
** centroid: 6, normalized-entropy: 0.9224062617590724, [(1, 53), (2, 27)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [32, 4, 0]]
** centroid: 7, normalized-entropy: 0.5032583347756457, [(1, 32), (2, 4)]
finished with 9 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 354,3 => 31,1 => 615), Dict(2 => 347,3 => 39,1 => 614))
[ Info: ===== scores for single classifier: {"micro_f1":0.938,"precision":0.938,"recall":0.938,"macro_recall":0.9479609621167319,"macro_f1":0.8972866418802611,"accuracy":0.938,"class_f1":{"2":0.907185628742515,"3":0.8210526315789474,"1":0.9636216653193209},"class_precision":{"2":0.9439252336448598,"3":0.6964285714285714,"1":0.956661316211878},"class_recall":{"2":0.8731988472622478,"3":1.0,"1":0.9706840390879479}}
[ Info: ===== scores for 1: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9752759029622607,"macro_f1":0.9362442131904388,"accuracy":0.966,"class_f1":{"2":0.9512893982808024,"3":0.8764044943820225,"1":0.9810387469084914},"class_precision":{"2":0.9458689458689459,"3":0.78,"1":0.993322203672788},"class_recall":{"2":0.9567723342939481,"3":1.0,"1":0.9690553745928339}}
[ Info: ===== scores for 5: {"micro_f1":0.959,"precision":0.959,"recall":0.959,"macro_recall":0.9723111390638542,"macro_f1":0.9282307318210637,"accuracy":0.959,"class_f1":{"2":0.9421720733427363,"3":0.8666666666666666,"1":0.9758534554537885},"class_precision":{"2":0.9226519337016574,"3":0.7647058823529411,"1":0.9982964224872232},"class_recall":{"2":0.962536023054755,"3":1.0,"1":0.9543973941368078}}
[ Info: ===== scores for 7: {"micro_f1":0.962,"precision":0.962,"recall":0.962,"macro_recall":0.974357530187398,"macro_f1":0.9304545782139622,"accuracy":0.962,"class_f1":{"2":0.9463276836158191,"3":0.8666666666666666,"1":0.978369384359401},"class_precision":{"2":0.9279778393351801,"3":0.7647058823529411,"1":1.0},"class_recall":{"2":0.9654178674351584,"3":1.0,"1":0.9576547231270358}}
[ Info: ===== scores for 9: {"micro_f1":0.959,"precision":0.959,"recall":0.959,"macro_recall":0.9706402325501351,"macro_f1":0.9223229004355721,"accuracy":0.959,"class_f1":{"2":0.9415121255349501,"3":0.8478260869565216,"1":0.9776304888152445},"class_precision":{"2":0.9322033898305084,"3":0.7358490566037735,"1":0.9949409780775716},"class_recall":{"2":0.9510086455331412,"3":1.0,"1":0.9609120521172638}}
[ Info: ===== scores for 11: {"micro_f1":0.958,"precision":0.958,"recall":0.958,"macro_recall":0.9688441644998075,"macro_f1":0.9214596497130971,"accuracy":0.958,"class_f1":{"2":0.939655172413793,"3":0.8478260869565216,"1":0.9768976897689768},"class_precision":{"2":0.9369627507163324,"3":0.7358490566037735,"1":0.9899665551839465},"class_recall":{"2":0.9423631123919308,"3":1.0,"1":0.9641693811074918}}
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.954, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.954, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.959, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.959, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.962, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.962, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.97,"k":1,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.979118362136132,"macro_f1":0.9519835876656594,"accuracy":0.97,"class_f1":{"2":0.9572649572649572,"3":0.9176470588235294,"1":0.9810387469084914},"class_precision":{"2":0.9464788732394366,"3":0.8478260869565217,"1":0.993322203672788},"class_recall":{"2":0.968299711815562,"3":1.0,"1":0.9690553745928339}}
Test Summary: | Pass  Total
AKNC          |    8      8
[869, 1, 1, 1, 3, 1, 1, 2, 3, 5, 1, 3, 2, 4, 4, 1, 8, 5, 1, 1, 5, 4, 3, 9, 3, 21, 1, 4, 3, 2, 4, 11, 6, 14, 3, 22, 21, 6, 18, 2, 12, 30, 5, 6, 1, 1, 28, 1, 8, 4, 24, 16, 31, 7, 50, 48, 24, 12, 12, 3, 8, 12, 16, 1, 5, 2, 65, 17, 7, 17, 32, 6, 7, 48, 16, 21, 14, 29, 17, 17, 12, 2, 47, 2, 10, 14, 3, 14, 6, 4, 34, 18, 9, 9, 13, 25, 4, 4, 33, 11, 14, 22, 26, 5, 13, 42, 11, 56, 48, 9, 16, 12, 1, 50, 10, 25, 14, 6, 14, 12, 28, 8, 143, 32, 3, 7, 5, 199, 16, 9, 68, 21, 9, 38, 15, 29, 4, 21, 10, 16, 138, 20, 84, 8, 81, 35, 7, 4, 15, 112, 112, 83, 12, 8, 1, 7, 37, 230, 30, 23, 4, 50, 33, 49, 46, 154, 122, 8, 115, 3, 124, 43, 80, 14, 8, 4, 11, 2, 12, 65, 20, 26, 28, 4, 6, 30, 25, 16, 67, 38, 40, 36, 9, 3, 49, 15, 16, 10, 12, 267, 15, 1, 1, 5, 15, 50, 24, 18, 11, 36, 4, 102, 12, 23, 15, 649, 50, 8, 70, 13, 14, 21, 5, 45, 20, 20, 1, 37, 72, 19, 46, 7, 4, 38, 34, 106, 185, 26, 58, 18, 31, 96, 6, 45, 18, 61, 11, 21, 34, 4, 15, 53, 44, 15, 130, 5, 16, 41, 15, 19, 10, 78, 62, 2, 90, 66, 12, 13, 10, 37, 22, 25, 46, 83, 10, 24, 150, 5, 30, 36, 22, 38, 72, 7, 13, 147, 4, 61, 15, 6, 25, 55, 3, 41, 28, 165, 40, 19, 8, 11]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6449999999999999, speedup = 0.2800560570462883, eval_ratio = 0.074162)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.41193886408730185,"recall":0.40104166666666685,"f1":null,"seconds":0.00016290321946144104,"exhaustive_search_seconds":0.00035761669278144836,"evaluations":454.765625,"distances_sum":1739.623091561804}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5677083333333334,"recall":0.5677083333333334,"f1":null,"seconds":0.00025995634496212006,"exhaustive_search_seconds":0.00035761669278144836,"evaluations":584.578125,"distances_sum":1660.8706503826565}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6831597222222217,"recall":0.6831597222222217,"f1":null,"seconds":0.00034408271312713623,"exhaustive_search_seconds":0.00035761669278144836,"evaluations":704.359375,"distances_sum":1598.4337016195088}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7473958333333333,"recall":0.7473958333333333,"f1":0.7473958333333333,"seconds":0.0004513692110776901,"exhaustive_search_seconds":0.00035761669278144836,"evaluations":801.3203125,"distances_sum":1572.1691934235118}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7986111111111106,"recall":0.7986111111111106,"f1":0.7986111111111106,"seconds":0.000643659383058548,"exhaustive_search_seconds":0.00035761669278144836,"evaluations":902.28125,"distances_sum":1555.0901365652983}
KCenters.DeloneInvIndex> reached performance {"precision":0.8237847222222215,"recall":0.8237847222222215,"f1":0.8237847222222215,"seconds":0.0005427058786153793,"exhaustive_search_seconds":0.00035761669278144836,"evaluations":1008.4453125,"distances_sum":1548.0863608504458}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8259999999999998, speedup = 0.6961174040620953, eval_ratio = 0.10586199999999998)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
