Julia Version 1.5.0-DEV.616
Commit bc2fbef2bf (2020-04-12 16:10 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed OrderedCollections ────────── v1.1.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.1
  Installed Tables ────────────────────── v1.0.3
  Installed JSON ──────────────────────── v0.21.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed DataStructures ────────────── v0.17.12
  Installed DataFrames ────────────────── v0.20.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed MLDataUtils ───────────────── v0.5.1
  Installed Compat ────────────────────── v3.8.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed TableTraits ───────────────── v1.0.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataValueInterfaces ───────── v1.0.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed Missings ──────────────────── v0.4.3
  Installed MLDataPattern ─────────────── v0.5.1
  Installed CategoricalArrays ─────────── v0.7.7
  Installed SimilaritySearch ──────────── v0.3.19
  Installed InvertedIndices ───────────── v1.0.0
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.12
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.1
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_TW5ywK/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_TW5ywK/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.12
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.1
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9360659371813138
[ Info: 0.8321307849884033
[ Info: 0.5538560461501281
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3289614958812793
mean(cdnet.distances) = 0.3788996985554695
mean(crand.distances) = 0.35507761587699255
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8576340326340331,"seconds":3.7029385566711426e-6,"exhaustive_search_seconds":2.430751919746399e-6,"evaluations":8.7421875,"distances_sum":2317.994305213178}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.150390625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.150390625,"f1":null,"seconds":1.9688159227371216e-6,"exhaustive_search_seconds":2.430751919746399e-6,"evaluations":4.53125,"distances_sum":480.29125163559036}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.45703125, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.45703125,"f1":null,"seconds":2.60770320892334e-6,"exhaustive_search_seconds":2.430751919746399e-6,"evaluations":6.546875,"distances_sum":1354.3092097652502}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8576340326340331,"seconds":3.7029385566711426e-6,"exhaustive_search_seconds":2.430751919746399e-6,"evaluations":8.7421875,"distances_sum":2317.994305213178}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.943068910256411,"seconds":3.7439167499542236e-6,"exhaustive_search_seconds":2.430751919746399e-6,"evaluations":8.7578125,"distances_sum":2931.849080664885}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9290808150183157,"seconds":3.6600977182388306e-6,"exhaustive_search_seconds":2.430751919746399e-6,"evaluations":8.7421875,"distances_sum":2824.16238141429}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8994140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.943068910256411,"seconds":3.7439167499542236e-6,"exhaustive_search_seconds":2.430751919746399e-6,"evaluations":8.7578125,"distances_sum":2931.849080664885}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9799679487179489,"seconds":4.371628165245056e-6,"exhaustive_search_seconds":2.430751919746399e-6,"evaluations":8.9609375,"distances_sum":3217.750882144431}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9712282509157512,"seconds":3.8798898458480835e-6,"exhaustive_search_seconds":2.430751919746399e-6,"evaluations":8.9765625,"distances_sum":3125.084453474709}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9643315018315022,"seconds":3.876164555549622e-6,"exhaustive_search_seconds":2.430751919746399e-6,"evaluations":8.875,"distances_sum":3108.634824679701}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":12,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9670959249084252,"seconds":4.030764102935791e-6,"exhaustive_search_seconds":2.430751919746399e-6,"evaluations":8.8515625,"distances_sum":3147.4718366586812}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":12,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9723042582417585,"seconds":4.634261131286621e-6,"exhaustive_search_seconds":2.430751919746399e-6,"evaluations":8.9375,"distances_sum":3144.5823250304243}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9638671875,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9799679487179489,"seconds":4.371628165245056e-6,"exhaustive_search_seconds":2.430751919746399e-6,"evaluations":8.9609375,"distances_sum":3217.750882144431}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9638671875,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9799679487179489,"seconds":4.371628165245056e-6,"exhaustive_search_seconds":2.430751919746399e-6,"evaluations":8.9609375,"distances_sum":3217.750882144431}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7932078338328347,"seconds":3.069639205932617e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":7.640625,"distances_sum":1840.0545092222758}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4482421875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4482421875,"f1":null,"seconds":2.566725015640259e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":6.4765625,"distances_sum":1152.3386597242138}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6708984375,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6708984375,"f1":0.7932078338328347,"seconds":3.069639205932617e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":7.640625,"distances_sum":1840.0545092222758}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8466757201132209,"seconds":3.473833203315735e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.0546875,"distances_sum":2047.2212069471352}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9648866758241762,"seconds":4.220753908157349e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.8203125,"distances_sum":2891.98390244789}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.939995421245422,"seconds":3.980472683906555e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.46875,"distances_sum":2663.336703490026}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.899711226273727,"seconds":3.6992132663726807e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.421875,"distances_sum":2367.393920540021}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7975227897102907,"seconds":2.862885594367981e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":7.6640625,"distances_sum":1826.095261750836}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9648866758241762,"seconds":4.220753908157349e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.8203125,"distances_sum":2891.98390244789}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9740327380952385,"seconds":3.5762786865234375e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.890625,"distances_sum":2960.3097732572505}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9740327380952385,"seconds":3.5762786865234375e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.890625,"distances_sum":2960.3097732572505}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9740327380952385,"seconds":3.5762786865234375e-6,"exhaustive_search_seconds":1.0076910257339478e-6,"evaluations":8.890625,"distances_sum":2960.3097732572505}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7944647366522374,"seconds":3.162771463394165e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.4453125,"distances_sum":1798.4663024092863}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5517578125,"f1":0.6968149905649911,"seconds":2.771615982055664e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":7.78125,"distances_sum":1367.3910338565847}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.39453125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.39453125,"f1":null,"seconds":2.428889274597168e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":7.2890625,"distances_sum":993.6907142462601}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6806640625,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6806640625,"f1":0.7944647366522374,"seconds":3.162771463394165e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.4453125,"distances_sum":1798.4663024092863}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8515718656343664,"seconds":3.3527612686157227e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.7265625,"distances_sum":2085.8246679017698}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8741674991674999,"seconds":3.3490359783172607e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.859375,"distances_sum":2175.873077726852}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9019267191142197,"seconds":3.3583492040634155e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.6796875,"distances_sum":2473.0501022252292}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8652592199467208,"seconds":3.3993273973464966e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.6796875,"distances_sum":2180.0828425230893}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9097163253413261,"seconds":3.3974647521972656e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.6484375,"distances_sum":2539.4615356454183}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8525390625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8525390625,"f1":0.9097163253413261,"seconds":3.3974647521972656e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.6484375,"distances_sum":2539.4615356454183}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9628777472527478,"seconds":3.77558171749115e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.9140625,"distances_sum":2840.752936317}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9643429487179493,"seconds":3.8351863622665405e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.8984375,"distances_sum":2853.4929245225294}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9358948343323349,"seconds":3.6265701055526733e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.796875,"distances_sum":2654.4643598883854}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9561641483516489,"seconds":3.468245267868042e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.890625,"distances_sum":2804.447103234758}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9564274267399273,"seconds":3.6731362342834473e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.921875,"distances_sum":2783.6364562399667}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9386504120879128,"seconds":3.7364661693573e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.84375,"distances_sum":2666.881853515435}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9643429487179493,"seconds":3.8351863622665405e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.8984375,"distances_sum":2853.4929245225294}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9643429487179493,"seconds":3.8351863622665405e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.8984375,"distances_sum":2853.4929245225294}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8694040334665342,"seconds":8.413568139076233e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.6953125,"distances_sum":2095.3598129571083}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78125,"f1":0.8694040334665342,"seconds":8.413568139076233e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.6953125,"distances_sum":2095.3598129571083}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9129781676656683,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.7109375,"distances_sum":2413.152384804888}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8525390625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8525390625,"f1":0.9129781676656683,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.7109375,"distances_sum":2413.152384804888}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.961034798534799,"seconds":8.963048458099365e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.8828125,"distances_sum":2742.7217305881995}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9550881410256413,"seconds":8.167698979377747e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.8046875,"distances_sum":2712.810679453457}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.961034798534799,"seconds":8.963048458099365e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.8828125,"distances_sum":2742.7217305881995}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.961034798534799,"seconds":8.963048458099365e-6,"exhaustive_search_seconds":9.760260581970215e-7,"evaluations":8.8828125,"distances_sum":2742.7217305881995}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1767578125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1767578125,"f1":null,"seconds":5.640089511871338e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":5.6640625,"distances_sum":421.981029011471}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4423828125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4423828125,"f1":null,"seconds":6.062909960746765e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":6.6640625,"distances_sum":1130.3274897669053}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.697265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.697265625,"f1":0.812595217282718,"seconds":6.593763828277588e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":7.9375,"distances_sum":1899.7086847360335}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.697265625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.697265625,"f1":0.812595217282718,"seconds":6.593763828277588e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":7.9375,"distances_sum":1899.7086847360335}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.858806818181819,"seconds":6.282702088356018e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":8.1875,"distances_sum":2161.242275888956}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.9116019397269405,"seconds":6.549060344696045e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":8.3984375,"distances_sum":2487.9011880246544}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8718645937395945,"seconds":4.45730984210968e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":8.2109375,"distances_sum":2288.752449315731}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8486328125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8486328125,"f1":0.9116019397269405,"seconds":6.549060344696045e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":8.3984375,"distances_sum":2487.9011880246544}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9529475732600737,"seconds":8.974224328994751e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":8.71875,"distances_sum":2846.3140710927105}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9112039002664009,"seconds":6.40377402305603e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":8.3828125,"distances_sum":2511.291599098363}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9609603937728942,"seconds":6.77257776260376e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":8.78125,"distances_sum":2899.244848509055}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9393830128205135,"seconds":6.662681698799133e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":8.4921875,"distances_sum":2684.845974863324}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9609603937728942,"seconds":6.77257776260376e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":8.78125,"distances_sum":2899.244848509055}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9609603937728942,"seconds":6.77257776260376e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":8.78125,"distances_sum":2899.244848509055}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.498046875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.498046875,"f1":0.6475767288267292,"seconds":5.023553967475891e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":6.7578125,"distances_sum":1320.2472076428205}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.498046875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.498046875,"f1":0.6475767288267292,"seconds":5.023553967475891e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":6.7578125,"distances_sum":1320.2472076428205}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8513512529137538,"seconds":3.848224878311157e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.2734375,"distances_sum":2072.5210906727734}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9293128746253753,"seconds":3.907829523086548e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.59375,"distances_sum":2544.8800842731084}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8798828125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9293128746253753,"seconds":3.907829523086548e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.59375,"distances_sum":2544.8800842731084}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.951144688644689,"seconds":4.000961780548096e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.75,"distances_sum":2697.3009596275974}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9462854853479857,"seconds":4.030764102935791e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.78125,"distances_sum":2646.125715658118}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.951144688644689,"seconds":4.000961780548096e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.75,"distances_sum":2697.3009596275974}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.951144688644689,"seconds":4.000961780548096e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.75,"distances_sum":2697.3009596275974}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":5,"bsize":4}, perf: {"precision":0.9761439732142855,"recall":0.6787109375,"f1":0.7887196787587419,"seconds":3.4905970096588135e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.3984375,"distances_sum":606.1613114149841}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9694196428571427,"recall":0.7587890625,"f1":0.8435129540598296,"seconds":3.512948751449585e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.625,"distances_sum":702.3777342746096}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.33984375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.33984375,"f1":null,"seconds":2.5331974029541016e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":6.609375,"distances_sum":288.55219000511994}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7587890625,"state":{"ssize":1,"bsize":5},"perf":{"precision":0.9694196428571427,"recall":0.7587890625,"f1":0.8435129540598296,"seconds":3.512948751449585e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.625,"distances_sum":702.3777342746096}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":1,"bsize":6}, perf: {"precision":0.9708798363095236,"recall":0.78125,"f1":0.8587678597444226,"seconds":3.773719072341919e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.5625,"distances_sum":745.8476900058182}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9806082589285716,"recall":0.92578125,"f1":0.9495127918956044,"seconds":4.116445779800415e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.8671875,"distances_sum":940.0656449742728}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":1,"bsize":7}, perf: {"precision":0.9732142857142857,"recall":0.873046875,"f1":0.9146600795038298,"seconds":4.030764102935791e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.765625,"distances_sum":875.6831103477097}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":9,"bsize":8}, perf: {"precision":0.9703497023809523,"recall":0.912109375,"f1":0.9379578754578757,"seconds":4.135072231292725e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.8984375,"distances_sum":929.4835985440781}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":4,"bsize":7}, perf: {"precision":0.9712518601190476,"recall":0.85546875,"f1":0.9034405048076923,"seconds":3.820285201072693e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.71875,"distances_sum":853.3645198635246}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":0.9806082589285716,"recall":0.92578125,"f1":0.9495127918956044,"seconds":4.116445779800415e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.8671875,"distances_sum":940.0656449742728}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":11}, perf: {"precision":0.9743024553571429,"recall":0.927734375,"f1":0.9480318509615387,"seconds":4.202127456665039e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.9296875,"distances_sum":941.7110373701114}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":6,"bsize":9}, perf: {"precision":0.9792596726190476,"recall":0.939453125,"f1":0.9572186927655678,"seconds":4.5299530029296875e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.8984375,"distances_sum":954.5628726870427}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":13,"bsize":12}, perf: {"precision":0.9650204613095237,"recall":0.9365234375,"f1":0.9483394860347987,"seconds":4.161149263381958e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.96875,"distances_sum":964.4023059766131}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":6,"bsize":9},"perf":{"precision":0.9792596726190476,"recall":0.939453125,"f1":0.9572186927655678,"seconds":4.5299530029296875e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.8984375,"distances_sum":954.5628726870427}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":6,"bsize":9},"perf":{"precision":0.9792596726190476,"recall":0.939453125,"f1":0.9572186927655678,"seconds":4.5299530029296875e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.8984375,"distances_sum":954.5628726870427}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2060546875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2060546875,"f1":null,"seconds":3.693625330924988e-6,"exhaustive_search_seconds":2.5872141122817993e-6,"evaluations":6.078125,"distances_sum":218.86460064610648}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2060546875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2060546875,"f1":null,"seconds":3.693625330924988e-6,"exhaustive_search_seconds":2.5872141122817993e-6,"evaluations":6.078125,"distances_sum":218.86460064610648}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6494140625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6494140625,"f1":0.7762425074925083,"seconds":6.902962923049927e-6,"exhaustive_search_seconds":2.4437904357910156e-6,"evaluations":7.6171875,"distances_sum":1445.527671542694}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.447265625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.447265625,"f1":null,"seconds":3.1050294637680054e-6,"exhaustive_search_seconds":2.4437904357910156e-6,"evaluations":6.46875,"distances_sum":927.1815422465455}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6494140625,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6494140625,"f1":0.7762425074925083,"seconds":6.902962923049927e-6,"exhaustive_search_seconds":2.4437904357910156e-6,"evaluations":7.6171875,"distances_sum":1445.527671542694}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8735961954711964,"seconds":3.643333911895752e-6,"exhaustive_search_seconds":2.4437904357910156e-6,"evaluations":8.4609375,"distances_sum":1805.62635990385}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7890625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7890625,"f1":0.8735961954711964,"seconds":3.643333911895752e-6,"exhaustive_search_seconds":2.4437904357910156e-6,"evaluations":8.4609375,"distances_sum":1805.62635990385}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9596611721611726,"seconds":4.0959566831588745e-6,"exhaustive_search_seconds":2.4437904357910156e-6,"evaluations":8.859375,"distances_sum":2333.36340425812}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8946631493506502,"seconds":3.5800039768218994e-6,"exhaustive_search_seconds":2.4437904357910156e-6,"evaluations":8.5,"distances_sum":1940.5690239208643}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9596611721611726,"seconds":4.0959566831588745e-6,"exhaustive_search_seconds":2.4437904357910156e-6,"evaluations":8.859375,"distances_sum":2333.36340425812}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9596611721611726,"seconds":4.0959566831588745e-6,"exhaustive_search_seconds":2.4437904357910156e-6,"evaluations":8.859375,"distances_sum":2333.36340425812}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.296875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.296875,"f1":null,"seconds":2.084299921989441e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":6.4453125,"distances_sum":636.7452940507866}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2734375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2734375,"f1":null,"seconds":2.1085143089294434e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":6.1640625,"distances_sum":563.6485933849169}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.296875,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.296875,"f1":null,"seconds":2.084299921989441e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":6.4453125,"distances_sum":636.7452940507866}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4375,"f1":null,"seconds":2.2277235984802246e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":6.3671875,"distances_sum":959.5930582767235}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5498046875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5498046875,"f1":0.6925709706959713,"seconds":2.650544047355652e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":6.984375,"distances_sum":1161.3772521002354}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6640625,"f1":0.7869552322677329,"seconds":3.0193477869033813e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":7.6796875,"distances_sum":1497.3132879316122}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6640625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6640625,"f1":0.7869552322677329,"seconds":3.0193477869033813e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":7.6796875,"distances_sum":1497.3132879316122}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8600075271950282,"seconds":3.168359398841858e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.109375,"distances_sum":1786.9087560964274}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8896213161838169,"seconds":3.248453140258789e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.2890625,"distances_sum":1893.2339250935283}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8829904470529482,"seconds":3.417953848838806e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.34375,"distances_sum":1896.7804723053766}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9067885239760245,"seconds":3.511086106300354e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.484375,"distances_sum":1983.760138402989}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8408203125,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8408203125,"f1":0.9067885239760245,"seconds":3.511086106300354e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.484375,"distances_sum":1983.760138402989}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8408203125,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8408203125,"f1":0.9067885239760245,"seconds":3.511086106300354e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.484375,"distances_sum":1983.760138402989}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55078125, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.55078125,"f1":null,"seconds":2.557411789894104e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":6.6875,"distances_sum":1167.844994694236}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.689453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.689453125,"f1":0.805748418248419,"seconds":2.868473529815674e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":7.53125,"distances_sum":1510.8398257988945}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.689453125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.689453125,"f1":0.805748418248419,"seconds":2.868473529815674e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":7.53125,"distances_sum":1510.8398257988945}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8986466658341666,"seconds":3.287568688392639e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":8.2265625,"distances_sum":1952.2117088994517}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9256040834165841,"seconds":3.3993273973464966e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":8.4609375,"distances_sum":2106.258620144155}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8701171875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8701171875,"f1":0.9256040834165841,"seconds":3.3993273973464966e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":8.4609375,"distances_sum":2106.258620144155}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9472928113553118,"seconds":3.4831464290618896e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":8.7109375,"distances_sum":2252.5443976335123}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9454097985347991,"seconds":3.5390257835388184e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":8.6484375,"distances_sum":2239.7070810064797}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9630437271062275,"seconds":3.5818666219711304e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":8.7890625,"distances_sum":2365.005245386628}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9601419413919415,"seconds":3.4775584936141968e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":8.765625,"distances_sum":2344.7034309765927}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9528190559440562,"seconds":3.555789589881897e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":8.765625,"distances_sum":2296.348195862267}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9630437271062275,"seconds":3.5818666219711304e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":8.7890625,"distances_sum":2365.005245386628}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9345703125,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9630437271062275,"seconds":3.5818666219711304e-6,"exhaustive_search_seconds":8.605420589447021e-7,"evaluations":8.7890625,"distances_sum":2365.005245386628}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.240234375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.240234375,"f1":null,"seconds":1.8384307622909546e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":5.3828125,"distances_sum":508.6936043412612}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5478515625, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.5478515625,"f1":null,"seconds":2.479180693626404e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":6.6171875,"distances_sum":1146.9088476623156}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5478515625,"state":{"ssize":5,"bsize":3},"perf":{"precision":null,"recall":0.5478515625,"f1":null,"seconds":2.479180693626404e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":6.6171875,"distances_sum":1146.9088476623156}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5693359375, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.5693359375,"f1":0.7084042693417699,"seconds":2.6635825634002686e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":6.859375,"distances_sum":1261.8582129272977}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8585378163503172,"seconds":3.330409526824951e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":7.8984375,"distances_sum":1721.029344888213}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.552734375, conf: {"ssize":8,"bsize":3}, perf: {"precision":1.0,"recall":0.552734375,"f1":0.697578116328117,"seconds":3.0025839805603027e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":6.6875,"distances_sum":1174.2475037741165}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5546875,"f1":0.6989121989121995,"seconds":2.898275852203369e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":6.6953125,"distances_sum":1178.6584989039043}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8585378163503172,"seconds":3.330409526824951e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":7.8984375,"distances_sum":1721.029344888213}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9509329212454217,"seconds":3.816559910774231e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.8046875,"distances_sum":2294.1302926479457}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9259271978021985,"seconds":3.9637088775634766e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.5234375,"distances_sum":2100.22961232353}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9605711996337001,"seconds":4.0549784898757935e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.765625,"distances_sum":2351.707158773456}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80859375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.80859375,"f1":0.8860868298368306,"seconds":3.7159770727157593e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.171875,"distances_sum":1855.6130191569287}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9605711996337001,"seconds":4.0549784898757935e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.765625,"distances_sum":2351.707158773456}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9296875,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9605711996337001,"seconds":4.0549784898757935e-6,"exhaustive_search_seconds":8.754432201385498e-7,"evaluations":8.765625,"distances_sum":2351.707158773456}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6376953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6376953125,"f1":0.7663563866688874,"seconds":3.2372772693634033e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":7.140625,"distances_sum":1332.1282998281047}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6376953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6376953125,"f1":0.7663563866688874,"seconds":3.2372772693634033e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":7.140625,"distances_sum":1332.1282998281047}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8578275890775898,"seconds":3.5278499126434326e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":7.9140625,"distances_sum":1693.884838348366}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9408596611721617,"seconds":4.049390554428101e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.6484375,"distances_sum":2192.947534603046}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8974609375,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.8974609375,"f1":0.9408596611721617,"seconds":4.049390554428101e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.6484375,"distances_sum":2192.947534603046}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9514194139194145,"seconds":4.056841135025024e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.7578125,"distances_sum":2219.2584874225468}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9738095238095242,"seconds":4.112720489501953e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.9140625,"distances_sum":2360.568083249212}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9572573260073266,"seconds":3.984197974205017e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.75,"distances_sum":2276.120887405827}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9445913461538467,"seconds":4.285946488380432e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.703125,"distances_sum":2176.677699818421}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9738095238095242,"seconds":4.112720489501953e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.9140625,"distances_sum":2360.568083249212}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9738095238095242,"seconds":4.112720489501953e-6,"exhaustive_search_seconds":1.1418014764785767e-6,"evaluations":8.9140625,"distances_sum":2360.568083249212}}, n: 9
mean(cfft.distances) = 0.32896149561943044
mean(cdnet.distances) = 0.6493413366002514
mean(crand.distances) = 0.3465802978023305
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8777777777777778
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8488888888888889
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8488888888888888
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9111111111111111
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.88
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.888888888888889
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.86
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.931111111111111
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8666666666666667
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9266666666666667
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9311111111111111
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8577777777777778
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8822222222222221
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9377777777777778
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.92
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9377777777777778
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9155555555555557
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8822222222222224
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8466666666666667
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8422222222222223
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9111111111111111
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 11, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 2, 3, 2, 3, 3, 2, 3, 1]
acc = 0.9466666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 11, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 2, 3, 2, 3, 3, 2, 3, 1]
acc = 0.9466666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 11, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 2, 3, 2, 3, 3, 2, 3, 1]
acc = 0.9466666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 11, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 2, 3, 2, 3, 3, 2, 3, 1]
acc = 0.9466666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 11, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 2, 3, 2, 3, 3, 2, 3, 1]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 11, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 2, 3, 2, 3, 3, 2, 3, 1]
acc = 0.9
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 11, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 1, 3, 2, 2, 3, 2, 3, 3, 2, 3, 1]
acc = 0.9533333333333334
*** finished computation of 12 references, err: [Inf, 0.6178791105747223] ***
*** center 1: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 9, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.2063174759997083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2063174759997083, 0.16886483292534454] ***
*** starting iteration: 2; err: [Inf, 0.2063174759997083, 0.16886483292534454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2063174759997083, 0.16886483292534454, 0.1580623648857961] ***
*** starting iteration: 3; err: [Inf, 0.2063174759997083, 0.16886483292534454, 0.1580623648857961] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2063174759997083, 0.16886483292534454, 0.1580623648857961, 0.15360064589447836] ***
*** finished computation of 7 references, err: [Inf, 0.2063174759997083, 0.16886483292534454, 0.1580623648857961, 0.15360064589447836] ***
*** center 1: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 6, 0]]
** centroid: 2, normalized-entropy: 0.44886448872302936, [(1, 58), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 103, 16]]
** centroid: 3, normalized-entropy: 0.5695273910401157, [(2, 103), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [118, 30, 0]]
** centroid: 5, normalized-entropy: 0.7273006785144036, [(1, 118), (2, 30)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 65, 10]]
** centroid: 6, normalized-entropy: 0.5665095065529052, [(2, 65), (3, 10)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [18, 61, 0]]
** centroid: 7, normalized-entropy: 0.7742411580847273, [(1, 18), (2, 61)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.38890817946567013] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38890817946567013, 0.30603330975325704] ***
*** starting iteration: 2; err: [Inf, 0.38890817946567013, 0.30603330975325704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38890817946567013, 0.30603330975325704, 0.3026149415176127] ***
*** starting iteration: 3; err: [Inf, 0.38890817946567013, 0.30603330975325704, 0.3026149415176127] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38890817946567013, 0.30603330975325704, 0.3026149415176127, 0.3022517354574401] ***
*** finished computation of 3 references, err: [Inf, 0.38890817946567013, 0.30603330975325704, 0.3026149415176127, 0.3022517354574401] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [247, 15, 0]]
** centroid: 1, normalized-entropy: 0.31643802010407945, [(1, 247), (2, 15)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 182, 26]]
** centroid: 2, normalized-entropy: 0.36892183836619336, [(1, 1), (2, 182), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [127, 68, 0]]
** centroid: 3, normalized-entropy: 0.9329178602876201, [(1, 127), (2, 68)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3719623775194878] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719623775194878, 0.3110500329133609] ***
*** starting iteration: 2; err: [Inf, 0.3719623775194878, 0.3110500329133609] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719623775194878, 0.3110500329133609, 0.30174909900131075] ***
*** starting iteration: 3; err: [Inf, 0.3719623775194878, 0.3110500329133609, 0.30174909900131075] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719623775194878, 0.3110500329133609, 0.30174909900131075, 0.2992047989640435] ***
*** starting iteration: 4; err: [Inf, 0.3719623775194878, 0.3110500329133609, 0.30174909900131075, 0.2992047989640435] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719623775194878, 0.3110500329133609, 0.30174909900131075, 0.2992047989640435, 0.2980875623268613] ***
*** starting iteration: 5; err: [Inf, 0.3719623775194878, 0.3110500329133609, 0.30174909900131075, 0.2992047989640435, 0.2980875623268613] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3719623775194878, 0.3110500329133609, 0.30174909900131075, 0.2992047989640435, 0.2980875623268613, 0.29746948141532054] ***
*** finished computation of 3 references, err: [Inf, 0.3719623775194878, 0.3110500329133609, 0.30174909900131075, 0.2992047989640435, 0.2980875623268613, 0.29746948141532054] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [269, 6, 0]]
** centroid: 1, normalized-entropy: 0.15153089738635359, [(1, 269), (2, 6)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [3, 183, 27]]
** centroid: 2, normalized-entropy: 0.4116838225228946, [(1, 3), (2, 183), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [119, 60, 0]]
** centroid: 3, normalized-entropy: 0.9201467852522095, [(1, 119), (2, 60)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.19005035652989882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19005035652989882, 0.16134892966503325] ***
*** starting iteration: 2; err: [Inf, 0.19005035652989882, 0.16134892966503325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19005035652989882, 0.16134892966503325, 0.15511829296205154] ***
*** starting iteration: 3; err: [Inf, 0.19005035652989882, 0.16134892966503325, 0.15511829296205154] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19005035652989882, 0.16134892966503325, 0.15511829296205154, 0.1523053668882011] ***
*** finished computation of 7 references, err: [Inf, 0.19005035652989882, 0.16134892966503325, 0.15511829296205154, 0.1523053668882011] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [93, 11, 0]]
** centroid: 1, normalized-entropy: 0.48702128315977294, [(1, 93), (2, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [80, 4, 0]]
** centroid: 3, normalized-entropy: 0.2761954276479391, [(1, 80), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [6, 116, 0]]
** centroid: 4, normalized-entropy: 0.28290479297989196, [(1, 6), (2, 116)]
*** center 5: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [42, 53, 0]]
** centroid: 6, normalized-entropy: 0.9903070204513952, [(1, 42), (2, 53)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 65, 27]]
** centroid: 7, normalized-entropy: 0.8731720603476306, [(2, 65), (3, 27)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22901304669376613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22901304669376613, 0.17002097358913168] ***
*** starting iteration: 2; err: [Inf, 0.22901304669376613, 0.17002097358913168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22901304669376613, 0.17002097358913168, 0.1567115011796735] ***
*** starting iteration: 3; err: [Inf, 0.22901304669376613, 0.17002097358913168, 0.1567115011796735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22901304669376613, 0.17002097358913168, 0.1567115011796735, 0.15240550448355647] ***
*** finished computation of 7 references, err: [Inf, 0.22901304669376613, 0.17002097358913168, 0.1567115011796735, 0.15240550448355647] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [44, 53, 0]]
** centroid: 1, normalized-entropy: 0.9937811379408324, [(1, 44), (2, 53)]
*** center 2: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 18, 0]]
** centroid: 3, normalized-entropy: 0.7845191388986644, [(1, 59), (2, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 109, 25]]
** centroid: 5, normalized-entropy: 0.6942347416140927, [(2, 109), (3, 25)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [47, 11, 0]]
** centroid: 6, normalized-entropy: 0.7007495497162061, [(1, 47), (2, 11)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [26, 65, 0]]
** centroid: 7, normalized-entropy: 0.8631205685666311, [(1, 26), (2, 65)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24822297905971696] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24822297905971696, 0.19985498013548195] ***
*** starting iteration: 2; err: [Inf, 0.24822297905971696, 0.19985498013548195] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24822297905971696, 0.19985498013548195, 0.1960645166418708] ***
*** starting iteration: 3; err: [Inf, 0.24822297905971696, 0.19985498013548195, 0.1960645166418708] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24822297905971696, 0.19985498013548195, 0.1960645166418708, 0.19507919629202322] ***
*** finished computation of 7 references, err: [Inf, 0.24822297905971696, 0.19985498013548195, 0.1960645166418708, 0.19507919629202322] ***
*** center 1: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [97, 9, 0]]
** centroid: 2, normalized-entropy: 0.41923299508081985, [(1, 97), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 47, 26]]
** centroid: 3, normalized-entropy: 0.9394532068181357, [(2, 47), (3, 26)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 112, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 24, 0]]
** centroid: 5, normalized-entropy: 0.8366407419411671, [(1, 66), (2, 24)]
*** center 6: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 73, 0]]
** centroid: 7, normalized-entropy: 0.46506984488164627, [(1, 8), (2, 73)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25594562779402713] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25594562779402713, 0.21110935142051535] ***
*** starting iteration: 2; err: [Inf, 0.25594562779402713, 0.21110935142051535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25594562779402713, 0.21110935142051535, 0.20093590478416995] ***
*** starting iteration: 3; err: [Inf, 0.25594562779402713, 0.21110935142051535, 0.20093590478416995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25594562779402713, 0.21110935142051535, 0.20093590478416995, 0.19612016773543905] ***
*** starting iteration: 4; err: [Inf, 0.25594562779402713, 0.21110935142051535, 0.20093590478416995, 0.19612016773543905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25594562779402713, 0.21110935142051535, 0.20093590478416995, 0.19612016773543905, 0.19355434467220145] ***
*** starting iteration: 5; err: [Inf, 0.25594562779402713, 0.21110935142051535, 0.20093590478416995, 0.19612016773543905, 0.19355434467220145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25594562779402713, 0.21110935142051535, 0.20093590478416995, 0.19612016773543905, 0.19355434467220145, 0.19224114589409894] ***
*** starting iteration: 6; err: [Inf, 0.25594562779402713, 0.21110935142051535, 0.20093590478416995, 0.19612016773543905, 0.19355434467220145, 0.19224114589409894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25594562779402713, 0.21110935142051535, 0.20093590478416995, 0.19612016773543905, 0.19355434467220145, 0.19224114589409894, 0.19221481897852857] ***
*** finished computation of 7 references, err: [Inf, 0.25594562779402713, 0.21110935142051535, 0.20093590478416995, 0.19612016773543905, 0.19355434467220145, 0.19224114589409894, 0.19221481897852857] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [82, 19, 0]]
** centroid: 1, normalized-entropy: 0.6975195309289136, [(1, 82), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [56, 45, 0]]
** centroid: 2, normalized-entropy: 0.9914266810680207, [(1, 56), (2, 45)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 45, 27]]
** centroid: 3, normalized-entropy: 0.954434002924965, [(2, 45), (3, 27)]
*** center 4: selecting labels [1] (freq >= 2) [from [107, 1, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [138, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 70, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 69, 0]]
** centroid: 7, normalized-entropy: 0.481225663841737, [(1, 8), (2, 69)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2224050984959463] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2224050984959463, 0.19756395058326612] ***
*** starting iteration: 2; err: [Inf, 0.2224050984959463, 0.19756395058326612] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2224050984959463, 0.19756395058326612, 0.1881416039157385] ***
*** starting iteration: 3; err: [Inf, 0.2224050984959463, 0.19756395058326612, 0.1881416039157385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2224050984959463, 0.19756395058326612, 0.1881416039157385, 0.18583378370228534] ***
*** starting iteration: 4; err: [Inf, 0.2224050984959463, 0.19756395058326612, 0.1881416039157385, 0.18583378370228534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2224050984959463, 0.19756395058326612, 0.1881416039157385, 0.18583378370228534, 0.18468320558428475] ***
*** starting iteration: 5; err: [Inf, 0.2224050984959463, 0.19756395058326612, 0.1881416039157385, 0.18583378370228534, 0.18468320558428475] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2224050984959463, 0.19756395058326612, 0.1881416039157385, 0.18583378370228534, 0.18468320558428475, 0.18408106324420698] ***
*** finished computation of 7 references, err: [Inf, 0.2224050984959463, 0.19756395058326612, 0.1881416039157385, 0.18583378370228534, 0.18468320558428475, 0.18408106324420698] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 87, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 42, 0]]
** centroid: 2, normalized-entropy: 0.9977221075331744, [(1, 47), (2, 42)]
*** center 3: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 82, 25]]
** centroid: 4, normalized-entropy: 0.7843112002044088, [(2, 82), (3, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [97, 4, 0]]
** centroid: 5, normalized-entropy: 0.24047340659188013, [(1, 97), (2, 4)]
*** center 6: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [53, 41, 0]]
** centroid: 7, normalized-entropy: 0.988212082728797, [(1, 53), (2, 41)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27641267660171825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27641267660171825, 0.20430475070250328] ***
*** finished computation of 7 references, err: [Inf, 0.27641267660171825, 0.20430475070250328] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [7, 89, 0]]
** centroid: 1, normalized-entropy: 0.3767150026960246, [(1, 7), (2, 89)]
*** center 2: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [144, 18, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 144), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [73, 1, 0]]
** centroid: 4, normalized-entropy: 0.10327508457163559, [(1, 73), (2, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [14, 75, 0]]
** centroid: 6, normalized-entropy: 0.6278191534832795, [(1, 14), (2, 75)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 82, 26]]
** centroid: 7, normalized-entropy: 0.7962699368824384, [(2, 82), (3, 26)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2318129912200293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2318129912200293, 0.2025780587728] ***
*** finished computation of 7 references, err: [Inf, 0.2318129912200293, 0.2025780587728] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [67, 29, 0]]
** centroid: 1, normalized-entropy: 0.8838226609360483, [(1, 67), (2, 29)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 21, 27]]
** centroid: 2, normalized-entropy: 0.9886994082884974, [(2, 21), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [78, 26, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 78), (2, 26)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [111, 2, 0]]
** centroid: 4, normalized-entropy: 0.12831912909782706, [(1, 111), (2, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [128, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 92, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [7, 79, 0]]
** centroid: 7, normalized-entropy: 0.40707680632541937, [(1, 7), (2, 79)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2381747456594207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2381747456594207, 0.2009446041063703] ***
*** finished computation of 7 references, err: [Inf, 0.2381747456594207, 0.2009446041063703] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [69, 20, 0]]
** centroid: 1, normalized-entropy: 0.7686913027030167, [(1, 69), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [110, 26, 0]]
** centroid: 2, normalized-entropy: 0.7039260680195971, [(1, 110), (2, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [16, 67, 0]]
** centroid: 3, normalized-entropy: 0.7072324944713736, [(1, 16), (2, 67)]
*** center 4: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 47, 22]]
** centroid: 5, normalized-entropy: 0.903116172156872, [(2, 47), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [76, 12, 0]]
** centroid: 6, normalized-entropy: 0.5746356978376794, [(1, 76), (2, 12)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 84, 3]]
** centroid: 7, normalized-entropy: 0.21639693245126485, [(2, 84), (3, 3)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.411995018844254] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.411995018844254, 0.30548817733361355] ***
*** starting iteration: 2; err: [Inf, 0.411995018844254, 0.30548817733361355] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.411995018844254, 0.30548817733361355, 0.30369307048272515] ***
*** starting iteration: 3; err: [Inf, 0.411995018844254, 0.30548817733361355, 0.30369307048272515] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.411995018844254, 0.30548817733361355, 0.30369307048272515, 0.3029830052393085] ***
*** finished computation of 3 references, err: [Inf, 0.411995018844254, 0.30548817733361355, 0.30369307048272515, 0.3029830052393085] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [238, 21, 0]]
** centroid: 1, normalized-entropy: 0.40597703847557104, [(1, 238), (2, 21)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 197, 25]]
** centroid: 2, normalized-entropy: 0.5077464376236455, [(2, 197), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [148, 38, 0]]
** centroid: 3, normalized-entropy: 0.7304472862481346, [(1, 148), (2, 38)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3501989885957705] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3501989885957705, 0.2351541956900633] ***
*** finished computation of 3 references, err: [Inf, 0.3501989885957705, 0.2351541956900633] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [93, 158, 26]]
** centroid: 1, normalized-entropy: 0.8271694512780401, [(1, 93), (2, 158), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [189, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [93, 107, 0]]
** centroid: 3, normalized-entropy: 0.9964625048848765, [(1, 93), (2, 107)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3746280876564971] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3746280876564971, 0.243042542351999] ***
*** finished computation of 3 references, err: [Inf, 0.3746280876564971, 0.243042542351999] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [242, 48, 0]]
** centroid: 1, normalized-entropy: 0.6473466643078056, [(1, 242), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [149, 44, 0]]
** centroid: 2, normalized-entropy: 0.774472059190862, [(1, 149), (2, 44)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 157, 27]]
** centroid: 3, normalized-entropy: 0.601619455326583, [(2, 157), (3, 27)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3115152113608781] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3115152113608781, 0.2454153192459956] ***
*** finished computation of 3 references, err: [Inf, 0.3115152113608781, 0.2454153192459956] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [272, 37, 0]]
** centroid: 1, normalized-entropy: 0.5286162080067581, [(1, 272), (2, 37)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 162, 25]]
** centroid: 2, normalized-entropy: 0.567471437365298, [(2, 162), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [114, 57, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 114), (2, 57)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31476197882860274] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31476197882860274, 0.24238566748340623] ***
*** starting iteration: 2; err: [Inf, 0.31476197882860274, 0.24238566748340623] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31476197882860274, 0.24238566748340623, 0.23536540430274094] ***
*** starting iteration: 3; err: [Inf, 0.31476197882860274, 0.24238566748340623, 0.23536540430274094] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31476197882860274, 0.24238566748340623, 0.23536540430274094, 0.23371287094647283] ***
*** starting iteration: 4; err: [Inf, 0.31476197882860274, 0.24238566748340623, 0.23536540430274094, 0.23371287094647283] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31476197882860274, 0.24238566748340623, 0.23536540430274094, 0.23371287094647283, 0.23332909190350468] ***
*** finished computation of 3 references, err: [Inf, 0.31476197882860274, 0.24238566748340623, 0.23536540430274094, 0.23371287094647283, 0.23332909190350468] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [90, 144, 24]]
** centroid: 1, normalized-entropy: 0.8317550683003422, [(1, 90), (2, 144), (3, 24)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [87, 121, 2]]
** centroid: 2, normalized-entropy: 0.6617943049143687, [(1, 87), (2, 121), (3, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [198, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3570082526098283] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3570082526098283, 0.2424235775357467] ***
*** starting iteration: 2; err: [Inf, 0.3570082526098283, 0.2424235775357467] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3570082526098283, 0.2424235775357467, 0.23993143262523137] ***
*** starting iteration: 3; err: [Inf, 0.3570082526098283, 0.2424235775357467, 0.23993143262523137] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3570082526098283, 0.2424235775357467, 0.23993143262523137, 0.23953927582272258] ***
*** finished computation of 3 references, err: [Inf, 0.3570082526098283, 0.2424235775357467, 0.23993143262523137, 0.23953927582272258] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [244, 1, 0]]
** centroid: 1, normalized-entropy: 0.038270957919532736, [(1, 244), (2, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [15, 193, 27]]
** centroid: 2, normalized-entropy: 0.5333422451054234, [(1, 15), (2, 193), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [132, 55, 0]]
** centroid: 3, normalized-entropy: 0.8739810481273581, [(1, 132), (2, 55)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32627308251115605] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32627308251115605, 0.24156582434843205] ***
*** starting iteration: 2; err: [Inf, 0.32627308251115605, 0.24156582434843205] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32627308251115605, 0.24156582434843205, 0.23541386147634288] ***
*** starting iteration: 3; err: [Inf, 0.32627308251115605, 0.24156582434843205, 0.23541386147634288] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32627308251115605, 0.24156582434843205, 0.23541386147634288, 0.2344651051456279] ***
*** finished computation of 3 references, err: [Inf, 0.32627308251115605, 0.24156582434843205, 0.23541386147634288, 0.2344651051456279] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [239, 8, 0]]
** centroid: 1, normalized-entropy: 0.20623295179763768, [(1, 239), (2, 8)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 187, 25]]
** centroid: 2, normalized-entropy: 0.35583099335065793, [(1, 1), (2, 187), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [146, 61, 0]]
** centroid: 3, normalized-entropy: 0.874697763355274, [(1, 146), (2, 61)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.40108581081972466] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40108581081972466, 0.23346507725482052] ***
*** starting iteration: 2; err: [Inf, 0.40108581081972466, 0.23346507725482052] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40108581081972466, 0.23346507725482052, 0.23198385293212337] ***
*** starting iteration: 3; err: [Inf, 0.40108581081972466, 0.23346507725482052, 0.23198385293212337] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40108581081972466, 0.23346507725482052, 0.23198385293212337, 0.23171330221813988] ***
*** finished computation of 3 references, err: [Inf, 0.40108581081972466, 0.23346507725482052, 0.23198385293212337, 0.23171330221813988] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [75, 153, 24]]
** centroid: 1, normalized-entropy: 0.8079248253174061, [(1, 75), (2, 153), (3, 24)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [106, 112, 2]]
** centroid: 2, normalized-entropy: 0.6719855500299644, [(1, 106), (2, 112), (3, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [194, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3071121504164484] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3071121504164484, 0.24669560999155737] ***
*** starting iteration: 2; err: [Inf, 0.3071121504164484, 0.24669560999155737] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3071121504164484, 0.24669560999155737, 0.23659746218863678] ***
*** starting iteration: 3; err: [Inf, 0.3071121504164484, 0.24669560999155737, 0.23659746218863678] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3071121504164484, 0.24669560999155737, 0.23659746218863678, 0.2343036064178567] ***
*** starting iteration: 4; err: [Inf, 0.3071121504164484, 0.24669560999155737, 0.23659746218863678, 0.2343036064178567] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3071121504164484, 0.24669560999155737, 0.23659746218863678, 0.2343036064178567, 0.23414548536597835] ***
*** finished computation of 3 references, err: [Inf, 0.3071121504164484, 0.24669560999155737, 0.23659746218863678, 0.2343036064178567, 0.23414548536597835] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [84, 169, 27]]
** centroid: 1, normalized-entropy: 0.8114522623388352, [(1, 84), (2, 169), (3, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [209, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [98, 80, 0]]
** centroid: 3, normalized-entropy: 0.9926108898749407, [(1, 98), (2, 80)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3576943372785375] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3576943372785375, 0.23980362103997857] ***
*** starting iteration: 2; err: [Inf, 0.3576943372785375, 0.23980362103997857] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3576943372785375, 0.23980362103997857, 0.2378941972640858] ***
*** starting iteration: 3; err: [Inf, 0.3576943372785375, 0.23980362103997857, 0.2378941972640858] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3576943372785375, 0.23980362103997857, 0.2378941972640858, 0.23733739732699036] ***
*** finished computation of 3 references, err: [Inf, 0.3576943372785375, 0.23980362103997857, 0.2378941972640858, 0.23733739732699036] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [221, 43, 0]]
** centroid: 1, normalized-entropy: 0.6411522630035421, [(1, 221), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [165, 28, 0]]
** centroid: 2, normalized-entropy: 0.5973839638578601, [(1, 165), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 185, 25]]
** centroid: 3, normalized-entropy: 0.5266170655714281, [(2, 185), (3, 25)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21607257973950905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21607257973950905, 0.19071432800862836] ***
*** starting iteration: 2; err: [Inf, 0.21607257973950905, 0.19071432800862836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21607257973950905, 0.19071432800862836, 0.1895869297206866] ***
*** starting iteration: 3; err: [Inf, 0.21607257973950905, 0.19071432800862836, 0.1895869297206866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21607257973950905, 0.19071432800862836, 0.1895869297206866, 0.18936181575054298] ***
*** finished computation of 7 references, err: [Inf, 0.21607257973950905, 0.19071432800862836, 0.1895869297206866, 0.18936181575054298] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 67, 26]]
** centroid: 2, normalized-entropy: 0.8548640967818041, [(2, 67), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 15, 0]]
** centroid: 3, normalized-entropy: 0.7273006785144036, [(1, 59), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 77, 0]]
** centroid: 4, normalized-entropy: 0.9798687566511527, [(1, 55), (2, 77)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 105, 0]]
** centroid: 5, normalized-entropy: 0.2667649878030262, [(1, 5), (2, 105)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23124005611583792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23124005611583792, 0.1926536900975715] ***
*** starting iteration: 2; err: [Inf, 0.23124005611583792, 0.1926536900975715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23124005611583792, 0.1926536900975715, 0.19065918202331844] ***
*** starting iteration: 3; err: [Inf, 0.23124005611583792, 0.1926536900975715, 0.19065918202331844] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23124005611583792, 0.1926536900975715, 0.19065918202331844, 0.19025829344404221] ***
*** finished computation of 7 references, err: [Inf, 0.23124005611583792, 0.1926536900975715, 0.19065918202331844, 0.19025829344404221] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [74, 9, 0]]
** centroid: 1, normalized-entropy: 0.4951734787020683, [(1, 74), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [82, 4, 0]]
** centroid: 2, normalized-entropy: 0.2713895875081112, [(1, 82), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 60, 27]]
** centroid: 3, normalized-entropy: 0.8935711016541908, [(2, 60), (3, 27)]
*** center 4: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [108, 13, 0]]
** centroid: 5, normalized-entropy: 0.4921395466176624, [(1, 108), (2, 13)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 106, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [30, 57, 0]]
** centroid: 7, normalized-entropy: 0.9293636260137188, [(1, 30), (2, 57)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24365738588573782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24365738588573782, 0.19957758003993817] ***
*** starting iteration: 2; err: [Inf, 0.24365738588573782, 0.19957758003993817] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24365738588573782, 0.19957758003993817, 0.1934372735645404] ***
*** starting iteration: 3; err: [Inf, 0.24365738588573782, 0.19957758003993817, 0.1934372735645404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24365738588573782, 0.19957758003993817, 0.1934372735645404, 0.1928043391376125] ***
*** finished computation of 7 references, err: [Inf, 0.24365738588573782, 0.19957758003993817, 0.1934372735645404, 0.1928043391376125] ***
*** center 1: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [81, 11, 0]]
** centroid: 2, normalized-entropy: 0.5281098034628294, [(1, 81), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 71, 25]]
** centroid: 3, normalized-entropy: 0.8273744775003173, [(2, 71), (3, 25)]
*** center 4: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [39, 70, 0]]
** centroid: 5, normalized-entropy: 0.9408403089808224, [(1, 39), (2, 70)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [65, 4, 0]]
** centroid: 6, normalized-entropy: 0.3193373865339728, [(1, 65), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 100, 0]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(1, 5), (2, 100)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23818247950728144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23818247950728144, 0.19369819638942992] ***
*** starting iteration: 2; err: [Inf, 0.23818247950728144, 0.19369819638942992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23818247950728144, 0.19369819638942992, 0.19124770083663253] ***
*** starting iteration: 3; err: [Inf, 0.23818247950728144, 0.19369819638942992, 0.19124770083663253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23818247950728144, 0.19369819638942992, 0.19124770083663253, 0.1900966253688184] ***
*** starting iteration: 4; err: [Inf, 0.23818247950728144, 0.19369819638942992, 0.19124770083663253, 0.1900966253688184] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23818247950728144, 0.19369819638942992, 0.19124770083663253, 0.1900966253688184, 0.18973072709979955] ***
*** finished computation of 7 references, err: [Inf, 0.23818247950728144, 0.19369819638942992, 0.19124770083663253, 0.1900966253688184, 0.18973072709979955] ***
*** center 1: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 74, 26]]
** centroid: 2, normalized-entropy: 0.8267463724926181, [(2, 74), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [91, 3, 0]]
** centroid: 3, normalized-entropy: 0.2039058755048202, [(1, 91), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [51, 53, 0]]
** centroid: 4, normalized-entropy: 0.9997332130219014, [(1, 51), (2, 53)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [39, 62, 0]]
** centroid: 5, normalized-entropy: 0.9622623958249239, [(1, 39), (2, 62)]
*** center 6: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 73, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23871022265549677] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23871022265549677, 0.19359828711723326] ***
*** starting iteration: 2; err: [Inf, 0.23871022265549677, 0.19359828711723326] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23871022265549677, 0.19359828711723326, 0.19098638362115783] ***
*** starting iteration: 3; err: [Inf, 0.23871022265549677, 0.19359828711723326, 0.19098638362115783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23871022265549677, 0.19359828711723326, 0.19098638362115783, 0.18995614158830185] ***
*** starting iteration: 4; err: [Inf, 0.23871022265549677, 0.19359828711723326, 0.19098638362115783, 0.18995614158830185] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23871022265549677, 0.19359828711723326, 0.19098638362115783, 0.18995614158830185, 0.1896647073030388] ***
*** finished computation of 7 references, err: [Inf, 0.23871022265549677, 0.19359828711723326, 0.19098638362115783, 0.18995614158830185, 0.1896647073030388] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [79, 23, 0]]
** centroid: 2, normalized-entropy: 0.7700664782920602, [(1, 79), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 72, 26]]
** centroid: 3, normalized-entropy: 0.834648285181383, [(2, 72), (3, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 62, 0]]
** centroid: 5, normalized-entropy: 0.9862958176866949, [(1, 47), (2, 62)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [73, 27, 0]]
** centroid: 6, normalized-entropy: 0.8414646362081756, [(1, 73), (2, 27)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 65, 1]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22449028160495646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22449028160495646, 0.19381870152121564] ***
*** starting iteration: 2; err: [Inf, 0.22449028160495646, 0.19381870152121564] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22449028160495646, 0.19381870152121564, 0.1916351752541401] ***
*** starting iteration: 3; err: [Inf, 0.22449028160495646, 0.19381870152121564, 0.1916351752541401] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22449028160495646, 0.19381870152121564, 0.1916351752541401, 0.1911111031114396] ***
*** finished computation of 7 references, err: [Inf, 0.22449028160495646, 0.19381870152121564, 0.1916351752541401, 0.1911111031114396] ***
*** center 1: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 61, 25]]
** centroid: 2, normalized-entropy: 0.869620774054375, [(2, 61), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 6, 0]]
** centroid: 3, normalized-entropy: 0.4178642624458583, [(1, 65), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [85, 10, 0]]
** centroid: 4, normalized-entropy: 0.48546076074591343, [(1, 85), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [12, 91, 0]]
** centroid: 5, normalized-entropy: 0.519230019739187, [(1, 12), (2, 91)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [14, 88, 0]]
** centroid: 6, normalized-entropy: 0.577004250315725, [(1, 14), (2, 88)]
*** center 7: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19490503874962573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19490503874962573, 0.1532317216133324] ***
*** starting iteration: 2; err: [Inf, 0.19490503874962573, 0.1532317216133324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19490503874962573, 0.1532317216133324, 0.14899137781446312] ***
*** starting iteration: 3; err: [Inf, 0.19490503874962573, 0.1532317216133324, 0.14899137781446312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19490503874962573, 0.1532317216133324, 0.14899137781446312, 0.14808239263563497] ***
*** finished computation of 7 references, err: [Inf, 0.19490503874962573, 0.1532317216133324, 0.14899137781446312, 0.14808239263563497] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [75, 35, 0]]
** centroid: 1, normalized-entropy: 0.9023932827949788, [(1, 75), (2, 35)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 21, 0]]
** centroid: 2, normalized-entropy: 0.8554508105601307, [(1, 54), (2, 21)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 78, 26]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 78), (3, 26)]
*** center 4: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [5, 115, 0]]
** centroid: 5, normalized-entropy: 0.24988229283318547, [(1, 5), (2, 115)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [59, 16, 0]]
** centroid: 6, normalized-entropy: 0.7478061583312324, [(1, 59), (2, 16)]
*** center 7: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1956318297592373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1956318297592373, 0.15443915891638402] ***
*** starting iteration: 2; err: [Inf, 0.1956318297592373, 0.15443915891638402] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1956318297592373, 0.15443915891638402, 0.15004301012941879] ***
*** starting iteration: 3; err: [Inf, 0.1956318297592373, 0.15443915891638402, 0.15004301012941879] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1956318297592373, 0.15443915891638402, 0.15004301012941879, 0.1494837420047617] ***
*** finished computation of 7 references, err: [Inf, 0.1956318297592373, 0.15443915891638402, 0.15004301012941879, 0.1494837420047617] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 100, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [72, 21, 0]]
** centroid: 3, normalized-entropy: 0.7706290693639406, [(1, 72), (2, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [94, 15, 0]]
** centroid: 5, normalized-entropy: 0.5779576184299016, [(1, 94), (2, 15)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 82, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 31, 27]]
** centroid: 7, normalized-entropy: 0.9965663713274552, [(2, 31), (3, 27)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19295861232729777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19295861232729777, 0.15058584306095874] ***
*** starting iteration: 2; err: [Inf, 0.19295861232729777, 0.15058584306095874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19295861232729777, 0.15058584306095874, 0.14651771694997037] ***
*** starting iteration: 3; err: [Inf, 0.19295861232729777, 0.15058584306095874, 0.14651771694997037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19295861232729777, 0.15058584306095874, 0.14651771694997037, 0.1451383553385299] ***
*** finished computation of 7 references, err: [Inf, 0.19295861232729777, 0.15058584306095874, 0.14651771694997037, 0.1451383553385299] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 81, 25]]
** centroid: 1, normalized-entropy: 0.7880689925063812, [(2, 81), (3, 25)]
*** center 2: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [80, 3, 0]]
** centroid: 3, normalized-entropy: 0.2243269603450881, [(1, 80), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [59, 49, 0]]
** centroid: 4, normalized-entropy: 0.9938067403672294, [(1, 59), (2, 49)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [66, 35, 0]]
** centroid: 5, normalized-entropy: 0.9309350721504903, [(1, 66), (2, 35)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 88, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 11)
[0.9479988971006934, 0.9320068571565577, 0.9289768810726895, 0.9249938561315806, 0.918007828187469, 0.9170038301774829, 0.9169978361595127, 0.892988797180414, 0.8739637841434248, 0.8739428050805297, 0.8021074967182752]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9479988971006934
finished with 12
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.23831032594671478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23831032594671478, 0.21002760997486744] ***
*** starting iteration: 2; err: [Inf, 0.23831032594671478, 0.21002760997486744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23831032594671478, 0.21002760997486744, 0.20175374387665554] ***
*** starting iteration: 3; err: [Inf, 0.23831032594671478, 0.21002760997486744, 0.20175374387665554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23831032594671478, 0.21002760997486744, 0.20175374387665554, 0.1995342892329642] ***
*** finished computation of 7 references, err: [Inf, 0.23831032594671478, 0.21002760997486744, 0.20175374387665554, 0.1995342892329642] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [29, 60, 0]]
** centroid: 1, normalized-entropy: 0.9106223680988619, [(1, 29), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 27, 0]]
** centroid: 2, normalized-entropy: 0.8691375806126381, [(1, 66), (2, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 109, 26]]
** centroid: 4, normalized-entropy: 0.7068635668852503, [(2, 109), (3, 26)]
*** center 5: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [86, 12, 0]]
** centroid: 6, normalized-entropy: 0.5363596511250623, [(1, 86), (2, 12)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [44, 57, 0]]
** centroid: 7, normalized-entropy: 0.9880162151534644, [(1, 44), (2, 57)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23694108737523722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23694108737523722, 0.2034943973704212] ***
*** starting iteration: 2; err: [Inf, 0.23694108737523722, 0.2034943973704212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23694108737523722, 0.2034943973704212, 0.19508904607678906] ***
*** starting iteration: 3; err: [Inf, 0.23694108737523722, 0.2034943973704212, 0.19508904607678906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23694108737523722, 0.2034943973704212, 0.19508904607678906, 0.19188000237697672] ***
*** finished computation of 7 references, err: [Inf, 0.23694108737523722, 0.2034943973704212, 0.19508904607678906, 0.19188000237697672] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 116, 27]]
** centroid: 1, normalized-entropy: 0.6989779242384453, [(2, 116), (3, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 51, 0]]
** centroid: 2, normalized-entropy: 0.9977724720899819, [(1, 57), (2, 51)]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [33, 48, 0]]
** centroid: 4, normalized-entropy: 0.975119064940866, [(1, 33), (2, 48)]
*** center 5: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [88, 34, 0]]
** centroid: 6, normalized-entropy: 0.8536576732793314, [(1, 88), (2, 34)]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25314886711895285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25314886711895285, 0.2106776389040645] ***
*** starting iteration: 2; err: [Inf, 0.25314886711895285, 0.2106776389040645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25314886711895285, 0.2106776389040645, 0.20223530064228046] ***
*** starting iteration: 3; err: [Inf, 0.25314886711895285, 0.2106776389040645, 0.20223530064228046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25314886711895285, 0.2106776389040645, 0.20223530064228046, 0.19748991612495778] ***
*** finished computation of 7 references, err: [Inf, 0.25314886711895285, 0.2106776389040645, 0.20223530064228046, 0.19748991612495778] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [69, 6, 0]]
** centroid: 1, normalized-entropy: 0.4021791902022729, [(1, 69), (2, 6)]
*** center 2: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [92, 39, 0]]
** centroid: 3, normalized-entropy: 0.8784734863246803, [(1, 92), (2, 39)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 95, 25]]
** centroid: 4, normalized-entropy: 0.7382848661434506, [(2, 95), (3, 25)]
*** center 5: selecting labels [1] (freq >= 2) [from [88, 1, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 115, 0]]
** centroid: 7, normalized-entropy: 0.21220132752136248, [(1, 4), (2, 115)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9479988971006934, 0.9320068571565577, 0.9289768810726895, 0.9279908651166137, 0.9249938561315806, 0.918007828187469, 0.9170038301774829, 0.9169978361595127, 0.892988797180414, 0.8739637841434248, 0.8739428050805297, 0.8021074967182752]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9479988971006934
finished with 14
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.26948095157507573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26948095157507573, 0.20506935010177527] ***
*** starting iteration: 2; err: [Inf, 0.26948095157507573, 0.20506935010177527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26948095157507573, 0.20506935010177527, 0.19672964907365967] ***
*** starting iteration: 3; err: [Inf, 0.26948095157507573, 0.20506935010177527, 0.19672964907365967] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26948095157507573, 0.20506935010177527, 0.19672964907365967, 0.19217745080176327] ***
*** finished computation of 7 references, err: [Inf, 0.26948095157507573, 0.20506935010177527, 0.19672964907365967, 0.19217745080176327] ***
*** center 1: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 31, 26]]
** centroid: 2, normalized-entropy: 0.9944423248022589, [(2, 31), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [75, 12, 0]]
** centroid: 3, normalized-entropy: 0.5787946246321198, [(1, 75), (2, 12)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 81, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [103, 8, 0]]
** centroid: 5, normalized-entropy: 0.3736090708557681, [(1, 103), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [75, 34, 0]]
** centroid: 6, normalized-entropy: 0.8953848900090126, [(1, 75), (2, 34)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 99, 0]]
** centroid: 7, normalized-entropy: 0.08079313589591128, [(1, 1), (2, 99)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23322230900569388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23322230900569388, 0.20793345260379398] ***
*** starting iteration: 2; err: [Inf, 0.23322230900569388, 0.20793345260379398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23322230900569388, 0.20793345260379398, 0.20355341722839687] ***
*** starting iteration: 3; err: [Inf, 0.23322230900569388, 0.20793345260379398, 0.20355341722839687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23322230900569388, 0.20793345260379398, 0.20355341722839687, 0.201135096077373] ***
*** finished computation of 7 references, err: [Inf, 0.23322230900569388, 0.20793345260379398, 0.20355341722839687, 0.201135096077373] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 37, 21]]
** centroid: 1, normalized-entropy: 0.9443871950133461, [(2, 37), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [101, 12, 0]]
** centroid: 2, normalized-entropy: 0.48833020341885913, [(1, 101), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 61, 6]]
** centroid: 3, normalized-entropy: 0.43497348007474274, [(2, 61), (3, 6)]
*** center 4: selecting labels [1] (freq >= 1) [from [118, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 44, 0]]
** centroid: 5, normalized-entropy: 0.9828586897127057, [(1, 60), (2, 44)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [12, 92, 0]]
** centroid: 6, normalized-entropy: 0.5159469300074472, [(1, 12), (2, 92)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [100, 3, 0]]
** centroid: 7, normalized-entropy: 0.18999075553626757, [(1, 100), (2, 3)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26593846994182696] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26593846994182696, 0.20896977021860175] ***
*** starting iteration: 2; err: [Inf, 0.26593846994182696, 0.20896977021860175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26593846994182696, 0.20896977021860175, 0.19835941627415] ***
*** starting iteration: 3; err: [Inf, 0.26593846994182696, 0.20896977021860175, 0.19835941627415] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26593846994182696, 0.20896977021860175, 0.19835941627415, 0.19609126972657318] ***
*** finished computation of 7 references, err: [Inf, 0.26593846994182696, 0.20896977021860175, 0.19835941627415, 0.19609126972657318] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [24, 90, 0]]
** centroid: 1, normalized-entropy: 0.7424875695421234, [(1, 24), (2, 90)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [62, 16, 0]]
** centroid: 2, normalized-entropy: 0.7320666900931937, [(1, 62), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 112, 25]]
** centroid: 3, normalized-entropy: 0.6854761996406745, [(2, 112), (3, 25)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 32, 0]]
** centroid: 4, normalized-entropy: 0.9389320105807949, [(1, 58), (2, 32)]
*** center 5: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [114, 6, 0]]
** centroid: 6, normalized-entropy: 0.2863969571159561, [(1, 114), (2, 6)]
*** center 7: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23508200722441705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23508200722441705, 0.16458717205033108] ***
*** starting iteration: 2; err: [Inf, 0.23508200722441705, 0.16458717205033108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23508200722441705, 0.16458717205033108, 0.15828623499318556] ***
*** starting iteration: 3; err: [Inf, 0.23508200722441705, 0.16458717205033108, 0.15828623499318556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23508200722441705, 0.16458717205033108, 0.15828623499318556, 0.1553949606853961] ***
*** finished computation of 7 references, err: [Inf, 0.23508200722441705, 0.16458717205033108, 0.15828623499318556, 0.1553949606853961] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [6, 105, 0]]
** centroid: 1, normalized-entropy: 0.30337483608641397, [(1, 6), (2, 105)]
*** center 2: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [92, 4, 0]]
** centroid: 3, normalized-entropy: 0.24988229283318547, [(1, 92), (2, 4)]
*** center 4: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 93, 26]]
** centroid: 5, normalized-entropy: 0.7573958968817643, [(2, 93), (3, 26)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [81, 55, 0]]
** centroid: 6, normalized-entropy: 0.973472881856877, [(1, 81), (2, 55)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [75, 8, 0]]
** centroid: 7, normalized-entropy: 0.4574321808988397, [(1, 75), (2, 8)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18850569525940242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18850569525940242, 0.16199907511779885] ***
*** starting iteration: 2; err: [Inf, 0.18850569525940242, 0.16199907511779885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18850569525940242, 0.16199907511779885, 0.1575947500796042] ***
*** starting iteration: 3; err: [Inf, 0.18850569525940242, 0.16199907511779885, 0.1575947500796042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18850569525940242, 0.16199907511779885, 0.1575947500796042, 0.1535456895163615] ***
*** finished computation of 7 references, err: [Inf, 0.18850569525940242, 0.16199907511779885, 0.1575947500796042, 0.1535456895163615] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [45, 46, 0]]
** centroid: 1, normalized-entropy: 0.999912889501356, [(1, 45), (2, 46)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [22, 76, 0]]
** centroid: 2, normalized-entropy: 0.7682814090975241, [(1, 22), (2, 76)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 92, 27]]
** centroid: 3, normalized-entropy: 0.7725516917477853, [(2, 92), (3, 27)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 30, 0]]
** centroid: 4, normalized-entropy: 0.8960382325345574, [(1, 66), (2, 30)]
*** center 5: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [73, 5, 0]]
** centroid: 7, normalized-entropy: 0.34351974100740135, [(1, 73), (2, 5)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21631622212262464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21631622212262464, 0.1662491166083117] ***
*** starting iteration: 2; err: [Inf, 0.21631622212262464, 0.1662491166083117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21631622212262464, 0.1662491166083117, 0.1544892297362325] ***
*** starting iteration: 3; err: [Inf, 0.21631622212262464, 0.1662491166083117, 0.1544892297362325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21631622212262464, 0.1662491166083117, 0.1544892297362325, 0.1494503104780009] ***
*** finished computation of 7 references, err: [Inf, 0.21631622212262464, 0.1662491166083117, 0.1544892297362325, 0.1494503104780009] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [101, 5, 0]]
** centroid: 1, normalized-entropy: 0.27425064105029284, [(1, 101), (2, 5)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 77, 25]]
** centroid: 2, normalized-entropy: 0.8034158480707552, [(2, 77), (3, 25)]
*** center 3: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [8, 65, 0]]
** centroid: 4, normalized-entropy: 0.4986751363204345, [(1, 8), (2, 65)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 46, 0]]
** centroid: 5, normalized-entropy: 0.9991802351145687, [(1, 43), (2, 46)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [24, 63, 0]]
** centroid: 6, normalized-entropy: 0.8497511372532974, [(1, 24), (2, 63)]
*** center 7: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9479988971006934, 0.9429849010687334, 0.9320068571565577, 0.9289768810726895, 0.9279908651166137, 0.9249938561315806, 0.918007828187469, 0.9179868491245737, 0.9170038301774829, 0.9169978361595127, 0.892988797180414, 0.8739637841434248, 0.8739428050805297, 0.8021074967182752]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9479988971006934
finished with 15
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.30950267236489615] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30950267236489615, 0.24552982834562123] ***
*** starting iteration: 2; err: [Inf, 0.30950267236489615, 0.24552982834562123] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30950267236489615, 0.24552982834562123, 0.23757814336777874] ***
*** starting iteration: 3; err: [Inf, 0.30950267236489615, 0.24552982834562123, 0.23757814336777874] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30950267236489615, 0.24552982834562123, 0.23757814336777874, 0.23669324634322622] ***
*** finished computation of 3 references, err: [Inf, 0.30950267236489615, 0.24552982834562123, 0.23757814336777874, 0.23669324634322622] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [251, 22, 0]]
** centroid: 1, normalized-entropy: 0.4042409224155875, [(1, 251), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [124, 66, 0]]
** centroid: 2, normalized-entropy: 0.9316958485118404, [(1, 124), (2, 66)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 177, 26]]
** centroid: 3, normalized-entropy: 0.5521456953311914, [(2, 177), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3328939379518223] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3328939379518223, 0.2374674165705177] ***
*** starting iteration: 2; err: [Inf, 0.3328939379518223, 0.2374674165705177] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3328939379518223, 0.2374674165705177, 0.23445656935361842] ***
*** starting iteration: 3; err: [Inf, 0.3328939379518223, 0.2374674165705177, 0.23445656935361842] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3328939379518223, 0.2374674165705177, 0.23445656935361842, 0.23411704602091388] ***
*** finished computation of 3 references, err: [Inf, 0.3328939379518223, 0.2374674165705177, 0.23445656935361842, 0.23411704602091388] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [84, 169, 27]]
** centroid: 1, normalized-entropy: 0.8114522623388352, [(1, 84), (2, 169), (3, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [209, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [98, 80, 0]]
** centroid: 3, normalized-entropy: 0.9926108898749407, [(1, 98), (2, 80)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3774918156160765] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3774918156160765, 0.2351111222862795] ***
*** starting iteration: 2; err: [Inf, 0.3774918156160765, 0.2351111222862795] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3774918156160765, 0.2351111222862795, 0.23445198145824886] ***
*** finished computation of 3 references, err: [Inf, 0.3774918156160765, 0.2351111222862795, 0.23445198145824886] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [239, 7, 0]]
** centroid: 1, normalized-entropy: 0.18658502744573513, [(1, 239), (2, 7)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 186, 25]]
** centroid: 2, normalized-entropy: 0.3569490817438365, [(1, 1), (2, 186), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [146, 63, 0]]
** centroid: 3, normalized-entropy: 0.8830384585068288, [(1, 146), (2, 63)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 15)
[0.9479988971006934, 0.9429849010687334, 0.9320068571565577, 0.9289768810726895, 0.9279908651166137, 0.9249938561315806, 0.918007828187469, 0.9179868491245737, 0.9170038301774829, 0.9169978361595127, 0.892988797180414, 0.8820227413041785, 0.8739637841434248, 0.8739428050805297, 0.8021074967182752]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9479988971006934
finished with 17
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.36314883436755957] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36314883436755957, 0.3084783536387613] ***
*** starting iteration: 2; err: [Inf, 0.36314883436755957, 0.3084783536387613] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36314883436755957, 0.3084783536387613, 0.2990687927902416] ***
*** starting iteration: 3; err: [Inf, 0.36314883436755957, 0.3084783536387613, 0.2990687927902416] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36314883436755957, 0.3084783536387613, 0.2990687927902416, 0.2965102388786415] ***
*** finished computation of 3 references, err: [Inf, 0.36314883436755957, 0.3084783536387613, 0.2990687927902416, 0.2965102388786415] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [96, 109, 0]]
** centroid: 1, normalized-entropy: 0.9970972142863438, [(1, 96), (2, 109)]
*** center 2: selecting labels [1] (freq >= 2) [from [203, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [76, 156, 26]]
** centroid: 3, normalized-entropy: 0.8151220214149241, [(1, 76), (2, 156), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36791607317259195] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36791607317259195, 0.2953931816477982] ***
*** starting iteration: 2; err: [Inf, 0.36791607317259195, 0.2953931816477982] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36791607317259195, 0.2953931816477982, 0.2940306666326699] ***
*** starting iteration: 3; err: [Inf, 0.36791607317259195, 0.2953931816477982, 0.2940306666326699] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36791607317259195, 0.2953931816477982, 0.2940306666326699, 0.2941177033049905] ***
*** finished computation of 3 references, err: [Inf, 0.36791607317259195, 0.2953931816477982, 0.2940306666326699, 0.2941177033049905] ***
*** center 1: selecting labels [1] (freq >= 2) [from [216, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [79, 157, 27]]
** centroid: 2, normalized-entropy: 0.8218869886364043, [(1, 79), (2, 157), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [96, 92, 0]]
** centroid: 3, normalized-entropy: 0.9996734260048917, [(1, 96), (2, 92)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4179362357362639] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4179362357362639, 0.3183636551477138] ***
*** starting iteration: 2; err: [Inf, 0.4179362357362639, 0.3183636551477138] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4179362357362639, 0.3183636551477138, 0.30194316597339854] ***
*** starting iteration: 3; err: [Inf, 0.4179362357362639, 0.3183636551477138, 0.30194316597339854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4179362357362639, 0.3183636551477138, 0.30194316597339854, 0.2994642583723145] ***
*** finished computation of 3 references, err: [Inf, 0.4179362357362639, 0.3183636551477138, 0.30194316597339854, 0.2994642583723145] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [164, 66, 0]]
** centroid: 1, normalized-entropy: 0.8647572655747071, [(1, 164), (2, 66)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [221, 8, 0]]
** centroid: 2, normalized-entropy: 0.21856420021263673, [(1, 221), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 182, 25]]
** centroid: 3, normalized-entropy: 0.5315786035837172, [(2, 182), (3, 25)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29025163985621016] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29025163985621016, 0.243590759552523] ***
*** starting iteration: 2; err: [Inf, 0.29025163985621016, 0.243590759552523] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29025163985621016, 0.243590759552523, 0.23832012152903387] ***
*** starting iteration: 3; err: [Inf, 0.29025163985621016, 0.243590759552523, 0.23832012152903387] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29025163985621016, 0.243590759552523, 0.23832012152903387, 0.23588710182203768] ***
*** finished computation of 3 references, err: [Inf, 0.29025163985621016, 0.243590759552523, 0.23832012152903387, 0.23588710182203768] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [226, 2, 0]]
** centroid: 1, normalized-entropy: 0.07253718299881001, [(1, 226), (2, 2)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [18, 177, 26]]
** centroid: 2, normalized-entropy: 0.5769444363825214, [(1, 18), (2, 177), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [131, 86, 0]]
** centroid: 3, normalized-entropy: 0.9687531582242656, [(1, 131), (2, 86)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3249250236937757] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3249250236937757, 0.24725509395144288] ***
*** starting iteration: 2; err: [Inf, 0.3249250236937757, 0.24725509395144288] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3249250236937757, 0.24725509395144288, 0.2381566162339818] ***
*** starting iteration: 3; err: [Inf, 0.3249250236937757, 0.24725509395144288, 0.2381566162339818] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3249250236937757, 0.24725509395144288, 0.2381566162339818, 0.23745608484760664] ***
*** finished computation of 3 references, err: [Inf, 0.3249250236937757, 0.24725509395144288, 0.2381566162339818, 0.23745608484760664] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [118, 92, 0]]
** centroid: 1, normalized-entropy: 0.9889141853711586, [(1, 118), (2, 92)]
*** center 2: selecting labels [1] (freq >= 2) [from [217, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [56, 157, 27]]
** centroid: 3, normalized-entropy: 0.785519234262808, [(1, 56), (2, 157), (3, 27)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3819039760477215] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3819039760477215, 0.25021799597777483] ***
*** starting iteration: 2; err: [Inf, 0.3819039760477215, 0.25021799597777483] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3819039760477215, 0.25021799597777483, 0.23931056904471082] ***
*** starting iteration: 3; err: [Inf, 0.3819039760477215, 0.25021799597777483, 0.23931056904471082] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3819039760477215, 0.25021799597777483, 0.23931056904471082, 0.23794312962237327] ***
*** finished computation of 3 references, err: [Inf, 0.3819039760477215, 0.25021799597777483, 0.23931056904471082, 0.23794312962237327] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [106, 126, 3]]
** centroid: 1, normalized-entropy: 0.6817525047971906, [(1, 106), (2, 126), (3, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [79, 130, 22]]
** centroid: 2, normalized-entropy: 0.8323357453593245, [(1, 79), (2, 130), (3, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [201, 0, 0]]
finished with 7 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 17)
[0.9479988971006934, 0.9429849010687334, 0.9320068571565577, 0.9289768810726895, 0.9279908651166137, 0.9249938561315806, 0.918007828187469, 0.9179868491245737, 0.9170038301774829, 0.9169978361595127, 0.9149838461215706, 0.9069878261495029, 0.892988797180414, 0.8820227413041785, 0.8739637841434248, 0.8739428050805297, 0.8021074967182752]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9479988971006934
finished with 17
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9479988971006934, 0.9429849010687334, 0.9320068571565577, 0.9289768810726895, 0.9279908651166137, 0.9249938561315806, 0.918007828187469, 0.9179868491245737, 0.9170038301774829, 0.9169978361595127, 0.9149838461215706, 0.9069878261495029, 0.892988797180414, 0.8820227413041785, 0.8739637841434248, 0.8739428050805297, 0.8021074967182752]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9479988971006934
finished with 17
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9479988971006934, 0.9429849010687334, 0.9320068571565577, 0.9289768810726895, 0.9279908651166137, 0.9249938561315806, 0.918007828187469, 0.9179868491245737, 0.9170038301774829, 0.9169978361595127, 0.9149838461215706, 0.9069878261495029, 0.892988797180414, 0.8820227413041785, 0.8739637841434248, 0.8739428050805297, 0.8021074967182752]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9479988971006934
finished with 17
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9479988971006934, 0.9429849010687334, 0.9320068571565577, 0.9289768810726895, 0.9279908651166137, 0.9249938561315806, 0.918007828187469, 0.9179868491245737, 0.9170038301774829, 0.9169978361595127, 0.9149838461215706, 0.9069878261495029, 0.892988797180414, 0.8820227413041785, 0.8739637841434248, 0.8739428050805297, 0.8021074967182752]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 1) => 0.9479988971006934
finished with 17
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.19412197935301811] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19412197935301811, 0.15620486366795375] ***
*** starting iteration: 2; err: [Inf, 0.19412197935301811, 0.15620486366795375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19412197935301811, 0.15620486366795375, 0.1524717540240381] ***
*** starting iteration: 3; err: [Inf, 0.19412197935301811, 0.15620486366795375, 0.1524717540240381] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19412197935301811, 0.15620486366795375, 0.1524717540240381, 0.15180486314184963] ***
*** finished computation of 7 references, err: [Inf, 0.19412197935301811, 0.15620486366795375, 0.1524717540240381, 0.15180486314184963] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [150, 2, 0]]
** centroid: 1, normalized-entropy: 0.10106696361212422, [(1, 150), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 74, 39]]
** centroid: 2, normalized-entropy: 0.9296459040774003, [(2, 74), (3, 39)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [152, 1, 0]]
** centroid: 3, normalized-entropy: 0.0568324045003315, [(1, 152), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [133, 13, 0]]
** centroid: 4, normalized-entropy: 0.433260995472535, [(1, 133), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [12, 150, 0]]
** centroid: 5, normalized-entropy: 0.38094658570539014, [(1, 12), (2, 150)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 145, 0]]
** centroid: 6, normalized-entropy: 0.32122717014200314, [(1, 9), (2, 145)]
*** center 7: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19415727568417787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19415727568417787, 0.15312111136782913] ***
*** starting iteration: 2; err: [Inf, 0.19415727568417787, 0.15312111136782913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19415727568417787, 0.15312111136782913, 0.14730800218228252] ***
*** starting iteration: 3; err: [Inf, 0.19415727568417787, 0.15312111136782913, 0.14730800218228252] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19415727568417787, 0.15312111136782913, 0.14730800218228252, 0.14586302478425206] ***
*** finished computation of 7 references, err: [Inf, 0.19415727568417787, 0.15312111136782913, 0.14730800218228252, 0.14586302478425206] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [80, 3, 0]]
** centroid: 1, normalized-entropy: 0.2243269603450881, [(1, 80), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 10, 0]]
** centroid: 2, normalized-entropy: 0.6024308020404452, [(1, 58), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 56, 19]]
** centroid: 3, normalized-entropy: 0.8165187119538281, [(2, 56), (3, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [36, 33, 0]]
** centroid: 5, normalized-entropy: 0.9986359641585719, [(1, 36), (2, 33)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 74, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [36, 14, 0]]
** centroid: 7, normalized-entropy: 0.8554508105601307, [(1, 36), (2, 14)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19391644104756414] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19391644104756414, 0.1528923498671502] ***
*** starting iteration: 2; err: [Inf, 0.19391644104756414, 0.1528923498671502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19391644104756414, 0.1528923498671502, 0.14878889141813853] ***
*** starting iteration: 3; err: [Inf, 0.19391644104756414, 0.1528923498671502, 0.14878889141813853] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19391644104756414, 0.1528923498671502, 0.14878889141813853, 0.14853051026631148] ***
*** finished computation of 7 references, err: [Inf, 0.19391644104756414, 0.1528923498671502, 0.14878889141813853, 0.14853051026631148] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [22, 46, 0]]
** centroid: 1, normalized-entropy: 0.9081783472997053, [(1, 22), (2, 46)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [42, 3, 0]]
** centroid: 2, normalized-entropy: 0.3533593350214213, [(1, 42), (2, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 47, 24]]
** centroid: 4, normalized-entropy: 0.9229192878686723, [(2, 47), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [91, 2, 0]]
** centroid: 5, normalized-entropy: 0.14981136747274781, [(1, 91), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 72, 0]]
** centroid: 6, normalized-entropy: 0.1044190780054077, [(1, 1), (2, 72)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [59, 13, 0]]
** centroid: 7, normalized-entropy: 0.6812908868842175, [(1, 59), (2, 13)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20337074621394277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20337074621394277, 0.1520456992164254] ***
*** starting iteration: 2; err: [Inf, 0.20337074621394277, 0.1520456992164254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20337074621394277, 0.1520456992164254, 0.1475451803896576] ***
*** starting iteration: 3; err: [Inf, 0.20337074621394277, 0.1520456992164254, 0.1475451803896576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20337074621394277, 0.1520456992164254, 0.1475451803896576, 0.1466187964119017] ***
*** finished computation of 7 references, err: [Inf, 0.20337074621394277, 0.1520456992164254, 0.1475451803896576, 0.1466187964119017] ***
*** center 1: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [39, 33, 0]]
** centroid: 2, normalized-entropy: 0.9949848281859699, [(1, 39), (2, 33)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 54, 17]]
** centroid: 3, normalized-entropy: 0.7941021417852022, [(2, 54), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [16, 42, 0]]
** centroid: 5, normalized-entropy: 0.8497511372532974, [(1, 16), (2, 42)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 73, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19849229556694628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19849229556694628, 0.14706058803573252] ***
*** starting iteration: 2; err: [Inf, 0.19849229556694628, 0.14706058803573252] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19849229556694628, 0.14706058803573252, 0.14468001876957715] ***
*** starting iteration: 3; err: [Inf, 0.19849229556694628, 0.14706058803573252, 0.14468001876957715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19849229556694628, 0.14706058803573252, 0.14468001876957715, 0.1446923085767776] ***
*** finished computation of 7 references, err: [Inf, 0.19849229556694628, 0.14706058803573252, 0.14468001876957715, 0.1446923085767776] ***
*** center 1: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 49, 26]]
** centroid: 2, normalized-entropy: 0.9310558233850329, [(2, 49), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 21, 0]]
** centroid: 3, normalized-entropy: 0.8918107543797084, [(1, 47), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [42, 16, 0]]
** centroid: 4, normalized-entropy: 0.8497511372532974, [(1, 42), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 41, 0]]
** centroid: 5, normalized-entropy: 0.9989595114657399, [(1, 38), (2, 41)]
*** center 6: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 58, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19106397225894034] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19106397225894034, 0.15354950654972344] ***
*** starting iteration: 2; err: [Inf, 0.19106397225894034, 0.15354950654972344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19106397225894034, 0.15354950654972344, 0.15002153637446464] ***
*** starting iteration: 3; err: [Inf, 0.19106397225894034, 0.15354950654972344, 0.15002153637446464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19106397225894034, 0.15354950654972344, 0.15002153637446464, 0.14869539912603796] ***
*** finished computation of 7 references, err: [Inf, 0.19106397225894034, 0.15354950654972344, 0.15002153637446464, 0.14869539912603796] ***
*** center 1: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 50, 24]]
** centroid: 3, normalized-entropy: 0.9090221560878149, [(2, 50), (3, 24)]
*** center 4: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 45, 0]]
** centroid: 5, normalized-entropy: 0.9605187074766162, [(1, 28), (2, 45)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [29, 42, 0]]
** centroid: 6, normalized-entropy: 0.9756797868933086, [(1, 29), (2, 42)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [6, 50, 0]]
** centroid: 7, normalized-entropy: 0.4912373418243334, [(1, 6), (2, 50)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22260002573207022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22260002573207022, 0.15079587090387941] ***
*** starting iteration: 2; err: [Inf, 0.22260002573207022, 0.15079587090387941] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22260002573207022, 0.15079587090387941, 0.1456073002666235] ***
*** starting iteration: 3; err: [Inf, 0.22260002573207022, 0.15079587090387941, 0.1456073002666235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22260002573207022, 0.15079587090387941, 0.1456073002666235, 0.145039760151878] ***
*** finished computation of 7 references, err: [Inf, 0.22260002573207022, 0.15079587090387941, 0.1456073002666235, 0.145039760151878] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [28, 37, 0]]
** centroid: 1, normalized-entropy: 0.9861260846302384, [(1, 28), (2, 37)]
*** center 2: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [74, 6, 0]]
** centroid: 3, normalized-entropy: 0.3843115441264972, [(1, 74), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [35, 35, 0]]
** centroid: 4, normalized-entropy: 1.0, [(1, 35), (2, 35)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 62, 21]]
** centroid: 5, normalized-entropy: 0.8160172973428256, [(2, 62), (3, 21)]
*** center 6: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20338272103480995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20338272103480995, 0.15872640385106207] ***
*** starting iteration: 2; err: [Inf, 0.20338272103480995, 0.15872640385106207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20338272103480995, 0.15872640385106207, 0.15360146804060787] ***
*** starting iteration: 3; err: [Inf, 0.20338272103480995, 0.15872640385106207, 0.15360146804060787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20338272103480995, 0.15872640385106207, 0.15360146804060787, 0.152399293795228] ***
*** finished computation of 7 references, err: [Inf, 0.20338272103480995, 0.15872640385106207, 0.15360146804060787, 0.152399293795228] ***
*** center 1: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 49, 25]]
** centroid: 2, normalized-entropy: 0.9227346209530939, [(2, 49), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 15, 0]]
** centroid: 3, normalized-entropy: 0.7166336117927455, [(1, 61), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [52, 26, 0]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(1, 52), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [25, 41, 0]]
** centroid: 5, normalized-entropy: 0.9571814385446724, [(1, 25), (2, 41)]
*** center 6: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18773657218925655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18773657218925655, 0.1489756710920483] ***
*** starting iteration: 2; err: [Inf, 0.18773657218925655, 0.1489756710920483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18773657218925655, 0.1489756710920483, 0.14575808864086867] ***
*** starting iteration: 3; err: [Inf, 0.18773657218925655, 0.1489756710920483, 0.14575808864086867] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18773657218925655, 0.1489756710920483, 0.14575808864086867, 0.14512575839459896] ***
*** finished computation of 7 references, err: [Inf, 0.18773657218925655, 0.1489756710920483, 0.14575808864086867, 0.14512575839459896] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [28, 54, 0]]
** centroid: 1, normalized-entropy: 0.9262122127346664, [(1, 28), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 2, 0]]
** centroid: 2, normalized-entropy: 0.2222848306856879, [(1, 54), (2, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 50, 17]]
** centroid: 4, normalized-entropy: 0.8171387756817725, [(2, 50), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [1, 92, 0]]
** centroid: 5, normalized-entropy: 0.0857426825355026, [(1, 1), (2, 92)]
*** center 6: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19662796831317245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19662796831317245, 0.1503191683506593] ***
*** starting iteration: 2; err: [Inf, 0.19662796831317245, 0.1503191683506593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19662796831317245, 0.1503191683506593, 0.14705026458576323] ***
*** starting iteration: 3; err: [Inf, 0.19662796831317245, 0.1503191683506593, 0.14705026458576323] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19662796831317245, 0.1503191683506593, 0.14705026458576323, 0.14647243589535355] ***
*** finished computation of 7 references, err: [Inf, 0.19662796831317245, 0.1503191683506593, 0.14705026458576323, 0.14647243589535355] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [72, 2, 0]]
** centroid: 1, normalized-entropy: 0.1792560669283214, [(1, 72), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 15, 0]]
** centroid: 2, normalized-entropy: 0.7553754125614286, [(1, 54), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 56, 15]]
** centroid: 3, normalized-entropy: 0.743898745288434, [(2, 56), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [32, 40, 0]]
** centroid: 5, normalized-entropy: 0.9910760598382222, [(1, 32), (2, 40)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 75, 0]]
** centroid: 6, normalized-entropy: 0.17378132267943294, [(1, 2), (2, 75)]
*** center 7: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19210216814093292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19210216814093292, 0.15250421829149127] ***
*** starting iteration: 2; err: [Inf, 0.19210216814093292, 0.15250421829149127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19210216814093292, 0.15250421829149127, 0.14924471051525326] ***
*** starting iteration: 3; err: [Inf, 0.19210216814093292, 0.15250421829149127, 0.14924471051525326] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19210216814093292, 0.15250421829149127, 0.14924471051525326, 0.148681230972521] ***
*** finished computation of 7 references, err: [Inf, 0.19210216814093292, 0.15250421829149127, 0.14924471051525326, 0.148681230972521] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [5, 77, 0]]
** centroid: 1, normalized-entropy: 0.3313056130577883, [(1, 5), (2, 77)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [39, 25, 0]]
** centroid: 2, normalized-entropy: 0.9652016987500656, [(1, 39), (2, 25)]
*** center 3: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 64, 17]]
** centroid: 4, normalized-entropy: 0.7412466905234424, [(2, 64), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [77, 18, 0]]
** centroid: 5, normalized-entropy: 0.7003691487575897, [(1, 77), (2, 18)]
*** center 6: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1908277812534943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1908277812534943, 0.1512882185690105] ***
*** starting iteration: 2; err: [Inf, 0.1908277812534943, 0.1512882185690105] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1908277812534943, 0.1512882185690105, 0.14888139435090125] ***
*** starting iteration: 3; err: [Inf, 0.1908277812534943, 0.1512882185690105, 0.14888139435090125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1908277812534943, 0.1512882185690105, 0.14888139435090125, 0.14863096146611496] ***
*** finished computation of 7 references, err: [Inf, 0.1908277812534943, 0.1512882185690105, 0.14888139435090125, 0.14863096146611496] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [80, 15, 0]]
** centroid: 1, normalized-entropy: 0.6292492238560344, [(1, 80), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 1, 0]]
** centroid: 2, normalized-entropy: 0.14372616993938164, [(1, 48), (2, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 24, 21]]
** centroid: 3, normalized-entropy: 0.9967916319816367, [(2, 24), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [58, 17, 0]]
** centroid: 5, normalized-entropy: 0.7721551435804817, [(1, 58), (2, 17)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 74, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 68, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20557373254746197] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20557373254746197, 0.15579955699807033] ***
*** starting iteration: 2; err: [Inf, 0.20557373254746197, 0.15579955699807033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20557373254746197, 0.15579955699807033, 0.15285595108941197] ***
*** starting iteration: 3; err: [Inf, 0.20557373254746197, 0.15579955699807033, 0.15285595108941197] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20557373254746197, 0.15579955699807033, 0.15285595108941197, 0.15226213009667117] ***
*** finished computation of 7 references, err: [Inf, 0.20557373254746197, 0.15579955699807033, 0.15285595108941197, 0.15226213009667117] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [45, 26, 0]]
** centroid: 1, normalized-entropy: 0.9477073729342067, [(1, 45), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [42, 26, 0]]
** centroid: 2, normalized-entropy: 0.9596868937742168, [(1, 42), (2, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 80, 20]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(2, 80), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [18, 56, 0]]
** centroid: 5, normalized-entropy: 0.8003922080453356, [(1, 18), (2, 56)]
*** center 6: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19300401526503264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19300401526503264, 0.15612531985342504] ***
*** starting iteration: 2; err: [Inf, 0.19300401526503264, 0.15612531985342504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19300401526503264, 0.15612531985342504, 0.1526479405425489] ***
*** starting iteration: 3; err: [Inf, 0.19300401526503264, 0.15612531985342504, 0.1526479405425489] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19300401526503264, 0.15612531985342504, 0.1526479405425489, 0.15166474307561292] ***
*** finished computation of 7 references, err: [Inf, 0.19300401526503264, 0.15612531985342504, 0.1526479405425489, 0.15166474307561292] ***
*** center 1: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 41, 19]]
** centroid: 2, normalized-entropy: 0.9007196798623592, [(2, 41), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 8, 0]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(1, 48), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 9, 0]]
** centroid: 4, normalized-entropy: 0.569190343735683, [(1, 58), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [15, 58, 0]]
** centroid: 5, normalized-entropy: 0.7327525499549903, [(1, 15), (2, 58)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [7, 83, 0]]
** centroid: 6, normalized-entropy: 0.39430023792747493, [(1, 7), (2, 83)]
*** center 7: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1931569327004254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1931569327004254, 0.1506885875808075] ***
*** starting iteration: 2; err: [Inf, 0.1931569327004254, 0.1506885875808075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1931569327004254, 0.1506885875808075, 0.14640531234256923] ***
*** starting iteration: 3; err: [Inf, 0.1931569327004254, 0.1506885875808075, 0.14640531234256923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1931569327004254, 0.1506885875808075, 0.14640531234256923, 0.14537030391022562] ***
*** finished computation of 7 references, err: [Inf, 0.1931569327004254, 0.1506885875808075, 0.14640531234256923, 0.14537030391022562] ***
*** center 1: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 39, 21]]
** centroid: 2, normalized-entropy: 0.9340680553754911, [(2, 39), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [32, 30, 0]]
** centroid: 3, normalized-entropy: 0.9992492479956566, [(1, 32), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [3, 66, 0]]
** centroid: 4, normalized-entropy: 0.2580186686648155, [(1, 3), (2, 66)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [15, 49, 0]]
** centroid: 5, normalized-entropy: 0.7855602922535471, [(1, 15), (2, 49)]
*** center 6: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1969872613437474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1969872613437474, 0.15125179629027843] ***
*** starting iteration: 2; err: [Inf, 0.1969872613437474, 0.15125179629027843] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1969872613437474, 0.15125179629027843, 0.14780934021621941] ***
*** starting iteration: 3; err: [Inf, 0.1969872613437474, 0.15125179629027843, 0.14780934021621941] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1969872613437474, 0.15125179629027843, 0.14780934021621941, 0.14753982792794704] ***
*** finished computation of 7 references, err: [Inf, 0.1969872613437474, 0.15125179629027843, 0.14780934021621941, 0.14753982792794704] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [5, 83, 0]]
** centroid: 1, normalized-entropy: 0.314682604134666, [(1, 5), (2, 83)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [43, 43, 0]]
** centroid: 2, normalized-entropy: 1.0, [(1, 43), (2, 43)]
*** center 3: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [44, 11, 0]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(1, 44), (2, 11)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 44, 21]]
** centroid: 5, normalized-entropy: 0.9076961653608385, [(2, 44), (3, 21)]
*** center 6: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [82, 1, 0]]
** centroid: 7, normalized-entropy: 0.09408443883267342, [(1, 82), (2, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.189937906967476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.189937906967476, 0.1542146641071886] ***
*** starting iteration: 2; err: [Inf, 0.189937906967476, 0.1542146641071886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.189937906967476, 0.1542146641071886, 0.14996925548184664] ***
*** starting iteration: 3; err: [Inf, 0.189937906967476, 0.1542146641071886, 0.14996925548184664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.189937906967476, 0.1542146641071886, 0.14996925548184664, 0.14888757069408892] ***
*** finished computation of 7 references, err: [Inf, 0.189937906967476, 0.1542146641071886, 0.14996925548184664, 0.14888757069408892] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [47, 36, 0]]
** centroid: 1, normalized-entropy: 0.9872927315785851, [(1, 47), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [46, 5, 0]]
** centroid: 2, normalized-entropy: 0.462749058578174, [(1, 46), (2, 5)]
*** center 3: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 66, 17]]
** centroid: 4, normalized-entropy: 0.7314625617214586, [(2, 66), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [62, 23, 0]]
** centroid: 5, normalized-entropy: 0.8423074510400833, [(1, 62), (2, 23)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 70, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18853772642835975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18853772642835975, 0.15340889494027943] ***
*** starting iteration: 2; err: [Inf, 0.18853772642835975, 0.15340889494027943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18853772642835975, 0.15340889494027943, 0.1509582104086876] ***
*** starting iteration: 3; err: [Inf, 0.18853772642835975, 0.15340889494027943, 0.1509582104086876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18853772642835975, 0.15340889494027943, 0.1509582104086876, 0.15040357096865772] ***
*** finished computation of 7 references, err: [Inf, 0.18853772642835975, 0.15340889494027943, 0.1509582104086876, 0.15040357096865772] ***
*** center 1: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 38, 19]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 38), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [45, 13, 0]]
** centroid: 3, normalized-entropy: 0.7676515870125797, [(1, 45), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [10, 65, 0]]
** centroid: 4, normalized-entropy: 0.5665095065529052, [(1, 10), (2, 65)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [7, 83, 0]]
** centroid: 5, normalized-entropy: 0.39430023792747493, [(1, 7), (2, 83)]
*** center 6: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19531377893313764] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19531377893313764, 0.15261560607422142] ***
*** starting iteration: 2; err: [Inf, 0.19531377893313764, 0.15261560607422142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19531377893313764, 0.15261560607422142, 0.14814226609934122] ***
*** starting iteration: 3; err: [Inf, 0.19531377893313764, 0.15261560607422142, 0.14814226609934122] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19531377893313764, 0.15261560607422142, 0.14814226609934122, 0.14735924757178873] ***
*** finished computation of 7 references, err: [Inf, 0.19531377893313764, 0.15261560607422142, 0.14814226609934122, 0.14735924757178873] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [8, 78, 0]]
** centroid: 1, normalized-entropy: 0.446481346896803, [(1, 8), (2, 78)]
*** center 2: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 17, 0]]
** centroid: 3, normalized-entropy: 0.8412367762002599, [(1, 46), (2, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [82, 1, 0]]
** centroid: 5, normalized-entropy: 0.09408443883267342, [(1, 82), (2, 1)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 25, 20]]
** centroid: 7, normalized-entropy: 0.9910760598382222, [(2, 25), (3, 20)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18114190750010312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18114190750010312, 0.1466252056369558] ***
*** starting iteration: 2; err: [Inf, 0.18114190750010312, 0.1466252056369558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18114190750010312, 0.1466252056369558, 0.14449653317965566] ***
*** starting iteration: 3; err: [Inf, 0.18114190750010312, 0.1466252056369558, 0.14449653317965566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18114190750010312, 0.1466252056369558, 0.14449653317965566, 0.14436141574196518] ***
*** finished computation of 7 references, err: [Inf, 0.18114190750010312, 0.1466252056369558, 0.14449653317965566, 0.14436141574196518] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 75, 2]]
** centroid: 1, normalized-entropy: 0.17378132267943294, [(2, 75), (3, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [61, 15, 0]]
** centroid: 2, normalized-entropy: 0.7166336117927455, [(1, 61), (2, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 70, 15]]
** centroid: 4, normalized-entropy: 0.6722948170756378, [(2, 70), (3, 15)]
*** center 5: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [75, 5, 0]]
** centroid: 6, normalized-entropy: 0.3372900666170139, [(1, 75), (2, 5)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [33, 21, 0]]
** centroid: 7, normalized-entropy: 0.9640787648082293, [(1, 33), (2, 21)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1922480676230043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1922480676230043, 0.15494392950832844] ***
*** starting iteration: 2; err: [Inf, 0.1922480676230043, 0.15494392950832844] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1922480676230043, 0.15494392950832844, 0.14989721429906785] ***
*** starting iteration: 3; err: [Inf, 0.1922480676230043, 0.15494392950832844, 0.14989721429906785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1922480676230043, 0.15494392950832844, 0.14989721429906785, 0.14777603155793623] ***
*** finished computation of 7 references, err: [Inf, 0.1922480676230043, 0.15494392950832844, 0.14989721429906785, 0.14777603155793623] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 69, 10]]
** centroid: 1, normalized-entropy: 0.5479900080939728, [(2, 69), (3, 10)]
*** center 2: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 20, 0]]
** centroid: 3, normalized-entropy: 0.8739810481273581, [(1, 48), (2, 20)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [83, 12, 0]]
** centroid: 4, normalized-entropy: 0.5472469471683307, [(1, 83), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [36, 23, 0]]
** centroid: 5, normalized-entropy: 0.9646900825612559, [(1, 36), (2, 23)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 59, 6]]
** centroid: 6, normalized-entropy: 0.4441260450795996, [(2, 59), (3, 6)]
*** center 7: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21127931679040193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21127931679040193, 0.1519891986772418] ***
*** starting iteration: 2; err: [Inf, 0.21127931679040193, 0.1519891986772418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21127931679040193, 0.1519891986772418, 0.14828983612917362] ***
*** starting iteration: 3; err: [Inf, 0.21127931679040193, 0.1519891986772418, 0.14828983612917362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21127931679040193, 0.1519891986772418, 0.14828983612917362, 0.14732276301924138] ***
*** finished computation of 7 references, err: [Inf, 0.21127931679040193, 0.1519891986772418, 0.14828983612917362, 0.14732276301924138] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [54, 16, 0]]
** centroid: 1, normalized-entropy: 0.775512658133148, [(1, 54), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 12, 0]]
** centroid: 2, normalized-entropy: 0.6722948170756378, [(1, 56), (2, 12)]
*** center 3: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 59, 13]]
** centroid: 4, normalized-entropy: 0.6812908868842175, [(2, 59), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 35, 0]]
** centroid: 5, normalized-entropy: 0.9994433330902989, [(1, 37), (2, 35)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 78, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18455623206682503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18455623206682503, 0.15775737452181057] ***
*** starting iteration: 2; err: [Inf, 0.18455623206682503, 0.15775737452181057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18455623206682503, 0.15775737452181057, 0.1542914255289361] ***
*** starting iteration: 3; err: [Inf, 0.18455623206682503, 0.15775737452181057, 0.1542914255289361] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18455623206682503, 0.15775737452181057, 0.1542914255289361, 0.15344569222442805] ***
*** finished computation of 7 references, err: [Inf, 0.18455623206682503, 0.15775737452181057, 0.1542914255289361, 0.15344569222442805] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 84, 19]]
** centroid: 1, normalized-entropy: 0.6897501750585195, [(2, 84), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [40, 8, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 40), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 18, 0]]
** centroid: 4, normalized-entropy: 0.8003922080453356, [(1, 56), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [65, 12, 0]]
** centroid: 5, normalized-entropy: 0.6242741010130388, [(1, 65), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [69, 4, 0]]
** centroid: 6, normalized-entropy: 0.306424729870515, [(1, 69), (2, 4)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 65, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19779759003967046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19779759003967046, 0.15746159576158972] ***
*** starting iteration: 2; err: [Inf, 0.19779759003967046, 0.15746159576158972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19779759003967046, 0.15746159576158972, 0.15319924800470472] ***
*** starting iteration: 3; err: [Inf, 0.19779759003967046, 0.15746159576158972, 0.15319924800470472] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19779759003967046, 0.15746159576158972, 0.15319924800470472, 0.15166403588373215] ***
*** finished computation of 7 references, err: [Inf, 0.19779759003967046, 0.15746159576158972, 0.15319924800470472, 0.15166403588373215] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [51, 44, 0]]
** centroid: 1, normalized-entropy: 0.996079990851081, [(1, 51), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 15, 0]]
** centroid: 2, normalized-entropy: 0.7918583525674836, [(1, 48), (2, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 47, 22]]
** centroid: 4, normalized-entropy: 0.903116172156872, [(2, 47), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [66, 7, 0]]
** centroid: 5, normalized-entropy: 0.4558314584408233, [(1, 66), (2, 7)]
*** center 6: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 70, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19800233097793535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19800233097793535, 0.15521235712990164] ***
*** starting iteration: 2; err: [Inf, 0.19800233097793535, 0.15521235712990164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19800233097793535, 0.15521235712990164, 0.15087161316443234] ***
*** starting iteration: 3; err: [Inf, 0.19800233097793535, 0.15521235712990164, 0.15087161316443234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19800233097793535, 0.15521235712990164, 0.15087161316443234, 0.15008192731440068] ***
*** finished computation of 7 references, err: [Inf, 0.19800233097793535, 0.15521235712990164, 0.15087161316443234, 0.15008192731440068] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [82, 1, 0]]
** centroid: 1, normalized-entropy: 0.09408443883267342, [(1, 82), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [64, 9, 0]]
** centroid: 2, normalized-entropy: 0.5387379148665815, [(1, 64), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 26, 17]]
** centroid: 3, normalized-entropy: 0.9681647320759545, [(2, 26), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [48, 19, 0]]
** centroid: 5, normalized-entropy: 0.8602858652332406, [(1, 48), (2, 19)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 66, 0]]
** centroid: 6, normalized-entropy: 0.11190990870168394, [(1, 1), (2, 66)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2017735548838973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2017735548838973, 0.1531050510657951] ***
*** starting iteration: 2; err: [Inf, 0.2017735548838973, 0.1531050510657951] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2017735548838973, 0.1531050510657951, 0.1508404077310115] ***
*** starting iteration: 3; err: [Inf, 0.2017735548838973, 0.1531050510657951, 0.1508404077310115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2017735548838973, 0.1531050510657951, 0.1508404077310115, 0.15026103160716595] ***
*** finished computation of 7 references, err: [Inf, 0.2017735548838973, 0.1531050510657951, 0.1508404077310115, 0.15026103160716595] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 60, 18]]
** centroid: 1, normalized-entropy: 0.7793498372920851, [(2, 60), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 3, 0]]
** centroid: 3, normalized-entropy: 0.3013786435930858, [(1, 53), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [60, 36, 0]]
** centroid: 4, normalized-entropy: 0.954434002924965, [(1, 60), (2, 36)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [52, 24, 0]]
** centroid: 5, normalized-entropy: 0.8997437586982626, [(1, 52), (2, 24)]
*** center 6: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [4, 64, 0]]
** centroid: 7, normalized-entropy: 0.32275695889739825, [(1, 4), (2, 64)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1922699158117175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1922699158117175, 0.15488665870018303] ***
*** starting iteration: 2; err: [Inf, 0.1922699158117175, 0.15488665870018303] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1922699158117175, 0.15488665870018303, 0.1505309382872656] ***
*** starting iteration: 3; err: [Inf, 0.1922699158117175, 0.15488665870018303, 0.1505309382872656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1922699158117175, 0.15488665870018303, 0.1505309382872656, 0.1500201784223318] ***
*** finished computation of 7 references, err: [Inf, 0.1922699158117175, 0.15488665870018303, 0.1505309382872656, 0.1500201784223318] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [73, 1, 0]]
** centroid: 1, normalized-entropy: 0.10327508457163559, [(1, 73), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [64, 13, 0]]
** centroid: 2, normalized-entropy: 0.6550239908788728, [(1, 64), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 33, 20]]
** centroid: 3, normalized-entropy: 0.9561550236844027, [(2, 33), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [11, 69, 0]]
** centroid: 5, normalized-entropy: 0.5776539033535634, [(1, 11), (2, 69)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 72, 0]]
** centroid: 6, normalized-entropy: 0.1044190780054077, [(1, 1), (2, 72)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [41, 6, 0]]
** centroid: 7, normalized-entropy: 0.5509844433017146, [(1, 41), (2, 6)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1958818630743772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1958818630743772, 0.15731724410131573] ***
*** starting iteration: 2; err: [Inf, 0.1958818630743772, 0.15731724410131573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1958818630743772, 0.15731724410131573, 0.15274854519963266] ***
*** starting iteration: 3; err: [Inf, 0.1958818630743772, 0.15731724410131573, 0.15274854519963266] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1958818630743772, 0.15731724410131573, 0.15274854519963266, 0.15120778070949017] ***
*** finished computation of 7 references, err: [Inf, 0.1958818630743772, 0.15731724410131573, 0.15274854519963266, 0.15120778070949017] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [34, 44, 0]]
** centroid: 1, normalized-entropy: 0.98811083652183, [(1, 34), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [43, 19, 0]]
** centroid: 2, normalized-entropy: 0.8890349038123858, [(1, 43), (2, 19)]
*** center 3: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 72, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [70, 7, 0]]
** centroid: 5, normalized-entropy: 0.43949698692151346, [(1, 70), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [65, 2, 0]]
** centroid: 6, normalized-entropy: 0.19364280468389852, [(1, 65), (2, 2)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 51, 24]]
** centroid: 7, normalized-entropy: 0.9043814577244941, [(2, 51), (3, 24)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18897729873284697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18897729873284697, 0.15292430593818426] ***
*** starting iteration: 2; err: [Inf, 0.18897729873284697, 0.15292430593818426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18897729873284697, 0.15292430593818426, 0.14954698439687492] ***
*** starting iteration: 3; err: [Inf, 0.18897729873284697, 0.15292430593818426, 0.14954698439687492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18897729873284697, 0.15292430593818426, 0.14954698439687492, 0.1487241084910929] ***
*** finished computation of 7 references, err: [Inf, 0.18897729873284697, 0.15292430593818426, 0.14954698439687492, 0.1487241084910929] ***
*** center 1: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 1, 0]]
** centroid: 2, normalized-entropy: 0.1274185117923586, [(1, 56), (2, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 42, 20]]
** centroid: 3, normalized-entropy: 0.9071657675730821, [(2, 42), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 41, 0]]
** centroid: 5, normalized-entropy: 0.9981021327390103, [(1, 37), (2, 41)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [31, 50, 0]]
** centroid: 6, normalized-entropy: 0.9599377175669783, [(1, 31), (2, 50)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 49, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19474597650114447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19474597650114447, 0.15319137412658893] ***
*** starting iteration: 2; err: [Inf, 0.19474597650114447, 0.15319137412658893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19474597650114447, 0.15319137412658893, 0.14855368386860937] ***
*** starting iteration: 3; err: [Inf, 0.19474597650114447, 0.15319137412658893, 0.14855368386860937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19474597650114447, 0.15319137412658893, 0.14855368386860937, 0.14729887113720178] ***
*** finished computation of 7 references, err: [Inf, 0.19474597650114447, 0.15319137412658893, 0.14855368386860937, 0.14729887113720178] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [78, 10, 0]]
** centroid: 1, normalized-entropy: 0.5107878229540133, [(1, 78), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [37, 14, 0]]
** centroid: 2, normalized-entropy: 0.8478617451660525, [(1, 37), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 55, 18]]
** centroid: 3, normalized-entropy: 0.8058049113482652, [(2, 55), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [21, 52, 0]]
** centroid: 5, normalized-entropy: 0.8656939941993219, [(1, 21), (2, 52)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 74, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18644494409114123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18644494409114123, 0.1548966224193573] ***
*** starting iteration: 2; err: [Inf, 0.18644494409114123, 0.1548966224193573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18644494409114123, 0.1548966224193573, 0.14938298343122006] ***
*** starting iteration: 3; err: [Inf, 0.18644494409114123, 0.1548966224193573, 0.14938298343122006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18644494409114123, 0.1548966224193573, 0.14938298343122006, 0.147391268491745] ***
*** finished computation of 7 references, err: [Inf, 0.18644494409114123, 0.1548966224193573, 0.14938298343122006, 0.147391268491745] ***
*** center 1: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 51, 16]]
** centroid: 2, normalized-entropy: 0.7930490047779772, [(2, 51), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [52, 4, 0]]
** centroid: 3, normalized-entropy: 0.3712323266408756, [(1, 52), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 13, 0]]
** centroid: 4, normalized-entropy: 0.6868088934028034, [(1, 58), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 50, 0]]
** centroid: 5, normalized-entropy: 0.9418285354475157, [(1, 28), (2, 50)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 71, 0]]
** centroid: 6, normalized-entropy: 0.5074109636646968, [(1, 9), (2, 71)]
*** center 7: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 385,3 => 39,1 => 576), Dict(2 => 370,3 => 38,1 => 592))
[ Info: ===== scores for single classifier: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9738738738738739,"macro_f1":0.9481480044779537,"accuracy":0.965,"class_f1":{"2":0.9525101763907733,"3":0.9156626506024096,"1":0.976271186440678},"class_precision":{"2":0.9564032697547684,"3":0.8444444444444444,"1":0.9795918367346939},"class_recall":{"2":0.9486486486486486,"3":1.0,"1":0.972972972972973}}
[ Info: ===== scores for 1: {"micro_f1":0.964,"precision":0.964,"recall":0.964,"macro_recall":0.9773648648648648,"macro_f1":0.9659348450143996,"accuracy":0.964,"class_f1":{"2":0.9527559055118109,"3":0.9743589743589743,"1":0.9706896551724137},"class_precision":{"2":0.9260204081632653,"3":0.95,"1":0.9911971830985915},"class_recall":{"2":0.981081081081081,"3":1.0,"1":0.9510135135135135}}
[ Info: ===== scores for 5: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9795045045045047,"macro_f1":0.9635996888797894,"accuracy":0.966,"class_f1":{"2":0.9556135770234986,"3":0.9620253164556963,"1":0.9731601731601732},"class_precision":{"2":0.9242424242424242,"3":0.926829268292683,"1":0.9982238010657194},"class_recall":{"2":0.9891891891891892,"3":1.0,"1":0.9493243243243243}}
[ Info: ===== scores for 7: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9797297297297297,"macro_f1":0.9569332746656926,"accuracy":0.967,"class_f1":{"2":0.9567496723460027,"3":0.9382716049382717,"1":0.9757785467128028},"class_precision":{"2":0.9287531806615776,"3":0.8837209302325582,"1":1.0},"class_recall":{"2":0.9864864864864865,"3":1.0,"1":0.9527027027027027}}
[ Info: ===== scores for 9: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9791666666666666,"macro_f1":0.9562202540096664,"accuracy":0.966,"class_f1":{"2":0.955497382198953,"3":0.9382716049382717,"1":0.9748917748917748},"class_precision":{"2":0.9263959390862944,"3":0.8837209302325582,"1":1.0},"class_recall":{"2":0.9864864864864865,"3":1.0,"1":0.9510135135135135}}
[ Info: ===== scores for 11: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9786036036036035,"macro_f1":0.9555078123852833,"accuracy":0.965,"class_f1":{"2":0.954248366013072,"3":0.9382716049382717,"1":0.9740034662045061},"class_precision":{"2":0.9240506329113924,"3":0.8837209302325582,"1":1.0},"class_recall":{"2":0.9864864864864865,"3":1.0,"1":0.9493243243243243}}
(score = 0.965, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.964, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.964, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.964, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.964, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.97,"k":5,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9650011853959223,"macro_f1":0.9543163980386554,"accuracy":0.97,"class_f1":{"2":0.9605263157894737,"3":0.9230769230769231,"1":0.9793459552495697},"class_precision":{"2":0.9358974358974359,"3":0.9,"1":0.9982456140350877},"class_recall":{"2":0.9864864864864865,"3":0.9473684210526315,"1":0.9611486486486487}}
Test Summary: | Pass  Total
AKNC          |    8      8
[427, 2, 2, 1, 5, 2, 9, 4, 5, 3, 11, 2, 16, 9, 5, 6, 11, 20, 1, 1, 12, 3, 8, 55, 8, 4, 6, 10, 7, 3, 3, 4, 3, 1, 9, 8, 15, 4, 5, 3, 18, 2, 23, 1, 4, 4, 7, 1, 2, 7, 12, 17, 3, 4, 16, 36, 4, 4, 17, 25, 28, 45, 17, 3, 2, 20, 30, 8, 14, 7, 6, 7, 21, 42, 4, 7, 463, 2, 2, 47, 72, 3, 21, 9, 11, 2, 16, 4, 2, 38, 100, 14, 16, 5, 7, 10, 13, 9, 45, 2, 10, 1, 3, 15, 14, 27, 10, 8, 194, 9, 149, 25, 12, 12, 47, 142, 7, 32, 316, 169, 6, 5, 6, 40, 9, 52, 32, 47, 5, 3, 10, 3, 13, 156, 25, 5, 14, 20, 7, 122, 36, 22, 9, 27, 30, 16, 20, 11, 102, 30, 13, 21, 14, 36, 100, 50, 10, 21, 7, 8, 7, 10, 23, 17, 13, 15, 20, 52, 9, 12, 28, 14, 237, 205, 14, 82, 1, 13, 123, 58, 127, 3, 27, 30, 47, 11, 18, 68, 18, 56, 18, 71, 6, 10, 9, 4, 15, 38, 142, 43, 14, 30, 9, 30, 13, 3, 11, 19, 3, 29, 33, 21, 10, 6, 29, 5, 14, 20, 145, 3, 18, 18, 5, 3, 3, 78, 15, 1, 29, 40, 159, 8, 41, 25, 10, 5, 68, 36, 5, 45, 48, 25, 7, 33, 11, 21, 189, 15, 11, 34, 15, 16, 72, 52, 7, 7, 48, 29, 29, 13, 12, 26, 56, 168, 174, 22, 41, 38, 6, 49, 30, 10, 3, 15, 203, 15, 27, 8, 20, 90, 1, 141, 77, 7, 42, 22, 37, 5, 3, 5, 30, 16, 4, 35, 10, 70, 239, 175, 148, 6]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6439999999999998, speedup = 0.37129662063752505, eval_ratio = 0.065358)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":null,"recall":0.36024305555555575,"f1":null,"seconds":8.677691221237183e-5,"exhaustive_search_seconds":0.000214405357837677,"evaluations":451.21875,"distances_sum":1723.337174454793}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5390624999999998,"recall":0.5390624999999998,"f1":null,"seconds":0.00015397369861602783,"exhaustive_search_seconds":0.000214405357837677,"evaluations":558.890625,"distances_sum":1629.11831428374}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6519097222222219,"recall":0.6519097222222219,"f1":null,"seconds":0.0003708135336637497,"exhaustive_search_seconds":0.000214405357837677,"evaluations":664.0,"distances_sum":1575.0348075911845}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7317708333333326,"recall":0.7317708333333326,"f1":0.7317708333333326,"seconds":0.0002250485122203827,"exhaustive_search_seconds":0.000214405357837677,"evaluations":771.8203125,"distances_sum":1549.8558561221207}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7951388888888878,"recall":0.7951388888888878,"f1":0.7951388888888878,"seconds":0.00038836896419525146,"exhaustive_search_seconds":0.000214405357837677,"evaluations":874.34375,"distances_sum":1528.3940374064377}
KCenters.DeloneInvIndex> reached performance {"precision":0.834201388888888,"recall":0.834201388888888,"f1":0.834201388888888,"seconds":0.0003029927611351013,"exhaustive_search_seconds":0.000214405357837677,"evaluations":959.3125,"distances_sum":1517.8675299967222}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.809, speedup = 0.8783993021480753, eval_ratio = 0.09339)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
