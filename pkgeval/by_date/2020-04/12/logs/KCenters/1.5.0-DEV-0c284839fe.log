Julia Version 1.5.0-DEV.613
Commit 0c284839fe (2020-04-11 01:16 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed MappedArrays ──────────────── v0.2.2
  Installed TableTraits ───────────────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Parsers ───────────────────── v1.0.1
  Installed KCenters ──────────────────── v0.2.2
  Installed DataStructures ────────────── v0.17.12
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataValueInterfaces ───────── v1.0.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed MLDataPattern ─────────────── v0.5.1
  Installed Reexport ──────────────────── v0.2.0
  Installed Missings ──────────────────── v0.4.3
  Installed DataAPI ───────────────────── v1.1.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed JSON ──────────────────────── v0.21.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed DataFrames ────────────────── v0.20.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed Compat ────────────────────── v3.8.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed Tables ────────────────────── v1.0.3
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.12
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.1
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.3
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_bsSebr/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_bsSebr/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.12
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.1
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.3
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9370718047022819
[ Info: 0.8321307849884033
[ Info: 0.5529132370650768
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33292161889374255
mean(cdnet.distances) = 0.4203966047863166
mean(crand.distances) = 0.3337603388975064
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5673828125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5673828125,"f1":0.7090572621822628,"seconds":5.083158612251282e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.890625,"distances_sum":1566.1844251486623}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8607720404595414,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.6015625,"distances_sum":2285.8965988133004}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7685546875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7685546875,"f1":0.8607720404595414,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.6015625,"distances_sum":2285.8965988133004}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9432926448551454,"seconds":7.158145308494568e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.765625,"distances_sum":2874.1520558917264}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9432926448551454,"seconds":7.158145308494568e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.765625,"distances_sum":2874.1520558917264}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.963747710622711,"seconds":7.35744833946228e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.875,"distances_sum":3031.585870720978}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9633985805860807,"seconds":6.18956983089447e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.9140625,"distances_sum":3029.042853046161}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.963747710622711,"seconds":7.35744833946228e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.875,"distances_sum":3031.585870720978}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.963747710622711,"seconds":7.35744833946228e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.875,"distances_sum":3031.585870720978}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.431640625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.431640625,"f1":null,"seconds":4.595145583152771e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.5390625,"distances_sum":1054.4268586831183}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4052734375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4052734375,"f1":null,"seconds":4.328787326812744e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.3203125,"distances_sum":1007.6552708457091}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.431640625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.431640625,"f1":null,"seconds":4.595145583152771e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.5390625,"distances_sum":1054.4268586831183}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5595703125, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5595703125,"f1":null,"seconds":4.55416738986969e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.9296875,"distances_sum":1456.5526266781121}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9196090367965375,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.84375,"distances_sum":2580.067229539178}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8570554445554454,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.7265625,"distances_sum":2165.4073074872567}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8642578125,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.8642578125,"f1":0.9196090367965375,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.84375,"distances_sum":2580.067229539178}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9592490842490847,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8828125,"distances_sum":2888.4163049245535}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9538347069597073,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8984375,"distances_sum":2824.702616832461}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9678571428571432,"seconds":6.05359673500061e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.96875,"distances_sum":2919.8883842152304}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9678571428571432,"seconds":6.05359673500061e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.96875,"distances_sum":2919.8883842152304}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9678571428571432,"seconds":6.05359673500061e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.96875,"distances_sum":2919.8883842152304}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5791015625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5791015625,"f1":null,"seconds":3.974884748458862e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.1484375,"distances_sum":1480.5163050444007}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5791015625,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5791015625,"f1":null,"seconds":3.974884748458862e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.1484375,"distances_sum":1480.5163050444007}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9185070138195144,"seconds":0.0001206323504447937,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.875,"distances_sum":2534.4586120513627}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9355743215118223,"seconds":5.7462602853775024e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.8828125,"distances_sum":2614.805108998189}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.9355743215118223,"seconds":5.7462602853775024e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.8828125,"distances_sum":2614.805108998189}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9667639652014656,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.9453125,"distances_sum":2874.8554589695764}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9742387820512822,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.9609375,"distances_sum":2937.268743988575}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9652930402930409,"seconds":5.273148417472839e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.9609375,"distances_sum":2847.7782311825445}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9742387820512822,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.9609375,"distances_sum":2937.268743988575}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9742387820512822,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.9609375,"distances_sum":2937.268743988575}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5830078125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5830078125,"f1":0.7173984002109007,"seconds":3.887340426445007e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.4453125,"distances_sum":1395.868192314783}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.177734375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.177734375,"f1":null,"seconds":2.777203917503357e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.234375,"distances_sum":434.9459185179326}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3935546875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3935546875,"f1":null,"seconds":3.807246685028076e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.6328125,"distances_sum":901.279279141175}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.685546875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.685546875,"f1":0.7973105019980028,"seconds":4.628673195838928e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.984375,"distances_sum":1758.5645962545755}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.685546875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.685546875,"f1":0.7973105019980028,"seconds":4.628673195838928e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.984375,"distances_sum":1758.5645962545755}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9125946969696975,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.53125,"distances_sum":2383.4383727688055}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9296989468864476,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.4609375,"distances_sum":2530.9792380224067}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8667337870462878,"seconds":5.334615707397461e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.3984375,"distances_sum":2063.9803390955317}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8779296875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8779296875,"f1":0.9296989468864476,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.4609375,"distances_sum":2530.9792380224067}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9700377747252751,"seconds":6.183981895446777e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8828125,"distances_sum":2783.7485014480244}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9568681318681322,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.7578125,"distances_sum":2700.6902573126827}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.952667124542125,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.6640625,"distances_sum":2713.2426535731147}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9706501831501837,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8671875,"distances_sum":2777.8577816510874}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9346840659340665,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.46875,"distances_sum":2562.5383644147587}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9706501831501837,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8671875,"distances_sum":2777.8577816510874}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9706501831501837,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8671875,"distances_sum":2777.8577816510874}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.421875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.421875,"f1":null,"seconds":4.081055521965027e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.1484375,"distances_sum":1047.0907346051927}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1923828125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1923828125,"f1":null,"seconds":3.50363552570343e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.6015625,"distances_sum":562.1557118821042}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.421875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.421875,"f1":null,"seconds":4.081055521965027e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.1484375,"distances_sum":1047.0907346051927}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5615234375, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.5615234375,"f1":null,"seconds":4.559755325317383e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.84375,"distances_sum":1434.4788836675227}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8573182026307034,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.6640625,"distances_sum":2105.1062450976337}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8053514194139201,"seconds":5.187466740608215e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.3671875,"distances_sum":1842.8497542689922}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5654296875, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.5654296875,"f1":null,"seconds":4.498288035392761e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.65625,"distances_sum":1479.7403726967623}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8573182026307034,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.6640625,"distances_sum":2105.1062450976337}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9317422161172167,"seconds":6.554648280143738e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.765625,"distances_sum":2635.7507460279066}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9019662629037639,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.546875,"distances_sum":2439.240796995963}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.929086538461539,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8671875,"distances_sum":2572.7257879736585}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9026390276390284,"seconds":5.597248673439026e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.609375,"distances_sum":2470.1037615093296}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8818359375,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8818359375,"f1":0.9317422161172167,"seconds":6.554648280143738e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.765625,"distances_sum":2635.7507460279066}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8818359375,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8818359375,"f1":0.9317422161172167,"seconds":6.554648280143738e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.765625,"distances_sum":2635.7507460279066}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5810546875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5810546875,"f1":0.7187496531246539,"seconds":4.49642539024353e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.2734375,"distances_sum":1547.489357699562}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.552734375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.552734375,"f1":0.6972220487845493,"seconds":4.4833868741989136e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.1328125,"distances_sum":1450.073095593248}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.54296875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.54296875,"f1":0.6825195637695645,"seconds":4.556030035018921e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":6.984375,"distances_sum":1409.8469890554306}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5810546875,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.5810546875,"f1":0.7187496531246539,"seconds":4.49642539024353e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.2734375,"distances_sum":1547.489357699562}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9052457958707967,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.4921875,"distances_sum":2454.425405694315}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8603250915750924,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.3125,"distances_sum":2193.73185179092}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8939940268065276,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.34375,"distances_sum":2376.980856718732}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9325809607059614,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.484375,"distances_sum":2660.507361653356}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.9016743672993682,"seconds":5.7015568017959595e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.3125,"distances_sum":2443.1640368518997}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8818359375,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.8818359375,"f1":0.9325809607059614,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.484375,"distances_sum":2660.507361653356}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9603651556776561,"seconds":6.731599569320679e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.78125,"distances_sum":2899.941123295727}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9629521520146525,"seconds":6.200745701789856e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.7890625,"distances_sum":2936.9391558613665}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9647206959706964,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8125,"distances_sum":2919.4405548527548}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9758928571428575,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8671875,"distances_sum":3017.374370364158}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9660542582417586,"seconds":6.8284571170806885e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.828125,"distances_sum":2940.429086241821}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9649610805860811,"seconds":7.197260856628418e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.84375,"distances_sum":2936.300434508839}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9758928571428575,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8671875,"distances_sum":3017.374370364158}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9758928571428575,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8671875,"distances_sum":3017.374370364158}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6943359375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6943359375,"f1":0.808165272227773,"seconds":5.4370611906051636e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.3203125,"distances_sum":1813.3987259122541}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4228515625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4228515625,"f1":null,"seconds":4.649162292480469e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.140625,"distances_sum":1007.4278637552844}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6943359375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6943359375,"f1":0.808165272227773,"seconds":5.4370611906051636e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.3203125,"distances_sum":1813.3987259122541}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9480769230769237,"seconds":6.707385182380676e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.75,"distances_sum":2686.7168294083394}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9480769230769237,"seconds":6.707385182380676e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.75,"distances_sum":2686.7168294083394}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9581730769230772,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8125,"distances_sum":2778.3484249675344}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9752976190476195,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.9140625,"distances_sum":2875.9232913543615}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9752976190476195,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.9140625,"distances_sum":2875.9232913543615}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9752976190476195,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.9140625,"distances_sum":2875.9232913543615}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3876953125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3876953125,"f1":null,"seconds":4.045665264129639e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":5.6953125,"distances_sum":647.894290205784}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.53515625,"f1":0.6789259351759359,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":7.0,"distances_sum":937.2647846868117}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2333984375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2333984375,"f1":null,"seconds":3.4011900424957275e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":5.125,"distances_sum":441.4321932326765}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.53515625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.53515625,"f1":0.6789259351759359,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":7.0,"distances_sum":937.2647846868117}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.53515625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.53515625,"f1":0.6789259351759359,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":7.0,"distances_sum":937.2647846868117}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.53515625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.53515625,"f1":0.6789259351759359,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":7.0,"distances_sum":937.2647846868117}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8776587995338003,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.625,"distances_sum":1792.0307841779204}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2109375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2109375,"f1":null,"seconds":3.719702363014221e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":5.890625,"distances_sum":431.7360380679589}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.794921875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.794921875,"f1":0.8776587995338003,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.625,"distances_sum":1792.0307841779204}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9329472610722618,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6875,"distances_sum":2160.3576194359803}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.88671875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.88671875,"f1":0.9329472610722618,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6875,"distances_sum":2160.3576194359803}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9606112637362643,"seconds":6.603077054023743e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8125,"distances_sum":2339.9527797640835}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9610347985347991,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8828125,"distances_sum":2335.388637643049}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.963953754578755,"seconds":6.766989827156067e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8359375,"distances_sum":2344.591686536719}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9593406593406597,"seconds":6.213784217834473e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.875,"distances_sum":2298.313075139363}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.963953754578755,"seconds":6.766989827156067e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8359375,"distances_sum":2344.591686536719}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.963953754578755,"seconds":6.766989827156067e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8359375,"distances_sum":2344.591686536719}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.603515625, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.603515625,"f1":null,"seconds":4.7050416469573975e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":7.7734375,"distances_sum":1236.1922259676644}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.40625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.40625,"f1":null,"seconds":4.220753908157349e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":7.09375,"distances_sum":824.5917159422282}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.603515625,"state":{"ssize":3,"bsize":3},"perf":{"precision":null,"recall":0.603515625,"f1":null,"seconds":4.7050416469573975e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":7.7734375,"distances_sum":1236.1922259676644}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9430720321345323,"seconds":6.085261702537537e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.796875,"distances_sum":2299.6970938596405}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7960078116328126,"seconds":4.881992936134338e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.140625,"distances_sum":1454.1664861233035}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9102335164835175,"seconds":6.156042218208313e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.6953125,"distances_sum":2066.2850942574637}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8501160298035307,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.6484375,"distances_sum":1717.6513885005038}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8761249167499174,"seconds":6.930902600288391e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.7734375,"distances_sum":1870.3993366672146}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9430720321345323,"seconds":6.085261702537537e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.796875,"distances_sum":2299.6970938596405}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9559409340659347,"seconds":6.368383765220642e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.90625,"distances_sum":2373.6183029696917}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9502861721611727,"seconds":6.0889869928359985e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.8828125,"distances_sum":2349.9778422578306}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9559409340659347,"seconds":6.368383765220642e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.90625,"distances_sum":2373.6183029696917}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9559409340659347,"seconds":6.368383765220642e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.90625,"distances_sum":2373.6183029696917}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.786898518148519,"seconds":4.773959517478943e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.6484375,"distances_sum":1479.7688076215459}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7294921875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7294921875,"f1":0.8317354520479529,"seconds":4.740431904792786e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.8984375,"distances_sum":1739.0616382794717}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.843821803196804,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.9375,"distances_sum":1719.8015509481513}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7431640625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7431640625,"f1":0.843821803196804,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.9375,"distances_sum":1719.8015509481513}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9272264194139203,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.609375,"distances_sum":2243.321162677049}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8941083222333226,"seconds":5.1390379667282104e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.453125,"distances_sum":2005.4326388612837}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9555116758241762,"seconds":5.461275577545166e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7890625,"distances_sum":2404.22942512752}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8476506132756139,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.9375,"distances_sum":1784.3710755663178}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.904109432234433,"seconds":5.116686224937439e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.546875,"distances_sum":2014.578551211105}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9442021520146527,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7421875,"distances_sum":2325.3572379033803}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9555116758241762,"seconds":5.461275577545166e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7890625,"distances_sum":2404.22942512752}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":10,"bsize":11}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9644173534798539,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8515625,"distances_sum":2468.535393624907}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9758928571428576,"seconds":5.662441253662109e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9296875,"distances_sum":2529.226053100893}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9686240842490846,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8671875,"distances_sum":2473.858618531014}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9758928571428576,"seconds":5.662441253662109e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9296875,"distances_sum":2529.226053100893}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9758928571428576,"seconds":5.662441253662109e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.9296875,"distances_sum":2529.226053100893}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8507331210456219,"seconds":5.068257451057434e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.3515625,"distances_sum":1665.2866076613989}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.64453125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.64453125,"f1":0.7665632978132985,"seconds":4.556030035018921e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.6640625,"distances_sum":1343.4955568163098}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.193359375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.193359375,"f1":null,"seconds":3.3471733331680298e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.265625,"distances_sum":359.8257257550408}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7509765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7509765625,"f1":0.8507331210456219,"seconds":5.068257451057434e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.3515625,"distances_sum":1665.2866076613989}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9596039377289384,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.84375,"distances_sum":2389.214072917273}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9520489926739933,"seconds":5.2638351917266846e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.875,"distances_sum":2328.2193056814}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9234322968697973,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.734375,"distances_sum":2144.616126291682}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9366217116217121,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.734375,"distances_sum":2276.538437667787}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.861547827172828,"seconds":5.301088094711304e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.4609375,"distances_sum":1735.4333172556683}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9596039377289384,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.84375,"distances_sum":2389.214072917273}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9731227106227108,"seconds":6.495043635368347e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9453125,"distances_sum":2489.6217861352275}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9706730769230771,"seconds":5.971640348434448e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.890625,"distances_sum":2464.3082644888327}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":4,"bsize":13}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9802655677655678,"seconds":6.7390501499176025e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9375,"distances_sum":2528.4129206115795}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9696860431235433,"seconds":6.2212347984313965e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.890625,"distances_sum":2478.3289734244713}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9674336080586086,"seconds":6.4838677644729614e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9296875,"distances_sum":2433.5924057501647}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9612751831501835,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.90625,"distances_sum":2402.455800510433}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9705013736263739,"seconds":6.230548024177551e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9140625,"distances_sum":2461.5571740760365}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9731258325008328,"seconds":6.025657057762146e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9375,"distances_sum":2485.4152522379272}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9742216117216118,"seconds":6.12996518611908e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.90625,"distances_sum":2505.3552998142873}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9638671875,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9802655677655678,"seconds":6.7390501499176025e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9375,"distances_sum":2528.4129206115795}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9638671875,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9802655677655678,"seconds":6.7390501499176025e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9375,"distances_sum":2528.4129206115795}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.240234375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.240234375,"f1":null,"seconds":3.429129719734192e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":6.609375,"distances_sum":496.1711959684531}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5703125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5703125,"f1":0.7095689033189039,"seconds":4.4405460357666016e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":7.3203125,"distances_sum":1178.981680737961}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5703125,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.5703125,"f1":0.7095689033189039,"seconds":4.4405460357666016e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":7.3203125,"distances_sum":1178.981680737961}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9146749084249092,"seconds":5.9604644775390625e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.5859375,"distances_sum":2153.5281535784084}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9371737637362645,"seconds":6.550922989845276e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.8125,"distances_sum":2265.9599662671712}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5791015625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5791015625,"f1":null,"seconds":7.35986977815628e-5,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":7.3515625,"distances_sum":1207.1558982673803}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.73828125,"f1":0.8402972027972035,"seconds":6.148591637611389e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.296875,"distances_sum":1684.3822877894008}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7974655552780561,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.0390625,"distances_sum":1484.7699684615384}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.9371737637362645,"seconds":6.550922989845276e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.8125,"distances_sum":2265.9599662671712}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9739239926739932,"seconds":7.057562470436096e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.9453125,"distances_sum":2540.1519328636887}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9564274267399272,"seconds":6.593763828277588e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.859375,"distances_sum":2419.730791363443}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9374027014652023,"seconds":6.3925981521606445e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.734375,"distances_sum":2280.529842539751}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9739239926739932,"seconds":7.057562470436096e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.9453125,"distances_sum":2540.1519328636887}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9739239926739932,"seconds":7.057562470436096e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":8.9453125,"distances_sum":2540.1519328636887}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5458984375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5458984375,"f1":null,"seconds":4.8354268074035645e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.0703125,"distances_sum":1235.5705739142923}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.232421875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.232421875,"f1":null,"seconds":3.7960708141326904e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":6.0546875,"distances_sum":538.873155565357}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5458984375,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5458984375,"f1":null,"seconds":4.8354268074035645e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.0703125,"distances_sum":1235.5705739142923}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9404132326007333,"seconds":6.26780092716217e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.7890625,"distances_sum":2291.9027056025734}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8490967365967372,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.3828125,"distances_sum":1782.4090531428913}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.658203125,"f1":0.783002414252415,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.5859375,"distances_sum":1536.555778165438}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8430153180153188,"seconds":6.172806024551392e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.4375,"distances_sum":1735.0746614922466}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.9404132326007333,"seconds":6.26780092716217e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.7890625,"distances_sum":2291.9027056025734}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9652014652014657,"seconds":6.791204214096069e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8671875,"distances_sum":2479.4000619843446}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9603823260073265,"seconds":6.6943466663360596e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8515625,"distances_sum":2442.0921960199553}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9662603021978027,"seconds":6.891787052154541e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.875,"distances_sum":2471.6675367906}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9473474442224447,"seconds":6.748363375663757e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.765625,"distances_sum":2375.353944727801}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9662603021978027,"seconds":6.891787052154541e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.875,"distances_sum":2471.6675367906}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9662603021978027,"seconds":6.891787052154541e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.875,"distances_sum":2471.6675367906}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2119140625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2119140625,"f1":null,"seconds":3.298744559288025e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":5.0859375,"distances_sum":477.1835617926634}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2119140625,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.2119140625,"f1":null,"seconds":3.298744559288025e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":5.0859375,"distances_sum":477.1835617926634}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2119140625,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.2119140625,"f1":null,"seconds":3.298744559288025e-6,"exhaustive_search_seconds":1.6782432794570923e-6,"evaluations":5.0859375,"distances_sum":477.1835617926634}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.416015625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.416015625,"f1":null,"seconds":4.166737198829651e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":6.1015625,"distances_sum":861.5455091533075}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2509765625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2509765625,"f1":null,"seconds":3.814697265625e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":5.859375,"distances_sum":554.7288289990589}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.416015625,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.416015625,"f1":null,"seconds":4.166737198829651e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":6.1015625,"distances_sum":861.5455091533075}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8893720862470871,"seconds":6.204470992088318e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.2734375,"distances_sum":1961.8256913665837}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8125,"f1":0.8893720862470871,"seconds":6.204470992088318e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.2734375,"distances_sum":1961.8256913665837}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9559581043956051,"seconds":6.884336471557617e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8125,"distances_sum":2408.49149892792}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9559581043956051,"seconds":6.884336471557617e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8125,"distances_sum":2408.49149892792}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9559581043956051,"seconds":6.884336471557617e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8125,"distances_sum":2408.49149892792}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.255859375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.255859375,"f1":null,"seconds":4.1816383600234985e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":6.796875,"distances_sum":556.4815376372126}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.693359375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.693359375,"f1":0.8084158896658905,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.9765625,"distances_sum":1562.0562001331796}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.693359375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.693359375,"f1":0.8084158896658905,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.9765625,"distances_sum":1562.0562001331796}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9096929112554123,"seconds":6.215646862983704e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.3515625,"distances_sum":2109.7426675574825}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.845703125,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.845703125,"f1":0.9096929112554123,"seconds":6.215646862983704e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.3515625,"distances_sum":2109.7426675574825}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9379552738927744,"seconds":6.528571248054504e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.6953125,"distances_sum":2373.545700550577}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9519948801198806,"seconds":6.796792149543762e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7734375,"distances_sum":2440.4750911190954}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9519948801198806,"seconds":6.796792149543762e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7734375,"distances_sum":2440.4750911190954}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9150390625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9519948801198806,"seconds":6.796792149543762e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7734375,"distances_sum":2440.4750911190954}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.57421875, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.57421875,"f1":null,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.2734375,"distances_sum":1254.9627155467572}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.244140625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.244140625,"f1":null,"seconds":3.935769200325012e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":6.8671875,"distances_sum":522.6784844191899}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.57421875,"state":{"ssize":3,"bsize":3},"perf":{"precision":null,"recall":0.57421875,"f1":null,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.2734375,"distances_sum":1254.9627155467572}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80078125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.80078125,"f1":0.882995650183151,"seconds":6.0927122831344604e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.390625,"distances_sum":1944.622120594059}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.79703993922744,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.875,"distances_sum":1548.4179323567873}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9155282217782225,"seconds":6.3944607973098755e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.4453125,"distances_sum":2138.4608404011383}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9224218489843496,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.4921875,"distances_sum":2200.1015277259894}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8671875,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.8671875,"f1":0.9224218489843496,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.4921875,"distances_sum":2200.1015277259894}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9580242673992678,"seconds":7.070600986480713e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8203125,"distances_sum":2466.7971963641744}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9732371794871798,"seconds":7.167458534240723e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.921875,"distances_sum":2555.419534992893}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9575206043956047,"seconds":6.815418601036072e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.796875,"distances_sum":2447.2439729199705}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9518887362637367,"seconds":6.778165698051453e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.7734375,"distances_sum":2432.8739697721203}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9257612179487187,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.546875,"distances_sum":2232.293573845034}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9503236346986352,"seconds":6.59748911857605e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.7421875,"distances_sum":2442.121226109361}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9732371794871798,"seconds":7.167458534240723e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.921875,"distances_sum":2555.419534992893}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9732371794871798,"seconds":7.167458534240723e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.921875,"distances_sum":2555.419534992893}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7911260614385621,"seconds":4.814937710762024e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.8046875,"distances_sum":1665.7006692966183}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7843361499611505,"seconds":4.718080163002014e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.75,"distances_sum":1614.0832035769279}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5068359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5068359375,"f1":null,"seconds":4.220753908157349e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.1328125,"distances_sum":1093.5343423335003}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.67578125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.67578125,"f1":0.7911260614385621,"seconds":4.814937710762024e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.8046875,"distances_sum":1665.7006692966183}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9284543581418587,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.625,"distances_sum":2434.6008924571156}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9020125707625714,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.4453125,"distances_sum":2179.842908533007}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.953519917582418,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8359375,"distances_sum":2549.137558254379}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9347813644688654,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.734375,"distances_sum":2409.1511344838095}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.953519917582418,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8359375,"distances_sum":2549.137558254379}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9658940018315021,"seconds":6.3534826040267944e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.875,"distances_sum":2639.8999260580285}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.957426427738928,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7734375,"distances_sum":2616.4431760762773}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9716517857142861,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9296875,"distances_sum":2669.4765294030612}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9716517857142861,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9296875,"distances_sum":2669.4765294030612}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9716517857142861,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9296875,"distances_sum":2669.4765294030612}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.21875,"f1":null,"seconds":2.8330832719802856e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":4.9296875,"distances_sum":574.1738624447114}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5107421875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5107421875,"f1":null,"seconds":4.023313522338867e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.671875,"distances_sum":1191.9173106460519}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8399609071484079,"seconds":5.0533562898635864e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.0,"distances_sum":1839.3538865831433}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.74609375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.74609375,"f1":0.8399609071484079,"seconds":5.0533562898635864e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.0,"distances_sum":1839.3538865831433}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9437123640248644,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.7421875,"distances_sum":2516.5637092498946}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8620051823176831,"seconds":5.1390379667282104e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.203125,"distances_sum":1944.6106239628666}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8483079420579429,"seconds":4.913657903671265e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.0390625,"distances_sum":1920.7487334729822}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9437123640248644,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.7421875,"distances_sum":2516.5637092498946}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9743131868131871,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.953125,"distances_sum":2667.3462471330354}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9507898351648356,"seconds":4.373490810394287e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.7265625,"distances_sum":2577.4521249045847}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9582074175824181,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.828125,"distances_sum":2568.4354288084146}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9743131868131871,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.953125,"distances_sum":2667.3462471330354}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9743131868131871,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.953125,"distances_sum":2667.3462471330354}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8487063283938292,"seconds":4.755333065986633e-6,"exhaustive_search_seconds":2.1476298570632935e-6,"evaluations":8.1015625,"distances_sum":1777.1971285699176}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3955078125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3955078125,"f1":null,"seconds":3.3061951398849487e-6,"exhaustive_search_seconds":2.1476298570632935e-6,"evaluations":5.8984375,"distances_sum":933.2837686123542}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.751953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.751953125,"f1":0.8487063283938292,"seconds":4.755333065986633e-6,"exhaustive_search_seconds":2.1476298570632935e-6,"evaluations":8.1015625,"distances_sum":1777.1971285699176}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9401327838827843,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":2.1476298570632935e-6,"evaluations":8.7578125,"distances_sum":2356.8071143497464}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.8858922327672334,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":2.1476298570632935e-6,"evaluations":8.3359375,"distances_sum":2002.7922078305307}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8955078125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8955078125,"f1":0.9401327838827843,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":2.1476298570632935e-6,"evaluations":8.7578125,"distances_sum":2356.8071143497464}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9650328837828841,"seconds":6.057322025299072e-6,"exhaustive_search_seconds":2.1476298570632935e-6,"evaluations":8.8515625,"distances_sum":2548.6390737186416}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9726591117216126,"seconds":6.761401891708374e-6,"exhaustive_search_seconds":2.1476298570632935e-6,"evaluations":8.90625,"distances_sum":2584.41525008174}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9617387820512826,"seconds":6.0889869928359985e-6,"exhaustive_search_seconds":2.1476298570632935e-6,"evaluations":8.84375,"distances_sum":2517.6323347663724}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9447261072261078,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":2.1476298570632935e-6,"evaluations":8.765625,"distances_sum":2390.62538890215}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9403762903762908,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":2.1476298570632935e-6,"evaluations":8.703125,"distances_sum":2418.443688296297}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9726591117216126,"seconds":6.761401891708374e-6,"exhaustive_search_seconds":2.1476298570632935e-6,"evaluations":8.90625,"distances_sum":2584.41525008174}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9726591117216126,"seconds":6.761401891708374e-6,"exhaustive_search_seconds":2.1476298570632935e-6,"evaluations":8.90625,"distances_sum":2584.41525008174}}, n: 9
mean(cfft.distances) = 0.3329216188476702
mean(cdnet.distances) = 1.2073276050486001
mean(crand.distances) = 0.33410392970906305
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.86
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8688888888888889
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8533333333333332
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8799999999999999
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9333333333333332
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8799999999999999
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.84
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9155555555555556
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9111111111111111
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9288888888888889
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9222222222222222
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9355555555555556
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8466666666666667
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8688888888888888
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.88
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9222222222222222
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8777777777777779
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9355555555555556
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9133333333333334
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8999999999999999
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9066666666666667
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8577777777777778
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8688888888888888
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9222222222222222
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9111111111111111
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 9, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 11, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 15 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 9, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 11, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 15 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 9, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 11, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 15 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 9, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 11, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 15 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 9, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 11, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 15 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 9, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 11, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 15 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 9, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 11, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 15 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2]
acc = 0.96
*** finished computation of 12 references, err: [Inf, 0.6065741968154907] ***
*** center 1: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 8, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.2836108255541293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2836108255541293, 0.22994557937800145] ***
*** starting iteration: 2; err: [Inf, 0.2836108255541293, 0.22994557937800145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2836108255541293, 0.22994557937800145, 0.2140991418530141] ***
*** starting iteration: 3; err: [Inf, 0.2836108255541293, 0.22994557937800145, 0.2140991418530141] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2836108255541293, 0.22994557937800145, 0.2140991418530141, 0.204519924009918] ***
*** finished computation of 7 references, err: [Inf, 0.2836108255541293, 0.22994557937800145, 0.2140991418530141, 0.204519924009918] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [95, 11, 0]]
** centroid: 1, normalized-entropy: 0.4808446942193282, [(1, 95), (2, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 32, 0]]
** centroid: 3, normalized-entropy: 0.9489804585630239, [(1, 55), (2, 32)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 116, 18]]
** centroid: 4, normalized-entropy: 0.569190343735683, [(2, 116), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 85, 0]]
** centroid: 5, normalized-entropy: 0.9804190303660398, [(1, 61), (2, 85)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23294223449856177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23294223449856177, 0.19072577339000832] ***
*** starting iteration: 2; err: [Inf, 0.23294223449856177, 0.19072577339000832] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23294223449856177, 0.19072577339000832, 0.18772284666179628] ***
*** starting iteration: 3; err: [Inf, 0.23294223449856177, 0.19072577339000832, 0.18772284666179628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23294223449856177, 0.19072577339000832, 0.18772284666179628, 0.18694579959295501] ***
*** finished computation of 7 references, err: [Inf, 0.23294223449856177, 0.19072577339000832, 0.18772284666179628, 0.18694579959295501] ***
*** center 1: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 73, 20]]
** centroid: 2, normalized-entropy: 0.7510324165275097, [(2, 73), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [68, 14, 0]]
** centroid: 3, normalized-entropy: 0.6593758812786991, [(1, 68), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [97, 3, 0]]
** centroid: 4, normalized-entropy: 0.19439185783157603, [(1, 97), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 81, 0]]
** centroid: 5, normalized-entropy: 0.7999783611177544, [(1, 26), (2, 81)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [19, 84, 0]]
** centroid: 6, normalized-entropy: 0.6897501750585195, [(1, 19), (2, 84)]
*** center 7: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18537102018234072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18537102018234072, 0.15035290457308292] ***
*** starting iteration: 2; err: [Inf, 0.18537102018234072, 0.15035290457308292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18537102018234072, 0.15035290457308292, 0.14548859112496088] ***
*** starting iteration: 3; err: [Inf, 0.18537102018234072, 0.15035290457308292, 0.14548859112496088] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18537102018234072, 0.15035290457308292, 0.14548859112496088, 0.1442243414791161] ***
*** starting iteration: 4; err: [Inf, 0.18537102018234072, 0.15035290457308292, 0.14548859112496088, 0.1442243414791161] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18537102018234072, 0.15035290457308292, 0.14548859112496088, 0.1442243414791161, 0.14410431835207496] ***
*** finished computation of 7 references, err: [Inf, 0.18537102018234072, 0.15035290457308292, 0.14548859112496088, 0.1442243414791161, 0.14410431835207496] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 86, 8]]
** centroid: 1, normalized-entropy: 0.4199210973757179, [(2, 86), (3, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [78, 23, 0]]
** centroid: 3, normalized-entropy: 0.7740204128451942, [(1, 78), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [70, 20, 0]]
** centroid: 4, normalized-entropy: 0.7642045065086204, [(1, 70), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [95, 13, 0]]
** centroid: 5, normalized-entropy: 0.5304245472812997, [(1, 95), (2, 13)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 96, 10]]
** centroid: 6, normalized-entropy: 0.4507913883546652, [(2, 96), (3, 10)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [69, 6, 0]]
** centroid: 7, normalized-entropy: 0.4021791902022729, [(1, 69), (2, 6)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19890095796463997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19890095796463997, 0.14699180495284353] ***
*** starting iteration: 2; err: [Inf, 0.19890095796463997, 0.14699180495284353] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19890095796463997, 0.14699180495284353, 0.1447979889648116] ***
*** starting iteration: 3; err: [Inf, 0.19890095796463997, 0.14699180495284353, 0.1447979889648116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19890095796463997, 0.14699180495284353, 0.1447979889648116, 0.14459189711797654] ***
*** finished computation of 7 references, err: [Inf, 0.19890095796463997, 0.14699180495284353, 0.1447979889648116, 0.14459189711797654] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [113, 2, 0]]
** centroid: 1, normalized-entropy: 0.12653159222336474, [(1, 113), (2, 2)]
*** center 2: selecting labels [1] (freq >= 2) [from [92, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 47, 24]]
** centroid: 3, normalized-entropy: 0.9229192878686723, [(2, 47), (3, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [77, 27, 0]]
** centroid: 5, normalized-entropy: 0.826165427834159, [(1, 77), (2, 27)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 83, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 83, 0]]
** centroid: 7, normalized-entropy: 0.16082302082246946, [(1, 2), (2, 83)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1947025085842681] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1947025085842681, 0.14962893304787855] ***
*** starting iteration: 2; err: [Inf, 0.1947025085842681, 0.14962893304787855] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1947025085842681, 0.14962893304787855, 0.14447975331342136] ***
*** starting iteration: 3; err: [Inf, 0.1947025085842681, 0.14962893304787855, 0.14447975331342136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1947025085842681, 0.14962893304787855, 0.14447975331342136, 0.1430590405782358] ***
*** starting iteration: 4; err: [Inf, 0.1947025085842681, 0.14962893304787855, 0.14447975331342136, 0.1430590405782358] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1947025085842681, 0.14962893304787855, 0.14447975331342136, 0.1430590405782358, 0.1425883410592051] ***
*** finished computation of 7 references, err: [Inf, 0.1947025085842681, 0.14962893304787855, 0.14447975331342136, 0.1430590405782358, 0.1425883410592051] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 103, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [90, 22, 0]]
** centroid: 3, normalized-entropy: 0.7147274731317893, [(1, 90), (2, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 25, 0]]
** centroid: 5, normalized-entropy: 0.8524051786494784, [(1, 65), (2, 25)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 96, 20]]
** centroid: 6, normalized-entropy: 0.6631968402398286, [(2, 96), (3, 20)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [61, 8, 0]]
** centroid: 7, normalized-entropy: 0.5175827525559071, [(1, 61), (2, 8)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22819556479059808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22819556479059808, 0.19663739304670746] ***
*** starting iteration: 2; err: [Inf, 0.22819556479059808, 0.19663739304670746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22819556479059808, 0.19663739304670746, 0.19241994429748874] ***
*** starting iteration: 3; err: [Inf, 0.22819556479059808, 0.19663739304670746, 0.19241994429748874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22819556479059808, 0.19663739304670746, 0.19241994429748874, 0.19101794775192243] ***
*** starting iteration: 4; err: [Inf, 0.22819556479059808, 0.19663739304670746, 0.19241994429748874, 0.19101794775192243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22819556479059808, 0.19663739304670746, 0.19241994429748874, 0.19101794775192243, 0.18987833705448262] ***
*** starting iteration: 5; err: [Inf, 0.22819556479059808, 0.19663739304670746, 0.19241994429748874, 0.19101794775192243, 0.18987833705448262] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22819556479059808, 0.19663739304670746, 0.19241994429748874, 0.19101794775192243, 0.18987833705448262, 0.18850362642217908] ***
*** starting iteration: 6; err: [Inf, 0.22819556479059808, 0.19663739304670746, 0.19241994429748874, 0.19101794775192243, 0.18987833705448262, 0.18850362642217908] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22819556479059808, 0.19663739304670746, 0.19241994429748874, 0.19101794775192243, 0.18987833705448262, 0.18850362642217908, 0.18755902081389572] ***
*** finished computation of 7 references, err: [Inf, 0.22819556479059808, 0.19663739304670746, 0.19241994429748874, 0.19101794775192243, 0.18987833705448262, 0.18850362642217908, 0.18755902081389572] ***
*** center 1: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 87, 18]]
** centroid: 2, normalized-entropy: 0.6609623351442084, [(2, 87), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [82, 3, 0]]
** centroid: 3, normalized-entropy: 0.22028326695127437, [(1, 82), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [86, 36, 0]]
** centroid: 4, normalized-entropy: 0.8751957887407251, [(1, 86), (2, 36)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 40, 0]]
** centroid: 5, normalized-entropy: 0.9990574042663861, [(1, 43), (2, 40)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 78, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22597370624006063] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22597370624006063, 0.19069465128230167] ***
*** starting iteration: 2; err: [Inf, 0.22597370624006063, 0.19069465128230167] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22597370624006063, 0.19069465128230167, 0.1877482027594542] ***
*** starting iteration: 3; err: [Inf, 0.22597370624006063, 0.19069465128230167, 0.1877482027594542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22597370624006063, 0.19069465128230167, 0.1877482027594542, 0.18730129874164778] ***
*** finished computation of 7 references, err: [Inf, 0.22597370624006063, 0.19069465128230167, 0.1877482027594542, 0.18730129874164778] ***
*** center 1: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 49, 24]]
** centroid: 2, normalized-entropy: 0.9136617865655933, [(2, 49), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [97, 7, 0]]
** centroid: 3, normalized-entropy: 0.3557951975011439, [(1, 97), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [12, 93, 0]]
** centroid: 4, normalized-entropy: 0.5127091420308771, [(1, 12), (2, 93)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 93, 0]]
** centroid: 5, normalized-entropy: 0.7912027614010296, [(1, 29), (2, 93)]
*** center 6: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 1, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2770760502677405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2770760502677405, 0.2002567756471449] ***
*** starting iteration: 2; err: [Inf, 0.2770760502677405, 0.2002567756471449] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2770760502677405, 0.2002567756471449, 0.1948743318172655] ***
*** starting iteration: 3; err: [Inf, 0.2770760502677405, 0.2002567756471449, 0.1948743318172655] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2770760502677405, 0.2002567756471449, 0.1948743318172655, 0.19236886308205942] ***
*** finished computation of 7 references, err: [Inf, 0.2770760502677405, 0.2002567756471449, 0.1948743318172655, 0.19236886308205942] ***
*** center 1: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 86, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [77, 37, 0]]
** centroid: 3, normalized-entropy: 0.9092730127456317, [(1, 77), (2, 37)]
*** center 4: selecting labels [1] (freq >= 2) [from [119, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [78, 16, 0]]
** centroid: 5, normalized-entropy: 0.6581912658132184, [(1, 78), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [13, 75, 0]]
** centroid: 6, normalized-entropy: 0.6041234581483739, [(1, 13), (2, 75)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 28, 24]]
** centroid: 7, normalized-entropy: 0.9957274520849256, [(2, 28), (3, 24)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24527984545349718] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24527984545349718, 0.19534363890781642] ***
*** starting iteration: 2; err: [Inf, 0.24527984545349718, 0.19534363890781642] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24527984545349718, 0.19534363890781642, 0.18820556058133694] ***
*** starting iteration: 3; err: [Inf, 0.24527984545349718, 0.19534363890781642, 0.18820556058133694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24527984545349718, 0.19534363890781642, 0.18820556058133694, 0.18549635426268385] ***
*** finished computation of 7 references, err: [Inf, 0.24527984545349718, 0.19534363890781642, 0.18820556058133694, 0.18549635426268385] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 85, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 39, 0]]
** centroid: 2, normalized-entropy: 0.9490651498811383, [(1, 67), (2, 39)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [70, 19, 0]]
** centroid: 5, normalized-entropy: 0.748088105780153, [(1, 70), (2, 19)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 91, 20]]
** centroid: 6, normalized-entropy: 0.680471054135434, [(2, 91), (3, 20)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [89, 21, 0]]
** centroid: 7, normalized-entropy: 0.7033693386668108, [(1, 89), (2, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3209857269282545] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3209857269282545, 0.24129062992948536] ***
*** finished computation of 7 references, err: [Inf, 0.3209857269282545, 0.24129062992948536] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [24, 14, 0]]
** centroid: 1, normalized-entropy: 0.9494520153879484, [(1, 24), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [138, 42, 0]]
** centroid: 2, normalized-entropy: 0.7837769474847011, [(1, 138), (2, 42)]
*** center 3: selecting labels [1] (freq >= 2) [from [128, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 100, 18]]
** centroid: 4, normalized-entropy: 0.6161661934005354, [(2, 100), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 78, 0]]
** centroid: 5, normalized-entropy: 0.9652016987500656, [(1, 50), (2, 78)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [45, 10, 0]]
** centroid: 6, normalized-entropy: 0.6840384356390419, [(1, 45), (2, 10)]
*** center 7: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3328208563293608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3328208563293608, 0.22832807543585593] ***
*** finished computation of 7 references, err: [Inf, 0.3328208563293608, 0.22832807543585593] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [45, 92, 0]]
** centroid: 1, normalized-entropy: 0.9133525990767271, [(1, 45), (2, 92)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [143, 2, 0]]
** centroid: 2, normalized-entropy: 0.10500149581279865, [(1, 143), (2, 2)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 87, 1]]
*** center 4: selecting labels [1] (freq >= 2) [from [36, 1, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [59, 48, 0]]
** centroid: 6, normalized-entropy: 0.9923628747472766, [(1, 59), (2, 48)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 13, 23]]
** centroid: 7, normalized-entropy: 0.943601631299382, [(2, 13), (3, 23)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3102649364528292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3102649364528292, 0.21097461993748817] ***
*** finished computation of 7 references, err: [Inf, 0.3102649364528292, 0.21097461993748817] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [90, 57, 0]]
** centroid: 1, normalized-entropy: 0.9633355456726842, [(1, 90), (2, 57)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 130, 20]]
** centroid: 2, normalized-entropy: 0.5665095065529052, [(2, 130), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [81, 6, 0]]
** centroid: 3, normalized-entropy: 0.36205125173399805, [(1, 81), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [35, 33, 0]]
** centroid: 4, normalized-entropy: 0.9993759069576513, [(1, 35), (2, 33)]
*** center 5: selecting labels [1] (freq >= 2) [from [29, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [83, 29, 0]]
** centroid: 6, normalized-entropy: 0.8251252643746189, [(1, 83), (2, 29)]
*** center 7: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26777281194635844] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26777281194635844, 0.2247327081845128] ***
*** starting iteration: 2; err: [Inf, 0.26777281194635844, 0.2247327081845128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26777281194635844, 0.2247327081845128, 0.20314761454815622] ***
*** starting iteration: 3; err: [Inf, 0.26777281194635844, 0.2247327081845128, 0.20314761454815622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26777281194635844, 0.2247327081845128, 0.20314761454815622, 0.19622952434060922] ***
*** starting iteration: 4; err: [Inf, 0.26777281194635844, 0.2247327081845128, 0.20314761454815622, 0.19622952434060922] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26777281194635844, 0.2247327081845128, 0.20314761454815622, 0.19622952434060922, 0.19446194862846183] ***
*** starting iteration: 5; err: [Inf, 0.26777281194635844, 0.2247327081845128, 0.20314761454815622, 0.19622952434060922, 0.19446194862846183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26777281194635844, 0.2247327081845128, 0.20314761454815622, 0.19622952434060922, 0.19446194862846183, 0.1941789434264853] ***
*** finished computation of 7 references, err: [Inf, 0.26777281194635844, 0.2247327081845128, 0.20314761454815622, 0.19622952434060922, 0.19446194862846183, 0.1941789434264853] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [100, 46, 0]]
** centroid: 1, normalized-entropy: 0.8989377852081333, [(1, 100), (2, 46)]
*** center 2: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 87, 18]]
** centroid: 3, normalized-entropy: 0.6609623351442084, [(2, 87), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [10, 90, 0]]
** centroid: 6, normalized-entropy: 0.46899559358928133, [(1, 10), (2, 90)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [36, 21, 0]]
** centroid: 7, normalized-entropy: 0.9494520153879484, [(1, 36), (2, 21)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2667148744986243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2667148744986243, 0.2262776737398785] ***
*** starting iteration: 2; err: [Inf, 0.2667148744986243, 0.2262776737398785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2667148744986243, 0.2262776737398785, 0.206473628505841] ***
*** starting iteration: 3; err: [Inf, 0.2667148744986243, 0.2262776737398785, 0.206473628505841] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2667148744986243, 0.2262776737398785, 0.206473628505841, 0.19678217434845138] ***
*** starting iteration: 4; err: [Inf, 0.2667148744986243, 0.2262776737398785, 0.206473628505841, 0.19678217434845138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2667148744986243, 0.2262776737398785, 0.206473628505841, 0.19678217434845138, 0.19096630342748724] ***
*** starting iteration: 5; err: [Inf, 0.2667148744986243, 0.2262776737398785, 0.206473628505841, 0.19678217434845138, 0.19096630342748724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2667148744986243, 0.2262776737398785, 0.206473628505841, 0.19678217434845138, 0.19096630342748724, 0.18917819922803894] ***
*** starting iteration: 6; err: [Inf, 0.2667148744986243, 0.2262776737398785, 0.206473628505841, 0.19678217434845138, 0.19096630342748724, 0.18917819922803894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2667148744986243, 0.2262776737398785, 0.206473628505841, 0.19678217434845138, 0.19096630342748724, 0.18917819922803894, 0.18853447573731416] ***
*** finished computation of 7 references, err: [Inf, 0.2667148744986243, 0.2262776737398785, 0.206473628505841, 0.19678217434845138, 0.19096630342748724, 0.18917819922803894, 0.18853447573731416] ***
*** center 1: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [103, 26, 0]]
** centroid: 3, normalized-entropy: 0.7250180540934875, [(1, 103), (2, 26)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [82, 22, 0]]
** centroid: 4, normalized-entropy: 0.7444131797881749, [(1, 82), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [25, 79, 0]]
** centroid: 5, normalized-entropy: 0.7956792965030224, [(1, 25), (2, 79)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 80, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 36, 24]]
** centroid: 7, normalized-entropy: 0.9709505944546688, [(2, 36), (3, 24)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.37257405787963294] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37257405787963294, 0.22332208242261786] ***
*** starting iteration: 2; err: [Inf, 0.37257405787963294, 0.22332208242261786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37257405787963294, 0.22332208242261786, 0.19884074973975724] ***
*** starting iteration: 3; err: [Inf, 0.37257405787963294, 0.22332208242261786, 0.19884074973975724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37257405787963294, 0.22332208242261786, 0.19884074973975724, 0.19055980560544325] ***
*** starting iteration: 4; err: [Inf, 0.37257405787963294, 0.22332208242261786, 0.19884074973975724, 0.19055980560544325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37257405787963294, 0.22332208242261786, 0.19884074973975724, 0.19055980560544325, 0.18624263559503] ***
*** starting iteration: 5; err: [Inf, 0.37257405787963294, 0.22332208242261786, 0.19884074973975724, 0.19055980560544325, 0.18624263559503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37257405787963294, 0.22332208242261786, 0.19884074973975724, 0.19055980560544325, 0.18624263559503, 0.18481151670122567] ***
*** starting iteration: 6; err: [Inf, 0.37257405787963294, 0.22332208242261786, 0.19884074973975724, 0.19055980560544325, 0.18624263559503, 0.18481151670122567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37257405787963294, 0.22332208242261786, 0.19884074973975724, 0.19055980560544325, 0.18624263559503, 0.18481151670122567, 0.1840582635278801] ***
*** finished computation of 7 references, err: [Inf, 0.37257405787963294, 0.22332208242261786, 0.19884074973975724, 0.19055980560544325, 0.18624263559503, 0.18481151670122567, 0.1840582635278801] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [62, 57, 0]]
** centroid: 1, normalized-entropy: 0.9987261494308297, [(1, 62), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [53, 38, 0]]
** centroid: 2, normalized-entropy: 0.9803107984107206, [(1, 53), (2, 38)]
*** center 3: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [8, 56, 0]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(1, 8), (2, 56)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [88, 1, 0]]
** centroid: 5, normalized-entropy: 0.08887969568457589, [(1, 88), (2, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 103, 20]]
** centroid: 7, normalized-entropy: 0.6404973004805509, [(2, 103), (3, 20)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.38609856267826065] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38609856267826065, 0.2474102874415124] ***
*** finished computation of 3 references, err: [Inf, 0.38609856267826065, 0.2474102874415124] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 203, 18]]
** centroid: 1, normalized-entropy: 0.4072607439409681, [(2, 203), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [140, 33, 0]]
** centroid: 2, normalized-entropy: 0.7030407807516132, [(1, 140), (2, 33)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [264, 8, 0]]
** centroid: 3, normalized-entropy: 0.1914332548141934, [(1, 264), (2, 8)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3109826608637775] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3109826608637775, 0.23755958771983768] ***
*** finished computation of 3 references, err: [Inf, 0.3109826608637775, 0.23755958771983768] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [177, 47, 0]]
** centroid: 1, normalized-entropy: 0.741141268515017, [(1, 177), (2, 47)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [223, 42, 0]]
** centroid: 2, normalized-entropy: 0.6306862496809922, [(1, 223), (2, 42)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 154, 24]]
** centroid: 3, normalized-entropy: 0.5705411428522262, [(2, 154), (3, 24)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3038632516348469] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3038632516348469, 0.2525515416651026] ***
*** finished computation of 3 references, err: [Inf, 0.3038632516348469, 0.2525515416651026] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [30, 141, 10]]
** centroid: 1, normalized-entropy: 0.5938734924987836, [(1, 30), (2, 141), (3, 10)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [125, 114, 10]]
** centroid: 2, normalized-entropy: 0.7579992667720173, [(1, 125), (2, 114), (3, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [237, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3002342620274393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3002342620274393, 0.22081382206764194] ***
*** finished computation of 7 references, err: [Inf, 0.3002342620274393, 0.22081382206764194] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [80, 38, 0]]
** centroid: 1, normalized-entropy: 0.9065795484987461, [(1, 80), (2, 38)]
*** center 2: selecting labels [1] (freq >= 2) [from [37, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [1, 171, 18]]
** centroid: 4, normalized-entropy: 0.45371633918694493, [(2, 171), (3, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [112, 35, 0]]
** centroid: 6, normalized-entropy: 0.7918583525674836, [(1, 112), (2, 35)]
*** center 7: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2313513476275902] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2313513476275902, 0.19228632906326157] ***
*** finished computation of 7 references, err: [Inf, 0.2313513476275902, 0.19228632906326157] ***
*** center 1: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [87, 8, 0]]
** centroid: 3, normalized-entropy: 0.4168441963431652, [(1, 87), (2, 8)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 108, 24]]
** centroid: 4, normalized-entropy: 0.6840384356390419, [(2, 108), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [8, 72, 0]]
** centroid: 5, normalized-entropy: 0.46899559358928133, [(1, 8), (2, 72)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [61, 38, 0]]
** centroid: 6, normalized-entropy: 0.9607079018756469, [(1, 61), (2, 38)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [68, 16, 0]]
** centroid: 7, normalized-entropy: 0.7024665512903904, [(1, 68), (2, 16)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2634440120484127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2634440120484127, 0.20615506743051593] ***
*** finished computation of 7 references, err: [Inf, 0.2634440120484127, 0.20615506743051593] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 107, 20]]
** centroid: 1, normalized-entropy: 0.628247447066103, [(2, 107), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [42, 94, 0]]
** centroid: 2, normalized-entropy: 0.8918107543797084, [(1, 42), (2, 94)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [91, 7, 0]]
** centroid: 3, normalized-entropy: 0.3712323266408756, [(1, 91), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [80, 38, 0]]
** centroid: 4, normalized-entropy: 0.9065795484987461, [(1, 80), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [36, 9, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 36), (2, 9)]
*** center 6: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19822845572127482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19822845572127482, 0.15931953757290948] ***
*** finished computation of 7 references, err: [Inf, 0.19822845572127482, 0.15931953757290948] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 65, 1]]
** centroid: 1, normalized-entropy: 0.11327430349709665, [(2, 65), (3, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [164, 3, 0]]
** centroid: 2, normalized-entropy: 0.12985150050082353, [(1, 164), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 62, 17]]
** centroid: 3, normalized-entropy: 0.751286576718343, [(2, 62), (3, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [101, 33, 0]]
** centroid: 4, normalized-entropy: 0.8053103419744871, [(1, 101), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 72, 0]]
** centroid: 5, normalized-entropy: 0.24229218908241482, [(1, 3), (2, 72)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [90, 7, 0]]
** centroid: 6, normalized-entropy: 0.37395136668121054, [(1, 90), (2, 7)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [46, 2, 0]]
** centroid: 7, normalized-entropy: 0.24988229283318547, [(1, 46), (2, 2)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19834362377860826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19834362377860826, 0.16139071831211582] ***
*** finished computation of 7 references, err: [Inf, 0.19834362377860826, 0.16139071831211582] ***
*** center 1: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 76, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [102, 82, 0]]
** centroid: 3, normalized-entropy: 0.9914606013843205, [(1, 102), (2, 82)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [18, 37, 0]]
** centroid: 4, normalized-entropy: 0.9121156307204275, [(1, 18), (2, 37)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [99, 8, 0]]
** centroid: 5, normalized-entropy: 0.3834641323087979, [(1, 99), (2, 8)]
*** center 6: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 40, 24]]
** centroid: 7, normalized-entropy: 0.954434002924965, [(2, 40), (3, 24)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20320122762523155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20320122762523155, 0.16006532479273058] ***
*** finished computation of 7 references, err: [Inf, 0.20320122762523155, 0.16006532479273058] ***
*** center 1: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [42, 24, 0]]
** centroid: 2, normalized-entropy: 0.9456603046006401, [(1, 42), (2, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [126, 51, 0]]
** centroid: 3, normalized-entropy: 0.8663006754980497, [(1, 126), (2, 51)]
*** center 4: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 149, 20]]
** centroid: 5, normalized-entropy: 0.5245796052371587, [(2, 149), (3, 20)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [38, 11, 0]]
** centroid: 6, normalized-entropy: 0.7682814090975241, [(1, 38), (2, 11)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [52, 20, 0]]
** centroid: 7, normalized-entropy: 0.8524051786494784, [(1, 52), (2, 20)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28434972782121476] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28434972782121476, 0.2357770016265882] ***
*** starting iteration: 2; err: [Inf, 0.28434972782121476, 0.2357770016265882] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28434972782121476, 0.2357770016265882, 0.23309249399011736] ***
*** starting iteration: 3; err: [Inf, 0.28434972782121476, 0.2357770016265882, 0.23309249399011736] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28434972782121476, 0.2357770016265882, 0.23309249399011736, 0.23205380896581812] ***
*** starting iteration: 4; err: [Inf, 0.28434972782121476, 0.2357770016265882, 0.23309249399011736, 0.23205380896581812] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28434972782121476, 0.2357770016265882, 0.23309249399011736, 0.23205380896581812, 0.23172939533798453] ***
*** finished computation of 3 references, err: [Inf, 0.28434972782121476, 0.2357770016265882, 0.23309249399011736, 0.23205380896581812, 0.23172939533798453] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [102, 114, 8]]
** centroid: 1, normalized-entropy: 0.7472874412427349, [(1, 102), (2, 114), (3, 8)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [101, 130, 10]]
** centroid: 2, normalized-entropy: 0.7550210008298497, [(1, 101), (2, 130), (3, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [201, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2615032323078997] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2615032323078997, 0.23175261857063473] ***
*** starting iteration: 2; err: [Inf, 0.2615032323078997, 0.23175261857063473] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2615032323078997, 0.23175261857063473, 0.2312132273556321] ***
*** finished computation of 3 references, err: [Inf, 0.2615032323078997, 0.23175261857063473, 0.2312132273556321] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [123, 87, 0]]
** centroid: 1, normalized-entropy: 0.9786961448300948, [(1, 123), (2, 87)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [96, 156, 24]]
** centroid: 2, normalized-entropy: 0.8212019455913928, [(1, 96), (2, 156), (3, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [181, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4533354854392728] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4533354854392728, 0.2689889951216719] ***
*** starting iteration: 2; err: [Inf, 0.4533354854392728, 0.2689889951216719] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4533354854392728, 0.2689889951216719, 0.23726716660231217] ***
*** starting iteration: 3; err: [Inf, 0.4533354854392728, 0.2689889951216719, 0.23726716660231217] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4533354854392728, 0.2689889951216719, 0.23726716660231217, 0.2323183469373783] ***
*** starting iteration: 4; err: [Inf, 0.4533354854392728, 0.2689889951216719, 0.23726716660231217, 0.2323183469373783] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4533354854392728, 0.2689889951216719, 0.23726716660231217, 0.2323183469373783, 0.23125062986783895] ***
*** starting iteration: 5; err: [Inf, 0.4533354854392728, 0.2689889951216719, 0.23726716660231217, 0.2323183469373783, 0.23125062986783895] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4533354854392728, 0.2689889951216719, 0.23726716660231217, 0.2323183469373783, 0.23125062986783895, 0.230935449040365] ***
*** finished computation of 3 references, err: [Inf, 0.4533354854392728, 0.2689889951216719, 0.23726716660231217, 0.2323183469373783, 0.23125062986783895, 0.230935449040365] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [111, 159, 20]]
** centroid: 1, normalized-entropy: 0.8023827888535443, [(1, 111), (2, 159), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [119, 96, 0]]
** centroid: 2, normalized-entropy: 0.9917290639946871, [(1, 119), (2, 96)]
*** center 3: selecting labels [1] (freq >= 2) [from [162, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3595476912099633] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3595476912099633, 0.31451590613716535] ***
*** finished computation of 3 references, err: [Inf, 0.3595476912099633, 0.31451590613716535] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [170, 60, 0]]
** centroid: 1, normalized-entropy: 0.828055725379504, [(1, 170), (2, 60)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [10, 184, 18]]
** centroid: 2, normalized-entropy: 0.43363267898212765, [(1, 10), (2, 184), (3, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [224, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.45010321390447855] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45010321390447855, 0.2979248417499496] ***
*** finished computation of 3 references, err: [Inf, 0.45010321390447855, 0.2979248417499496] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [96, 125, 23]]
** centroid: 1, normalized-entropy: 0.8485967684624077, [(1, 96), (2, 125), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [190, 2, 0]]
** centroid: 2, normalized-entropy: 0.08354288831032243, [(1, 190), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [114, 116, 1]]
** centroid: 3, normalized-entropy: 0.9999454550766408, [(1, 114), (2, 116)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4072693094856914] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4072693094856914, 0.29180249823550547] ***
*** finished computation of 3 references, err: [Inf, 0.4072693094856914, 0.29180249823550547] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [127, 84, 0]]
** centroid: 1, normalized-entropy: 0.9698308534774176, [(1, 127), (2, 84)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [115, 171, 20]]
** centroid: 2, normalized-entropy: 0.7930704158061154, [(1, 115), (2, 171), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [150, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.18075869409591183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18075869409591183, 0.14945881336426792] ***
*** starting iteration: 2; err: [Inf, 0.18075869409591183, 0.14945881336426792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18075869409591183, 0.14945881336426792, 0.14663253162320503] ***
*** starting iteration: 3; err: [Inf, 0.18075869409591183, 0.14945881336426792, 0.14663253162320503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18075869409591183, 0.14945881336426792, 0.14663253162320503, 0.14563701805230733] ***
*** finished computation of 7 references, err: [Inf, 0.18075869409591183, 0.14945881336426792, 0.14663253162320503, 0.14563701805230733] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 49, 16]]
** centroid: 1, normalized-entropy: 0.8051250074646822, [(2, 49), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [89, 21, 0]]
** centroid: 3, normalized-entropy: 0.7033693386668108, [(1, 89), (2, 21)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 86, 2]]
** centroid: 4, normalized-entropy: 0.1564910629057016, [(2, 86), (3, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [4, 69, 0]]
** centroid: 5, normalized-entropy: 0.306424729870515, [(1, 4), (2, 69)]
*** center 6: selecting labels [1] (freq >= 2) [from [118, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [102, 19, 0]]
** centroid: 7, normalized-entropy: 0.6271441658983906, [(1, 102), (2, 19)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20626412119124382] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20626412119124382, 0.1700572815599448] ***
*** starting iteration: 2; err: [Inf, 0.20626412119124382, 0.1700572815599448] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20626412119124382, 0.1700572815599448, 0.16043434338295076] ***
*** starting iteration: 3; err: [Inf, 0.20626412119124382, 0.1700572815599448, 0.16043434338295076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20626412119124382, 0.1700572815599448, 0.16043434338295076, 0.1562936008953932] ***
*** starting iteration: 4; err: [Inf, 0.20626412119124382, 0.1700572815599448, 0.16043434338295076, 0.1562936008953932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20626412119124382, 0.1700572815599448, 0.16043434338295076, 0.1562936008953932, 0.15429423498394695] ***
*** starting iteration: 5; err: [Inf, 0.20626412119124382, 0.1700572815599448, 0.16043434338295076, 0.1562936008953932, 0.15429423498394695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20626412119124382, 0.1700572815599448, 0.16043434338295076, 0.1562936008953932, 0.15429423498394695, 0.15331680405566628] ***
*** finished computation of 7 references, err: [Inf, 0.20626412119124382, 0.1700572815599448, 0.16043434338295076, 0.1562936008953932, 0.15429423498394695, 0.15331680405566628] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [42, 53, 0]]
** centroid: 1, normalized-entropy: 0.9903070204513952, [(1, 42), (2, 53)]
*** center 2: selecting labels [1] (freq >= 2) [from [91, 1, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [18, 90, 0]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(1, 18), (2, 90)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 40, 24]]
** centroid: 5, normalized-entropy: 0.954434002924965, [(2, 40), (3, 24)]
*** center 6: selecting labels [1] (freq >= 2) [from [101, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [148, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1867086973510448] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1867086973510448, 0.14948069837608974] ***
*** starting iteration: 2; err: [Inf, 0.1867086973510448, 0.14948069837608974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1867086973510448, 0.14948069837608974, 0.14520050228379297] ***
*** starting iteration: 3; err: [Inf, 0.1867086973510448, 0.14948069837608974, 0.14520050228379297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1867086973510448, 0.14948069837608974, 0.14520050228379297, 0.14360603179106826] ***
*** starting iteration: 4; err: [Inf, 0.1867086973510448, 0.14948069837608974, 0.14520050228379297, 0.14360603179106826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1867086973510448, 0.14948069837608974, 0.14520050228379297, 0.14360603179106826, 0.1429984579854149] ***
*** finished computation of 7 references, err: [Inf, 0.1867086973510448, 0.14948069837608974, 0.14520050228379297, 0.14360603179106826, 0.1429984579854149] ***
*** center 1: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 46, 0]]
** centroid: 2, normalized-entropy: 1.0, [(1, 46), (2, 46)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 78, 20]]
** centroid: 6, normalized-entropy: 0.7300166301457938, [(2, 78), (3, 20)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [48, 65, 0]]
** centroid: 7, normalized-entropy: 0.9836116360305414, [(1, 48), (2, 65)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9359808910707116, 0.9290308272344201, 0.9270138401874929, 0.9159998321674969, 0.9130417842992694, 0.9119988251724779, 0.9119988251724779, 0.903007798217379, 0.8949937961914011, 0.8940197682712653, 0.8649787512062961, 0.8389197580814347, 0.7639675603747461]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9359808910707116
finished with 13
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9359808910707116, 0.9290308272344201, 0.9270138401874929, 0.9159998321674969, 0.9130417842992694, 0.9119988251724779, 0.9119988251724779, 0.903007798217379, 0.8949937961914011, 0.8940197682712653, 0.8649787512062961, 0.8389197580814347, 0.7639675603747461]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9359808910707116
finished with 14
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.23889123896198408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23889123896198408, 0.17771995697427798] ***
*** finished computation of 7 references, err: [Inf, 0.23889123896198408, 0.17771995697427798] ***
*** center 1: selecting labels [1] (freq >= 2) [from [166, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [9, 33, 0]]
** centroid: 2, normalized-entropy: 0.7495952572594798, [(1, 9), (2, 33)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [62, 11, 0]]
** centroid: 3, normalized-entropy: 0.6115516951951333, [(1, 62), (2, 11)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 26, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [114, 94, 0]]
** centroid: 5, normalized-entropy: 0.993320421638792, [(1, 114), (2, 94)]
*** center 6: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 80, 18]]
** centroid: 7, normalized-entropy: 0.6880476235340797, [(2, 80), (3, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18527682551644978] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18527682551644978, 0.15213652175391787] ***
*** finished computation of 7 references, err: [Inf, 0.18527682551644978, 0.15213652175391787] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [117, 7, 0]]
** centroid: 1, normalized-entropy: 0.3131950471154111, [(1, 117), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 60, 24]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(2, 60), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [10, 94, 0]]
** centroid: 3, normalized-entropy: 0.45668363153944286, [(1, 10), (2, 94)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [91, 18, 0]]
** centroid: 4, normalized-entropy: 0.6464599001526788, [(1, 91), (2, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [62, 1, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 63, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19553841479231548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19553841479231548, 0.1737280827884128] ***
*** finished computation of 7 references, err: [Inf, 0.19553841479231548, 0.1737280827884128] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 45, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [80, 75, 0]]
** centroid: 2, normalized-entropy: 0.9992492479956566, [(1, 80), (2, 75)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [2, 66, 0]]
** centroid: 3, normalized-entropy: 0.1914332548141934, [(1, 2), (2, 66)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [73, 2, 0]]
** centroid: 4, normalized-entropy: 0.1773894531859976, [(1, 73), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [70, 8, 0]]
** centroid: 5, normalized-entropy: 0.4770713062193298, [(1, 70), (2, 8)]
*** center 6: selecting labels [1] (freq >= 2) [from [167, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 59, 20]]
** centroid: 7, normalized-entropy: 0.8162554088088008, [(2, 59), (3, 20)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9359808910707116, 0.9290308272344201, 0.9270138401874929, 0.92401683120246, 0.9159998321674969, 0.9130417842992694, 0.9119988251724779, 0.9119988251724779, 0.903007798217379, 0.8949937961914011, 0.8940197682712653, 0.8649787512062961, 0.8389197580814347, 0.7639675603747461]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9359808910707116
finished with 16
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.2812347507590915] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2812347507590915, 0.24175172731246766] ***
*** finished computation of 3 references, err: [Inf, 0.2812347507590915, 0.24175172731246766] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [186, 68, 0]]
** centroid: 1, normalized-entropy: 0.8381688912165873, [(1, 186), (2, 68)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [218, 9, 0]]
** centroid: 2, normalized-entropy: 0.24067400352725543, [(1, 218), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 167, 18]]
** centroid: 3, normalized-entropy: 0.4603692071696725, [(2, 167), (3, 18)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36770899219904796] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36770899219904796, 0.25828865892498165] ***
*** finished computation of 3 references, err: [Inf, 0.36770899219904796, 0.25828865892498165] ***
*** center 1: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [167, 51, 0]]
** centroid: 2, normalized-entropy: 0.7848251078791604, [(1, 167), (2, 51)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [122, 192, 24]]
** centroid: 3, normalized-entropy: 0.7981735403654922, [(1, 122), (2, 192), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30090433703121106] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30090433703121106, 0.24125980945077838] ***
*** finished computation of 3 references, err: [Inf, 0.30090433703121106, 0.24125980945077838] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [155, 66, 0]]
** centroid: 1, normalized-entropy: 0.8796252078296002, [(1, 155), (2, 66)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [237, 34, 0]]
** centroid: 2, normalized-entropy: 0.5448579469206651, [(1, 237), (2, 34)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 155, 20]]
** centroid: 3, normalized-entropy: 0.5127091420308771, [(2, 155), (3, 20)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.41818185200545566] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41818185200545566, 0.3344429592775354] ***
*** finished computation of 3 references, err: [Inf, 0.41818185200545566, 0.3344429592775354] ***
*** center 1: selecting labels [1] (freq >= 2) [from [138, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [139, 66, 0]]
** centroid: 2, normalized-entropy: 0.9064907288409316, [(1, 139), (2, 66)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [127, 178, 18]]
** centroid: 3, normalized-entropy: 0.7794403207262733, [(1, 127), (2, 178), (3, 18)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.46848033033199665] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46848033033199665, 0.31269145349803] ***
*** finished computation of 3 references, err: [Inf, 0.46848033033199665, 0.31269145349803] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [87, 65, 0]]
** centroid: 1, normalized-entropy: 0.9848354609061586, [(1, 87), (2, 65)]
*** center 2: selecting labels [1] (freq >= 2) [from [177, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [136, 178, 24]]
** centroid: 3, normalized-entropy: 0.8117763451576528, [(1, 136), (2, 178), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39057163409106826] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39057163409106826, 0.3320452568918534] ***
*** finished computation of 3 references, err: [Inf, 0.39057163409106826, 0.3320452568918534] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [69, 112, 20]]
** centroid: 1, normalized-entropy: 0.839704375256473, [(1, 69), (2, 112), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [80, 125, 0]]
** centroid: 2, normalized-entropy: 0.9649567669505686, [(1, 80), (2, 125)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [243, 18, 0]]
** centroid: 3, normalized-entropy: 0.36205125173399805, [(1, 243), (2, 18)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 16)
[0.9359808910707116, 0.9290308272344201, 0.9270138401874929, 0.92401683120246, 0.9159998321674969, 0.9130417842992694, 0.9119988251724779, 0.9119988251724779, 0.903007798217379, 0.8990097882313451, 0.8949937961914011, 0.8940197682712653, 0.8649787512062961, 0.8649757541973111, 0.8389197580814347, 0.7639675603747461]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9359808910707116
finished with 17
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.3810967494105758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3810967494105758, 0.22559801488835085] ***
*** finished computation of 7 references, err: [Inf, 0.3810967494105758, 0.22559801488835085] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [98, 90, 0]]
** centroid: 1, normalized-entropy: 0.998693408098057, [(1, 98), (2, 90)]
*** center 2: selecting labels [1] (freq >= 1) [from [133, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 82, 18]]
** centroid: 3, normalized-entropy: 0.6800770457282798, [(2, 82), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [27, 69, 0]]
** centroid: 5, normalized-entropy: 0.8571484374283717, [(1, 27), (2, 69)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [44, 3, 0]]
** centroid: 6, normalized-entropy: 0.3424637724817958, [(1, 44), (2, 3)]
*** center 7: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3158396226249222] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3158396226249222, 0.23501220496435618] ***
*** finished computation of 7 references, err: [Inf, 0.3158396226249222, 0.23501220496435618] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 28, 23]]
** centroid: 1, normalized-entropy: 0.9930554830121975, [(2, 28), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [177, 10, 0]]
** centroid: 2, normalized-entropy: 0.30098289136590306, [(1, 177), (2, 10)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [46, 76, 1]]
** centroid: 3, normalized-entropy: 0.6412038709054384, [(1, 46), (2, 76), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 73, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [28, 56, 0]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(1, 28), (2, 56)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29421746599832843] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29421746599832843, 0.20902196544667948] ***
*** finished computation of 7 references, err: [Inf, 0.29421746599832843, 0.20902196544667948] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 96, 20]]
** centroid: 1, normalized-entropy: 0.6631968402398286, [(2, 96), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 60, 0]]
** centroid: 2, normalized-entropy: 0.9997927658541268, [(1, 58), (2, 60)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [130, 11, 0]]
** centroid: 3, normalized-entropy: 0.3951431006348973, [(1, 130), (2, 11)]
*** center 4: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 88, 0]]
** centroid: 5, normalized-entropy: 0.7361103940132281, [(1, 23), (2, 88)]
*** center 6: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 17)
[0.9359808910707116, 0.9290308272344201, 0.9270138401874929, 0.92401683120246, 0.9159998321674969, 0.9130417842992694, 0.9119988251724779, 0.9119988251724779, 0.903007798217379, 0.8990097882313451, 0.8949937961914011, 0.8940197682712653, 0.8739937542332751, 0.8649787512062961, 0.8649757541973111, 0.8389197580814347, 0.7639675603747461]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9359808910707116
finished with 18
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.4857426699315262] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4857426699315262, 0.3037114768798041] ***
*** starting iteration: 2; err: [Inf, 0.4857426699315262, 0.3037114768798041] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4857426699315262, 0.3037114768798041, 0.29570372949575296] ***
*** starting iteration: 3; err: [Inf, 0.4857426699315262, 0.3037114768798041, 0.29570372949575296] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4857426699315262, 0.3037114768798041, 0.29570372949575296, 0.2940893744736597] ***
*** starting iteration: 4; err: [Inf, 0.4857426699315262, 0.3037114768798041, 0.29570372949575296, 0.2940893744736597] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4857426699315262, 0.3037114768798041, 0.29570372949575296, 0.2940893744736597, 0.2928854660438681] ***
*** starting iteration: 5; err: [Inf, 0.4857426699315262, 0.3037114768798041, 0.29570372949575296, 0.2940893744736597, 0.2928854660438681] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4857426699315262, 0.3037114768798041, 0.29570372949575296, 0.2940893744736597, 0.2928854660438681, 0.29233709557818155] ***
*** finished computation of 3 references, err: [Inf, 0.4857426699315262, 0.3037114768798041, 0.29570372949575296, 0.2940893744736597, 0.2928854660438681, 0.29233709557818155] ***
*** center 1: selecting labels [1] (freq >= 2) [from [205, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [80, 151, 18]]
** centroid: 2, normalized-entropy: 0.7810060692836784, [(1, 80), (2, 151), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [119, 93, 0]]
** centroid: 3, normalized-entropy: 0.9891228919844625, [(1, 119), (2, 93)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3791876218436674] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3791876218436674, 0.3032165801744612] ***
*** starting iteration: 2; err: [Inf, 0.3791876218436674, 0.3032165801744612] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3791876218436674, 0.3032165801744612, 0.2934396949078681] ***
*** starting iteration: 3; err: [Inf, 0.3791876218436674, 0.3032165801744612, 0.2934396949078681] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3791876218436674, 0.3032165801744612, 0.2934396949078681, 0.2914190776115549] ***
*** starting iteration: 4; err: [Inf, 0.3791876218436674, 0.3032165801744612, 0.2934396949078681, 0.2914190776115549] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3791876218436674, 0.3032165801744612, 0.2934396949078681, 0.2914190776115549, 0.29077961567839583] ***
*** finished computation of 3 references, err: [Inf, 0.3791876218436674, 0.3032165801744612, 0.2934396949078681, 0.2914190776115549, 0.29077961567839583] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [94, 156, 24]]
** centroid: 1, normalized-entropy: 0.820134056112364, [(1, 94), (2, 156), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [128, 87, 0]]
** centroid: 2, normalized-entropy: 0.9736064117343936, [(1, 128), (2, 87)]
*** center 3: selecting labels [1] (freq >= 2) [from [178, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4345740467516602] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4345740467516602, 0.29747709809387773] ***
*** starting iteration: 2; err: [Inf, 0.4345740467516602, 0.29747709809387773] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4345740467516602, 0.29747709809387773, 0.2924669674231854] ***
*** starting iteration: 3; err: [Inf, 0.4345740467516602, 0.29747709809387773, 0.2924669674231854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4345740467516602, 0.29747709809387773, 0.2924669674231854, 0.291997946244476] ***
*** finished computation of 3 references, err: [Inf, 0.4345740467516602, 0.29747709809387773, 0.2924669674231854, 0.291997946244476] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [255, 9, 0]]
** centroid: 1, normalized-entropy: 0.21450983370697788, [(1, 255), (2, 9)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 183, 20]]
** centroid: 2, normalized-entropy: 0.46429339352149623, [(2, 183), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [136, 63, 0]]
** centroid: 3, normalized-entropy: 0.9006267231037449, [(1, 136), (2, 63)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 18)
[0.9359808910707116, 0.9290308272344201, 0.9270138401874929, 0.92401683120246, 0.9159998321674969, 0.9130417842992694, 0.912007816199433, 0.9119988251724779, 0.9119988251724779, 0.903007798217379, 0.8990097882313451, 0.8949937961914011, 0.8940197682712653, 0.8739937542332751, 0.8649787512062961, 0.8649757541973111, 0.8389197580814347, 0.7639675603747461]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9359808910707116
finished with 18
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9359808910707116, 0.9290308272344201, 0.9270138401874929, 0.92401683120246, 0.9159998321674969, 0.9130417842992694, 0.912007816199433, 0.9119988251724779, 0.9119988251724779, 0.903007798217379, 0.8990097882313451, 0.8949937961914011, 0.8940197682712653, 0.8739937542332751, 0.8649787512062961, 0.8649757541973111, 0.8389197580814347, 0.7639675603747461]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9359808910707116
finished with 19
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.1843213875436814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1843213875436814, 0.15910581841242608] ***
*** starting iteration: 2; err: [Inf, 0.1843213875436814, 0.15910581841242608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1843213875436814, 0.15910581841242608, 0.1520834372577456] ***
*** starting iteration: 3; err: [Inf, 0.1843213875436814, 0.15910581841242608, 0.1520834372577456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1843213875436814, 0.15910581841242608, 0.1520834372577456, 0.14977007981756138] ***
*** finished computation of 7 references, err: [Inf, 0.1843213875436814, 0.15910581841242608, 0.1520834372577456, 0.14977007981756138] ***
*** center 1: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 86, 3]]
** centroid: 2, normalized-entropy: 0.21265863988163503, [(2, 86), (3, 3)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [77, 26, 0]]
** centroid: 3, normalized-entropy: 0.8151025048028707, [(1, 77), (2, 26)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [103, 19, 0]]
** centroid: 4, normalized-entropy: 0.6240145748145288, [(1, 103), (2, 19)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 79, 15]]
** centroid: 5, normalized-entropy: 0.6332905746550958, [(2, 79), (3, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [45, 34, 0]]
** centroid: 7, normalized-entropy: 0.985969027451193, [(1, 45), (2, 34)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.31211245796926645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31211245796926645, 0.195805831029704] ***
*** starting iteration: 2; err: [Inf, 0.31211245796926645, 0.195805831029704] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31211245796926645, 0.195805831029704, 0.16750710113797856] ***
*** starting iteration: 3; err: [Inf, 0.31211245796926645, 0.195805831029704, 0.16750710113797856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31211245796926645, 0.195805831029704, 0.16750710113797856, 0.15946420410793202] ***
*** finished computation of 7 references, err: [Inf, 0.31211245796926645, 0.195805831029704, 0.16750710113797856, 0.15946420410793202] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 14, 22]]
** centroid: 1, normalized-entropy: 0.9640787648082293, [(2, 14), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [19, 92, 0]]
** centroid: 2, normalized-entropy: 0.6603769229926888, [(1, 19), (2, 92)]
*** center 3: selecting labels [1] (freq >= 2) [from [161, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [120, 1, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [1, 84, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [99, 25, 0]]
** centroid: 6, normalized-entropy: 0.7251421964171215, [(1, 99), (2, 25)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 27, 2]]
** centroid: 7, normalized-entropy: 0.36205125173399805, [(2, 27), (3, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21922695805979098] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21922695805979098, 0.1683208711677115] ***
*** starting iteration: 2; err: [Inf, 0.21922695805979098, 0.1683208711677115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21922695805979098, 0.1683208711677115, 0.1572769180385639] ***
*** starting iteration: 3; err: [Inf, 0.21922695805979098, 0.1683208711677115, 0.1572769180385639] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21922695805979098, 0.1683208711677115, 0.1572769180385639, 0.15054604751120756] ***
*** finished computation of 7 references, err: [Inf, 0.21922695805979098, 0.1683208711677115, 0.1572769180385639, 0.15054604751120756] ***
*** center 1: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 104, 20]]
** centroid: 2, normalized-entropy: 0.6373874992221911, [(2, 104), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [100, 58, 0]]
** centroid: 3, normalized-entropy: 0.9484103893488014, [(1, 100), (2, 58)]
*** center 4: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 12, 0]]
** centroid: 5, normalized-entropy: 0.5830194167347007, [(1, 74), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [94, 3, 0]]
** centroid: 6, normalized-entropy: 0.19902377455969078, [(1, 94), (2, 3)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 78, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 19)
[0.9359808910707116, 0.9290308272344201, 0.9270138401874929, 0.9250028471585358, 0.92401683120246, 0.9159998321674969, 0.9130417842992694, 0.912007816199433, 0.9119988251724779, 0.9119988251724779, 0.903007798217379, 0.8990097882313451, 0.8949937961914011, 0.8940197682712653, 0.8739937542332751, 0.8649787512062961, 0.8649757541973111, 0.8389197580814347, 0.7639675603747461]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9359808910707116
finished with 20
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.3622889013075782] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3622889013075782, 0.24509408274475294] ***
*** starting iteration: 2; err: [Inf, 0.3622889013075782, 0.24509408274475294] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3622889013075782, 0.24509408274475294, 0.2420185687769954] ***
*** starting iteration: 3; err: [Inf, 0.3622889013075782, 0.24509408274475294, 0.2420185687769954] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3622889013075782, 0.24509408274475294, 0.2420185687769954, 0.24122705796940458] ***
*** finished computation of 3 references, err: [Inf, 0.3622889013075782, 0.24509408274475294, 0.2420185687769954, 0.24122705796940458] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [233, 12, 0]]
** centroid: 1, normalized-entropy: 0.2820464218062391, [(1, 233), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [171, 59, 0]]
** centroid: 2, normalized-entropy: 0.8214521380842137, [(1, 171), (2, 59)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 173, 18]]
** centroid: 3, normalized-entropy: 0.4504689672655132, [(2, 173), (3, 18)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3826556630723033] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3826556630723033, 0.2413943580210745] ***
*** starting iteration: 2; err: [Inf, 0.3826556630723033, 0.2413943580210745] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3826556630723033, 0.2413943580210745, 0.23877110473868873] ***
*** starting iteration: 3; err: [Inf, 0.3826556630723033, 0.2413943580210745, 0.23877110473868873] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3826556630723033, 0.2413943580210745, 0.23877110473868873, 0.23786913483044778] ***
*** finished computation of 3 references, err: [Inf, 0.3826556630723033, 0.2413943580210745, 0.23877110473868873, 0.23786913483044778] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [88, 162, 24]]
** centroid: 1, normalized-entropy: 0.8090085431610413, [(1, 88), (2, 162), (3, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [198, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [114, 81, 0]]
** centroid: 3, normalized-entropy: 0.9792415350396869, [(1, 114), (2, 81)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3081280332291848] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3081280332291848, 0.23724321667467993] ***
*** starting iteration: 2; err: [Inf, 0.3081280332291848, 0.23724321667467993] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3081280332291848, 0.23724321667467993, 0.23133440873539565] ***
*** starting iteration: 3; err: [Inf, 0.3081280332291848, 0.23724321667467993, 0.23133440873539565] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3081280332291848, 0.23724321667467993, 0.23133440873539565, 0.23041299655628594] ***
*** finished computation of 3 references, err: [Inf, 0.3081280332291848, 0.23724321667467993, 0.23133440873539565, 0.23041299655628594] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [102, 159, 20]]
** centroid: 1, normalized-entropy: 0.7993261606261238, [(1, 102), (2, 159), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [123, 96, 0]]
** centroid: 2, normalized-entropy: 0.9890076795739703, [(1, 123), (2, 96)]
*** center 3: selecting labels [1] (freq >= 2) [from [167, 0, 0]]
finished with 6 centroids; started with 3
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.22504870550706982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22504870550706982, 0.19262822085036896] ***
*** starting iteration: 2; err: [Inf, 0.22504870550706982, 0.19262822085036896] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22504870550706982, 0.19262822085036896, 0.18946337243635208] ***
*** starting iteration: 3; err: [Inf, 0.22504870550706982, 0.19262822085036896, 0.18946337243635208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22504870550706982, 0.19262822085036896, 0.18946337243635208, 0.18918299653055146] ***
*** finished computation of 7 references, err: [Inf, 0.22504870550706982, 0.19262822085036896, 0.18946337243635208, 0.18918299653055146] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [68, 91, 0]]
** centroid: 1, normalized-entropy: 0.9848528580321263, [(1, 68), (2, 91)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [118, 27, 0]]
** centroid: 2, normalized-entropy: 0.6934687977176178, [(1, 118), (2, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [123, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 143, 31]]
** centroid: 4, normalized-entropy: 0.676037249979172, [(2, 143), (3, 31)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 100, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 50), (2, 100)]
*** center 6: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [143, 10, 0]]
** centroid: 7, normalized-entropy: 0.3483624694365518, [(1, 143), (2, 10)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24651842823438347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24651842823438347, 0.1951588114676997] ***
*** starting iteration: 2; err: [Inf, 0.24651842823438347, 0.1951588114676997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24651842823438347, 0.1951588114676997, 0.1890753292189911] ***
*** starting iteration: 3; err: [Inf, 0.24651842823438347, 0.1951588114676997, 0.1890753292189911] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24651842823438347, 0.1951588114676997, 0.1890753292189911, 0.18812279681861402] ***
*** finished computation of 7 references, err: [Inf, 0.24651842823438347, 0.1951588114676997, 0.1890753292189911, 0.18812279681861402] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 58, 14]]
** centroid: 1, normalized-entropy: 0.710676853856123, [(2, 58), (3, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 9, 0]]
** centroid: 3, normalized-entropy: 0.5340042729285396, [(1, 65), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [73, 23, 0]]
** centroid: 4, normalized-entropy: 0.7943466904341503, [(1, 73), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [36, 40, 0]]
** centroid: 5, normalized-entropy: 0.9980008838722993, [(1, 36), (2, 40)]
*** center 6: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2265988095520297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2265988095520297, 0.1940570316836238] ***
*** starting iteration: 2; err: [Inf, 0.2265988095520297, 0.1940570316836238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2265988095520297, 0.1940570316836238, 0.19379315062984825] ***
*** finished computation of 7 references, err: [Inf, 0.2265988095520297, 0.1940570316836238, 0.19379315062984825] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 20, 0]]
** centroid: 2, normalized-entropy: 0.8960382325345574, [(1, 44), (2, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 53, 15]]
** centroid: 4, normalized-entropy: 0.7612401496918493, [(2, 53), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 39, 0]]
** centroid: 5, normalized-entropy: 0.9906649266228326, [(1, 49), (2, 39)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [95, 6, 0]]
** centroid: 6, normalized-entropy: 0.3250821976451909, [(1, 95), (2, 6)]
*** center 7: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21464124515652658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21464124515652658, 0.18820927819656208] ***
*** starting iteration: 2; err: [Inf, 0.21464124515652658, 0.18820927819656208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21464124515652658, 0.18820927819656208, 0.18405364177748562] ***
*** starting iteration: 3; err: [Inf, 0.21464124515652658, 0.18820927819656208, 0.18405364177748562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21464124515652658, 0.18820927819656208, 0.18405364177748562, 0.1829664217159152] ***
*** starting iteration: 4; err: [Inf, 0.21464124515652658, 0.18820927819656208, 0.18405364177748562, 0.1829664217159152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21464124515652658, 0.18820927819656208, 0.18405364177748562, 0.1829664217159152, 0.18268288012221456] ***
*** finished computation of 7 references, err: [Inf, 0.21464124515652658, 0.18820927819656208, 0.18405364177748562, 0.1829664217159152, 0.18268288012221456] ***
*** center 1: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 48, 17]]
** centroid: 2, normalized-entropy: 0.829059069399666, [(2, 48), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 3, 0]]
** centroid: 3, normalized-entropy: 0.30540057087920036, [(1, 52), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [22, 58, 0]]
** centroid: 4, normalized-entropy: 0.8485481782946159, [(1, 22), (2, 58)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [71, 4, 0]]
** centroid: 5, normalized-entropy: 0.3003914173647818, [(1, 71), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 67, 0]]
** centroid: 6, normalized-entropy: 0.18927843126120178, [(1, 2), (2, 67)]
*** center 7: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23880850517377258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23880850517377258, 0.19594269053824245] ***
*** starting iteration: 2; err: [Inf, 0.23880850517377258, 0.19594269053824245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23880850517377258, 0.19594269053824245, 0.1894320334047079] ***
*** starting iteration: 3; err: [Inf, 0.23880850517377258, 0.19594269053824245, 0.1894320334047079] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23880850517377258, 0.19594269053824245, 0.1894320334047079, 0.1875965369939804] ***
*** starting iteration: 4; err: [Inf, 0.23880850517377258, 0.19594269053824245, 0.1894320334047079, 0.1875965369939804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23880850517377258, 0.19594269053824245, 0.1894320334047079, 0.1875965369939804, 0.18630816956423224] ***
*** starting iteration: 5; err: [Inf, 0.23880850517377258, 0.19594269053824245, 0.1894320334047079, 0.1875965369939804, 0.18630816956423224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23880850517377258, 0.19594269053824245, 0.1894320334047079, 0.1875965369939804, 0.18630816956423224, 0.18500414721295239] ***
*** starting iteration: 6; err: [Inf, 0.23880850517377258, 0.19594269053824245, 0.1894320334047079, 0.1875965369939804, 0.18630816956423224, 0.18500414721295239] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23880850517377258, 0.19594269053824245, 0.1894320334047079, 0.1875965369939804, 0.18630816956423224, 0.18500414721295239, 0.1833047274220735] ***
*** starting iteration: 7; err: [Inf, 0.23880850517377258, 0.19594269053824245, 0.1894320334047079, 0.1875965369939804, 0.18630816956423224, 0.18500414721295239, 0.1833047274220735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23880850517377258, 0.19594269053824245, 0.1894320334047079, 0.1875965369939804, 0.18630816956423224, 0.18500414721295239, 0.1833047274220735, 0.18181498688831926] ***
*** starting iteration: 8; err: [Inf, 0.23880850517377258, 0.19594269053824245, 0.1894320334047079, 0.1875965369939804, 0.18630816956423224, 0.18500414721295239, 0.1833047274220735, 0.18181498688831926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23880850517377258, 0.19594269053824245, 0.1894320334047079, 0.1875965369939804, 0.18630816956423224, 0.18500414721295239, 0.1833047274220735, 0.18181498688831926, 0.1806246092012152] ***
*** starting iteration: 9; err: [Inf, 0.23880850517377258, 0.19594269053824245, 0.1894320334047079, 0.1875965369939804, 0.18630816956423224, 0.18500414721295239, 0.1833047274220735, 0.18181498688831926, 0.1806246092012152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23880850517377258, 0.19594269053824245, 0.1894320334047079, 0.1875965369939804, 0.18630816956423224, 0.18500414721295239, 0.1833047274220735, 0.18181498688831926, 0.1806246092012152, 0.18002093948982656] ***
*** finished computation of 7 references, err: [Inf, 0.23880850517377258, 0.19594269053824245, 0.1894320334047079, 0.1875965369939804, 0.18630816956423224, 0.18500414721295239, 0.1833047274220735, 0.18181498688831926, 0.1806246092012152, 0.18002093948982656] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [66, 4, 0]]
** centroid: 1, normalized-entropy: 0.3159971329784246, [(1, 66), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 41, 17]]
** centroid: 2, normalized-entropy: 0.8726965039103788, [(2, 41), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [81, 3, 0]]
** centroid: 3, normalized-entropy: 0.2222848306856879, [(1, 81), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 7, 0]]
** centroid: 4, normalized-entropy: 0.47357292491745173, [(1, 62), (2, 7)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 72, 0]]
** centroid: 7, normalized-entropy: 0.46899559358928133, [(1, 8), (2, 72)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22953848951123654] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22953848951123654, 0.18883085664734245] ***
*** starting iteration: 2; err: [Inf, 0.22953848951123654, 0.18883085664734245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22953848951123654, 0.18883085664734245, 0.18366601156815887] ***
*** starting iteration: 3; err: [Inf, 0.22953848951123654, 0.18883085664734245, 0.18366601156815887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22953848951123654, 0.18883085664734245, 0.18366601156815887, 0.18313362954743206] ***
*** finished computation of 7 references, err: [Inf, 0.22953848951123654, 0.18883085664734245, 0.18366601156815887, 0.18313362954743206] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [8, 70, 0]]
** centroid: 1, normalized-entropy: 0.4770713062193298, [(1, 8), (2, 70)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 3, 0]]
** centroid: 2, normalized-entropy: 0.25524211319019174, [(1, 67), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 55, 18]]
** centroid: 4, normalized-entropy: 0.8058049113482652, [(2, 55), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 51, 0]]
** centroid: 5, normalized-entropy: 0.9932338197397066, [(1, 42), (2, 51)]
*** center 6: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 1, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25098711969330906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25098711969330906, 0.1870702328979969] ***
*** starting iteration: 2; err: [Inf, 0.25098711969330906, 0.1870702328979969] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25098711969330906, 0.1870702328979969, 0.18484630369767546] ***
*** starting iteration: 3; err: [Inf, 0.25098711969330906, 0.1870702328979969, 0.18484630369767546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25098711969330906, 0.1870702328979969, 0.18484630369767546, 0.18496813585981728] ***
*** finished computation of 7 references, err: [Inf, 0.25098711969330906, 0.1870702328979969, 0.18484630369767546, 0.18496813585981728] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 45, 16]]
** centroid: 2, normalized-entropy: 0.8301899714180444, [(2, 45), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 4, 0]]
** centroid: 4, normalized-entropy: 0.2974722489192896, [(1, 72), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 24, 0]]
** centroid: 5, normalized-entropy: 0.8812908992306927, [(1, 56), (2, 24)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [12, 57, 0]]
** centroid: 7, normalized-entropy: 0.6665783579949205, [(1, 12), (2, 57)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2391091156192124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2391091156192124, 0.1893076332444325] ***
*** starting iteration: 2; err: [Inf, 0.2391091156192124, 0.1893076332444325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2391091156192124, 0.1893076332444325, 0.18718758509121836] ***
*** starting iteration: 3; err: [Inf, 0.2391091156192124, 0.1893076332444325, 0.18718758509121836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2391091156192124, 0.1893076332444325, 0.18718758509121836, 0.18722317633964122] ***
*** finished computation of 7 references, err: [Inf, 0.2391091156192124, 0.1893076332444325, 0.18718758509121836, 0.18722317633964122] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [7, 76, 0]]
** centroid: 1, normalized-entropy: 0.4172806906708316, [(1, 7), (2, 76)]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 35, 0]]
** centroid: 3, normalized-entropy: 0.9866554896538049, [(1, 46), (2, 35)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 13, 0]]
** centroid: 4, normalized-entropy: 0.698124573139618, [(1, 56), (2, 13)]
*** center 5: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 56, 19]]
** centroid: 6, normalized-entropy: 0.8165187119538281, [(2, 56), (3, 19)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [59, 5, 0]]
** centroid: 7, normalized-entropy: 0.3955378064564774, [(1, 59), (2, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24149708715453744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24149708715453744, 0.19081791542470455] ***
*** starting iteration: 2; err: [Inf, 0.24149708715453744, 0.19081791542470455] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24149708715453744, 0.19081791542470455, 0.18452204887848347] ***
*** starting iteration: 3; err: [Inf, 0.24149708715453744, 0.19081791542470455, 0.18452204887848347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24149708715453744, 0.19081791542470455, 0.18452204887848347, 0.18335137049481273] ***
*** starting iteration: 4; err: [Inf, 0.24149708715453744, 0.19081791542470455, 0.18452204887848347, 0.18335137049481273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24149708715453744, 0.19081791542470455, 0.18452204887848347, 0.18335137049481273, 0.18289638124592603] ***
*** finished computation of 7 references, err: [Inf, 0.24149708715453744, 0.19081791542470455, 0.18452204887848347, 0.18335137049481273, 0.18289638124592603] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [26, 37, 0]]
** centroid: 1, normalized-entropy: 0.9778956822310348, [(1, 26), (2, 37)]
*** center 2: selecting labels [1] (freq >= 2) [from [58, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 62, 18]]
** centroid: 3, normalized-entropy: 0.7691928290130138, [(2, 62), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [73, 11, 0]]
** centroid: 5, normalized-entropy: 0.5600443203590992, [(1, 73), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [61, 2, 0]]
** centroid: 6, normalized-entropy: 0.20307392998664567, [(1, 61), (2, 2)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 79, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22712103546969592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22712103546969592, 0.19282772856391966] ***
*** starting iteration: 2; err: [Inf, 0.22712103546969592, 0.19282772856391966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22712103546969592, 0.19282772856391966, 0.18827896078675985] ***
*** starting iteration: 3; err: [Inf, 0.22712103546969592, 0.19282772856391966, 0.18827896078675985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22712103546969592, 0.19282772856391966, 0.18827896078675985, 0.1858881666753441] ***
*** starting iteration: 4; err: [Inf, 0.22712103546969592, 0.19282772856391966, 0.18827896078675985, 0.1858881666753441] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22712103546969592, 0.19282772856391966, 0.18827896078675985, 0.1858881666753441, 0.18536261263117193] ***
*** finished computation of 7 references, err: [Inf, 0.22712103546969592, 0.19282772856391966, 0.18827896078675985, 0.1858881666753441, 0.18536261263117193] ***
*** center 1: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 52, 14]]
** centroid: 2, normalized-entropy: 0.7455178428108284, [(2, 52), (3, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 38, 0]]
** centroid: 4, normalized-entropy: 0.978070970973496, [(1, 54), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 44, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 22), (2, 44)]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 61, 0]]
** centroid: 7, normalized-entropy: 0.2729708579140699, [(1, 3), (2, 61)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2454529170654714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2454529170654714, 0.19078147098049522] ***
*** starting iteration: 2; err: [Inf, 0.2454529170654714, 0.19078147098049522] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2454529170654714, 0.19078147098049522, 0.18821906892955304] ***
*** starting iteration: 3; err: [Inf, 0.2454529170654714, 0.19078147098049522, 0.18821906892955304] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2454529170654714, 0.19078147098049522, 0.18821906892955304, 0.18768603622354568] ***
*** finished computation of 7 references, err: [Inf, 0.2454529170654714, 0.19078147098049522, 0.18821906892955304, 0.18768603622354568] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [24, 57, 0]]
** centroid: 1, normalized-entropy: 0.876716288999464, [(1, 24), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 2, 0]]
** centroid: 2, normalized-entropy: 0.18312206830137262, [(1, 70), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [68, 8, 0]]
** centroid: 4, normalized-entropy: 0.48546076074591343, [(1, 68), (2, 8)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 51, 14]]
** centroid: 5, normalized-entropy: 0.7516499461153354, [(2, 51), (3, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 65, 0]]
** centroid: 7, normalized-entropy: 0.19364280468389852, [(1, 2), (2, 65)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22864918686263264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22864918686263264, 0.19284905160963536] ***
*** starting iteration: 2; err: [Inf, 0.22864918686263264, 0.19284905160963536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22864918686263264, 0.19284905160963536, 0.18758647187054156] ***
*** starting iteration: 3; err: [Inf, 0.22864918686263264, 0.19284905160963536, 0.18758647187054156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22864918686263264, 0.19284905160963536, 0.18758647187054156, 0.18638464018888773] ***
*** starting iteration: 4; err: [Inf, 0.22864918686263264, 0.19284905160963536, 0.18758647187054156, 0.18638464018888773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22864918686263264, 0.19284905160963536, 0.18758647187054156, 0.18638464018888773, 0.18596402092068456] ***
*** finished computation of 7 references, err: [Inf, 0.22864918686263264, 0.19284905160963536, 0.18758647187054156, 0.18638464018888773, 0.18596402092068456] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [7, 64, 0]]
** centroid: 1, normalized-entropy: 0.4645149440905521, [(1, 7), (2, 64)]
*** center 2: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 34, 0]]
** centroid: 3, normalized-entropy: 0.9653168212008997, [(1, 53), (2, 34)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [45, 22, 0]]
** centroid: 4, normalized-entropy: 0.9132401614300725, [(1, 45), (2, 22)]
*** center 5: selecting labels [1] (freq >= 2) [from [75, 1, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 62, 16]]
** centroid: 6, normalized-entropy: 0.7320666900931937, [(2, 62), (3, 16)]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22701845100522042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22701845100522042, 0.18600508022680878] ***
*** starting iteration: 2; err: [Inf, 0.22701845100522042, 0.18600508022680878] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22701845100522042, 0.18600508022680878, 0.18219189625931903] ***
*** starting iteration: 3; err: [Inf, 0.22701845100522042, 0.18600508022680878, 0.18219189625931903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22701845100522042, 0.18600508022680878, 0.18219189625931903, 0.1817699169125408] ***
*** finished computation of 7 references, err: [Inf, 0.22701845100522042, 0.18600508022680878, 0.18219189625931903, 0.1817699169125408] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [4, 63, 0]]
** centroid: 1, normalized-entropy: 0.32625881462949274, [(1, 4), (2, 63)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [69, 7, 0]]
** centroid: 2, normalized-entropy: 0.4434581453896789, [(1, 69), (2, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 64, 13]]
** centroid: 4, normalized-entropy: 0.6550239908788728, [(2, 64), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [32, 52, 0]]
** centroid: 5, normalized-entropy: 0.9587118829771317, [(1, 32), (2, 52)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [64, 4, 0]]
** centroid: 7, normalized-entropy: 0.32275695889739825, [(1, 64), (2, 4)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.246050776951015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.246050776951015, 0.19501868879981338] ***
*** starting iteration: 2; err: [Inf, 0.246050776951015, 0.19501868879981338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.246050776951015, 0.19501868879981338, 0.19177106669917704] ***
*** starting iteration: 3; err: [Inf, 0.246050776951015, 0.19501868879981338, 0.19177106669917704] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.246050776951015, 0.19501868879981338, 0.19177106669917704, 0.19091143608279526] ***
*** finished computation of 7 references, err: [Inf, 0.246050776951015, 0.19501868879981338, 0.19177106669917704, 0.19091143608279526] ***
*** center 1: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 55, 15]]
** centroid: 2, normalized-entropy: 0.7495952572594798, [(2, 55), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 38, 0]]
** centroid: 3, normalized-entropy: 0.9865446300055647, [(1, 50), (2, 38)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 17, 0]]
** centroid: 4, normalized-entropy: 0.8171387756817725, [(1, 50), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [3, 82, 0]]
** centroid: 5, normalized-entropy: 0.22028326695127437, [(1, 3), (2, 82)]
*** center 6: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [71, 4, 0]]
** centroid: 7, normalized-entropy: 0.3003914173647818, [(1, 71), (2, 4)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24813754002377392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24813754002377392, 0.18634910820424558] ***
*** starting iteration: 2; err: [Inf, 0.24813754002377392, 0.18634910820424558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24813754002377392, 0.18634910820424558, 0.18286600181646645] ***
*** starting iteration: 3; err: [Inf, 0.24813754002377392, 0.18634910820424558, 0.18286600181646645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24813754002377392, 0.18634910820424558, 0.18286600181646645, 0.18132093310169875] ***
*** starting iteration: 4; err: [Inf, 0.24813754002377392, 0.18634910820424558, 0.18286600181646645, 0.18132093310169875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24813754002377392, 0.18634910820424558, 0.18286600181646645, 0.18132093310169875, 0.18103781951963901] ***
*** finished computation of 7 references, err: [Inf, 0.24813754002377392, 0.18634910820424558, 0.18286600181646645, 0.18132093310169875, 0.18103781951963901] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 68, 18]]
** centroid: 1, normalized-entropy: 0.7401470427139037, [(2, 68), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 8, 0]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(1, 48), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [51, 26, 0]]
** centroid: 4, normalized-entropy: 0.9225641366401655, [(1, 51), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 14, 0]]
** centroid: 5, normalized-entropy: 0.6641593279528072, [(1, 67), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [64, 2, 0]]
** centroid: 6, normalized-entropy: 0.19590927087360496, [(1, 64), (2, 2)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 59, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2279243439314887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2279243439314887, 0.1897170655168593] ***
*** starting iteration: 2; err: [Inf, 0.2279243439314887, 0.1897170655168593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2279243439314887, 0.1897170655168593, 0.18626583678089081] ***
*** starting iteration: 3; err: [Inf, 0.2279243439314887, 0.1897170655168593, 0.18626583678089081] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2279243439314887, 0.1897170655168593, 0.18626583678089081, 0.1849876529276371] ***
*** starting iteration: 4; err: [Inf, 0.2279243439314887, 0.1897170655168593, 0.18626583678089081, 0.1849876529276371] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2279243439314887, 0.1897170655168593, 0.18626583678089081, 0.1849876529276371, 0.18421217998862266] ***
*** finished computation of 7 references, err: [Inf, 0.2279243439314887, 0.1897170655168593, 0.18626583678089081, 0.1849876529276371, 0.18421217998862266] ***
*** center 1: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 32, 0]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(1, 48), (2, 32)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 73, 21]]
** centroid: 3, normalized-entropy: 0.7663350359691776, [(2, 73), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 22, 0]]
** centroid: 5, normalized-entropy: 0.8729882944709463, [(1, 53), (2, 22)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 51, 0]]
** centroid: 6, normalized-entropy: 0.4340811200043348, [(1, 5), (2, 51)]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22073848111368716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22073848111368716, 0.19336907385848462] ***
*** starting iteration: 2; err: [Inf, 0.22073848111368716, 0.19336907385848462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22073848111368716, 0.19336907385848462, 0.1904689138010144] ***
*** starting iteration: 3; err: [Inf, 0.22073848111368716, 0.19336907385848462, 0.1904689138010144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22073848111368716, 0.19336907385848462, 0.1904689138010144, 0.1898977686204016] ***
*** finished computation of 7 references, err: [Inf, 0.22073848111368716, 0.19336907385848462, 0.1904689138010144, 0.1898977686204016] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [14, 64, 0]]
** centroid: 1, normalized-entropy: 0.6789538995185759, [(1, 14), (2, 64)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 16, 0]]
** centroid: 2, normalized-entropy: 0.7372413771710565, [(1, 61), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [3, 70, 0]]
** centroid: 4, normalized-entropy: 0.24729443986205674, [(1, 3), (2, 70)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 37, 11]]
** centroid: 5, normalized-entropy: 0.7765557854444601, [(2, 37), (3, 11)]
*** center 6: selecting labels [1] (freq >= 2) [from [98, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23851938937604428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23851938937604428, 0.1931610679384321] ***
*** starting iteration: 2; err: [Inf, 0.23851938937604428, 0.1931610679384321] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23851938937604428, 0.1931610679384321, 0.18736392308026553] ***
*** starting iteration: 3; err: [Inf, 0.23851938937604428, 0.1931610679384321, 0.18736392308026553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23851938937604428, 0.1931610679384321, 0.18736392308026553, 0.18559571553207935] ***
*** starting iteration: 4; err: [Inf, 0.23851938937604428, 0.1931610679384321, 0.18736392308026553, 0.18559571553207935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23851938937604428, 0.1931610679384321, 0.18736392308026553, 0.18559571553207935, 0.18504369246214628] ***
*** finished computation of 7 references, err: [Inf, 0.23851938937604428, 0.1931610679384321, 0.18736392308026553, 0.18559571553207935, 0.18504369246214628] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [65, 26, 0]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(1, 65), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 41, 0]]
** centroid: 2, normalized-entropy: 0.9998900524545515, [(1, 40), (2, 41)]
*** center 3: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [15, 59, 0]]
** centroid: 4, normalized-entropy: 0.7273006785144036, [(1, 15), (2, 59)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 48, 17]]
** centroid: 5, normalized-entropy: 0.829059069399666, [(2, 48), (3, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21759825728461146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21759825728461146, 0.19219356337189675] ***
*** starting iteration: 2; err: [Inf, 0.21759825728461146, 0.19219356337189675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21759825728461146, 0.19219356337189675, 0.1881901913303882] ***
*** starting iteration: 3; err: [Inf, 0.21759825728461146, 0.19219356337189675, 0.1881901913303882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21759825728461146, 0.19219356337189675, 0.1881901913303882, 0.1869603324085474] ***
*** starting iteration: 4; err: [Inf, 0.21759825728461146, 0.19219356337189675, 0.1881901913303882, 0.1869603324085474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21759825728461146, 0.19219356337189675, 0.1881901913303882, 0.1869603324085474, 0.18644883455103264] ***
*** finished computation of 7 references, err: [Inf, 0.21759825728461146, 0.19219356337189675, 0.1881901913303882, 0.1869603324085474, 0.18644883455103264] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [84, 2, 0]]
** centroid: 1, normalized-entropy: 0.15935006268563429, [(1, 84), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [56, 2, 0]]
** centroid: 2, normalized-entropy: 0.21639693245126485, [(1, 56), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 44, 20]]
** centroid: 3, normalized-entropy: 0.8960382325345574, [(2, 44), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [73, 5, 0]]
** centroid: 5, normalized-entropy: 0.34351974100740135, [(1, 73), (2, 5)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 65, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 70, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22855734621733428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22855734621733428, 0.18669632308743894] ***
*** starting iteration: 2; err: [Inf, 0.22855734621733428, 0.18669632308743894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22855734621733428, 0.18669632308743894, 0.18365366643853487] ***
*** starting iteration: 3; err: [Inf, 0.22855734621733428, 0.18669632308743894, 0.18365366643853487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22855734621733428, 0.18669632308743894, 0.18365366643853487, 0.18314399340003729] ***
*** finished computation of 7 references, err: [Inf, 0.22855734621733428, 0.18669632308743894, 0.18365366643853487, 0.18314399340003729] ***
*** center 1: selecting labels [1] (freq >= 2) [from [82, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 7, 0]]
** centroid: 2, normalized-entropy: 0.4558314584408233, [(1, 66), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 46, 14]]
** centroid: 3, normalized-entropy: 0.7837769474847011, [(2, 46), (3, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 19, 0]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(1, 57), (2, 19)]
*** center 5: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 71, 0]]
** centroid: 6, normalized-entropy: 0.3003914173647818, [(1, 4), (2, 71)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 53, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22577240925841033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22577240925841033, 0.19185953662917019] ***
*** starting iteration: 2; err: [Inf, 0.22577240925841033, 0.19185953662917019] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22577240925841033, 0.19185953662917019, 0.18913199639879166] ***
*** starting iteration: 3; err: [Inf, 0.22577240925841033, 0.19185953662917019, 0.18913199639879166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22577240925841033, 0.19185953662917019, 0.18913199639879166, 0.1884757415195927] ***
*** finished computation of 7 references, err: [Inf, 0.22577240925841033, 0.19185953662917019, 0.18913199639879166, 0.1884757415195927] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 74, 0]]
** centroid: 1, normalized-entropy: 0.3843115441264972, [(1, 6), (2, 74)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 14, 0]]
** centroid: 2, normalized-entropy: 0.7051819722888517, [(1, 59), (2, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 63, 13]]
** centroid: 4, normalized-entropy: 0.6601070987550468, [(2, 63), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 38, 0]]
** centroid: 5, normalized-entropy: 0.9884374283487116, [(1, 49), (2, 38)]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22965984758734703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22965984758734703, 0.18944746020063757] ***
*** starting iteration: 2; err: [Inf, 0.22965984758734703, 0.18944746020063757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22965984758734703, 0.18944746020063757, 0.18734146738424898] ***
*** starting iteration: 3; err: [Inf, 0.22965984758734703, 0.18944746020063757, 0.18734146738424898] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22965984758734703, 0.18944746020063757, 0.18734146738424898, 0.18660739937797188] ***
*** finished computation of 7 references, err: [Inf, 0.22965984758734703, 0.18944746020063757, 0.18734146738424898, 0.18660739937797188] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [82, 6, 0]]
** centroid: 2, normalized-entropy: 0.3591016256485496, [(1, 82), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 40, 13]]
** centroid: 3, normalized-entropy: 0.8037159237834126, [(2, 40), (3, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 31, 0]]
** centroid: 5, normalized-entropy: 0.9782176659354249, [(1, 44), (2, 31)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [15, 53, 0]]
** centroid: 6, normalized-entropy: 0.7612401496918493, [(1, 15), (2, 53)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 52, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24090396461635827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24090396461635827, 0.1958469206895679] ***
*** starting iteration: 2; err: [Inf, 0.24090396461635827, 0.1958469206895679] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24090396461635827, 0.1958469206895679, 0.19062828387878836] ***
*** starting iteration: 3; err: [Inf, 0.24090396461635827, 0.1958469206895679, 0.19062828387878836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24090396461635827, 0.1958469206895679, 0.19062828387878836, 0.18928615330532192] ***
*** starting iteration: 4; err: [Inf, 0.24090396461635827, 0.1958469206895679, 0.19062828387878836, 0.18928615330532192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24090396461635827, 0.1958469206895679, 0.19062828387878836, 0.18928615330532192, 0.18835592385567726] ***
*** finished computation of 7 references, err: [Inf, 0.24090396461635827, 0.1958469206895679, 0.19062828387878836, 0.18928615330532192, 0.18835592385567726] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [10, 71, 0]]
** centroid: 1, normalized-entropy: 0.5392163432092415, [(1, 10), (2, 71)]
*** center 2: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 46, 0]]
** centroid: 3, normalized-entropy: 0.999280531064971, [(1, 49), (2, 46)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 12, 0]]
** centroid: 4, normalized-entropy: 0.634309554640566, [(1, 63), (2, 12)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 49, 17]]
** centroid: 5, normalized-entropy: 0.8230660790114689, [(2, 49), (3, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23114663492329418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23114663492329418, 0.1885427747759968] ***
*** starting iteration: 2; err: [Inf, 0.23114663492329418, 0.1885427747759968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23114663492329418, 0.1885427747759968, 0.1856536519769579] ***
*** starting iteration: 3; err: [Inf, 0.23114663492329418, 0.1885427747759968, 0.1856536519769579] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23114663492329418, 0.1885427747759968, 0.1856536519769579, 0.18470114694721998] ***
*** finished computation of 7 references, err: [Inf, 0.23114663492329418, 0.1885427747759968, 0.1856536519769579, 0.18470114694721998] ***
*** center 1: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 54, 11]]
** centroid: 2, normalized-entropy: 0.6559420757694151, [(2, 54), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [61, 3, 0]]
** centroid: 3, normalized-entropy: 0.2729708579140699, [(1, 61), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 9, 0]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(1, 63), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 60, 0]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(1, 24), (2, 60)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 67, 0]]
** centroid: 7, normalized-entropy: 0.3638469981769295, [(1, 5), (2, 67)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25049535586312416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25049535586312416, 0.1947138621713966] ***
*** starting iteration: 2; err: [Inf, 0.25049535586312416, 0.1947138621713966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25049535586312416, 0.1947138621713966, 0.1900207562400028] ***
*** starting iteration: 3; err: [Inf, 0.25049535586312416, 0.1947138621713966, 0.1900207562400028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25049535586312416, 0.1947138621713966, 0.1900207562400028, 0.18821867546439172] ***
*** starting iteration: 4; err: [Inf, 0.25049535586312416, 0.1947138621713966, 0.1900207562400028, 0.18821867546439172] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25049535586312416, 0.1947138621713966, 0.1900207562400028, 0.18821867546439172, 0.1870824286993593] ***
*** starting iteration: 5; err: [Inf, 0.25049535586312416, 0.1947138621713966, 0.1900207562400028, 0.18821867546439172, 0.1870824286993593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25049535586312416, 0.1947138621713966, 0.1900207562400028, 0.18821867546439172, 0.1870824286993593, 0.18675293350964783] ***
*** finished computation of 7 references, err: [Inf, 0.25049535586312416, 0.1947138621713966, 0.1900207562400028, 0.18821867546439172, 0.1870824286993593, 0.18675293350964783] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 20, 0]]
** centroid: 1, normalized-entropy: 0.7966394665488286, [(1, 63), (2, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 58, 17]]
** centroid: 3, normalized-entropy: 0.7721551435804817, [(2, 58), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 46, 0]]
** centroid: 5, normalized-entropy: 0.9953784388202258, [(1, 54), (2, 46)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [12, 59, 0]]
** centroid: 6, normalized-entropy: 0.6554444445609846, [(1, 12), (2, 59)]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2351144852731377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2351144852731377, 0.19409664151258765] ***
*** starting iteration: 2; err: [Inf, 0.2351144852731377, 0.19409664151258765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2351144852731377, 0.19409664151258765, 0.1912958863861859] ***
*** starting iteration: 3; err: [Inf, 0.2351144852731377, 0.19409664151258765, 0.1912958863861859] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2351144852731377, 0.19409664151258765, 0.1912958863861859, 0.18985939953289926] ***
*** starting iteration: 4; err: [Inf, 0.2351144852731377, 0.19409664151258765, 0.1912958863861859, 0.18985939953289926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2351144852731377, 0.19409664151258765, 0.1912958863861859, 0.18985939953289926, 0.1889885139465332] ***
*** finished computation of 7 references, err: [Inf, 0.2351144852731377, 0.19409664151258765, 0.1912958863861859, 0.18985939953289926, 0.1889885139465332] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 48, 19]]
** centroid: 2, normalized-entropy: 0.8602858652332406, [(2, 48), (3, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 4, 0]]
** centroid: 4, normalized-entropy: 0.3003914173647818, [(1, 71), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 66, 0]]
** centroid: 5, normalized-entropy: 0.8589810370425965, [(1, 26), (2, 66)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [58, 6, 0]]
** centroid: 7, normalized-entropy: 0.44886448872302936, [(1, 58), (2, 6)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22763016597554087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22763016597554087, 0.19095639235153794] ***
*** starting iteration: 2; err: [Inf, 0.22763016597554087, 0.19095639235153794] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22763016597554087, 0.19095639235153794, 0.1881842276789248] ***
*** starting iteration: 3; err: [Inf, 0.22763016597554087, 0.19095639235153794, 0.1881842276789248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22763016597554087, 0.19095639235153794, 0.1881842276789248, 0.18748866277746856] ***
*** finished computation of 7 references, err: [Inf, 0.22763016597554087, 0.19095639235153794, 0.1881842276789248, 0.18748866277746856] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 76, 0]]
** centroid: 1, normalized-entropy: 0.3776463213737003, [(1, 6), (2, 76)]
*** center 2: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [77, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 37, 17]]
** centroid: 5, normalized-entropy: 0.8986533756907481, [(2, 37), (3, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 72, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2205139671359211] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2205139671359211, 0.18729961153306068] ***
*** starting iteration: 2; err: [Inf, 0.2205139671359211, 0.18729961153306068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2205139671359211, 0.18729961153306068, 0.18268780652433633] ***
*** starting iteration: 3; err: [Inf, 0.2205139671359211, 0.18729961153306068, 0.18268780652433633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2205139671359211, 0.18729961153306068, 0.18268780652433633, 0.18137474815174937] ***
*** starting iteration: 4; err: [Inf, 0.2205139671359211, 0.18729961153306068, 0.18268780652433633, 0.18137474815174937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2205139671359211, 0.18729961153306068, 0.18268780652433633, 0.18137474815174937, 0.18108108862955125] ***
*** finished computation of 7 references, err: [Inf, 0.2205139671359211, 0.18729961153306068, 0.18268780652433633, 0.18137474815174937, 0.18108108862955125] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [77, 3, 0]]
** centroid: 1, normalized-entropy: 0.2307099556914763, [(1, 77), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 3, 0]]
** centroid: 2, normalized-entropy: 0.260862909647207, [(1, 65), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 55, 15]]
** centroid: 3, normalized-entropy: 0.7495952572594798, [(2, 55), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 36, 0]]
** centroid: 5, normalized-entropy: 0.940285958670631, [(1, 20), (2, 36)]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 73, 0]]
** centroid: 7, normalized-entropy: 0.34351974100740135, [(1, 5), (2, 73)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24173308150283992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24173308150283992, 0.19373802235163748] ***
*** starting iteration: 2; err: [Inf, 0.24173308150283992, 0.19373802235163748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24173308150283992, 0.19373802235163748, 0.18902389425598085] ***
*** starting iteration: 3; err: [Inf, 0.24173308150283992, 0.19373802235163748, 0.18902389425598085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24173308150283992, 0.19373802235163748, 0.18902389425598085, 0.18845739577244966] ***
*** finished computation of 7 references, err: [Inf, 0.24173308150283992, 0.19373802235163748, 0.18902389425598085, 0.18845739577244966] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [7, 83, 0]]
** centroid: 1, normalized-entropy: 0.39430023792747493, [(1, 7), (2, 83)]
*** center 2: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [38, 53, 0]]
** centroid: 3, normalized-entropy: 0.9803107984107206, [(1, 38), (2, 53)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 22, 0]]
** centroid: 4, normalized-entropy: 0.8390040613676978, [(1, 60), (2, 22)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 46, 16]]
** centroid: 5, normalized-entropy: 0.8238116333123173, [(2, 46), (3, 16)]
*** center 6: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [71, 2, 0]]
** centroid: 7, normalized-entropy: 0.18116640155354563, [(1, 71), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23764304229803385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23764304229803385, 0.1984677643328905] ***
*** starting iteration: 2; err: [Inf, 0.23764304229803385, 0.1984677643328905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23764304229803385, 0.1984677643328905, 0.19310722258128227] ***
*** starting iteration: 3; err: [Inf, 0.23764304229803385, 0.1984677643328905, 0.19310722258128227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23764304229803385, 0.1984677643328905, 0.19310722258128227, 0.1912001579273492] ***
*** starting iteration: 4; err: [Inf, 0.23764304229803385, 0.1984677643328905, 0.19310722258128227, 0.1912001579273492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23764304229803385, 0.1984677643328905, 0.19310722258128227, 0.1912001579273492, 0.19059321187436581] ***
*** finished computation of 7 references, err: [Inf, 0.23764304229803385, 0.1984677643328905, 0.19310722258128227, 0.1912001579273492, 0.19059321187436581] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [67, 6, 0]]
** centroid: 1, normalized-entropy: 0.4098553703184051, [(1, 67), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 16, 0]]
** centroid: 2, normalized-entropy: 0.7120640548905481, [(1, 66), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 48, 15]]
** centroid: 3, normalized-entropy: 0.7918583525674836, [(2, 48), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 64, 0]]
** centroid: 5, normalized-entropy: 0.3750514064240124, [(1, 5), (2, 64)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 44, 0]]
** centroid: 6, normalized-entropy: 0.998363672593813, [(1, 40), (2, 44)]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22078255750983952] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22078255750983952, 0.1889797009192407] ***
*** starting iteration: 2; err: [Inf, 0.22078255750983952, 0.1889797009192407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22078255750983952, 0.1889797009192407, 0.18471850494202227] ***
*** starting iteration: 3; err: [Inf, 0.22078255750983952, 0.1889797009192407, 0.18471850494202227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22078255750983952, 0.1889797009192407, 0.18471850494202227, 0.18413068478740752] ***
*** finished computation of 7 references, err: [Inf, 0.22078255750983952, 0.1889797009192407, 0.18471850494202227, 0.18413068478740752] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [88, 2, 0]]
** centroid: 1, normalized-entropy: 0.1537421803287618, [(1, 88), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 3, 0]]
** centroid: 2, normalized-entropy: 0.2729708579140699, [(1, 61), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 32, 15]]
** centroid: 3, normalized-entropy: 0.9034535552068337, [(2, 32), (3, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 6, 0]]
** centroid: 4, normalized-entropy: 0.3912435636292556, [(1, 72), (2, 6)]
*** center 5: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 71, 0]]
** centroid: 7, normalized-entropy: 0.3003914173647818, [(1, 4), (2, 71)]
finished with 8 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 371,3 => 31,1 => 598), Dict(2 => 363,3 => 34,1 => 603))
[ Info: ===== scores for single classifier: {"micro_f1":0.935,"precision":0.935,"recall":0.935,"macro_recall":0.9450634796632084,"macro_f1":0.8611054796655978,"accuracy":0.935,"class_f1":{"2":0.9053857350800584,"3":0.7083333333333333,"1":0.9695973705834018},"class_precision":{"2":0.9598765432098766,"3":0.5483870967741935,"1":0.9609120521172638},"class_recall":{"2":0.8567493112947658,"3":1.0,"1":0.978441127694859}}
[ Info: ===== scores for 1: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9606240122242996,"macro_f1":0.9406695505787374,"accuracy":0.966,"class_f1":{"2":0.9512893982808024,"3":0.8918918918918919,"1":0.9788273615635179},"class_precision":{"2":0.991044776119403,"3":0.825,"1":0.9616},"class_recall":{"2":0.9146005509641874,"3":0.9705882352941176,"1":0.9966832504145937}}
[ Info: ===== scores for 5: {"micro_f1":0.9810000000000001,"precision":0.981,"recall":0.981,"macro_recall":0.9769564912433456,"macro_f1":0.9521942598050267,"accuracy":0.981,"class_f1":{"2":0.9738651994497937,"3":0.8918918918918919,"1":0.9908256880733944},"class_precision":{"2":0.9725274725274725,"3":0.825,"1":0.9966442953020134},"class_recall":{"2":0.9752066115702479,"3":0.9705882352941176,"1":0.9850746268656716}}
[ Info: ===== scores for 7: {"micro_f1":0.982,"precision":0.982,"recall":0.982,"macro_recall":0.9871258948599518,"macro_f1":0.9575839170576014,"accuracy":0.982,"class_f1":{"2":0.9752747252747253,"3":0.9066666666666667,"1":0.9908103592314119},"class_precision":{"2":0.9726027397260274,"3":0.8292682926829268,"1":0.9983164983164983},"class_recall":{"2":0.977961432506887,"3":1.0,"1":0.9834162520729685}}
[ Info: ===== scores for 9: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9843710739233127,"macro_f1":0.9445465712616348,"accuracy":0.979,"class_f1":{"2":0.9710344827586207,"3":0.8717948717948718,"1":0.9908103592314119},"class_precision":{"2":0.9723756906077348,"3":0.7727272727272727,"1":0.9983164983164983},"class_recall":{"2":0.9696969696969697,"3":1.0,"1":0.9834162520729685}}
[ Info: ===== scores for 11: {"micro_f1":0.982,"precision":0.982,"recall":0.982,"macro_recall":0.9863949307639945,"macro_f1":0.946751732338207,"accuracy":0.982,"class_f1":{"2":0.9751381215469613,"3":0.8717948717948718,"1":0.9933222036727879},"class_precision":{"2":0.9778393351800554,"3":0.7727272727272727,"1":1.0},"class_recall":{"2":0.9724517906336089,"3":1.0,"1":0.9867330016583747}}
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.981, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.981, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.981, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.981, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.984, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.984, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.984,"k":5,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.984,"precision":0.984,"recall":0.984,"macro_recall":0.9889624421510446,"macro_f1":0.9708366472448162,"accuracy":0.984,"class_f1":{"2":0.978082191780822,"3":0.9444444444444444,"1":0.989983305509182},"class_precision":{"2":0.9727520435967303,"3":0.8947368421052632,"1":0.9966386554621849},"class_recall":{"2":0.9834710743801653,"3":1.0,"1":0.9834162520729685}}
Test Summary: | Pass  Total
AKNC          |    8      8
[324, 1, 3, 1, 5, 2, 4, 8, 1, 8, 2, 1, 3, 3, 2, 10, 1, 4, 25, 9, 47, 7, 4, 8, 34, 1, 13, 4, 14, 8, 3, 10, 8, 40, 8, 33, 1, 32, 10, 3, 50, 4, 2, 7, 6, 3, 4, 13, 6, 13, 7, 9, 14, 20, 4, 3, 10, 1, 12, 2, 13, 6, 7, 5, 3, 41, 22, 8, 6, 5, 5, 2, 34, 17, 7, 52, 26, 33, 75, 92, 5, 4, 122, 7, 11, 22, 9, 23, 3, 1, 8, 11, 23, 2, 7, 45, 6, 4, 14, 13, 3, 18, 1, 114, 10, 4, 8, 8, 17, 76, 12, 8, 10, 11, 29, 19, 4, 12, 2, 4, 12, 12, 24, 3, 11, 22, 11, 1128, 8, 6, 9, 19, 53, 40, 19, 20, 2, 15, 47, 4, 10, 19, 23, 25, 2, 79, 5, 15, 36, 9, 16, 25, 38, 21, 87, 93, 1, 22, 25, 11, 24, 17, 1, 3, 17, 19, 7, 26, 11, 10, 45, 61, 9, 185, 6, 7, 19, 1, 21, 499, 81, 11, 19, 10, 17, 4, 4, 20, 16, 34, 183, 11, 51, 3, 38, 9, 10, 109, 7, 19, 14, 39, 20, 1, 34, 8, 13, 7, 42, 162, 1, 11, 39, 33, 193, 9, 8, 9, 15, 22, 37, 4, 30, 56, 6, 6, 104, 80, 71, 56, 6, 37, 17, 8, 41, 8, 8, 20, 237, 8, 26, 12, 6, 28, 5, 13, 2, 40, 46, 57, 211, 10, 54, 42, 11, 22, 154, 15, 13, 8, 11, 146, 261, 6, 32, 30, 8, 16, 14, 47, 11, 31, 21, 57, 166, 93, 4, 178, 10, 63, 7, 10, 28, 40, 6, 3, 77, 76, 120, 121, 9, 33, 5, 9, 74, 30, 46, 16, 11, 44]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6839999999999999, speedup = 0.23163466089198181, eval_ratio = 0.092568)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4091672867063491,"recall":0.40017361111111105,"f1":null,"seconds":0.00021726638078689575,"exhaustive_search_seconds":0.00037260912358760834,"evaluations":547.9453125,"distances_sum":1716.494201851134}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5486111111111108,"recall":0.5486111111111108,"f1":null,"seconds":0.0005024056881666183,"exhaustive_search_seconds":0.00037260912358760834,"evaluations":709.03125,"distances_sum":1662.1133175665236}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6545138888888885,"recall":0.6545138888888885,"f1":0.6545138888888885,"seconds":0.00047916360199451447,"exhaustive_search_seconds":0.00037260912358760834,"evaluations":848.0390625,"distances_sum":1609.7641337316718}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7265624999999993,"recall":0.7265624999999993,"f1":0.7265624999999993,"seconds":0.0005550626665353775,"exhaustive_search_seconds":0.00037260912358760834,"evaluations":1017.921875,"distances_sum":1585.0003009327552}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7829861111111105,"recall":0.7829861111111105,"f1":0.7829861111111105,"seconds":0.0007587745785713196,"exhaustive_search_seconds":0.00037260912358760834,"evaluations":1126.2421875,"distances_sum":1566.5522914571231}
KCenters.DeloneInvIndex> reached performance {"precision":0.8159722222222213,"recall":0.8159722222222213,"f1":0.8159722222222213,"seconds":0.000741083174943924,"exhaustive_search_seconds":0.00037260912358760834,"evaluations":1252.75,"distances_sum":1557.4534597693557}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8610000000000002, speedup = 0.4871781740900536, eval_ratio = 0.129707)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
