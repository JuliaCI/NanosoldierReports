Julia Version 1.5.0-DEV.640
Commit 380e68f5f3 (2020-04-17 17:55 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed InvertedIndices ───────────── v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed DataStructures ────────────── v0.17.12
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed MLDataPattern ─────────────── v0.5.1
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed SimilaritySearch ──────────── v0.3.19
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed OrderedCollections ────────── v1.1.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataAPI ───────────────────── v1.1.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Parsers ───────────────────── v1.0.2
  Installed TableTraits ───────────────── v1.0.0
  Installed Tables ────────────────────── v1.0.4
  Installed CategoricalArrays ─────────── v0.7.7
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Compat ────────────────────── v3.8.0
  Installed Reexport ──────────────────── v0.2.0
  Installed Missings ──────────────────── v0.4.3
  Installed MappedArrays ──────────────── v0.2.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed JSON ──────────────────────── v0.21.0
  Installed DataFrames ────────────────── v0.20.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.12
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_15iwOO/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_15iwOO/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.12
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9323044313987097
[ Info: 0.8302954188982645
[ Info: 0.5541281573474407
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32982491600016756
mean(cdnet.distances) = 0.37624841066698234
mean(crand.distances) = 0.347917649547259
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.501953125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.501953125,"f1":null,"seconds":4.434958100318909e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.6953125,"distances_sum":1371.9424179934988}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.716796875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.716796875,"f1":0.8270156926406934,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.8671875,"distances_sum":1972.4198791337276}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.716796875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.716796875,"f1":0.8270156926406934,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.8671875,"distances_sum":1972.4198791337276}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.950363698801199,"seconds":6.4782798290252686e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7734375,"distances_sum":2686.042499794556}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.950363698801199,"seconds":6.4782798290252686e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7734375,"distances_sum":2686.042499794556}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":5,"bsize":13}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9817536630036631,"seconds":6.726011633872986e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.984375,"distances_sum":2888.6396293278003}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.971394230769231,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9296875,"distances_sum":2825.8113737237395}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9817536630036631,"seconds":6.726011633872986e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.984375,"distances_sum":2888.6396293278003}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9817536630036631,"seconds":6.726011633872986e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.984375,"distances_sum":2888.6396293278003}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.580078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.580078125,"f1":0.717177787490288,"seconds":4.559755325317383e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.078125,"distances_sum":1345.7318021600252}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4365234375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4365234375,"f1":null,"seconds":4.131346940994263e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":6.484375,"distances_sum":949.3920300085125}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.580078125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.580078125,"f1":0.717177787490288,"seconds":4.559755325317383e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.078125,"distances_sum":1345.7318021600252}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9056693306693313,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.6484375,"distances_sum":2127.352079367002}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9308530011655017,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.703125,"distances_sum":2308.3921514601875}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.880859375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.880859375,"f1":0.9308530011655017,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.703125,"distances_sum":2308.3921514601875}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9672847985347989,"seconds":6.463378667831421e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.921875,"distances_sum":2583.040542132657}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9629864926739932,"seconds":5.906447768211365e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8671875,"distances_sum":2547.9483921550486}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9693280677655681,"seconds":6.232410669326782e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9296875,"distances_sum":2589.077797735269}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9734775641025645,"seconds":6.332993507385254e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.953125,"distances_sum":2625.398515730829}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9614411630036633,"seconds":6.5248459577560425e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9140625,"distances_sum":2527.078391937138}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9734775641025645,"seconds":6.332993507385254e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.953125,"distances_sum":2625.398515730829}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9734775641025645,"seconds":6.332993507385254e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.953125,"distances_sum":2625.398515730829}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8564367923742933,"seconds":5.3960829973220825e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.2265625,"distances_sum":1979.3313808058576}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8526561979686987,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.3046875,"distances_sum":1930.216046827307}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2021484375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2021484375,"f1":null,"seconds":3.4105032682418823e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":5.453125,"distances_sum":539.5127137113438}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4287109375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4287109375,"f1":null,"seconds":3.904104232788086e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":6.25,"distances_sum":1015.3741345534896}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.759765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.759765625,"f1":0.8564367923742933,"seconds":5.3960829973220825e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.2265625,"distances_sum":1979.3313808058576}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9664091117216123,"seconds":6.118789315223694e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9375,"distances_sum":2655.1807177317987}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9316194222444228,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.875,"distances_sum":2384.436233363816}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8580794205794214,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.21875,"distances_sum":2005.8631115563496}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9248054029304034,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.7734375,"distances_sum":2372.612528798982}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9607944139194141,"seconds":5.9138983488082886e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8984375,"distances_sum":2596.422966725461}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9664091117216123,"seconds":6.118789315223694e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9375,"distances_sum":2655.1807177317987}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9724759615384617,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9140625,"distances_sum":2685.4013556888062}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.972527472527473,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9921875,"distances_sum":2675.7142939626874}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9681433150183155,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.859375,"distances_sum":2676.920494616934}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9724759615384617,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9140625,"distances_sum":2685.4013556888062}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9724759615384617,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9140625,"distances_sum":2685.4013556888062}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3583984375, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3583984375,"f1":null,"seconds":3.5818666219711304e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":5.734375,"distances_sum":918.3800547910586}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.322265625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.322265625,"f1":null,"seconds":3.3508986234664917e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":5.3671875,"distances_sum":790.6595777984268}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3583984375,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.3583984375,"f1":null,"seconds":3.5818666219711304e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":5.734375,"distances_sum":918.3800547910586}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7940117174492183,"seconds":4.945322871208191e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":7.8984375,"distances_sum":1684.0828669140012}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9043128746253752,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.828125,"distances_sum":2172.7037493652965}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.517578125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.517578125,"f1":0.6698697136197141,"seconds":4.151836037635803e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":7.1015625,"distances_sum":1206.4824535492364}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.505859375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.505859375,"f1":0.6541553932178936,"seconds":4.410743713378906e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":6.859375,"distances_sum":1169.8017712104963}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8504302988677995,"seconds":5.034729838371277e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.359375,"distances_sum":1908.1099440030218}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.83984375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.83984375,"f1":0.9043128746253752,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.828125,"distances_sum":2172.7037493652965}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9616872710622717,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.953125,"distances_sum":2497.176972069382}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9591174450549454,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8984375,"distances_sum":2485.5210413587556}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9234666375291382,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8046875,"distances_sum":2264.5739827973775}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9616872710622717,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.953125,"distances_sum":2497.176972069382}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9616872710622717,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.953125,"distances_sum":2497.176972069382}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4873046875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.4873046875,"f1":0.6391232031857037,"seconds":4.246830940246582e-6,"exhaustive_search_seconds":1.5720725059509277e-6,"evaluations":6.421875,"distances_sum":716.5100146138774}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6005859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6005859375,"f1":0.7375223734598744,"seconds":4.7013163566589355e-6,"exhaustive_search_seconds":1.5720725059509277e-6,"evaluations":7.15625,"distances_sum":930.2978707661418}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6005859375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6005859375,"f1":0.7375223734598744,"seconds":4.7013163566589355e-6,"exhaustive_search_seconds":1.5720725059509277e-6,"evaluations":7.15625,"distances_sum":930.2978707661418}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6943359375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.6943359375,"f1":0.8076309107559116,"seconds":5.1818788051605225e-6,"exhaustive_search_seconds":1.5720725059509277e-6,"evaluations":7.7265625,"distances_sum":1119.1088602500688}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9280250999001005,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.5720725059509277e-6,"evaluations":8.6796875,"distances_sum":1430.043658433859}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9162660256410264,"seconds":5.953013896942139e-6,"exhaustive_search_seconds":1.5720725059509277e-6,"evaluations":8.59375,"distances_sum":1409.3333924595267}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9008793290043299,"seconds":5.852431058883667e-6,"exhaustive_search_seconds":1.5720725059509277e-6,"evaluations":8.625,"distances_sum":1314.7223404870133}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8969905094905103,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.5720725059509277e-6,"evaluations":8.546875,"distances_sum":1335.5907553661502}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8759765625,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8759765625,"f1":0.9280250999001005,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.5720725059509277e-6,"evaluations":8.6796875,"distances_sum":1430.043658433859}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9595638736263741,"seconds":5.966052412986755e-6,"exhaustive_search_seconds":1.5720725059509277e-6,"evaluations":8.8359375,"distances_sum":1568.991355174155}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9708905677655681,"seconds":6.426125764846802e-6,"exhaustive_search_seconds":1.5720725059509277e-6,"evaluations":8.9375,"distances_sum":1616.8116991082104}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9490728021978027,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.5720725059509277e-6,"evaluations":8.796875,"distances_sum":1518.0253572457798}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9334191849816855,"seconds":5.681067705154419e-6,"exhaustive_search_seconds":1.5720725059509277e-6,"evaluations":8.7890625,"distances_sum":1443.1128315640444}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9708905677655681,"seconds":6.426125764846802e-6,"exhaustive_search_seconds":1.5720725059509277e-6,"evaluations":8.9375,"distances_sum":1616.8116991082104}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9708905677655681,"seconds":6.426125764846802e-6,"exhaustive_search_seconds":1.5720725059509277e-6,"evaluations":8.9375,"distances_sum":1616.8116991082104}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.8019017440892448,"seconds":4.742294549942017e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.625,"distances_sum":1300.5496422703177}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6845703125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6845703125,"f1":0.8019017440892448,"seconds":4.742294549942017e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.625,"distances_sum":1300.5496422703177}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6845703125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6845703125,"f1":0.8019017440892448,"seconds":4.742294549942017e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.625,"distances_sum":1300.5496422703177}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.6845703125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6845703125,"f1":0.8019017440892448,"seconds":4.742294549942017e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.625,"distances_sum":1300.5496422703177}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6474609375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6474609375,"f1":0.7745246073371083,"seconds":4.7907233238220215e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.5546875,"distances_sum":1200.980163671796}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6474609375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6474609375,"f1":0.7745246073371083,"seconds":4.7907233238220215e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.5546875,"distances_sum":1200.980163671796}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9544127747252752,"seconds":6.077811121940613e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.84375,"distances_sum":2016.1466738393156}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9608459249084255,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.90625,"distances_sum":2016.6876943750362}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9608459249084255,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.90625,"distances_sum":2016.6876943750362}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.97983630952381,"seconds":6.5229833126068115e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.96875,"distances_sum":2137.619319428819}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9800595238095242,"seconds":6.338581442832947e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9375,"distances_sum":2147.9670141147985}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9751888736263737,"seconds":6.1355531215667725e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9453125,"distances_sum":2114.9252607226767}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.97983630952381,"seconds":6.5229833126068115e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.96875,"distances_sum":2137.619319428819}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.97983630952381,"seconds":6.5229833126068115e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.96875,"distances_sum":2137.619319428819}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.736328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.736328125,"f1":0.8397898976023984,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.0625,"distances_sum":1500.2289345607487}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6494140625, conf: {"ssize":4,"bsize":4}, perf: {"precision":null,"recall":0.6494140625,"f1":null,"seconds":4.863366484642029e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.3515625,"distances_sum":1320.8098281221833}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.736328125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.736328125,"f1":0.8397898976023984,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.0625,"distances_sum":1500.2289345607487}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9292327464202471,"seconds":5.666166543960571e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7890625,"distances_sum":1920.749671257588}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9430517399267405,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.796875,"distances_sum":2009.6713215734528}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9077609890109898,"seconds":5.630776286125183e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.609375,"distances_sum":1823.1988945322464}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8994140625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.9430517399267405,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.796875,"distances_sum":2009.6713215734528}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9770318223443227,"seconds":6.18956983089447e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.921875,"distances_sum":2242.9875881349144}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9520547161172166,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8984375,"distances_sum":2065.3748405015554}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9603136446886451,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.84375,"distances_sum":2156.036020566663}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9707818223443228,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.859375,"distances_sum":2211.4218546430834}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9622653388278394,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9140625,"distances_sum":2123.357155630623}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9770318223443227,"seconds":6.18956983089447e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.921875,"distances_sum":2242.9875881349144}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9770318223443227,"seconds":6.18956983089447e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.921875,"distances_sum":2242.9875881349144}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7333984375, conf: {"ssize":3,"bsize":5}, perf: {"precision":0.9633556547619045,"recall":0.7333984375,"f1":0.8266936188811193,"seconds":5.107372999191284e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.265625,"distances_sum":2123.8566552663506}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6455078125, conf: {"ssize":4,"bsize":4}, perf: {"precision":0.9725260416666665,"recall":0.6455078125,"f1":0.7661424512987018,"seconds":4.511326551437378e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.453125,"distances_sum":1788.6952865858716}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6220703125, conf: {"ssize":5,"bsize":4}, perf: {"precision":0.9711495535714283,"recall":0.6220703125,"f1":0.7497354208291713,"seconds":4.464760422706604e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.5234375,"distances_sum":1674.9370283149506}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7333984375,"state":{"ssize":3,"bsize":5},"perf":{"precision":0.9633556547619045,"recall":0.7333984375,"f1":0.8266936188811193,"seconds":5.107372999191284e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.265625,"distances_sum":2123.8566552663506}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":7,"bsize":9}, perf: {"precision":0.9802827380952382,"recall":0.9326171875,"f1":0.9535742902930404,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9140625,"distances_sum":3054.266164757588}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9720331101190476,"recall":0.7587890625,"f1":0.8451019683441562,"seconds":5.17629086971283e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.1640625,"distances_sum":2209.277704035858}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73828125, conf: {"ssize":6,"bsize":5}, perf: {"precision":0.9733444940476188,"recall":0.73828125,"f1":0.8312693816600071,"seconds":5.02169132232666e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.1171875,"distances_sum":2172.0087263512937}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":7,"bsize":9},"perf":{"precision":0.9802827380952382,"recall":0.9326171875,"f1":0.9535742902930404,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9140625,"distances_sum":3054.266164757588}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":6,"bsize":11}, perf: {"precision":0.9794456845238098,"recall":0.9365234375,"f1":0.9550838484432235,"seconds":6.148591637611389e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.875,"distances_sum":3123.269039844442}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":6,"bsize":11},"perf":{"precision":0.9794456845238098,"recall":0.9365234375,"f1":0.9550838484432235,"seconds":6.148591637611389e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.875,"distances_sum":3123.269039844442}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":6,"bsize":11},"perf":{"precision":0.9794456845238098,"recall":0.9365234375,"f1":0.9550838484432235,"seconds":6.148591637611389e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.875,"distances_sum":3123.269039844442}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.203125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.203125,"f1":null,"seconds":3.2279640436172485e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":5.734375,"distances_sum":565.5950018939986}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.203125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.203125,"f1":null,"seconds":3.2279640436172485e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":5.734375,"distances_sum":565.5950018939986}}, n: 9
mean(cfft.distances) = 0.33387523598523966
mean(cdnet.distances) = 0.4010742611677518
mean(crand.distances) = 0.8996724982889557
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8733333333333334
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8911111111111111
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8377777777777777
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.86
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9022222222222221
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9022222222222221
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9288888888888889
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9333333333333332
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9288888888888889
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8577777777777778
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9311111111111111
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9244444444444445
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9244444444444445
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9244444444444445
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9088888888888889
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8777777777777778
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9311111111111111
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9044444444444445
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9066666666666666
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8955555555555557
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8866666666666667
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444443
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9022222222222224
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9133333333333334
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8822222222222221
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8533333333333334
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.6065741968154907] ***
*** center 1: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 8, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.2040538998675888] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2040538998675888, 0.16251277041484466] ***
*** starting iteration: 2; err: [Inf, 0.2040538998675888, 0.16251277041484466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2040538998675888, 0.16251277041484466, 0.15571908185303257] ***
*** starting iteration: 3; err: [Inf, 0.2040538998675888, 0.16251277041484466, 0.15571908185303257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2040538998675888, 0.16251277041484466, 0.15571908185303257, 0.1534291405934147] ***
*** finished computation of 7 references, err: [Inf, 0.2040538998675888, 0.16251277041484466, 0.15571908185303257, 0.1534291405934147] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [72, 5, 0]]
** centroid: 1, normalized-entropy: 0.34673146824966367, [(1, 72), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [97, 38, 0]]
** centroid: 2, normalized-entropy: 0.8574615881396632, [(1, 97), (2, 38)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 32, 24]]
** centroid: 3, normalized-entropy: 0.9852281360342514, [(2, 32), (3, 24)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 80, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [128, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [12, 82, 0]]
** centroid: 7, normalized-entropy: 0.5509844433017146, [(1, 12), (2, 82)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.45175803121663183] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45175803121663183, 0.3000129152973135] ***
*** starting iteration: 2; err: [Inf, 0.45175803121663183, 0.3000129152973135] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45175803121663183, 0.3000129152973135, 0.29820087425936537] ***
*** starting iteration: 3; err: [Inf, 0.45175803121663183, 0.3000129152973135, 0.29820087425936537] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45175803121663183, 0.3000129152973135, 0.29820087425936537, 0.29777512379835275] ***
*** finished computation of 3 references, err: [Inf, 0.45175803121663183, 0.3000129152973135, 0.29820087425936537, 0.29777512379835275] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [256, 21, 0]]
** centroid: 1, normalized-entropy: 0.38724878742697183, [(1, 256), (2, 21)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 158, 24]]
** centroid: 2, normalized-entropy: 0.5625393752025972, [(2, 158), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [149, 58, 0]]
** centroid: 3, normalized-entropy: 0.8557139755367106, [(1, 149), (2, 58)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37071955523061295] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37071955523061295, 0.30796515592408813] ***
*** starting iteration: 2; err: [Inf, 0.37071955523061295, 0.30796515592408813] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37071955523061295, 0.30796515592408813, 0.2942671134093681] ***
*** starting iteration: 3; err: [Inf, 0.37071955523061295, 0.30796515592408813, 0.2942671134093681] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37071955523061295, 0.30796515592408813, 0.2942671134093681, 0.291821718472859] ***
*** starting iteration: 4; err: [Inf, 0.37071955523061295, 0.30796515592408813, 0.2942671134093681, 0.291821718472859] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37071955523061295, 0.30796515592408813, 0.2942671134093681, 0.291821718472859, 0.2917578728001068] ***
*** finished computation of 3 references, err: [Inf, 0.37071955523061295, 0.30796515592408813, 0.2942671134093681, 0.291821718472859, 0.2917578728001068] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [235, 18, 0]]
** centroid: 1, normalized-entropy: 0.3701867269917943, [(1, 235), (2, 18)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 170, 24]]
** centroid: 2, normalized-entropy: 0.5399357331112666, [(2, 170), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [169, 51, 0]]
** centroid: 3, normalized-entropy: 0.7811673627417713, [(1, 169), (2, 51)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.44460282636027243] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44460282636027243, 0.2970121333353233] ***
*** starting iteration: 2; err: [Inf, 0.44460282636027243, 0.2970121333353233] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44460282636027243, 0.2970121333353233, 0.2963634855497902] ***
*** finished computation of 3 references, err: [Inf, 0.44460282636027243, 0.2970121333353233, 0.2963634855497902] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [240, 25, 0]]
** centroid: 1, normalized-entropy: 0.4507913883546652, [(1, 240), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [161, 49, 0]]
** centroid: 2, normalized-entropy: 0.7837769474847011, [(1, 161), (2, 49)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 166, 26]]
** centroid: 3, normalized-entropy: 0.572108447204188, [(2, 166), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3293741267480728] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3293741267480728, 0.24905330257758768] ***
*** starting iteration: 2; err: [Inf, 0.3293741267480728, 0.24905330257758768] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3293741267480728, 0.24905330257758768, 0.24061993005274385] ***
*** starting iteration: 3; err: [Inf, 0.3293741267480728, 0.24905330257758768, 0.24061993005274385] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3293741267480728, 0.24905330257758768, 0.24061993005274385, 0.2386977766016806] ***
*** finished computation of 3 references, err: [Inf, 0.3293741267480728, 0.24905330257758768, 0.24061993005274385, 0.2386977766016806] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [77, 152, 24]]
** centroid: 1, normalized-entropy: 0.8115570334601928, [(1, 77), (2, 152), (3, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [205, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [123, 85, 0]]
** centroid: 3, normalized-entropy: 0.975788209831327, [(1, 123), (2, 85)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3572366960776755] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3572366960776755, 0.23217154755864455] ***
*** starting iteration: 2; err: [Inf, 0.3572366960776755, 0.23217154755864455] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3572366960776755, 0.23217154755864455, 0.23094579483615585] ***
*** starting iteration: 3; err: [Inf, 0.3572366960776755, 0.23217154755864455, 0.23094579483615585] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3572366960776755, 0.23217154755864455, 0.23094579483615585, 0.2310263970126768] ***
*** finished computation of 3 references, err: [Inf, 0.3572366960776755, 0.23217154755864455, 0.23094579483615585, 0.2310263970126768] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [218, 23, 0]]
** centroid: 1, normalized-entropy: 0.45435776863377375, [(1, 218), (2, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [186, 43, 0]]
** centroid: 2, normalized-entropy: 0.6967892757900267, [(1, 186), (2, 43)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 173, 24]]
** centroid: 3, normalized-entropy: 0.5345909900225635, [(2, 173), (3, 24)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3205412310510427] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3205412310510427, 0.24876130777767216] ***
*** starting iteration: 2; err: [Inf, 0.3205412310510427, 0.24876130777767216] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3205412310510427, 0.24876130777767216, 0.23910801876978627] ***
*** starting iteration: 3; err: [Inf, 0.3205412310510427, 0.24876130777767216, 0.23910801876978627] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3205412310510427, 0.24876130777767216, 0.23910801876978627, 0.2367016730936191] ***
*** finished computation of 3 references, err: [Inf, 0.3205412310510427, 0.24876130777767216, 0.23910801876978627, 0.2367016730936191] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [95, 153, 26]]
** centroid: 1, normalized-entropy: 0.8338697717728595, [(1, 95), (2, 153), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [113, 87, 0]]
** centroid: 2, normalized-entropy: 0.9877746553159469, [(1, 113), (2, 87)]
*** center 3: selecting labels [1] (freq >= 2) [from [193, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3401586893224367] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3401586893224367, 0.2467176184679071] ***
*** starting iteration: 2; err: [Inf, 0.3401586893224367, 0.2467176184679071] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3401586893224367, 0.2467176184679071, 0.23981760328428614] ***
*** starting iteration: 3; err: [Inf, 0.3401586893224367, 0.2467176184679071, 0.23981760328428614] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3401586893224367, 0.2467176184679071, 0.23981760328428614, 0.23823904477663943] ***
*** finished computation of 3 references, err: [Inf, 0.3401586893224367, 0.2467176184679071, 0.23981760328428614, 0.23823904477663943] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [102, 130, 19]]
** centroid: 1, normalized-entropy: 0.8210925059283621, [(1, 102), (2, 130), (3, 19)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [115, 107, 5]]
** centroid: 2, normalized-entropy: 0.712779805607322, [(1, 115), (2, 107), (3, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [188, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35635397649290546] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35635397649290546, 0.245946089637981] ***
*** starting iteration: 2; err: [Inf, 0.35635397649290546, 0.245946089637981] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35635397649290546, 0.245946089637981, 0.24269287305083992] ***
*** starting iteration: 3; err: [Inf, 0.35635397649290546, 0.245946089637981, 0.24269287305083992] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35635397649290546, 0.245946089637981, 0.24269287305083992, 0.2418661989562068] ***
*** finished computation of 3 references, err: [Inf, 0.35635397649290546, 0.245946089637981, 0.24269287305083992, 0.2418661989562068] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [75, 172, 24]]
** centroid: 1, normalized-entropy: 0.7816645770592398, [(1, 75), (2, 172), (3, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [209, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [120, 67, 0]]
** centroid: 3, normalized-entropy: 0.9412535655898132, [(1, 120), (2, 67)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3522282262295038] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3522282262295038, 0.23974677938213948] ***
*** starting iteration: 2; err: [Inf, 0.3522282262295038, 0.23974677938213948] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3522282262295038, 0.23974677938213948, 0.23690678881875044] ***
*** starting iteration: 3; err: [Inf, 0.3522282262295038, 0.23974677938213948, 0.23690678881875044] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3522282262295038, 0.23974677938213948, 0.23690678881875044, 0.2359876583960058] ***
*** finished computation of 3 references, err: [Inf, 0.3522282262295038, 0.23974677938213948, 0.23690678881875044, 0.2359876583960058] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [71, 169, 26]]
** centroid: 1, normalized-entropy: 0.7901162358886491, [(1, 71), (2, 169), (3, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [213, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [117, 71, 0]]
** centroid: 3, normalized-entropy: 0.956372268294176, [(1, 117), (2, 71)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.20633286064263082] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20633286064263082, 0.15351949697095102] ***
*** starting iteration: 2; err: [Inf, 0.20633286064263082, 0.15351949697095102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20633286064263082, 0.15351949697095102, 0.1500116560462935] ***
*** starting iteration: 3; err: [Inf, 0.20633286064263082, 0.15351949697095102, 0.1500116560462935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20633286064263082, 0.15351949697095102, 0.1500116560462935, 0.14864295576259248] ***
*** finished computation of 7 references, err: [Inf, 0.20633286064263082, 0.15351949697095102, 0.1500116560462935, 0.14864295576259248] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [57, 10, 0]]
** centroid: 1, normalized-entropy: 0.6079696120060726, [(1, 57), (2, 10)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 56, 24]]
** centroid: 2, normalized-entropy: 0.8812908992306927, [(2, 56), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [101, 11, 0]]
** centroid: 3, normalized-entropy: 0.46330931881705484, [(1, 101), (2, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [124, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [95, 7, 0]]
** centroid: 5, normalized-entropy: 0.3607805650514635, [(1, 95), (2, 7)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 79, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [27, 76, 0]]
** centroid: 7, normalized-entropy: 0.829952434172285, [(1, 27), (2, 76)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19303139378533124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19303139378533124, 0.1636965909450576] ***
*** starting iteration: 2; err: [Inf, 0.19303139378533124, 0.1636965909450576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19303139378533124, 0.1636965909450576, 0.14640393001592902] ***
*** starting iteration: 3; err: [Inf, 0.19303139378533124, 0.1636965909450576, 0.14640393001592902] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19303139378533124, 0.1636965909450576, 0.14640393001592902, 0.1448175225112269] ***
*** finished computation of 7 references, err: [Inf, 0.19303139378533124, 0.1636965909450576, 0.14640393001592902, 0.1448175225112269] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 84, 26]]
** centroid: 2, normalized-entropy: 0.7889406572966208, [(2, 84), (3, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 43, 0]]
** centroid: 4, normalized-entropy: 0.9840304711717017, [(1, 58), (2, 43)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 57, 0]]
** centroid: 5, normalized-entropy: 0.9958873114590912, [(1, 49), (2, 57)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [14, 56, 0]]
** centroid: 7, normalized-entropy: 0.7219280948873623, [(1, 14), (2, 56)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29451433443268565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29451433443268565, 0.21636013848449778] ***
*** starting iteration: 2; err: [Inf, 0.29451433443268565, 0.21636013848449778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29451433443268565, 0.21636013848449778, 0.208613966404273] ***
*** starting iteration: 3; err: [Inf, 0.29451433443268565, 0.21636013848449778, 0.208613966404273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29451433443268565, 0.21636013848449778, 0.208613966404273, 0.20518833540335252] ***
*** finished computation of 7 references, err: [Inf, 0.29451433443268565, 0.21636013848449778, 0.208613966404273, 0.20518833540335252] ***
*** center 1: selecting labels [1] (freq >= 2) [from [28, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [89, 58, 0]]
** centroid: 2, normalized-entropy: 0.9676779701873266, [(1, 89), (2, 58)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [101, 3, 0]]
** centroid: 3, normalized-entropy: 0.18857195602479668, [(1, 101), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [38, 79, 0]]
** centroid: 4, normalized-entropy: 0.9095106630291536, [(1, 38), (2, 79)]
*** center 5: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 97, 24]]
** centroid: 6, normalized-entropy: 0.718609966948486, [(2, 97), (3, 24)]
*** center 7: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2851877706338312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2851877706338312, 0.23083007744076414] ***
*** starting iteration: 2; err: [Inf, 0.2851877706338312, 0.23083007744076414] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2851877706338312, 0.23083007744076414, 0.20175342036430713] ***
*** starting iteration: 3; err: [Inf, 0.2851877706338312, 0.23083007744076414, 0.20175342036430713] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2851877706338312, 0.23083007744076414, 0.20175342036430713, 0.19344046534733034] ***
*** finished computation of 7 references, err: [Inf, 0.2851877706338312, 0.23083007744076414, 0.20175342036430713, 0.19344046534733034] ***
*** center 1: selecting labels [1] (freq >= 2) [from [131, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 25, 0]]
** centroid: 2, normalized-entropy: 0.8566727035015875, [(1, 64), (2, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [122, 35, 0]]
** centroid: 3, normalized-entropy: 0.7654815082817802, [(1, 122), (2, 35)]
*** center 4: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 83, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 45, 24]]
** centroid: 6, normalized-entropy: 0.9321115676166747, [(2, 45), (3, 24)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 51, 0]]
** centroid: 7, normalized-entropy: 0.572580465623769, [(1, 8), (2, 51)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2945452539286558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2945452539286558, 0.23747117018028313] ***
*** starting iteration: 2; err: [Inf, 0.2945452539286558, 0.23747117018028313] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2945452539286558, 0.23747117018028313, 0.21316791608695057] ***
*** starting iteration: 3; err: [Inf, 0.2945452539286558, 0.23747117018028313, 0.21316791608695057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2945452539286558, 0.23747117018028313, 0.21316791608695057, 0.18986716339290644] ***
*** finished computation of 7 references, err: [Inf, 0.2945452539286558, 0.23747117018028313, 0.21316791608695057, 0.18986716339290644] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [94, 23, 0]]
** centroid: 1, normalized-entropy: 0.7150375653354627, [(1, 94), (2, 23)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 39, 26]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 39), (3, 26)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [94, 14, 0]]
** centroid: 4, normalized-entropy: 0.5564215672884282, [(1, 94), (2, 14)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 84, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [100, 5, 0]]
** centroid: 6, normalized-entropy: 0.2761954276479391, [(1, 100), (2, 5)]
*** center 7: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27419166451085125] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27419166451085125, 0.24547653586544968] ***
*** starting iteration: 2; err: [Inf, 0.27419166451085125, 0.24547653586544968] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27419166451085125, 0.24547653586544968, 0.23834655160229798] ***
*** starting iteration: 3; err: [Inf, 0.27419166451085125, 0.24547653586544968, 0.23834655160229798] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27419166451085125, 0.24547653586544968, 0.23834655160229798, 0.23711108460997207] ***
*** starting iteration: 4; err: [Inf, 0.27419166451085125, 0.24547653586544968, 0.23834655160229798, 0.23711108460997207] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27419166451085125, 0.24547653586544968, 0.23834655160229798, 0.23711108460997207, 0.2365465550277908] ***
*** finished computation of 3 references, err: [Inf, 0.27419166451085125, 0.24547653586544968, 0.23834655160229798, 0.23711108460997207, 0.2365465550277908] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [252, 12, 0]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(1, 252), (2, 12)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 173, 24]]
** centroid: 2, normalized-entropy: 0.5345909900225635, [(2, 173), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [153, 52, 0]]
** centroid: 3, normalized-entropy: 0.8170254396258728, [(1, 153), (2, 52)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35918764529450947] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35918764529450947, 0.24282478617442801] ***
*** starting iteration: 2; err: [Inf, 0.35918764529450947, 0.24282478617442801] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35918764529450947, 0.24282478617442801, 0.24115734538161146] ***
*** starting iteration: 3; err: [Inf, 0.35918764529450947, 0.24282478617442801, 0.24115734538161146] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35918764529450947, 0.24282478617442801, 0.24115734538161146, 0.24062121793421087] ***
*** finished computation of 3 references, err: [Inf, 0.35918764529450947, 0.24282478617442801, 0.24115734538161146, 0.24062121793421087] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [107, 108, 1]]
** centroid: 1, normalized-entropy: 0.654855085035968, [(1, 107), (2, 108), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [214, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [83, 131, 23]]
** centroid: 3, normalized-entropy: 0.8387999139806152, [(1, 83), (2, 131), (3, 23)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3753925149134923] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3753925149134923, 0.24405994261244962] ***
*** starting iteration: 2; err: [Inf, 0.3753925149134923, 0.24405994261244962] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3753925149134923, 0.24405994261244962, 0.23759345935847515] ***
*** starting iteration: 3; err: [Inf, 0.3753925149134923, 0.24405994261244962, 0.23759345935847515] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3753925149134923, 0.24405994261244962, 0.23759345935847515, 0.23609319997803382] ***
*** starting iteration: 4; err: [Inf, 0.3753925149134923, 0.24405994261244962, 0.23759345935847515, 0.23609319997803382] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3753925149134923, 0.24405994261244962, 0.23759345935847515, 0.23609319997803382, 0.23564887288720465] ***
*** finished computation of 3 references, err: [Inf, 0.3753925149134923, 0.24405994261244962, 0.23759345935847515, 0.23609319997803382, 0.23564887288720465] ***
*** center 1: selecting labels [1] (freq >= 1) [from [207, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [116, 94, 1]]
** centroid: 2, normalized-entropy: 0.6503503733852296, [(1, 116), (2, 94), (3, 1)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [78, 146, 25]]
** centroid: 3, normalized-entropy: 0.8259562664314513, [(1, 78), (2, 146), (3, 25)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27640564523584155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27640564523584155, 0.20177639022122723] ***
*** finished computation of 7 references, err: [Inf, 0.27640564523584155, 0.20177639022122723] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [52, 58, 0]]
** centroid: 1, normalized-entropy: 0.9978527766088781, [(1, 52), (2, 58)]
*** center 2: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [28, 102, 24]]
** centroid: 3, normalized-entropy: 0.7942041500748311, [(1, 28), (2, 102), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [119, 77, 0]]
** centroid: 4, normalized-entropy: 0.9666186325481027, [(1, 119), (2, 77)]
*** center 5: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23744241350555215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23744241350555215, 0.17288655300961173] ***
*** finished computation of 7 references, err: [Inf, 0.23744241350555215, 0.17288655300961173] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [35, 9, 0]]
** centroid: 1, normalized-entropy: 0.7309263775906009, [(1, 35), (2, 9)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 94, 24]]
** centroid: 2, normalized-entropy: 0.7286561673702678, [(2, 94), (3, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [148, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [68, 26, 0]]
** centroid: 4, normalized-entropy: 0.8507707040532602, [(1, 68), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [3, 26, 0]]
** centroid: 5, normalized-entropy: 0.47983202361612853, [(1, 3), (2, 26)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [99, 84, 0]]
** centroid: 6, normalized-entropy: 0.995148095654003, [(1, 99), (2, 84)]
*** center 7: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21672792547288863] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21672792547288863, 0.20665373151069102] ***
*** finished computation of 7 references, err: [Inf, 0.21672792547288863, 0.20665373151069102] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [53, 40, 0]]
** centroid: 1, normalized-entropy: 0.9858587262978805, [(1, 53), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 30, 0]]
** centroid: 2, normalized-entropy: 0.892338681064176, [(1, 67), (2, 30)]
*** center 3: selecting labels [1] (freq >= 2) [from [159, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [34, 35, 0]]
** centroid: 4, normalized-entropy: 0.9998484829291058, [(1, 34), (2, 35)]
*** center 5: selecting labels [1, 2, 3] (freq >= 2) [from [22, 135, 26]]
** centroid: 5, normalized-entropy: 0.688451365875682, [(1, 22), (2, 135), (3, 26)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.44959011162958434] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44959011162958434, 0.3232710137550772] ***
*** finished computation of 3 references, err: [Inf, 0.44959011162958434, 0.3232710137550772] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 122, 24]]
** centroid: 1, normalized-entropy: 0.644694043811662, [(2, 122), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [290, 86, 0]]
** centroid: 2, normalized-entropy: 0.7757792638885114, [(1, 290), (2, 86)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [115, 29, 0]]
** centroid: 3, normalized-entropy: 0.7246971909054879, [(1, 115), (2, 29)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3735186192255908] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3735186192255908, 0.32079129746934953] ***
*** finished computation of 3 references, err: [Inf, 0.3735186192255908, 0.32079129746934953] ***
*** center 1: selecting labels [1] (freq >= 2) [from [154, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [174, 75, 0]]
** centroid: 2, normalized-entropy: 0.8827586787955116, [(1, 174), (2, 75)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [76, 164, 24]]
** centroid: 3, normalized-entropy: 0.7939197671560798, [(1, 76), (2, 164), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.44352817479269707] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44352817479269707, 0.3316799406118613] ***
*** finished computation of 3 references, err: [Inf, 0.44352817479269707, 0.3316799406118613] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [250, 71, 0]]
** centroid: 1, normalized-entropy: 0.762323204722446, [(1, 250), (2, 71)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [29, 168, 26]]
** centroid: 2, normalized-entropy: 0.663745086606705, [(1, 29), (2, 168), (3, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [122, 1, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.26927492700450056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26927492700450056, 0.20500214901115107] ***
*** starting iteration: 2; err: [Inf, 0.26927492700450056, 0.20500214901115107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26927492700450056, 0.20500214901115107, 0.19582555212734923] ***
*** starting iteration: 3; err: [Inf, 0.26927492700450056, 0.20500214901115107, 0.19582555212734923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26927492700450056, 0.20500214901115107, 0.19582555212734923, 0.19238463944864567] ***
*** starting iteration: 4; err: [Inf, 0.26927492700450056, 0.20500214901115107, 0.19582555212734923, 0.19238463944864567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26927492700450056, 0.20500214901115107, 0.19582555212734923, 0.19238463944864567, 0.1889052164241638] ***
*** starting iteration: 5; err: [Inf, 0.26927492700450056, 0.20500214901115107, 0.19582555212734923, 0.19238463944864567, 0.1889052164241638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26927492700450056, 0.20500214901115107, 0.19582555212734923, 0.19238463944864567, 0.1889052164241638, 0.18719057640859257] ***
*** starting iteration: 6; err: [Inf, 0.26927492700450056, 0.20500214901115107, 0.19582555212734923, 0.19238463944864567, 0.1889052164241638, 0.18719057640859257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26927492700450056, 0.20500214901115107, 0.19582555212734923, 0.19238463944864567, 0.1889052164241638, 0.18719057640859257, 0.18559906279805252] ***
*** starting iteration: 7; err: [Inf, 0.26927492700450056, 0.20500214901115107, 0.19582555212734923, 0.19238463944864567, 0.1889052164241638, 0.18719057640859257, 0.18559906279805252] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26927492700450056, 0.20500214901115107, 0.19582555212734923, 0.19238463944864567, 0.1889052164241638, 0.18719057640859257, 0.18559906279805252, 0.18491140729398117] ***
*** finished computation of 7 references, err: [Inf, 0.26927492700450056, 0.20500214901115107, 0.19582555212734923, 0.19238463944864567, 0.1889052164241638, 0.18719057640859257, 0.18559906279805252, 0.18491140729398117] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [49, 48, 0]]
** centroid: 1, normalized-entropy: 0.9999233329473267, [(1, 49), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [80, 49, 0]]
** centroid: 2, normalized-entropy: 0.9579324495888805, [(1, 80), (2, 49)]
*** center 3: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [35, 56, 0]]
** centroid: 4, normalized-entropy: 0.961236604722876, [(1, 35), (2, 56)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 84, 24]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(2, 84), (3, 24)]
*** center 6: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.331181137131407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.331181137131407, 0.23388583805534927] ***
*** starting iteration: 2; err: [Inf, 0.331181137131407, 0.23388583805534927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.331181137131407, 0.23388583805534927, 0.20902085760426797] ***
*** starting iteration: 3; err: [Inf, 0.331181137131407, 0.23388583805534927, 0.20902085760426797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.331181137131407, 0.23388583805534927, 0.20902085760426797, 0.20314681277131436] ***
*** starting iteration: 4; err: [Inf, 0.331181137131407, 0.23388583805534927, 0.20902085760426797, 0.20314681277131436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.331181137131407, 0.23388583805534927, 0.20902085760426797, 0.20314681277131436, 0.20114734748202465] ***
*** starting iteration: 5; err: [Inf, 0.331181137131407, 0.23388583805534927, 0.20902085760426797, 0.20314681277131436, 0.20114734748202465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.331181137131407, 0.23388583805534927, 0.20902085760426797, 0.20314681277131436, 0.20114734748202465, 0.2003741180147233] ***
*** finished computation of 7 references, err: [Inf, 0.331181137131407, 0.23388583805534927, 0.20902085760426797, 0.20314681277131436, 0.20114734748202465, 0.2003741180147233] ***
*** center 1: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [78, 18, 0]]
** centroid: 2, normalized-entropy: 0.6962122601251459, [(1, 78), (2, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [89, 15, 0]]
** centroid: 3, normalized-entropy: 0.5952124653513116, [(1, 89), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [34, 41, 0]]
** centroid: 4, normalized-entropy: 0.9937071066045081, [(1, 34), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [32, 40, 0]]
** centroid: 5, normalized-entropy: 0.9910760598382222, [(1, 32), (2, 40)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 118, 24]]
** centroid: 6, normalized-entropy: 0.6554444445609846, [(2, 118), (3, 24)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [81, 7, 0]]
** centroid: 7, normalized-entropy: 0.40057554263664, [(1, 81), (2, 7)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28206681985145565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28206681985145565, 0.21818064483695257] ***
*** starting iteration: 2; err: [Inf, 0.28206681985145565, 0.21818064483695257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28206681985145565, 0.21818064483695257, 0.2110124129300722] ***
*** starting iteration: 3; err: [Inf, 0.28206681985145565, 0.21818064483695257, 0.2110124129300722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28206681985145565, 0.21818064483695257, 0.2110124129300722, 0.2052440202838254] ***
*** starting iteration: 4; err: [Inf, 0.28206681985145565, 0.21818064483695257, 0.2110124129300722, 0.2052440202838254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28206681985145565, 0.21818064483695257, 0.2110124129300722, 0.2052440202838254, 0.20123586095827653] ***
*** starting iteration: 5; err: [Inf, 0.28206681985145565, 0.21818064483695257, 0.2110124129300722, 0.2052440202838254, 0.20123586095827653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28206681985145565, 0.21818064483695257, 0.2110124129300722, 0.2052440202838254, 0.20123586095827653, 0.19911705289521944] ***
*** starting iteration: 6; err: [Inf, 0.28206681985145565, 0.21818064483695257, 0.2110124129300722, 0.2052440202838254, 0.20123586095827653, 0.19911705289521944] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28206681985145565, 0.21818064483695257, 0.2110124129300722, 0.2052440202838254, 0.20123586095827653, 0.19911705289521944, 0.19877197674993632] ***
*** finished computation of 7 references, err: [Inf, 0.28206681985145565, 0.21818064483695257, 0.2110124129300722, 0.2052440202838254, 0.20123586095827653, 0.19911705289521944, 0.19877197674993632] ***
*** center 1: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [21, 34, 0]]
** centroid: 2, normalized-entropy: 0.9593160320543779, [(1, 21), (2, 34)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [101, 55, 0]]
** centroid: 3, normalized-entropy: 0.9363371932097642, [(1, 101), (2, 55)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 84, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [87, 9, 0]]
** centroid: 5, normalized-entropy: 0.44886448872302936, [(1, 87), (2, 9)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 58, 26]]
** centroid: 6, normalized-entropy: 0.8926230133850988, [(2, 58), (3, 26)]
*** center 7: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9199858541175906, 0.9179958401515288, 0.9179898461335587, 0.9070327812842782, 0.9050187912463361, 0.882987778197359, 0.8739937542332753, 0.8460406514298731, 0.8370166573759388, 0.7789735843628058, 0.7608626590662518]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 2) => 0.9199858541175906
finished with 11
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9199858541175906, 0.9179958401515288, 0.9179898461335587, 0.9070327812842782, 0.9050187912463361, 0.882987778197359, 0.8739937542332753, 0.8460406514298731, 0.8370166573759388, 0.7789735843628058, 0.7608626590662518]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 2) => 0.9199858541175906
finished with 12
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.2600169879567527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2600169879567527, 0.20340859160308275] ***
*** finished computation of 7 references, err: [Inf, 0.2600169879567527, 0.20340859160308275] ***
*** center 1: selecting labels [1] (freq >= 2) [from [143, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [10, 60, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 10), (2, 60)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [93, 63, 0]]
** centroid: 3, normalized-entropy: 0.9731560354421095, [(1, 93), (2, 63)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 9, 0]]
** centroid: 4, normalized-entropy: 0.5746356978376794, [(1, 57), (2, 9)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 42, 24]]
** centroid: 6, normalized-entropy: 0.9456603046006401, [(2, 42), (3, 24)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [102, 3, 0]]
** centroid: 7, normalized-entropy: 0.18717625687320805, [(1, 102), (2, 3)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.37839319720735837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37839319720735837, 0.24455087221642283] ***
*** finished computation of 7 references, err: [Inf, 0.37839319720735837, 0.24455087221642283] ***
*** center 1: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [1, 72, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 48, 24]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 48), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [239, 4, 0]]
** centroid: 4, normalized-entropy: 0.12107930563294596, [(1, 239), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 102, 0]]
** centroid: 5, normalized-entropy: 0.9538670347683255, [(1, 61), (2, 102)]
*** center 6: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [35, 13, 0]]
** centroid: 7, normalized-entropy: 0.842657877202239, [(1, 35), (2, 13)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29349398317801273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29349398317801273, 0.22327347849377024] ***
*** finished computation of 7 references, err: [Inf, 0.29349398317801273, 0.22327347849377024] ***
*** center 1: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [18, 90, 0]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(1, 18), (2, 90)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [155, 36, 0]]
** centroid: 3, normalized-entropy: 0.6982844151067954, [(1, 155), (2, 36)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 97, 26]]
** centroid: 4, normalized-entropy: 0.7441163072594041, [(2, 97), (3, 26)]
*** center 5: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [36, 15, 0]]
** centroid: 6, normalized-entropy: 0.8739810481273581, [(1, 36), (2, 15)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [22, 2, 0]]
** centroid: 7, normalized-entropy: 0.4138168503036336, [(1, 22), (2, 2)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9199858541175906, 0.9189878501255747, 0.9179958401515288, 0.9179898461335587, 0.9070327812842782, 0.9050187912463361, 0.882987778197359, 0.8739937542332753, 0.8460406514298731, 0.8370166573759388, 0.7789735843628058, 0.7608626590662518]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 2) => 0.9199858541175906
finished with 13
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.27129093834196216] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27129093834196216, 0.24554313950844714] ***
*** finished computation of 3 references, err: [Inf, 0.27129093834196216, 0.24554313950844714] ***
*** center 1: selecting labels [1] (freq >= 2) [from [233, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [142, 28, 0]]
** centroid: 2, normalized-entropy: 0.6454495903301855, [(1, 142), (2, 28)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [30, 209, 24]]
** centroid: 3, normalized-entropy: 0.5905114284352397, [(1, 30), (2, 209), (3, 24)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2682242430146152] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2682242430146152, 0.2394292220275017] ***
*** finished computation of 3 references, err: [Inf, 0.2682242430146152, 0.2394292220275017] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [230, 40, 0]]
** centroid: 1, normalized-entropy: 0.6051865766334207, [(1, 230), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [167, 9, 0]]
** centroid: 2, normalized-entropy: 0.29120467627282276, [(1, 167), (2, 9)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [7, 190, 24]]
** centroid: 3, normalized-entropy: 0.43726376900156094, [(1, 7), (2, 190), (3, 24)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2857415241481125] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2857415241481125, 0.23980599899833527] ***
*** finished computation of 3 references, err: [Inf, 0.2857415241481125, 0.23980599899833527] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [109, 176, 26]]
** centroid: 1, normalized-entropy: 0.8165899030393449, [(1, 109), (2, 176), (3, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [189, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [103, 64, 0]]
** centroid: 3, normalized-entropy: 0.9602937876844025, [(1, 103), (2, 64)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 13)
[0.9199858541175906, 0.9189878501255747, 0.9179958401515288, 0.9179898461335587, 0.9070327812842782, 0.9050187912463361, 0.882987778197359, 0.8790017562472653, 0.8739937542332753, 0.8460406514298731, 0.8370166573759388, 0.7789735843628058, 0.7608626590662518]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 2) => 0.9199858541175906
finished with 14
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.18598392080269507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18598392080269507, 0.15706855099083292] ***
*** starting iteration: 2; err: [Inf, 0.18598392080269507, 0.15706855099083292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18598392080269507, 0.15706855099083292, 0.15165672247233736] ***
*** starting iteration: 3; err: [Inf, 0.18598392080269507, 0.15706855099083292, 0.15165672247233736] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18598392080269507, 0.15706855099083292, 0.15165672247233736, 0.14970631587008634] ***
*** starting iteration: 4; err: [Inf, 0.18598392080269507, 0.15706855099083292, 0.15165672247233736, 0.14970631587008634] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18598392080269507, 0.15706855099083292, 0.15165672247233736, 0.14970631587008634, 0.14842962901081397] ***
*** starting iteration: 5; err: [Inf, 0.18598392080269507, 0.15706855099083292, 0.15165672247233736, 0.14970631587008634, 0.14842962901081397] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18598392080269507, 0.15706855099083292, 0.15165672247233736, 0.14970631587008634, 0.14842962901081397, 0.14743753962355802] ***
*** finished computation of 7 references, err: [Inf, 0.18598392080269507, 0.15706855099083292, 0.15165672247233736, 0.14970631587008634, 0.14842962901081397, 0.14743753962355802] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [120, 23, 0]]
** centroid: 1, normalized-entropy: 0.6363133195592738, [(1, 120), (2, 23)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [67, 31, 0]]
** centroid: 3, normalized-entropy: 0.9003418708227195, [(1, 67), (2, 31)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [34, 60, 0]]
** centroid: 4, normalized-entropy: 0.9440870182837795, [(1, 34), (2, 60)]
*** center 5: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 48, 24]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 48), (3, 24)]
*** center 7: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3082376665874165] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3082376665874165, 0.17502435917178563] ***
*** starting iteration: 2; err: [Inf, 0.3082376665874165, 0.17502435917178563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3082376665874165, 0.17502435917178563, 0.16809049111440488] ***
*** starting iteration: 3; err: [Inf, 0.3082376665874165, 0.17502435917178563, 0.16809049111440488] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3082376665874165, 0.17502435917178563, 0.16809049111440488, 0.16411500689371125] ***
*** starting iteration: 4; err: [Inf, 0.3082376665874165, 0.17502435917178563, 0.16809049111440488, 0.16411500689371125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3082376665874165, 0.17502435917178563, 0.16809049111440488, 0.16411500689371125, 0.15999768194679667] ***
*** starting iteration: 5; err: [Inf, 0.3082376665874165, 0.17502435917178563, 0.16809049111440488, 0.16411500689371125, 0.15999768194679667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3082376665874165, 0.17502435917178563, 0.16809049111440488, 0.16411500689371125, 0.15999768194679667, 0.15534190223740785] ***
*** starting iteration: 6; err: [Inf, 0.3082376665874165, 0.17502435917178563, 0.16809049111440488, 0.16411500689371125, 0.15999768194679667, 0.15534190223740785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3082376665874165, 0.17502435917178563, 0.16809049111440488, 0.16411500689371125, 0.15999768194679667, 0.15534190223740785, 0.15246080182565339] ***
*** starting iteration: 7; err: [Inf, 0.3082376665874165, 0.17502435917178563, 0.16809049111440488, 0.16411500689371125, 0.15999768194679667, 0.15534190223740785, 0.15246080182565339] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3082376665874165, 0.17502435917178563, 0.16809049111440488, 0.16411500689371125, 0.15999768194679667, 0.15534190223740785, 0.15246080182565339, 0.1507537876625128] ***
*** starting iteration: 8; err: [Inf, 0.3082376665874165, 0.17502435917178563, 0.16809049111440488, 0.16411500689371125, 0.15999768194679667, 0.15534190223740785, 0.15246080182565339, 0.1507537876625128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3082376665874165, 0.17502435917178563, 0.16809049111440488, 0.16411500689371125, 0.15999768194679667, 0.15534190223740785, 0.15246080182565339, 0.1507537876625128, 0.1497076267370957] ***
*** starting iteration: 9; err: [Inf, 0.3082376665874165, 0.17502435917178563, 0.16809049111440488, 0.16411500689371125, 0.15999768194679667, 0.15534190223740785, 0.15246080182565339, 0.1507537876625128, 0.1497076267370957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3082376665874165, 0.17502435917178563, 0.16809049111440488, 0.16411500689371125, 0.15999768194679667, 0.15534190223740785, 0.15246080182565339, 0.1507537876625128, 0.1497076267370957, 0.14885479061287651] ***
*** finished computation of 7 references, err: [Inf, 0.3082376665874165, 0.17502435917178563, 0.16809049111440488, 0.16411500689371125, 0.15999768194679667, 0.15534190223740785, 0.15246080182565339, 0.1507537876625128, 0.1497076267370957, 0.14885479061287651] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [52, 49, 0]]
** centroid: 1, normalized-entropy: 0.999363485672765, [(1, 52), (2, 49)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 6, 0]]
** centroid: 2, normalized-entropy: 0.4138168503036336, [(1, 66), (2, 6)]
*** center 3: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 72, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 81, 24]]
** centroid: 5, normalized-entropy: 0.775512658133148, [(2, 81), (3, 24)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [102, 31, 0]]
** centroid: 6, normalized-entropy: 0.7833465670569363, [(1, 102), (2, 31)]
*** center 7: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24160710288451864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24160710288451864, 0.17757989477988953] ***
*** starting iteration: 2; err: [Inf, 0.24160710288451864, 0.17757989477988953] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24160710288451864, 0.17757989477988953, 0.16872058057828737] ***
*** starting iteration: 3; err: [Inf, 0.24160710288451864, 0.17757989477988953, 0.16872058057828737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24160710288451864, 0.17757989477988953, 0.16872058057828737, 0.16418496457611334] ***
*** starting iteration: 4; err: [Inf, 0.24160710288451864, 0.17757989477988953, 0.16872058057828737, 0.16418496457611334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24160710288451864, 0.17757989477988953, 0.16872058057828737, 0.16418496457611334, 0.16170985842992117] ***
*** starting iteration: 5; err: [Inf, 0.24160710288451864, 0.17757989477988953, 0.16872058057828737, 0.16418496457611334, 0.16170985842992117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24160710288451864, 0.17757989477988953, 0.16872058057828737, 0.16418496457611334, 0.16170985842992117, 0.15967115036713175] ***
*** starting iteration: 6; err: [Inf, 0.24160710288451864, 0.17757989477988953, 0.16872058057828737, 0.16418496457611334, 0.16170985842992117, 0.15967115036713175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24160710288451864, 0.17757989477988953, 0.16872058057828737, 0.16418496457611334, 0.16170985842992117, 0.15967115036713175, 0.15787127207981413] ***
*** starting iteration: 7; err: [Inf, 0.24160710288451864, 0.17757989477988953, 0.16872058057828737, 0.16418496457611334, 0.16170985842992117, 0.15967115036713175, 0.15787127207981413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24160710288451864, 0.17757989477988953, 0.16872058057828737, 0.16418496457611334, 0.16170985842992117, 0.15967115036713175, 0.15787127207981413, 0.1562844375923354] ***
*** starting iteration: 8; err: [Inf, 0.24160710288451864, 0.17757989477988953, 0.16872058057828737, 0.16418496457611334, 0.16170985842992117, 0.15967115036713175, 0.15787127207981413, 0.1562844375923354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24160710288451864, 0.17757989477988953, 0.16872058057828737, 0.16418496457611334, 0.16170985842992117, 0.15967115036713175, 0.15787127207981413, 0.1562844375923354, 0.15456979743531743] ***
*** starting iteration: 9; err: [Inf, 0.24160710288451864, 0.17757989477988953, 0.16872058057828737, 0.16418496457611334, 0.16170985842992117, 0.15967115036713175, 0.15787127207981413, 0.1562844375923354, 0.15456979743531743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24160710288451864, 0.17757989477988953, 0.16872058057828737, 0.16418496457611334, 0.16170985842992117, 0.15967115036713175, 0.15787127207981413, 0.1562844375923354, 0.15456979743531743, 0.15333312991629544] ***
*** starting iteration: 10; err: [Inf, 0.24160710288451864, 0.17757989477988953, 0.16872058057828737, 0.16418496457611334, 0.16170985842992117, 0.15967115036713175, 0.15787127207981413, 0.1562844375923354, 0.15456979743531743, 0.15333312991629544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24160710288451864, 0.17757989477988953, 0.16872058057828737, 0.16418496457611334, 0.16170985842992117, 0.15967115036713175, 0.15787127207981413, 0.1562844375923354, 0.15456979743531743, 0.15333312991629544, 0.15183576063470805] ***
*** finished computation of 7 references, err: [Inf, 0.24160710288451864, 0.17757989477988953, 0.16872058057828737, 0.16418496457611334, 0.16170985842992117, 0.15967115036713175, 0.15787127207981413, 0.1562844375923354, 0.15456979743531743, 0.15333312991629544, 0.15183576063470805] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 59, 6]]
** centroid: 1, normalized-entropy: 0.4441260450795996, [(2, 59), (3, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [113, 6, 0]]
** centroid: 2, normalized-entropy: 0.28817912669245493, [(1, 113), (2, 6)]
*** center 3: selecting labels [1] (freq >= 1) [from [145, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [86, 1, 0]]
** centroid: 4, normalized-entropy: 0.09054385326964301, [(1, 86), (2, 1)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 36, 20]]
** centroid: 5, normalized-entropy: 0.940285958670631, [(2, 36), (3, 20)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [16, 81, 0]]
** centroid: 6, normalized-entropy: 0.6460174789535751, [(1, 16), (2, 81)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [41, 57, 0]]
** centroid: 7, normalized-entropy: 0.9806857319036603, [(1, 41), (2, 57)]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9199858541175906, 0.9189878501255747, 0.9179958401515288, 0.9179898461335587, 0.9159908411405416, 0.9070327812842782, 0.9050187912463361, 0.882987778197359, 0.8790017562472653, 0.8739937542332753, 0.8460406514298731, 0.8370166573759388, 0.7789735843628058, 0.7608626590662518]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 2) => 0.9199858541175906
finished with 14
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9199858541175906, 0.9189878501255747, 0.9179958401515288, 0.9179898461335587, 0.9159908411405416, 0.9070327812842782, 0.9050187912463361, 0.882987778197359, 0.8790017562472653, 0.8739937542332753, 0.8460406514298731, 0.8370166573759388, 0.7789735843628058, 0.7608626590662518]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 2) => 0.9199858541175906
finished with 15
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.41163106785678827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41163106785678827, 0.29873545854750955] ***
*** starting iteration: 2; err: [Inf, 0.41163106785678827, 0.29873545854750955] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41163106785678827, 0.29873545854750955, 0.2940863360106867] ***
*** starting iteration: 3; err: [Inf, 0.41163106785678827, 0.29873545854750955, 0.2940863360106867] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41163106785678827, 0.29873545854750955, 0.2940863360106867, 0.292756003211602] ***
*** finished computation of 3 references, err: [Inf, 0.41163106785678827, 0.29873545854750955, 0.2940863360106867, 0.292756003211602] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [62, 162, 24]]
** centroid: 1, normalized-entropy: 0.7743790445557164, [(1, 62), (2, 162), (3, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [214, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [129, 75, 0]]
** centroid: 3, normalized-entropy: 0.9488482942421287, [(1, 129), (2, 75)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4649615692424363] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4649615692424363, 0.30331806673052564] ***
*** starting iteration: 2; err: [Inf, 0.4649615692424363, 0.30331806673052564] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4649615692424363, 0.30331806673052564, 0.30062665425190727] ***
*** starting iteration: 3; err: [Inf, 0.4649615692424363, 0.30331806673052564, 0.30062665425190727] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4649615692424363, 0.30331806673052564, 0.30062665425190727, 0.2997686578466304] ***
*** finished computation of 3 references, err: [Inf, 0.4649615692424363, 0.30331806673052564, 0.30062665425190727, 0.2997686578466304] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [87, 139, 24]]
** centroid: 1, normalized-entropy: 0.8362042073551862, [(1, 87), (2, 139), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [117, 100, 0]]
** centroid: 2, normalized-entropy: 0.9955683238328166, [(1, 117), (2, 100)]
*** center 3: selecting labels [1] (freq >= 2) [from [200, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.42061546866291916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42061546866291916, 0.30809538709795636] ***
*** starting iteration: 2; err: [Inf, 0.42061546866291916, 0.30809538709795636] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42061546866291916, 0.30809538709795636, 0.3007182549473004] ***
*** starting iteration: 3; err: [Inf, 0.42061546866291916, 0.30809538709795636, 0.3007182549473004] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42061546866291916, 0.30809538709795636, 0.3007182549473004, 0.29867695001787553] ***
*** finished computation of 3 references, err: [Inf, 0.42061546866291916, 0.30809538709795636, 0.3007182549473004, 0.29867695001787553] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [81, 178, 26]]
** centroid: 1, normalized-entropy: 0.7918795517460016, [(1, 81), (2, 178), (3, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [213, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [107, 62, 0]]
** centroid: 3, normalized-entropy: 0.9482336446318352, [(1, 107), (2, 62)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 15)
[0.9199858541175906, 0.9189878501255747, 0.9179958401515288, 0.9179898461335587, 0.9159908411405416, 0.9070327812842782, 0.9050187912463361, 0.903004801208394, 0.882987778197359, 0.8790017562472653, 0.8739937542332753, 0.8460406514298731, 0.8370166573759388, 0.7789735843628058, 0.7608626590662518]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 2) => 0.9199858541175906
finished with 15
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9199858541175906, 0.9189878501255747, 0.9179958401515288, 0.9179898461335587, 0.9159908411405416, 0.9070327812842782, 0.9050187912463361, 0.903004801208394, 0.882987778197359, 0.8790017562472653, 0.8739937542332753, 0.8460406514298731, 0.8370166573759388, 0.7789735843628058, 0.7608626590662518]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 2) => 0.9199858541175906
finished with 16
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.33886068665167995] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33886068665167995, 0.2326851935753761] ***
*** starting iteration: 2; err: [Inf, 0.33886068665167995, 0.2326851935753761] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33886068665167995, 0.2326851935753761, 0.2308509838893204] ***
*** starting iteration: 3; err: [Inf, 0.33886068665167995, 0.2326851935753761, 0.2308509838893204] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33886068665167995, 0.2326851935753761, 0.2308509838893204, 0.2306105233155549] ***
*** finished computation of 3 references, err: [Inf, 0.33886068665167995, 0.2326851935753761, 0.2308509838893204, 0.2306105233155549] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [236, 12, 0]]
** centroid: 1, normalized-entropy: 0.2795055456366802, [(1, 236), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [169, 55, 0]]
** centroid: 2, normalized-entropy: 0.8041254177024907, [(1, 169), (2, 55)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 170, 24]]
** centroid: 3, normalized-entropy: 0.5399357331112666, [(2, 170), (3, 24)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3389890727557722] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3389890727557722, 0.2476038233819662] ***
*** starting iteration: 2; err: [Inf, 0.3389890727557722, 0.2476038233819662] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3389890727557722, 0.2476038233819662, 0.243083033451009] ***
*** starting iteration: 3; err: [Inf, 0.3389890727557722, 0.2476038233819662, 0.243083033451009] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3389890727557722, 0.2476038233819662, 0.243083033451009, 0.2419192940527308] ***
*** starting iteration: 4; err: [Inf, 0.3389890727557722, 0.2476038233819662, 0.243083033451009, 0.2419192940527308] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3389890727557722, 0.2476038233819662, 0.243083033451009, 0.2419192940527308, 0.2416232024491213] ***
*** finished computation of 3 references, err: [Inf, 0.3389890727557722, 0.2476038233819662, 0.243083033451009, 0.2419192940527308, 0.2416232024491213] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [70, 171, 24]]
** centroid: 1, normalized-entropy: 0.7753726075175607, [(1, 70), (2, 171), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [209, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [125, 68, 0]]
** centroid: 3, normalized-entropy: 0.9361331575386298, [(1, 125), (2, 68)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34526832551992814] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34526832551992814, 0.23594246825099974] ***
*** starting iteration: 2; err: [Inf, 0.34526832551992814, 0.23594246825099974] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34526832551992814, 0.23594246825099974, 0.2341637622901536] ***
*** starting iteration: 3; err: [Inf, 0.34526832551992814, 0.23594246825099974, 0.2341637622901536] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34526832551992814, 0.23594246825099974, 0.2341637622901536, 0.23378997380430552] ***
*** finished computation of 3 references, err: [Inf, 0.34526832551992814, 0.23594246825099974, 0.2341637622901536, 0.23378997380430552] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [58, 166, 26]]
** centroid: 1, normalized-entropy: 0.7702773915067191, [(1, 58), (2, 166), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [216, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [127, 74, 0]]
** centroid: 3, normalized-entropy: 0.9492481873152105, [(1, 127), (2, 74)]
finished with 6 centroids; started with 3
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.20771325033064933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20771325033064933, 0.16396688941121101] ***
*** starting iteration: 2; err: [Inf, 0.20771325033064933, 0.16396688941121101] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20771325033064933, 0.16396688941121101, 0.15558064665691926] ***
*** starting iteration: 3; err: [Inf, 0.20771325033064933, 0.16396688941121101, 0.15558064665691926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20771325033064933, 0.16396688941121101, 0.15558064665691926, 0.15095126989413984] ***
*** finished computation of 7 references, err: [Inf, 0.20771325033064933, 0.16396688941121101, 0.15558064665691926, 0.15095126989413984] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [166, 13, 0]]
** centroid: 1, normalized-entropy: 0.37564671615015766, [(1, 166), (2, 13)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 109, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 42, 37]]
** centroid: 3, normalized-entropy: 0.9971085167216716, [(2, 42), (3, 37)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [155, 22, 0]]
** centroid: 4, normalized-entropy: 0.541578553317306, [(1, 155), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 62, 0]]
** centroid: 5, normalized-entropy: 0.995978956518722, [(1, 72), (2, 62)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 110, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [212, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23748095185868442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23748095185868442, 0.16803158632665874] ***
*** starting iteration: 2; err: [Inf, 0.23748095185868442, 0.16803158632665874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23748095185868442, 0.16803158632665874, 0.15486285492032767] ***
*** starting iteration: 3; err: [Inf, 0.23748095185868442, 0.16803158632665874, 0.15486285492032767] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23748095185868442, 0.16803158632665874, 0.15486285492032767, 0.15045216916874052] ***
*** finished computation of 7 references, err: [Inf, 0.23748095185868442, 0.16803158632665874, 0.15486285492032767, 0.15045216916874052] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [9, 38, 0]]
** centroid: 1, normalized-entropy: 0.7045767128725937, [(1, 9), (2, 38)]
*** center 2: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [67, 5, 0]]
** centroid: 3, normalized-entropy: 0.3638469981769295, [(1, 67), (2, 5)]
*** center 4: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 34, 0]]
** centroid: 5, normalized-entropy: 0.9998393017810486, [(1, 33), (2, 34)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 60, 24]]
** centroid: 6, normalized-entropy: 0.8631205685666311, [(2, 60), (3, 24)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [43, 38, 0]]
** centroid: 7, normalized-entropy: 0.9972496329704711, [(1, 43), (2, 38)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21541737404838204] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21541737404838204, 0.17352249305043368] ***
*** starting iteration: 2; err: [Inf, 0.21541737404838204, 0.17352249305043368] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21541737404838204, 0.17352249305043368, 0.167458279681392] ***
*** starting iteration: 3; err: [Inf, 0.21541737404838204, 0.17352249305043368, 0.167458279681392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21541737404838204, 0.17352249305043368, 0.167458279681392, 0.1640816916488111] ***
*** finished computation of 7 references, err: [Inf, 0.21541737404838204, 0.17352249305043368, 0.167458279681392, 0.1640816916488111] ***
*** center 1: selecting labels [1] (freq >= 2) [from [27, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [31, 52, 0]]
** centroid: 2, normalized-entropy: 0.9533171305598173, [(1, 31), (2, 52)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 3, 0]]
** centroid: 3, normalized-entropy: 0.24988229283318547, [(1, 69), (2, 3)]
*** center 4: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 87, 22]]
** centroid: 5, normalized-entropy: 0.725582675704817, [(2, 87), (3, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [86, 33, 0]]
** centroid: 7, normalized-entropy: 0.8517608318524026, [(1, 86), (2, 33)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26619096905505285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26619096905505285, 0.1892285063471645] ***
*** starting iteration: 2; err: [Inf, 0.26619096905505285, 0.1892285063471645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26619096905505285, 0.1892285063471645, 0.16453211545571686] ***
*** starting iteration: 3; err: [Inf, 0.26619096905505285, 0.1892285063471645, 0.16453211545571686] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26619096905505285, 0.1892285063471645, 0.16453211545571686, 0.15619428578391673] ***
*** finished computation of 7 references, err: [Inf, 0.26619096905505285, 0.1892285063471645, 0.16453211545571686, 0.15619428578391673] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [42, 10, 0]]
** centroid: 1, normalized-entropy: 0.7062740891876008, [(1, 42), (2, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [23, 54, 0]]
** centroid: 4, normalized-entropy: 0.8796975782775168, [(1, 23), (2, 54)]
*** center 5: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 70, 17]]
** centroid: 6, normalized-entropy: 0.7126368350739763, [(2, 70), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [23, 47, 0]]
** centroid: 7, normalized-entropy: 0.9134601452569628, [(1, 23), (2, 47)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19524375868961216] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19524375868961216, 0.1604176908051595] ***
*** starting iteration: 2; err: [Inf, 0.19524375868961216, 0.1604176908051595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19524375868961216, 0.1604176908051595, 0.15145140052679926] ***
*** starting iteration: 3; err: [Inf, 0.19524375868961216, 0.1604176908051595, 0.15145140052679926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19524375868961216, 0.1604176908051595, 0.15145140052679926, 0.14939047220069915] ***
*** finished computation of 7 references, err: [Inf, 0.19524375868961216, 0.1604176908051595, 0.15145140052679926, 0.14939047220069915] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 41, 25]]
** centroid: 1, normalized-entropy: 0.9571814385446724, [(2, 41), (3, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 53, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [5, 59, 0]]
** centroid: 4, normalized-entropy: 0.3955378064564774, [(1, 5), (2, 59)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 3, 0]]
** centroid: 5, normalized-entropy: 0.269828447703074, [(1, 62), (2, 3)]
*** center 6: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [48, 24, 0]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(1, 48), (2, 24)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2478368681045249] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2478368681045249, 0.169629652521573] ***
*** starting iteration: 2; err: [Inf, 0.2478368681045249, 0.169629652521573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2478368681045249, 0.169629652521573, 0.16176232776790858] ***
*** starting iteration: 3; err: [Inf, 0.2478368681045249, 0.169629652521573, 0.16176232776790858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2478368681045249, 0.169629652521573, 0.16176232776790858, 0.15703436719626188] ***
*** finished computation of 7 references, err: [Inf, 0.2478368681045249, 0.169629652521573, 0.16176232776790858, 0.15703436719626188] ***
*** center 1: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [89, 6, 0]]
** centroid: 3, normalized-entropy: 0.3398550782221443, [(1, 89), (2, 6)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 49, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [89, 20, 0]]
** centroid: 5, normalized-entropy: 0.6876445334580582, [(1, 89), (2, 20)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 16, 22]]
** centroid: 6, normalized-entropy: 0.9819407868640977, [(2, 16), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [56, 21, 0]]
** centroid: 7, normalized-entropy: 0.8453509366224364, [(1, 56), (2, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19719511438906193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19719511438906193, 0.15962360533326864] ***
*** starting iteration: 2; err: [Inf, 0.19719511438906193, 0.15962360533326864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19719511438906193, 0.15962360533326864, 0.15165822789631783] ***
*** starting iteration: 3; err: [Inf, 0.19719511438906193, 0.15962360533326864, 0.15165822789631783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19719511438906193, 0.15962360533326864, 0.15165822789631783, 0.14697223373502494] ***
*** finished computation of 7 references, err: [Inf, 0.19719511438906193, 0.15962360533326864, 0.15165822789631783, 0.14697223373502494] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [58, 18, 0]]
** centroid: 1, normalized-entropy: 0.7897492536625221, [(1, 58), (2, 18)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 76, 8]]
** centroid: 2, normalized-entropy: 0.45371633918694493, [(2, 76), (3, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 61, 8]]
** centroid: 4, normalized-entropy: 0.5175827525559071, [(2, 61), (3, 8)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [76, 13, 0]]
** centroid: 5, normalized-entropy: 0.5999108763872215, [(1, 76), (2, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [51, 19, 0]]
** centroid: 7, normalized-entropy: 0.8435070855739035, [(1, 51), (2, 19)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20563583471626043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20563583471626043, 0.1708469869159162] ***
*** starting iteration: 2; err: [Inf, 0.20563583471626043, 0.1708469869159162] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20563583471626043, 0.1708469869159162, 0.1585811596594285] ***
*** starting iteration: 3; err: [Inf, 0.20563583471626043, 0.1708469869159162, 0.1585811596594285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20563583471626043, 0.1708469869159162, 0.1585811596594285, 0.15060907837329432] ***
*** finished computation of 7 references, err: [Inf, 0.20563583471626043, 0.1708469869159162, 0.1585811596594285, 0.15060907837329432] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [80, 42, 0]]
** centroid: 1, normalized-entropy: 0.9288391461883213, [(1, 80), (2, 42)]
*** center 2: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [35, 38, 0]]
** centroid: 3, normalized-entropy: 0.998781393072756, [(1, 35), (2, 38)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [3, 37, 0]]
** centroid: 4, normalized-entropy: 0.3843115441264972, [(1, 3), (2, 37)]
*** center 5: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 72, 16]]
** centroid: 6, normalized-entropy: 0.6840384356390419, [(2, 72), (3, 16)]
*** center 7: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25730632939655335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25730632939655335, 0.1800882872492075] ***
*** starting iteration: 2; err: [Inf, 0.25730632939655335, 0.1800882872492075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25730632939655335, 0.1800882872492075, 0.1607891287257662] ***
*** starting iteration: 3; err: [Inf, 0.25730632939655335, 0.1800882872492075, 0.1607891287257662] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25730632939655335, 0.1800882872492075, 0.1607891287257662, 0.1506684418078512] ***
*** finished computation of 7 references, err: [Inf, 0.25730632939655335, 0.1800882872492075, 0.1607891287257662, 0.1506684418078512] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 57, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 21, 0]]
** centroid: 3, normalized-entropy: 0.912999213585247, [(1, 43), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [82, 15, 0]]
** centroid: 4, normalized-entropy: 0.6213290966942344, [(1, 82), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 12, 0]]
** centroid: 5, normalized-entropy: 0.5830194167347007, [(1, 74), (2, 12)]
*** center 6: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 11, 19]]
** centroid: 7, normalized-entropy: 0.9480782435939054, [(2, 11), (3, 19)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19972111674118787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19972111674118787, 0.16474685263819994] ***
*** starting iteration: 2; err: [Inf, 0.19972111674118787, 0.16474685263819994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19972111674118787, 0.16474685263819994, 0.1573595339115709] ***
*** starting iteration: 3; err: [Inf, 0.19972111674118787, 0.16474685263819994, 0.1573595339115709] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19972111674118787, 0.16474685263819994, 0.1573595339115709, 0.1523332796357572] ***
*** finished computation of 7 references, err: [Inf, 0.19972111674118787, 0.16474685263819994, 0.1573595339115709, 0.1523332796357572] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [41, 44, 0]]
** centroid: 1, normalized-entropy: 0.999101248968496, [(1, 41), (2, 44)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [37, 31, 0]]
** centroid: 3, normalized-entropy: 0.9943766625699823, [(1, 37), (2, 31)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [45, 22, 0]]
** centroid: 4, normalized-entropy: 0.9132401614300725, [(1, 45), (2, 22)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 77, 12]]
** centroid: 5, normalized-entropy: 0.5705411428522262, [(2, 77), (3, 12)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18766614792495967] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18766614792495967, 0.1539150227494538] ***
*** starting iteration: 2; err: [Inf, 0.18766614792495967, 0.1539150227494538] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18766614792495967, 0.1539150227494538, 0.14894541365560143] ***
*** starting iteration: 3; err: [Inf, 0.18766614792495967, 0.1539150227494538, 0.14894541365560143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18766614792495967, 0.1539150227494538, 0.14894541365560143, 0.14602576685789972] ***
*** finished computation of 7 references, err: [Inf, 0.18766614792495967, 0.1539150227494538, 0.14894541365560143, 0.14602576685789972] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [50, 28, 0]]
** centroid: 1, normalized-entropy: 0.9418285354475157, [(1, 50), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 30, 0]]
** centroid: 2, normalized-entropy: 0.9852281360342514, [(1, 40), (2, 30)]
*** center 3: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [60, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [59, 4, 0]]
** centroid: 5, normalized-entropy: 0.3411538931451763, [(1, 59), (2, 4)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 64, 20]]
** centroid: 6, normalized-entropy: 0.7918583525674836, [(2, 64), (3, 20)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21359001740068198] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21359001740068198, 0.17828768716193735] ***
*** starting iteration: 2; err: [Inf, 0.21359001740068198, 0.17828768716193735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21359001740068198, 0.17828768716193735, 0.16025672155385837] ***
*** starting iteration: 3; err: [Inf, 0.21359001740068198, 0.17828768716193735, 0.16025672155385837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21359001740068198, 0.17828768716193735, 0.16025672155385837, 0.15147700953297316] ***
*** finished computation of 7 references, err: [Inf, 0.21359001740068198, 0.17828768716193735, 0.16025672155385837, 0.15147700953297316] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 74, 20]]
** centroid: 1, normalized-entropy: 0.7467366074830678, [(2, 74), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 17, 0]]
** centroid: 2, normalized-entropy: 0.8230660790114689, [(1, 49), (2, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [3, 49, 0]]
** centroid: 5, normalized-entropy: 0.3182152976832332, [(1, 3), (2, 49)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [88, 33, 0]]
** centroid: 6, normalized-entropy: 0.8453509366224364, [(1, 88), (2, 33)]
*** center 7: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19327685120888055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19327685120888055, 0.1602990035470575] ***
*** starting iteration: 2; err: [Inf, 0.19327685120888055, 0.1602990035470575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19327685120888055, 0.1602990035470575, 0.1544046372352168] ***
*** starting iteration: 3; err: [Inf, 0.19327685120888055, 0.1602990035470575, 0.1544046372352168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19327685120888055, 0.1602990035470575, 0.1544046372352168, 0.15029271434433758] ***
*** finished computation of 7 references, err: [Inf, 0.19327685120888055, 0.1602990035470575, 0.1544046372352168, 0.15029271434433758] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [25, 32, 0]]
** centroid: 1, normalized-entropy: 0.9890934397021431, [(1, 25), (2, 32)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 52, 14]]
** centroid: 2, normalized-entropy: 0.7455178428108284, [(2, 52), (3, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 55, 1]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [40, 29, 0]]
** centroid: 5, normalized-entropy: 0.9815886212101388, [(1, 40), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [77, 18, 0]]
** centroid: 6, normalized-entropy: 0.7003691487575897, [(1, 77), (2, 18)]
*** center 7: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19281987110106275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19281987110106275, 0.16295855960436165] ***
*** starting iteration: 2; err: [Inf, 0.19281987110106275, 0.16295855960436165] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19281987110106275, 0.16295855960436165, 0.15785003462061287] ***
*** starting iteration: 3; err: [Inf, 0.19281987110106275, 0.16295855960436165, 0.15785003462061287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19281987110106275, 0.16295855960436165, 0.15785003462061287, 0.15447018213383854] ***
*** finished computation of 7 references, err: [Inf, 0.19281987110106275, 0.16295855960436165, 0.15785003462061287, 0.15447018213383854] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [81, 4, 0]]
** centroid: 2, normalized-entropy: 0.2737691686829417, [(1, 81), (2, 4)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [26, 50, 0]]
** centroid: 3, normalized-entropy: 0.9268190639645774, [(1, 26), (2, 50)]
*** center 4: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 87, 21]]
** centroid: 5, normalized-entropy: 0.710676853856123, [(2, 87), (3, 21)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [66, 30, 0]]
** centroid: 6, normalized-entropy: 0.8960382325345574, [(1, 66), (2, 30)]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23826776728406548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23826776728406548, 0.1719069760357961] ***
*** starting iteration: 2; err: [Inf, 0.23826776728406548, 0.1719069760357961] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23826776728406548, 0.1719069760357961, 0.15798339959233998] ***
*** starting iteration: 3; err: [Inf, 0.23826776728406548, 0.1719069760357961, 0.15798339959233998] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23826776728406548, 0.1719069760357961, 0.15798339959233998, 0.15484338842332362] ***
*** finished computation of 7 references, err: [Inf, 0.23826776728406548, 0.1719069760357961, 0.15798339959233998, 0.15484338842332362] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [2, 66, 0]]
** centroid: 1, normalized-entropy: 0.1914332548141934, [(1, 2), (2, 66)]
*** center 2: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [26, 3, 0]]
** centroid: 3, normalized-entropy: 0.47983202361612853, [(1, 26), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [75, 29, 0]]
** centroid: 4, normalized-entropy: 0.8538738465459897, [(1, 75), (2, 29)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 2, 0]]
** centroid: 5, normalized-entropy: 0.18717625687320805, [(1, 68), (2, 2)]
*** center 6: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 84, 15]]
** centroid: 7, normalized-entropy: 0.6136190195993708, [(2, 84), (3, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18017273969436065] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18017273969436065, 0.16074889608193188] ***
*** starting iteration: 2; err: [Inf, 0.18017273969436065, 0.16074889608193188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18017273969436065, 0.16074889608193188, 0.15767777344863862] ***
*** starting iteration: 3; err: [Inf, 0.18017273969436065, 0.16074889608193188, 0.15767777344863862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18017273969436065, 0.16074889608193188, 0.15767777344863862, 0.15623788660392166] ***
*** finished computation of 7 references, err: [Inf, 0.18017273969436065, 0.16074889608193188, 0.15767777344863862, 0.15623788660392166] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [91, 11, 0]]
** centroid: 1, normalized-entropy: 0.493375733509813, [(1, 91), (2, 11)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 34, 1]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 43, 18]]
** centroid: 3, normalized-entropy: 0.8751957887407251, [(2, 43), (3, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [83, 9, 0]]
** centroid: 4, normalized-entropy: 0.4620663276355394, [(1, 83), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [35, 21, 0]]
** centroid: 5, normalized-entropy: 0.954434002924965, [(1, 35), (2, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2204273413680494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2204273413680494, 0.16266188097931444] ***
*** starting iteration: 2; err: [Inf, 0.2204273413680494, 0.16266188097931444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2204273413680494, 0.16266188097931444, 0.15242503929883242] ***
*** starting iteration: 3; err: [Inf, 0.2204273413680494, 0.16266188097931444, 0.15242503929883242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2204273413680494, 0.16266188097931444, 0.15242503929883242, 0.14597626417130233] ***
*** finished computation of 7 references, err: [Inf, 0.2204273413680494, 0.16266188097931444, 0.15242503929883242, 0.14597626417130233] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [19, 46, 0]]
** centroid: 1, normalized-entropy: 0.871683617119982, [(1, 19), (2, 46)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 60, 17]]
** centroid: 2, normalized-entropy: 0.7615877869576693, [(2, 60), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 1, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 42, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [45, 22, 0]]
** centroid: 6, normalized-entropy: 0.9132401614300725, [(1, 45), (2, 22)]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22937709980551155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22937709980551155, 0.1653209993094206] ***
*** starting iteration: 2; err: [Inf, 0.22937709980551155, 0.1653209993094206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22937709980551155, 0.1653209993094206, 0.15666628215182574] ***
*** starting iteration: 3; err: [Inf, 0.22937709980551155, 0.1653209993094206, 0.15666628215182574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22937709980551155, 0.1653209993094206, 0.15666628215182574, 0.15360832900553942] ***
*** finished computation of 7 references, err: [Inf, 0.22937709980551155, 0.1653209993094206, 0.15666628215182574, 0.15360832900553942] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 1, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [28, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [14, 63, 0]]
** centroid: 3, normalized-entropy: 0.6840384356390419, [(1, 14), (2, 63)]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 59, 18]]
** centroid: 5, normalized-entropy: 0.7845191388986644, [(2, 59), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [86, 3, 0]]
** centroid: 6, normalized-entropy: 0.21265863988163503, [(1, 86), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [18, 46, 0]]
** centroid: 7, normalized-entropy: 0.8571484374283717, [(1, 18), (2, 46)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2010467145368457] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2010467145368457, 0.15404273186437786] ***
*** starting iteration: 2; err: [Inf, 0.2010467145368457, 0.15404273186437786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2010467145368457, 0.15404273186437786, 0.14987250151857734] ***
*** starting iteration: 3; err: [Inf, 0.2010467145368457, 0.15404273186437786, 0.14987250151857734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2010467145368457, 0.15404273186437786, 0.14987250151857734, 0.14869747255183757] ***
*** finished computation of 7 references, err: [Inf, 0.2010467145368457, 0.15404273186437786, 0.14987250151857734, 0.14869747255183757] ***
*** center 1: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 20, 0]]
** centroid: 2, normalized-entropy: 0.9015982354056711, [(1, 43), (2, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [25, 37, 0]]
** centroid: 3, normalized-entropy: 0.9728063221185002, [(1, 25), (2, 37)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 94, 19]]
** centroid: 4, normalized-entropy: 0.6534358224760193, [(2, 94), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 12, 0]]
** centroid: 5, normalized-entropy: 0.6665783579949205, [(1, 57), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [39, 26, 0]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(1, 39), (2, 26)]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.16949374783225357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16949374783225357, 0.1509061323441565] ***
*** starting iteration: 2; err: [Inf, 0.16949374783225357, 0.1509061323441565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16949374783225357, 0.1509061323441565, 0.14809700551140123] ***
*** starting iteration: 3; err: [Inf, 0.16949374783225357, 0.1509061323441565, 0.14809700551140123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16949374783225357, 0.1509061323441565, 0.14809700551140123, 0.14712003358453513] ***
*** finished computation of 7 references, err: [Inf, 0.16949374783225357, 0.1509061323441565, 0.14809700551140123, 0.14712003358453513] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [74, 19, 0]]
** centroid: 1, normalized-entropy: 0.7304472862481346, [(1, 74), (2, 19)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 21, 0]]
** centroid: 3, normalized-entropy: 0.8403586716091169, [(1, 57), (2, 21)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 61, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [67, 2, 0]]
** centroid: 6, normalized-entropy: 0.18927843126120178, [(1, 67), (2, 2)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 24, 19]]
** centroid: 7, normalized-entropy: 0.9902246902198684, [(2, 24), (3, 19)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2859298817003146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2859298817003146, 0.18090385903418063] ***
*** starting iteration: 2; err: [Inf, 0.2859298817003146, 0.18090385903418063] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2859298817003146, 0.18090385903418063, 0.16182596360519527] ***
*** starting iteration: 3; err: [Inf, 0.2859298817003146, 0.18090385903418063, 0.16182596360519527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2859298817003146, 0.18090385903418063, 0.16182596360519527, 0.15511699762381614] ***
*** finished computation of 7 references, err: [Inf, 0.2859298817003146, 0.18090385903418063, 0.16182596360519527, 0.15511699762381614] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 69, 15]]
** centroid: 1, normalized-entropy: 0.6769418697808861, [(2, 69), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [8, 83, 1]]
** centroid: 2, normalized-entropy: 0.4294619720471057, [(1, 8), (2, 83)]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 8, 0]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(1, 60), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 5, 0]]
** centroid: 5, normalized-entropy: 0.4236805715709106, [(1, 53), (2, 5)]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [29, 14, 0]]
** centroid: 7, normalized-entropy: 0.9103480624345157, [(1, 29), (2, 14)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24497147578001022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24497147578001022, 0.1706658702082932] ***
*** starting iteration: 2; err: [Inf, 0.24497147578001022, 0.1706658702082932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24497147578001022, 0.1706658702082932, 0.15857810985017567] ***
*** starting iteration: 3; err: [Inf, 0.24497147578001022, 0.1706658702082932, 0.15857810985017567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24497147578001022, 0.1706658702082932, 0.15857810985017567, 0.15162221454735844] ***
*** finished computation of 7 references, err: [Inf, 0.24497147578001022, 0.1706658702082932, 0.15857810985017567, 0.15162221454735844] ***
*** center 1: selecting labels [1] (freq >= 2) [from [55, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [41, 22, 0]]
** centroid: 2, normalized-entropy: 0.9333572600179806, [(1, 41), (2, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 59, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [98, 3, 0]]
** centroid: 5, normalized-entropy: 0.192900074578984, [(1, 98), (2, 3)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 34, 20]]
** centroid: 6, normalized-entropy: 0.9509560484549724, [(2, 34), (3, 20)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 50, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18247510896995664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18247510896995664, 0.15885105948150158] ***
*** starting iteration: 2; err: [Inf, 0.18247510896995664, 0.15885105948150158] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18247510896995664, 0.15885105948150158, 0.1501153673240915] ***
*** starting iteration: 3; err: [Inf, 0.18247510896995664, 0.15885105948150158, 0.1501153673240915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18247510896995664, 0.15885105948150158, 0.1501153673240915, 0.14796884012874215] ***
*** finished computation of 7 references, err: [Inf, 0.18247510896995664, 0.15885105948150158, 0.1501153673240915, 0.14796884012874215] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [46, 17, 0]]
** centroid: 1, normalized-entropy: 0.8412367762002599, [(1, 46), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [38, 20, 0]]
** centroid: 2, normalized-entropy: 0.9293636260137188, [(1, 38), (2, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [15, 57, 0]]
** centroid: 3, normalized-entropy: 0.7382848661434506, [(1, 15), (2, 57)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 77, 20]]
** centroid: 4, normalized-entropy: 0.7341280428958428, [(2, 77), (3, 20)]
*** center 5: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [58, 5, 0]]
** centroid: 7, normalized-entropy: 0.39993804743902767, [(1, 58), (2, 5)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1876337424237281] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1876337424237281, 0.15766798808798194] ***
*** starting iteration: 2; err: [Inf, 0.1876337424237281, 0.15766798808798194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1876337424237281, 0.15766798808798194, 0.154381899070926] ***
*** starting iteration: 3; err: [Inf, 0.1876337424237281, 0.15766798808798194, 0.154381899070926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1876337424237281, 0.15766798808798194, 0.154381899070926, 0.15155646509025245] ***
*** finished computation of 7 references, err: [Inf, 0.1876337424237281, 0.15766798808798194, 0.154381899070926, 0.15155646509025245] ***
*** center 1: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 15, 0]]
** centroid: 2, normalized-entropy: 0.7382848661434506, [(1, 57), (2, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 12, 0]]
** centroid: 3, normalized-entropy: 0.7424875695421234, [(1, 45), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [40, 26, 0]]
** centroid: 4, normalized-entropy: 0.9672947789468944, [(1, 40), (2, 26)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 88, 17]]
** centroid: 5, normalized-entropy: 0.6388469391771899, [(2, 88), (3, 17)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [44, 41, 0]]
** centroid: 6, normalized-entropy: 0.999101248968496, [(1, 44), (2, 41)]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2335811162837781] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2335811162837781, 0.17816769115487113] ***
*** starting iteration: 2; err: [Inf, 0.2335811162837781, 0.17816769115487113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2335811162837781, 0.17816769115487113, 0.15726959036756308] ***
*** starting iteration: 3; err: [Inf, 0.2335811162837781, 0.17816769115487113, 0.15726959036756308] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2335811162837781, 0.17816769115487113, 0.15726959036756308, 0.14877390054799616] ***
*** finished computation of 7 references, err: [Inf, 0.2335811162837781, 0.17816769115487113, 0.15726959036756308, 0.14877390054799616] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [46, 22, 0]]
** centroid: 1, normalized-entropy: 0.9081783472997053, [(1, 46), (2, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [3, 64, 0]]
** centroid: 4, normalized-entropy: 0.26377743669413856, [(1, 3), (2, 64)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 58, 27]]
** centroid: 5, normalized-entropy: 0.9018043446575508, [(2, 58), (3, 27)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [47, 20, 0]]
** centroid: 6, normalized-entropy: 0.8794587736429037, [(1, 47), (2, 20)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [74, 10, 0]]
** centroid: 7, normalized-entropy: 0.5266170655714281, [(1, 74), (2, 10)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22930884653702377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22930884653702377, 0.1591402873666957] ***
*** starting iteration: 2; err: [Inf, 0.22930884653702377, 0.1591402873666957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22930884653702377, 0.1591402873666957, 0.15353691435605288] ***
*** starting iteration: 3; err: [Inf, 0.22930884653702377, 0.1591402873666957, 0.15353691435605288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22930884653702377, 0.1591402873666957, 0.15353691435605288, 0.15027884337864816] ***
*** finished computation of 7 references, err: [Inf, 0.22930884653702377, 0.1591402873666957, 0.15353691435605288, 0.15027884337864816] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [38, 27, 0]]
** centroid: 1, normalized-entropy: 0.9792415350396869, [(1, 38), (2, 27)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 85, 16]]
** centroid: 2, normalized-entropy: 0.6305062394675903, [(2, 85), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [39, 27, 0]]
** centroid: 5, normalized-entropy: 0.976020648236615, [(1, 39), (2, 27)]
*** center 6: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [60, 48, 0]]
** centroid: 7, normalized-entropy: 0.9910760598382222, [(1, 60), (2, 48)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20267770156636833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20267770156636833, 0.16918830053508283] ***
*** starting iteration: 2; err: [Inf, 0.20267770156636833, 0.16918830053508283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20267770156636833, 0.16918830053508283, 0.1595949988272041] ***
*** starting iteration: 3; err: [Inf, 0.20267770156636833, 0.16918830053508283, 0.1595949988272041] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20267770156636833, 0.16918830053508283, 0.1595949988272041, 0.15423812708444892] ***
*** finished computation of 7 references, err: [Inf, 0.20267770156636833, 0.16918830053508283, 0.1595949988272041, 0.15423812708444892] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [78, 13, 0]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(1, 78), (2, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [38, 2, 0]]
** centroid: 3, normalized-entropy: 0.2863969571159561, [(1, 38), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [7, 55, 0]]
** centroid: 4, normalized-entropy: 0.5086113313826895, [(1, 7), (2, 55)]
*** center 5: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 84, 18]]
** centroid: 6, normalized-entropy: 0.6722948170756378, [(2, 84), (3, 18)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [35, 37, 0]]
** centroid: 7, normalized-entropy: 0.9994433330902989, [(1, 35), (2, 37)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18480720392614602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18480720392614602, 0.16178790705278515] ***
*** starting iteration: 2; err: [Inf, 0.18480720392614602, 0.16178790705278515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18480720392614602, 0.16178790705278515, 0.1566904178597033] ***
*** starting iteration: 3; err: [Inf, 0.18480720392614602, 0.16178790705278515, 0.1566904178597033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18480720392614602, 0.16178790705278515, 0.1566904178597033, 0.15240599789656697] ***
*** finished computation of 7 references, err: [Inf, 0.18480720392614602, 0.16178790705278515, 0.1566904178597033, 0.15240599789656697] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [65, 4, 0]]
** centroid: 1, normalized-entropy: 0.3193373865339728, [(1, 65), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [45, 16, 0]]
** centroid: 2, normalized-entropy: 0.8301899714180444, [(1, 45), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 76, 23]]
** centroid: 4, normalized-entropy: 0.7820392866349247, [(2, 76), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 62, 0]]
** centroid: 5, normalized-entropy: 0.8160172973428256, [(1, 21), (2, 62)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [24, 29, 0]]
** centroid: 7, normalized-entropy: 0.9935704757706079, [(1, 24), (2, 29)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22358721258863806] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22358721258863806, 0.17241967388615012] ***
*** starting iteration: 2; err: [Inf, 0.22358721258863806, 0.17241967388615012] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22358721258863806, 0.17241967388615012, 0.16021290995553136] ***
*** starting iteration: 3; err: [Inf, 0.22358721258863806, 0.17241967388615012, 0.16021290995553136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22358721258863806, 0.17241967388615012, 0.16021290995553136, 0.1539905071016401] ***
*** finished computation of 7 references, err: [Inf, 0.22358721258863806, 0.17241967388615012, 0.16021290995553136, 0.1539905071016401] ***
*** center 1: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 67, 18]]
** centroid: 2, normalized-entropy: 0.7448423974714387, [(2, 67), (3, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [37, 60, 0]]
** centroid: 4, normalized-entropy: 0.9590550044058676, [(1, 37), (2, 60)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [83, 3, 0]]
** centroid: 5, normalized-entropy: 0.21832103023746746, [(1, 83), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [77, 2, 0]]
** centroid: 6, normalized-entropy: 0.17033057560105982, [(1, 77), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 44, 0]]
** centroid: 7, normalized-entropy: 0.5293608652873645, [(1, 6), (2, 44)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2395826956257224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2395826956257224, 0.16700490577705204] ***
*** starting iteration: 2; err: [Inf, 0.2395826956257224, 0.16700490577705204] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2395826956257224, 0.16700490577705204, 0.15639106968324631] ***
*** starting iteration: 3; err: [Inf, 0.2395826956257224, 0.16700490577705204, 0.15639106968324631] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2395826956257224, 0.16700490577705204, 0.15639106968324631, 0.15356169543415307] ***
*** finished computation of 7 references, err: [Inf, 0.2395826956257224, 0.16700490577705204, 0.15639106968324631, 0.15356169543415307] ***
*** center 1: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 83, 18]]
** centroid: 2, normalized-entropy: 0.6761627418829197, [(2, 83), (3, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [37, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [74, 41, 0]]
** centroid: 4, normalized-entropy: 0.9397580401106037, [(1, 74), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 20, 0]]
** centroid: 5, normalized-entropy: 0.9127341558073343, [(1, 41), (2, 20)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [27, 49, 0]]
** centroid: 6, normalized-entropy: 0.9386808697586004, [(1, 27), (2, 49)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2181153598614037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2181153598614037, 0.17729855760931967] ***
*** starting iteration: 2; err: [Inf, 0.2181153598614037, 0.17729855760931967] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2181153598614037, 0.17729855760931967, 0.16297211226820946] ***
*** starting iteration: 3; err: [Inf, 0.2181153598614037, 0.17729855760931967, 0.16297211226820946] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2181153598614037, 0.17729855760931967, 0.16297211226820946, 0.15518313874490558] ***
*** finished computation of 7 references, err: [Inf, 0.2181153598614037, 0.17729855760931967, 0.16297211226820946, 0.15518313874490558] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 4, 0]]
** centroid: 1, normalized-entropy: 0.5225593745369407, [(1, 30), (2, 4)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 56, 1]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 15, 0]]
** centroid: 3, normalized-entropy: 0.7495952572594798, [(1, 55), (2, 15)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 47, 18]]
** centroid: 4, normalized-entropy: 0.8512243352621381, [(2, 47), (3, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [84, 13, 0]]
** centroid: 6, normalized-entropy: 0.5683625344629001, [(1, 84), (2, 13)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [28, 38, 0]]
** centroid: 7, normalized-entropy: 0.9833761901392238, [(1, 28), (2, 38)]
finished with 12 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 358,3 => 37,1 => 605), Dict(2 => 394,3 => 29,1 => 577))
[ Info: ===== scores for single classifier: {"micro_f1":0.937,"precision":0.937,"recall":0.937,"macro_recall":0.9633365297486561,"macro_f1":0.9506897812282012,"accuracy":0.937,"class_f1":{"2":0.9257950530035337,"3":0.983050847457627,"1":0.9432234432234432},"class_precision":{"2":0.8637362637362638,"3":0.9666666666666667,"1":1.0},"class_recall":{"2":0.9974619289340102,"3":1.0,"1":0.8925476603119584}}
[ Info: ===== scores for 1: {"micro_f1":0.977,"precision":0.977,"recall":0.977,"macro_recall":0.963001517918077,"macro_f1":0.9474590584799129,"accuracy":0.977,"class_f1":{"2":0.9711417816813048,"3":0.8852459016393444,"1":0.9859894921190894},"class_precision":{"2":0.9602977667493796,"3":0.84375,"1":0.9964601769911504},"class_recall":{"2":0.9822335025380711,"3":0.9310344827586207,"1":0.975736568457539}}
[ Info: ===== scores for 5: {"micro_f1":0.984,"precision":0.984,"recall":0.984,"macro_recall":0.9675820690504584,"macro_f1":0.9524115020431171,"accuracy":0.984,"class_f1":{"2":0.9798488664987406,"3":0.8852459016393444,"1":0.9921397379912663},"class_precision":{"2":0.9725,"3":0.84375,"1":1.0},"class_recall":{"2":0.9873096446700508,"3":0.9310344827586207,"1":0.9844020797227037}}
[ Info: ===== scores for 7: {"micro_f1":0.976,"precision":0.976,"recall":0.976,"macro_recall":0.9725354004766613,"macro_f1":0.9393706905517929,"accuracy":0.976,"class_f1":{"2":0.9696969696969697,"3":0.8615384615384615,"1":0.9868766404199475},"class_precision":{"2":0.964824120603015,"3":0.7777777777777778,"1":0.9964664310954063},"class_recall":{"2":0.9746192893401016,"3":0.9655172413793104,"1":0.9774696707105719}}
[ Info: ===== scores for 9: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9736908019786833,"macro_f1":0.936715745576505,"accuracy":0.978,"class_f1":{"2":0.9721518987341773,"3":0.8484848484848485,"1":0.9895104895104895},"class_precision":{"2":0.9696969696969697,"3":0.7567567567567568,"1":0.9982363315696648},"class_recall":{"2":0.9746192893401016,"3":0.9655172413793104,"1":0.9809358752166378}}
[ Info: ===== scores for 11: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9710706211612807,"macro_f1":0.9332187275000529,"accuracy":0.973,"class_f1":{"2":0.9661229611041405,"3":0.8484848484848485,"1":0.9850483729111698},"class_precision":{"2":0.9553349875930521,"3":0.7567567567567568,"1":1.0},"class_recall":{"2":0.9771573604060914,"3":0.9655172413793104,"1":0.9705372616984402}}
(score = 0.974, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.98, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.986, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.986, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.975, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.984, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.984, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.986,"k":3,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.986,"precision":0.986,"recall":0.986,"macro_recall":0.9687374705524804,"macro_f1":0.9632481904796814,"accuracy":0.986,"class_f1":{"2":0.9823232323232323,"3":0.9152542372881356,"1":0.9921671018276763},"class_precision":{"2":0.9773869346733668,"3":0.9,"1":0.9965034965034965},"class_recall":{"2":0.9873096446700508,"3":0.9310344827586207,"1":0.9878682842287695}}
Test Summary: | Pass  Total
AKNC          |    8      8
[362, 4, 2, 1, 2, 1, 2, 6, 7, 3, 6, 1, 16, 1, 1, 1, 3, 3, 5, 4, 5, 10, 12, 2, 7, 9, 3, 19, 4, 4, 4, 11, 16, 19, 7, 1, 3, 7, 4, 6, 1, 6, 6, 19, 5, 10, 20, 32, 9, 2, 3, 6, 2, 27, 34, 12, 19, 79, 3, 153, 6, 2, 19, 80, 3, 5, 9, 18, 26, 23, 11, 23, 4, 1, 25, 5, 10, 27, 24, 6, 13, 7, 158, 16, 3, 6, 1, 7, 5, 5, 111, 72, 36, 1, 6, 29, 52, 38, 1, 25, 29, 128, 34, 6, 4, 26, 7, 17, 48, 5, 257, 21, 7, 10, 36, 100, 5, 2, 8, 45, 72, 9, 127, 26, 186, 18, 25, 35, 11, 12, 5, 49, 151, 9, 8, 11, 12, 45, 84, 17, 14, 19, 8, 18, 8, 6, 11, 186, 53, 16, 17, 7, 7, 47, 3, 36, 47, 38, 6, 1, 18, 76, 6, 16, 26, 49, 151, 31, 6, 14, 34, 30, 47, 7, 31, 7, 10, 3, 17, 37, 20, 7, 1, 11, 4, 80, 10, 8, 42, 9, 7, 14, 15, 19, 13, 5, 117, 29, 47, 130, 4, 16, 40, 20, 66, 6, 8, 3, 27, 10, 19, 19, 25, 10, 97, 14, 7, 126, 10, 4, 10, 4, 11, 135, 4, 17, 28, 33, 16, 76, 21, 80, 24, 41, 5, 15, 6, 234, 14, 7, 5, 19, 34, 300, 32, 62, 43, 77, 608, 30, 11, 170, 9, 9, 3, 24, 12, 2, 29, 3, 13, 28, 21, 7, 6, 13, 13, 3, 10, 119, 151, 3, 5, 3, 17, 3, 486, 6, 11, 51, 50, 4, 252, 5, 99, 21, 10, 21, 9, 32, 8, 31, 27, 18, 71, 3, 7, 3, 45, 111]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6549999999999998, speedup = 0.3127005254228236, eval_ratio = 0.06887)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4132564484126983,"recall":0.41232638888888884,"f1":null,"seconds":0.00016000494360923767,"exhaustive_search_seconds":0.00034292228519916534,"evaluations":476.875,"distances_sum":1678.2420742608306}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5763888888888885,"recall":0.5763888888888885,"f1":null,"seconds":0.00043163634836673737,"exhaustive_search_seconds":0.00034292228519916534,"evaluations":617.40625,"distances_sum":1584.2330985716292}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.7013888888888882,"recall":0.7013888888888882,"f1":null,"seconds":0.00037397630512714386,"exhaustive_search_seconds":0.00034292228519916534,"evaluations":774.1171875,"distances_sum":1537.0041768487786}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7699652777777768,"recall":0.7699652777777768,"f1":0.7699652777777768,"seconds":0.0004561617970466614,"exhaustive_search_seconds":0.00034292228519916534,"evaluations":882.171875,"distances_sum":1513.3936445297336}
KCenters.DeloneInvIndex> reached performance {"precision":0.816840277777777,"recall":0.816840277777777,"f1":0.816840277777777,"seconds":0.0005275066941976547,"exhaustive_search_seconds":0.00034292228519916534,"evaluations":996.5234375,"distances_sum":1499.6021391437794}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7919999999999999, speedup = 0.7848036663384558, eval_ratio = 0.089917)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
