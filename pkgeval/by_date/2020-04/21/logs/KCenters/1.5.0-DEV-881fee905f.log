Julia Version 1.5.0-DEV.651
Commit 881fee905f (2020-04-20 16:22 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed InvertedIndices ───────────── v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed Compat ────────────────────── v3.8.0
  Installed DataAPI ───────────────────── v1.2.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Tables ────────────────────── v1.0.4
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataStructures ────────────── v0.17.13
  Installed CategoricalArrays ─────────── v0.7.7
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataPattern ─────────────── v0.5.1
  Installed SimilaritySearch ──────────── v0.3.19
  Installed OrderedCollections ────────── v1.1.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed DataValueInterfaces ───────── v1.0.0
  Installed JSON ──────────────────────── v0.21.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed DataFrames ────────────────── v0.20.2
  Installed Parsers ───────────────────── v1.0.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.2.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.13
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_7V0rjs/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_7V0rjs/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.2.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.13
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9370718047022819
[ Info: 0.8307796732584636
[ Info: 0.5539460386335849
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3291004391262929
mean(cdnet.distances) = 0.3619024168203274
mean(crand.distances) = 0.33615777984261513
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.205078125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.205078125,"f1":null,"seconds":3.589317202568054e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":5.7890625,"distances_sum":669.3279468723251}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5263671875, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.5263671875,"f1":null,"seconds":5.150213837623596e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.0078125,"distances_sum":1587.3031123479363}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5263671875,"state":{"ssize":5,"bsize":3},"perf":{"precision":null,"recall":0.5263671875,"f1":null,"seconds":5.150213837623596e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.0078125,"distances_sum":1587.3031123479363}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.803667166167167,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.1015625,"distances_sum":2123.82406186579}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7353515625,"f1":0.8390515734265744,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.21875,"distances_sum":2297.641632783428}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7353515625,"state":{"ssize":7,"bsize":5},"perf":{"precision":1.0,"recall":0.7353515625,"f1":0.8390515734265744,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.21875,"distances_sum":2297.641632783428}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8991929945054954,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.6875,"distances_sum":2696.033841045285}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9334706959706967,"seconds":6.416812539100647e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.875,"distances_sum":2997.153666056625}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9449690934065939,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.7578125,"distances_sum":3143.3178346564055}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9311183608058615,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.75,"distances_sum":2974.5962921816144}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9449690934065939,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.7578125,"distances_sum":3143.3178346564055}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.90625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9449690934065939,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.7578125,"distances_sum":3143.3178346564055}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.73828125,"f1":0.839864302364303,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.1640625,"distances_sum":2135.9502270964813}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5537109375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5537109375,"f1":0.6998782467532474,"seconds":4.645437002182007e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":7.0859375,"distances_sum":1478.1689345794864}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.408203125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.408203125,"f1":null,"seconds":4.166737198829651e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":6.171875,"distances_sum":1088.6744859957187}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.73828125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.73828125,"f1":0.839864302364303,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.1640625,"distances_sum":2135.9502270964813}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9418503371628376,"seconds":6.2622129917144775e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.734375,"distances_sum":2797.4457943098337}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.889122856310357,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.3515625,"distances_sum":2468.9251233506443}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9585451007326015,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8125,"distances_sum":2918.1638528098697}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.8450070762570773,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.234375,"distances_sum":2142.4231167645025}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8522383866133876,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.296875,"distances_sum":2151.841251888648}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9585451007326015,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8125,"distances_sum":2918.1638528098697}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9649210164835169,"seconds":6.234273314476013e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9140625,"distances_sum":2945.4390008061046}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9769345238095244,"seconds":6.241723895072937e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9765625,"distances_sum":3041.3552799594977}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9787202380952384,"seconds":6.586313247680664e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9765625,"distances_sum":3052.717398606162}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9763793498168498,"seconds":6.541609764099121e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.96875,"distances_sum":3025.8429942551206}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.962637362637363,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8671875,"distances_sum":2944.60112129518}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9787202380952384,"seconds":6.586313247680664e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9765625,"distances_sum":3052.717398606162}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9787202380952384,"seconds":6.586313247680664e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9765625,"distances_sum":3052.717398606162}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7255859375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7255859375,"f1":0.8333739177489186,"seconds":4.852190613746643e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.140625,"distances_sum":2043.089444929769}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7255859375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7255859375,"f1":0.8333739177489186,"seconds":4.852190613746643e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.140625,"distances_sum":2043.089444929769}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8933727730602737,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.578125,"distances_sum":2373.6354418356395}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9569997710622714,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8125,"distances_sum":2925.2319973795447}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9569997710622714,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8125,"distances_sum":2925.2319973795447}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9614239926739935,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.796875,"distances_sum":2972.078583699044}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9746279761904764,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9453125,"distances_sum":3028.8182563653327}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9746279761904764,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9453125,"distances_sum":3028.8182563653327}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9746279761904764,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9453125,"distances_sum":3028.8182563653327}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5419921875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5419921875,"f1":0.6865202505827509,"seconds":4.135072231292725e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.875,"distances_sum":1554.5595430078852}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.193359375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.193359375,"f1":null,"seconds":3.2261013984680176e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":5.265625,"distances_sum":532.3315070496003}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6611328125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6611328125,"f1":0.7840376637251645,"seconds":4.861503839492798e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.703125,"distances_sum":1896.7171979214506}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6611328125,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6611328125,"f1":0.7840376637251645,"seconds":4.861503839492798e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.703125,"distances_sum":1896.7171979214506}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9351762820512823,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.6796875,"distances_sum":2751.2527055297987}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8441220238095246,"seconds":5.4370611906051636e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.15625,"distances_sum":2189.3778197149854}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9501602564102569,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.78125,"distances_sum":2904.7585571131044}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9501602564102569,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.78125,"distances_sum":2904.7585571131044}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9613553113553118,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8359375,"distances_sum":2961.344449194848}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9613553113553118,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8359375,"distances_sum":2961.344449194848}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9613553113553118,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.8359375,"distances_sum":2961.344449194848}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2119140625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2119140625,"f1":null,"seconds":3.6135315895080566e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":6.34375,"distances_sum":438.6762652617397}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5478515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5478515625,"f1":0.6928959928959935,"seconds":4.382804036140442e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":7.953125,"distances_sum":1103.071970185746}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8711626914751921,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.671875,"distances_sum":1744.3682072693102}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.783203125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.783203125,"f1":0.8711626914751921,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.671875,"distances_sum":1744.3682072693102}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9587511446886451,"seconds":5.904585123062134e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.875,"distances_sum":2333.8512049933483}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9587511446886451,"seconds":5.904585123062134e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.875,"distances_sum":2333.8512049933483}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9727335164835166,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.984375,"distances_sum":2413.512827801221}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":11,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9602907509157514,"seconds":6.027519702911377e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.875,"distances_sum":2357.875481025764}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9707417582417586,"seconds":6.46151602268219e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.9296875,"distances_sum":2404.4724814883366}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9606055402930409,"seconds":6.070360541343689e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.8671875,"distances_sum":2355.535769459952}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9727335164835166,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.984375,"distances_sum":2413.512827801221}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9727335164835166,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.984375,"distances_sum":2413.512827801221}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6357421875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6357421875,"f1":0.7661432317682325,"seconds":5.064532160758972e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.2109375,"distances_sum":1343.6965797306623}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.57421875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.57421875,"f1":0.7137459762459768,"seconds":4.5280903577804565e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.953125,"distances_sum":1226.5815799068703}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6357421875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6357421875,"f1":0.7661432317682325,"seconds":5.064532160758972e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.2109375,"distances_sum":1343.6965797306623}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.948986950549451,"seconds":6.143003702163696e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8515625,"distances_sum":2368.251042633325}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9455643315018321,"seconds":6.05359673500061e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.875,"distances_sum":2326.882664127047}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.948986950549451,"seconds":6.143003702163696e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8515625,"distances_sum":2368.251042633325}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9808035714285716,"seconds":6.485730409622192e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9765625,"distances_sum":2582.808178676939}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9618017399267405,"seconds":6.118789315223694e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8828125,"distances_sum":2460.9031172276677}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9487065018315023,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.84375,"distances_sum":2397.685674238573}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9756353021978025,"seconds":6.290152668952942e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.96875,"distances_sum":2543.611015096651}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9808035714285716,"seconds":6.485730409622192e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9765625,"distances_sum":2582.808178676939}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9808035714285716,"seconds":6.485730409622192e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9765625,"distances_sum":2582.808178676939}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1669921875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1669921875,"f1":null,"seconds":3.2223761081695557e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":5.1015625,"distances_sum":367.8288365405845}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3544921875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3544921875,"f1":null,"seconds":4.1425228118896484e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":5.6015625,"distances_sum":792.4399840458897}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.162109375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.162109375,"f1":null,"seconds":3.1478703022003174e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":4.8046875,"distances_sum":355.7415493069193}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3544921875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3544921875,"f1":null,"seconds":4.1425228118896484e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":5.6015625,"distances_sum":792.4399840458897}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8689909049284057,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.9921875,"distances_sum":1956.7750117226533}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.52734375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.52734375,"f1":null,"seconds":4.235655069351196e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.6796875,"distances_sum":1122.690382702676}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7902467324342332,"seconds":4.760921001434326e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.609375,"distances_sum":1548.7263631247079}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6396484375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6396484375,"f1":0.7640163655788662,"seconds":4.714354872703552e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.34375,"distances_sum":1479.5922414081576}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.53125,"f1":0.6736282814407818,"seconds":4.088506102561951e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.6953125,"distances_sum":1199.6252664878593}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.784483225108226,"seconds":4.906207323074341e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.53125,"distances_sum":1564.4743052733547}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7822265625,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.7822265625,"f1":0.8689909049284057,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.9921875,"distances_sum":1956.7750117226533}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9466575091575098,"seconds":6.115064024925232e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8125,"distances_sum":2390.7442087876684}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9658138736263742,"seconds":6.156042218208313e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8046875,"distances_sum":2577.283043552092}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9347184065934071,"seconds":5.973502993583679e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.625,"distances_sum":2388.865816579164}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9255151098901104,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.6015625,"distances_sum":2323.1224517155324}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9658138736263742,"seconds":6.156042218208313e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8046875,"distances_sum":2577.283043552092}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9658138736263742,"seconds":6.156042218208313e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8046875,"distances_sum":2577.283043552092}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.330078125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.330078125,"f1":null,"seconds":3.6247074604034424e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":5.34375,"distances_sum":807.7506174232004}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3427734375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3427734375,"f1":null,"seconds":3.8780272006988525e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":5.609375,"distances_sum":819.2586402530134}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8612678987678996,"seconds":5.630776286125183e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.3359375,"distances_sum":1993.9940900007516}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7724609375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7724609375,"f1":0.8612678987678996,"seconds":5.630776286125183e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.3359375,"distances_sum":1993.9940900007516}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9548935439560444,"seconds":6.161630153656006e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.75,"distances_sum":2645.4831292896415}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9380265567765576,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.609375,"distances_sum":2483.377493868612}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8669772935397944,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.375,"distances_sum":2019.326329732688}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9548935439560444,"seconds":6.161630153656006e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.75,"distances_sum":2645.4831292896415}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.9805631868131873,"seconds":6.511807441711426e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.9375,"distances_sum":2809.384679208097}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9567198426573433,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.78125,"distances_sum":2639.3235883800476}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9658203125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9805631868131873,"seconds":6.511807441711426e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.9375,"distances_sum":2809.384679208097}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9658203125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.9805631868131873,"seconds":6.511807441711426e-6,"exhaustive_search_seconds":1.3764947652816772e-6,"evaluations":8.9375,"distances_sum":2809.384679208097}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8661609224109235,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.2734375,"distances_sum":1995.1338520896854}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5283203125, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.5283203125,"f1":null,"seconds":4.386529326438904e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.09375,"distances_sum":1270.9626110531149}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7783203125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7783203125,"f1":0.8661609224109235,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.2734375,"distances_sum":1995.1338520896854}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.90186011904762,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.421875,"distances_sum":2158.3815956874337}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9405219780219787,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.7265625,"distances_sum":2494.1028529409928}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.896484375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9405219780219787,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.7265625,"distances_sum":2494.1028529409928}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9523122710622716,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.796875,"distances_sum":2542.759208721849}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9523122710622716,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.796875,"distances_sum":2542.759208721849}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.916015625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9523122710622716,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.796875,"distances_sum":2542.759208721849}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6484375,"f1":0.7751158563658572,"seconds":4.6510249376297e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.3125,"distances_sum":1355.0565072950994}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.234375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.234375,"f1":null,"seconds":3.2335519790649414e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":5.984375,"distances_sum":524.0192709128893}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6484375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6484375,"f1":0.7751158563658572,"seconds":4.6510249376297e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.3125,"distances_sum":1355.0565072950994}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8596934315684323,"seconds":5.392357707023621e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.9921875,"distances_sum":1680.2710614537812}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.889228479853481,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.453125,"distances_sum":1856.4737532110012}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8115234375,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.8115234375,"f1":0.889228479853481,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.453125,"distances_sum":1856.4737532110012}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8924627455877465,"seconds":5.751848220825195e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.4140625,"distances_sum":1885.4374945647476}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9381098068598076,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.703125,"distances_sum":2186.7935788382397}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9512133699633704,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.84375,"distances_sum":2273.2994970342847}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9442422161172164,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7578125,"distances_sum":2242.087132089118}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9512133699633704,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.84375,"distances_sum":2273.2994970342847}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9130859375,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9512133699633704,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.84375,"distances_sum":2273.2994970342847}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1923828125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1923828125,"f1":null,"seconds":3.073364496231079e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":5.1796875,"distances_sum":447.7130997454659}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8580586080586089,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.34375,"distances_sum":1751.4489407431895}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.8580586080586089,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.34375,"distances_sum":1751.4489407431895}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.910585768398269,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7109375,"distances_sum":1983.7905154464472}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.84765625,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.84765625,"f1":0.910585768398269,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7109375,"distances_sum":1983.7905154464472}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9456673534798538,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.78125,"distances_sum":2223.0667808723097}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9463999542124548,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.765625,"distances_sum":2226.5478401957807}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9502117673992678,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7578125,"distances_sum":2274.042974455295}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9300975066600072,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.703125,"distances_sum":2152.3976241458367}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9502117673992678,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7578125,"distances_sum":2274.042974455295}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.912109375,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9502117673992678,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7578125,"distances_sum":2274.042974455295}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.423828125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.423828125,"f1":null,"seconds":3.937631845474243e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":6.3984375,"distances_sum":815.6195761101969}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.541015625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.541015625,"f1":0.6877988331113336,"seconds":4.328787326812744e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.03125,"distances_sum":1033.0720614827992}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.541015625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.541015625,"f1":0.6877988331113336,"seconds":4.328787326812744e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.03125,"distances_sum":1033.0720614827992}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5576171875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5576171875,"f1":0.7009115884115891,"seconds":4.420056939125061e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.25,"distances_sum":1083.3491375609547}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9418446137196143,"seconds":5.999580025672913e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.6953125,"distances_sum":2097.9317738805303}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6240234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6240234375,"f1":0.7589202464202471,"seconds":4.732981324195862e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.4375,"distances_sum":1201.456428710779}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8986784049284057,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.46875,"distances_sum":1818.7989269966008}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9418446137196143,"seconds":5.999580025672913e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.6953125,"distances_sum":2097.9317738805303}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9689388736263738,"seconds":6.295740604400635e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.9140625,"distances_sum":2260.204687694967}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9471642940392944,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.7265625,"distances_sum":2168.915486070169}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9689388736263738,"seconds":6.295740604400635e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.9140625,"distances_sum":2260.204687694967}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9689388736263738,"seconds":6.295740604400635e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.9140625,"distances_sum":2260.204687694967}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5634765625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5634765625,"f1":0.7018432955932963,"seconds":4.382804036140442e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.125,"distances_sum":1041.3128569581854}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4404296875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4404296875,"f1":null,"seconds":4.0512531995773315e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":6.71875,"distances_sum":795.0593305015827}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.236328125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.236328125,"f1":null,"seconds":3.473833203315735e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":6.46875,"distances_sum":449.27994744689477}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5634765625,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.5634765625,"f1":0.7018432955932963,"seconds":4.382804036140442e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.125,"distances_sum":1041.3128569581854}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.793034396159397,"seconds":5.088746547698975e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.6796875,"distances_sum":1288.3794653405455}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.818359375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.818359375,"f1":0.89509500915751,"seconds":6.0908496379852295e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.5,"distances_sum":1749.1067884257338}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9415464743589752,"seconds":6.161630153656006e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.859375,"distances_sum":2026.744376328962}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7867620226995236,"seconds":4.844740033149719e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.75,"distances_sum":1290.928881600619}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8974609375,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.8974609375,"f1":0.9415464743589752,"seconds":6.161630153656006e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.859375,"distances_sum":2026.744376328962}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9603110431235434,"seconds":6.206333637237549e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.921875,"distances_sum":2148.130009101768}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":9,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9686755952380957,"seconds":6.647780537605286e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.953125,"distances_sum":2195.024487547249}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.947393231768232,"seconds":6.0033053159713745e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8125,"distances_sum":2081.4889764759046}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9439846611721615,"seconds":6.454065442085266e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.90625,"distances_sum":2041.6999878999247}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9503121878121884,"seconds":5.93625009059906e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8359375,"distances_sum":2108.725763808563}, best_list's length: 16, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":9,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9686755952380957,"seconds":6.647780537605286e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.953125,"distances_sum":2195.024487547249}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":9,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9686755952380957,"seconds":6.647780537605286e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.953125,"distances_sum":2195.024487547249}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.20703125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.20703125,"f1":null,"seconds":3.028661012649536e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":5.546875,"distances_sum":391.7934562621598}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7872339466089474,"seconds":4.59328293800354e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":7.2578125,"distances_sum":1286.977701585909}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6669921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6669921875,"f1":0.7872339466089474,"seconds":4.59328293800354e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":7.2578125,"distances_sum":1286.977701585909}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7021484375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.7021484375,"f1":0.8149792915417923,"seconds":4.699453711509705e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":7.3515625,"distances_sum":1386.6174223246087}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.851872086247087,"seconds":4.975125193595886e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":7.609375,"distances_sum":1589.6482172489698}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.854207251082252,"seconds":4.772096872329712e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":7.609375,"distances_sum":1559.8479389028305}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.8034115190365198,"seconds":4.507601261138916e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":7.2734375,"distances_sum":1368.1718948968926}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7578125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7578125,"f1":0.854207251082252,"seconds":4.772096872329712e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":7.609375,"distances_sum":1559.8479389028305}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9317651098901104,"seconds":5.783513188362122e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.6796875,"distances_sum":1998.7768678022308}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9230800449550454,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.609375,"distances_sum":1969.279802410521}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8646155927405936,"seconds":5.17629086971283e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":7.75,"distances_sum":1633.0166418626177}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":10,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8590815434565443,"seconds":5.0086528062820435e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":7.71875,"distances_sum":1597.0042020106582}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8017578125, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8017578125,"f1":0.884146062271063,"seconds":5.478039383888245e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.2890625,"distances_sum":1762.8317086201496}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8798828125,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9317651098901104,"seconds":5.783513188362122e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.6796875,"distances_sum":1998.7768678022308}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8798828125,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9317651098901104,"seconds":5.783513188362122e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.6796875,"distances_sum":1998.7768678022308}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5615234375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5615234375,"f1":0.7043189449439454,"seconds":4.291534423828125e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.703125,"distances_sum":1006.7052493721194}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73828125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.73828125,"f1":0.8422967657342666,"seconds":4.9192458391189575e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.4765625,"distances_sum":1482.0885165605239}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4013671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4013671875,"f1":null,"seconds":3.779307007789612e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":5.4765625,"distances_sum":731.7689377505789}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.73828125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.73828125,"f1":0.8422967657342666,"seconds":4.9192458391189575e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.4765625,"distances_sum":1482.0885165605239}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9501201923076928,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.6640625,"distances_sum":2156.401754682319}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8462032758907766,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.5546875,"distances_sum":1508.7044844128943}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8683696511821521,"seconds":5.358830094337463e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.1640625,"distances_sum":1661.502217844261}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8436886030636038,"seconds":5.045905709266663e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.46875,"distances_sum":1525.8981191268367}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9501201923076928,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.6640625,"distances_sum":2156.401754682319}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9601991758241764,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8515625,"distances_sum":2161.2783737465634}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9521863553113562,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7734375,"distances_sum":2155.636657930176}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9514365842490848,"seconds":5.979090929031372e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.734375,"distances_sum":2130.7390679826963}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9601991758241764,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8515625,"distances_sum":2161.2783737465634}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9601991758241764,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8515625,"distances_sum":2161.2783737465634}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.576171875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.576171875,"f1":0.7082793942168948,"seconds":4.7031790018081665e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":7.1953125,"distances_sum":1107.7028793130721}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.193359375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.193359375,"f1":null,"seconds":3.3210963010787964e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":5.2265625,"distances_sum":353.24461140046856}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3896484375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3896484375,"f1":null,"seconds":3.861263394355774e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":5.8359375,"distances_sum":718.490782740443}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.576171875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.576171875,"f1":0.7082793942168948,"seconds":4.7031790018081665e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":7.1953125,"distances_sum":1107.7028793130721}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6748046875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6748046875,"f1":0.7946475399600407,"seconds":5.211681127548218e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":7.859375,"distances_sum":1324.4135316368693}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8532418969918978,"seconds":5.206093192100525e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.15625,"distances_sum":1571.676218834638}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7916999666999675,"seconds":4.913657903671265e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":7.8671875,"distances_sum":1306.669147675606}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.740234375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.740234375,"f1":0.8414647852147861,"seconds":5.2247196435928345e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.140625,"distances_sum":1519.620658667357}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7578125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7578125,"f1":0.8532418969918978,"seconds":5.206093192100525e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.15625,"distances_sum":1571.676218834638}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9423992673992679,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.765625,"distances_sum":2091.703535750155}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9612751831501835,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.8359375,"distances_sum":2205.480366720674}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.942513736263737,"seconds":5.861744284629822e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.8671875,"distances_sum":2053.999402703325}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9067536630036638,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.5,"distances_sum":1845.2780878272931}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9567193223443229,"seconds":6.120651960372925e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.859375,"distances_sum":2155.066269654723}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9612751831501835,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.8359375,"distances_sum":2205.480366720674}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9612751831501835,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.6707926988601685e-6,"evaluations":8.8359375,"distances_sum":2205.480366720674}}, n: 9
mean(cfft.distances) = 0.33582827277231503
mean(cdnet.distances) = 0.365973196474887
mean(crand.distances) = 0.334317432356268
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8933333333333332
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8822222222222221
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9022222222222224
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9044444444444445
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8666666666666667
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.88
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9444444444444443
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8755555555555556
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9355555555555556
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9444444444444443
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8911111111111111
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9155555555555556
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9222222222222222
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8688888888888889
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9244444444444445
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8733333333333334
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9355555555555556
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8933333333333332
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8911111111111111
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9311111111111111
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8822222222222224
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9066666666666666
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8933333333333332
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9133333333333334
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9044444444444445
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 3, 1, 2]
acc = 0.94
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 3, 1, 2]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.5489980874458948] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 5, 11]]
** centroid: 1, normalized-entropy: 0.8960382325345574, [(2, 5), (3, 11)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 26, 4]]
** centroid: 6, normalized-entropy: 0.5665095065529052, [(2, 26), (3, 4)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
finished with 15 centroids; started with 12
acc = 0.9533333333333334
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.22516154636091948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22516154636091948, 0.16506679107395894] ***
*** starting iteration: 2; err: [Inf, 0.22516154636091948, 0.16506679107395894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22516154636091948, 0.16506679107395894, 0.1561733204661659] ***
*** starting iteration: 3; err: [Inf, 0.22516154636091948, 0.16506679107395894, 0.1561733204661659] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22516154636091948, 0.16506679107395894, 0.1561733204661659, 0.15235943903562027] ***
*** starting iteration: 4; err: [Inf, 0.22516154636091948, 0.16506679107395894, 0.1561733204661659, 0.15235943903562027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22516154636091948, 0.16506679107395894, 0.1561733204661659, 0.15235943903562027, 0.1497448375490536] ***
*** starting iteration: 5; err: [Inf, 0.22516154636091948, 0.16506679107395894, 0.1561733204661659, 0.15235943903562027, 0.1497448375490536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22516154636091948, 0.16506679107395894, 0.1561733204661659, 0.15235943903562027, 0.1497448375490536, 0.1477941061179895] ***
*** starting iteration: 6; err: [Inf, 0.22516154636091948, 0.16506679107395894, 0.1561733204661659, 0.15235943903562027, 0.1497448375490536, 0.1477941061179895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22516154636091948, 0.16506679107395894, 0.1561733204661659, 0.15235943903562027, 0.1497448375490536, 0.1477941061179895, 0.14711219891654076] ***
*** finished computation of 7 references, err: [Inf, 0.22516154636091948, 0.16506679107395894, 0.1561733204661659, 0.15235943903562027, 0.1497448375490536, 0.1477941061179895, 0.14711219891654076] ***
*** center 1: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [99, 19, 0]]
** centroid: 2, normalized-entropy: 0.6367368786558286, [(1, 99), (2, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [74, 3, 0]]
** centroid: 3, normalized-entropy: 0.23750814382859295, [(1, 74), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [2, 72, 0]]
** centroid: 4, normalized-entropy: 0.1792560669283214, [(1, 2), (2, 72)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 108, 22]]
** centroid: 5, normalized-entropy: 0.6559420757694151, [(2, 108), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [56, 41, 0]]
** centroid: 6, normalized-entropy: 0.9826808027585991, [(1, 56), (2, 41)]
*** center 7: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20218594668449852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20218594668449852, 0.16102825943520432] ***
*** starting iteration: 2; err: [Inf, 0.20218594668449852, 0.16102825943520432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20218594668449852, 0.16102825943520432, 0.15534141199668874] ***
*** starting iteration: 3; err: [Inf, 0.20218594668449852, 0.16102825943520432, 0.15534141199668874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20218594668449852, 0.16102825943520432, 0.15534141199668874, 0.15315397496561747] ***
*** finished computation of 7 references, err: [Inf, 0.20218594668449852, 0.16102825943520432, 0.15534141199668874, 0.15315397496561747] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 87, 22]]
** centroid: 2, normalized-entropy: 0.725582675704817, [(2, 87), (3, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 36, 0]]
** centroid: 4, normalized-entropy: 0.8966554495712067, [(1, 79), (2, 36)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 59, 0]]
** centroid: 5, normalized-entropy: 0.9907353985141654, [(1, 47), (2, 59)]
*** center 6: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 61, 0]]
** centroid: 7, normalized-entropy: 0.38705142139219795, [(1, 5), (2, 61)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2088923623709977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2088923623709977, 0.1523981475078597] ***
*** starting iteration: 2; err: [Inf, 0.2088923623709977, 0.1523981475078597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2088923623709977, 0.1523981475078597, 0.14938878738831007] ***
*** starting iteration: 3; err: [Inf, 0.2088923623709977, 0.1523981475078597, 0.14938878738831007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2088923623709977, 0.1523981475078597, 0.14938878738831007, 0.14881883805263033] ***
*** finished computation of 7 references, err: [Inf, 0.2088923623709977, 0.1523981475078597, 0.14938878738831007, 0.14881883805263033] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 102, 25]]
** centroid: 1, normalized-entropy: 0.7155839810598772, [(2, 102), (3, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [67, 4, 0]]
** centroid: 3, normalized-entropy: 0.3127333763966432, [(1, 67), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [103, 30, 0]]
** centroid: 4, normalized-entropy: 0.7701976823573773, [(1, 103), (2, 30)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 45, 0]]
** centroid: 5, normalized-entropy: 0.9980008838722993, [(1, 50), (2, 45)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 80, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18684339063518543] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18684339063518543, 0.1509682185053574] ***
*** starting iteration: 2; err: [Inf, 0.18684339063518543, 0.1509682185053574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18684339063518543, 0.1509682185053574, 0.1462422065671416] ***
*** starting iteration: 3; err: [Inf, 0.18684339063518543, 0.1509682185053574, 0.1462422065671416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18684339063518543, 0.1509682185053574, 0.1462422065671416, 0.145237497657934] ***
*** finished computation of 7 references, err: [Inf, 0.18684339063518543, 0.1509682185053574, 0.1462422065671416, 0.145237497657934] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [14, 93, 0]]
** centroid: 1, normalized-entropy: 0.5597404598417697, [(1, 14), (2, 93)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [82, 10, 0]]
** centroid: 2, normalized-entropy: 0.49596907206183377, [(1, 82), (2, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 57, 26]]
** centroid: 4, normalized-entropy: 0.8968928834064589, [(2, 57), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [84, 5, 0]]
** centroid: 5, normalized-entropy: 0.3120895659343452, [(1, 84), (2, 5)]
*** center 6: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 97, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23908579110534298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23908579110534298, 0.19482580607326272] ***
*** finished computation of 7 references, err: [Inf, 0.23908579110534298, 0.19482580607326272] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 119, 0]]
** centroid: 1, normalized-entropy: 0.24376925951524556, [(1, 5), (2, 119)]
*** center 2: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [78, 36, 0]]
** centroid: 3, normalized-entropy: 0.8997437586982626, [(1, 78), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 27, 0]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(1, 54), (2, 27)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 61, 22]]
** centroid: 5, normalized-entropy: 0.8342867421739538, [(2, 61), (3, 22)]
*** center 6: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23180144529851124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23180144529851124, 0.19319020812099483] ***
*** finished computation of 7 references, err: [Inf, 0.23180144529851124, 0.19319020812099483] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [124, 4, 0]]
** centroid: 1, normalized-entropy: 0.2006223243127146, [(1, 124), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [69, 22, 0]]
** centroid: 2, normalized-entropy: 0.7979519684655734, [(1, 69), (2, 22)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 22, 26]]
** centroid: 3, normalized-entropy: 0.9949848281859699, [(2, 22), (3, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 29, 0]]
** centroid: 5, normalized-entropy: 0.8649832752018335, [(1, 72), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 78, 0]]
** centroid: 6, normalized-entropy: 0.1686609314966701, [(1, 2), (2, 78)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 106, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.244036671236392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.244036671236392, 0.19109199657293408] ***
*** finished computation of 7 references, err: [Inf, 0.244036671236392, 0.19109199657293408] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 75, 25]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 75), (3, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 16, 0]]
** centroid: 3, normalized-entropy: 0.7531979910695015, [(1, 58), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [82, 14, 0]]
** centroid: 4, normalized-entropy: 0.5993142373098089, [(1, 82), (2, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 65, 0]]
** centroid: 5, normalized-entropy: 0.9999566519593042, [(1, 64), (2, 65)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 92, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25382127648487957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25382127648487957, 0.19462379581027864] ***
*** starting iteration: 2; err: [Inf, 0.25382127648487957, 0.19462379581027864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25382127648487957, 0.19462379581027864, 0.19016168661298113] ***
*** starting iteration: 3; err: [Inf, 0.25382127648487957, 0.19462379581027864, 0.19016168661298113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25382127648487957, 0.19462379581027864, 0.19016168661298113, 0.18892418760554613] ***
*** starting iteration: 4; err: [Inf, 0.25382127648487957, 0.19462379581027864, 0.19016168661298113, 0.18892418760554613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25382127648487957, 0.19462379581027864, 0.19016168661298113, 0.18892418760554613, 0.1884008027800546] ***
*** finished computation of 7 references, err: [Inf, 0.25382127648487957, 0.19462379581027864, 0.19016168661298113, 0.18892418760554613, 0.1884008027800546] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [64, 28, 0]]
** centroid: 1, normalized-entropy: 0.8865408928220899, [(1, 64), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [107, 2, 0]]
** centroid: 2, normalized-entropy: 0.13206535647488304, [(1, 107), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 90, 22]]
** centroid: 3, normalized-entropy: 0.7147274731317893, [(2, 90), (3, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [59, 47, 0]]
** centroid: 5, normalized-entropy: 0.9907353985141654, [(1, 59), (2, 47)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 76, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22706281562716976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22706281562716976, 0.18988561851979197] ***
*** starting iteration: 2; err: [Inf, 0.22706281562716976, 0.18988561851979197] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22706281562716976, 0.18988561851979197, 0.18677799093133507] ***
*** starting iteration: 3; err: [Inf, 0.22706281562716976, 0.18988561851979197, 0.18677799093133507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22706281562716976, 0.18988561851979197, 0.18677799093133507, 0.1858649781724994] ***
*** finished computation of 7 references, err: [Inf, 0.22706281562716976, 0.18988561851979197, 0.18677799093133507, 0.1858649781724994] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [15, 83, 0]]
** centroid: 1, normalized-entropy: 0.6174482957894681, [(1, 15), (2, 83)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [60, 17, 0]]
** centroid: 2, normalized-entropy: 0.7615877869576693, [(1, 60), (2, 17)]
*** center 3: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 61, 26]]
** centroid: 4, normalized-entropy: 0.8798813089176428, [(2, 61), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 100, 0]]
** centroid: 5, normalized-entropy: 0.6951360991052256, [(1, 23), (2, 100)]
*** center 6: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24024980264957407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24024980264957407, 0.18899147091237925] ***
*** starting iteration: 2; err: [Inf, 0.24024980264957407, 0.18899147091237925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24024980264957407, 0.18899147091237925, 0.18424287860699254] ***
*** starting iteration: 3; err: [Inf, 0.24024980264957407, 0.18899147091237925, 0.18424287860699254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24024980264957407, 0.18899147091237925, 0.18424287860699254, 0.18329096813595433] ***
*** finished computation of 7 references, err: [Inf, 0.24024980264957407, 0.18899147091237925, 0.18424287860699254, 0.18329096813595433] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [105, 4, 0]]
** centroid: 1, normalized-entropy: 0.22693864262148727, [(1, 105), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [82, 13, 0]]
** centroid: 2, normalized-entropy: 0.5759084429149787, [(1, 82), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 68, 26]]
** centroid: 3, normalized-entropy: 0.8507707040532602, [(2, 68), (3, 26)]
*** center 4: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [22, 98, 0]]
** centroid: 5, normalized-entropy: 0.6873150928309273, [(1, 22), (2, 98)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 79, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36533004865078283] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36533004865078283, 0.30309915687684696] ***
*** starting iteration: 2; err: [Inf, 0.36533004865078283, 0.30309915687684696] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36533004865078283, 0.30309915687684696, 0.29771355247018755] ***
*** starting iteration: 3; err: [Inf, 0.36533004865078283, 0.30309915687684696, 0.29771355247018755] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36533004865078283, 0.30309915687684696, 0.29771355247018755, 0.29667874158278956] ***
*** starting iteration: 4; err: [Inf, 0.36533004865078283, 0.30309915687684696, 0.29771355247018755, 0.29667874158278956] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36533004865078283, 0.30309915687684696, 0.29771355247018755, 0.29667874158278956, 0.29655990130953247] ***
*** finished computation of 3 references, err: [Inf, 0.36533004865078283, 0.30309915687684696, 0.29771355247018755, 0.29667874158278956, 0.29655990130953247] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [94, 171, 22]]
** centroid: 1, normalized-entropy: 0.7928097532256788, [(1, 94), (2, 171), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [184, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [123, 72, 0]]
** centroid: 3, normalized-entropy: 0.9500796252338518, [(1, 123), (2, 72)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39273044132282664] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39273044132282664, 0.29870932279126733] ***
*** starting iteration: 2; err: [Inf, 0.39273044132282664, 0.29870932279126733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39273044132282664, 0.29870932279126733, 0.2948171392235363] ***
*** starting iteration: 3; err: [Inf, 0.39273044132282664, 0.29870932279126733, 0.2948171392235363] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39273044132282664, 0.29870932279126733, 0.2948171392235363, 0.29422937313477315] ***
*** finished computation of 3 references, err: [Inf, 0.39273044132282664, 0.29870932279126733, 0.2948171392235363, 0.29422937313477315] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [87, 177, 26]]
** centroid: 1, normalized-entropy: 0.7998882531199837, [(1, 87), (2, 177), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [99, 84, 0]]
** centroid: 2, normalized-entropy: 0.995148095654003, [(1, 99), (2, 84)]
*** center 3: selecting labels [1] (freq >= 1) [from [194, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37446563817892986] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37446563817892986, 0.3073433029341108] ***
*** starting iteration: 2; err: [Inf, 0.37446563817892986, 0.3073433029341108] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37446563817892986, 0.3073433029341108, 0.3003600468241918] ***
*** starting iteration: 3; err: [Inf, 0.37446563817892986, 0.3073433029341108, 0.3003600468241918] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37446563817892986, 0.3073433029341108, 0.3003600468241918, 0.29858225155510065] ***
*** starting iteration: 4; err: [Inf, 0.37446563817892986, 0.3073433029341108, 0.3003600468241918, 0.29858225155510065] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37446563817892986, 0.3073433029341108, 0.3003600468241918, 0.29858225155510065, 0.29781359439992205] ***
*** finished computation of 3 references, err: [Inf, 0.37446563817892986, 0.3073433029341108, 0.3003600468241918, 0.29858225155510065, 0.29781359439992205] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [91, 165, 26]]
** centroid: 1, normalized-entropy: 0.8177242731369924, [(1, 91), (2, 165), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [106, 97, 0]]
** centroid: 2, normalized-entropy: 0.9985816616391148, [(1, 106), (2, 97)]
*** center 3: selecting labels [1] (freq >= 1) [from [182, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32334631365967226] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32334631365967226, 0.24536772844781568] ***
*** starting iteration: 2; err: [Inf, 0.32334631365967226, 0.24536772844781568] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32334631365967226, 0.24536772844781568, 0.24188369652675884] ***
*** starting iteration: 3; err: [Inf, 0.32334631365967226, 0.24536772844781568, 0.24188369652675884] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32334631365967226, 0.24536772844781568, 0.24188369652675884, 0.24086178866055635] ***
*** finished computation of 3 references, err: [Inf, 0.32334631365967226, 0.24536772844781568, 0.24188369652675884, 0.24086178866055635] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [91, 174, 22]]
** centroid: 1, normalized-entropy: 0.7868800062505568, [(1, 91), (2, 174), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [186, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [124, 69, 0]]
** centroid: 3, normalized-entropy: 0.9405993688449394, [(1, 124), (2, 69)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.29623198487154995] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29623198487154995, 0.24430769725494655] ***
*** starting iteration: 2; err: [Inf, 0.29623198487154995, 0.24430769725494655] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29623198487154995, 0.24430769725494655, 0.23696185767823744] ***
*** starting iteration: 3; err: [Inf, 0.29623198487154995, 0.24430769725494655, 0.23696185767823744] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29623198487154995, 0.24430769725494655, 0.23696185767823744, 0.23533835143515508] ***
*** finished computation of 3 references, err: [Inf, 0.29623198487154995, 0.24430769725494655, 0.23696185767823744, 0.23533835143515508] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [92, 180, 26]]
** centroid: 1, normalized-entropy: 0.8011527572658103, [(1, 92), (2, 180), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [189, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [99, 81, 0]]
** centroid: 3, normalized-entropy: 0.9927744539878083, [(1, 99), (2, 81)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32191185681554285] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32191185681554285, 0.2516241675630949] ***
*** starting iteration: 2; err: [Inf, 0.32191185681554285, 0.2516241675630949] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32191185681554285, 0.2516241675630949, 0.24346044422664875] ***
*** starting iteration: 3; err: [Inf, 0.32191185681554285, 0.2516241675630949, 0.24346044422664875] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32191185681554285, 0.2516241675630949, 0.24346044422664875, 0.2420795241955841] ***
*** finished computation of 3 references, err: [Inf, 0.32191185681554285, 0.2516241675630949, 0.24346044422664875, 0.2420795241955841] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [251, 19, 0]]
** centroid: 1, normalized-entropy: 0.36730428298760165, [(1, 251), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [128, 50, 0]]
** centroid: 2, normalized-entropy: 0.8566727035015875, [(1, 128), (2, 50)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 193, 26]]
** centroid: 3, normalized-entropy: 0.5256745442385802, [(2, 193), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.22400546744444882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22400546744444882, 0.17658947934599026] ***
*** starting iteration: 2; err: [Inf, 0.22400546744444882, 0.17658947934599026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22400546744444882, 0.17658947934599026, 0.16155574543225668] ***
*** starting iteration: 3; err: [Inf, 0.22400546744444882, 0.17658947934599026, 0.16155574543225668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22400546744444882, 0.17658947934599026, 0.16155574543225668, 0.14854182316146713] ***
*** starting iteration: 4; err: [Inf, 0.22400546744444882, 0.17658947934599026, 0.16155574543225668, 0.14854182316146713] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22400546744444882, 0.17658947934599026, 0.16155574543225668, 0.14854182316146713, 0.14327350170023437] ***
*** starting iteration: 5; err: [Inf, 0.22400546744444882, 0.17658947934599026, 0.16155574543225668, 0.14854182316146713, 0.14327350170023437] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22400546744444882, 0.17658947934599026, 0.16155574543225668, 0.14854182316146713, 0.14327350170023437, 0.1416191132962592] ***
*** starting iteration: 6; err: [Inf, 0.22400546744444882, 0.17658947934599026, 0.16155574543225668, 0.14854182316146713, 0.14327350170023437, 0.1416191132962592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22400546744444882, 0.17658947934599026, 0.16155574543225668, 0.14854182316146713, 0.14327350170023437, 0.1416191132962592, 0.14107667135543886] ***
*** finished computation of 7 references, err: [Inf, 0.22400546744444882, 0.17658947934599026, 0.16155574543225668, 0.14854182316146713, 0.14327350170023437, 0.1416191132962592, 0.14107667135543886] ***
*** center 1: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [87, 10, 0]]
** centroid: 2, normalized-entropy: 0.478723511385963, [(1, 87), (2, 10)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [8, 97, 0]]
** centroid: 3, normalized-entropy: 0.38861174916944274, [(1, 8), (2, 97)]
*** center 4: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 84, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [62, 29, 0]]
** centroid: 6, normalized-entropy: 0.9029416720373132, [(1, 62), (2, 29)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 41, 26]]
** centroid: 7, normalized-entropy: 0.9635359835770286, [(2, 41), (3, 26)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3033189046297172] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3033189046297172, 0.18253898679458913] ***
*** starting iteration: 2; err: [Inf, 0.3033189046297172, 0.18253898679458913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3033189046297172, 0.18253898679458913, 0.16495711891597759] ***
*** starting iteration: 3; err: [Inf, 0.3033189046297172, 0.18253898679458913, 0.16495711891597759] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3033189046297172, 0.18253898679458913, 0.16495711891597759, 0.15793698888294389] ***
*** starting iteration: 4; err: [Inf, 0.3033189046297172, 0.18253898679458913, 0.16495711891597759, 0.15793698888294389] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3033189046297172, 0.18253898679458913, 0.16495711891597759, 0.15793698888294389, 0.1531399168699667] ***
*** starting iteration: 5; err: [Inf, 0.3033189046297172, 0.18253898679458913, 0.16495711891597759, 0.15793698888294389, 0.1531399168699667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3033189046297172, 0.18253898679458913, 0.16495711891597759, 0.15793698888294389, 0.1531399168699667, 0.14973609039079638] ***
*** starting iteration: 6; err: [Inf, 0.3033189046297172, 0.18253898679458913, 0.16495711891597759, 0.15793698888294389, 0.1531399168699667, 0.14973609039079638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3033189046297172, 0.18253898679458913, 0.16495711891597759, 0.15793698888294389, 0.1531399168699667, 0.14973609039079638, 0.14821344257696814] ***
*** starting iteration: 7; err: [Inf, 0.3033189046297172, 0.18253898679458913, 0.16495711891597759, 0.15793698888294389, 0.1531399168699667, 0.14973609039079638, 0.14821344257696814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3033189046297172, 0.18253898679458913, 0.16495711891597759, 0.15793698888294389, 0.1531399168699667, 0.14973609039079638, 0.14821344257696814, 0.14776324419754333] ***
*** finished computation of 7 references, err: [Inf, 0.3033189046297172, 0.18253898679458913, 0.16495711891597759, 0.15793698888294389, 0.1531399168699667, 0.14973609039079638, 0.14821344257696814, 0.14776324419754333] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [68, 18, 0]]
** centroid: 1, normalized-entropy: 0.7401470427139037, [(1, 68), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [76, 7, 0]]
** centroid: 2, normalized-entropy: 0.4172806906708316, [(1, 76), (2, 7)]
*** center 3: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [92, 36, 0]]
** centroid: 4, normalized-entropy: 0.8571484374283717, [(1, 92), (2, 36)]
*** center 5: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 103, 26]]
** centroid: 6, normalized-entropy: 0.7250180540934875, [(2, 103), (3, 26)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 98, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3957251092242832] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3957251092242832, 0.2649188551047744] ***
*** starting iteration: 2; err: [Inf, 0.3957251092242832, 0.2649188551047744] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3957251092242832, 0.2649188551047744, 0.24592409761519068] ***
*** starting iteration: 3; err: [Inf, 0.3957251092242832, 0.2649188551047744, 0.24592409761519068] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3957251092242832, 0.2649188551047744, 0.24592409761519068, 0.24181353992030202] ***
*** finished computation of 3 references, err: [Inf, 0.3957251092242832, 0.2649188551047744, 0.24592409761519068, 0.24181353992030202] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [115, 162, 21]]
** centroid: 1, normalized-entropy: 0.8062064786856641, [(1, 115), (2, 162), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [171, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [115, 81, 1]]
** centroid: 3, normalized-entropy: 0.64305193932807, [(1, 115), (2, 81), (3, 1)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30265479535283313] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30265479535283313, 0.2547814532712303] ***
*** starting iteration: 2; err: [Inf, 0.30265479535283313, 0.2547814532712303] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30265479535283313, 0.2547814532712303, 0.24086196618810898] ***
*** starting iteration: 3; err: [Inf, 0.30265479535283313, 0.2547814532712303, 0.24086196618810898] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30265479535283313, 0.2547814532712303, 0.24086196618810898, 0.23748970297032568] ***
*** finished computation of 3 references, err: [Inf, 0.30265479535283313, 0.2547814532712303, 0.24086196618810898, 0.23748970297032568] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [14, 174, 26]]
** centroid: 1, normalized-entropy: 0.5486357733102483, [(1, 14), (2, 174), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [249, 4, 0]]
** centroid: 2, normalized-entropy: 0.1172209221846178, [(1, 249), (2, 4)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [117, 83, 0]]
** centroid: 3, normalized-entropy: 0.9790514648094594, [(1, 117), (2, 83)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27811471155650547] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27811471155650547, 0.2446290374813096] ***
*** starting iteration: 2; err: [Inf, 0.27811471155650547, 0.2446290374813096] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27811471155650547, 0.2446290374813096, 0.24177179353051947] ***
*** starting iteration: 3; err: [Inf, 0.27811471155650547, 0.2446290374813096, 0.24177179353051947] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27811471155650547, 0.2446290374813096, 0.24177179353051947, 0.24129773508701502] ***
*** finished computation of 3 references, err: [Inf, 0.27811471155650547, 0.2446290374813096, 0.24177179353051947, 0.24129773508701502] ***
*** center 1: selecting labels [1] (freq >= 1) [from [237, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [6, 208, 26]]
** centroid: 2, normalized-entropy: 0.41599584066053713, [(1, 6), (2, 208), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [136, 54, 0]]
** centroid: 3, normalized-entropy: 0.8611247055579295, [(1, 136), (2, 54)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3720331838894244] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3720331838894244, 0.3026716268436799] ***
*** starting iteration: 2; err: [Inf, 0.3720331838894244, 0.3026716268436799] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3720331838894244, 0.3026716268436799, 0.2999131480125604] ***
*** starting iteration: 3; err: [Inf, 0.3720331838894244, 0.3026716268436799, 0.2999131480125604] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3720331838894244, 0.3026716268436799, 0.2999131480125604, 0.29984184079621734] ***
*** finished computation of 3 references, err: [Inf, 0.3720331838894244, 0.3026716268436799, 0.2999131480125604, 0.29984184079621734] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [166, 34, 0]]
** centroid: 1, normalized-entropy: 0.6577047787442196, [(1, 166), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [234, 17, 0]]
** centroid: 2, normalized-entropy: 0.3573913121827543, [(1, 234), (2, 17)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [1, 192, 22]]
** centroid: 3, normalized-entropy: 0.3270304557129925, [(1, 1), (2, 192), (3, 22)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.44327903023992166] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44327903023992166, 0.3364014110934252] ***
*** starting iteration: 2; err: [Inf, 0.44327903023992166, 0.3364014110934252] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44327903023992166, 0.3364014110934252, 0.3341831460028239] ***
*** starting iteration: 3; err: [Inf, 0.44327903023992166, 0.3364014110934252, 0.3341831460028239] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44327903023992166, 0.3364014110934252, 0.3341831460028239, 0.3333636359681656] ***
*** finished computation of 3 references, err: [Inf, 0.44327903023992166, 0.3364014110934252, 0.3341831460028239, 0.3333636359681656] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [118, 102, 0]]
** centroid: 1, normalized-entropy: 0.9961812375892514, [(1, 118), (2, 102)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [224, 21, 0]]
** centroid: 2, normalized-entropy: 0.4220005168831531, [(1, 224), (2, 21)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [38, 138, 26]]
** centroid: 3, normalized-entropy: 0.7632053205080882, [(1, 38), (2, 138), (3, 26)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4580130767778143] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4580130767778143, 0.34986830478592745] ***
*** starting iteration: 2; err: [Inf, 0.4580130767778143, 0.34986830478592745] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4580130767778143, 0.34986830478592745, 0.30007573759470924] ***
*** starting iteration: 3; err: [Inf, 0.4580130767778143, 0.34986830478592745, 0.30007573759470924] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4580130767778143, 0.34986830478592745, 0.30007573759470924, 0.2982380827260518] ***
*** starting iteration: 4; err: [Inf, 0.4580130767778143, 0.34986830478592745, 0.30007573759470924, 0.2982380827260518] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4580130767778143, 0.34986830478592745, 0.30007573759470924, 0.2982380827260518, 0.2978360574731584] ***
*** finished computation of 3 references, err: [Inf, 0.4580130767778143, 0.34986830478592745, 0.30007573759470924, 0.2982380827260518, 0.2978360574731584] ***
*** center 1: selecting labels [1] (freq >= 1) [from [243, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [130, 58, 0]]
** centroid: 2, normalized-entropy: 0.8914467590654126, [(1, 130), (2, 58)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [6, 204, 26]]
** centroid: 3, normalized-entropy: 0.420818869664199, [(1, 6), (2, 204), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.46837184352761096] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46837184352761096, 0.3479848299622983] ***
*** starting iteration: 2; err: [Inf, 0.46837184352761096, 0.3479848299622983] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46837184352761096, 0.3479848299622983, 0.3363322086154005] ***
*** starting iteration: 3; err: [Inf, 0.46837184352761096, 0.3479848299622983, 0.3363322086154005] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46837184352761096, 0.3479848299622983, 0.3363322086154005, 0.33385210511674573] ***
*** finished computation of 3 references, err: [Inf, 0.46837184352761096, 0.3479848299622983, 0.3363322086154005, 0.33385210511674573] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [86, 178, 22]]
** centroid: 1, normalized-entropy: 0.7771386506892476, [(1, 86), (2, 178), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [136, 65, 0]]
** centroid: 2, normalized-entropy: 0.9080225655227313, [(1, 136), (2, 65)]
*** center 3: selecting labels [1] (freq >= 2) [from [179, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3823161417844592] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3823161417844592, 0.3510737533177036] ***
*** starting iteration: 2; err: [Inf, 0.3823161417844592, 0.3510737533177036] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3823161417844592, 0.3510737533177036, 0.3389026922979455] ***
*** starting iteration: 3; err: [Inf, 0.3823161417844592, 0.3510737533177036, 0.3389026922979455] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3823161417844592, 0.3510737533177036, 0.3389026922979455, 0.3301738671961239] ***
*** finished computation of 3 references, err: [Inf, 0.3823161417844592, 0.3510737533177036, 0.3389026922979455, 0.3301738671961239] ***
*** center 1: selecting labels [1] (freq >= 2) [from [175, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [96, 156, 26]]
** centroid: 2, normalized-entropy: 0.8310457817656324, [(1, 96), (2, 156), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [109, 105, 0]]
** centroid: 3, normalized-entropy: 0.9997479641785869, [(1, 109), (2, 105)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4262067252467072] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4262067252467072, 0.33378639417062367] ***
*** starting iteration: 2; err: [Inf, 0.4262067252467072, 0.33378639417062367] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4262067252467072, 0.33378639417062367, 0.32909410389494903] ***
*** starting iteration: 3; err: [Inf, 0.4262067252467072, 0.33378639417062367, 0.32909410389494903] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4262067252467072, 0.33378639417062367, 0.32909410389494903, 0.3248759140403637] ***
*** finished computation of 3 references, err: [Inf, 0.4262067252467072, 0.33378639417062367, 0.32909410389494903, 0.3248759140403637] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [80, 115, 26]]
** centroid: 1, normalized-entropy: 0.8733935727030333, [(1, 80), (2, 115), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [232, 3, 0]]
** centroid: 2, normalized-entropy: 0.09861703860006277, [(1, 232), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [67, 144, 0]]
** centroid: 3, normalized-entropy: 0.901681293122523, [(1, 67), (2, 144)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9540079001156845, 0.917018815222408, 0.9150288012563461, 0.8950177722632812, 0.8910197622772472, 0.8860177542812272, 0.8829997662332992, 0.8799907692123261, 0.8430136723549898, 0.7899726073378769, 0.7850215484946023]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9540079001156845
finished with 12
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.22040437368673269] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22040437368673269, 0.19445870337482016] ***
*** starting iteration: 2; err: [Inf, 0.22040437368673269, 0.19445870337482016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22040437368673269, 0.19445870337482016, 0.19124337968517197] ***
*** starting iteration: 3; err: [Inf, 0.22040437368673269, 0.19445870337482016, 0.19124337968517197] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22040437368673269, 0.19445870337482016, 0.19124337968517197, 0.19010405198533883] ***
*** finished computation of 7 references, err: [Inf, 0.22040437368673269, 0.19445870337482016, 0.19124337968517197, 0.19010405198533883] ***
*** center 1: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [76, 12, 0]]
** centroid: 2, normalized-entropy: 0.5746356978376794, [(1, 76), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 61, 22]]
** centroid: 3, normalized-entropy: 0.8342867421739538, [(2, 61), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 93, 0]]
** centroid: 5, normalized-entropy: 0.7573958968817643, [(1, 26), (2, 93)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 77, 0]]
** centroid: 6, normalized-entropy: 0.2307099556914763, [(1, 3), (2, 77)]
*** center 7: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22619278783347274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22619278783347274, 0.1932141206700584] ***
*** starting iteration: 2; err: [Inf, 0.22619278783347274, 0.1932141206700584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22619278783347274, 0.1932141206700584, 0.1899617864810366] ***
*** starting iteration: 3; err: [Inf, 0.22619278783347274, 0.1932141206700584, 0.1899617864810366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22619278783347274, 0.1932141206700584, 0.1899617864810366, 0.1886366899467368] ***
*** finished computation of 7 references, err: [Inf, 0.22619278783347274, 0.1932141206700584, 0.1899617864810366, 0.1886366899467368] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 97, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [76, 19, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 76), (2, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 82, 26]]
** centroid: 4, normalized-entropy: 0.7962699368824384, [(2, 82), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 60, 0]]
** centroid: 5, normalized-entropy: 0.9893257549491837, [(1, 47), (2, 60)]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [114, 3, 0]]
** centroid: 7, normalized-entropy: 0.17203694935311387, [(1, 114), (2, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2356972489799226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2356972489799226, 0.18824748818467985] ***
*** starting iteration: 2; err: [Inf, 0.2356972489799226, 0.18824748818467985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2356972489799226, 0.18824748818467985, 0.1843517473312388] ***
*** starting iteration: 3; err: [Inf, 0.2356972489799226, 0.18824748818467985, 0.1843517473312388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2356972489799226, 0.18824748818467985, 0.1843517473312388, 0.18361234460710205] ***
*** finished computation of 7 references, err: [Inf, 0.2356972489799226, 0.18824748818467985, 0.1843517473312388, 0.18361234460710205] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [91, 3, 0]]
** centroid: 1, normalized-entropy: 0.2039058755048202, [(1, 91), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [92, 5, 0]]
** centroid: 2, normalized-entropy: 0.29292995113885967, [(1, 92), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 58, 26]]
** centroid: 3, normalized-entropy: 0.8926230133850988, [(2, 58), (3, 26)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [88, 7, 0]]
** centroid: 4, normalized-entropy: 0.3795243778626806, [(1, 88), (2, 7)]
*** center 5: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 101, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 88, 0]]
** centroid: 7, normalized-entropy: 0.3795243778626806, [(1, 7), (2, 88)]
finished with 8 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9540079001156845, 0.9250208292124459, 0.917018815222408, 0.9150288012563461, 0.8950177722632812, 0.8910197622772472, 0.8860177542812272, 0.8829997662332992, 0.8799907692123261, 0.8430136723549898, 0.7899726073378769, 0.7850215484946023]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9540079001156845
finished with 13
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.28279473930009985] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28279473930009985, 0.2436736494410425] ***
*** starting iteration: 2; err: [Inf, 0.28279473930009985, 0.2436736494410425] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28279473930009985, 0.2436736494410425, 0.24068101884709117] ***
*** starting iteration: 3; err: [Inf, 0.28279473930009985, 0.2436736494410425, 0.24068101884709117] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28279473930009985, 0.2436736494410425, 0.24068101884709117, 0.24010230362829235] ***
*** finished computation of 3 references, err: [Inf, 0.28279473930009985, 0.2436736494410425, 0.24068101884709117, 0.24010230362829235] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [135, 68, 0]]
** centroid: 1, normalized-entropy: 0.919929125033032, [(1, 135), (2, 68)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [21, 175, 22]]
** centroid: 2, normalized-entropy: 0.5763921762445023, [(1, 21), (2, 175), (3, 22)]
*** center 3: selecting labels [1] (freq >= 1) [from [245, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.351083157803288] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.351083157803288, 0.24256257245539112] ***
*** starting iteration: 2; err: [Inf, 0.351083157803288, 0.24256257245539112] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.351083157803288, 0.24256257245539112, 0.23641628283320337] ***
*** starting iteration: 3; err: [Inf, 0.351083157803288, 0.24256257245539112, 0.23641628283320337] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.351083157803288, 0.24256257245539112, 0.23641628283320337, 0.2350366696480779] ***
*** starting iteration: 4; err: [Inf, 0.351083157803288, 0.24256257245539112, 0.23641628283320337, 0.2350366696480779] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.351083157803288, 0.24256257245539112, 0.23641628283320337, 0.2350366696480779, 0.23495942346941584] ***
*** finished computation of 3 references, err: [Inf, 0.351083157803288, 0.24256257245539112, 0.23641628283320337, 0.2350366696480779, 0.23495942346941584] ***
*** center 1: selecting labels [1] (freq >= 1) [from [196, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [65, 171, 26]]
** centroid: 2, normalized-entropy: 0.7769555693415706, [(1, 65), (2, 171), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [119, 90, 0]]
** centroid: 3, normalized-entropy: 0.9860668234525767, [(1, 119), (2, 90)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.26693833881299356] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26693833881299356, 0.23697307522686525] ***
*** starting iteration: 2; err: [Inf, 0.26693833881299356, 0.23697307522686525] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26693833881299356, 0.23697307522686525, 0.23568032324213584] ***
*** starting iteration: 3; err: [Inf, 0.26693833881299356, 0.23697307522686525, 0.23568032324213584] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26693833881299356, 0.23697307522686525, 0.23568032324213584, 0.23561831836685024] ***
*** finished computation of 3 references, err: [Inf, 0.26693833881299356, 0.23697307522686525, 0.23568032324213584, 0.23561831836685024] ***
*** center 1: selecting labels [1] (freq >= 1) [from [243, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [119, 59, 0]]
** centroid: 2, normalized-entropy: 0.916411780708005, [(1, 119), (2, 59)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [17, 203, 26]]
** centroid: 3, normalized-entropy: 0.5285885262940658, [(1, 17), (2, 203), (3, 26)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 13)
[0.9540079001156845, 0.9250208292124459, 0.917018815222408, 0.9150288012563461, 0.8950177722632812, 0.8920207632782483, 0.8910197622772472, 0.8860177542812272, 0.8829997662332992, 0.8799907692123261, 0.8430136723549898, 0.7899726073378769, 0.7850215484946023]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9540079001156845
finished with 13
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9540079001156845, 0.9250208292124459, 0.917018815222408, 0.9150288012563461, 0.8950177722632812, 0.8920207632782483, 0.8910197622772472, 0.8860177542812272, 0.8829997662332992, 0.8799907692123261, 0.8430136723549898, 0.7899726073378769, 0.7850215484946023]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9540079001156845
finished with 13
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9540079001156845, 0.9250208292124459, 0.917018815222408, 0.9150288012563461, 0.8950177722632812, 0.8920207632782483, 0.8910197622772472, 0.8860177542812272, 0.8829997662332992, 0.8799907692123261, 0.8430136723549898, 0.7899726073378769, 0.7850215484946023]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9540079001156845
finished with 14
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.3797586668777775] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3797586668777775, 0.3112285368636743] ***
*** starting iteration: 2; err: [Inf, 0.3797586668777775, 0.3112285368636743] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3797586668777775, 0.3112285368636743, 0.30505657087110943] ***
*** starting iteration: 3; err: [Inf, 0.3797586668777775, 0.3112285368636743, 0.30505657087110943] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3797586668777775, 0.3112285368636743, 0.30505657087110943, 0.3032547273720662] ***
*** finished computation of 3 references, err: [Inf, 0.3797586668777775, 0.3112285368636743, 0.30505657087110943, 0.3032547273720662] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [97, 159, 22]]
** centroid: 1, normalized-entropy: 0.8079944856348308, [(1, 97), (2, 159), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [185, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [119, 84, 0]]
** centroid: 3, normalized-entropy: 0.9784493292686188, [(1, 119), (2, 84)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4272189105831567] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4272189105831567, 0.3117334355098912] ***
*** starting iteration: 2; err: [Inf, 0.4272189105831567, 0.3117334355098912] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4272189105831567, 0.3117334355098912, 0.3078641267535256] ***
*** starting iteration: 3; err: [Inf, 0.4272189105831567, 0.3117334355098912, 0.3078641267535256] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4272189105831567, 0.3117334355098912, 0.3078641267535256, 0.30664768410396986] ***
*** finished computation of 3 references, err: [Inf, 0.4272189105831567, 0.3117334355098912, 0.3078641267535256, 0.30664768410396986] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [251, 15, 0]]
** centroid: 1, normalized-entropy: 0.31294863484039426, [(1, 251), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [128, 44, 0]]
** centroid: 2, normalized-entropy: 0.8203636429576731, [(1, 128), (2, 44)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [1, 202, 26]]
** centroid: 3, normalized-entropy: 0.3471698278077286, [(1, 1), (2, 202), (3, 26)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39017410166673305] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39017410166673305, 0.3109029840504837] ***
*** starting iteration: 2; err: [Inf, 0.39017410166673305, 0.3109029840504837] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39017410166673305, 0.3109029840504837, 0.3020915681499055] ***
*** starting iteration: 3; err: [Inf, 0.39017410166673305, 0.3109029840504837, 0.3020915681499055] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39017410166673305, 0.3109029840504837, 0.3020915681499055, 0.2996674993451031] ***
*** finished computation of 3 references, err: [Inf, 0.39017410166673305, 0.3109029840504837, 0.3020915681499055, 0.2996674993451031] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [250, 20, 0]]
** centroid: 1, normalized-entropy: 0.38094658570539014, [(1, 250), (2, 20)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 190, 26]]
** centroid: 2, normalized-entropy: 0.5304245472812997, [(2, 190), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [129, 52, 0]]
** centroid: 3, normalized-entropy: 0.8651984766249922, [(1, 129), (2, 52)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 14)
[0.9540079001156845, 0.9250208292124459, 0.917018815222408, 0.9150288012563461, 0.8950177722632812, 0.8920207632782483, 0.8910197622772472, 0.8860177542812272, 0.8829997662332992, 0.8799907692123261, 0.8669927412442382, 0.8430136723549898, 0.7899726073378769, 0.7850215484946023]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9540079001156845
finished with 15
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.18823054153751861] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18823054153751861, 0.1518367304076516] ***
*** starting iteration: 2; err: [Inf, 0.18823054153751861, 0.1518367304076516] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18823054153751861, 0.1518367304076516, 0.1475183101225499] ***
*** starting iteration: 3; err: [Inf, 0.18823054153751861, 0.1518367304076516, 0.1475183101225499] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18823054153751861, 0.1518367304076516, 0.1475183101225499, 0.1463360380935105] ***
*** starting iteration: 4; err: [Inf, 0.18823054153751861, 0.1518367304076516, 0.1475183101225499, 0.1463360380935105] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18823054153751861, 0.1518367304076516, 0.1475183101225499, 0.1463360380935105, 0.14574715763179436] ***
*** finished computation of 7 references, err: [Inf, 0.18823054153751861, 0.1518367304076516, 0.1475183101225499, 0.1463360380935105, 0.14574715763179436] ***
*** center 1: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 66, 22]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 66), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [68, 32, 0]]
** centroid: 3, normalized-entropy: 0.9043814577244941, [(1, 68), (2, 32)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [108, 6, 0]]
** centroid: 4, normalized-entropy: 0.2974722489192896, [(1, 108), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [39, 50, 0]]
** centroid: 5, normalized-entropy: 0.9889525767600615, [(1, 39), (2, 50)]
*** center 6: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 89, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19433507155710789] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19433507155710789, 0.15622172600448667] ***
*** starting iteration: 2; err: [Inf, 0.19433507155710789, 0.15622172600448667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19433507155710789, 0.15622172600448667, 0.15188659510730224] ***
*** starting iteration: 3; err: [Inf, 0.19433507155710789, 0.15622172600448667, 0.15188659510730224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19433507155710789, 0.15622172600448667, 0.15188659510730224, 0.15079387057170474] ***
*** starting iteration: 4; err: [Inf, 0.19433507155710789, 0.15622172600448667, 0.15188659510730224, 0.15079387057170474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19433507155710789, 0.15622172600448667, 0.15188659510730224, 0.15079387057170474, 0.15057662615379405] ***
*** finished computation of 7 references, err: [Inf, 0.19433507155710789, 0.15622172600448667, 0.15188659510730224, 0.15079387057170474, 0.15057662615379405] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 98, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [67, 31, 0]]
** centroid: 2, normalized-entropy: 0.9003418708227195, [(1, 67), (2, 31)]
*** center 3: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 110, 26]]
** centroid: 4, normalized-entropy: 0.7039260680195971, [(2, 110), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [81, 14, 0]]
** centroid: 5, normalized-entropy: 0.6032154068313579, [(1, 81), (2, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [61, 8, 0]]
** centroid: 7, normalized-entropy: 0.5175827525559071, [(1, 61), (2, 8)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19648335771872544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19648335771872544, 0.1492509310157492] ***
*** starting iteration: 2; err: [Inf, 0.19648335771872544, 0.1492509310157492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19648335771872544, 0.1492509310157492, 0.14437685950835147] ***
*** starting iteration: 3; err: [Inf, 0.19648335771872544, 0.1492509310157492, 0.14437685950835147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19648335771872544, 0.1492509310157492, 0.14437685950835147, 0.14345115022328886] ***
*** finished computation of 7 references, err: [Inf, 0.19648335771872544, 0.1492509310157492, 0.14437685950835147, 0.14345115022328886] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 66, 26]]
** centroid: 1, normalized-entropy: 0.8589810370425965, [(2, 66), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [95, 2, 0]]
** centroid: 3, normalized-entropy: 0.14489961753310668, [(1, 95), (2, 2)]
*** center 4: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [75, 23, 0]]
** centroid: 5, normalized-entropy: 0.7861044688447759, [(1, 75), (2, 23)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 88, 0]]
** centroid: 6, normalized-entropy: 0.08887969568457589, [(1, 1), (2, 88)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [8, 83, 0]]
** centroid: 7, normalized-entropy: 0.4294619720471057, [(1, 8), (2, 83)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9540079001156845, 0.9250208292124459, 0.917018815222408, 0.9150288012563461, 0.912004819190448, 0.8950177722632812, 0.8920207632782483, 0.8910197622772472, 0.8860177542812272, 0.8829997662332992, 0.8799907692123261, 0.8669927412442382, 0.8430136723549898, 0.7899726073378769, 0.7850215484946023]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9540079001156845
finished with 15
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9540079001156845, 0.9250208292124459, 0.917018815222408, 0.9150288012563461, 0.912004819190448, 0.8950177722632812, 0.8920207632782483, 0.8910197622772472, 0.8860177542812272, 0.8829997662332992, 0.8799907692123261, 0.8669927412442382, 0.8430136723549898, 0.7899726073378769, 0.7850215484946023]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9540079001156845
finished with 15
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.19031011006981136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19031011006981136, 0.15192389842052945] ***
*** starting iteration: 2; err: [Inf, 0.19031011006981136, 0.15192389842052945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19031011006981136, 0.15192389842052945, 0.14683634863514453] ***
*** starting iteration: 3; err: [Inf, 0.19031011006981136, 0.15192389842052945, 0.14683634863514453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19031011006981136, 0.15192389842052945, 0.14683634863514453, 0.14573287824052386] ***
*** finished computation of 7 references, err: [Inf, 0.19031011006981136, 0.15192389842052945, 0.14683634863514453, 0.14573287824052386] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 155, 36]]
** centroid: 1, normalized-entropy: 0.6982844151067954, [(2, 155), (3, 36)]
*** center 2: selecting labels [1] (freq >= 2) [from [132, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [123, 7, 0]]
** centroid: 3, normalized-entropy: 0.302515746788995, [(1, 123), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [108, 50, 0]]
** centroid: 4, normalized-entropy: 0.9004854334784268, [(1, 108), (2, 50)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [105, 32, 0]]
** centroid: 5, normalized-entropy: 0.7841942774499947, [(1, 105), (2, 32)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [112, 2, 0]]
** centroid: 6, normalized-entropy: 0.1274185117923586, [(1, 112), (2, 2)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 137, 1]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18893624850199559] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18893624850199559, 0.14719685556087642] ***
*** starting iteration: 2; err: [Inf, 0.18893624850199559, 0.14719685556087642] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18893624850199559, 0.14719685556087642, 0.1439886327413842] ***
*** starting iteration: 3; err: [Inf, 0.18893624850199559, 0.14719685556087642, 0.1439886327413842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18893624850199559, 0.14719685556087642, 0.1439886327413842, 0.14368355046771467] ***
*** finished computation of 7 references, err: [Inf, 0.18893624850199559, 0.14719685556087642, 0.1439886327413842, 0.14368355046771467] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [19, 74, 0]]
** centroid: 1, normalized-entropy: 0.7304472862481346, [(1, 19), (2, 74)]
*** center 2: selecting labels [1] (freq >= 2) [from [50, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 50, 18]]
** centroid: 4, normalized-entropy: 0.8337649072106652, [(2, 50), (3, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [70, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 63, 0]]
** centroid: 6, normalized-entropy: 0.2667649878030262, [(1, 3), (2, 63)]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 1, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2033753120023757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2033753120023757, 0.15352729489654302] ***
*** starting iteration: 2; err: [Inf, 0.2033753120023757, 0.15352729489654302] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2033753120023757, 0.15352729489654302, 0.14735086577688344] ***
*** starting iteration: 3; err: [Inf, 0.2033753120023757, 0.15352729489654302, 0.14735086577688344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2033753120023757, 0.15352729489654302, 0.14735086577688344, 0.14663631036737934] ***
*** finished computation of 7 references, err: [Inf, 0.2033753120023757, 0.15352729489654302, 0.14735086577688344, 0.14663631036737934] ***
*** center 1: selecting labels [1] (freq >= 2) [from [80, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [74, 7, 0]]
** centroid: 2, normalized-entropy: 0.42440514472480345, [(1, 74), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 50, 18]]
** centroid: 3, normalized-entropy: 0.8337649072106652, [(2, 50), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 63, 0]]
** centroid: 5, normalized-entropy: 0.6840384356390419, [(1, 14), (2, 63)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 54, 0]]
** centroid: 6, normalized-entropy: 0.2222848306856879, [(1, 2), (2, 54)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [43, 5, 0]]
** centroid: 7, normalized-entropy: 0.4820661480830933, [(1, 43), (2, 5)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18802926570549608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18802926570549608, 0.1449994559949264] ***
*** starting iteration: 2; err: [Inf, 0.18802926570549608, 0.1449994559949264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18802926570549608, 0.1449994559949264, 0.14092257269844413] ***
*** starting iteration: 3; err: [Inf, 0.18802926570549608, 0.1449994559949264, 0.14092257269844413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18802926570549608, 0.1449994559949264, 0.14092257269844413, 0.14048935993388295] ***
*** finished computation of 7 references, err: [Inf, 0.18802926570549608, 0.1449994559949264, 0.14092257269844413, 0.14048935993388295] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [70, 10, 0]]
** centroid: 1, normalized-entropy: 0.5435644431995963, [(1, 70), (2, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 40, 18]]
** centroid: 3, normalized-entropy: 0.8935711016541908, [(2, 40), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 29, 0]]
** centroid: 5, normalized-entropy: 0.9556222693531471, [(1, 48), (2, 29)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 52, 0]]
** centroid: 7, normalized-entropy: 0.4288109647301171, [(1, 5), (2, 52)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1924735637102276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1924735637102276, 0.1487064318470657] ***
*** starting iteration: 2; err: [Inf, 0.1924735637102276, 0.1487064318470657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1924735637102276, 0.1487064318470657, 0.14497307528508827] ***
*** starting iteration: 3; err: [Inf, 0.1924735637102276, 0.1487064318470657, 0.14497307528508827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1924735637102276, 0.1487064318470657, 0.14497307528508827, 0.14416456087864934] ***
*** finished computation of 7 references, err: [Inf, 0.1924735637102276, 0.1487064318470657, 0.14497307528508827, 0.14416456087864934] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 59, 18]]
** centroid: 1, normalized-entropy: 0.7845191388986644, [(2, 59), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [64, 6, 0]]
** centroid: 3, normalized-entropy: 0.4220005168831531, [(1, 64), (2, 6)]
*** center 4: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 19, 0]]
** centroid: 5, normalized-entropy: 0.8546480601169081, [(1, 49), (2, 19)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [36, 34, 0]]
** centroid: 7, normalized-entropy: 0.9994110647387552, [(1, 36), (2, 34)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19839654238149523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19839654238149523, 0.15217562676128] ***
*** starting iteration: 2; err: [Inf, 0.19839654238149523, 0.15217562676128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19839654238149523, 0.15217562676128, 0.1476654088627547] ***
*** starting iteration: 3; err: [Inf, 0.19839654238149523, 0.15217562676128, 0.1476654088627547] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19839654238149523, 0.15217562676128, 0.1476654088627547, 0.1468562810085714] ***
*** finished computation of 7 references, err: [Inf, 0.19839654238149523, 0.15217562676128, 0.1476654088627547, 0.1468562810085714] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 64, 0]]
** centroid: 1, normalized-entropy: 0.26377743669413856, [(1, 3), (2, 64)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 32, 0]]
** centroid: 2, normalized-entropy: 0.9522656254366643, [(1, 54), (2, 32)]
*** center 3: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 77, 19]]
** centroid: 4, normalized-entropy: 0.7177418091697444, [(2, 77), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [38, 17, 0]]
** centroid: 5, normalized-entropy: 0.8921212805771683, [(1, 38), (2, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20057546282187105] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20057546282187105, 0.14786750334315002] ***
*** starting iteration: 2; err: [Inf, 0.20057546282187105, 0.14786750334315002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20057546282187105, 0.14786750334315002, 0.1420745863970369] ***
*** starting iteration: 3; err: [Inf, 0.20057546282187105, 0.14786750334315002, 0.1420745863970369] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20057546282187105, 0.14786750334315002, 0.1420745863970369, 0.140254371705465] ***
*** finished computation of 7 references, err: [Inf, 0.20057546282187105, 0.14786750334315002, 0.1420745863970369, 0.140254371705465] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [58, 18, 0]]
** centroid: 1, normalized-entropy: 0.7897492536625221, [(1, 58), (2, 18)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 38, 18]]
** centroid: 2, normalized-entropy: 0.9059282160429994, [(2, 38), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [69, 4, 0]]
** centroid: 3, normalized-entropy: 0.306424729870515, [(1, 69), (2, 4)]
*** center 4: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 4, 0]]
** centroid: 5, normalized-entropy: 0.306424729870515, [(1, 69), (2, 4)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 74, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 57, 0]]
** centroid: 7, normalized-entropy: 0.21357981533827744, [(1, 2), (2, 57)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1948132847128436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1948132847128436, 0.154603875445202] ***
*** starting iteration: 2; err: [Inf, 0.1948132847128436, 0.154603875445202] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1948132847128436, 0.154603875445202, 0.15181310761347414] ***
*** starting iteration: 3; err: [Inf, 0.1948132847128436, 0.154603875445202, 0.15181310761347414] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1948132847128436, 0.154603875445202, 0.15181310761347414, 0.15107322042807936] ***
*** finished computation of 7 references, err: [Inf, 0.1948132847128436, 0.154603875445202, 0.15181310761347414, 0.15107322042807936] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [51, 8, 0]]
** centroid: 1, normalized-entropy: 0.572580465623769, [(1, 51), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 23, 0]]
** centroid: 2, normalized-entropy: 0.8332661971210122, [(1, 64), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 49, 20]]
** centroid: 3, normalized-entropy: 0.868533960265235, [(2, 49), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 41, 0]]
** centroid: 5, normalized-entropy: 0.9984389230256238, [(1, 45), (2, 41)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18453341783583163] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18453341783583163, 0.15065855918079615] ***
*** starting iteration: 2; err: [Inf, 0.18453341783583163, 0.15065855918079615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18453341783583163, 0.15065855918079615, 0.14680775473383256] ***
*** starting iteration: 3; err: [Inf, 0.18453341783583163, 0.15065855918079615, 0.14680775473383256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18453341783583163, 0.15065855918079615, 0.14680775473383256, 0.14602558825863526] ***
*** finished computation of 7 references, err: [Inf, 0.18453341783583163, 0.15065855918079615, 0.14680775473383256, 0.14602558825863526] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [43, 36, 0]]
** centroid: 1, normalized-entropy: 0.9943290455933883, [(1, 43), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 8, 0]]
** centroid: 2, normalized-entropy: 0.5175827525559071, [(1, 61), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 56, 6]]
** centroid: 4, normalized-entropy: 0.45868581620054033, [(2, 56), (3, 6)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [47, 33, 0]]
** centroid: 5, normalized-entropy: 0.9777945702913884, [(1, 47), (2, 33)]
*** center 6: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 74, 7]]
** centroid: 7, normalized-entropy: 0.42440514472480345, [(2, 74), (3, 7)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1902510517667979] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1902510517667979, 0.14766564773395657] ***
*** starting iteration: 2; err: [Inf, 0.1902510517667979, 0.14766564773395657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1902510517667979, 0.14766564773395657, 0.14349656800739466] ***
*** starting iteration: 3; err: [Inf, 0.1902510517667979, 0.14766564773395657, 0.14349656800739466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1902510517667979, 0.14766564773395657, 0.14349656800739466, 0.1417332012820989] ***
*** finished computation of 7 references, err: [Inf, 0.1902510517667979, 0.14766564773395657, 0.14349656800739466, 0.1417332012820989] ***
*** center 1: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 50, 17]]
** centroid: 2, normalized-entropy: 0.8171387756817725, [(2, 50), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 10, 0]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(1, 55), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [5, 67, 0]]
** centroid: 4, normalized-entropy: 0.3638469981769295, [(1, 5), (2, 67)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 78, 0]]
** centroid: 5, normalized-entropy: 0.7136036068604937, [(1, 19), (2, 78)]
*** center 6: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1774713310431689] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1774713310431689, 0.14923794163018464] ***
*** starting iteration: 2; err: [Inf, 0.1774713310431689, 0.14923794163018464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1774713310431689, 0.14923794163018464, 0.14550773061532526] ***
*** starting iteration: 3; err: [Inf, 0.1774713310431689, 0.14923794163018464, 0.14550773061532526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1774713310431689, 0.14923794163018464, 0.14550773061532526, 0.14457753342390062] ***
*** finished computation of 7 references, err: [Inf, 0.1774713310431689, 0.14923794163018464, 0.14550773061532526, 0.14457753342390062] ***
*** center 1: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 16, 0]]
** centroid: 2, normalized-entropy: 0.7531979910695015, [(1, 58), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 53, 18]]
** centroid: 3, normalized-entropy: 0.8168114277045246, [(2, 53), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [17, 67, 0]]
** centroid: 5, normalized-entropy: 0.7266645172796352, [(1, 17), (2, 67)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 72, 0]]
** centroid: 6, normalized-entropy: 0.24229218908241482, [(1, 3), (2, 72)]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2089562268294394] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2089562268294394, 0.1497268118862994] ***
*** starting iteration: 2; err: [Inf, 0.2089562268294394, 0.1497268118862994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2089562268294394, 0.1497268118862994, 0.1466067089708522] ***
*** starting iteration: 3; err: [Inf, 0.2089562268294394, 0.1497268118862994, 0.1466067089708522] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2089562268294394, 0.1497268118862994, 0.1466067089708522, 0.14623869284708052] ***
*** finished computation of 7 references, err: [Inf, 0.2089562268294394, 0.1497268118862994, 0.1466067089708522, 0.14623869284708052] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 41, 17]]
** centroid: 3, normalized-entropy: 0.8726965039103788, [(2, 41), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 16, 0]]
** centroid: 5, normalized-entropy: 0.7812812090702043, [(1, 53), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 66, 0]]
** centroid: 6, normalized-entropy: 0.1914332548141934, [(1, 2), (2, 66)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 65, 0]]
** centroid: 7, normalized-entropy: 0.19364280468389852, [(1, 2), (2, 65)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19012708630692213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19012708630692213, 0.15396328698471187] ***
*** starting iteration: 2; err: [Inf, 0.19012708630692213, 0.15396328698471187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19012708630692213, 0.15396328698471187, 0.1495022002980113] ***
*** starting iteration: 3; err: [Inf, 0.19012708630692213, 0.15396328698471187, 0.1495022002980113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19012708630692213, 0.15396328698471187, 0.1495022002980113, 0.14751059005805292] ***
*** finished computation of 7 references, err: [Inf, 0.19012708630692213, 0.15396328698471187, 0.1495022002980113, 0.14751059005805292] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [15, 70, 0]]
** centroid: 1, normalized-entropy: 0.6722948170756378, [(1, 15), (2, 70)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 9, 0]]
** centroid: 2, normalized-entropy: 0.5484866088431741, [(1, 62), (2, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 40, 19]]
** centroid: 4, normalized-entropy: 0.9065795484987461, [(2, 40), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 7, 0]]
** centroid: 5, normalized-entropy: 0.4558314584408233, [(1, 66), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 70, 0]]
** centroid: 6, normalized-entropy: 0.18312206830137262, [(1, 2), (2, 70)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19157312429323792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19157312429323792, 0.15478410231228917] ***
*** starting iteration: 2; err: [Inf, 0.19157312429323792, 0.15478410231228917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19157312429323792, 0.15478410231228917, 0.150081362625584] ***
*** starting iteration: 3; err: [Inf, 0.19157312429323792, 0.15478410231228917, 0.150081362625584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19157312429323792, 0.15478410231228917, 0.150081362625584, 0.1485163992829621] ***
*** finished computation of 7 references, err: [Inf, 0.19157312429323792, 0.15478410231228917, 0.150081362625584, 0.1485163992829621] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 77, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 29, 0]]
** centroid: 2, normalized-entropy: 0.9626147059982517, [(1, 46), (2, 29)]
*** center 3: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 71, 21]]
** centroid: 4, normalized-entropy: 0.7749672673267259, [(2, 71), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [73, 8, 0]]
** centroid: 5, normalized-entropy: 0.46506984488164627, [(1, 73), (2, 8)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [39, 7, 0]]
** centroid: 7, normalized-entropy: 0.6152538910563409, [(1, 39), (2, 7)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18412469866126777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18412469866126777, 0.15326564189605416] ***
*** starting iteration: 2; err: [Inf, 0.18412469866126777, 0.15326564189605416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18412469866126777, 0.15326564189605416, 0.14972269905358554] ***
*** starting iteration: 3; err: [Inf, 0.18412469866126777, 0.15326564189605416, 0.14972269905358554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18412469866126777, 0.15326564189605416, 0.14972269905358554, 0.14839934209454805] ***
*** finished computation of 7 references, err: [Inf, 0.18412469866126777, 0.15326564189605416, 0.14972269905358554, 0.14839934209454805] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [52, 43, 0]]
** centroid: 1, normalized-entropy: 0.9935161367990846, [(1, 52), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 16, 0]]
** centroid: 2, normalized-entropy: 0.775512658133148, [(1, 54), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 57, 22]]
** centroid: 4, normalized-entropy: 0.8533728188427888, [(2, 57), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 76, 0]]
** centroid: 5, normalized-entropy: 0.48736957102366285, [(1, 9), (2, 76)]
*** center 6: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [51, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17644829911366106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17644829911366106, 0.15162817085906863] ***
*** starting iteration: 2; err: [Inf, 0.17644829911366106, 0.15162817085906863] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17644829911366106, 0.15162817085906863, 0.14912198148202152] ***
*** starting iteration: 3; err: [Inf, 0.17644829911366106, 0.15162817085906863, 0.14912198148202152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17644829911366106, 0.15162817085906863, 0.14912198148202152, 0.14887386573478578] ***
*** finished computation of 7 references, err: [Inf, 0.17644829911366106, 0.15162817085906863, 0.14912198148202152, 0.14887386573478578] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 93, 7]]
** centroid: 1, normalized-entropy: 0.36592365090022316, [(2, 93), (3, 7)]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 11, 0]]
** centroid: 3, normalized-entropy: 0.7076690004167966, [(1, 46), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [40, 13, 0]]
** centroid: 4, normalized-entropy: 0.8037159237834126, [(1, 40), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [70, 9, 0]]
** centroid: 5, normalized-entropy: 0.511639783631173, [(1, 70), (2, 9)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 65, 11]]
** centroid: 6, normalized-entropy: 0.5965109917085881, [(2, 65), (3, 11)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18578311570268125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18578311570268125, 0.14736658426746727] ***
*** starting iteration: 2; err: [Inf, 0.18578311570268125, 0.14736658426746727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18578311570268125, 0.14736658426746727, 0.14298097905423493] ***
*** starting iteration: 3; err: [Inf, 0.18578311570268125, 0.14736658426746727, 0.14298097905423493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18578311570268125, 0.14736658426746727, 0.14298097905423493, 0.14187003427091985] ***
*** finished computation of 7 references, err: [Inf, 0.18578311570268125, 0.14736658426746727, 0.14298097905423493, 0.14187003427091985] ***
*** center 1: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 33, 18]]
** centroid: 3, normalized-entropy: 0.9366673818775627, [(2, 33), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [55, 25, 0]]
** centroid: 5, normalized-entropy: 0.8960382325345574, [(1, 55), (2, 25)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 59, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19176988934352995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19176988934352995, 0.1525929760746658] ***
*** starting iteration: 2; err: [Inf, 0.19176988934352995, 0.1525929760746658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19176988934352995, 0.1525929760746658, 0.14843752937950194] ***
*** starting iteration: 3; err: [Inf, 0.19176988934352995, 0.1525929760746658, 0.14843752937950194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19176988934352995, 0.1525929760746658, 0.14843752937950194, 0.1473520640609786] ***
*** finished computation of 7 references, err: [Inf, 0.19176988934352995, 0.1525929760746658, 0.14843752937950194, 0.1473520640609786] ***
*** center 1: selecting labels [1] (freq >= 2) [from [91, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 10, 0]]
** centroid: 2, normalized-entropy: 0.6631968402398286, [(1, 48), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 28, 17]]
** centroid: 3, normalized-entropy: 0.9564574047992596, [(2, 28), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [4, 71, 0]]
** centroid: 5, normalized-entropy: 0.3003914173647818, [(1, 4), (2, 71)]
*** center 6: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 79, 0]]
** centroid: 7, normalized-entropy: 0.22641094842107634, [(1, 3), (2, 79)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18186527526378632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18186527526378632, 0.14897334728279385] ***
*** starting iteration: 2; err: [Inf, 0.18186527526378632, 0.14897334728279385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18186527526378632, 0.14897334728279385, 0.14554777162056418] ***
*** starting iteration: 3; err: [Inf, 0.18186527526378632, 0.14897334728279385, 0.14554777162056418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18186527526378632, 0.14897334728279385, 0.14554777162056418, 0.1452343152835965] ***
*** finished computation of 7 references, err: [Inf, 0.18186527526378632, 0.14897334728279385, 0.14554777162056418, 0.1452343152835965] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [10, 77, 0]]
** centroid: 1, normalized-entropy: 0.5146464316834292, [(1, 10), (2, 77)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 4, 0]]
** centroid: 2, normalized-entropy: 0.36657801255334593, [(1, 53), (2, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 51, 22]]
** centroid: 4, normalized-entropy: 0.8829589691462253, [(2, 51), (3, 22)]
*** center 5: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 71, 0]]
** centroid: 7, normalized-entropy: 0.2447650820208971, [(1, 3), (2, 71)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1895828130953014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1895828130953014, 0.15525561288325115] ***
*** starting iteration: 2; err: [Inf, 0.1895828130953014, 0.15525561288325115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1895828130953014, 0.15525561288325115, 0.1493667829874903] ***
*** starting iteration: 3; err: [Inf, 0.1895828130953014, 0.15525561288325115, 0.1493667829874903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1895828130953014, 0.15525561288325115, 0.1493667829874903, 0.14761693504359574] ***
*** finished computation of 7 references, err: [Inf, 0.1895828130953014, 0.15525561288325115, 0.1493667829874903, 0.14761693504359574] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [34, 49, 0]]
** centroid: 1, normalized-entropy: 0.9763102872004581, [(1, 34), (2, 49)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 7, 0]]
** centroid: 2, normalized-entropy: 0.5373760853377334, [(1, 50), (2, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 54, 18]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(2, 54), (3, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 76, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [66, 4, 0]]
** centroid: 7, normalized-entropy: 0.3159971329784246, [(1, 66), (2, 4)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18126794282719494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18126794282719494, 0.15159582767635585] ***
*** starting iteration: 2; err: [Inf, 0.18126794282719494, 0.15159582767635585] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18126794282719494, 0.15159582767635585, 0.1498423865744844] ***
*** starting iteration: 3; err: [Inf, 0.18126794282719494, 0.15159582767635585, 0.1498423865744844] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18126794282719494, 0.15159582767635585, 0.1498423865744844, 0.14947561389114708] ***
*** finished computation of 7 references, err: [Inf, 0.18126794282719494, 0.15159582767635585, 0.1498423865744844, 0.14947561389114708] ***
*** center 1: selecting labels [1] (freq >= 2) [from [82, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 11, 0]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(1, 55), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 47, 20]]
** centroid: 3, normalized-entropy: 0.8794587736429037, [(2, 47), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [31, 72, 0]]
** centroid: 5, normalized-entropy: 0.8824744521750667, [(1, 31), (2, 72)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 59, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18955276706907898] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18955276706907898, 0.1589977902432438] ***
*** starting iteration: 2; err: [Inf, 0.18955276706907898, 0.1589977902432438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18955276706907898, 0.1589977902432438, 0.15195232378039508] ***
*** starting iteration: 3; err: [Inf, 0.18955276706907898, 0.1589977902432438, 0.15195232378039508] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18955276706907898, 0.1589977902432438, 0.15195232378039508, 0.1498845770061016] ***
*** finished computation of 7 references, err: [Inf, 0.18955276706907898, 0.1589977902432438, 0.15195232378039508, 0.1498845770061016] ***
*** center 1: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 38, 21]]
** centroid: 2, normalized-entropy: 0.9392547207311595, [(2, 38), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [29, 29, 0]]
** centroid: 3, normalized-entropy: 1.0, [(1, 29), (2, 29)]
*** center 4: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [12, 72, 0]]
** centroid: 5, normalized-entropy: 0.5916727785823274, [(1, 12), (2, 72)]
*** center 6: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [9, 61, 0]]
** centroid: 7, normalized-entropy: 0.5535072654547254, [(1, 9), (2, 61)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20581803510338068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20581803510338068, 0.15131434708088637] ***
*** starting iteration: 2; err: [Inf, 0.20581803510338068, 0.15131434708088637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20581803510338068, 0.15131434708088637, 0.14618266440555452] ***
*** starting iteration: 3; err: [Inf, 0.20581803510338068, 0.15131434708088637, 0.14618266440555452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20581803510338068, 0.15131434708088637, 0.14618266440555452, 0.14493325817305594] ***
*** finished computation of 7 references, err: [Inf, 0.20581803510338068, 0.15131434708088637, 0.14618266440555452, 0.14493325817305594] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [32, 53, 0]]
** centroid: 1, normalized-entropy: 0.9555111232924128, [(1, 32), (2, 53)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 7, 0]]
** centroid: 2, normalized-entropy: 0.5197027865043053, [(1, 53), (2, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 56, 17]]
** centroid: 4, normalized-entropy: 0.7829924501610913, [(2, 56), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 14, 0]]
** centroid: 5, normalized-entropy: 0.6409441847875289, [(1, 72), (2, 14)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1881453920342028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1881453920342028, 0.150939378997311] ***
*** starting iteration: 2; err: [Inf, 0.1881453920342028, 0.150939378997311] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1881453920342028, 0.150939378997311, 0.14611107046715915] ***
*** starting iteration: 3; err: [Inf, 0.1881453920342028, 0.150939378997311, 0.14611107046715915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1881453920342028, 0.150939378997311, 0.14611107046715915, 0.14416800417471676] ***
*** finished computation of 7 references, err: [Inf, 0.1881453920342028, 0.150939378997311, 0.14611107046715915, 0.14416800417471676] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 57, 23]]
** centroid: 1, normalized-entropy: 0.8654698974285927, [(2, 57), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [74, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 15, 0]]
** centroid: 5, normalized-entropy: 0.7166336117927455, [(1, 61), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 62, 0]]
** centroid: 6, normalized-entropy: 0.269828447703074, [(1, 3), (2, 62)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [11, 48, 0]]
** centroid: 7, normalized-entropy: 0.693965967334286, [(1, 11), (2, 48)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1963811607770622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1963811607770622, 0.1550184875568375] ***
*** starting iteration: 2; err: [Inf, 0.1963811607770622, 0.1550184875568375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1963811607770622, 0.1550184875568375, 0.1485734091233462] ***
*** starting iteration: 3; err: [Inf, 0.1963811607770622, 0.1550184875568375, 0.1485734091233462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1963811607770622, 0.1550184875568375, 0.1485734091233462, 0.14574381144344806] ***
*** finished computation of 7 references, err: [Inf, 0.1963811607770622, 0.1550184875568375, 0.1485734091233462, 0.14574381144344806] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [68, 4, 0]]
** centroid: 1, normalized-entropy: 0.3095434291503252, [(1, 68), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 34, 21]]
** centroid: 2, normalized-entropy: 0.9593160320543779, [(2, 34), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [84, 13, 0]]
** centroid: 3, normalized-entropy: 0.5683625344629001, [(1, 84), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [2, 68, 0]]
** centroid: 4, normalized-entropy: 0.18717625687320805, [(1, 2), (2, 68)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [3, 72, 0]]
** centroid: 5, normalized-entropy: 0.24229218908241482, [(1, 3), (2, 72)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 1, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19546745986305178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19546745986305178, 0.14808889783220366] ***
*** starting iteration: 2; err: [Inf, 0.19546745986305178, 0.14808889783220366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19546745986305178, 0.14808889783220366, 0.1452408588877879] ***
*** starting iteration: 3; err: [Inf, 0.19546745986305178, 0.14808889783220366, 0.1452408588877879] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19546745986305178, 0.14808889783220366, 0.1452408588877879, 0.1442620109869167] ***
*** finished computation of 7 references, err: [Inf, 0.19546745986305178, 0.14808889783220366, 0.1452408588877879, 0.1442620109869167] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 86, 19]]
** centroid: 1, normalized-entropy: 0.6821560732869936, [(2, 86), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 2, 0]]
** centroid: 3, normalized-entropy: 0.23181305002459035, [(1, 51), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 9, 0]]
** centroid: 4, normalized-entropy: 0.5801954953637372, [(1, 56), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 37, 0]]
** centroid: 5, normalized-entropy: 0.9976432959863935, [(1, 33), (2, 37)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 74, 0]]
** centroid: 6, normalized-entropy: 0.340373285759646, [(1, 5), (2, 74)]
*** center 7: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19963521225750447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19963521225750447, 0.15251309391856194] ***
*** starting iteration: 2; err: [Inf, 0.19963521225750447, 0.15251309391856194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19963521225750447, 0.15251309391856194, 0.14566147230379284] ***
*** starting iteration: 3; err: [Inf, 0.19963521225750447, 0.15251309391856194, 0.14566147230379284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19963521225750447, 0.15251309391856194, 0.14566147230379284, 0.14442527771554886] ***
*** finished computation of 7 references, err: [Inf, 0.19963521225750447, 0.15251309391856194, 0.14566147230379284, 0.14442527771554886] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [38, 50, 0]]
** centroid: 1, normalized-entropy: 0.9865446300055647, [(1, 38), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 7, 0]]
** centroid: 2, normalized-entropy: 0.5254506799086205, [(1, 52), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 58, 14]]
** centroid: 3, normalized-entropy: 0.710676853856123, [(2, 58), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 75, 0]]
** centroid: 5, normalized-entropy: 0.3372900666170139, [(1, 5), (2, 75)]
*** center 6: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [54, 7, 0]]
** centroid: 7, normalized-entropy: 0.5140912790181233, [(1, 54), (2, 7)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18811512147821485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18811512147821485, 0.148575168565847] ***
*** starting iteration: 2; err: [Inf, 0.18811512147821485, 0.148575168565847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18811512147821485, 0.148575168565847, 0.14475015760585666] ***
*** starting iteration: 3; err: [Inf, 0.18811512147821485, 0.148575168565847, 0.14475015760585666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18811512147821485, 0.148575168565847, 0.14475015760585666, 0.14418633366003633] ***
*** finished computation of 7 references, err: [Inf, 0.18811512147821485, 0.148575168565847, 0.14475015760585666, 0.14418633366003633] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [10, 71, 0]]
** centroid: 1, normalized-entropy: 0.5392163432092415, [(1, 10), (2, 71)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 8, 0]]
** centroid: 2, normalized-entropy: 0.5079353563991225, [(1, 63), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 33, 20]]
** centroid: 4, normalized-entropy: 0.9561550236844027, [(2, 33), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 7, 0]]
** centroid: 5, normalized-entropy: 0.42440514472480345, [(1, 74), (2, 7)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 73, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 1, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19484202653169633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19484202653169633, 0.15564001592900603] ***
*** starting iteration: 2; err: [Inf, 0.19484202653169633, 0.15564001592900603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19484202653169633, 0.15564001592900603, 0.14860883623640983] ***
*** starting iteration: 3; err: [Inf, 0.19484202653169633, 0.15564001592900603, 0.14860883623640983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19484202653169633, 0.15564001592900603, 0.14860883623640983, 0.14677558749914169] ***
*** finished computation of 7 references, err: [Inf, 0.19484202653169633, 0.15564001592900603, 0.14860883623640983, 0.14677558749914169] ***
*** center 1: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 63, 15]]
** centroid: 2, normalized-entropy: 0.7062740891876008, [(2, 63), (3, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [43, 36, 0]]
** centroid: 4, normalized-entropy: 0.9943290455933883, [(1, 43), (2, 36)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 54, 0]]
** centroid: 5, normalized-entropy: 0.9335289015212996, [(1, 29), (2, 54)]
*** center 6: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 43, 0]]
** centroid: 7, normalized-entropy: 0.4199210973757179, [(1, 4), (2, 43)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1886575472354889] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1886575472354889, 0.1559201769530773] ***
*** starting iteration: 2; err: [Inf, 0.1886575472354889, 0.1559201769530773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1886575472354889, 0.1559201769530773, 0.1502807111274451] ***
*** starting iteration: 3; err: [Inf, 0.1886575472354889, 0.1559201769530773, 0.1502807111274451] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1886575472354889, 0.1559201769530773, 0.1502807111274451, 0.14760912375710905] ***
*** finished computation of 7 references, err: [Inf, 0.1886575472354889, 0.1559201769530773, 0.1502807111274451, 0.14760912375710905] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [42, 42, 0]]
** centroid: 1, normalized-entropy: 1.0, [(1, 42), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 9, 0]]
** centroid: 2, normalized-entropy: 0.5484866088431741, [(1, 62), (2, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 56, 16]]
** centroid: 4, normalized-entropy: 0.7642045065086204, [(2, 56), (3, 16)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 89, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18909494879934938] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18909494879934938, 0.15269545007310809] ***
*** starting iteration: 2; err: [Inf, 0.18909494879934938, 0.15269545007310809] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18909494879934938, 0.15269545007310809, 0.14980552113987505] ***
*** starting iteration: 3; err: [Inf, 0.18909494879934938, 0.15269545007310809, 0.14980552113987505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18909494879934938, 0.15269545007310809, 0.14980552113987505, 0.14945898691751064] ***
*** finished computation of 7 references, err: [Inf, 0.18909494879934938, 0.15269545007310809, 0.14980552113987505, 0.14945898691751064] ***
*** center 1: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [38, 12, 0]]
** centroid: 2, normalized-entropy: 0.7950402793845225, [(1, 38), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 47, 17]]
** centroid: 3, normalized-entropy: 0.8351164948421137, [(2, 47), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 62, 0]]
** centroid: 5, normalized-entropy: 0.7691928290130138, [(1, 18), (2, 62)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 383,3 => 37,1 => 580), Dict(2 => 384,3 => 43,1 => 573))
[ Info: ===== scores for single classifier: {"micro_f1":0.922,"precision":0.922,"recall":0.922,"macro_recall":0.9434582242582897,"macro_f1":0.8656020192188851,"accuracy":0.922,"class_f1":{"2":0.8984375,"3":0.7413793103448275,"1":0.956989247311828},"class_precision":{"2":0.8984375,"3":0.589041095890411,"1":0.9834254143646409},"class_recall":{"2":0.8984375,"3":1.0,"1":0.9319371727748691}}
[ Info: ===== scores for 1: {"micro_f1":0.951,"precision":0.951,"recall":0.951,"macro_recall":0.9634780395578826,"macro_f1":0.9353030536791516,"accuracy":0.951,"class_f1":{"2":0.935611038107753,"3":0.9052631578947368,"1":0.965034965034965},"class_precision":{"2":0.9442970822281167,"3":0.8269230769230769,"1":0.9667250437828371},"class_recall":{"2":0.9270833333333334,"3":1.0,"1":0.9633507853403142}}
[ Info: ===== scores for 5: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9764897833042466,"macro_f1":0.951683352375594,"accuracy":0.965,"class_f1":{"2":0.9551856594110115,"3":0.924731182795699,"1":0.9751332149200711},"class_precision":{"2":0.9395465994962217,"3":0.86,"1":0.9927667269439421},"class_recall":{"2":0.9713541666666666,"3":1.0,"1":0.9581151832460733}}
[ Info: ===== scores for 7: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9770715168702734,"macro_f1":0.9523946767184596,"accuracy":0.966,"class_f1":{"2":0.9564102564102563,"3":0.924731182795699,"1":0.9760425909494232},"class_precision":{"2":0.9419191919191919,"3":0.86,"1":0.9927797833935018},"class_recall":{"2":0.9713541666666666,"3":1.0,"1":0.9598603839441536}}
[ Info: ===== scores for 9: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9776532504363001,"macro_f1":0.9531065116127447,"accuracy":0.967,"class_f1":{"2":0.9576379974326059,"3":0.924731182795699,"1":0.9769503546099292},"class_precision":{"2":0.9443037974683545,"3":0.86,"1":0.9927927927927928},"class_recall":{"2":0.9713541666666666,"3":1.0,"1":0.9616055846422339}}
[ Info: ===== scores for 11: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9802665066899361,"macro_f1":0.950069874705933,"accuracy":0.971,"class_f1":{"2":0.9626769626769627,"3":0.9052631578947368,"1":0.9822695035460992},"class_precision":{"2":0.9516539440203562,"3":0.8269230769230769,"1":0.9981981981981982},"class_recall":{"2":0.9739583333333334,"3":1.0,"1":0.9668411867364747}}
(score = 0.955, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.955, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.951, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.951, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.97,"k":7,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.979971095113438,"macro_f1":0.9614833055931372,"accuracy":0.97,"class_f1":{"2":0.9615384615384616,"3":0.945054945054945,"1":0.9778565101860053},"class_precision":{"2":0.946969696969697,"3":0.8958333333333334,"1":0.9928057553956835},"class_recall":{"2":0.9765625,"3":1.0,"1":0.9633507853403142}}
Test Summary: | Pass  Total
AKNC          |    8      8
[353, 1, 1, 2, 2, 5, 5, 2, 4, 1, 1, 6, 2, 4, 3, 3, 2, 4, 14, 9, 23, 11, 1, 18, 15, 4, 21, 12, 3, 1, 72, 8, 4, 4, 7, 33, 8, 41, 7, 5, 10, 10, 8, 9, 4, 37, 10, 7, 4, 15, 2, 5, 6, 17, 9, 5, 23, 18, 22, 3, 6, 11, 9, 14, 3, 13, 6, 55, 3, 39, 6, 8, 23, 6, 90, 37, 25, 1, 13, 8, 5, 8, 3, 148, 8, 2, 5, 39, 5, 14, 6, 12, 346, 207, 24, 2, 10, 4, 37, 8, 44, 84, 2, 10, 10, 11, 1, 21, 4, 17, 33, 37, 9, 8, 6, 5, 12, 6, 6, 3, 5, 3, 1, 2, 11, 53, 123, 28, 4, 16, 14, 7, 46, 16, 22, 49, 46, 31, 16, 68, 30, 31, 3, 29, 35, 41, 10, 6, 4, 78, 3, 14, 45, 25, 17, 117, 20, 41, 20, 15, 32, 36, 60, 7, 21, 114, 7, 5, 7, 18, 6, 3, 25, 8, 24, 12, 56, 11, 18, 3, 19, 477, 19, 20, 10, 44, 1, 17, 18, 1, 2, 1, 58, 26, 28, 140, 5, 77, 33, 94, 9, 19, 16, 18, 12, 99, 66, 20, 4, 14, 115, 5, 18, 119, 14, 6, 202, 32, 3, 4, 35, 8, 15, 22, 22, 10, 4, 6, 333, 13, 19, 6, 25, 11, 83, 13, 19, 19, 15, 12, 7, 7, 877, 36, 53, 29, 12, 5, 98, 17, 50, 53, 4, 21, 75, 5, 87, 92, 9, 3, 15, 22, 27, 11, 226, 27, 36, 20, 12, 66, 3, 32, 74, 101, 31, 13, 10, 31, 14, 27, 25, 69, 22, 272, 53, 10, 149, 11, 4, 27, 16, 11, 42, 11, 4, 50, 39, 1, 75, 34]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6609999999999999, speedup = 0.3120527402132464, eval_ratio = 0.082276)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.39403521825396826,"recall":0.37673611111111116,"f1":null,"seconds":0.00019184686243534088,"exhaustive_search_seconds":0.0003643985837697983,"evaluations":526.7734375,"distances_sum":1719.8985906201046}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5380704365079366,"recall":0.5373263888888891,"f1":null,"seconds":0.0003096573054790497,"exhaustive_search_seconds":0.0003643985837697983,"evaluations":678.78125,"distances_sum":1684.886898987405}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6371527777777776,"recall":0.6371527777777776,"f1":0.6371527777777776,"seconds":0.00041984952986240387,"exhaustive_search_seconds":0.0003643985837697983,"evaluations":829.2734375,"distances_sum":1635.1187298936427}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7083333333333328,"recall":0.7083333333333328,"f1":0.7083333333333328,"seconds":0.0005011297762393951,"exhaustive_search_seconds":0.0003643985837697983,"evaluations":943.84375,"distances_sum":1605.7111027192136}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7734374999999993,"recall":0.7734374999999993,"f1":0.7734374999999993,"seconds":0.000733518972992897,"exhaustive_search_seconds":0.0003643985837697983,"evaluations":1067.96875,"distances_sum":1582.1883334080517}
KCenters.DeloneInvIndex> reached performance {"precision":0.8220486111111105,"recall":0.8220486111111105,"f1":0.8220486111111105,"seconds":0.0006750058382749557,"exhaustive_search_seconds":0.0003643985837697983,"evaluations":1185.4921875,"distances_sum":1568.1600616721275}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8379999999999999, speedup = 0.5769179635145866, eval_ratio = 0.116375)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
