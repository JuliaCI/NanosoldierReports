Julia Version 1.5.0-DEV.658
Commit 07477669a1 (2020-04-21 14:52 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Reexport ──────────────────── v0.2.0
  Installed Missings ──────────────────── v0.4.3
  Installed TableTraits ───────────────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed KCenters ──────────────────── v0.2.2
  Installed DataStructures ────────────── v0.17.13
  Installed StatsBase ─────────────────── v0.32.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed Parsers ───────────────────── v1.0.2
  Installed InvertedIndices ───────────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed Compat ────────────────────── v3.8.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed JSON ──────────────────────── v0.21.0
  Installed MLDataPattern ─────────────── v0.5.1
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.2.0
  Installed Tables ────────────────────── v1.0.4
  Installed MLDataUtils ───────────────── v0.5.1
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed DataFrames ────────────────── v0.20.2
  Installed DataValueInterfaces ───────── v1.0.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLLabelUtils ──────────────── v0.5.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.2.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.13
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_yPWfXp/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_yPWfXp/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.2.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.13
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9360659371813138
[ Info: 0.8321307849884033
[ Info: 0.5561528046429157
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33956977538764477
mean(cdnet.distances) = 0.3859259027491013
mean(crand.distances) = 0.34158415625492733
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8568395146520155,"seconds":6.105750799179077e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.234375,"distances_sum":2046.6737608676196}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4462890625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4462890625,"f1":null,"seconds":4.45730984210968e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":6.546875,"distances_sum":1128.5644092206617}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2001953125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2001953125,"f1":null,"seconds":3.693625330924988e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":5.875,"distances_sum":516.035167401889}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.759765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.759765625,"f1":0.8568395146520155,"seconds":6.105750799179077e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.234375,"distances_sum":2046.6737608676196}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9349931318681325,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.5703125,"distances_sum":2552.250176682276}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9537259615384622,"seconds":6.183981895446777e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.84375,"distances_sum":2676.634074010642}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.81640625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.81640625,"f1":0.8931578837828846,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.2734375,"distances_sum":2273.897051203371}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8694373334998343,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.3359375,"distances_sum":2172.93905652367}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9537259615384622,"seconds":6.183981895446777e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.84375,"distances_sum":2676.634074010642}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9617590742590748,"seconds":6.560236215591431e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.8515625,"distances_sum":2764.8673703590243}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9697265625, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9697265625,"f1":0.9831673534798535,"seconds":6.677582859992981e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.9375,"distances_sum":2917.2131145065064}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9743704212454215,"seconds":6.290152668952942e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.890625,"distances_sum":2865.5223164380623}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9578010531135536,"seconds":6.375834345817566e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.828125,"distances_sum":2734.6281788355527}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9697265625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9831673534798535,"seconds":6.677582859992981e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.9375,"distances_sum":2917.2131145065064}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9697265625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9831673534798535,"seconds":6.677582859992981e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.9375,"distances_sum":2917.2131145065064}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1875,"f1":null,"seconds":3.5744160413742065e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.2109375,"distances_sum":493.1400587826461}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.205078125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.205078125,"f1":null,"seconds":3.6526471376419067e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.3984375,"distances_sum":491.80319573113314}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8630270770895779,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.3515625,"distances_sum":1945.2571841305512}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7685546875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7685546875,"f1":0.8630270770895779,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.3515625,"distances_sum":1945.2571841305512}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9062822594072603,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6796875,"distances_sum":2197.4158158257505}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8017578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.8017578125,"f1":0.8837599900099908,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.4609375,"distances_sum":2035.9673154612642}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8388671875,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8388671875,"f1":0.9062822594072603,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6796875,"distances_sum":2197.4158158257505}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9570798992673997,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8828125,"distances_sum":2556.2281365149997}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9615212912087916,"seconds":6.243586540222168e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.921875,"distances_sum":2577.296946468713}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9644803113553119,"seconds":6.239861249923706e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9140625,"distances_sum":2613.780921849214}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9627461080586086,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8828125,"distances_sum":2598.4902454281423}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9532311438561442,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.859375,"distances_sum":2558.4312427137666}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9644803113553119,"seconds":6.239861249923706e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9140625,"distances_sum":2613.780921849214}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9644803113553119,"seconds":6.239861249923706e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9140625,"distances_sum":2613.780921849214}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2314453125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2314453125,"f1":null,"seconds":3.4105032682418823e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.0390625,"distances_sum":557.5814185495492}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2314453125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2314453125,"f1":null,"seconds":3.4105032682418823e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.0390625,"distances_sum":557.5814185495492}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.19921875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.19921875,"f1":null,"seconds":3.205612301826477e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.234375,"distances_sum":449.4899750377397}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.19921875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.19921875,"f1":null,"seconds":3.205612301826477e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.234375,"distances_sum":449.4899750377397}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5517578125,"f1":0.6942682317682323,"seconds":4.742294549942017e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.3515625,"distances_sum":1091.3382264853856}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1591796875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1591796875,"f1":null,"seconds":3.078952431678772e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":5.625,"distances_sum":377.5282592511853}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5517578125,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.5517578125,"f1":0.6942682317682323,"seconds":4.742294549942017e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.3515625,"distances_sum":1091.3382264853856}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9278076090576095,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6796875,"distances_sum":2223.3530762211626}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9424393315018321,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.765625,"distances_sum":2332.247320104149}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.568359375,"f1":null,"seconds":4.915520548820496e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.53125,"distances_sum":1137.3098404965076}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8520482989232998,"seconds":5.25452196598053e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.8984375,"distances_sum":1791.2015147748914}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9424393315018321,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.765625,"distances_sum":2332.247320104149}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9552343489843493,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8671875,"distances_sum":2404.495893409112}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.970633012820513,"seconds":6.429851055145264e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.921875,"distances_sum":2514.1996461128724}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9663518772893778,"seconds":6.293877959251404e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9296875,"distances_sum":2470.9055428254965}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9538976648351652,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8046875,"distances_sum":2421.000287697333}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9561469780219783,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8359375,"distances_sum":2434.4656610272473}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.960645604395605,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8828125,"distances_sum":2439.2689461798113}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.970633012820513,"seconds":6.429851055145264e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.921875,"distances_sum":2514.1996461128724}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.970633012820513,"seconds":6.429851055145264e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.921875,"distances_sum":2514.1996461128724}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.37890625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.37890625,"f1":null,"seconds":3.686174750328064e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":5.640625,"distances_sum":846.8874821188031}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1455078125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1455078125,"f1":null,"seconds":3.041699528694153e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":4.34375,"distances_sum":378.98747806092234}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1484375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1484375,"f1":null,"seconds":3.2838433980941772e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":4.234375,"distances_sum":380.7714813349849}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.37890625,"state":{"ssize":4,"bsize":2},"perf":{"precision":null,"recall":0.37890625,"f1":null,"seconds":3.686174750328064e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":5.640625,"distances_sum":846.8874821188031}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7216796875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7216796875,"f1":0.82814615939616,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.140625,"distances_sum":1783.6416216259877}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.521484375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.521484375,"f1":0.6669715700965704,"seconds":4.4014304876327515e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":6.5,"distances_sum":1218.7328921778312}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.396484375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.396484375,"f1":null,"seconds":3.5874545574188232e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":5.6171875,"distances_sum":903.0945008729555}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.39453125, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.39453125,"f1":null,"seconds":3.518536686897278e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":5.625,"distances_sum":889.3453643113972}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.638671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.638671875,"f1":0.765333451270952,"seconds":4.695728421211243e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.53125,"distances_sum":1516.4972265082527}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6279296875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6279296875,"f1":0.7598254176379184,"seconds":4.753470420837402e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.4296875,"distances_sum":1476.5780425498335}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6279296875, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6279296875,"f1":0.7549273643023648,"seconds":4.645437002182007e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":7.421875,"distances_sum":1480.0101310380173}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7216796875,"state":{"ssize":8,"bsize":5},"perf":{"precision":1.0,"recall":0.7216796875,"f1":0.82814615939616,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.140625,"distances_sum":1783.6416216259877}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8929950258075267,"seconds":5.461275577545166e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.484375,"distances_sum":2124.157156378296}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":12,"bsize":6}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8795454545454553,"seconds":5.6140124797821045e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.4296875,"distances_sum":2075.484213949047}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9500858516483522,"seconds":5.997717380523682e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7734375,"distances_sum":2463.330668623329}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9567625083250086,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.828125,"distances_sum":2520.0425089216474}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9296276640026646,"seconds":5.923211574554443e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.7734375,"distances_sum":2300.024228874314}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8448874042624053,"seconds":5.29363751411438e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.3046875,"distances_sum":1850.3527565360396}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9093895687645693,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.5625,"distances_sum":2212.2671683547974}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7236328125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7236328125,"f1":0.8304643273393282,"seconds":4.954636096954346e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.125,"distances_sum":1807.463248920658}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9567625083250086,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.828125,"distances_sum":2520.0425089216474}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9567625083250086,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.828125,"distances_sum":2520.0425089216474}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.169921875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.169921875,"f1":null,"seconds":3.254041075706482e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":5.3828125,"distances_sum":350.5341803496265}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.7968051046176053,"seconds":4.870817065238953e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.640625,"distances_sum":1526.0766998913755}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6787109375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6787109375,"f1":0.7968051046176053,"seconds":4.870817065238953e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.640625,"distances_sum":1526.0766998913755}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6787109375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6787109375,"f1":0.7968051046176053,"seconds":4.870817065238953e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.640625,"distances_sum":1526.0766998913755}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.6787109375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6787109375,"f1":0.7968051046176053,"seconds":4.870817065238953e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.640625,"distances_sum":1526.0766998913755}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3701171875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3701171875,"f1":null,"seconds":3.6973506212234497e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.8515625,"distances_sum":840.9227185081377}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3701171875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3701171875,"f1":null,"seconds":3.6973506212234497e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.8515625,"distances_sum":840.9227185081377}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.863836684149185,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.6796875,"distances_sum":1884.8350475828236}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9043128746253752,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.625,"distances_sum":2103.00820483802}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.83984375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.83984375,"f1":0.9043128746253752,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.625,"distances_sum":2103.00820483802}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9477767024642031,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8828125,"distances_sum":2430.3456994879493}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9525583791208795,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8828125,"distances_sum":2460.5548411552045}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9123111263736271,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.640625,"distances_sum":2149.342669866624}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9525583791208795,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8828125,"distances_sum":2460.5548411552045}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.916015625,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9525583791208795,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8828125,"distances_sum":2460.5548411552045}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8534148143523151,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6015625,"distances_sum":1851.959042901441}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.390625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.390625,"f1":null,"seconds":4.004687070846558e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":5.984375,"distances_sum":942.3417281608778}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8534148143523151,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.6015625,"distances_sum":1851.959042901441}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9414522977022982,"seconds":6.18956983089447e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.890625,"distances_sum":2426.27776601314}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8974609375,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8974609375,"f1":0.9414522977022982,"seconds":6.18956983089447e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.890625,"distances_sum":2426.27776601314}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9548019688644697,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.8984375,"distances_sum":2551.4402843901544}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.953388278388279,"seconds":6.4391642808914185e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.8515625,"distances_sum":2542.2440037727024}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9548019688644697,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.8984375,"distances_sum":2551.4402843901544}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9548019688644697,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.8984375,"distances_sum":2551.4402843901544}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2001953125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2001953125,"f1":null,"seconds":3.475695848464966e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":5.109375,"distances_sum":474.8931860714508}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.720703125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.720703125,"f1":0.828682255244756,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.171875,"distances_sum":1834.7832961563722}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.720703125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.720703125,"f1":0.828682255244756,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.171875,"distances_sum":1834.7832961563722}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.720703125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.720703125,"f1":0.828682255244756,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.171875,"distances_sum":1834.7832961563722}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.720703125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.720703125,"f1":0.828682255244756,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.171875,"distances_sum":1834.7832961563722}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8590700965700974,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.09375,"distances_sum":1898.3587757722346}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76953125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.76953125,"f1":0.8590700965700974,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.09375,"distances_sum":1898.3587757722346}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8906726953601961,"seconds":5.247071385383606e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.3671875,"distances_sum":2090.5063933167435}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9420902014652025,"seconds":5.228444933891296e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6484375,"distances_sum":2458.2786611618853}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8994140625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.9420902014652025,"seconds":5.228444933891296e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6484375,"distances_sum":2458.2786611618853}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9683264652014656,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.828125,"distances_sum":2621.945384295133}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9643257783882789,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8359375,"distances_sum":2571.9223444505724}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9683264652014656,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.828125,"distances_sum":2621.945384295133}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9683264652014656,"seconds":6.094574928283691e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.828125,"distances_sum":2621.945384295133}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7885971667221675,"seconds":4.626810550689697e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.9375,"distances_sum":1652.2895322508448}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41796875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.41796875,"f1":null,"seconds":4.0959566831588745e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.3515625,"distances_sum":985.4910580219877}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8501586954711963,"seconds":5.33275306224823e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.7109375,"distances_sum":1977.2745467802858}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.759765625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.759765625,"f1":0.8501586954711963,"seconds":5.33275306224823e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.7109375,"distances_sum":1977.2745467802858}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9167613636363645,"seconds":5.088746547698975e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.4921875,"distances_sum":2398.4576614816756}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9482944139194144,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.71875,"distances_sum":2562.1256513242365}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9482944139194144,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.71875,"distances_sum":2562.1256513242365}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9663576007326011,"seconds":5.304813385009766e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8984375,"distances_sum":2679.4012322398817}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9673763736263739,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.859375,"distances_sum":2662.5444936217764}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.963060897435898,"seconds":5.474314093589783e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8359375,"distances_sum":2663.1064579452977}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9673763736263739,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.859375,"distances_sum":2662.5444936217764}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9673763736263739,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.859375,"distances_sum":2662.5444936217764}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7099609375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7099609375,"f1":0.8181696775446784,"seconds":4.643574357032776e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.3828125,"distances_sum":1704.0129798149896}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4189453125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4189453125,"f1":null,"seconds":3.900378942489624e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.578125,"distances_sum":1012.22243953563}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7099609375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.7099609375,"f1":0.8181696775446784,"seconds":4.643574357032776e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.3828125,"distances_sum":1704.0129798149896}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.930837912087913,"seconds":5.600973963737488e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7421875,"distances_sum":2319.2184307901825}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80859375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.80859375,"f1":0.8871310980685989,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.4296875,"distances_sum":2068.717857070281}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8763392857142865,"seconds":4.7925859689712524e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.7421875,"distances_sum":1982.0277710475802}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.880859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.880859375,"f1":0.930837912087913,"seconds":5.600973963737488e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7421875,"distances_sum":2319.2184307901825}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9703525641025645,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.90625,"distances_sum":2599.182684929412}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9637133699633704,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.859375,"distances_sum":2556.6004613200175}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9550309065934068,"seconds":5.7015568017959595e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7890625,"distances_sum":2512.5688116949314}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9491472069597076,"seconds":5.4817646741867065e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7734375,"distances_sum":2486.9874518674815}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9703525641025645,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.90625,"distances_sum":2599.182684929412}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9703525641025645,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.90625,"distances_sum":2599.182684929412}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.576171875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.576171875,"f1":0.7133498445998451,"seconds":4.90434467792511e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":7.3984375,"distances_sum":1317.498886014189}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.796875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.796875,"f1":0.8772753288378297,"seconds":6.303191184997559e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.3046875,"distances_sum":1892.69173099113}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.796875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.796875,"f1":0.8772753288378297,"seconds":6.303191184997559e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.3046875,"distances_sum":1892.69173099113}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9405250999001006,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.8359375,"distances_sum":2286.2510163375655}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9060475982350988,"seconds":5.3960829973220825e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.5,"distances_sum":2068.716633758149}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8134765625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8134765625,"f1":0.8877096861471871,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.4609375,"distances_sum":1987.8838213377855}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9206616300366306,"seconds":5.690380930900574e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.7109375,"distances_sum":2206.2841792299773}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.896484375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9405250999001006,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.8359375,"distances_sum":2286.2510163375655}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9488896520146527,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.796875,"distances_sum":2348.0721196713603}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9641769688644696,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.875,"distances_sum":2439.411241173656}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9613152472527476,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.796875,"distances_sum":2457.307826345132}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9641769688644696,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.875,"distances_sum":2439.411241173656}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9641769688644696,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":8.875,"distances_sum":2439.411241173656}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8457542457542466,"seconds":4.971399903297424e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.9140625,"distances_sum":1733.273083114777}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.734375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.734375,"f1":0.8315809190809198,"seconds":4.829838871955872e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.7109375,"distances_sum":1763.0089603455335}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8496638777888785,"seconds":5.0514936447143555e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.9609375,"distances_sum":1809.4969831869291}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8496638777888785,"seconds":5.0514936447143555e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.9609375,"distances_sum":1809.4969831869291}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8650901182151189,"seconds":5.170702934265137e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.953125,"distances_sum":1858.7390282591964}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7978515625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.7978515625,"f1":0.8792212995338003,"seconds":5.243346095085144e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.40625,"distances_sum":1933.8168091899138}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9243506493506498,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.5625,"distances_sum":2253.4864099421}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9553399725274732,"seconds":5.93625009059906e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8203125,"distances_sum":2370.3682640494876}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9553399725274732,"seconds":5.93625009059906e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8203125,"distances_sum":2370.3682640494876}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":7,"bsize":13}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9710050366300369,"seconds":5.904585123062134e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8828125,"distances_sum":2496.758661924235}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9574461996337,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.796875,"distances_sum":2402.63879786874}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":7,"bsize":13},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9710050366300369,"seconds":5.904585123062134e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8828125,"distances_sum":2496.758661924235}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":7,"bsize":13},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9710050366300369,"seconds":5.904585123062134e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8828125,"distances_sum":2496.758661924235}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3671875,"f1":null,"seconds":3.648921847343445e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":5.9921875,"distances_sum":771.5671597769469}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8700814810189816,"seconds":5.133450031280518e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.3515625,"distances_sum":1811.577709343614}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2021484375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2021484375,"f1":null,"seconds":3.077089786529541e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":5.328125,"distances_sum":446.13846929769664}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8700814810189816,"seconds":5.133450031280518e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.3515625,"distances_sum":1811.577709343614}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.916744193306694,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.84375,"distances_sum":2056.8520305904317}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9490441849816853,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8828125,"distances_sum":2261.639848502946}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9089322136197142,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.859375,"distances_sum":2003.4788813104446}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9490441849816853,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8828125,"distances_sum":2261.639848502946}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.976413690476191,"seconds":6.025657057762146e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9453125,"distances_sum":2453.5008206064194}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.970703125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.970703125,"f1":0.9842261904761905,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9921875,"distances_sum":2484.5016406598083}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.970703125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9842261904761905,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9921875,"distances_sum":2484.5016406598083}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.970703125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9842261904761905,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9921875,"distances_sum":2484.5016406598083}}, n: 9
mean(cfft.distances) = 0.6445796699991089
mean(cdnet.distances) = 0.4597325834770255
mean(crand.distances) = 0.35088793130901036
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9355555555555556
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9022222222222221
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8866666666666667
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8844444444444445
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8822222222222221
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9199999999999999
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9288888888888889
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9266666666666666
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9177777777777778
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9199999999999999
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9222222222222222
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8666666666666667
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9333333333333332
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9111111111111111
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9355555555555556
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8822222222222221
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8822222222222221
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9177777777777777
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8999999999999999
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.6559449668725331] ***
*** center 1: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 4: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 5, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 9, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.27392425458296554] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27392425458296554, 0.24157799308135122] ***
*** starting iteration: 2; err: [Inf, 0.27392425458296554, 0.24157799308135122] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27392425458296554, 0.24157799308135122, 0.23389102291670982] ***
*** starting iteration: 3; err: [Inf, 0.27392425458296554, 0.24157799308135122, 0.23389102291670982] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27392425458296554, 0.24157799308135122, 0.23389102291670982, 0.23169183664935622] ***
*** starting iteration: 4; err: [Inf, 0.27392425458296554, 0.24157799308135122, 0.23389102291670982, 0.23169183664935622] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27392425458296554, 0.24157799308135122, 0.23389102291670982, 0.23169183664935622, 0.23071049936828916] ***
*** finished computation of 3 references, err: [Inf, 0.27392425458296554, 0.24157799308135122, 0.23389102291670982, 0.23169183664935622, 0.23071049936828916] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [74, 153, 16]]
** centroid: 1, normalized-entropy: 0.7577636389922391, [(1, 74), (2, 153), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [118, 75, 0]]
** centroid: 2, normalized-entropy: 0.9638908112997471, [(1, 118), (2, 75)]
*** center 3: selecting labels [1] (freq >= 2) [from [230, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30887705400479853] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30887705400479853, 0.241035804980331] ***
*** finished computation of 3 references, err: [Inf, 0.30887705400479853, 0.241035804980331] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [309, 24, 0]]
** centroid: 1, normalized-entropy: 0.3736090708557681, [(1, 309), (2, 24)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 151, 16]]
** centroid: 2, normalized-entropy: 0.45556587547952, [(2, 151), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [113, 53, 0]]
** centroid: 3, normalized-entropy: 0.903593606980866, [(1, 113), (2, 53)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31467212136273554] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31467212136273554, 0.23780157038665514] ***
*** finished computation of 3 references, err: [Inf, 0.31467212136273554, 0.23780157038665514] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [284, 38, 0]]
** centroid: 1, normalized-entropy: 0.5236205195736668, [(1, 284), (2, 38)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [145, 35, 0]]
** centroid: 2, normalized-entropy: 0.710676853856123, [(1, 145), (2, 35)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 141, 24]]
** centroid: 3, normalized-entropy: 0.5983474220910422, [(2, 141), (3, 24)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3485416410884623] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3485416410884623, 0.23289603828501398] ***
*** finished computation of 3 references, err: [Inf, 0.3485416410884623, 0.23289603828501398] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [76, 182, 26]]
** centroid: 1, normalized-entropy: 0.7798994523908653, [(1, 76), (2, 182), (3, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [212, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [121, 50, 0]]
** centroid: 3, normalized-entropy: 0.8717983558276394, [(1, 121), (2, 50)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.300290693444824] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.300290693444824, 0.239796271258644] ***
*** starting iteration: 2; err: [Inf, 0.300290693444824, 0.239796271258644] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.300290693444824, 0.239796271258644, 0.235696066098324] ***
*** starting iteration: 3; err: [Inf, 0.300290693444824, 0.239796271258644, 0.235696066098324] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.300290693444824, 0.239796271258644, 0.235696066098324, 0.23412358305923853] ***
*** starting iteration: 4; err: [Inf, 0.300290693444824, 0.239796271258644, 0.235696066098324, 0.23412358305923853] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.300290693444824, 0.239796271258644, 0.235696066098324, 0.23412358305923853, 0.23334842424342658] ***
*** finished computation of 3 references, err: [Inf, 0.300290693444824, 0.239796271258644, 0.235696066098324, 0.23412358305923853, 0.23334842424342658] ***
*** center 1: selecting labels [1] (freq >= 2) [from [204, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [89, 140, 24]]
** centroid: 2, normalized-entropy: 0.8359654062201607, [(1, 89), (2, 140), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [136, 74, 0]]
** centroid: 3, normalized-entropy: 0.9361764916347493, [(1, 136), (2, 74)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3005117352987672] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3005117352987672, 0.2500532608649608] ***
*** starting iteration: 2; err: [Inf, 0.3005117352987672, 0.2500532608649608] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3005117352987672, 0.2500532608649608, 0.24074764916711003] ***
*** starting iteration: 3; err: [Inf, 0.3005117352987672, 0.2500532608649608, 0.24074764916711003] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3005117352987672, 0.2500532608649608, 0.24074764916711003, 0.2392421783013702] ***
*** starting iteration: 4; err: [Inf, 0.3005117352987672, 0.2500532608649608, 0.24074764916711003, 0.2392421783013702] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3005117352987672, 0.2500532608649608, 0.24074764916711003, 0.2392421783013702, 0.2386307354473315] ***
*** finished computation of 3 references, err: [Inf, 0.3005117352987672, 0.2500532608649608, 0.24074764916711003, 0.2392421783013702, 0.2386307354473315] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [1, 180, 26]]
** centroid: 1, normalized-entropy: 0.5469617407220055, [(2, 180), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [139, 52, 0]]
** centroid: 2, normalized-entropy: 0.8446766057744695, [(1, 139), (2, 52)]
*** center 3: selecting labels [1] (freq >= 2) [from [269, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34219575273194675] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34219575273194675, 0.26841927299768226] ***
*** finished computation of 3 references, err: [Inf, 0.34219575273194675, 0.26841927299768226] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [257, 24, 0]]
** centroid: 1, normalized-entropy: 0.4209579602204476, [(1, 257), (2, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [156, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [9, 204, 16]]
** centroid: 3, normalized-entropy: 0.37876055609427733, [(1, 9), (2, 204), (3, 16)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.25898795453705886] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25898795453705886, 0.24315856872726863] ***
*** finished computation of 3 references, err: [Inf, 0.25898795453705886, 0.24315856872726863] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 172, 24]]
** centroid: 1, normalized-entropy: 0.5363596511250623, [(2, 172), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [199, 40, 0]]
** centroid: 2, normalized-entropy: 0.6516390954967292, [(1, 199), (2, 40)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [230, 2, 0]]
** centroid: 3, normalized-entropy: 0.07150378944995868, [(1, 230), (2, 2)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2919204294265456] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2919204294265456, 0.2634657490153754] ***
*** finished computation of 3 references, err: [Inf, 0.2919204294265456, 0.2634657490153754] ***
*** center 1: selecting labels [1] (freq >= 1) [from [221, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [109, 117, 0]]
** centroid: 2, normalized-entropy: 0.9990959376720758, [(1, 109), (2, 117)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [79, 115, 26]]
** centroid: 3, normalized-entropy: 0.8731427376777181, [(1, 79), (2, 115), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.22668471921993247] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22668471921993247, 0.18641668947570184] ***
*** finished computation of 7 references, err: [Inf, 0.22668471921993247, 0.18641668947570184] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [7, 62, 0]]
** centroid: 1, normalized-entropy: 0.47357292491745173, [(1, 7), (2, 62)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 118, 16]]
** centroid: 2, normalized-entropy: 0.52764232609436, [(2, 118), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [168, 36, 0]]
** centroid: 3, normalized-entropy: 0.6722948170756378, [(1, 168), (2, 36)]
*** center 4: selecting labels [1] (freq >= 1) [from [160, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [8, 12, 0]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(1, 8), (2, 12)]
*** center 7: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20625849668916757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20625849668916757, 0.159474642296647] ***
*** finished computation of 7 references, err: [Inf, 0.20625849668916757, 0.159474642296647] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [3, 88, 0]]
** centroid: 1, normalized-entropy: 0.20905980566852464, [(1, 3), (2, 88)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [78, 1, 0]]
** centroid: 2, normalized-entropy: 0.09794058271817412, [(1, 78), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [151, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [100, 33, 0]]
** centroid: 5, normalized-entropy: 0.8082852556793744, [(1, 100), (2, 33)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 59, 6]]
** centroid: 6, normalized-entropy: 0.4441260450795996, [(2, 59), (3, 6)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 33, 18]]
** centroid: 7, normalized-entropy: 0.9366673818775627, [(2, 33), (3, 18)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22605596446659768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22605596446659768, 0.18981125989490408] ***
*** finished computation of 7 references, err: [Inf, 0.22605596446659768, 0.18981125989490408] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [92, 20, 0]]
** centroid: 1, normalized-entropy: 0.6769418697808861, [(1, 92), (2, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [193, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [18, 62, 0]]
** centroid: 3, normalized-entropy: 0.7691928290130138, [(1, 18), (2, 62)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 33, 17]]
** centroid: 4, normalized-entropy: 0.9248187049730301, [(2, 33), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [14, 95, 0]]
** centroid: 5, normalized-entropy: 0.5531453183526465, [(1, 14), (2, 95)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 21, 9]]
** centroid: 6, normalized-entropy: 0.8812908992306927, [(2, 21), (3, 9)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [92, 1, 0]]
** centroid: 7, normalized-entropy: 0.0857426825355026, [(1, 92), (2, 1)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2876647985638217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2876647985638217, 0.212085288222152] ***
*** starting iteration: 2; err: [Inf, 0.2876647985638217, 0.212085288222152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2876647985638217, 0.212085288222152, 0.20369149495179095] ***
*** starting iteration: 3; err: [Inf, 0.2876647985638217, 0.212085288222152, 0.20369149495179095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2876647985638217, 0.212085288222152, 0.20369149495179095, 0.20145626040315395] ***
*** starting iteration: 4; err: [Inf, 0.2876647985638217, 0.212085288222152, 0.20369149495179095, 0.20145626040315395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2876647985638217, 0.212085288222152, 0.20369149495179095, 0.20145626040315395, 0.20017968861710606] ***
*** starting iteration: 5; err: [Inf, 0.2876647985638217, 0.212085288222152, 0.20369149495179095, 0.20145626040315395, 0.20017968861710606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2876647985638217, 0.212085288222152, 0.20369149495179095, 0.20145626040315395, 0.20017968861710606, 0.1986952427943872] ***
*** starting iteration: 6; err: [Inf, 0.2876647985638217, 0.212085288222152, 0.20369149495179095, 0.20145626040315395, 0.20017968861710606, 0.1986952427943872] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2876647985638217, 0.212085288222152, 0.20369149495179095, 0.20145626040315395, 0.20017968861710606, 0.1986952427943872, 0.19729626545746876] ***
*** starting iteration: 7; err: [Inf, 0.2876647985638217, 0.212085288222152, 0.20369149495179095, 0.20145626040315395, 0.20017968861710606, 0.1986952427943872, 0.19729626545746876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2876647985638217, 0.212085288222152, 0.20369149495179095, 0.20145626040315395, 0.20017968861710606, 0.1986952427943872, 0.19729626545746876, 0.19563291314360057] ***
*** starting iteration: 8; err: [Inf, 0.2876647985638217, 0.212085288222152, 0.20369149495179095, 0.20145626040315395, 0.20017968861710606, 0.1986952427943872, 0.19729626545746876, 0.19563291314360057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2876647985638217, 0.212085288222152, 0.20369149495179095, 0.20145626040315395, 0.20017968861710606, 0.1986952427943872, 0.19729626545746876, 0.19563291314360057, 0.19415873343785023] ***
*** starting iteration: 9; err: [Inf, 0.2876647985638217, 0.212085288222152, 0.20369149495179095, 0.20145626040315395, 0.20017968861710606, 0.1986952427943872, 0.19729626545746876, 0.19563291314360057, 0.19415873343785023] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2876647985638217, 0.212085288222152, 0.20369149495179095, 0.20145626040315395, 0.20017968861710606, 0.1986952427943872, 0.19729626545746876, 0.19563291314360057, 0.19415873343785023, 0.19312522581333783] ***
*** starting iteration: 10; err: [Inf, 0.2876647985638217, 0.212085288222152, 0.20369149495179095, 0.20145626040315395, 0.20017968861710606, 0.1986952427943872, 0.19729626545746876, 0.19563291314360057, 0.19415873343785023, 0.19312522581333783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2876647985638217, 0.212085288222152, 0.20369149495179095, 0.20145626040315395, 0.20017968861710606, 0.1986952427943872, 0.19729626545746876, 0.19563291314360057, 0.19415873343785023, 0.19312522581333783, 0.19204115054874984] ***
*** finished computation of 7 references, err: [Inf, 0.2876647985638217, 0.212085288222152, 0.20369149495179095, 0.20145626040315395, 0.20017968861710606, 0.1986952427943872, 0.19729626545746876, 0.19563291314360057, 0.19415873343785023, 0.19312522581333783, 0.19204115054874984] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [81, 36, 0]]
** centroid: 1, normalized-entropy: 0.8904916402194913, [(1, 81), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [25, 61, 0]]
** centroid: 2, normalized-entropy: 0.869620774054375, [(1, 25), (2, 61)]
*** center 3: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 64, 16]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(2, 64), (3, 16)]
*** center 6: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 67, 0]]
** centroid: 7, normalized-entropy: 0.18927843126120178, [(1, 2), (2, 67)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.34543446047968795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34543446047968795, 0.22888435301338805] ***
*** starting iteration: 2; err: [Inf, 0.34543446047968795, 0.22888435301338805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34543446047968795, 0.22888435301338805, 0.198412100380954] ***
*** starting iteration: 3; err: [Inf, 0.34543446047968795, 0.22888435301338805, 0.198412100380954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34543446047968795, 0.22888435301338805, 0.198412100380954, 0.19267729287925198] ***
*** starting iteration: 4; err: [Inf, 0.34543446047968795, 0.22888435301338805, 0.198412100380954, 0.19267729287925198] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34543446047968795, 0.22888435301338805, 0.198412100380954, 0.19267729287925198, 0.19015593194078817] ***
*** starting iteration: 5; err: [Inf, 0.34543446047968795, 0.22888435301338805, 0.198412100380954, 0.19267729287925198, 0.19015593194078817] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34543446047968795, 0.22888435301338805, 0.198412100380954, 0.19267729287925198, 0.19015593194078817, 0.1894966485565235] ***
*** finished computation of 7 references, err: [Inf, 0.34543446047968795, 0.22888435301338805, 0.198412100380954, 0.19267729287925198, 0.19015593194078817, 0.1894966485565235] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [98, 18, 0]]
** centroid: 1, normalized-entropy: 0.6226343162547099, [(1, 98), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [11, 60, 0]]
** centroid: 2, normalized-entropy: 0.6220403090607189, [(1, 11), (2, 60)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 44, 0]]
** centroid: 3, normalized-entropy: 0.9979139338855983, [(1, 49), (2, 44)]
*** center 4: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 92, 24]]
** centroid: 6, normalized-entropy: 0.7355085815538399, [(2, 92), (3, 24)]
*** center 7: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3425332919046607] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3425332919046607, 0.23787854648386497] ***
*** starting iteration: 2; err: [Inf, 0.3425332919046607, 0.23787854648386497] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3425332919046607, 0.23787854648386497, 0.19628319564530963] ***
*** starting iteration: 3; err: [Inf, 0.3425332919046607, 0.23787854648386497, 0.19628319564530963] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3425332919046607, 0.23787854648386497, 0.19628319564530963, 0.190509324590885] ***
*** starting iteration: 4; err: [Inf, 0.3425332919046607, 0.23787854648386497, 0.19628319564530963, 0.190509324590885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3425332919046607, 0.23787854648386497, 0.19628319564530963, 0.190509324590885, 0.189064412897193] ***
*** starting iteration: 5; err: [Inf, 0.3425332919046607, 0.23787854648386497, 0.19628319564530963, 0.190509324590885, 0.189064412897193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3425332919046607, 0.23787854648386497, 0.19628319564530963, 0.190509324590885, 0.189064412897193, 0.1889853291646361] ***
*** finished computation of 7 references, err: [Inf, 0.3425332919046607, 0.23787854648386497, 0.19628319564530963, 0.190509324590885, 0.189064412897193, 0.1889853291646361] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [89, 7, 0]]
** centroid: 1, normalized-entropy: 0.3767150026960246, [(1, 89), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 96, 26]]
** centroid: 2, normalized-entropy: 0.7473944462440388, [(2, 96), (3, 26)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 74, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [53, 41, 0]]
** centroid: 4, normalized-entropy: 0.988212082728797, [(1, 53), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [92, 11, 0]]
** centroid: 5, normalized-entropy: 0.4901757916273403, [(1, 92), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [64, 3, 0]]
** centroid: 6, normalized-entropy: 0.26377743669413856, [(1, 64), (2, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2278523018468988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2278523018468988, 0.1865647871203877] ***
*** starting iteration: 2; err: [Inf, 0.2278523018468988, 0.1865647871203877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2278523018468988, 0.1865647871203877, 0.18332496999976905] ***
*** starting iteration: 3; err: [Inf, 0.2278523018468988, 0.1865647871203877, 0.18332496999976905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2278523018468988, 0.1865647871203877, 0.18332496999976905, 0.18211926615659943] ***
*** starting iteration: 4; err: [Inf, 0.2278523018468988, 0.1865647871203877, 0.18332496999976905, 0.18211926615659943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2278523018468988, 0.1865647871203877, 0.18332496999976905, 0.18211926615659943, 0.18122251189276073] ***
*** finished computation of 7 references, err: [Inf, 0.2278523018468988, 0.1865647871203877, 0.18332496999976905, 0.18211926615659943, 0.18122251189276073] ***
*** center 1: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [91, 4, 0]]
** centroid: 2, normalized-entropy: 0.25186284771956524, [(1, 91), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 55, 16]]
** centroid: 3, normalized-entropy: 0.7698205808588191, [(2, 55), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [87, 18, 0]]
** centroid: 5, normalized-entropy: 0.6609623351442084, [(1, 87), (2, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 69, 0]]
** centroid: 6, normalized-entropy: 0.5159469300074472, [(1, 9), (2, 69)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 82, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21917422026021594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21917422026021594, 0.18336979127900935] ***
*** starting iteration: 2; err: [Inf, 0.21917422026021594, 0.18336979127900935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21917422026021594, 0.18336979127900935, 0.18074021644253602] ***
*** starting iteration: 3; err: [Inf, 0.21917422026021594, 0.18336979127900935, 0.18074021644253602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21917422026021594, 0.18336979127900935, 0.18074021644253602, 0.1798250550834247] ***
*** finished computation of 7 references, err: [Inf, 0.21917422026021594, 0.18336979127900935, 0.18074021644253602, 0.1798250550834247] ***
*** center 1: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [75, 7, 0]]
** centroid: 2, normalized-entropy: 0.42080948947668984, [(1, 75), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 55, 24]]
** centroid: 3, normalized-entropy: 0.8858834790484443, [(2, 55), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [77, 28, 0]]
** centroid: 4, normalized-entropy: 0.8366407419411671, [(1, 77), (2, 28)]
*** center 5: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [70, 37, 0]]
** centroid: 6, normalized-entropy: 0.9302559049579806, [(1, 70), (2, 37)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 87, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22113599362357267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22113599362357267, 0.1951233353507684] ***
*** starting iteration: 2; err: [Inf, 0.22113599362357267, 0.1951233353507684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22113599362357267, 0.1951233353507684, 0.19115983472503106] ***
*** starting iteration: 3; err: [Inf, 0.22113599362357267, 0.1951233353507684, 0.19115983472503106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22113599362357267, 0.1951233353507684, 0.19115983472503106, 0.18950457213309663] ***
*** starting iteration: 4; err: [Inf, 0.22113599362357267, 0.1951233353507684, 0.19115983472503106, 0.18950457213309663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22113599362357267, 0.1951233353507684, 0.19115983472503106, 0.18950457213309663, 0.1889633104593299] ***
*** finished computation of 7 references, err: [Inf, 0.22113599362357267, 0.1951233353507684, 0.19115983472503106, 0.18950457213309663, 0.1889633104593299] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 77, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 34, 0]]
** centroid: 2, normalized-entropy: 0.9215608652945444, [(1, 67), (2, 34)]
*** center 3: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 89, 26]]
** centroid: 4, normalized-entropy: 0.7711273724428293, [(2, 89), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 31, 0]]
** centroid: 5, normalized-entropy: 0.9111178649415465, [(1, 64), (2, 31)]
*** center 6: selecting labels [1] (freq >= 2) [from [103, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 8)
[0.9309818800836765, 0.9240617863372353, 0.917018815222408, 0.8919877961794129, 0.8880047712383042, 0.8610886335437233, 0.8590446734159309, 0.7820005634376891]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.3, 2) => 0.9309818800836765
finished with 9
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.3558679846739089] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3558679846739089, 0.3090943902277866] ***
*** starting iteration: 2; err: [Inf, 0.3558679846739089, 0.3090943902277866] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3558679846739089, 0.3090943902277866, 0.29405189916357266] ***
*** starting iteration: 3; err: [Inf, 0.3558679846739089, 0.3090943902277866, 0.29405189916357266] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3558679846739089, 0.3090943902277866, 0.29405189916357266, 0.2901945727578065] ***
*** starting iteration: 4; err: [Inf, 0.3558679846739089, 0.3090943902277866, 0.29405189916357266, 0.2901945727578065] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3558679846739089, 0.3090943902277866, 0.29405189916357266, 0.2901945727578065, 0.28925181547943335] ***
*** finished computation of 3 references, err: [Inf, 0.3558679846739089, 0.3090943902277866, 0.29405189916357266, 0.2901945727578065, 0.28925181547943335] ***
*** center 1: selecting labels [1] (freq >= 2) [from [234, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [125, 75, 0]]
** centroid: 2, normalized-entropy: 0.954434002924965, [(1, 125), (2, 75)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [63, 153, 16]]
** centroid: 3, normalized-entropy: 0.7399898116628992, [(1, 63), (2, 153), (3, 16)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3615054708460103] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3615054708460103, 0.29914157918334633] ***
*** starting iteration: 2; err: [Inf, 0.3615054708460103, 0.29914157918334633] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3615054708460103, 0.29914157918334633, 0.29328384093180676] ***
*** starting iteration: 3; err: [Inf, 0.3615054708460103, 0.29914157918334633, 0.29328384093180676] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3615054708460103, 0.29914157918334633, 0.29328384093180676, 0.2923300637660417] ***
*** finished computation of 3 references, err: [Inf, 0.3615054708460103, 0.29914157918334633, 0.29328384093180676, 0.2923300637660417] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [129, 63, 0]]
** centroid: 1, normalized-entropy: 0.912999213585247, [(1, 129), (2, 63)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [71, 151, 24]]
** centroid: 2, normalized-entropy: 0.8058160618692553, [(1, 71), (2, 151), (3, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [229, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3655928764911159] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3655928764911159, 0.30012908547270534] ***
*** starting iteration: 2; err: [Inf, 0.3655928764911159, 0.30012908547270534] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3655928764911159, 0.30012908547270534, 0.2977215812403312] ***
*** starting iteration: 3; err: [Inf, 0.3655928764911159, 0.30012908547270534, 0.2977215812403312] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3655928764911159, 0.30012908547270534, 0.2977215812403312, 0.29691361549353673] ***
*** finished computation of 3 references, err: [Inf, 0.3655928764911159, 0.30012908547270534, 0.2977215812403312, 0.29691361549353673] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [149, 46, 0]]
** centroid: 1, normalized-entropy: 0.7881510341214842, [(1, 149), (2, 46)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 178, 26]]
** centroid: 2, normalized-entropy: 0.550405815580872, [(2, 178), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [260, 8, 0]]
** centroid: 3, normalized-entropy: 0.19364280468389852, [(1, 260), (2, 8)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 9)
[0.9309818800836765, 0.9240617863372353, 0.917018815222408, 0.8919877961794129, 0.8880047712383042, 0.8660336983690277, 0.8610886335437233, 0.8590446734159309, 0.7820005634376891]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.3, 2) => 0.9309818800836765
finished with 11
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.3619759848548306] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3619759848548306, 0.23070625298692882] ***
*** starting iteration: 2; err: [Inf, 0.3619759848548306, 0.23070625298692882] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3619759848548306, 0.23070625298692882, 0.2277255611880137] ***
*** starting iteration: 3; err: [Inf, 0.3619759848548306, 0.23070625298692882, 0.2277255611880137] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3619759848548306, 0.23070625298692882, 0.2277255611880137, 0.22729951378472665] ***
*** finished computation of 3 references, err: [Inf, 0.3619759848548306, 0.23070625298692882, 0.2277255611880137, 0.22729951378472665] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [109, 90, 1]]
** centroid: 1, normalized-entropy: 0.9934142181800525, [(1, 109), (2, 90)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [77, 138, 15]]
** centroid: 2, normalized-entropy: 0.7745085560883705, [(1, 77), (2, 138), (3, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [236, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27296722389902844] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27296722389902844, 0.23656523458637307] ***
*** starting iteration: 2; err: [Inf, 0.27296722389902844, 0.23656523458637307] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27296722389902844, 0.23656523458637307, 0.23283267270276573] ***
*** starting iteration: 3; err: [Inf, 0.27296722389902844, 0.23656523458637307, 0.23283267270276573] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27296722389902844, 0.23656523458637307, 0.23283267270276573, 0.2321143532018254] ***
*** finished computation of 3 references, err: [Inf, 0.27296722389902844, 0.23656523458637307, 0.23283267270276573, 0.2321143532018254] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [152, 38, 0]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(1, 152), (2, 38)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [277, 16, 0]]
** centroid: 2, normalized-entropy: 0.30565589880577965, [(1, 277), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 160, 24]]
** centroid: 3, normalized-entropy: 0.5586293734521991, [(2, 160), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.276489627835197] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.276489627835197, 0.24457193778009564] ***
*** starting iteration: 2; err: [Inf, 0.276489627835197, 0.24457193778009564] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.276489627835197, 0.24457193778009564, 0.23688368174991664] ***
*** starting iteration: 3; err: [Inf, 0.276489627835197, 0.24457193778009564, 0.23688368174991664] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.276489627835197, 0.24457193778009564, 0.23688368174991664, 0.23549079012985843] ***
*** starting iteration: 4; err: [Inf, 0.276489627835197, 0.24457193778009564, 0.23688368174991664, 0.23549079012985843] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.276489627835197, 0.24457193778009564, 0.23688368174991664, 0.23549079012985843, 0.23498309519968513] ***
*** finished computation of 3 references, err: [Inf, 0.276489627835197, 0.24457193778009564, 0.23688368174991664, 0.23549079012985843, 0.23498309519968513] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [272, 7, 0]]
** centroid: 1, normalized-entropy: 0.16913429650841488, [(1, 272), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [134, 46, 0]]
** centroid: 2, normalized-entropy: 0.8199653102187632, [(1, 134), (2, 46)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [3, 179, 26]]
** centroid: 3, normalized-entropy: 0.40986809627179055, [(1, 3), (2, 179), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.43033145026124836] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43033145026124836, 0.3360000770740412] ***
*** starting iteration: 2; err: [Inf, 0.43033145026124836, 0.3360000770740412] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43033145026124836, 0.3360000770740412, 0.32825903537859386] ***
*** starting iteration: 3; err: [Inf, 0.43033145026124836, 0.3360000770740412, 0.32825903537859386] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43033145026124836, 0.3360000770740412, 0.32825903537859386, 0.3254686123258001] ***
*** starting iteration: 4; err: [Inf, 0.43033145026124836, 0.3360000770740412, 0.32825903537859386, 0.3254686123258001] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43033145026124836, 0.3360000770740412, 0.32825903537859386, 0.3254686123258001, 0.3242739445638952] ***
*** starting iteration: 5; err: [Inf, 0.43033145026124836, 0.3360000770740412, 0.32825903537859386, 0.3254686123258001, 0.3242739445638952] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43033145026124836, 0.3360000770740412, 0.32825903537859386, 0.3254686123258001, 0.3242739445638952, 0.3236087259106539] ***
*** finished computation of 3 references, err: [Inf, 0.43033145026124836, 0.3360000770740412, 0.32825903537859386, 0.3254686123258001, 0.3242739445638952, 0.3236087259106539] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [61, 177, 16]]
** centroid: 1, normalized-entropy: 0.6994495954032116, [(1, 61), (2, 177), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [178, 39, 0]]
** centroid: 2, normalized-entropy: 0.6794717981235278, [(1, 178), (2, 39)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [183, 12, 0]]
** centroid: 3, normalized-entropy: 0.33352200393097675, [(1, 183), (2, 12)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4439157667518154] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4439157667518154, 0.34435225654857] ***
*** starting iteration: 2; err: [Inf, 0.4439157667518154, 0.34435225654857] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4439157667518154, 0.34435225654857, 0.3391803099356335] ***
*** starting iteration: 3; err: [Inf, 0.4439157667518154, 0.34435225654857, 0.3391803099356335] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4439157667518154, 0.34435225654857, 0.3391803099356335, 0.3368059429891597] ***
*** starting iteration: 4; err: [Inf, 0.4439157667518154, 0.34435225654857, 0.3391803099356335, 0.3368059429891597] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4439157667518154, 0.34435225654857, 0.3391803099356335, 0.3368059429891597, 0.3353434791495239] ***
*** starting iteration: 5; err: [Inf, 0.4439157667518154, 0.34435225654857, 0.3391803099356335, 0.3368059429891597, 0.3353434791495239] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4439157667518154, 0.34435225654857, 0.3391803099356335, 0.3368059429891597, 0.3353434791495239, 0.33371816726744935] ***
*** starting iteration: 6; err: [Inf, 0.4439157667518154, 0.34435225654857, 0.3391803099356335, 0.3368059429891597, 0.3353434791495239, 0.33371816726744935] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4439157667518154, 0.34435225654857, 0.3391803099356335, 0.3368059429891597, 0.3353434791495239, 0.33371816726744935, 0.3330985462485716] ***
*** finished computation of 3 references, err: [Inf, 0.4439157667518154, 0.34435225654857, 0.3391803099356335, 0.3368059429891597, 0.3353434791495239, 0.33371816726744935, 0.3330985462485716] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [84, 95, 24]]
** centroid: 1, normalized-entropy: 0.8855802900242129, [(1, 84), (2, 95), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [103, 118, 0]]
** centroid: 2, normalized-entropy: 0.9966743506829757, [(1, 103), (2, 118)]
*** center 3: selecting labels [1] (freq >= 2) [from [242, 1, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30906023121420767] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30906023121420767, 0.29847841079568843] ***
*** starting iteration: 2; err: [Inf, 0.30906023121420767, 0.29847841079568843] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30906023121420767, 0.29847841079568843, 0.2984919382602736] ***
*** finished computation of 3 references, err: [Inf, 0.30906023121420767, 0.29847841079568843, 0.2984919382602736] ***
*** center 1: selecting labels [1] (freq >= 2) [from [228, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [113, 89, 0]]
** centroid: 2, normalized-entropy: 0.9897931752818661, [(1, 113), (2, 89)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [68, 143, 26]]
** centroid: 3, normalized-entropy: 0.8242329012283485, [(1, 68), (2, 143), (3, 26)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 11)
[0.9309818800836765, 0.9240617863372353, 0.917018815222408, 0.8919877961794129, 0.8880047712383042, 0.8869588151025277, 0.8780547014079948, 0.8660336983690277, 0.8610886335437233, 0.8590446734159309, 0.7820005634376891]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.3, 2) => 0.9309818800836765
finished with 13
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.4082476381399856] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4082476381399856, 0.2902664641385434] ***
*** starting iteration: 2; err: [Inf, 0.4082476381399856, 0.2902664641385434] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4082476381399856, 0.2902664641385434, 0.28808139849387043] ***
*** starting iteration: 3; err: [Inf, 0.4082476381399856, 0.2902664641385434, 0.28808139849387043] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4082476381399856, 0.2902664641385434, 0.28808139849387043, 0.2883120187874268] ***
*** finished computation of 3 references, err: [Inf, 0.4082476381399856, 0.2902664641385434, 0.28808139849387043, 0.2883120187874268] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [83, 153, 16]]
** centroid: 1, normalized-entropy: 0.7680466323401579, [(1, 83), (2, 153), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [213, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [126, 75, 0]]
** centroid: 3, normalized-entropy: 0.9530483471581301, [(1, 126), (2, 75)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3941681056508216] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3941681056508216, 0.30281257580245274] ***
*** starting iteration: 2; err: [Inf, 0.3941681056508216, 0.30281257580245274] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3941681056508216, 0.30281257580245274, 0.29505969819122707] ***
*** starting iteration: 3; err: [Inf, 0.3941681056508216, 0.30281257580245274, 0.29505969819122707] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3941681056508216, 0.30281257580245274, 0.29505969819122707, 0.29350563324708634] ***
*** starting iteration: 4; err: [Inf, 0.3941681056508216, 0.30281257580245274, 0.29505969819122707, 0.29350563324708634] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3941681056508216, 0.30281257580245274, 0.29505969819122707, 0.29350563324708634, 0.2933779139619047] ***
*** finished computation of 3 references, err: [Inf, 0.3941681056508216, 0.30281257580245274, 0.29505969819122707, 0.29350563324708634, 0.2933779139619047] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [265, 14, 0]]
** centroid: 1, normalized-entropy: 0.28715774726572785, [(1, 265), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [164, 34, 0]]
** centroid: 2, normalized-entropy: 0.6616179061408356, [(1, 164), (2, 34)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 166, 24]]
** centroid: 3, normalized-entropy: 0.5472469471683307, [(2, 166), (3, 24)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38987838411550113] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38987838411550113, 0.3038283198781457] ***
*** starting iteration: 2; err: [Inf, 0.38987838411550113, 0.3038283198781457] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38987838411550113, 0.3038283198781457, 0.298362017560309] ***
*** starting iteration: 3; err: [Inf, 0.38987838411550113, 0.3038283198781457, 0.298362017560309] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38987838411550113, 0.3038283198781457, 0.298362017560309, 0.29690437418348653] ***
*** starting iteration: 4; err: [Inf, 0.38987838411550113, 0.3038283198781457, 0.298362017560309, 0.29690437418348653] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38987838411550113, 0.3038283198781457, 0.298362017560309, 0.29690437418348653, 0.29644275191791547] ***
*** finished computation of 3 references, err: [Inf, 0.38987838411550113, 0.3038283198781457, 0.298362017560309, 0.29690437418348653, 0.29644275191791547] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [272, 8, 0]]
** centroid: 1, normalized-entropy: 0.18717625687320805, [(1, 272), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [137, 46, 0]]
** centroid: 2, normalized-entropy: 0.8134362025233062, [(1, 137), (2, 46)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 178, 26]]
** centroid: 3, normalized-entropy: 0.550405815580872, [(2, 178), (3, 26)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31512588673402686] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31512588673402686, 0.24157936176055814] ***
*** starting iteration: 2; err: [Inf, 0.31512588673402686, 0.24157936176055814] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31512588673402686, 0.24157936176055814, 0.23837462107038443] ***
*** starting iteration: 3; err: [Inf, 0.31512588673402686, 0.24157936176055814, 0.23837462107038443] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31512588673402686, 0.24157936176055814, 0.23837462107038443, 0.2374600608086398] ***
*** finished computation of 3 references, err: [Inf, 0.31512588673402686, 0.24157936176055814, 0.23837462107038443, 0.2374600608086398] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [284, 8, 0]]
** centroid: 1, normalized-entropy: 0.18116640155354563, [(1, 284), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [138, 49, 0]]
** centroid: 2, normalized-entropy: 0.8297973615077835, [(1, 138), (2, 49)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 171, 16]]
** centroid: 3, normalized-entropy: 0.42147852381550543, [(2, 171), (3, 16)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34586693654660655] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34586693654660655, 0.23122901070270985] ***
*** starting iteration: 2; err: [Inf, 0.34586693654660655, 0.23122901070270985] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34586693654660655, 0.23122901070270985, 0.2314183654325052] ***
*** finished computation of 3 references, err: [Inf, 0.34586693654660655, 0.23122901070270985, 0.2314183654325052] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [82, 154, 24]]
** centroid: 1, normalized-entropy: 0.8138317748886289, [(1, 82), (2, 154), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [211, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [136, 60, 0]]
** centroid: 3, normalized-entropy: 0.8886466698980794, [(1, 136), (2, 60)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30720928136951875] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30720928136951875, 0.245614780249937] ***
*** starting iteration: 2; err: [Inf, 0.30720928136951875, 0.245614780249937] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30720928136951875, 0.245614780249937, 0.23319887435287126] ***
*** starting iteration: 3; err: [Inf, 0.30720928136951875, 0.245614780249937, 0.23319887435287126] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30720928136951875, 0.245614780249937, 0.23319887435287126, 0.23132909391762346] ***
*** starting iteration: 4; err: [Inf, 0.30720928136951875, 0.245614780249937, 0.23319887435287126, 0.23132909391762346] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30720928136951875, 0.245614780249937, 0.23319887435287126, 0.23132909391762346, 0.2313194161649609] ***
*** finished computation of 3 references, err: [Inf, 0.30720928136951875, 0.245614780249937, 0.23319887435287126, 0.23132909391762346, 0.2313194161649609] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [72, 165, 26]]
** centroid: 1, normalized-entropy: 0.7972900869128735, [(1, 72), (2, 165), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [214, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [123, 67, 0]]
** centroid: 3, normalized-entropy: 0.9363963456078046, [(1, 123), (2, 67)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 13)
[0.9309818800836765, 0.9240617863372353, 0.917018815222408, 0.9110008211804619, 0.9059928191664719, 0.8919877961794129, 0.8880047712383042, 0.8869588151025277, 0.8780547014079948, 0.8660336983690277, 0.8610886335437233, 0.8590446734159309, 0.7820005634376891]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.3, 2) => 0.9309818800836765
finished with 13
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9309818800836765, 0.9240617863372353, 0.917018815222408, 0.9110008211804619, 0.9059928191664719, 0.8919877961794129, 0.8880047712383042, 0.8869588151025277, 0.8780547014079948, 0.8660336983690277, 0.8610886335437233, 0.8590446734159309, 0.7820005634376891]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.3, 2) => 0.9309818800836765
finished with 13
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9309818800836765, 0.9240617863372353, 0.917018815222408, 0.9110008211804619, 0.9059928191664719, 0.8919877961794129, 0.8880047712383042, 0.8869588151025277, 0.8780547014079948, 0.8660336983690277, 0.8610886335437233, 0.8590446734159309, 0.7820005634376891]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.3, 2) => 0.9309818800836765
finished with 13
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9309818800836765, 0.9240617863372353, 0.917018815222408, 0.9110008211804619, 0.9059928191664719, 0.8919877961794129, 0.8880047712383042, 0.8869588151025277, 0.8780547014079948, 0.8660336983690277, 0.8610886335437233, 0.8590446734159309, 0.7820005634376891]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.3, 2) => 0.9309818800836765
finished with 14
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.18828466696826904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18828466696826904, 0.15348740934615243] ***
*** starting iteration: 2; err: [Inf, 0.18828466696826904, 0.15348740934615243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18828466696826904, 0.15348740934615243, 0.14835932731905296] ***
*** starting iteration: 3; err: [Inf, 0.18828466696826904, 0.15348740934615243, 0.14835932731905296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18828466696826904, 0.15348740934615243, 0.14835932731905296, 0.14751155120977857] ***
*** finished computation of 7 references, err: [Inf, 0.18828466696826904, 0.15348740934615243, 0.14835932731905296, 0.14751155120977857] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [94, 9, 0]]
** centroid: 1, normalized-entropy: 0.4276590022251725, [(1, 94), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [69, 19, 0]]
** centroid: 2, normalized-entropy: 0.7526269564427315, [(1, 69), (2, 19)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 68, 16]]
** centroid: 3, normalized-entropy: 0.7024665512903904, [(2, 68), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 49, 0]]
** centroid: 5, normalized-entropy: 0.999280531064971, [(1, 46), (2, 49)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 83, 0]]
** centroid: 6, normalized-entropy: 0.39430023792747493, [(1, 7), (2, 83)]
*** center 7: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20969129262095515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20969129262095515, 0.151801112672032] ***
*** starting iteration: 2; err: [Inf, 0.20969129262095515, 0.151801112672032] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20969129262095515, 0.151801112672032, 0.14731882348645484] ***
*** starting iteration: 3; err: [Inf, 0.20969129262095515, 0.151801112672032, 0.14731882348645484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20969129262095515, 0.151801112672032, 0.14731882348645484, 0.14702941801690816] ***
*** finished computation of 7 references, err: [Inf, 0.20969129262095515, 0.151801112672032, 0.14731882348645484, 0.14702941801690816] ***
*** center 1: selecting labels [1] (freq >= 2) [from [125, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 81, 24]]
** centroid: 2, normalized-entropy: 0.775512658133148, [(2, 81), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [56, 27, 0]]
** centroid: 3, normalized-entropy: 0.9100534290139191, [(1, 56), (2, 27)]
*** center 4: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [52, 48, 0]]
** centroid: 5, normalized-entropy: 0.998845535995202, [(1, 52), (2, 48)]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 58, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19148168898560386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19148168898560386, 0.15294341484644636] ***
*** starting iteration: 2; err: [Inf, 0.19148168898560386, 0.15294341484644636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19148168898560386, 0.15294341484644636, 0.1493295941800661] ***
*** starting iteration: 3; err: [Inf, 0.19148168898560386, 0.15294341484644636, 0.1493295941800661] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19148168898560386, 0.15294341484644636, 0.1493295941800661, 0.1483200950617169] ***
*** starting iteration: 4; err: [Inf, 0.19148168898560386, 0.15294341484644636, 0.1493295941800661, 0.1483200950617169] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19148168898560386, 0.15294341484644636, 0.1493295941800661, 0.1483200950617169, 0.14767081995119063] ***
*** finished computation of 7 references, err: [Inf, 0.19148168898560386, 0.15294341484644636, 0.1493295941800661, 0.1483200950617169, 0.14767081995119063] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 74, 26]]
** centroid: 3, normalized-entropy: 0.8267463724926181, [(2, 74), (3, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [132, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 41, 0]]
** centroid: 5, normalized-entropy: 0.9674756088157442, [(1, 63), (2, 41)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [38, 54, 0]]
** centroid: 6, normalized-entropy: 0.978070970973496, [(1, 38), (2, 54)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 63, 0]]
** centroid: 7, normalized-entropy: 0.19823496409776642, [(1, 2), (2, 63)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9390438342534151, 0.9309818800836765, 0.9240617863372353, 0.917018815222408, 0.9110008211804619, 0.9059928191664719, 0.8919877961794129, 0.8880047712383042, 0.8869588151025277, 0.8780547014079948, 0.8660336983690277, 0.8610886335437233, 0.8590446734159309, 0.7820005634376891]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.9, 2) => 0.9390438342534151
finished with 15
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.1950472052808286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1950472052808286, 0.16195231660055248] ***
*** starting iteration: 2; err: [Inf, 0.1950472052808286, 0.16195231660055248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1950472052808286, 0.16195231660055248, 0.1522530809488125] ***
*** starting iteration: 3; err: [Inf, 0.1950472052808286, 0.16195231660055248, 0.1522530809488125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1950472052808286, 0.16195231660055248, 0.1522530809488125, 0.14771402737964084] ***
*** starting iteration: 4; err: [Inf, 0.1950472052808286, 0.16195231660055248, 0.1522530809488125, 0.14771402737964084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1950472052808286, 0.16195231660055248, 0.1522530809488125, 0.14771402737964084, 0.14600674856409385] ***
*** starting iteration: 5; err: [Inf, 0.1950472052808286, 0.16195231660055248, 0.1522530809488125, 0.14771402737964084, 0.14600674856409385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1950472052808286, 0.16195231660055248, 0.1522530809488125, 0.14771402737964084, 0.14600674856409385, 0.14550449282795125] ***
*** finished computation of 7 references, err: [Inf, 0.1950472052808286, 0.16195231660055248, 0.1522530809488125, 0.14771402737964084, 0.14600674856409385, 0.14550449282795125] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [94, 7, 0]]
** centroid: 1, normalized-entropy: 0.3633319133250508, [(1, 94), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [8, 67, 0]]
** centroid: 2, normalized-entropy: 0.48977901368693744, [(1, 8), (2, 67)]
*** center 3: selecting labels [1] (freq >= 2) [from [57, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [17, 93, 0]]
** centroid: 4, normalized-entropy: 0.6210993704855443, [(1, 17), (2, 93)]
*** center 5: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [137, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 60, 16]]
** centroid: 7, normalized-entropy: 0.7424875695421234, [(2, 60), (3, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.247703041613236] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.247703041613236, 0.16306289186285086] ***
*** starting iteration: 2; err: [Inf, 0.247703041613236, 0.16306289186285086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.247703041613236, 0.16306289186285086, 0.1553775882180864] ***
*** starting iteration: 3; err: [Inf, 0.247703041613236, 0.16306289186285086, 0.1553775882180864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.247703041613236, 0.16306289186285086, 0.1553775882180864, 0.1533123603393638] ***
*** starting iteration: 4; err: [Inf, 0.247703041613236, 0.16306289186285086, 0.1553775882180864, 0.1533123603393638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.247703041613236, 0.16306289186285086, 0.1553775882180864, 0.1533123603393638, 0.1519417458533615] ***
*** starting iteration: 5; err: [Inf, 0.247703041613236, 0.16306289186285086, 0.1553775882180864, 0.1533123603393638, 0.1519417458533615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.247703041613236, 0.16306289186285086, 0.1553775882180864, 0.1533123603393638, 0.1519417458533615, 0.15065043716868762] ***
*** starting iteration: 6; err: [Inf, 0.247703041613236, 0.16306289186285086, 0.1553775882180864, 0.1533123603393638, 0.1519417458533615, 0.15065043716868762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.247703041613236, 0.16306289186285086, 0.1553775882180864, 0.1533123603393638, 0.1519417458533615, 0.15065043716868762, 0.1494403657834346] ***
*** starting iteration: 7; err: [Inf, 0.247703041613236, 0.16306289186285086, 0.1553775882180864, 0.1533123603393638, 0.1519417458533615, 0.15065043716868762, 0.1494403657834346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.247703041613236, 0.16306289186285086, 0.1553775882180864, 0.1533123603393638, 0.1519417458533615, 0.15065043716868762, 0.1494403657834346, 0.1481230085132004] ***
*** starting iteration: 8; err: [Inf, 0.247703041613236, 0.16306289186285086, 0.1553775882180864, 0.1533123603393638, 0.1519417458533615, 0.15065043716868762, 0.1494403657834346, 0.1481230085132004] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.247703041613236, 0.16306289186285086, 0.1553775882180864, 0.1533123603393638, 0.1519417458533615, 0.15065043716868762, 0.1494403657834346, 0.1481230085132004, 0.14707090299593276] ***
*** starting iteration: 9; err: [Inf, 0.247703041613236, 0.16306289186285086, 0.1553775882180864, 0.1533123603393638, 0.1519417458533615, 0.15065043716868762, 0.1494403657834346, 0.1481230085132004, 0.14707090299593276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.247703041613236, 0.16306289186285086, 0.1553775882180864, 0.1533123603393638, 0.1519417458533615, 0.15065043716868762, 0.1494403657834346, 0.1481230085132004, 0.14707090299593276, 0.14636559184847298] ***
*** finished computation of 7 references, err: [Inf, 0.247703041613236, 0.16306289186285086, 0.1553775882180864, 0.1533123603393638, 0.1519417458533615, 0.15065043716868762, 0.1494403657834346, 0.1481230085132004, 0.14707090299593276, 0.14636559184847298] ***
*** center 1: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 90, 24]]
** centroid: 2, normalized-entropy: 0.7424875695421234, [(2, 90), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 14, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 70), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [3, 60, 0]]
** centroid: 4, normalized-entropy: 0.2761954276479391, [(1, 3), (2, 60)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [95, 28, 0]]
** centroid: 5, normalized-entropy: 0.7738785654282402, [(1, 95), (2, 28)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [70, 22, 0]]
** centroid: 6, normalized-entropy: 0.7935912300117066, [(1, 70), (2, 22)]
*** center 7: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21961284750399515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21961284750399515, 0.17892464822524043] ***
*** starting iteration: 2; err: [Inf, 0.21961284750399515, 0.17892464822524043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21961284750399515, 0.17892464822524043, 0.156455980576128] ***
*** starting iteration: 3; err: [Inf, 0.21961284750399515, 0.17892464822524043, 0.156455980576128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21961284750399515, 0.17892464822524043, 0.156455980576128, 0.15085148184268415] ***
*** starting iteration: 4; err: [Inf, 0.21961284750399515, 0.17892464822524043, 0.156455980576128, 0.15085148184268415] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21961284750399515, 0.17892464822524043, 0.156455980576128, 0.15085148184268415, 0.14843223443062142] ***
*** starting iteration: 5; err: [Inf, 0.21961284750399515, 0.17892464822524043, 0.156455980576128, 0.15085148184268415, 0.14843223443062142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21961284750399515, 0.17892464822524043, 0.156455980576128, 0.15085148184268415, 0.14843223443062142, 0.14749583421551485] ***
*** finished computation of 7 references, err: [Inf, 0.21961284750399515, 0.17892464822524043, 0.156455980576128, 0.15085148184268415, 0.14843223443062142, 0.14749583421551485] ***
*** center 1: selecting labels [1] (freq >= 2) [from [136, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 76, 21]]
** centroid: 2, normalized-entropy: 0.7537153483720096, [(2, 76), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [93, 30, 0]]
** centroid: 3, normalized-entropy: 0.8014698931335286, [(1, 93), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 40, 0]]
** centroid: 4, normalized-entropy: 0.9819407868640977, [(1, 55), (2, 40)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [55, 30, 0]]
** centroid: 5, normalized-entropy: 0.9366673818775627, [(1, 55), (2, 30)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 56, 5]]
** centroid: 6, normalized-entropy: 0.4090731390438265, [(2, 56), (3, 5)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 12 centroids; started with 7
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.19216825899248943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19216825899248943, 0.15300163574842737] ***
*** starting iteration: 2; err: [Inf, 0.19216825899248943, 0.15300163574842737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19216825899248943, 0.15300163574842737, 0.14883847444551065] ***
*** starting iteration: 3; err: [Inf, 0.19216825899248943, 0.15300163574842737, 0.14883847444551065] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19216825899248943, 0.15300163574842737, 0.14883847444551065, 0.1479186853049323] ***
*** finished computation of 7 references, err: [Inf, 0.19216825899248943, 0.15300163574842737, 0.14883847444551065, 0.1479186853049323] ***
*** center 1: selecting labels [1] (freq >= 2) [from [172, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [112, 15, 0]]
** centroid: 2, normalized-entropy: 0.5239042914605166, [(1, 112), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 106, 33]]
** centroid: 3, normalized-entropy: 0.7907067265182696, [(2, 106), (3, 33)]
*** center 4: selecting labels [1] (freq >= 2) [from [127, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [32, 130, 0]]
** centroid: 5, normalized-entropy: 0.7169622516889513, [(1, 32), (2, 130)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [25, 86, 0]]
** centroid: 6, normalized-entropy: 0.7695944821271463, [(1, 25), (2, 86)]
*** center 7: selecting labels [1] (freq >= 2) [from [162, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1866437845621258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1866437845621258, 0.1481840848196298] ***
*** starting iteration: 2; err: [Inf, 0.1866437845621258, 0.1481840848196298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1866437845621258, 0.1481840848196298, 0.14287456174381077] ***
*** starting iteration: 3; err: [Inf, 0.1866437845621258, 0.1481840848196298, 0.14287456174381077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1866437845621258, 0.1481840848196298, 0.14287456174381077, 0.14146536621730774] ***
*** starting iteration: 4; err: [Inf, 0.1866437845621258, 0.1481840848196298, 0.14287456174381077, 0.14146536621730774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1866437845621258, 0.1481840848196298, 0.14287456174381077, 0.14146536621730774, 0.14127691952511667] ***
*** finished computation of 7 references, err: [Inf, 0.1866437845621258, 0.1481840848196298, 0.14287456174381077, 0.14146536621730774, 0.14127691952511667] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 50, 3]]
** centroid: 1, normalized-entropy: 0.3138129641688652, [(2, 50), (3, 3)]
*** center 2: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 15, 0]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(1, 50), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [48, 17, 0]]
** centroid: 4, normalized-entropy: 0.829059069399666, [(1, 48), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 15, 0]]
** centroid: 5, normalized-entropy: 0.7012065844539666, [(1, 64), (2, 15)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 68, 13]]
** centroid: 6, normalized-entropy: 0.635489638182683, [(2, 68), (3, 13)]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.189672933133319] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.189672933133319, 0.1463529424481094] ***
*** starting iteration: 2; err: [Inf, 0.189672933133319, 0.1463529424481094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.189672933133319, 0.1463529424481094, 0.14236652556434273] ***
*** starting iteration: 3; err: [Inf, 0.189672933133319, 0.1463529424481094, 0.14236652556434273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.189672933133319, 0.1463529424481094, 0.14236652556434273, 0.14153452319372445] ***
*** finished computation of 7 references, err: [Inf, 0.189672933133319, 0.1463529424481094, 0.14236652556434273, 0.14153452319372445] ***
*** center 1: selecting labels [1] (freq >= 2) [from [63, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 68, 14]]
** centroid: 2, normalized-entropy: 0.6593758812786991, [(2, 68), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [66, 7, 0]]
** centroid: 3, normalized-entropy: 0.4558314584408233, [(1, 66), (2, 7)]
*** center 4: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 58, 0]]
** centroid: 5, normalized-entropy: 0.710676853856123, [(1, 14), (2, 58)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [55, 36, 0]]
** centroid: 6, normalized-entropy: 0.9683211863989214, [(1, 55), (2, 36)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19189627394732087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19189627394732087, 0.14887107771541924] ***
*** starting iteration: 2; err: [Inf, 0.19189627394732087, 0.14887107771541924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19189627394732087, 0.14887107771541924, 0.14668706714222207] ***
*** starting iteration: 3; err: [Inf, 0.19189627394732087, 0.14887107771541924, 0.14668706714222207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19189627394732087, 0.14887107771541924, 0.14668706714222207, 0.1460503822285682] ***
*** finished computation of 7 references, err: [Inf, 0.19189627394732087, 0.14887107771541924, 0.14668706714222207, 0.1460503822285682] ***
*** center 1: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 23]]
** centroid: 2, normalized-entropy: 0.9134601452569628, [(2, 47), (3, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [67, 19, 0]]
** centroid: 4, normalized-entropy: 0.7618624463753669, [(1, 67), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 50, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 25), (2, 50)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 49, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18588092271471396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18588092271471396, 0.15414324351400138] ***
*** starting iteration: 2; err: [Inf, 0.18588092271471396, 0.15414324351400138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18588092271471396, 0.15414324351400138, 0.14877671498060227] ***
*** starting iteration: 3; err: [Inf, 0.18588092271471396, 0.15414324351400138, 0.14877671498060227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18588092271471396, 0.15414324351400138, 0.14877671498060227, 0.14670231558009983] ***
*** starting iteration: 4; err: [Inf, 0.18588092271471396, 0.15414324351400138, 0.14877671498060227, 0.14670231558009983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18588092271471396, 0.15414324351400138, 0.14877671498060227, 0.14670231558009983, 0.1458007976235822] ***
*** finished computation of 7 references, err: [Inf, 0.18588092271471396, 0.15414324351400138, 0.14877671498060227, 0.14670231558009983, 0.1458007976235822] ***
*** center 1: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 13]]
** centroid: 2, normalized-entropy: 0.7540340561971327, [(2, 47), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 10, 0]]
** centroid: 3, normalized-entropy: 0.6987003526563345, [(1, 43), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [73, 35, 0]]
** centroid: 4, normalized-entropy: 0.9087569615031438, [(1, 73), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 19, 0]]
** centroid: 5, normalized-entropy: 0.8602858652332406, [(1, 48), (2, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 57, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1824300362011418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1824300362011418, 0.15325401062890887] ***
*** starting iteration: 2; err: [Inf, 0.1824300362011418, 0.15325401062890887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1824300362011418, 0.15325401062890887, 0.14883650520816447] ***
*** starting iteration: 3; err: [Inf, 0.1824300362011418, 0.15325401062890887, 0.14883650520816447] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1824300362011418, 0.15325401062890887, 0.14883650520816447, 0.14698206478357315] ***
*** starting iteration: 4; err: [Inf, 0.1824300362011418, 0.15325401062890887, 0.14883650520816447, 0.14698206478357315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1824300362011418, 0.15325401062890887, 0.14883650520816447, 0.14698206478357315, 0.14643249817192555] ***
*** finished computation of 7 references, err: [Inf, 0.1824300362011418, 0.15325401062890887, 0.14883650520816447, 0.14698206478357315, 0.14643249817192555] ***
*** center 1: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 26, 18]]
** centroid: 2, normalized-entropy: 0.976020648236615, [(2, 26), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 6, 0]]
** centroid: 3, normalized-entropy: 0.47983202361612853, [(1, 52), (2, 6)]
*** center 4: selecting labels [1] (freq >= 2) [from [88, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 67, 0]]
** centroid: 5, normalized-entropy: 0.5869185834047994, [(1, 11), (2, 67)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 56, 0]]
** centroid: 6, normalized-entropy: 0.2899860470332091, [(1, 3), (2, 56)]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18847594777680934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18847594777680934, 0.14877997517772018] ***
*** starting iteration: 2; err: [Inf, 0.18847594777680934, 0.14877997517772018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18847594777680934, 0.14877997517772018, 0.14452902701683343] ***
*** starting iteration: 3; err: [Inf, 0.18847594777680934, 0.14877997517772018, 0.14452902701683343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18847594777680934, 0.14877997517772018, 0.14452902701683343, 0.14367286458890885] ***
*** finished computation of 7 references, err: [Inf, 0.18847594777680934, 0.14877997517772018, 0.14452902701683343, 0.14367286458890885] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [9, 60, 0]]
** centroid: 1, normalized-entropy: 0.5586293734521991, [(1, 9), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 19, 0]]
** centroid: 2, normalized-entropy: 0.7809756883263416, [(1, 63), (2, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 49, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [90, 1, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 33, 16]]
** centroid: 7, normalized-entropy: 0.9113423759758414, [(2, 33), (3, 16)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1778101400407031] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1778101400407031, 0.14913687313720583] ***
*** starting iteration: 2; err: [Inf, 0.1778101400407031, 0.14913687313720583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1778101400407031, 0.14913687313720583, 0.1459037078465335] ***
*** starting iteration: 3; err: [Inf, 0.1778101400407031, 0.14913687313720583, 0.1459037078465335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1778101400407031, 0.14913687313720583, 0.1459037078465335, 0.14500388659909366] ***
*** finished computation of 7 references, err: [Inf, 0.1778101400407031, 0.14913687313720583, 0.1459037078465335, 0.14500388659909366] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [99, 2, 0]]
** centroid: 1, normalized-entropy: 0.1403272709905931, [(1, 99), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 10, 0]]
** centroid: 2, normalized-entropy: 0.6769418697808861, [(1, 46), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 37, 14]]
** centroid: 3, normalized-entropy: 0.8478617451660525, [(2, 37), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [4, 49, 0]]
** centroid: 5, normalized-entropy: 0.3860189005698936, [(1, 4), (2, 49)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 71, 0]]
** centroid: 6, normalized-entropy: 0.35001059292688486, [(1, 5), (2, 71)]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18332055452372878] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18332055452372878, 0.14893126637279056] ***
*** starting iteration: 2; err: [Inf, 0.18332055452372878, 0.14893126637279056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18332055452372878, 0.14893126637279056, 0.14352852570824326] ***
*** starting iteration: 3; err: [Inf, 0.18332055452372878, 0.14893126637279056, 0.14352852570824326] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18332055452372878, 0.14893126637279056, 0.14352852570824326, 0.14182892347220333] ***
*** starting iteration: 4; err: [Inf, 0.18332055452372878, 0.14893126637279056, 0.14352852570824326, 0.14182892347220333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18332055452372878, 0.14893126637279056, 0.14352852570824326, 0.14182892347220333, 0.14123160761594772] ***
*** finished computation of 7 references, err: [Inf, 0.18332055452372878, 0.14893126637279056, 0.14352852570824326, 0.14182892347220333, 0.14123160761594772] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [8, 67, 0]]
** centroid: 1, normalized-entropy: 0.48977901368693744, [(1, 8), (2, 67)]
*** center 2: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 23, 0]]
** centroid: 3, normalized-entropy: 0.9279262619599757, [(1, 44), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [42, 33, 0]]
** centroid: 4, normalized-entropy: 0.9895875212220558, [(1, 42), (2, 33)]
*** center 5: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 38, 20]]
** centroid: 7, normalized-entropy: 0.9293636260137188, [(2, 38), (3, 20)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18575381045788528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18575381045788528, 0.15144003255665303] ***
*** starting iteration: 2; err: [Inf, 0.18575381045788528, 0.15144003255665303] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18575381045788528, 0.15144003255665303, 0.14886365470476448] ***
*** starting iteration: 3; err: [Inf, 0.18575381045788528, 0.15144003255665303, 0.14886365470476448] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18575381045788528, 0.15144003255665303, 0.14886365470476448, 0.14764317203685642] ***
*** starting iteration: 4; err: [Inf, 0.18575381045788528, 0.15144003255665303, 0.14886365470476448, 0.14764317203685642] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18575381045788528, 0.15144003255665303, 0.14886365470476448, 0.14764317203685642, 0.1468410711530596] ***
*** finished computation of 7 references, err: [Inf, 0.18575381045788528, 0.15144003255665303, 0.14886365470476448, 0.14764317203685642, 0.1468410711530596] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 44, 19]]
** centroid: 2, normalized-entropy: 0.8832225588099292, [(2, 44), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [56, 7, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 56), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [11, 48, 0]]
** centroid: 4, normalized-entropy: 0.693965967334286, [(1, 11), (2, 48)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 70, 0]]
** centroid: 5, normalized-entropy: 0.7935912300117066, [(1, 22), (2, 70)]
*** center 6: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1831739998869598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1831739998869598, 0.15250625375285745] ***
*** starting iteration: 2; err: [Inf, 0.1831739998869598, 0.15250625375285745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1831739998869598, 0.15250625375285745, 0.1483549396926537] ***
*** starting iteration: 3; err: [Inf, 0.1831739998869598, 0.15250625375285745, 0.1483549396926537] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1831739998869598, 0.15250625375285745, 0.1483549396926537, 0.14699616650305689] ***
*** starting iteration: 4; err: [Inf, 0.1831739998869598, 0.15250625375285745, 0.1483549396926537, 0.14699616650305689] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1831739998869598, 0.15250625375285745, 0.1483549396926537, 0.14699616650305689, 0.14571015740931034] ***
*** starting iteration: 5; err: [Inf, 0.1831739998869598, 0.15250625375285745, 0.1483549396926537, 0.14699616650305689, 0.14571015740931034] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1831739998869598, 0.15250625375285745, 0.1483549396926537, 0.14699616650305689, 0.14571015740931034, 0.1442029885109514] ***
*** starting iteration: 6; err: [Inf, 0.1831739998869598, 0.15250625375285745, 0.1483549396926537, 0.14699616650305689, 0.14571015740931034, 0.1442029885109514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1831739998869598, 0.15250625375285745, 0.1483549396926537, 0.14699616650305689, 0.14571015740931034, 0.1442029885109514, 0.14317028878163546] ***
*** starting iteration: 7; err: [Inf, 0.1831739998869598, 0.15250625375285745, 0.1483549396926537, 0.14699616650305689, 0.14571015740931034, 0.1442029885109514, 0.14317028878163546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1831739998869598, 0.15250625375285745, 0.1483549396926537, 0.14699616650305689, 0.14571015740931034, 0.1442029885109514, 0.14317028878163546, 0.14207868066616355] ***
*** starting iteration: 8; err: [Inf, 0.1831739998869598, 0.15250625375285745, 0.1483549396926537, 0.14699616650305689, 0.14571015740931034, 0.1442029885109514, 0.14317028878163546, 0.14207868066616355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1831739998869598, 0.15250625375285745, 0.1483549396926537, 0.14699616650305689, 0.14571015740931034, 0.1442029885109514, 0.14317028878163546, 0.14207868066616355, 0.14121476675616576] ***
*** finished computation of 7 references, err: [Inf, 0.1831739998869598, 0.15250625375285745, 0.1483549396926537, 0.14699616650305689, 0.14571015740931034, 0.1442029885109514, 0.14317028878163546, 0.14207868066616355, 0.14121476675616576] ***
*** center 1: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 41, 17]]
** centroid: 2, normalized-entropy: 0.8726965039103788, [(2, 41), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [72, 13, 0]]
** centroid: 3, normalized-entropy: 0.617151919200282, [(1, 72), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [7, 52, 0]]
** centroid: 4, normalized-entropy: 0.5254506799086205, [(1, 7), (2, 52)]
*** center 5: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [60, 12, 0]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(1, 60), (2, 12)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1947212846428156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1947212846428156, 0.14839443569164723] ***
*** starting iteration: 2; err: [Inf, 0.1947212846428156, 0.14839443569164723] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1947212846428156, 0.14839443569164723, 0.14483092015050353] ***
*** starting iteration: 3; err: [Inf, 0.1947212846428156, 0.14839443569164723, 0.14483092015050353] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1947212846428156, 0.14839443569164723, 0.14483092015050353, 0.1432685161039699] ***
*** starting iteration: 4; err: [Inf, 0.1947212846428156, 0.14839443569164723, 0.14483092015050353, 0.1432685161039699] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1947212846428156, 0.14839443569164723, 0.14483092015050353, 0.1432685161039699, 0.14288457268895582] ***
*** finished computation of 7 references, err: [Inf, 0.1947212846428156, 0.14839443569164723, 0.14483092015050353, 0.1432685161039699, 0.14288457268895582] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [80, 8, 0]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(1, 80), (2, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 35, 20]]
** centroid: 3, normalized-entropy: 0.9456603046006401, [(2, 35), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 49, 0]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(1, 14), (2, 49)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [53, 5, 0]]
** centroid: 6, normalized-entropy: 0.4236805715709106, [(1, 53), (2, 5)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19543747553043067] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19543747553043067, 0.15056966617703438] ***
*** starting iteration: 2; err: [Inf, 0.19543747553043067, 0.15056966617703438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19543747553043067, 0.15056966617703438, 0.14490121341124176] ***
*** starting iteration: 3; err: [Inf, 0.19543747553043067, 0.15056966617703438, 0.14490121341124176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19543747553043067, 0.15056966617703438, 0.14490121341124176, 0.1438552419608459] ***
*** starting iteration: 4; err: [Inf, 0.19543747553043067, 0.15056966617703438, 0.14490121341124176, 0.1438552419608459] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19543747553043067, 0.15056966617703438, 0.14490121341124176, 0.1438552419608459, 0.14326645923219622] ***
*** finished computation of 7 references, err: [Inf, 0.19543747553043067, 0.15056966617703438, 0.14490121341124176, 0.1438552419608459, 0.14326645923219622] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 57, 12]]
** centroid: 1, normalized-entropy: 0.6665783579949205, [(2, 57), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [56, 10, 0]]
** centroid: 3, normalized-entropy: 0.6136190195993708, [(1, 56), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 19, 0]]
** centroid: 4, normalized-entropy: 0.7809756883263416, [(1, 63), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 23, 0]]
** centroid: 5, normalized-entropy: 0.8377698690066789, [(1, 63), (2, 23)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 72, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19240434910357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19240434910357, 0.14897645829990505] ***
*** starting iteration: 2; err: [Inf, 0.19240434910357, 0.14897645829990505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19240434910357, 0.14897645829990505, 0.14615923078730703] ***
*** starting iteration: 3; err: [Inf, 0.19240434910357, 0.14897645829990505, 0.14615923078730703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19240434910357, 0.14897645829990505, 0.14615923078730703, 0.1455504667405039] ***
*** finished computation of 7 references, err: [Inf, 0.19240434910357, 0.14897645829990505, 0.14615923078730703, 0.1455504667405039] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 50, 16]]
** centroid: 2, normalized-entropy: 0.7990485210442682, [(2, 50), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 8, 0]]
** centroid: 3, normalized-entropy: 0.5381411852224502, [(1, 57), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [6, 51, 0]]
** centroid: 4, normalized-entropy: 0.48546076074591343, [(1, 6), (2, 51)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 64, 0]]
** centroid: 5, normalized-entropy: 0.8332661971210122, [(1, 23), (2, 64)]
*** center 6: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18273845734726638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18273845734726638, 0.15292782090976834] ***
*** starting iteration: 2; err: [Inf, 0.18273845734726638, 0.15292782090976834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18273845734726638, 0.15292782090976834, 0.14886631192080677] ***
*** starting iteration: 3; err: [Inf, 0.18273845734726638, 0.15292782090976834, 0.14886631192080677] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18273845734726638, 0.15292782090976834, 0.14886631192080677, 0.14833526868186891] ***
*** finished computation of 7 references, err: [Inf, 0.18273845734726638, 0.15292782090976834, 0.14886631192080677, 0.14833526868186891] ***
*** center 1: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 36, 18]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 36), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 5, 0]]
** centroid: 3, normalized-entropy: 0.4186843105268563, [(1, 54), (2, 5)]
*** center 4: selecting labels [1] (freq >= 2) [from [69, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 47, 0]]
** centroid: 5, normalized-entropy: 0.6699960320994334, [(1, 10), (2, 47)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [11, 79, 0]]
** centroid: 7, normalized-entropy: 0.5357150195407704, [(1, 11), (2, 79)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19260840831231327] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19260840831231327, 0.1559231370575726] ***
*** starting iteration: 2; err: [Inf, 0.19260840831231327, 0.1559231370575726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19260840831231327, 0.1559231370575726, 0.1512999208699912] ***
*** starting iteration: 3; err: [Inf, 0.19260840831231327, 0.1559231370575726, 0.1512999208699912] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19260840831231327, 0.1559231370575726, 0.1512999208699912, 0.14983368604909628] ***
*** starting iteration: 4; err: [Inf, 0.19260840831231327, 0.1559231370575726, 0.1512999208699912, 0.14983368604909628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19260840831231327, 0.1559231370575726, 0.1512999208699912, 0.14983368604909628, 0.14879772999323904] ***
*** starting iteration: 5; err: [Inf, 0.19260840831231327, 0.1559231370575726, 0.1512999208699912, 0.14983368604909628, 0.14879772999323904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19260840831231327, 0.1559231370575726, 0.1512999208699912, 0.14983368604909628, 0.14879772999323904, 0.14808986904285848] ***
*** finished computation of 7 references, err: [Inf, 0.19260840831231327, 0.1559231370575726, 0.1512999208699912, 0.14983368604909628, 0.14879772999323904, 0.14808986904285848] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 10, 0]]
** centroid: 2, normalized-entropy: 0.6373874992221911, [(1, 52), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 28, 20]]
** centroid: 3, normalized-entropy: 0.9798687566511527, [(2, 28), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 69, 0]]
** centroid: 5, normalized-entropy: 0.4021791902022729, [(1, 6), (2, 69)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 58, 0]]
** centroid: 7, normalized-entropy: 0.2108423003185322, [(1, 2), (2, 58)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18646445333026349] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18646445333026349, 0.15058573552966117] ***
*** starting iteration: 2; err: [Inf, 0.18646445333026349, 0.15058573552966117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18646445333026349, 0.15058573552966117, 0.14647051610704512] ***
*** starting iteration: 3; err: [Inf, 0.18646445333026349, 0.15058573552966117, 0.14647051610704512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18646445333026349, 0.15058573552966117, 0.14647051610704512, 0.14544061596738175] ***
*** starting iteration: 4; err: [Inf, 0.18646445333026349, 0.15058573552966117, 0.14647051610704512, 0.14544061596738175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18646445333026349, 0.15058573552966117, 0.14647051610704512, 0.14544061596738175, 0.14516163374157623] ***
*** finished computation of 7 references, err: [Inf, 0.18646445333026349, 0.15058573552966117, 0.14647051610704512, 0.14544061596738175, 0.14516163374157623] ***
*** center 1: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 54, 22]]
** centroid: 2, normalized-entropy: 0.8680403986166402, [(2, 54), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 32, 0]]
** centroid: 3, normalized-entropy: 0.9649567669505686, [(1, 50), (2, 32)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [38, 34, 0]]
** centroid: 4, normalized-entropy: 0.9977724720899819, [(1, 38), (2, 34)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 46, 0]]
** centroid: 5, normalized-entropy: 0.8571484374283717, [(1, 18), (2, 46)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18730484798178076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18730484798178076, 0.15161880451068283] ***
*** starting iteration: 2; err: [Inf, 0.18730484798178076, 0.15161880451068283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18730484798178076, 0.15161880451068283, 0.14820437754224985] ***
*** starting iteration: 3; err: [Inf, 0.18730484798178076, 0.15161880451068283, 0.14820437754224985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18730484798178076, 0.15161880451068283, 0.14820437754224985, 0.1464105372875929] ***
*** starting iteration: 4; err: [Inf, 0.18730484798178076, 0.15161880451068283, 0.14820437754224985, 0.1464105372875929] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18730484798178076, 0.15161880451068283, 0.14820437754224985, 0.1464105372875929, 0.1457216198388487] ***
*** finished computation of 7 references, err: [Inf, 0.18730484798178076, 0.15161880451068283, 0.14820437754224985, 0.1464105372875929, 0.1457216198388487] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [69, 8, 0]]
** centroid: 1, normalized-entropy: 0.481225663841737, [(1, 69), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [72, 21, 0]]
** centroid: 2, normalized-entropy: 0.7706290693639406, [(1, 72), (2, 21)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 50, 16]]
** centroid: 3, normalized-entropy: 0.7990485210442682, [(2, 50), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 20, 0]]
** centroid: 5, normalized-entropy: 0.7966394665488286, [(1, 63), (2, 20)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19370909579470755] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19370909579470755, 0.15099217979377136] ***
*** starting iteration: 2; err: [Inf, 0.19370909579470755, 0.15099217979377136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19370909579470755, 0.15099217979377136, 0.1467915920391679] ***
*** starting iteration: 3; err: [Inf, 0.19370909579470755, 0.15099217979377136, 0.1467915920391679] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19370909579470755, 0.15099217979377136, 0.1467915920391679, 0.14579688450321554] ***
*** finished computation of 7 references, err: [Inf, 0.19370909579470755, 0.15099217979377136, 0.1467915920391679, 0.14579688450321554] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [28, 34, 0]]
** centroid: 1, normalized-entropy: 0.9932338197397066, [(1, 28), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 20, 0]]
** centroid: 2, normalized-entropy: 0.7642045065086204, [(1, 70), (2, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 48, 2]]
** centroid: 4, normalized-entropy: 0.24229218908241482, [(2, 48), (3, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [70, 19, 0]]
** centroid: 5, normalized-entropy: 0.748088105780153, [(1, 70), (2, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 53, 13]]
** centroid: 7, normalized-entropy: 0.7158259310602146, [(2, 53), (3, 13)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18987505699042231] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18987505699042231, 0.15216153339482844] ***
*** starting iteration: 2; err: [Inf, 0.18987505699042231, 0.15216153339482844] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18987505699042231, 0.15216153339482844, 0.1471096862629056] ***
*** starting iteration: 3; err: [Inf, 0.18987505699042231, 0.15216153339482844, 0.1471096862629056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18987505699042231, 0.15216153339482844, 0.1471096862629056, 0.146310454133898] ***
*** finished computation of 7 references, err: [Inf, 0.18987505699042231, 0.15216153339482844, 0.1471096862629056, 0.146310454133898] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 5, 0]]
** centroid: 2, normalized-entropy: 0.47543164626872053, [(1, 44), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 47, 20]]
** centroid: 3, normalized-entropy: 0.8794587736429037, [(2, 47), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 70, 0]]
** centroid: 5, normalized-entropy: 0.43949698692151346, [(1, 7), (2, 70)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [22, 54, 0]]
** centroid: 6, normalized-entropy: 0.8680403986166402, [(1, 22), (2, 54)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17583631609380246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17583631609380246, 0.15160699070990086] ***
*** starting iteration: 2; err: [Inf, 0.17583631609380246, 0.15160699070990086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17583631609380246, 0.15160699070990086, 0.14922445876523852] ***
*** starting iteration: 3; err: [Inf, 0.17583631609380246, 0.15160699070990086, 0.14922445876523852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17583631609380246, 0.15160699070990086, 0.14922445876523852, 0.14894247433915733] ***
*** finished computation of 7 references, err: [Inf, 0.17583631609380246, 0.15160699070990086, 0.14922445876523852, 0.14894247433915733] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [89, 17, 0]]
** centroid: 1, normalized-entropy: 0.6352115521361693, [(1, 89), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 9, 0]]
** centroid: 2, normalized-entropy: 0.5638560041131417, [(1, 59), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 28, 21]]
** centroid: 3, normalized-entropy: 0.9852281360342514, [(2, 28), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [70, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 68, 0]]
** centroid: 6, normalized-entropy: 0.25253077151613923, [(1, 3), (2, 68)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 49, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1883301369906403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1883301369906403, 0.15068554058670997] ***
*** starting iteration: 2; err: [Inf, 0.1883301369906403, 0.15068554058670997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1883301369906403, 0.15068554058670997, 0.14676224594563245] ***
*** starting iteration: 3; err: [Inf, 0.1883301369906403, 0.15068554058670997, 0.14676224594563245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1883301369906403, 0.15068554058670997, 0.14676224594563245, 0.14594637898821383] ***
*** finished computation of 7 references, err: [Inf, 0.1883301369906403, 0.15068554058670997, 0.14676224594563245, 0.14594637898821383] ***
*** center 1: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 41, 18]]
** centroid: 2, normalized-entropy: 0.8874179270685693, [(2, 41), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 8, 0]]
** centroid: 3, normalized-entropy: 0.6267511370265896, [(1, 43), (2, 8)]
*** center 4: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 66, 0]]
** centroid: 5, normalized-entropy: 0.8481636883083004, [(1, 25), (2, 66)]
*** center 6: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 52, 0]]
** centroid: 7, normalized-entropy: 0.3712323266408756, [(1, 4), (2, 52)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18737250765785574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18737250765785574, 0.1456527658291161] ***
*** starting iteration: 2; err: [Inf, 0.18737250765785574, 0.1456527658291161] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18737250765785574, 0.1456527658291161, 0.14187977415998465] ***
*** starting iteration: 3; err: [Inf, 0.18737250765785574, 0.1456527658291161, 0.14187977415998465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18737250765785574, 0.1456527658291161, 0.14187977415998465, 0.1412463699853979] ***
*** finished computation of 7 references, err: [Inf, 0.18737250765785574, 0.1456527658291161, 0.14187977415998465, 0.1412463699853979] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [73, 3, 0]]
** centroid: 1, normalized-entropy: 0.23987382528036535, [(1, 73), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 8, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 48), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 43, 16]]
** centroid: 3, normalized-entropy: 0.8431619569518377, [(2, 43), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 22, 0]]
** centroid: 5, normalized-entropy: 0.8729882944709463, [(1, 53), (2, 22)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 84, 0]]
** centroid: 6, normalized-entropy: 0.3533593350214213, [(1, 6), (2, 84)]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19812958878837525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19812958878837525, 0.15067115500941872] ***
*** starting iteration: 2; err: [Inf, 0.19812958878837525, 0.15067115500941872] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19812958878837525, 0.15067115500941872, 0.14715226911380888] ***
*** starting iteration: 3; err: [Inf, 0.19812958878837525, 0.15067115500941872, 0.14715226911380888] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19812958878837525, 0.15067115500941872, 0.14715226911380888, 0.1462316089756787] ***
*** finished computation of 7 references, err: [Inf, 0.19812958878837525, 0.15067115500941872, 0.14715226911380888, 0.1462316089756787] ***
*** center 1: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 43, 19]]
** centroid: 2, normalized-entropy: 0.8890349038123858, [(2, 43), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [34, 5, 0]]
** centroid: 3, normalized-entropy: 0.552495114325111, [(1, 34), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [82, 23, 0]]
** centroid: 4, normalized-entropy: 0.7584246665423688, [(1, 82), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 24, 0]]
** centroid: 5, normalized-entropy: 0.8904916402194913, [(1, 54), (2, 24)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 62, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17216220569424331] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17216220569424331, 0.14814213913492857] ***
*** starting iteration: 2; err: [Inf, 0.17216220569424331, 0.14814213913492857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17216220569424331, 0.14814213913492857, 0.1449433694635518] ***
*** starting iteration: 3; err: [Inf, 0.17216220569424331, 0.14814213913492857, 0.1449433694635518] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17216220569424331, 0.14814213913492857, 0.1449433694635518, 0.1437616730015725] ***
*** starting iteration: 4; err: [Inf, 0.17216220569424331, 0.14814213913492857, 0.1449433694635518, 0.1437616730015725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17216220569424331, 0.14814213913492857, 0.1449433694635518, 0.1437616730015725, 0.1425810945574194] ***
*** starting iteration: 5; err: [Inf, 0.17216220569424331, 0.14814213913492857, 0.1449433694635518, 0.1437616730015725, 0.1425810945574194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17216220569424331, 0.14814213913492857, 0.1449433694635518, 0.1437616730015725, 0.1425810945574194, 0.14205275807576254] ***
*** finished computation of 7 references, err: [Inf, 0.17216220569424331, 0.14814213913492857, 0.1449433694635518, 0.1437616730015725, 0.1425810945574194, 0.14205275807576254] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [56, 33, 0]]
** centroid: 1, normalized-entropy: 0.951274087437692, [(1, 56), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [71, 11, 0]]
** centroid: 2, normalized-entropy: 0.5687008669370753, [(1, 71), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 46, 18]]
** centroid: 4, normalized-entropy: 0.8571484374283717, [(2, 46), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 3, 0]]
** centroid: 5, normalized-entropy: 0.260862909647207, [(1, 65), (2, 3)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18368023602850736] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18368023602850736, 0.14366767062875443] ***
*** starting iteration: 2; err: [Inf, 0.18368023602850736, 0.14366767062875443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18368023602850736, 0.14366767062875443, 0.14066026040166615] ***
*** starting iteration: 3; err: [Inf, 0.18368023602850736, 0.14366767062875443, 0.14066026040166615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18368023602850736, 0.14366767062875443, 0.14066026040166615, 0.13976713709905744] ***
*** finished computation of 7 references, err: [Inf, 0.18368023602850736, 0.14366767062875443, 0.14066026040166615, 0.13976713709905744] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [60, 31, 0]]
** centroid: 1, normalized-entropy: 0.9254482516437047, [(1, 60), (2, 31)]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 65, 16]]
** centroid: 4, normalized-entropy: 0.7169622516889513, [(2, 65), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 10, 0]]
** centroid: 5, normalized-entropy: 0.6840384356390419, [(1, 45), (2, 10)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 53, 0]]
** centroid: 7, normalized-entropy: 0.4236805715709106, [(1, 5), (2, 53)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19218140215519816] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19218140215519816, 0.14838127733115106] ***
*** starting iteration: 2; err: [Inf, 0.19218140215519816, 0.14838127733115106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19218140215519816, 0.14838127733115106, 0.14444677546340973] ***
*** starting iteration: 3; err: [Inf, 0.19218140215519816, 0.14838127733115106, 0.14444677546340973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19218140215519816, 0.14838127733115106, 0.14444677546340973, 0.14336324893310667] ***
*** starting iteration: 4; err: [Inf, 0.19218140215519816, 0.14838127733115106, 0.14444677546340973, 0.14336324893310667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19218140215519816, 0.14838127733115106, 0.14444677546340973, 0.14336324893310667, 0.14287258668988942] ***
*** finished computation of 7 references, err: [Inf, 0.19218140215519816, 0.14838127733115106, 0.14444677546340973, 0.14336324893310667, 0.14287258668988942] ***
*** center 1: selecting labels [1] (freq >= 2) [from [73, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 4, 0]]
** centroid: 2, normalized-entropy: 0.3860189005698936, [(1, 49), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 50, 18]]
** centroid: 3, normalized-entropy: 0.8337649072106652, [(2, 50), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 33, 0]]
** centroid: 5, normalized-entropy: 0.9852281360342514, [(1, 44), (2, 33)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [12, 87, 0]]
** centroid: 6, normalized-entropy: 0.5328350630342235, [(1, 12), (2, 87)]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2069903470920399] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2069903470920399, 0.14573117961734533] ***
*** starting iteration: 2; err: [Inf, 0.2069903470920399, 0.14573117961734533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2069903470920399, 0.14573117961734533, 0.14228201837278903] ***
*** starting iteration: 3; err: [Inf, 0.2069903470920399, 0.14573117961734533, 0.14228201837278903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2069903470920399, 0.14573117961734533, 0.14228201837278903, 0.1421608877852559] ***
*** finished computation of 7 references, err: [Inf, 0.2069903470920399, 0.14573117961734533, 0.14228201837278903, 0.1421608877852559] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [71, 7, 0]]
** centroid: 1, normalized-entropy: 0.4356133734874324, [(1, 71), (2, 7)]
*** center 2: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 42, 8]]
** centroid: 3, normalized-entropy: 0.634309554640566, [(2, 42), (3, 8)]
*** center 4: selecting labels [1] (freq >= 2) [from [70, 1, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [10, 48, 0]]
** centroid: 6, normalized-entropy: 0.6631968402398286, [(1, 10), (2, 48)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 60, 0]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(1, 3), (2, 60)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1889955924442038] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1889955924442038, 0.15035643036663532] ***
*** starting iteration: 2; err: [Inf, 0.1889955924442038, 0.15035643036663532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1889955924442038, 0.15035643036663532, 0.1436816840097308] ***
*** starting iteration: 3; err: [Inf, 0.1889955924442038, 0.15035643036663532, 0.1436816840097308] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1889955924442038, 0.15035643036663532, 0.1436816840097308, 0.14162646719254554] ***
*** starting iteration: 4; err: [Inf, 0.1889955924442038, 0.15035643036663532, 0.1436816840097308, 0.14162646719254554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1889955924442038, 0.15035643036663532, 0.1436816840097308, 0.14162646719254554, 0.14068662355840206] ***
*** finished computation of 7 references, err: [Inf, 0.1889955924442038, 0.15035643036663532, 0.1436816840097308, 0.14162646719254554, 0.14068662355840206] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 63, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 23, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 46), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [41, 33, 0]]
** centroid: 4, normalized-entropy: 0.9915528503834039, [(1, 41), (2, 33)]
*** center 5: selecting labels [1] (freq >= 2) [from [85, 1, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 42, 21]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 42), (3, 21)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18559801730699838] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18559801730699838, 0.14718677646107972] ***
*** starting iteration: 2; err: [Inf, 0.18559801730699838, 0.14718677646107972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18559801730699838, 0.14718677646107972, 0.14429602937027813] ***
*** starting iteration: 3; err: [Inf, 0.18559801730699838, 0.14718677646107972, 0.14429602937027813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18559801730699838, 0.14718677646107972, 0.14429602937027813, 0.1440118612749502] ***
*** finished computation of 7 references, err: [Inf, 0.18559801730699838, 0.14718677646107972, 0.14429602937027813, 0.1440118612749502] ***
*** center 1: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 12, 0]]
** centroid: 2, normalized-entropy: 0.6962122601251459, [(1, 52), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 45, 16]]
** centroid: 3, normalized-entropy: 0.8301899714180444, [(2, 45), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 55, 0]]
** centroid: 5, normalized-entropy: 0.8366407419411671, [(1, 20), (2, 55)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 67, 0]]
** centroid: 6, normalized-entropy: 0.3127333763966432, [(1, 4), (2, 67)]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18719666248932482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18719666248932482, 0.15240303822234272] ***
*** starting iteration: 2; err: [Inf, 0.18719666248932482, 0.15240303822234272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18719666248932482, 0.15240303822234272, 0.146793017052114] ***
*** starting iteration: 3; err: [Inf, 0.18719666248932482, 0.15240303822234272, 0.146793017052114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18719666248932482, 0.15240303822234272, 0.146793017052114, 0.14544275648286567] ***
*** starting iteration: 4; err: [Inf, 0.18719666248932482, 0.15240303822234272, 0.146793017052114, 0.14544275648286567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18719666248932482, 0.15240303822234272, 0.146793017052114, 0.14544275648286567, 0.1450896539920941] ***
*** finished computation of 7 references, err: [Inf, 0.18719666248932482, 0.15240303822234272, 0.146793017052114, 0.14544275648286567, 0.1450896539920941] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [10, 78, 0]]
** centroid: 1, normalized-entropy: 0.5107878229540133, [(1, 10), (2, 78)]
*** center 2: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 7, 0]]
** centroid: 3, normalized-entropy: 0.5140912790181233, [(1, 54), (2, 7)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 1, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 47, 16]]
** centroid: 6, normalized-entropy: 0.8175072881213616, [(2, 47), (3, 16)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 40, 0]]
finished with 7 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 337,3 => 33,1 => 630), Dict(2 => 382,3 => 38,1 => 580))
[ Info: ===== scores for single classifier: {"micro_f1":0.875,"precision":0.875,"recall":0.875,"macro_recall":0.6080279232111693,"macro_f1":0.5908852479249591,"accuracy":0.875,"class_f1":{"2":0.8495788206979542,"3":0.0,"1":0.9230769230769231},"class_precision":{"2":0.7861915367483296,"3":0.0,"1":0.9473684210526315},"class_recall":{"2":0.9240837696335078,"3":0.0,"1":0.9}}
[ Info: ===== scores for 1: {"micro_f1":0.956,"precision":0.956,"recall":0.956,"macro_recall":0.8797770514026535,"macro_f1":0.9151984594812129,"accuracy":0.956,"class_f1":{"2":0.9432989690721649,"3":0.8307692307692308,"1":0.9715271786022434},"class_precision":{"2":0.9289340101522843,"3":1.0,"1":0.9723661485319517},"class_recall":{"2":0.9581151832460733,"3":0.7105263157894737,"1":0.9706896551724138}}
[ Info: ===== scores for 5: {"micro_f1":0.956,"precision":0.956,"recall":0.956,"macro_recall":0.886186942351365,"macro_f1":0.9206111321294568,"accuracy":0.956,"class_f1":{"2":0.9424083769633508,"3":0.8484848484848484,"1":0.9709401709401709},"class_precision":{"2":0.9424083769633508,"3":1.0,"1":0.9627118644067797},"class_recall":{"2":0.9424083769633508,"3":0.7368421052631579,"1":0.9793103448275862}}
[ Info: ===== scores for 7: {"micro_f1":0.958,"precision":0.958,"recall":0.958,"macro_recall":0.8949378094088806,"macro_f1":0.9273925214772709,"accuracy":0.958,"class_f1":{"2":0.9445910290237468,"3":0.8656716417910448,"1":0.9719148936170212},"class_precision":{"2":0.9521276595744681,"3":1.0,"1":0.9596638655462185},"class_recall":{"2":0.93717277486911,"3":0.7631578947368421,"1":0.9844827586206897}}
[ Info: ===== scores for 9: {"micro_f1":0.959,"precision":0.959,"recall":0.959,"macro_recall":0.903709739233442,"macro_f1":0.9333688907700015,"accuracy":0.959,"class_f1":{"2":0.9458388375165125,"3":0.8823529411764706,"1":0.9719148936170212},"class_precision":{"2":0.9546666666666667,"3":1.0,"1":0.9596638655462185},"class_recall":{"2":0.93717277486911,"3":0.7894736842105263,"1":0.9844827586206897}}
[ Info: ===== scores for 11: {"micro_f1":0.953,"precision":0.953,"recall":0.953,"macro_recall":0.8905748076636799,"macro_f1":0.9236837510961858,"accuracy":0.953,"class_f1":{"2":0.9375830013280212,"3":0.8656716417910448,"1":0.9677966101694916},"class_precision":{"2":0.9514824797843666,"3":1.0,"1":0.9516666666666667},"class_recall":{"2":0.9240837696335078,"3":0.7631578947368421,"1":0.9844827586206897}}
(score = 0.957, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.957, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.956, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.956, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.96, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.96, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.96, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.96, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.956, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.956, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.957, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.957, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.967,"k":3,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.8872904413045614,"macro_f1":0.9230485138027338,"accuracy":0.967,"class_f1":{"2":0.9573091849935316,"3":0.8307692307692308,"1":0.9810671256454389},"class_precision":{"2":0.9462915601023018,"3":1.0,"1":0.979381443298969},"class_recall":{"2":0.9685863874345549,"3":0.7105263157894737,"1":0.9827586206896551}}
Test Summary: | Pass  Total
AKNC          |    8      8
[225, 3, 3, 2, 1, 3, 4, 3, 1, 1, 7, 5, 10, 1, 8, 1, 1, 12, 21, 1, 3, 5, 2, 9, 2, 2, 3, 19, 15, 4, 2, 7, 5, 6, 6, 93, 2, 13, 1, 1, 7, 4, 4, 1, 9, 12, 26, 85, 22, 6, 8, 1, 3, 10, 15, 70, 17, 5, 23, 9, 8, 11, 3, 8, 22, 38, 10, 3, 4, 66, 1, 3, 8, 10, 15, 2, 2, 2, 5, 17, 7, 8, 6, 7, 6, 26, 3, 9, 16, 2, 18, 4, 20, 3, 10, 20, 49, 32, 13, 6, 129, 5, 15, 12, 34, 17, 4, 21, 3, 5, 35, 10, 36, 8, 36, 3, 6, 8, 99, 18, 34, 9, 12, 7, 23, 6, 29, 49, 864, 30, 6, 28, 13, 7, 6, 8, 108, 6, 3, 10, 40, 33, 17, 2, 228, 138, 23, 11, 33, 25, 22, 7, 38, 15, 38, 14, 18, 29, 62, 18, 12, 26, 39, 59, 8, 27, 63, 52, 12, 14, 41, 544, 13, 15, 20, 17, 63, 45, 17, 17, 9, 40, 6, 7, 16, 27, 29, 38, 17, 6, 69, 7, 10, 24, 34, 110, 31, 16, 9, 112, 40, 5, 54, 182, 2, 14, 7, 42, 9, 33, 96, 85, 23, 58, 32, 16, 7, 19, 11, 3, 11, 34, 8, 49, 19, 10, 16, 11, 27, 12, 3, 32, 66, 54, 5, 12, 31, 27, 17, 11, 5, 7, 233, 38, 7, 55, 25, 26, 11, 6, 31, 76, 212, 12, 250, 29, 18, 11, 21, 98, 29, 5, 459, 19, 25, 23, 8, 11, 31, 8, 9, 25, 15, 14, 22, 29, 38, 127, 76, 6, 56, 54, 13, 53, 8, 31, 122, 22, 12, 144, 17, 274, 25, 14, 32, 7, 12, 47, 35, 32]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6119999999999998, speedup = 0.3405325123381345, eval_ratio = 0.072858)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.41406250000000006,"recall":0.4071180555555556,"f1":null,"seconds":0.0001861676573753357,"exhaustive_search_seconds":0.0004127342253923416,"evaluations":495.6640625,"distances_sum":1693.9642985484631}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5677083333333331,"recall":0.5677083333333331,"f1":null,"seconds":0.0003104526549577713,"exhaustive_search_seconds":0.0004127342253923416,"evaluations":658.9140625,"distances_sum":1620.921748241545}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6744791666666663,"recall":0.6744791666666663,"f1":null,"seconds":0.00040387362241744995,"exhaustive_search_seconds":0.0004127342253923416,"evaluations":782.2109375,"distances_sum":1569.1936725390515}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7595486111111108,"recall":0.7595486111111108,"f1":0.7595486111111108,"seconds":0.0008302982896566391,"exhaustive_search_seconds":0.0004127342253923416,"evaluations":925.5625,"distances_sum":1537.896251499317}
KCenters.DeloneInvIndex> reached performance {"precision":0.8151041666666661,"recall":0.8151041666666661,"f1":0.8151041666666661,"seconds":0.0006214473396539688,"exhaustive_search_seconds":0.0004127342253923416,"evaluations":1054.90625,"distances_sum":1520.4794358231973}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7439999999999999, speedup = 0.7020444800860258, eval_ratio = 0.09327)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
