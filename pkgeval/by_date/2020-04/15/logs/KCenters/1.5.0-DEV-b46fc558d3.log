Julia Version 1.5.0-DEV.627
Commit b46fc558d3 (2020-04-14 16:34 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed InvertedIndices ───────────── v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed DataAPI ───────────────────── v1.1.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Tables ────────────────────── v1.0.4
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed StatsBase ─────────────────── v0.32.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed TableTraits ───────────────── v1.0.0
  Installed Compat ────────────────────── v3.8.0
  Installed MLDataPattern ─────────────── v0.5.1
  Installed PooledArrays ──────────────── v0.5.3
  Installed Parsers ───────────────────── v1.0.1
  Installed OrderedCollections ────────── v1.1.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed DataStructures ────────────── v0.17.12
  Installed LearnBase ─────────────────── v0.2.2
  Installed Reexport ──────────────────── v0.2.0
  Installed JSON ──────────────────────── v0.21.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed CategoricalArrays ─────────── v0.7.7
  Installed DataFrames ────────────────── v0.20.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.12
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.1
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_Mf6wWM/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_Mf6wWM/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.12
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.1
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9364293802777927
[ Info: 0.8307796732584636
[ Info: 0.5552099955578645
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33252118043601514
mean(cdnet.distances) = 0.35089457243680955
mean(crand.distances) = 0.3480936906238397
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1982421875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1982421875,"f1":null,"seconds":3.95067036151886e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":6.15625,"distances_sum":522.420791827889}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.576171875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.576171875,"f1":0.7146509740259748,"seconds":4.854053258895874e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.4609375,"distances_sum":1442.283324267029}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7937534687534697,"seconds":5.014240741729736e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.9609375,"distances_sum":1741.8680725472598}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.673828125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.673828125,"f1":0.7937534687534697,"seconds":5.014240741729736e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.9609375,"distances_sum":1741.8680725472598}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.9193400349650355,"seconds":4.472211003303528e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.90625,"distances_sum":2335.088857857328}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8691542832167841,"seconds":3.9637088775634766e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.453125,"distances_sum":2045.5555442917544}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9028591200466208,"seconds":4.207715392112732e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8125,"distances_sum":2246.808700663875}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8603515625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8603515625,"f1":0.9193400349650355,"seconds":4.472211003303528e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.90625,"distances_sum":2335.088857857328}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9710966117216121,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9765625,"distances_sum":2722.5710359344994}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9667239010989015,"seconds":4.41819429397583e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9765625,"distances_sum":2677.354236041505}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9737351190476196,"seconds":4.816800355911255e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":9.0,"distances_sum":2733.966673859432}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9280937812187818,"seconds":4.453584551811218e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.890625,"distances_sum":2392.0474560427483}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.961332417582418,"seconds":4.841014742851257e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.96875,"distances_sum":2643.0390284879436}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9493933150183154,"seconds":4.654750227928162e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9609375,"distances_sum":2549.3984724998404}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9737351190476196,"seconds":4.816800355911255e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":9.0,"distances_sum":2733.966673859432}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9737351190476196,"seconds":4.816800355911255e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":9.0,"distances_sum":2733.966673859432}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1650390625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1650390625,"f1":null,"seconds":2.298504114151001e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":5.46875,"distances_sum":409.1445218828566}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1650390625,"state":{"ssize":4,"bsize":1},"perf":{"precision":null,"recall":0.1650390625,"f1":null,"seconds":2.298504114151001e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":5.46875,"distances_sum":409.1445218828566}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8556781759906767,"seconds":4.284083843231201e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.3359375,"distances_sum":1871.6860784716032}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3818359375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3818359375,"f1":null,"seconds":2.868473529815674e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":6.3828125,"distances_sum":929.1257636072083}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":6,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8556781759906767,"seconds":4.284083843231201e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.3359375,"distances_sum":1871.6860784716032}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9547504578754582,"seconds":4.684552550315857e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8828125,"distances_sum":2413.6793098309436}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.940836767399268,"seconds":4.438683390617371e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.7578125,"distances_sum":2357.8896329158356}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9085372960372967,"seconds":4.235655069351196e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.7109375,"distances_sum":2131.388029666336}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9635473901098904,"seconds":4.51505184173584e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.890625,"distances_sum":2481.4500757332044}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9635473901098904,"seconds":4.51505184173584e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.890625,"distances_sum":2481.4500757332044}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9635473901098904,"seconds":4.51505184173584e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.890625,"distances_sum":2481.4500757332044}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7138671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7138671875,"f1":0.8254495504495514,"seconds":3.1758099794387817e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":8.140625,"distances_sum":1636.0750291058416}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1826171875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1826171875,"f1":null,"seconds":2.263113856315613e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":5.4921875,"distances_sum":409.1704252197916}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7138671875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.7138671875,"f1":0.8254495504495514,"seconds":3.1758099794387817e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":8.140625,"distances_sum":1636.0750291058416}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9406936813186819,"seconds":3.67872416973114e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":8.7578125,"distances_sum":2251.441878088332}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.896484375,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9406936813186819,"seconds":3.67872416973114e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":8.7578125,"distances_sum":2251.441878088332}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9701293498168501,"seconds":4.298985004425049e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":8.921875,"distances_sum":2419.0228299753735}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9588598901098906,"seconds":3.7569552659988403e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":8.875,"distances_sum":2339.503528878756}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.974479166666667,"seconds":4.155561327934265e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":8.921875,"distances_sum":2431.0881522947548}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.974479166666667,"seconds":4.155561327934265e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":8.921875,"distances_sum":2431.0881522947548}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.974479166666667,"seconds":4.155561327934265e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":8.921875,"distances_sum":2431.0881522947548}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8581080377955385,"seconds":3.4403055906295776e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.3359375,"distances_sum":1840.081178415958}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2216796875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2216796875,"f1":null,"seconds":2.166256308555603e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":6.109375,"distances_sum":506.2682200705221}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7021484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7021484375,"f1":0.8134173118548127,"seconds":3.2801181077957153e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.046875,"distances_sum":1617.0482410569289}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8581080377955385,"seconds":3.4403055906295776e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.3359375,"distances_sum":1840.081178415958}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9441620879120884,"seconds":4.041939973831177e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.8671875,"distances_sum":2313.7684681238766}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9248111263736271,"seconds":3.876164555549622e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.78125,"distances_sum":2221.85904414457}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9190080752580759,"seconds":3.5651028156280518e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.703125,"distances_sum":2150.307640117246}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8707849442224451,"seconds":3.2838433980941772e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.3671875,"distances_sum":1864.6053710829876}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9441620879120884,"seconds":4.041939973831177e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.8671875,"distances_sum":2313.7684681238766}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9758012820512825,"seconds":4.06801700592041e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.9453125,"distances_sum":2532.8049931884552}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9733115842490845,"seconds":3.809109330177307e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.9609375,"distances_sum":2498.7408028511727}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9507497710622715,"seconds":3.8780272006988525e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.8671875,"distances_sum":2373.6052446287504}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9758012820512825,"seconds":4.06801700592041e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.9453125,"distances_sum":2532.8049931884552}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9758012820512825,"seconds":4.06801700592041e-6,"exhaustive_search_seconds":8.922070264816284e-7,"evaluations":8.9453125,"distances_sum":2532.8049931884552}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8578333125208132,"seconds":5.23589551448822e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.3828125,"distances_sum":1816.675315372568}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6103515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.6103515625,"f1":0.7477506868131876,"seconds":4.386529326438904e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.6484375,"distances_sum":1373.5436312800068}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8578333125208132,"seconds":5.23589551448822e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.3828125,"distances_sum":1816.675315372568}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9403331043956051,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.734375,"distances_sum":2275.3999827531243}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9513621794871797,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8828125,"distances_sum":2365.653116997094}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9513621794871797,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8828125,"distances_sum":2365.653116997094}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9707989926739932,"seconds":5.979090929031372e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.953125,"distances_sum":2508.8993440065196}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":8,"bsize":12}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9729910714285719,"seconds":6.755813956260681e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.921875,"distances_sum":2509.1237423206153}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9513881951381957,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8515625,"distances_sum":2350.61603977805}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":8,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9729910714285719,"seconds":6.755813956260681e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.921875,"distances_sum":2509.1237423206153}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":8,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9729910714285719,"seconds":6.755813956260681e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.921875,"distances_sum":2509.1237423206153}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8518928987678995,"seconds":5.358830094337463e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.1796875,"distances_sum":1832.8814349700672}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.8009225149850159,"seconds":4.781410098075867e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.6015625,"distances_sum":1590.9018054335857}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7949184496059504,"seconds":4.6622008085250854e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.6640625,"distances_sum":1616.2604307946247}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.755859375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.755859375,"f1":0.8518928987678995,"seconds":5.358830094337463e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.1796875,"distances_sum":1832.8814349700672}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9316678113553122,"seconds":5.953013896942139e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.890625,"distances_sum":2225.844714993181}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9592662545787547,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.890625,"distances_sum":2470.5257278575527}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.952255036630037,"seconds":6.234273314476013e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7890625,"distances_sum":2433.376161384041}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8698499417249425,"seconds":5.234032869338989e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.171875,"distances_sum":1911.651764788153}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9321574259074267,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8125,"distances_sum":2290.9232933063477}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9037004662004673,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.6953125,"distances_sum":2066.419029904064}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9592662545787547,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.890625,"distances_sum":2470.5257278575527}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.975744047619048,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.984375,"distances_sum":2552.5210972555765}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9760817307692312,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9609375,"distances_sum":2559.3274567522885}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9751316391941396,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.96875,"distances_sum":2563.963378459646}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9694196428571431,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.921875,"distances_sum":2499.9216437219416}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9760817307692312,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9609375,"distances_sum":2559.3274567522885}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9760817307692312,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9609375,"distances_sum":2559.3274567522885}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7421875,"f1":0.8426323676323685,"seconds":5.142763257026672e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.1640625,"distances_sum":1513.0572111769673}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6640625,"f1":0.7897945804195813,"seconds":4.842877388000488e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.9375,"distances_sum":1331.9159177388815}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8575986513486522,"seconds":5.116686224937439e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.2578125,"distances_sum":1595.5112665786162}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8575986513486522,"seconds":5.116686224937439e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.2578125,"distances_sum":1595.5112665786162}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9245993589743596,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.75,"distances_sum":1906.65686764287}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9160115925740931,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.75,"distances_sum":1884.4816476069077}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9073462995338002,"seconds":0.00011004693806171417,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.703125,"distances_sum":1840.4198658061046}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9275641025641028,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.6875,"distances_sum":1950.1223354373165}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.875,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.875,"f1":0.9275641025641028,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.6875,"distances_sum":1950.1223354373165}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9644917582417588,"seconds":5.8710575103759766e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.90625,"distances_sum":2140.8969446132305}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9496711621711628,"seconds":5.3960829973220825e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.6953125,"distances_sum":2118.607846191774}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9509958791208796,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8125,"distances_sum":2101.3853906596246}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.965012591575092,"seconds":5.504116415977478e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8828125,"distances_sum":2150.039670399504}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9519001831501837,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.765625,"distances_sum":2097.098045399349}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.951957417582418,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.84375,"distances_sum":2088.8219262888656}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.965012591575092,"seconds":5.504116415977478e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8828125,"distances_sum":2150.039670399504}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.965012591575092,"seconds":5.504116415977478e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8828125,"distances_sum":2150.039670399504}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.185546875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.185546875,"f1":null,"seconds":2.639368176460266e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":4.7734375,"distances_sum":352.97808971746224}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5703125,"f1":0.7170527389277395,"seconds":3.827735781669617e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":6.625,"distances_sum":1050.8230967881477}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7915516774891782,"seconds":4.438683390617371e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.28125,"distances_sum":1284.4746004446076}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.669921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.669921875,"f1":0.7915516774891782,"seconds":4.438683390617371e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.28125,"distances_sum":1284.4746004446076}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.669921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.669921875,"f1":0.7915516774891782,"seconds":4.438683390617371e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.28125,"distances_sum":1284.4746004446076}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.669921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.669921875,"f1":0.7915516774891782,"seconds":4.438683390617371e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.28125,"distances_sum":1284.4746004446076}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8539039085914094,"seconds":5.014240741729736e-6,"exhaustive_search_seconds":1.2405216693878174e-6,"evaluations":8.0625,"distances_sum":1553.1202316796646}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75390625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.75390625,"f1":0.8539039085914094,"seconds":5.014240741729736e-6,"exhaustive_search_seconds":1.2405216693878174e-6,"evaluations":8.0625,"distances_sum":1553.1202316796646}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8530714077589088,"seconds":4.863366484642029e-6,"exhaustive_search_seconds":1.2405216693878174e-6,"evaluations":8.046875,"distances_sum":1563.2061570253463}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8530714077589088,"seconds":4.863366484642029e-6,"exhaustive_search_seconds":1.2405216693878174e-6,"evaluations":8.046875,"distances_sum":1563.2061570253463}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7548828125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8530714077589088,"seconds":4.863366484642029e-6,"exhaustive_search_seconds":1.2405216693878174e-6,"evaluations":8.046875,"distances_sum":1563.2061570253463}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5673828125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5673828125,"f1":0.7077944624819631,"seconds":5.045905709266663e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.1953125,"distances_sum":1112.524685895202}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5673828125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5673828125,"f1":0.7077944624819631,"seconds":5.045905709266663e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.1953125,"distances_sum":1112.524685895202}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9354484057609064,"seconds":5.597248673439026e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.875,"distances_sum":1993.5639131030093}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6494140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6494140625,"f1":0.7791619838494845,"seconds":4.345551133155823e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.7734375,"distances_sum":1289.157436078002}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9393887362637368,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8671875,"distances_sum":2008.066618780991}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.89453125,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.9393887362637368,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8671875,"distances_sum":2008.066618780991}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9511077464202472,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.890625,"distances_sum":2098.8442809249887}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.946603396603397,"seconds":5.414709448814392e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.796875,"distances_sum":2103.9585623718503}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9424393315018318,"seconds":5.433335900306702e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9453125,"distances_sum":2020.256895356392}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9511077464202472,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.890625,"distances_sum":2098.8442809249887}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9150390625,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9511077464202472,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.890625,"distances_sum":2098.8442809249887}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5556640625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5556640625,"f1":0.6993955697080702,"seconds":4.76837158203125e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.5,"distances_sum":1136.1700065358416}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.568359375,"f1":0.7113662379287387,"seconds":3.729015588760376e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.53125,"distances_sum":1163.9951731378242}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.568359375,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.568359375,"f1":0.7113662379287387,"seconds":3.729015588760376e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.53125,"distances_sum":1163.9951731378242}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5810546875, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.5810546875,"f1":null,"seconds":3.954395651817322e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.7421875,"distances_sum":1211.4547728822288}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9193395146520154,"seconds":5.189329385757446e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.390625,"distances_sum":2004.4377953241788}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8560444763569772,"seconds":4.816800355911255e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.9921875,"distances_sum":1655.5910180774022}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.890699925074926,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.1875,"distances_sum":1838.670830065857}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6552734375, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6552734375,"f1":0.7763415404040411,"seconds":4.211440682411194e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.3046875,"distances_sum":1391.7132965288865}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8623046875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8623046875,"f1":0.9193395146520154,"seconds":5.189329385757446e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.390625,"distances_sum":2004.4377953241788}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9690876831501836,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8828125,"distances_sum":2262.1616850568266}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9597355769230773,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.7734375,"distances_sum":2249.022840179997}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9687156593406598,"seconds":5.479902029037476e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8359375,"distances_sum":2304.0238491003693}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9371024808524815,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.6171875,"distances_sum":2136.3144342676464}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9203785797535807,"seconds":5.662441253662109e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.3984375,"distances_sum":1993.1569427076965}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9225618131868139,"seconds":5.584210157394409e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.5234375,"distances_sum":1982.6791452911746}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690876831501836,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8828125,"distances_sum":2262.1616850568266}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690876831501836,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8828125,"distances_sum":2262.1616850568266}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7985680985680993,"seconds":4.652887582778931e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.75,"distances_sum":1579.611765829589}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6806640625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6806640625,"f1":0.7985680985680993,"seconds":4.652887582778931e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.75,"distances_sum":1579.611765829589}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6806640625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6806640625,"f1":0.7985680985680993,"seconds":4.652887582778931e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.75,"distances_sum":1579.611765829589}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.6806640625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6806640625,"f1":0.7985680985680993,"seconds":4.652887582778931e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.75,"distances_sum":1579.611765829589}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.689453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.689453125,"f1":0.8039588883338891,"seconds":4.624947905540466e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.328125,"distances_sum":1552.5348101828895}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8513429279054286,"seconds":5.0906091928482056e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.1875,"distances_sum":1752.164119137741}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8749172702297711,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.2890625,"distances_sum":1878.3282861460568}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.787109375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.787109375,"f1":0.8749172702297711,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.2890625,"distances_sum":1878.3282861460568}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.931112637362638,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7890625,"distances_sum":2265.653881704524}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9728250915750919,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.953125,"distances_sum":2547.603197704081}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9351304945054953,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8046875,"distances_sum":2304.7422625918107}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9100540084915091,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.4296875,"distances_sum":2099.403341493905}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9224447427572433,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.84375,"distances_sum":2195.6175036968407}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9728250915750919,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.953125,"distances_sum":2547.603197704081}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":5,"bsize":13}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9817708333333337,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":9.0,"distances_sum":2598.8321557545937}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9790006868131871,"seconds":6.075948476791382e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.96875,"distances_sum":2581.2097734355884}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9752060439560442,"seconds":6.087124347686768e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.96875,"distances_sum":2547.189223586761}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9764880952380954,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.984375,"distances_sum":2557.7693918417026}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9749828296703299,"seconds":6.202608346939087e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9453125,"distances_sum":2549.6694595381464}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9817708333333337,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":9.0,"distances_sum":2598.8321557545937}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9817708333333337,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":9.0,"distances_sum":2598.8321557545937}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8746607559107566,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.4609375,"distances_sum":1963.89473691698}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4228515625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4228515625,"f1":null,"seconds":3.8389116525650024e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.140625,"distances_sum":885.0618284734708}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7919921875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7919921875,"f1":0.8746607559107566,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.4609375,"distances_sum":1963.89473691698}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9542353479853485,"seconds":5.498528480529785e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8046875,"distances_sum":2523.7946836579504}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.9003777472527481,"seconds":5.081295967102051e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.59375,"distances_sum":2091.8559162625806}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9542353479853485,"seconds":5.498528480529785e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8046875,"distances_sum":2523.7946836579504}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9619848901098903,"seconds":5.342066287994385e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.84375,"distances_sum":2532.282959190795}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9777758699633703,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9375,"distances_sum":2643.3691662203464}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9563301282051287,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8125,"distances_sum":2511.6846278924622}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9777758699633703,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9375,"distances_sum":2643.3691662203464}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9777758699633703,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9375,"distances_sum":2643.3691662203464}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.8040199383949391,"seconds":4.5299530029296875e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.359375,"distances_sum":1598.0535144994165}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7275390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7275390625,"f1":0.828876332001333,"seconds":5.4817646741867065e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.0859375,"distances_sum":1776.1575289187897}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7275390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7275390625,"f1":0.828876332001333,"seconds":5.4817646741867065e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.0859375,"distances_sum":1776.1575289187897}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9611092032967038,"seconds":6.508082151412964e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8359375,"distances_sum":2580.1741038284686}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9611092032967038,"seconds":6.508082151412964e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8359375,"distances_sum":2580.1741038284686}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":5,"bsize":13}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9757471694971698,"seconds":4.064291715621948e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8984375,"distances_sum":2670.6528004569855}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9639880952380956,"seconds":3.898516297340393e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8515625,"distances_sum":2591.887963416316}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9622767857142861,"seconds":4.014000296592712e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8984375,"distances_sum":2563.2166193196454}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":3,"bsize":13}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.976636904761905,"seconds":4.069879651069641e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.9296875,"distances_sum":2673.9738473754437}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9757471694971698,"seconds":4.064291715621948e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8984375,"distances_sum":2670.6528004569855}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9757471694971698,"seconds":4.064291715621948e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8984375,"distances_sum":2670.6528004569855}}, n: 9
mean(cfft.distances) = 0.334962417474673
mean(cdnet.distances) = 0.40679500877631625
mean(crand.distances) = 0.40066140034964914
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8444444444444444
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.851111111111111
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8644444444444445
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8911111111111111
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8844444444444445
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8777777777777778
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9333333333333332
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8866666666666667
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8688888888888888
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9199999999999999
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9355555555555556
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.84
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8733333333333334
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8866666666666667
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8622222222222221
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8733333333333334
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9044444444444443
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9022222222222224
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8866666666666667
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9066666666666666
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.5686712091167768] ***
*** center 1: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 9, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.2028497762022982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2028497762022982, 0.16497095060386546] ***
*** starting iteration: 2; err: [Inf, 0.2028497762022982, 0.16497095060386546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2028497762022982, 0.16497095060386546, 0.15332337756369924] ***
*** starting iteration: 3; err: [Inf, 0.2028497762022982, 0.16497095060386546, 0.15332337756369924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2028497762022982, 0.16497095060386546, 0.15332337756369924, 0.1502047918104866] ***
*** starting iteration: 4; err: [Inf, 0.2028497762022982, 0.16497095060386546, 0.15332337756369924, 0.1502047918104866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2028497762022982, 0.16497095060386546, 0.15332337756369924, 0.1502047918104866, 0.14943420598087637] ***
*** finished computation of 7 references, err: [Inf, 0.2028497762022982, 0.16497095060386546, 0.15332337756369924, 0.1502047918104866, 0.14943420598087637] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [68, 33, 0]]
** centroid: 1, normalized-entropy: 0.9115532734067251, [(1, 68), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [4, 86, 0]]
** centroid: 2, normalized-entropy: 0.2623112196143368, [(1, 4), (2, 86)]
*** center 3: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [97, 12, 0]]
** centroid: 4, normalized-entropy: 0.5001926210998139, [(1, 97), (2, 12)]
*** center 5: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [50, 40, 0]]
** centroid: 6, normalized-entropy: 0.9910760598382222, [(1, 50), (2, 40)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 71, 23]]
** centroid: 7, normalized-entropy: 0.8027381019527042, [(2, 71), (3, 23)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18163328356173886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18163328356173886, 0.15301650981264966] ***
*** starting iteration: 2; err: [Inf, 0.18163328356173886, 0.15301650981264966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18163328356173886, 0.15301650981264966, 0.14957495987717365] ***
*** starting iteration: 3; err: [Inf, 0.18163328356173886, 0.15301650981264966, 0.14957495987717365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18163328356173886, 0.15301650981264966, 0.14957495987717365, 0.1489777670971848] ***
*** finished computation of 7 references, err: [Inf, 0.18163328356173886, 0.15301650981264966, 0.14957495987717365, 0.1489777670971848] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 90, 23]]
** centroid: 1, normalized-entropy: 0.7289514964064973, [(2, 90), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 6, 0]]
** centroid: 3, normalized-entropy: 0.45868581620054033, [(1, 56), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [74, 41, 0]]
** centroid: 4, normalized-entropy: 0.9397580401106037, [(1, 74), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [101, 18, 0]]
** centroid: 5, normalized-entropy: 0.6129857483172468, [(1, 101), (2, 18)]
*** center 6: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [12, 87, 0]]
** centroid: 7, normalized-entropy: 0.5328350630342235, [(1, 12), (2, 87)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1872810583835331] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1872810583835331, 0.152399277047155] ***
*** starting iteration: 2; err: [Inf, 0.1872810583835331, 0.152399277047155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1872810583835331, 0.152399277047155, 0.14646869381181785] ***
*** starting iteration: 3; err: [Inf, 0.1872810583835331, 0.152399277047155, 0.14646869381181785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1872810583835331, 0.152399277047155, 0.14646869381181785, 0.14466716310866679] ***
*** finished computation of 7 references, err: [Inf, 0.1872810583835331, 0.152399277047155, 0.14646869381181785, 0.14466716310866679] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [132, 1, 0]]
** centroid: 1, normalized-entropy: 0.06385368546122076, [(1, 132), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 5, 0]]
** centroid: 2, normalized-entropy: 0.378958787501346, [(1, 63), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 61, 25]]
** centroid: 3, normalized-entropy: 0.869620774054375, [(2, 61), (3, 25)]
*** center 4: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [7, 90, 0]]
** centroid: 5, normalized-entropy: 0.37395136668121054, [(1, 7), (2, 90)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [113, 1, 0]]
** centroid: 6, normalized-entropy: 0.07253718299881001, [(1, 113), (2, 1)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 83, 0]]
** centroid: 7, normalized-entropy: 0.09317131799548928, [(1, 1), (2, 83)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1957742160457051] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1957742160457051, 0.14783022525431266] ***
*** starting iteration: 2; err: [Inf, 0.1957742160457051, 0.14783022525431266] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1957742160457051, 0.14783022525431266, 0.14507801061694411] ***
*** starting iteration: 3; err: [Inf, 0.1957742160457051, 0.14783022525431266, 0.14507801061694411] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1957742160457051, 0.14783022525431266, 0.14507801061694411, 0.144913572730773] ***
*** finished computation of 7 references, err: [Inf, 0.1957742160457051, 0.14783022525431266, 0.14507801061694411, 0.144913572730773] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [63, 57, 0]]
** centroid: 1, normalized-entropy: 0.99819587904281, [(1, 63), (2, 57)]
*** center 2: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 77, 24]]
** centroid: 4, normalized-entropy: 0.7910662980902586, [(2, 77), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [76, 25, 0]]
** centroid: 5, normalized-entropy: 0.8073313266519867, [(1, 76), (2, 25)]
*** center 6: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 82, 0]]
** centroid: 7, normalized-entropy: 0.1623261801753929, [(1, 2), (2, 82)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.428350030984338] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.428350030984338, 0.3062841743790173] ***
*** finished computation of 3 references, err: [Inf, 0.428350030984338, 0.3062841743790173] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [134, 147, 23]]
** centroid: 1, normalized-entropy: 0.826269450804928, [(1, 134), (2, 147), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [105, 95, 0]]
** centroid: 2, normalized-entropy: 0.99819587904281, [(1, 105), (2, 95)]
*** center 3: selecting labels [1] (freq >= 1) [from [162, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4576674389821858] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4576674389821858, 0.30063852069081215] ***
*** finished computation of 3 references, err: [Inf, 0.4576674389821858, 0.30063852069081215] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [273, 7, 0]]
** centroid: 1, normalized-entropy: 0.1686609314966701, [(1, 273), (2, 7)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [2, 171, 25]]
** centroid: 2, normalized-entropy: 0.39532983224504276, [(1, 2), (2, 171), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [126, 63, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 126), (2, 63)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3732425196213589] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3732425196213589, 0.30220644368973004] ***
*** finished computation of 3 references, err: [Inf, 0.3732425196213589, 0.30220644368973004] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [267, 54, 0]]
** centroid: 1, normalized-entropy: 0.6536265622705767, [(1, 267), (2, 54)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 140, 24]]
** centroid: 2, normalized-entropy: 0.6006085754131871, [(2, 140), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [135, 47, 0]]
** centroid: 3, normalized-entropy: 0.8240815543156681, [(1, 135), (2, 47)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.44374388571850976] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44374388571850976, 0.3064950839784164] ***
*** starting iteration: 2; err: [Inf, 0.44374388571850976, 0.3064950839784164] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44374388571850976, 0.3064950839784164, 0.29837934270098404] ***
*** starting iteration: 3; err: [Inf, 0.44374388571850976, 0.3064950839784164, 0.29837934270098404] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44374388571850976, 0.3064950839784164, 0.29837934270098404, 0.29527678428911364] ***
*** finished computation of 3 references, err: [Inf, 0.44374388571850976, 0.3064950839784164, 0.29837934270098404, 0.29527678428911364] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [64, 163, 23]]
** centroid: 1, normalized-entropy: 0.7711512591560107, [(1, 64), (2, 163), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [196, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [141, 79, 0]]
** centroid: 3, normalized-entropy: 0.9419259871872913, [(1, 141), (2, 79)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38464225653274126] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38464225653274126, 0.31127957201868606] ***
*** starting iteration: 2; err: [Inf, 0.38464225653274126, 0.31127957201868606] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38464225653274126, 0.31127957201868606, 0.29926342824599644] ***
*** starting iteration: 3; err: [Inf, 0.38464225653274126, 0.31127957201868606, 0.29926342824599644] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38464225653274126, 0.31127957201868606, 0.29926342824599644, 0.2954983921086966] ***
*** finished computation of 3 references, err: [Inf, 0.38464225653274126, 0.31127957201868606, 0.29926342824599644, 0.2954983921086966] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [251, 19, 0]]
** centroid: 1, normalized-entropy: 0.36730428298760165, [(1, 251), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [150, 59, 0]]
** centroid: 2, normalized-entropy: 0.8585613163548981, [(1, 150), (2, 59)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 163, 25]]
** centroid: 3, normalized-entropy: 0.5655511182519258, [(2, 163), (3, 25)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.45499656708824493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45499656708824493, 0.3029692968551902] ***
*** starting iteration: 2; err: [Inf, 0.45499656708824493, 0.3029692968551902] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45499656708824493, 0.3029692968551902, 0.3003726597677084] ***
*** starting iteration: 3; err: [Inf, 0.45499656708824493, 0.3029692968551902, 0.3003726597677084] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45499656708824493, 0.3029692968551902, 0.3003726597677084, 0.29858112612228166] ***
*** finished computation of 3 references, err: [Inf, 0.45499656708824493, 0.3029692968551902, 0.3003726597677084, 0.29858112612228166] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [62, 162, 24]]
** centroid: 1, normalized-entropy: 0.7743790445557164, [(1, 62), (2, 162), (3, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [216, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [124, 79, 0]]
** centroid: 3, normalized-entropy: 0.964256993076981, [(1, 124), (2, 79)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18340785728803818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18340785728803818, 0.15566928776726685] ***
*** starting iteration: 2; err: [Inf, 0.18340785728803818, 0.15566928776726685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18340785728803818, 0.15566928776726685, 0.14951764578013674] ***
*** starting iteration: 3; err: [Inf, 0.18340785728803818, 0.15566928776726685, 0.14951764578013674] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18340785728803818, 0.15566928776726685, 0.14951764578013674, 0.14766630714038748] ***
*** starting iteration: 4; err: [Inf, 0.18340785728803818, 0.15566928776726685, 0.14951764578013674, 0.14766630714038748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18340785728803818, 0.15566928776726685, 0.14951764578013674, 0.14766630714038748, 0.1468188181068159] ***
*** finished computation of 7 references, err: [Inf, 0.18340785728803818, 0.15566928776726685, 0.14951764578013674, 0.14766630714038748, 0.1468188181068159] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [26, 67, 0]]
** centroid: 1, normalized-entropy: 0.8548640967818041, [(1, 26), (2, 67)]
*** center 2: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 101, 25]]
** centroid: 4, normalized-entropy: 0.7187421099896039, [(2, 101), (3, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [60, 32, 0]]
** centroid: 5, normalized-entropy: 0.9321115676166747, [(1, 60), (2, 32)]
*** center 6: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [58, 41, 0]]
** centroid: 7, normalized-entropy: 0.9786239947589973, [(1, 58), (2, 41)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22037396001080792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22037396001080792, 0.18307974615282305] ***
*** starting iteration: 2; err: [Inf, 0.22037396001080792, 0.18307974615282305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22037396001080792, 0.18307974615282305, 0.16138388863813574] ***
*** starting iteration: 3; err: [Inf, 0.22037396001080792, 0.18307974615282305, 0.16138388863813574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22037396001080792, 0.18307974615282305, 0.16138388863813574, 0.1538718400105577] ***
*** starting iteration: 4; err: [Inf, 0.22037396001080792, 0.18307974615282305, 0.16138388863813574, 0.1538718400105577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22037396001080792, 0.18307974615282305, 0.16138388863813574, 0.1538718400105577, 0.152003633569105] ***
*** starting iteration: 5; err: [Inf, 0.22037396001080792, 0.18307974615282305, 0.16138388863813574, 0.1538718400105577, 0.152003633569105] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22037396001080792, 0.18307974615282305, 0.16138388863813574, 0.1538718400105577, 0.152003633569105, 0.15094601703846808] ***
*** starting iteration: 6; err: [Inf, 0.22037396001080792, 0.18307974615282305, 0.16138388863813574, 0.1538718400105577, 0.152003633569105, 0.15094601703846808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22037396001080792, 0.18307974615282305, 0.16138388863813574, 0.1538718400105577, 0.152003633569105, 0.15094601703846808, 0.15047647263240377] ***
*** finished computation of 7 references, err: [Inf, 0.22037396001080792, 0.18307974615282305, 0.16138388863813574, 0.1538718400105577, 0.152003633569105, 0.15094601703846808, 0.15047647263240377] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 61, 10]]
** centroid: 1, normalized-entropy: 0.5864477034453907, [(2, 61), (3, 10)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 36, 0]]
** centroid: 2, normalized-entropy: 0.9735190023846809, [(1, 53), (2, 36)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 56, 14]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 56), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [94, 39, 0]]
** centroid: 5, normalized-entropy: 0.8728610926942303, [(1, 94), (2, 39)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 49, 0]]
** centroid: 6, normalized-entropy: 0.9926108898749407, [(1, 40), (2, 49)]
*** center 7: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25591795736792367] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25591795736792367, 0.19757841668209178] ***
*** finished computation of 7 references, err: [Inf, 0.25591795736792367, 0.19757841668209178] ***
*** center 1: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [216, 11, 0]]
** centroid: 2, normalized-entropy: 0.27981082970360444, [(1, 216), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 56, 23]]
** centroid: 3, normalized-entropy: 0.8701883352082787, [(2, 56), (3, 23)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [8, 79, 0]]
** centroid: 4, normalized-entropy: 0.4429586785384856, [(1, 8), (2, 79)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 27, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 68, 0]]
** centroid: 6, normalized-entropy: 0.5203346157857599, [(1, 9), (2, 68)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [52, 1, 0]]
** centroid: 7, normalized-entropy: 0.13503620280212753, [(1, 52), (2, 1)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1996723533708552] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1996723533708552, 0.16637349462993944] ***
*** finished computation of 7 references, err: [Inf, 0.1996723533708552, 0.16637349462993944] ***
*** center 1: selecting labels [1] (freq >= 1) [from [168, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 46, 0]]
** centroid: 3, normalized-entropy: 0.9999165959739288, [(1, 47), (2, 46)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [60, 46, 0]]
** centroid: 4, normalized-entropy: 0.987380023288353, [(1, 60), (2, 46)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [126, 1, 0]]
** centroid: 5, normalized-entropy: 0.06634397526831168, [(1, 126), (2, 1)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 30, 14]]
** centroid: 6, normalized-entropy: 0.9023932827949788, [(2, 30), (3, 14)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 43, 11]]
** centroid: 7, normalized-entropy: 0.7292739418449411, [(2, 43), (3, 11)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24230165830066336] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24230165830066336, 0.15943235155499388] ***
*** finished computation of 7 references, err: [Inf, 0.24230165830066336, 0.15943235155499388] ***
*** center 1: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [10, 69, 0]]
** centroid: 2, normalized-entropy: 0.5479900080939728, [(1, 10), (2, 69)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [123, 2, 0]]
** centroid: 3, normalized-entropy: 0.11835001140827515, [(1, 123), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [73, 39, 0]]
** centroid: 4, normalized-entropy: 0.9324631422909171, [(1, 73), (2, 39)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 74, 24]]
** centroid: 5, normalized-entropy: 0.8030909760146977, [(2, 74), (3, 24)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [29, 57, 0]]
** centroid: 6, normalized-entropy: 0.9221231306777973, [(1, 29), (2, 57)]
*** center 7: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33884208173107905] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33884208173107905, 0.3022098527989118] ***
*** starting iteration: 2; err: [Inf, 0.33884208173107905, 0.3022098527989118] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33884208173107905, 0.3022098527989118, 0.30118086890704854] ***
*** starting iteration: 3; err: [Inf, 0.33884208173107905, 0.3022098527989118, 0.30118086890704854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33884208173107905, 0.3022098527989118, 0.30118086890704854, 0.30124805965139206] ***
*** finished computation of 3 references, err: [Inf, 0.33884208173107905, 0.3022098527989118, 0.30118086890704854, 0.30124805965139206] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [102, 134, 23]]
** centroid: 1, normalized-entropy: 0.8401063164433843, [(1, 102), (2, 134), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [197, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [102, 108, 0]]
** centroid: 3, normalized-entropy: 0.9994110647387552, [(1, 102), (2, 108)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3711547288855864] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3711547288855864, 0.31328216761998506] ***
*** starting iteration: 2; err: [Inf, 0.3711547288855864, 0.31328216761998506] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3711547288855864, 0.31328216761998506, 0.2954518918375271] ***
*** starting iteration: 3; err: [Inf, 0.3711547288855864, 0.31328216761998506, 0.2954518918375271] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3711547288855864, 0.31328216761998506, 0.2954518918375271, 0.293648105684383] ***
*** starting iteration: 4; err: [Inf, 0.3711547288855864, 0.31328216761998506, 0.2954518918375271, 0.293648105684383] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3711547288855864, 0.31328216761998506, 0.2954518918375271, 0.293648105684383, 0.2934754203496755] ***
*** finished computation of 3 references, err: [Inf, 0.3711547288855864, 0.31328216761998506, 0.2954518918375271, 0.293648105684383, 0.2934754203496755] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [3, 172, 25]]
** centroid: 1, normalized-entropy: 0.4120047251598336, [(1, 3), (2, 172), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [164, 64, 0]]
** centroid: 2, normalized-entropy: 0.8564052389131375, [(1, 164), (2, 64)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [234, 5, 0]]
** centroid: 3, normalized-entropy: 0.14657816841190546, [(1, 234), (2, 5)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4720926586352847] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4720926586352847, 0.3233867158563151] ***
*** starting iteration: 2; err: [Inf, 0.4720926586352847, 0.3233867158563151] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4720926586352847, 0.3233867158563151, 0.3018774165530344] ***
*** starting iteration: 3; err: [Inf, 0.4720926586352847, 0.3233867158563151, 0.3018774165530344] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4720926586352847, 0.3233867158563151, 0.3018774165530344, 0.2977666981696993] ***
*** starting iteration: 4; err: [Inf, 0.4720926586352847, 0.3233867158563151, 0.3018774165530344, 0.2977666981696993] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4720926586352847, 0.3233867158563151, 0.3018774165530344, 0.2977666981696993, 0.29655471479455975] ***
*** starting iteration: 5; err: [Inf, 0.4720926586352847, 0.3233867158563151, 0.3018774165530344, 0.2977666981696993, 0.29655471479455975] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4720926586352847, 0.3233867158563151, 0.3018774165530344, 0.2977666981696993, 0.29655471479455975, 0.29556579849888004] ***
*** finished computation of 3 references, err: [Inf, 0.4720926586352847, 0.3233867158563151, 0.3018774165530344, 0.2977666981696993, 0.29655471479455975, 0.29556579849888004] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [120, 80, 0]]
** centroid: 1, normalized-entropy: 0.9709505944546688, [(1, 120), (2, 80)]
*** center 2: selecting labels [1] (freq >= 1) [from [224, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [58, 161, 24]]
** centroid: 3, normalized-entropy: 0.7676307413006561, [(1, 58), (2, 161), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39172573435447505] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39172573435447505, 0.30270204908150183] ***
*** finished computation of 3 references, err: [Inf, 0.39172573435447505, 0.30270204908150183] ***
*** center 1: selecting labels [1] (freq >= 1) [from [200, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [106, 130, 0]]
** centroid: 2, normalized-entropy: 0.9925270159830354, [(1, 106), (2, 130)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [95, 112, 23]]
** centroid: 3, normalized-entropy: 0.860974292762233, [(1, 95), (2, 112), (3, 23)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.46485725798081423] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.46485725798081423, 0.32006963720123494] ***
*** finished computation of 3 references, err: [Inf, 0.46485725798081423, 0.32006963720123494] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [227, 5, 0]]
** centroid: 1, normalized-entropy: 0.15006656801776813, [(1, 227), (2, 5)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [19, 127, 25]]
** centroid: 2, normalized-entropy: 0.6792006663941668, [(1, 19), (2, 127), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [155, 109, 0]]
** centroid: 3, normalized-entropy: 0.9779873988349997, [(1, 155), (2, 109)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3502233062062351] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3502233062062351, 0.3054854775607206] ***
*** finished computation of 3 references, err: [Inf, 0.3502233062062351, 0.3054854775607206] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [106, 145, 24]]
** centroid: 1, normalized-entropy: 0.8353938076125059, [(1, 106), (2, 145), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [166, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [130, 96, 0]]
** centroid: 3, normalized-entropy: 0.9836116360305414, [(1, 130), (2, 96)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2895455118611332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2895455118611332, 0.21367011220311863] ***
*** starting iteration: 2; err: [Inf, 0.2895455118611332, 0.21367011220311863] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2895455118611332, 0.21367011220311863, 0.19961500345581062] ***
*** starting iteration: 3; err: [Inf, 0.2895455118611332, 0.21367011220311863, 0.19961500345581062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2895455118611332, 0.21367011220311863, 0.19961500345581062, 0.1958806701892478] ***
*** finished computation of 7 references, err: [Inf, 0.2895455118611332, 0.21367011220311863, 0.19961500345581062, 0.1958806701892478] ***
*** center 1: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [91, 13, 0]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(1, 91), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [81, 44, 0]]
** centroid: 4, normalized-entropy: 0.9358415530325214, [(1, 81), (2, 44)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [33, 64, 0]]
** centroid: 6, normalized-entropy: 0.925015873745592, [(1, 33), (2, 64)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 46, 23]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 46), (3, 23)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29458544886359633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29458544886359633, 0.2152852210225998] ***
*** starting iteration: 2; err: [Inf, 0.29458544886359633, 0.2152852210225998] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29458544886359633, 0.2152852210225998, 0.20088689230840423] ***
*** starting iteration: 3; err: [Inf, 0.29458544886359633, 0.2152852210225998, 0.20088689230840423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29458544886359633, 0.2152852210225998, 0.20088689230840423, 0.1960041490641759] ***
*** finished computation of 7 references, err: [Inf, 0.29458544886359633, 0.2152852210225998, 0.20088689230840423, 0.1960041490641759] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [115, 28, 0]]
** centroid: 1, normalized-entropy: 0.7134566956859694, [(1, 115), (2, 28)]
*** center 2: selecting labels [1] (freq >= 2) [from [125, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 21, 0]]
** centroid: 4, normalized-entropy: 0.7749672673267259, [(1, 71), (2, 21)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 78, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 61, 25]]
** centroid: 6, normalized-entropy: 0.869620774054375, [(2, 61), (3, 25)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [15, 53, 0]]
** centroid: 7, normalized-entropy: 0.7612401496918493, [(1, 15), (2, 53)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2859906045010668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2859906045010668, 0.2477052469573415] ***
*** starting iteration: 2; err: [Inf, 0.2859906045010668, 0.2477052469573415] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2859906045010668, 0.2477052469573415, 0.23280871391709687] ***
*** starting iteration: 3; err: [Inf, 0.2859906045010668, 0.2477052469573415, 0.23280871391709687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2859906045010668, 0.2477052469573415, 0.23280871391709687, 0.22293296180849803] ***
*** finished computation of 7 references, err: [Inf, 0.2859906045010668, 0.2477052469573415, 0.23280871391709687, 0.22293296180849803] ***
*** center 1: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [179, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 48, 12]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 48), (3, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 55, 0]]
** centroid: 5, normalized-entropy: 0.7039260680195971, [(1, 13), (2, 55)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [50, 33, 0]]
** centroid: 6, normalized-entropy: 0.9695235828220429, [(1, 50), (2, 33)]
*** center 7: selecting labels [1, 2, 3] (freq >= 2) [from [9, 105, 12]]
** centroid: 7, normalized-entropy: 0.5137201104864774, [(1, 9), (2, 105), (3, 12)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31931384309829847] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31931384309829847, 0.24787696696644476] ***
*** starting iteration: 2; err: [Inf, 0.31931384309829847, 0.24787696696644476] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31931384309829847, 0.24787696696644476, 0.24020972518759356] ***
*** starting iteration: 3; err: [Inf, 0.31931384309829847, 0.24787696696644476, 0.24020972518759356] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31931384309829847, 0.24787696696644476, 0.24020972518759356, 0.2384296175897927] ***
*** finished computation of 3 references, err: [Inf, 0.31931384309829847, 0.24787696696644476, 0.24020972518759356, 0.2384296175897927] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 147, 23]]
** centroid: 1, normalized-entropy: 0.5717805850773673, [(2, 147), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [150, 65, 0]]
** centroid: 2, normalized-entropy: 0.8841151220488478, [(1, 150), (2, 65)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [251, 30, 0]]
** centroid: 3, normalized-entropy: 0.4900699148476188, [(1, 251), (2, 30)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35679255321418035] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35679255321418035, 0.2375622068076622] ***
*** starting iteration: 2; err: [Inf, 0.35679255321418035, 0.2375622068076622] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35679255321418035, 0.2375622068076622, 0.2368114644653168] ***
*** finished computation of 3 references, err: [Inf, 0.35679255321418035, 0.2375622068076622, 0.2368114644653168] ***
*** center 1: selecting labels [1] (freq >= 2) [from [210, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [117, 92, 2]]
** centroid: 2, normalized-entropy: 0.6672651974316489, [(1, 117), (2, 92), (3, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [74, 149, 23]]
** centroid: 3, normalized-entropy: 0.8070283640127849, [(1, 74), (2, 149), (3, 23)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.26625132870426155] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26625132870426155, 0.23823738980736733] ***
*** starting iteration: 2; err: [Inf, 0.26625132870426155, 0.23823738980736733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26625132870426155, 0.23823738980736733, 0.23274843631287118] ***
*** starting iteration: 3; err: [Inf, 0.26625132870426155, 0.23823738980736733, 0.23274843631287118] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26625132870426155, 0.23823738980736733, 0.23274843631287118, 0.2317705217307654] ***
*** finished computation of 3 references, err: [Inf, 0.26625132870426155, 0.23823738980736733, 0.23274843631287118, 0.2317705217307654] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [6, 166, 24]]
** centroid: 1, normalized-entropy: 0.45928373299387076, [(1, 6), (2, 166), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [138, 64, 0]]
** centroid: 2, normalized-entropy: 0.9009026954478971, [(1, 138), (2, 64)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [258, 11, 0]]
** centroid: 3, normalized-entropy: 0.24636801421383678, [(1, 258), (2, 11)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3235183988674054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3235183988674054, 0.2301934821273874] ***
*** starting iteration: 2; err: [Inf, 0.3235183988674054, 0.2301934821273874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3235183988674054, 0.2301934821273874, 0.2127940030432902] ***
*** starting iteration: 3; err: [Inf, 0.3235183988674054, 0.2301934821273874, 0.2127940030432902] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3235183988674054, 0.2301934821273874, 0.2127940030432902, 0.20694540979972742] ***
*** starting iteration: 4; err: [Inf, 0.3235183988674054, 0.2301934821273874, 0.2127940030432902, 0.20694540979972742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3235183988674054, 0.2301934821273874, 0.2127940030432902, 0.20694540979972742, 0.2041710918551093] ***
*** starting iteration: 5; err: [Inf, 0.3235183988674054, 0.2301934821273874, 0.2127940030432902, 0.20694540979972742, 0.2041710918551093] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3235183988674054, 0.2301934821273874, 0.2127940030432902, 0.20694540979972742, 0.2041710918551093, 0.20214351793707772] ***
*** starting iteration: 6; err: [Inf, 0.3235183988674054, 0.2301934821273874, 0.2127940030432902, 0.20694540979972742, 0.2041710918551093, 0.20214351793707772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3235183988674054, 0.2301934821273874, 0.2127940030432902, 0.20694540979972742, 0.2041710918551093, 0.20214351793707772, 0.19994337864600503] ***
*** starting iteration: 7; err: [Inf, 0.3235183988674054, 0.2301934821273874, 0.2127940030432902, 0.20694540979972742, 0.2041710918551093, 0.20214351793707772, 0.19994337864600503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3235183988674054, 0.2301934821273874, 0.2127940030432902, 0.20694540979972742, 0.2041710918551093, 0.20214351793707772, 0.19994337864600503, 0.1975338662479509] ***
*** starting iteration: 8; err: [Inf, 0.3235183988674054, 0.2301934821273874, 0.2127940030432902, 0.20694540979972742, 0.2041710918551093, 0.20214351793707772, 0.19994337864600503, 0.1975338662479509] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3235183988674054, 0.2301934821273874, 0.2127940030432902, 0.20694540979972742, 0.2041710918551093, 0.20214351793707772, 0.19994337864600503, 0.1975338662479509, 0.1956587900322311] ***
*** starting iteration: 9; err: [Inf, 0.3235183988674054, 0.2301934821273874, 0.2127940030432902, 0.20694540979972742, 0.2041710918551093, 0.20214351793707772, 0.19994337864600503, 0.1975338662479509, 0.1956587900322311] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3235183988674054, 0.2301934821273874, 0.2127940030432902, 0.20694540979972742, 0.2041710918551093, 0.20214351793707772, 0.19994337864600503, 0.1975338662479509, 0.1956587900322311, 0.19400953311772384] ***
*** starting iteration: 10; err: [Inf, 0.3235183988674054, 0.2301934821273874, 0.2127940030432902, 0.20694540979972742, 0.2041710918551093, 0.20214351793707772, 0.19994337864600503, 0.1975338662479509, 0.1956587900322311, 0.19400953311772384] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3235183988674054, 0.2301934821273874, 0.2127940030432902, 0.20694540979972742, 0.2041710918551093, 0.20214351793707772, 0.19994337864600503, 0.1975338662479509, 0.1956587900322311, 0.19400953311772384, 0.19325203782537612] ***
*** finished computation of 7 references, err: [Inf, 0.3235183988674054, 0.2301934821273874, 0.2127940030432902, 0.20694540979972742, 0.2041710918551093, 0.20214351793707772, 0.19994337864600503, 0.1975338662479509, 0.1956587900322311, 0.19400953311772384, 0.19325203782537612] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [97, 4, 0]]
** centroid: 1, normalized-entropy: 0.24047340659188013, [(1, 97), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [84, 11, 0]]
** centroid: 2, normalized-entropy: 0.5171354891896202, [(1, 84), (2, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [131, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [1, 93, 0]]
** centroid: 4, normalized-entropy: 0.0849955598367127, [(1, 1), (2, 93)]
*** center 5: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 91, 0]]
** centroid: 6, normalized-entropy: 0.2039058755048202, [(1, 3), (2, 91)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 43, 23]]
** centroid: 7, normalized-entropy: 0.9327076126690367, [(2, 43), (3, 23)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29761299460210366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29761299460210366, 0.23023888016485425] ***
*** starting iteration: 2; err: [Inf, 0.29761299460210366, 0.23023888016485425] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29761299460210366, 0.23023888016485425, 0.21084463765294567] ***
*** starting iteration: 3; err: [Inf, 0.29761299460210366, 0.23023888016485425, 0.21084463765294567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29761299460210366, 0.23023888016485425, 0.21084463765294567, 0.1985441613732942] ***
*** starting iteration: 4; err: [Inf, 0.29761299460210366, 0.23023888016485425, 0.21084463765294567, 0.1985441613732942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29761299460210366, 0.23023888016485425, 0.21084463765294567, 0.1985441613732942, 0.1920615134124031] ***
*** starting iteration: 5; err: [Inf, 0.29761299460210366, 0.23023888016485425, 0.21084463765294567, 0.1985441613732942, 0.1920615134124031] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29761299460210366, 0.23023888016485425, 0.21084463765294567, 0.1985441613732942, 0.1920615134124031, 0.18877881364073085] ***
*** starting iteration: 6; err: [Inf, 0.29761299460210366, 0.23023888016485425, 0.21084463765294567, 0.1985441613732942, 0.1920615134124031, 0.18877881364073085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29761299460210366, 0.23023888016485425, 0.21084463765294567, 0.1985441613732942, 0.1920615134124031, 0.18877881364073085, 0.18686093788906777] ***
*** starting iteration: 7; err: [Inf, 0.29761299460210366, 0.23023888016485425, 0.21084463765294567, 0.1985441613732942, 0.1920615134124031, 0.18877881364073085, 0.18686093788906777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29761299460210366, 0.23023888016485425, 0.21084463765294567, 0.1985441613732942, 0.1920615134124031, 0.18877881364073085, 0.18686093788906777, 0.18593196559510985] ***
*** finished computation of 7 references, err: [Inf, 0.29761299460210366, 0.23023888016485425, 0.21084463765294567, 0.1985441613732942, 0.1920615134124031, 0.18877881364073085, 0.18686093788906777, 0.18593196559510985] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [96, 15, 0]]
** centroid: 1, normalized-entropy: 0.5713549744279549, [(1, 96), (2, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [45, 38, 0]]
** centroid: 3, normalized-entropy: 0.9948631079048572, [(1, 45), (2, 38)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [105, 6, 0]]
** centroid: 4, normalized-entropy: 0.30337483608641397, [(1, 105), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [5, 89, 0]]
** centroid: 5, normalized-entropy: 0.2998025130558691, [(1, 5), (2, 89)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 93, 25]]
** centroid: 6, normalized-entropy: 0.7450314037905273, [(2, 93), (3, 25)]
*** center 7: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30247423116388594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30247423116388594, 0.23909424284523328] ***
*** starting iteration: 2; err: [Inf, 0.30247423116388594, 0.23909424284523328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30247423116388594, 0.23909424284523328, 0.22147754643069137] ***
*** starting iteration: 3; err: [Inf, 0.30247423116388594, 0.23909424284523328, 0.22147754643069137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30247423116388594, 0.23909424284523328, 0.22147754643069137, 0.2129922145234094] ***
*** starting iteration: 4; err: [Inf, 0.30247423116388594, 0.23909424284523328, 0.22147754643069137, 0.2129922145234094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30247423116388594, 0.23909424284523328, 0.22147754643069137, 0.2129922145234094, 0.20501077555069724] ***
*** starting iteration: 5; err: [Inf, 0.30247423116388594, 0.23909424284523328, 0.22147754643069137, 0.2129922145234094, 0.20501077555069724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30247423116388594, 0.23909424284523328, 0.22147754643069137, 0.2129922145234094, 0.20501077555069724, 0.19877544239252762] ***
*** starting iteration: 6; err: [Inf, 0.30247423116388594, 0.23909424284523328, 0.22147754643069137, 0.2129922145234094, 0.20501077555069724, 0.19877544239252762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30247423116388594, 0.23909424284523328, 0.22147754643069137, 0.2129922145234094, 0.20501077555069724, 0.19877544239252762, 0.19784756953307223] ***
*** finished computation of 7 references, err: [Inf, 0.30247423116388594, 0.23909424284523328, 0.22147754643069137, 0.2129922145234094, 0.20501077555069724, 0.19877544239252762, 0.19784756953307223] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [86, 38, 0]]
** centroid: 1, normalized-entropy: 0.8890349038123858, [(1, 86), (2, 38)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 54, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [4, 81, 0]]
** centroid: 3, normalized-entropy: 0.2737691686829417, [(1, 4), (2, 81)]
*** center 4: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 35, 24]]
** centroid: 6, normalized-entropy: 0.9747785474909672, [(2, 35), (3, 24)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [70, 33, 0]]
** centroid: 7, normalized-entropy: 0.904803273542669, [(1, 70), (2, 33)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26966966338757725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26966966338757725, 0.2125108023345409] ***
*** starting iteration: 2; err: [Inf, 0.26966966338757725, 0.2125108023345409] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26966966338757725, 0.2125108023345409, 0.20314434674280407] ***
*** starting iteration: 3; err: [Inf, 0.26966966338757725, 0.2125108023345409, 0.20314434674280407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26966966338757725, 0.2125108023345409, 0.20314434674280407, 0.19487766493055914] ***
*** finished computation of 7 references, err: [Inf, 0.26966966338757725, 0.2125108023345409, 0.20314434674280407, 0.19487766493055914] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 88, 23]]
** centroid: 1, normalized-entropy: 0.7361103940132281, [(2, 88), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [10, 52, 0]]
** centroid: 3, normalized-entropy: 0.6373874992221911, [(1, 10), (2, 52)]
*** center 4: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [97, 17, 0]]
** centroid: 5, normalized-entropy: 0.6076407686085387, [(1, 97), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [29, 79, 0]]
** centroid: 6, normalized-entropy: 0.8393307617496655, [(1, 29), (2, 79)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [109, 6, 0]]
** centroid: 7, normalized-entropy: 0.295560777857315, [(1, 109), (2, 6)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21820767068009506] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21820767068009506, 0.19261056784333763] ***
*** starting iteration: 2; err: [Inf, 0.21820767068009506, 0.19261056784333763] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21820767068009506, 0.19261056784333763, 0.1911335374735508] ***
*** starting iteration: 3; err: [Inf, 0.21820767068009506, 0.19261056784333763, 0.1911335374735508] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21820767068009506, 0.19261056784333763, 0.1911335374735508, 0.19030947448208235] ***
*** finished computation of 7 references, err: [Inf, 0.21820767068009506, 0.19261056784333763, 0.1911335374735508, 0.19030947448208235] ***
*** center 1: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [68, 43, 0]]
** centroid: 4, normalized-entropy: 0.9630928243932294, [(1, 68), (2, 43)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [61, 32, 0]]
** centroid: 5, normalized-entropy: 0.928675181093665, [(1, 61), (2, 32)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [12, 70, 0]]
** centroid: 6, normalized-entropy: 0.6006085754131871, [(1, 12), (2, 70)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 96, 25]]
** centroid: 7, normalized-entropy: 0.7349557594762549, [(2, 96), (3, 25)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25294944296438787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25294944296438787, 0.2067255220003147] ***
*** starting iteration: 2; err: [Inf, 0.25294944296438787, 0.2067255220003147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25294944296438787, 0.2067255220003147, 0.1960129424838162] ***
*** starting iteration: 3; err: [Inf, 0.25294944296438787, 0.2067255220003147, 0.1960129424838162] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25294944296438787, 0.2067255220003147, 0.1960129424838162, 0.19396447153787116] ***
*** finished computation of 7 references, err: [Inf, 0.25294944296438787, 0.2067255220003147, 0.1960129424838162, 0.19396447153787116] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [21, 76, 0]]
** centroid: 1, normalized-entropy: 0.7537153483720096, [(1, 21), (2, 76)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [71, 7, 0]]
** centroid: 2, normalized-entropy: 0.4356133734874324, [(1, 71), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 80, 24]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(2, 80), (3, 24)]
*** center 4: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [16, 53, 0]]
** centroid: 5, normalized-entropy: 0.7812812090702043, [(1, 16), (2, 53)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [90, 25, 0]]
** centroid: 6, normalized-entropy: 0.7553754125614286, [(1, 90), (2, 25)]
*** center 7: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9560218901536267, 0.936031840223457, 0.9310118501735268, 0.9199768630906355, 0.9090108072144, 0.8959528390666116, 0.8949907991824161, 0.886994779210348, 0.8820317323311335, 0.8809887732043421, 0.8470026913140686, 0.8389946833060605, 0.7870055684426941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 1) => 0.9560218901536267
finished with 14
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.2852026952987162] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2852026952987162, 0.2232135690443844] ***
*** starting iteration: 2; err: [Inf, 0.2852026952987162, 0.2232135690443844] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2852026952987162, 0.2232135690443844, 0.2016120499346752] ***
*** starting iteration: 3; err: [Inf, 0.2852026952987162, 0.2232135690443844, 0.2016120499346752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2852026952987162, 0.2232135690443844, 0.2016120499346752, 0.19303048415215793] ***
*** starting iteration: 4; err: [Inf, 0.2852026952987162, 0.2232135690443844, 0.2016120499346752, 0.19303048415215793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2852026952987162, 0.2232135690443844, 0.2016120499346752, 0.19303048415215793, 0.18942525138094038] ***
*** starting iteration: 5; err: [Inf, 0.2852026952987162, 0.2232135690443844, 0.2016120499346752, 0.19303048415215793, 0.18942525138094038] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2852026952987162, 0.2232135690443844, 0.2016120499346752, 0.19303048415215793, 0.18942525138094038, 0.18763076475759907] ***
*** starting iteration: 6; err: [Inf, 0.2852026952987162, 0.2232135690443844, 0.2016120499346752, 0.19303048415215793, 0.18942525138094038, 0.18763076475759907] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2852026952987162, 0.2232135690443844, 0.2016120499346752, 0.19303048415215793, 0.18942525138094038, 0.18763076475759907, 0.18677140384571286] ***
*** finished computation of 7 references, err: [Inf, 0.2852026952987162, 0.2232135690443844, 0.2016120499346752, 0.19303048415215793, 0.18942525138094038, 0.18763076475759907, 0.18677140384571286] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 64, 23]]
** centroid: 2, normalized-entropy: 0.8332661971210122, [(2, 64), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [8, 81, 0]]
** centroid: 3, normalized-entropy: 0.43609466429612137, [(1, 8), (2, 81)]
*** center 4: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [73, 28, 0]]
** centroid: 5, normalized-entropy: 0.8516458330898723, [(1, 73), (2, 28)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 69, 0]]
** centroid: 6, normalized-entropy: 0.4434581453896789, [(1, 7), (2, 69)]
*** center 7: selecting labels [1] (freq >= 2) [from [127, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27096008261417165] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27096008261417165, 0.21076553994775757] ***
*** starting iteration: 2; err: [Inf, 0.27096008261417165, 0.21076553994775757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27096008261417165, 0.21076553994775757, 0.20074596278881865] ***
*** starting iteration: 3; err: [Inf, 0.27096008261417165, 0.21076553994775757, 0.20074596278881865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27096008261417165, 0.21076553994775757, 0.20074596278881865, 0.1954486718725251] ***
*** starting iteration: 4; err: [Inf, 0.27096008261417165, 0.21076553994775757, 0.20074596278881865, 0.1954486718725251] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27096008261417165, 0.21076553994775757, 0.20074596278881865, 0.1954486718725251, 0.19324940407573282] ***
*** starting iteration: 5; err: [Inf, 0.27096008261417165, 0.21076553994775757, 0.20074596278881865, 0.1954486718725251, 0.19324940407573282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27096008261417165, 0.21076553994775757, 0.20074596278881865, 0.1954486718725251, 0.19324940407573282, 0.1900966865760365] ***
*** starting iteration: 6; err: [Inf, 0.27096008261417165, 0.21076553994775757, 0.20074596278881865, 0.1954486718725251, 0.19324940407573282, 0.1900966865760365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27096008261417165, 0.21076553994775757, 0.20074596278881865, 0.1954486718725251, 0.19324940407573282, 0.1900966865760365, 0.18821067140386] ***
*** starting iteration: 7; err: [Inf, 0.27096008261417165, 0.21076553994775757, 0.20074596278881865, 0.1954486718725251, 0.19324940407573282, 0.1900966865760365, 0.18821067140386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27096008261417165, 0.21076553994775757, 0.20074596278881865, 0.1954486718725251, 0.19324940407573282, 0.1900966865760365, 0.18821067140386, 0.18603064826196772] ***
*** starting iteration: 8; err: [Inf, 0.27096008261417165, 0.21076553994775757, 0.20074596278881865, 0.1954486718725251, 0.19324940407573282, 0.1900966865760365, 0.18821067140386, 0.18603064826196772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27096008261417165, 0.21076553994775757, 0.20074596278881865, 0.1954486718725251, 0.19324940407573282, 0.1900966865760365, 0.18821067140386, 0.18603064826196772, 0.18564270907870564] ***
*** finished computation of 7 references, err: [Inf, 0.27096008261417165, 0.21076553994775757, 0.20074596278881865, 0.1954486718725251, 0.19324940407573282, 0.1900966865760365, 0.18821067140386, 0.18603064826196772, 0.18564270907870564] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 52, 0]]
** centroid: 3, normalized-entropy: 0.9999345706643479, [(1, 53), (2, 52)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [46, 39, 0]]
** centroid: 4, normalized-entropy: 0.9951022712641691, [(1, 46), (2, 39)]
*** center 5: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [47, 43, 0]]
** centroid: 6, normalized-entropy: 0.9985746465403509, [(1, 47), (2, 43)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 107, 25]]
** centroid: 7, normalized-entropy: 0.700201905045644, [(2, 107), (3, 25)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2582368243281831] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2582368243281831, 0.20298614098817513] ***
*** starting iteration: 2; err: [Inf, 0.2582368243281831, 0.20298614098817513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2582368243281831, 0.20298614098817513, 0.1899060975254766] ***
*** starting iteration: 3; err: [Inf, 0.2582368243281831, 0.20298614098817513, 0.1899060975254766] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2582368243281831, 0.20298614098817513, 0.1899060975254766, 0.1871585873956757] ***
*** starting iteration: 4; err: [Inf, 0.2582368243281831, 0.20298614098817513, 0.1899060975254766, 0.1871585873956757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2582368243281831, 0.20298614098817513, 0.1899060975254766, 0.1871585873956757, 0.18620826978172905] ***
*** finished computation of 7 references, err: [Inf, 0.2582368243281831, 0.20298614098817513, 0.1899060975254766, 0.1871585873956757, 0.18620826978172905] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [64, 34, 0]]
** centroid: 1, normalized-entropy: 0.9313043685793762, [(1, 64), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [87, 36, 0]]
** centroid: 2, normalized-entropy: 0.8721617883411698, [(1, 87), (2, 36)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 52, 23]]
** centroid: 3, normalized-entropy: 0.8892881527272397, [(2, 52), (3, 23)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [68, 41, 0]]
** centroid: 4, normalized-entropy: 0.9552751009754172, [(1, 68), (2, 41)]
*** center 5: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 78, 1]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9560218901536267, 0.936031840223457, 0.9310118501735268, 0.928029826233419, 0.9199768630906355, 0.9090108072144, 0.8959528390666116, 0.8949907991824161, 0.886994779210348, 0.8820317323311335, 0.8809887732043421, 0.8470026913140686, 0.8389946833060605, 0.7870055684426941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 1) => 0.9560218901536267
finished with 14
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9560218901536267, 0.936031840223457, 0.9310118501735268, 0.928029826233419, 0.9199768630906355, 0.9090108072144, 0.8959528390666116, 0.8949907991824161, 0.886994779210348, 0.8820317323311335, 0.8809887732043421, 0.8470026913140686, 0.8389946833060605, 0.7870055684426941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 1) => 0.9560218901536267
finished with 16
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.20561138400108786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20561138400108786, 0.16827883178860442] ***
*** starting iteration: 2; err: [Inf, 0.20561138400108786, 0.16827883178860442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20561138400108786, 0.16827883178860442, 0.15769573224445543] ***
*** starting iteration: 3; err: [Inf, 0.20561138400108786, 0.16827883178860442, 0.15769573224445543] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20561138400108786, 0.16827883178860442, 0.15769573224445543, 0.15129663636236712] ***
*** starting iteration: 4; err: [Inf, 0.20561138400108786, 0.16827883178860442, 0.15769573224445543, 0.15129663636236712] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20561138400108786, 0.16827883178860442, 0.15769573224445543, 0.15129663636236712, 0.14683159241241658] ***
*** starting iteration: 5; err: [Inf, 0.20561138400108786, 0.16827883178860442, 0.15769573224445543, 0.15129663636236712, 0.14683159241241658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20561138400108786, 0.16827883178860442, 0.15769573224445543, 0.15129663636236712, 0.14683159241241658, 0.14581165405328725] ***
*** starting iteration: 6; err: [Inf, 0.20561138400108786, 0.16827883178860442, 0.15769573224445543, 0.15129663636236712, 0.14683159241241658, 0.14581165405328725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20561138400108786, 0.16827883178860442, 0.15769573224445543, 0.15129663636236712, 0.14683159241241658, 0.14581165405328725, 0.14568224291851348] ***
*** finished computation of 7 references, err: [Inf, 0.20561138400108786, 0.16827883178860442, 0.15769573224445543, 0.15129663636236712, 0.14683159241241658, 0.14581165405328725, 0.14568224291851348] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [10, 78, 0]]
** centroid: 1, normalized-entropy: 0.5107878229540133, [(1, 10), (2, 78)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [60, 43, 0]]
** centroid: 2, normalized-entropy: 0.98025955447738, [(1, 60), (2, 43)]
*** center 3: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [61, 31, 0]]
** centroid: 5, normalized-entropy: 0.9218764863469129, [(1, 61), (2, 31)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 90, 23]]
** centroid: 6, normalized-entropy: 0.7289514964064973, [(2, 90), (3, 23)]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23217631027247684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23217631027247684, 0.16780682406883904] ***
*** starting iteration: 2; err: [Inf, 0.23217631027247684, 0.16780682406883904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23217631027247684, 0.16780682406883904, 0.1599774810526034] ***
*** starting iteration: 3; err: [Inf, 0.23217631027247684, 0.16780682406883904, 0.1599774810526034] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23217631027247684, 0.16780682406883904, 0.1599774810526034, 0.15625445610554567] ***
*** starting iteration: 4; err: [Inf, 0.23217631027247684, 0.16780682406883904, 0.1599774810526034, 0.15625445610554567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23217631027247684, 0.16780682406883904, 0.1599774810526034, 0.15625445610554567, 0.1550805423795518] ***
*** starting iteration: 5; err: [Inf, 0.23217631027247684, 0.16780682406883904, 0.1599774810526034, 0.15625445610554567, 0.1550805423795518] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23217631027247684, 0.16780682406883904, 0.1599774810526034, 0.15625445610554567, 0.1550805423795518, 0.15496292017781452] ***
*** finished computation of 7 references, err: [Inf, 0.23217631027247684, 0.16780682406883904, 0.1599774810526034, 0.15625445610554567, 0.1550805423795518, 0.15496292017781452] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [67, 63, 0]]
** centroid: 1, normalized-entropy: 0.9993169596348739, [(1, 67), (2, 63)]
*** center 2: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [49, 38, 0]]
** centroid: 3, normalized-entropy: 0.9884374283487116, [(1, 49), (2, 38)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 125, 25]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 125), (3, 25)]
*** center 5: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [93, 10, 0]]
** centroid: 6, normalized-entropy: 0.4596942127956402, [(1, 93), (2, 10)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [103, 5, 0]]
** centroid: 7, normalized-entropy: 0.2704505135124657, [(1, 103), (2, 5)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18123306090017777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18123306090017777, 0.15015223337026004] ***
*** starting iteration: 2; err: [Inf, 0.18123306090017777, 0.15015223337026004] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18123306090017777, 0.15015223337026004, 0.14870904205119825] ***
*** starting iteration: 3; err: [Inf, 0.18123306090017777, 0.15015223337026004, 0.14870904205119825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18123306090017777, 0.15015223337026004, 0.14870904205119825, 0.14814725953448882] ***
*** finished computation of 7 references, err: [Inf, 0.18123306090017777, 0.15015223337026004, 0.14870904205119825, 0.14814725953448882] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [110, 6, 0]]
** centroid: 1, normalized-entropy: 0.29367630985136944, [(1, 110), (2, 6)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 72, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [61, 28, 0]]
** centroid: 4, normalized-entropy: 0.898419774686072, [(1, 61), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [9, 81, 0]]
** centroid: 5, normalized-entropy: 0.46899559358928133, [(1, 9), (2, 81)]
*** center 6: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 54, 24]]
** centroid: 7, normalized-entropy: 0.8904916402194913, [(2, 54), (3, 24)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26629334207562666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26629334207562666, 0.21039185965400156] ***
*** starting iteration: 2; err: [Inf, 0.26629334207562666, 0.21039185965400156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26629334207562666, 0.21039185965400156, 0.20218986667015845] ***
*** starting iteration: 3; err: [Inf, 0.26629334207562666, 0.21039185965400156, 0.20218986667015845] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26629334207562666, 0.21039185965400156, 0.20218986667015845, 0.19482457392650457] ***
*** starting iteration: 4; err: [Inf, 0.26629334207562666, 0.21039185965400156, 0.20218986667015845, 0.19482457392650457] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26629334207562666, 0.21039185965400156, 0.20218986667015845, 0.19482457392650457, 0.19304589498592345] ***
*** starting iteration: 5; err: [Inf, 0.26629334207562666, 0.21039185965400156, 0.20218986667015845, 0.19482457392650457, 0.19304589498592345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26629334207562666, 0.21039185965400156, 0.20218986667015845, 0.19482457392650457, 0.19304589498592345, 0.19202430806522658] ***
*** starting iteration: 6; err: [Inf, 0.26629334207562666, 0.21039185965400156, 0.20218986667015845, 0.19482457392650457, 0.19304589498592345, 0.19202430806522658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26629334207562666, 0.21039185965400156, 0.20218986667015845, 0.19482457392650457, 0.19304589498592345, 0.19202430806522658, 0.19137693994172342] ***
*** finished computation of 7 references, err: [Inf, 0.26629334207562666, 0.21039185965400156, 0.20218986667015845, 0.19482457392650457, 0.19304589498592345, 0.19202430806522658, 0.19137693994172342] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [78, 49, 0]]
** centroid: 1, normalized-entropy: 0.9620535416312165, [(1, 78), (2, 49)]
*** center 2: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [101, 3, 0]]
** centroid: 3, normalized-entropy: 0.18857195602479668, [(1, 101), (2, 3)]
*** center 4: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 78, 23]]
** centroid: 5, normalized-entropy: 0.7740204128451942, [(2, 78), (3, 23)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 82, 0]]
** centroid: 6, normalized-entropy: 0.4655024490815131, [(1, 9), (2, 82)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [48, 30, 0]]
** centroid: 7, normalized-entropy: 0.961236604722876, [(1, 48), (2, 30)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22864223681278584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22864223681278584, 0.20104299988625557] ***
*** starting iteration: 2; err: [Inf, 0.22864223681278584, 0.20104299988625557] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22864223681278584, 0.20104299988625557, 0.19751686094303628] ***
*** starting iteration: 3; err: [Inf, 0.22864223681278584, 0.20104299988625557, 0.19751686094303628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22864223681278584, 0.20104299988625557, 0.19751686094303628, 0.19561876901292774] ***
*** starting iteration: 4; err: [Inf, 0.22864223681278584, 0.20104299988625557, 0.19751686094303628, 0.19561876901292774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22864223681278584, 0.20104299988625557, 0.19751686094303628, 0.19561876901292774, 0.19513318072473895] ***
*** finished computation of 7 references, err: [Inf, 0.22864223681278584, 0.20104299988625557, 0.19751686094303628, 0.19561876901292774, 0.19513318072473895] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [16, 60, 0]]
** centroid: 1, normalized-entropy: 0.7424875695421234, [(1, 16), (2, 60)]
*** center 2: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [77, 38, 0]]
** centroid: 4, normalized-entropy: 0.9153699714281696, [(1, 77), (2, 38)]
*** center 5: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [70, 56, 0]]
** centroid: 6, normalized-entropy: 0.9910760598382222, [(1, 70), (2, 56)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 87, 25]]
** centroid: 7, normalized-entropy: 0.765993414171823, [(2, 87), (3, 25)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23159956089688696] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23159956089688696, 0.19758726796624007] ***
*** starting iteration: 2; err: [Inf, 0.23159956089688696, 0.19758726796624007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23159956089688696, 0.19758726796624007, 0.1928592431715046] ***
*** starting iteration: 3; err: [Inf, 0.23159956089688696, 0.19758726796624007, 0.1928592431715046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23159956089688696, 0.19758726796624007, 0.1928592431715046, 0.19043615107414782] ***
*** starting iteration: 4; err: [Inf, 0.23159956089688696, 0.19758726796624007, 0.1928592431715046, 0.19043615107414782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23159956089688696, 0.19758726796624007, 0.1928592431715046, 0.19043615107414782, 0.1900439680940744] ***
*** finished computation of 7 references, err: [Inf, 0.23159956089688696, 0.19758726796624007, 0.1928592431715046, 0.19043615107414782, 0.1900439680940744] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [68, 34, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 68), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [93, 6, 0]]
** centroid: 2, normalized-entropy: 0.32984607020714635, [(1, 93), (2, 6)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 72, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [21, 77, 0]]
** centroid: 5, normalized-entropy: 0.7495952572594798, [(1, 21), (2, 77)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 48, 24]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 48), (3, 24)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [116, 4, 0]]
** centroid: 7, normalized-entropy: 0.2108423003185322, [(1, 116), (2, 4)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9560218901536267, 0.936031840223457, 0.9329928731126337, 0.9310118501735268, 0.928029826233419, 0.9199768630906355, 0.9139828451205697, 0.9090108072144, 0.8959528390666116, 0.8949907991824161, 0.886994779210348, 0.8820317323311335, 0.8809887732043421, 0.8470026913140686, 0.8389946833060605, 0.7870055684426941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 1) => 0.9560218901536267
finished with 17
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.2725326774679278] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2725326774679278, 0.23349555890850565] ***
*** starting iteration: 2; err: [Inf, 0.2725326774679278, 0.23349555890850565] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2725326774679278, 0.23349555890850565, 0.2316990747639501] ***
*** starting iteration: 3; err: [Inf, 0.2725326774679278, 0.23349555890850565, 0.2316990747639501] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2725326774679278, 0.23349555890850565, 0.2316990747639501, 0.23142598205079623] ***
*** finished computation of 3 references, err: [Inf, 0.2725326774679278, 0.23349555890850565, 0.2316990747639501, 0.23142598205079623] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [233, 1, 0]]
** centroid: 1, normalized-entropy: 0.03978620802593758, [(1, 233), (2, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [7, 181, 23]]
** centroid: 2, normalized-entropy: 0.44250725875818214, [(1, 7), (2, 181), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [161, 60, 0]]
** centroid: 3, normalized-entropy: 0.8435991516404611, [(1, 161), (2, 60)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2738155713676638] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2738155713676638, 0.23737878873567286] ***
*** starting iteration: 2; err: [Inf, 0.2738155713676638, 0.23737878873567286] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2738155713676638, 0.23737878873567286, 0.23563013489552212] ***
*** starting iteration: 3; err: [Inf, 0.2738155713676638, 0.23737878873567286, 0.23563013489552212] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2738155713676638, 0.23737878873567286, 0.23563013489552212, 0.23504478340853993] ***
*** finished computation of 3 references, err: [Inf, 0.2738155713676638, 0.23737878873567286, 0.23563013489552212, 0.23504478340853993] ***
*** center 1: selecting labels [1] (freq >= 1) [from [215, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [66, 170, 25]]
** centroid: 2, normalized-entropy: 0.7751506000456923, [(1, 66), (2, 170), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [120, 71, 0]]
** centroid: 3, normalized-entropy: 0.9519894722354625, [(1, 120), (2, 71)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.29168953168774203] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29168953168774203, 0.25185387172195867] ***
*** starting iteration: 2; err: [Inf, 0.29168953168774203, 0.25185387172195867] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29168953168774203, 0.25185387172195867, 0.24078034684536742] ***
*** starting iteration: 3; err: [Inf, 0.29168953168774203, 0.25185387172195867, 0.24078034684536742] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29168953168774203, 0.25185387172195867, 0.24078034684536742, 0.2375822844070339] ***
*** starting iteration: 4; err: [Inf, 0.29168953168774203, 0.25185387172195867, 0.24078034684536742, 0.2375822844070339] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29168953168774203, 0.25185387172195867, 0.24078034684536742, 0.2375822844070339, 0.23669061012638695] ***
*** finished computation of 3 references, err: [Inf, 0.29168953168774203, 0.25185387172195867, 0.24078034684536742, 0.2375822844070339, 0.23669061012638695] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [67, 129, 24]]
** centroid: 1, normalized-entropy: 0.8345013758296533, [(1, 67), (2, 129), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [224, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [111, 112, 0]]
** centroid: 3, normalized-entropy: 0.9999854943807827, [(1, 111), (2, 112)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 17)
[0.9560218901536267, 0.936031840223457, 0.9329928731126337, 0.9310118501735268, 0.928029826233419, 0.9219938501375627, 0.9199768630906355, 0.9139828451205697, 0.9090108072144, 0.8959528390666116, 0.8949907991824161, 0.886994779210348, 0.8820317323311335, 0.8809887732043421, 0.8470026913140686, 0.8389946833060605, 0.7870055684426941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 1) => 0.9560218901536267
finished with 18
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.21347331902985503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21347331902985503, 0.18122368702083244] ***
*** starting iteration: 2; err: [Inf, 0.21347331902985503, 0.18122368702083244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21347331902985503, 0.18122368702083244, 0.16659548130814913] ***
*** starting iteration: 3; err: [Inf, 0.21347331902985503, 0.18122368702083244, 0.16659548130814913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21347331902985503, 0.18122368702083244, 0.16659548130814913, 0.16102264166632024] ***
*** starting iteration: 4; err: [Inf, 0.21347331902985503, 0.18122368702083244, 0.16659548130814913, 0.16102264166632024] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21347331902985503, 0.18122368702083244, 0.16659548130814913, 0.16102264166632024, 0.1587149618489265] ***
*** starting iteration: 5; err: [Inf, 0.21347331902985503, 0.18122368702083244, 0.16659548130814913, 0.16102264166632024, 0.1587149618489265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21347331902985503, 0.18122368702083244, 0.16659548130814913, 0.16102264166632024, 0.1587149618489265, 0.15688620568826436] ***
*** starting iteration: 6; err: [Inf, 0.21347331902985503, 0.18122368702083244, 0.16659548130814913, 0.16102264166632024, 0.1587149618489265, 0.15688620568826436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21347331902985503, 0.18122368702083244, 0.16659548130814913, 0.16102264166632024, 0.1587149618489265, 0.15688620568826436, 0.1559068031501383] ***
*** finished computation of 7 references, err: [Inf, 0.21347331902985503, 0.18122368702083244, 0.16659548130814913, 0.16102264166632024, 0.1587149618489265, 0.15688620568826436, 0.1559068031501383] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [74, 21, 0]]
** centroid: 1, normalized-entropy: 0.762084924805724, [(1, 74), (2, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [4, 81, 0]]
** centroid: 4, normalized-entropy: 0.2737691686829417, [(1, 4), (2, 81)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [10, 79, 0]]
** centroid: 5, normalized-entropy: 0.5069923067544342, [(1, 10), (2, 79)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [105, 19, 0]]
** centroid: 6, normalized-entropy: 0.6178543578838833, [(1, 105), (2, 19)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 42, 23]]
** centroid: 7, normalized-entropy: 0.937456170782005, [(2, 42), (3, 23)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.37051736146722664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37051736146722664, 0.19533834177051215] ***
*** starting iteration: 2; err: [Inf, 0.37051736146722664, 0.19533834177051215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37051736146722664, 0.19533834177051215, 0.17225028063565762] ***
*** starting iteration: 3; err: [Inf, 0.37051736146722664, 0.19533834177051215, 0.17225028063565762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37051736146722664, 0.19533834177051215, 0.17225028063565762, 0.16295247492443274] ***
*** starting iteration: 4; err: [Inf, 0.37051736146722664, 0.19533834177051215, 0.17225028063565762, 0.16295247492443274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37051736146722664, 0.19533834177051215, 0.17225028063565762, 0.16295247492443274, 0.15754639262241357] ***
*** starting iteration: 5; err: [Inf, 0.37051736146722664, 0.19533834177051215, 0.17225028063565762, 0.16295247492443274, 0.15754639262241357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37051736146722664, 0.19533834177051215, 0.17225028063565762, 0.16295247492443274, 0.15754639262241357, 0.15487151620092746] ***
*** starting iteration: 6; err: [Inf, 0.37051736146722664, 0.19533834177051215, 0.17225028063565762, 0.16295247492443274, 0.15754639262241357, 0.15487151620092746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37051736146722664, 0.19533834177051215, 0.17225028063565762, 0.16295247492443274, 0.15754639262241357, 0.15487151620092746, 0.15373288199230134] ***
*** starting iteration: 7; err: [Inf, 0.37051736146722664, 0.19533834177051215, 0.17225028063565762, 0.16295247492443274, 0.15754639262241357, 0.15487151620092746, 0.15373288199230134] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37051736146722664, 0.19533834177051215, 0.17225028063565762, 0.16295247492443274, 0.15754639262241357, 0.15487151620092746, 0.15373288199230134, 0.15303656623895648] ***
*** finished computation of 7 references, err: [Inf, 0.37051736146722664, 0.19533834177051215, 0.17225028063565762, 0.16295247492443274, 0.15754639262241357, 0.15487151620092746, 0.15373288199230134, 0.15303656623895648] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 85, 25]]
** centroid: 1, normalized-entropy: 0.7732266742876346, [(2, 85), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [2, 103, 0]]
** centroid: 2, normalized-entropy: 0.1360592862387751, [(1, 2), (2, 103)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [26, 9, 0]]
** centroid: 3, normalized-entropy: 0.8224042259549892, [(1, 26), (2, 9)]
*** center 4: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [110, 44, 0]]
** centroid: 6, normalized-entropy: 0.8631205685666311, [(1, 110), (2, 44)]
*** center 7: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22562513115007368] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22562513115007368, 0.17948702963647142] ***
*** starting iteration: 2; err: [Inf, 0.22562513115007368, 0.17948702963647142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22562513115007368, 0.17948702963647142, 0.16696498414705405] ***
*** starting iteration: 3; err: [Inf, 0.22562513115007368, 0.17948702963647142, 0.16696498414705405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22562513115007368, 0.17948702963647142, 0.16696498414705405, 0.16190722626054482] ***
*** starting iteration: 4; err: [Inf, 0.22562513115007368, 0.17948702963647142, 0.16696498414705405, 0.16190722626054482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22562513115007368, 0.17948702963647142, 0.16696498414705405, 0.16190722626054482, 0.15961167051399622] ***
*** starting iteration: 5; err: [Inf, 0.22562513115007368, 0.17948702963647142, 0.16696498414705405, 0.16190722626054482, 0.15961167051399622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22562513115007368, 0.17948702963647142, 0.16696498414705405, 0.16190722626054482, 0.15961167051399622, 0.15782648670198074] ***
*** starting iteration: 6; err: [Inf, 0.22562513115007368, 0.17948702963647142, 0.16696498414705405, 0.16190722626054482, 0.15961167051399622, 0.15782648670198074] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22562513115007368, 0.17948702963647142, 0.16696498414705405, 0.16190722626054482, 0.15961167051399622, 0.15782648670198074, 0.15504341662583546] ***
*** starting iteration: 7; err: [Inf, 0.22562513115007368, 0.17948702963647142, 0.16696498414705405, 0.16190722626054482, 0.15961167051399622, 0.15782648670198074, 0.15504341662583546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22562513115007368, 0.17948702963647142, 0.16696498414705405, 0.16190722626054482, 0.15961167051399622, 0.15782648670198074, 0.15504341662583546, 0.15170632780011536] ***
*** starting iteration: 8; err: [Inf, 0.22562513115007368, 0.17948702963647142, 0.16696498414705405, 0.16190722626054482, 0.15961167051399622, 0.15782648670198074, 0.15504341662583546, 0.15170632780011536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22562513115007368, 0.17948702963647142, 0.16696498414705405, 0.16190722626054482, 0.15961167051399622, 0.15782648670198074, 0.15504341662583546, 0.15170632780011536, 0.14905206935488616] ***
*** starting iteration: 9; err: [Inf, 0.22562513115007368, 0.17948702963647142, 0.16696498414705405, 0.16190722626054482, 0.15961167051399622, 0.15782648670198074, 0.15504341662583546, 0.15170632780011536, 0.14905206935488616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22562513115007368, 0.17948702963647142, 0.16696498414705405, 0.16190722626054482, 0.15961167051399622, 0.15782648670198074, 0.15504341662583546, 0.15170632780011536, 0.14905206935488616, 0.14741773383846896] ***
*** starting iteration: 10; err: [Inf, 0.22562513115007368, 0.17948702963647142, 0.16696498414705405, 0.16190722626054482, 0.15961167051399622, 0.15782648670198074, 0.15504341662583546, 0.15170632780011536, 0.14905206935488616, 0.14741773383846896] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22562513115007368, 0.17948702963647142, 0.16696498414705405, 0.16190722626054482, 0.15961167051399622, 0.15782648670198074, 0.15504341662583546, 0.15170632780011536, 0.14905206935488616, 0.14741773383846896, 0.1461665563339806] ***
*** finished computation of 7 references, err: [Inf, 0.22562513115007368, 0.17948702963647142, 0.16696498414705405, 0.16190722626054482, 0.15961167051399622, 0.15782648670198074, 0.15504341662583546, 0.15170632780011536, 0.14905206935488616, 0.14741773383846896, 0.1461665563339806] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [119, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [40, 40, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 40), (2, 40)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [51, 45, 0]]
** centroid: 6, normalized-entropy: 0.9971803988942641, [(1, 51), (2, 45)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 81, 24]]
** centroid: 7, normalized-entropy: 0.775512658133148, [(2, 81), (3, 24)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 18)
[0.9560218901536267, 0.936031840223457, 0.9329928731126337, 0.9310118501735268, 0.928029826233419, 0.9219938501375627, 0.9199768630906355, 0.9139828451205697, 0.9090108072144, 0.896989804175433, 0.8959528390666116, 0.8949907991824161, 0.886994779210348, 0.8820317323311335, 0.8809887732043421, 0.8470026913140686, 0.8389946833060605, 0.7870055684426941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 1) => 0.9560218901536267
finished with 18
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9560218901536267, 0.936031840223457, 0.9329928731126337, 0.9310118501735268, 0.928029826233419, 0.9219938501375627, 0.9199768630906355, 0.9139828451205697, 0.9090108072144, 0.896989804175433, 0.8959528390666116, 0.8949907991824161, 0.886994779210348, 0.8820317323311335, 0.8809887732043421, 0.8470026913140686, 0.8389946833060605, 0.7870055684426941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 1) => 0.9560218901536267
finished with 18
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9560218901536267, 0.936031840223457, 0.9329928731126337, 0.9310118501735268, 0.928029826233419, 0.9219938501375627, 0.9199768630906355, 0.9139828451205697, 0.9090108072144, 0.896989804175433, 0.8959528390666116, 0.8949907991824161, 0.886994779210348, 0.8820317323311335, 0.8809887732043421, 0.8470026913140686, 0.8389946833060605, 0.7870055684426941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 1) => 0.9560218901536267
finished with 18
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.26136672199051825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26136672199051825, 0.18349196712113916] ***
*** finished computation of 7 references, err: [Inf, 0.26136672199051825, 0.18349196712113916] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [125, 143, 0]]
** centroid: 1, normalized-entropy: 0.9967435309724346, [(1, 125), (2, 143)]
*** center 2: selecting labels [1] (freq >= 1) [from [309, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [34, 64, 0]]
** centroid: 3, normalized-entropy: 0.9313043685793762, [(1, 34), (2, 64)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [21, 20, 0]]
** centroid: 4, normalized-entropy: 0.9995708393473225, [(1, 21), (2, 20)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 104, 36]]
** centroid: 5, normalized-entropy: 0.8224042259549892, [(2, 104), (3, 36)]
*** center 6: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 31, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18725401139725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18725401139725, 0.16169505164399742] ***
*** finished computation of 7 references, err: [Inf, 0.18725401139725, 0.16169505164399742] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [99, 5, 0]]
** centroid: 1, normalized-entropy: 0.2781710079264946, [(1, 99), (2, 5)]
*** center 2: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [25, 43, 0]]
** centroid: 4, normalized-entropy: 0.9488482942421287, [(1, 25), (2, 43)]
*** center 5: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 6: selecting labels [1, 2, 3] (freq >= 1) [from [3, 67, 4]]
** centroid: 6, normalized-entropy: 0.3437431977384069, [(1, 3), (2, 67), (3, 4)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 73, 15]]
** centroid: 7, normalized-entropy: 0.6587435307694671, [(2, 73), (3, 15)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.312973853237927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.312973853237927, 0.1919197426047176] ***
*** finished computation of 7 references, err: [Inf, 0.312973853237927, 0.1919197426047176] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [119, 23, 0]]
** centroid: 1, normalized-entropy: 0.6390060010331569, [(1, 119), (2, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 140, 11]]
** centroid: 3, normalized-entropy: 0.37646189046875056, [(2, 140), (3, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [47, 21, 0]]
** centroid: 4, normalized-entropy: 0.8918107543797084, [(1, 47), (2, 21)]
*** center 5: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [53, 5, 0]]
** centroid: 7, normalized-entropy: 0.4236805715709106, [(1, 53), (2, 5)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2134294920992106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2134294920992106, 0.16358436400140636] ***
*** finished computation of 7 references, err: [Inf, 0.2134294920992106, 0.16358436400140636] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [81, 34, 0]]
** centroid: 1, normalized-entropy: 0.8759110349777134, [(1, 81), (2, 34)]
*** center 2: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [5, 47, 0]]
** centroid: 3, normalized-entropy: 0.45668363153944286, [(1, 5), (2, 47)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 43, 20]]
** centroid: 4, normalized-entropy: 0.9015982354056711, [(2, 43), (3, 20)]
*** center 5: selecting labels [1] (freq >= 1) [from [130, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 15, 0]]
** centroid: 6, normalized-entropy: 0.954434002924965, [(1, 9), (2, 15)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [10, 55, 0]]
** centroid: 7, normalized-entropy: 0.6193821946787638, [(1, 10), (2, 55)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20371765196323394] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20371765196323394, 0.1631903405394405] ***
*** finished computation of 7 references, err: [Inf, 0.20371765196323394, 0.1631903405394405] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [81, 3, 0]]
** centroid: 1, normalized-entropy: 0.2222848306856879, [(1, 81), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 44, 0]]
** centroid: 2, normalized-entropy: 0.9895875212220558, [(1, 56), (2, 44)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [26, 7, 0]]
** centroid: 3, normalized-entropy: 0.7455178428108284, [(1, 26), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [79, 35, 0]]
** centroid: 4, normalized-entropy: 0.8897006746992595, [(1, 79), (2, 35)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 54, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 44, 18]]
** centroid: 7, normalized-entropy: 0.8691375806126381, [(2, 44), (3, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28023069651797416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28023069651797416, 0.1743246238604188] ***
*** finished computation of 7 references, err: [Inf, 0.28023069651797416, 0.1743246238604188] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 36, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [40, 16, 0]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(1, 40), (2, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [126, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [27, 37, 0]]
** centroid: 4, normalized-entropy: 0.9823166080205502, [(1, 27), (2, 37)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [94, 55, 0]]
** centroid: 5, normalized-entropy: 0.9499998204517307, [(1, 94), (2, 55)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 31, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 16, 22]]
** centroid: 7, normalized-entropy: 0.9819407868640977, [(2, 16), (3, 22)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19567724315170199] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19567724315170199, 0.17000496491510422] ***
*** finished computation of 7 references, err: [Inf, 0.19567724315170199, 0.17000496491510422] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [43, 19, 0]]
** centroid: 1, normalized-entropy: 0.8890349038123858, [(1, 43), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [91, 11, 0]]
** centroid: 2, normalized-entropy: 0.493375733509813, [(1, 91), (2, 11)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [43, 34, 0]]
** centroid: 3, normalized-entropy: 0.9901226308935799, [(1, 43), (2, 34)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [44, 13, 0]]
** centroid: 4, normalized-entropy: 0.7746319868686841, [(1, 44), (2, 13)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 51, 8]]
** centroid: 5, normalized-entropy: 0.572580465623769, [(2, 51), (3, 8)]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 53, 13]]
** centroid: 7, normalized-entropy: 0.7158259310602146, [(2, 53), (3, 13)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2627249583285302] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2627249583285302, 0.16670686841011048] ***
*** finished computation of 7 references, err: [Inf, 0.2627249583285302, 0.16670686841011048] ***
*** center 1: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 92, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [72, 1, 0]]
** centroid: 3, normalized-entropy: 0.1044190780054077, [(1, 72), (2, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 79, 11]]
** centroid: 4, normalized-entropy: 0.5357150195407704, [(2, 79), (3, 11)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [104, 15, 0]]
** centroid: 5, normalized-entropy: 0.5465060858222177, [(1, 104), (2, 15)]
*** center 6: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2508411636613309] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2508411636613309, 0.17388790655881167] ***
*** finished computation of 7 references, err: [Inf, 0.2508411636613309, 0.17388790655881167] ***
*** center 1: selecting labels [1] (freq >= 1) [from [130, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [78, 20, 0]]
** centroid: 2, normalized-entropy: 0.7300166301457938, [(1, 78), (2, 20)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 70, 22]]
** centroid: 3, normalized-entropy: 0.7935912300117066, [(2, 70), (3, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [41, 25, 0]]
** centroid: 4, normalized-entropy: 0.9571814385446724, [(1, 41), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [1, 35, 0]]
** centroid: 5, normalized-entropy: 0.18312206830137262, [(1, 1), (2, 35)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [39, 15, 0]]
** centroid: 6, normalized-entropy: 0.8524051786494784, [(1, 39), (2, 15)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [18, 6, 0]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(1, 18), (2, 6)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22514757887180895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22514757887180895, 0.1783868847079575] ***
*** finished computation of 7 references, err: [Inf, 0.22514757887180895, 0.1783868847079575] ***
*** center 1: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [16, 82, 0]]
** centroid: 3, normalized-entropy: 0.6420642892306891, [(1, 16), (2, 82)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 28, 17]]
** centroid: 4, normalized-entropy: 0.9564574047992596, [(2, 28), (3, 17)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 32, 1]]
** centroid: 5, normalized-entropy: 0.19590927087360496, [(2, 32), (3, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [122, 7, 0]]
** centroid: 6, normalized-entropy: 0.3042393512598793, [(1, 122), (2, 7)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [8, 34, 0]]
** centroid: 7, normalized-entropy: 0.7024665512903904, [(1, 8), (2, 34)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20875018108356744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20875018108356744, 0.1669278992190957] ***
*** finished computation of 7 references, err: [Inf, 0.20875018108356744, 0.1669278992190957] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [55, 16, 0]]
** centroid: 1, normalized-entropy: 0.7698205808588191, [(1, 55), (2, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 31, 0]]
** centroid: 3, normalized-entropy: 0.9218764863469129, [(1, 61), (2, 31)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 33, 1]]
** centroid: 4, normalized-entropy: 0.1914332548141934, [(2, 33), (3, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [90, 46, 0]]
** centroid: 5, normalized-entropy: 0.9231199835423002, [(1, 90), (2, 46)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 22, 12]]
** centroid: 6, normalized-entropy: 0.9366673818775627, [(2, 22), (3, 12)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 31, 2]]
** centroid: 7, normalized-entropy: 0.32984607020714635, [(2, 31), (3, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23986374457692727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23986374457692727, 0.16496169497445226] ***
*** finished computation of 7 references, err: [Inf, 0.23986374457692727, 0.16496169497445226] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [69, 1, 0]]
** centroid: 1, normalized-entropy: 0.10802319526362848, [(1, 69), (2, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 90, 14]]
** centroid: 2, normalized-entropy: 0.40515323440977863, [(1, 1), (2, 90), (3, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [74, 3, 0]]
** centroid: 4, normalized-entropy: 0.23750814382859295, [(1, 74), (2, 3)]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [2, 68, 2]]
** centroid: 5, normalized-entropy: 0.2303518124496706, [(1, 2), (2, 68), (3, 2)]
*** center 6: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [35, 13, 0]]
** centroid: 7, normalized-entropy: 0.842657877202239, [(1, 35), (2, 13)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.217038662802428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.217038662802428, 0.15992257915437222] ***
*** finished computation of 7 references, err: [Inf, 0.217038662802428, 0.15992257915437222] ***
*** center 1: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [55, 5, 0]]
** centroid: 2, normalized-entropy: 0.4138168503036336, [(1, 55), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 51, 20]]
** centroid: 3, normalized-entropy: 0.8577435372751958, [(2, 51), (3, 20)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [20, 49, 0]]
** centroid: 4, normalized-entropy: 0.868533960265235, [(1, 20), (2, 49)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [40, 5, 0]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(1, 40), (2, 5)]
*** center 6: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [7, 71, 0]]
** centroid: 7, normalized-entropy: 0.4356133734874324, [(1, 7), (2, 71)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20381802307721228] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20381802307721228, 0.16645799747016282] ***
*** finished computation of 7 references, err: [Inf, 0.20381802307721228, 0.16645799747016282] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [36, 26, 0]]
** centroid: 1, normalized-entropy: 0.9811522341999134, [(1, 36), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [44, 19, 0]]
** centroid: 2, normalized-entropy: 0.8832225588099292, [(1, 44), (2, 19)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 92, 17]]
** centroid: 3, normalized-entropy: 0.6245644324971011, [(2, 92), (3, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [73, 35, 0]]
** centroid: 4, normalized-entropy: 0.9087569615031438, [(1, 73), (2, 35)]
*** center 5: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2423974552936852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2423974552936852, 0.17797518548648805] ***
*** finished computation of 7 references, err: [Inf, 0.2423974552936852, 0.17797518548648805] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [2, 104, 20]]
** centroid: 1, normalized-entropy: 0.46995742968665005, [(1, 2), (2, 104), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [79, 29, 0]]
** centroid: 3, normalized-entropy: 0.8393307617496655, [(1, 79), (2, 29)]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [33, 53, 0]]
** centroid: 5, normalized-entropy: 0.9606276613221153, [(1, 33), (2, 53)]
*** center 6: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20481365222577005] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20481365222577005, 0.17832452348619698] ***
*** finished computation of 7 references, err: [Inf, 0.20481365222577005, 0.17832452348619698] ***
*** center 1: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 52, 23]]
** centroid: 3, normalized-entropy: 0.8892881527272397, [(2, 52), (3, 23)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [1, 69, 0]]
** centroid: 4, normalized-entropy: 0.10802319526362848, [(1, 1), (2, 69)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 39, 0]]
** centroid: 5, normalized-entropy: 0.9889525767600615, [(1, 50), (2, 39)]
*** center 6: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [21, 17, 0]]
** centroid: 7, normalized-entropy: 0.9919924034538556, [(1, 21), (2, 17)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2815467419177294] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2815467419177294, 0.18684261205606162] ***
*** finished computation of 7 references, err: [Inf, 0.2815467419177294, 0.18684261205606162] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [56, 26, 0]]
** centroid: 1, normalized-entropy: 0.9011701959974223, [(1, 56), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [146, 25, 0]]
** centroid: 2, normalized-entropy: 0.6002455538282918, [(1, 146), (2, 25)]
*** center 3: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 65, 4]]
** centroid: 4, normalized-entropy: 0.3193373865339728, [(2, 65), (3, 4)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 52, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 16, 17]]
** centroid: 6, normalized-entropy: 0.9993375041688846, [(2, 16), (3, 17)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18724611535295843] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18724611535295843, 0.16464991960581393] ***
*** finished computation of 7 references, err: [Inf, 0.18724611535295843, 0.16464991960581393] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [145, 2, 0]]
** centroid: 1, normalized-entropy: 0.10384365060394607, [(1, 145), (2, 2)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 47, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [90, 11, 0]]
** centroid: 3, normalized-entropy: 0.4966221117153493, [(1, 90), (2, 11)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 63, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 21, 20]]
** centroid: 6, normalized-entropy: 0.9995708393473225, [(2, 21), (3, 20)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [37, 31, 0]]
** centroid: 7, normalized-entropy: 0.9943766625699823, [(1, 37), (2, 31)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1963437701854855] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1963437701854855, 0.1578371987864375] ***
*** finished computation of 7 references, err: [Inf, 0.1963437701854855, 0.1578371987864375] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 92, 10]]
** centroid: 2, normalized-entropy: 0.462749058578174, [(2, 92), (3, 10)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [32, 33, 0]]
** centroid: 3, normalized-entropy: 0.9998292601233937, [(1, 32), (2, 33)]
*** center 4: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [66, 29, 0]]
** centroid: 5, normalized-entropy: 0.8876297058429742, [(1, 66), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [27, 9, 0]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(1, 27), (2, 9)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [31, 21, 0]]
** centroid: 7, normalized-entropy: 0.9731560354421095, [(1, 31), (2, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25262099734600635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25262099734600635, 0.19811310187540948] ***
*** finished computation of 7 references, err: [Inf, 0.25262099734600635, 0.19811310187540948] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [9, 26, 0]]
** centroid: 1, normalized-entropy: 0.8224042259549892, [(1, 9), (2, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [52, 102, 14]]
** centroid: 3, normalized-entropy: 0.7946564298213452, [(1, 52), (2, 102), (3, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [12, 67, 3]]
** centroid: 5, normalized-entropy: 0.516414857677495, [(1, 12), (2, 67), (3, 3)]
*** center 6: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2070498389750719] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2070498389750719, 0.16614909863378852] ***
*** finished computation of 7 references, err: [Inf, 0.2070498389750719, 0.16614909863378852] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [1, 83, 0]]
** centroid: 1, normalized-entropy: 0.09317131799548928, [(1, 1), (2, 83)]
*** center 2: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [55, 22, 0]]
** centroid: 4, normalized-entropy: 0.8631205685666311, [(1, 55), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [110, 26, 0]]
** centroid: 5, normalized-entropy: 0.7039260680195971, [(1, 110), (2, 26)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 48, 18]]
** centroid: 6, normalized-entropy: 0.8453509366224364, [(2, 48), (3, 18)]
*** center 7: selecting labels [1] (freq >= 1) [from [26, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2506293616918847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2506293616918847, 0.17660979913920163] ***
*** finished computation of 7 references, err: [Inf, 0.2506293616918847, 0.17660979913920163] ***
*** center 1: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [103, 5, 0]]
** centroid: 2, normalized-entropy: 0.2704505135124657, [(1, 103), (2, 5)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [21, 88, 14]]
** centroid: 3, normalized-entropy: 0.7179142789126455, [(1, 21), (2, 88), (3, 14)]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [6, 88, 2]]
** centroid: 4, normalized-entropy: 0.30374432231436443, [(1, 6), (2, 88), (3, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30658807008992883] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30658807008992883, 0.1768157397797331] ***
*** finished computation of 7 references, err: [Inf, 0.30658807008992883, 0.1768157397797331] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [125, 10, 0]]
** centroid: 1, normalized-entropy: 0.38094658570539014, [(1, 125), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [96, 49, 0]]
** centroid: 2, normalized-entropy: 0.9228250732502712, [(1, 96), (2, 49)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [33, 4, 0]]
** centroid: 3, normalized-entropy: 0.4941829348497886, [(1, 33), (2, 4)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 48, 4]]
** centroid: 4, normalized-entropy: 0.3912435636292556, [(2, 48), (3, 4)]
*** center 5: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 53, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 14, 12]]
** centroid: 7, normalized-entropy: 0.9957274520849256, [(2, 14), (3, 12)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20342459167912602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20342459167912602, 0.16128046388551592] ***
*** finished computation of 7 references, err: [Inf, 0.20342459167912602, 0.16128046388551592] ***
*** center 1: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [18, 58, 0]]
** centroid: 3, normalized-entropy: 0.7897492536625221, [(1, 18), (2, 58)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [62, 14, 0]]
** centroid: 4, normalized-entropy: 0.6892019851173655, [(1, 62), (2, 14)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 77, 14]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(2, 77), (3, 14)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [14, 28, 0]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(1, 14), (2, 28)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [48, 2, 0]]
** centroid: 7, normalized-entropy: 0.24229218908241482, [(1, 48), (2, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23748656558711081] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23748656558711081, 0.1993743606330827] ***
*** finished computation of 7 references, err: [Inf, 0.23748656558711081, 0.1993743606330827] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [29, 113, 15]]
** centroid: 1, normalized-entropy: 0.703629044451667, [(1, 29), (2, 113), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [25, 46, 0]]
** centroid: 3, normalized-entropy: 0.935940714955517, [(1, 25), (2, 46)]
*** center 4: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [21, 4, 0]]
** centroid: 6, normalized-entropy: 0.634309554640566, [(1, 21), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [33, 27, 0]]
** centroid: 7, normalized-entropy: 0.9927744539878083, [(1, 33), (2, 27)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2275343033261597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2275343033261597, 0.1663227401850745] ***
*** finished computation of 7 references, err: [Inf, 0.2275343033261597, 0.1663227401850745] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [71, 58, 0]]
** centroid: 1, normalized-entropy: 0.9926618042431643, [(1, 71), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [65, 27, 0]]
** centroid: 2, normalized-entropy: 0.8731720603476306, [(1, 65), (2, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [52, 3, 0]]
** centroid: 3, normalized-entropy: 0.30540057087920036, [(1, 52), (2, 3)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 78, 20]]
** centroid: 4, normalized-entropy: 0.7300166301457938, [(2, 78), (3, 20)]
*** center 5: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25469959736522285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25469959736522285, 0.17518931660428644] ***
*** finished computation of 7 references, err: [Inf, 0.25469959736522285, 0.17518931660428644] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 59, 15]]
** centroid: 1, normalized-entropy: 0.7273006785144036, [(2, 59), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [29, 66, 0]]
** centroid: 2, normalized-entropy: 0.8876297058429742, [(1, 29), (2, 66)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [9, 45, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 9), (2, 45)]
*** center 4: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [42, 13, 0]]
** centroid: 5, normalized-entropy: 0.7889406572966208, [(1, 42), (2, 13)]
*** center 6: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2576788879837841] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2576788879837841, 0.17724509669840335] ***
*** finished computation of 7 references, err: [Inf, 0.2576788879837841, 0.17724509669840335] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [48, 11, 0]]
** centroid: 1, normalized-entropy: 0.693965967334286, [(1, 48), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [11, 56, 0]]
** centroid: 2, normalized-entropy: 0.6442142137378306, [(1, 11), (2, 56)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [121, 11, 0]]
** centroid: 3, normalized-entropy: 0.4138168503036336, [(1, 121), (2, 11)]
*** center 4: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 112, 18]]
** centroid: 5, normalized-entropy: 0.5801954953637372, [(2, 112), (3, 18)]
*** center 6: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3127790181180462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3127790181180462, 0.17667015909217298] ***
*** finished computation of 7 references, err: [Inf, 0.3127790181180462, 0.17667015909217298] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [46, 11, 0]]
** centroid: 1, normalized-entropy: 0.7076690004167966, [(1, 46), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [31, 35, 0]]
** centroid: 2, normalized-entropy: 0.9973487979180449, [(1, 31), (2, 35)]
*** center 3: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 114, 16]]
** centroid: 4, normalized-entropy: 0.5381411852224502, [(2, 114), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [82, 30, 0]]
** centroid: 5, normalized-entropy: 0.8383729377099398, [(1, 82), (2, 30)]
*** center 6: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2598794343993068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2598794343993068, 0.17437378664594144] ***
*** finished computation of 7 references, err: [Inf, 0.2598794343993068, 0.17437378664594144] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [63, 2, 0]]
** centroid: 1, normalized-entropy: 0.19823496409776642, [(1, 63), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 88, 18]]
** centroid: 2, normalized-entropy: 0.6572729784684466, [(2, 88), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [110, 57, 0]]
** centroid: 3, normalized-entropy: 0.9260737577728375, [(1, 110), (2, 57)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [20, 37, 0]]
** centroid: 4, normalized-entropy: 0.9348490242345946, [(1, 20), (2, 37)]
*** center 5: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [21, 2, 0]]
** centroid: 7, normalized-entropy: 0.42622865699814483, [(1, 21), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3133286477709189] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3133286477709189, 0.2011832665563561] ***
*** finished computation of 7 references, err: [Inf, 0.3133286477709189, 0.2011832665563561] ***
*** center 1: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [169, 3, 0]]
** centroid: 2, normalized-entropy: 0.1268257300866759, [(1, 169), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [15, 4, 0]]
** centroid: 3, normalized-entropy: 0.7424875695421234, [(1, 15), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [5, 74, 0]]
** centroid: 4, normalized-entropy: 0.340373285759646, [(1, 5), (2, 74)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [51, 67, 0]]
** centroid: 5, normalized-entropy: 0.9866967086735614, [(1, 51), (2, 67)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 39, 18]]
** centroid: 6, normalized-entropy: 0.8997437586982626, [(2, 39), (3, 18)]
finished with 9 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 362,3 => 36,1 => 602), Dict(2 => 363,3 => 37,1 => 600))
[ Info: ===== scores for single classifier: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.967089072543618,"macro_f1":0.8980255784813571,"accuracy":0.961,"class_f1":{"2":0.9445234708392602,"3":0.7628865979381444,"1":0.9866666666666668},"class_precision":{"2":0.9764705882352941,"3":0.6166666666666667,"1":0.9866666666666667},"class_recall":{"2":0.9146005509641874,"3":1.0,"1":0.9866666666666667}}
[ Info: ===== scores for 1: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9339854317127045,"macro_f1":0.9568102469717333,"accuracy":0.979,"class_f1":{"2":0.9711141678129299,"3":0.911764705882353,"1":0.9875518672199171},"class_precision":{"2":0.9697802197802198,"3":1.0,"1":0.9834710743801653},"class_recall":{"2":0.9724517906336089,"3":0.8378378378378378,"1":0.9916666666666667}}
[ Info: ===== scores for 5: {"micro_f1":0.9810000000000001,"precision":0.981,"recall":0.981,"macro_recall":0.9689103566376294,"macro_f1":0.9613344554622297,"accuracy":0.981,"class_f1":{"2":0.9737931034482759,"3":0.9210526315789475,"1":0.9891576313594662},"class_precision":{"2":0.9751381215469613,"3":0.8974358974358975,"1":0.989983305509182},"class_recall":{"2":0.9724517906336089,"3":0.9459459459459459,"1":0.9883333333333333}}
[ Info: ===== scores for 7: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9593457920730648,"macro_f1":0.9516635084578327,"accuracy":0.979,"class_f1":{"2":0.9711141678129299,"3":0.8947368421052632,"1":0.9891395154553049},"class_precision":{"2":0.9697802197802198,"3":0.8717948717948718,"1":0.9916247906197655},"class_recall":{"2":0.9724517906336089,"3":0.918918918918919,"1":0.9866666666666667}}
[ Info: ===== scores for 9: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9758899808899809,"macro_f1":0.9569070674010609,"accuracy":0.979,"class_f1":{"2":0.9710344827586207,"3":0.9113924050632912,"1":0.9882943143812708},"class_precision":{"2":0.9723756906077348,"3":0.8571428571428571,"1":0.9916107382550335},"class_recall":{"2":0.9696969696969697,"3":0.972972972972973,"1":0.985}}
[ Info: ===== scores for 11: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9766154170699627,"macro_f1":0.9534260727748927,"accuracy":0.979,"class_f1":{"2":0.9711934156378601,"3":0.9,"1":0.9890848026868179},"class_precision":{"2":0.9672131147540983,"3":0.8372093023255814,"1":0.9966159052453468},"class_recall":{"2":0.9752066115702479,"3":0.972972972972973,"1":0.9816666666666667}}
(score = 0.98, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.983, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.983, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.981, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.981, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.984, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.984, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.984,"k":7,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.984,"precision":0.984,"recall":0.984,"macro_recall":0.970577023304296,"macro_f1":0.9598121630223225,"accuracy":0.984,"class_f1":{"2":0.9778393351800554,"3":0.9090909090909091,"1":0.9925062447960034},"class_precision":{"2":0.9832869080779945,"3":0.875,"1":0.9916805324459235},"class_recall":{"2":0.9724517906336089,"3":0.9459459459459459,"1":0.9933333333333333}}
Test Summary: | Pass  Total
AKNC          |    8      8
[15, 6, 1, 2, 2, 12, 16, 3, 1, 5, 2, 1, 2, 5, 6, 15, 4, 7, 5, 3, 41, 19, 8, 5, 28, 9, 13, 2, 8, 9, 3, 15, 43, 19, 11, 2, 3, 4, 6, 5, 12, 12, 5, 4, 2, 14, 42, 129, 16, 19, 20, 12, 85, 4, 4, 25, 11, 9, 13, 15, 8, 55, 6, 19, 22, 9, 6, 7, 5, 8, 12, 112, 4, 14, 87, 1, 5, 4, 16, 58, 251, 5, 3, 16, 1, 55, 17, 2, 17, 19, 17, 3, 13, 5, 49, 24, 56, 6, 49, 7, 36, 18, 12, 4, 32, 53, 137, 25, 11, 21, 55, 9, 5, 11, 4, 10, 64, 17, 10, 5, 4, 33, 30, 24, 1028, 23, 22, 4, 6, 21, 12, 3, 5, 25, 11, 3, 44, 9, 4, 26, 6, 35, 37, 27, 21, 58, 7, 10, 15, 41, 113, 11, 9, 11, 18, 35, 52, 11, 25, 48, 27, 36, 86, 18, 14, 3, 40, 115, 7, 125, 25, 51, 109, 6, 5, 1, 22, 11, 13, 4, 28, 8, 14, 37, 7, 29, 47, 13, 48, 24, 35, 7, 99, 10, 24, 5, 245, 21, 21, 9, 19, 4, 17, 41, 108, 42, 50, 25, 108, 66, 12, 7, 11, 52, 3, 13, 55, 4, 33, 3, 20, 32, 30, 11, 7, 244, 10, 13, 171, 9, 73, 3, 36, 17, 7, 12, 27, 250, 12, 16, 10, 7, 117, 36, 4, 17, 23, 35, 6, 19, 12, 257, 13, 45, 56, 26, 123, 13, 278, 38, 7, 6, 22, 45, 17, 7, 39, 6, 47, 4, 2, 11, 40, 6, 40, 4, 12, 15, 124, 19, 346, 5, 12, 44, 60, 24, 31, 63, 17, 13, 12, 41, 5, 6, 40, 120, 21, 39, 5, 8]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6369999999999998, speedup = 0.28623163528144685, eval_ratio = 0.082915)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3896453373015875,"recall":0.38628472222222243,"f1":null,"seconds":0.00017150118947029114,"exhaustive_search_seconds":0.00035889074206352234,"evaluations":495.109375,"distances_sum":1764.5473267140117}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5468749999999999,"recall":0.5468749999999999,"f1":null,"seconds":0.0002706144005060196,"exhaustive_search_seconds":0.00035889074206352234,"evaluations":645.515625,"distances_sum":1665.5561973563013}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6475694444444438,"recall":0.6475694444444438,"f1":null,"seconds":0.00037617795169353485,"exhaustive_search_seconds":0.00035889074206352234,"evaluations":790.3046875,"distances_sum":1616.6955589345248}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.724826388888888,"recall":0.724826388888888,"f1":0.724826388888888,"seconds":0.0004500448703765869,"exhaustive_search_seconds":0.00035889074206352234,"evaluations":899.1171875,"distances_sum":1584.7891305904168}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7786458333333323,"recall":0.7786458333333323,"f1":0.7786458333333323,"seconds":0.0005342122167348862,"exhaustive_search_seconds":0.00035889074206352234,"evaluations":1014.890625,"distances_sum":1565.0573960728566}
KCenters.DeloneInvIndex> reached performance {"precision":0.81423611111111,"recall":0.81423611111111,"f1":0.81423611111111,"seconds":0.0007764417678117752,"exhaustive_search_seconds":0.00035889074206352234,"evaluations":1117.7421875,"distances_sum":1552.8245169481456}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.818, speedup = 0.5378889818730115, eval_ratio = 0.115427)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
