Julia Version 1.5.0-DEV.633
Commit 07b72375e2 (2020-04-15 15:23 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed InvertedIndices ───────────── v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed TableTraits ───────────────── v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed JSON ──────────────────────── v0.21.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataPattern ─────────────── v0.5.1
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataValueInterfaces ───────── v1.0.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed Reexport ──────────────────── v0.2.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataStructures ────────────── v0.17.12
  Installed MLDataUtils ───────────────── v0.5.1
  Installed StatsBase ─────────────────── v0.32.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataAPI ───────────────────── v1.1.0
  Installed OrderedCollections ────────── v1.1.0
  Installed Parsers ───────────────────── v1.0.1
  Installed Compat ────────────────────── v3.8.0
  Installed Tables ────────────────────── v1.0.4
  Installed DataFrames ────────────────── v0.20.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.12
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.1
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_wN5xEP/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_wN5xEP/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.12
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.1
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.932025450070699
[ Info: 0.8326150393486023
[ Info: 0.5544419614970684
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32982491600016756
mean(cdnet.distances) = 0.34470244583984216
mean(crand.distances) = 0.3297392368565003
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6611328125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6611328125,"f1":0.7856393606393615,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":7.9296875,"distances_sum":1816.8880533751822}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8533430111555119,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.3203125,"distances_sum":2139.1257177871175}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2080078125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2080078125,"f1":null,"seconds":3.3266842365264893e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":5.578125,"distances_sum":566.1268878742304}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7568359375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7568359375,"f1":0.8533430111555119,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.3203125,"distances_sum":2139.1257177871175}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9598843864468867,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.9375,"distances_sum":2880.0130522912286}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9568853021978028,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.796875,"distances_sum":2877.6399131660833}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8641379453879461,"seconds":4.92483377456665e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.3515625,"distances_sum":2247.155694236939}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9598843864468867,"seconds":5.809590220451355e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.9375,"distances_sum":2880.0130522912286}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9749255952380956,"seconds":6.062909960746765e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.9375,"distances_sum":2997.2028840800103}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9679716117216123,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.90625,"distances_sum":2959.8409031990163}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9749255952380956,"seconds":6.062909960746765e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.9375,"distances_sum":2997.2028840800103}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9749255952380956,"seconds":6.062909960746765e-6,"exhaustive_search_seconds":9.98377799987793e-7,"evaluations":8.9375,"distances_sum":2997.2028840800103}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1904296875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1904296875,"f1":null,"seconds":3.378838300704956e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":5.5,"distances_sum":503.8691953792353}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8907082500832508,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.6953125,"distances_sum":2167.7365064590135}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.814453125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.814453125,"f1":0.8907082500832508,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.6953125,"distances_sum":2167.7365064590135}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9275417291042298,"seconds":5.8785080909729e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.8046875,"distances_sum":2446.1868050839016}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.961498397435898,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.875,"distances_sum":2673.0253189545333}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9227106227106233,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.78125,"distances_sum":2376.07487851891}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.961498397435898,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.875,"distances_sum":2673.0253189545333}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":10,"bsize":13}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9806375915750918,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.9765625,"distances_sum":2784.2270554816196}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":10,"bsize":13},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9806375915750918,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.9765625,"distances_sum":2784.2270554816196}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":10,"bsize":13},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9806375915750918,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.6316771507263184e-6,"evaluations":8.9765625,"distances_sum":2784.2270554816196}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.626953125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.626953125,"f1":0.7582297910422918,"seconds":4.870817065238953e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.4453125,"distances_sum":1565.2571353493558}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.626953125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.626953125,"f1":0.7582297910422918,"seconds":4.870817065238953e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.4453125,"distances_sum":1565.2571353493558}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8854884698634706,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.140625,"distances_sum":2180.5156386918443}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9395947802197806,"seconds":5.95487654209137e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.65625,"distances_sum":2451.5265352939377}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.896484375,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9395947802197806,"seconds":5.95487654209137e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.65625,"distances_sum":2451.5265352939377}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9687728937728943,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.875,"distances_sum":2636.1444827182436}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9669299450549452,"seconds":6.0033053159713745e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.890625,"distances_sum":2611.4040488982755}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.973162774725275,"seconds":6.295740604400635e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.875,"distances_sum":2681.2687336803265}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9462912087912093,"seconds":6.888061761856079e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.7265625,"distances_sum":2481.714167115368}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9548248626373631,"seconds":6.077811121940613e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.78125,"distances_sum":2556.4574930503945}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.973162774725275,"seconds":6.295740604400635e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.875,"distances_sum":2681.2687336803265}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.973162774725275,"seconds":6.295740604400635e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.875,"distances_sum":2681.2687336803265}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7961673742923749,"seconds":4.723668098449707e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.6640625,"distances_sum":1600.1190635238243}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3994140625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3994140625,"f1":null,"seconds":3.7103891372680664e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":6.2421875,"distances_sum":874.3702078222173}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6796875,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6796875,"f1":0.7961673742923749,"seconds":4.723668098449707e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.6640625,"distances_sum":1600.1190635238243}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8871545121545129,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.5859375,"distances_sum":1974.573533904447}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9322490009990017,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.796875,"distances_sum":2272.338232189537}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8484047202797209,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.25,"distances_sum":1802.7962866305577}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6962890625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6962890625,"f1":0.8099336427461437,"seconds":4.772096872329712e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.6171875,"distances_sum":1626.551774971449}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9102881493506498,"seconds":5.587935447692871e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.65625,"distances_sum":2098.395589639444}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.9322490009990017,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.796875,"distances_sum":2272.338232189537}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9611294955044958,"seconds":6.206333637237549e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.8984375,"distances_sum":2422.0534352355185}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9559180402930407,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.8828125,"distances_sum":2403.8779795717096}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9675423534798536,"seconds":6.323680281639099e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.890625,"distances_sum":2488.115863794794}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9448546245421252,"seconds":6.1802566051483154e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.8203125,"distances_sum":2348.567479187709}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9467719780219788,"seconds":5.5301934480667114e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.8359375,"distances_sum":2352.7755811496863}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9620421245421253,"seconds":6.0889869928359985e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.8671875,"distances_sum":2472.2953381984057}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9675423534798536,"seconds":6.323680281639099e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.890625,"distances_sum":2488.115863794794}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9675423534798536,"seconds":6.323680281639099e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.890625,"distances_sum":2488.115863794794}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.322265625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.322265625,"f1":null,"seconds":3.3602118492126465e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":5.0859375,"distances_sum":808.0297471402806}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1337890625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1337890625,"f1":null,"seconds":2.9634684324264526e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":4.265625,"distances_sum":355.46532849397136}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5029296875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5029296875,"f1":null,"seconds":4.064291715621948e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.2421875,"distances_sum":1215.6421202730858}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.84497845904096,"seconds":5.17629086971283e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.953125,"distances_sum":1858.2198586443799}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.74609375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.74609375,"f1":0.84497845904096,"seconds":5.17629086971283e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.953125,"distances_sum":1858.2198586443799}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9201095779220787,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.578125,"distances_sum":2283.277545126316}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9620764652014655,"seconds":6.3087791204452515e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.796875,"distances_sum":2566.3629247921235}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9106570512820522,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.5234375,"distances_sum":2244.555766171848}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8785272019647029,"seconds":5.245208740234375e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.09375,"distances_sum":2067.4003763950036}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9620764652014655,"seconds":6.3087791204452515e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.796875,"distances_sum":2566.3629247921235}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9707818223443228,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8828125,"distances_sum":2603.885842016476}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9633241758241763,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.828125,"distances_sum":2553.214549073273}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9707818223443228,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8828125,"distances_sum":2603.885842016476}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9707818223443228,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8828125,"distances_sum":2603.885842016476}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.390625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.390625,"f1":null,"seconds":3.7811696529388428e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":5.796875,"distances_sum":926.6209146620633}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.787100226162727,"seconds":4.7869980335235596e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":7.671875,"distances_sum":1628.0762391695253}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.16015625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.16015625,"f1":null,"seconds":3.209337592124939e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":4.796875,"distances_sum":378.16218949101386}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1689453125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1689453125,"f1":null,"seconds":3.3620744943618774e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":4.90625,"distances_sum":410.91162810509286}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6650390625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6650390625,"f1":0.787100226162727,"seconds":4.7869980335235596e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":7.671875,"distances_sum":1628.0762391695253}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7255859375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7255859375,"f1":0.8316230644355652,"seconds":5.401670932769775e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":7.9609375,"distances_sum":1801.5209523598226}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.7916893870018878,"seconds":4.930421710014343e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":7.5859375,"distances_sum":1647.7225186369865}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7314453125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7314453125,"f1":0.8368142274392282,"seconds":3.563240170478821e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":7.8671875,"distances_sum":1829.698161651275}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7314453125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7314453125,"f1":0.8368142274392282,"seconds":3.563240170478821e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":7.8671875,"distances_sum":1829.698161651275}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.92548076923077,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.59375,"distances_sum":2279.6642390934844}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.9022467116217122,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.5546875,"distances_sum":2122.4551523949276}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.846034174159175,"seconds":5.088746547698975e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":7.984375,"distances_sum":1851.8909937294147}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8968952922077928,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.5390625,"distances_sum":2057.7467409632454}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9566277472527478,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.8984375,"distances_sum":2459.685996639681}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9492819680319684,"seconds":6.198883056640625e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.78125,"distances_sum":2432.9497849896848}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.7421875,"f1":0.845126748251749,"seconds":5.280598998069763e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":7.90625,"distances_sum":1899.007452417131}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9308550824175829,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.7265625,"distances_sum":2296.9963588559417}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":11,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8938244047619056,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.546875,"distances_sum":2059.204298571547}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9566277472527478,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.8984375,"distances_sum":2459.685996639681}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9228515625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9566277472527478,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.5944242477416992e-6,"evaluations":8.8984375,"distances_sum":2459.685996639681}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.244140625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.244140625,"f1":null,"seconds":3.689900040626526e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":6.203125,"distances_sum":463.343876280896}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.790199904262405,"seconds":4.652887582778931e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":7.7265625,"distances_sum":1346.9928593415814}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.66796875,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.66796875,"f1":0.790199904262405,"seconds":4.652887582778931e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":7.7265625,"distances_sum":1346.9928593415814}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9517399267399271,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.90625,"distances_sum":2130.6087106957248}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9517399267399271,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.90625,"distances_sum":2130.6087106957248}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9755608974358976,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.9609375,"distances_sum":2291.0425801622173}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9755608974358976,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.9609375,"distances_sum":2291.0425801622173}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9755608974358976,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":1.0710209608078003e-6,"evaluations":8.9609375,"distances_sum":2291.0425801622173}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41796875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.41796875,"f1":null,"seconds":3.8780272006988525e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":6.2109375,"distances_sum":818.4905614099275}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7099609375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7099609375,"f1":0.8190843878343885,"seconds":4.908069968223572e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":7.6015625,"distances_sum":1534.596647286805}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7099609375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.7099609375,"f1":0.8190843878343885,"seconds":4.908069968223572e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":7.6015625,"distances_sum":1534.596647286805}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.81640625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.81640625,"f1":0.8934955669330675,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.140625,"distances_sum":1853.100399646154}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9031510156510164,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.1875,"distances_sum":1936.0840380496645}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8629193722943731,"seconds":5.319714546203613e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":7.703125,"distances_sum":1768.4869383652092}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8924544205794214,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.0546875,"distances_sum":1899.6642154876422}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8996139277389287,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.1640625,"distances_sum":1906.110291405559}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8693832209457218,"seconds":3.5744160413742065e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":7.828125,"distances_sum":1751.4683904516294}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7138671875, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.7138671875,"f1":0.8224858474858482,"seconds":3.164634108543396e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":7.515625,"distances_sum":1536.0406792990464}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8369140625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8369140625,"f1":0.9031510156510164,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.1875,"distances_sum":1936.0840380496645}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.948317307692308,"seconds":3.941357135772705e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.6796875,"distances_sum":2247.659234396157}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.967931547619048,"seconds":3.859400749206543e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.921875,"distances_sum":2345.822262242168}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":11,"bsize":8}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9330471611721619,"seconds":3.807246685028076e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.65625,"distances_sum":2181.020618588995}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9464915293040299,"seconds":5.455687642097473e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.796875,"distances_sum":2227.581338475298}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.943498168498169,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.625,"distances_sum":2231.6647091440714}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9266025641025649,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.609375,"distances_sum":2082.008026960876}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.967931547619048,"seconds":3.859400749206543e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.921875,"distances_sum":2345.822262242168}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.967931547619048,"seconds":3.859400749206543e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.921875,"distances_sum":2345.822262242168}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8632856726606735,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":7.7265625,"distances_sum":1645.5063456385644}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.392578125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.392578125,"f1":null,"seconds":3.5874545574188232e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":5.8203125,"distances_sum":734.0750573036154}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.8632856726606735,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":7.7265625,"distances_sum":1645.5063456385644}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9592490842490848,"seconds":5.93625009059906e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.859375,"distances_sum":2190.9047211270736}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9429658882783889,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.671875,"distances_sum":2132.612351539062}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.9184502997003003,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.6171875,"distances_sum":1955.5384991197816}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9592490842490848,"seconds":5.93625009059906e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.859375,"distances_sum":2190.9047211270736}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9769917582417587,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.9296875,"distances_sum":2305.3015061122032}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.973122710622711,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.9140625,"distances_sum":2283.7379178594715}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9746852106227109,"seconds":6.215646862983704e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.8984375,"distances_sum":2297.650286494784}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9743875915750917,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.9296875,"distances_sum":2293.2390595914444}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9747596153846158,"seconds":6.165355443954468e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.921875,"distances_sum":2293.553094652897}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9769917582417587,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.9296875,"distances_sum":2305.3015061122032}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9769917582417587,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.9296875,"distances_sum":2305.3015061122032}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8593812437562446,"seconds":5.165114998817444e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.6875,"distances_sum":1679.6597200284757}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2509765625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2509765625,"f1":null,"seconds":3.548339009284973e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":6.515625,"distances_sum":482.34795060353986}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.8091190059940068,"seconds":4.94346022605896e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.4765625,"distances_sum":1388.906215213279}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.8593812437562446,"seconds":5.165114998817444e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":7.6875,"distances_sum":1679.6597200284757}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9307837995338002,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.71875,"distances_sum":2037.3148696080655}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9244994588744593,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.6640625,"distances_sum":2017.3701215273818}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.880859375,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.880859375,"f1":0.9307837995338002,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.71875,"distances_sum":2037.3148696080655}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.961200778388279,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8515625,"distances_sum":2277.116951363686}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9666151556776562,"seconds":6.085261702537537e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.859375,"distances_sum":2294.793156938383}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9592490842490846,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8359375,"distances_sum":2236.8500918142113}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9763221153846158,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.921875,"distances_sum":2343.8663332812243}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9763221153846158,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.921875,"distances_sum":2343.8663332812243}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9763221153846158,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.921875,"distances_sum":2343.8663332812243}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3857421875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3857421875,"f1":null,"seconds":3.769993782043457e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":6.1640625,"distances_sum":733.5651300473971}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1728515625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1728515625,"f1":null,"seconds":3.037974238395691e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":5.3125,"distances_sum":351.7377792047502}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7353515625,"f1":0.8390947594072601,"seconds":4.956498742103577e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.9765625,"distances_sum":1551.6630211467725}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7353515625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7353515625,"f1":0.8390947594072601,"seconds":4.956498742103577e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.9765625,"distances_sum":1551.6630211467725}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9486664377289382,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.71875,"distances_sum":2191.807330171146}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.963155594405595,"seconds":5.811452865600586e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8203125,"distances_sum":2262.083437197117}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9019147519147527,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.4453125,"distances_sum":1864.3956236971385}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9055631868131876,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.4296875,"distances_sum":1888.3706755312176}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.963155594405595,"seconds":5.811452865600586e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8203125,"distances_sum":2262.083437197117}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":6,"bsize":13}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9778102106227108,"seconds":6.748363375663757e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.953125,"distances_sum":2341.3325777596424}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":11,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9701636904761908,"seconds":6.288290023803711e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.9140625,"distances_sum":2297.8306865628097}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.975950091575092,"seconds":6.400048732757568e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8515625,"distances_sum":2340.010096510036}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":6,"bsize":13},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9778102106227108,"seconds":6.748363375663757e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.953125,"distances_sum":2341.3325777596424}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":6,"bsize":13},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9778102106227108,"seconds":6.748363375663757e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.953125,"distances_sum":2341.3325777596424}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.412109375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.412109375,"f1":null,"seconds":4.24310564994812e-6,"exhaustive_search_seconds":0.00011614896357059479,"evaluations":7.0078125,"distances_sum":784.6779494409965}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.705078125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.705078125,"f1":0.8152717074592082,"seconds":5.124136805534363e-6,"exhaustive_search_seconds":0.00011614896357059479,"evaluations":8.15625,"distances_sum":1417.6712729004973}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.705078125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.705078125,"f1":0.8152717074592082,"seconds":5.124136805534363e-6,"exhaustive_search_seconds":0.00011614896357059479,"evaluations":8.15625,"distances_sum":1417.6712729004973}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9556433150183153,"seconds":6.213784217834473e-6,"exhaustive_search_seconds":0.00011614896357059479,"evaluations":8.8203125,"distances_sum":2135.7019614241353}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9505640193140198,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":0.00011614896357059479,"evaluations":8.8125,"distances_sum":2134.3638313298816}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9218323343323351,"seconds":5.1781535148620605e-6,"exhaustive_search_seconds":0.00011614896357059479,"evaluations":8.4609375,"distances_sum":1932.252793910261}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9556433150183153,"seconds":6.213784217834473e-6,"exhaustive_search_seconds":0.00011614896357059479,"evaluations":8.8203125,"distances_sum":2135.7019614241353}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9705185439560443,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":0.00011614896357059479,"evaluations":8.8984375,"distances_sum":2253.4713219853097}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9724358974358978,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":0.00011614896357059479,"evaluations":8.875,"distances_sum":2274.0124104035162}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9724358974358978,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":0.00011614896357059479,"evaluations":8.875,"distances_sum":2274.0124104035162}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9724358974358978,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":0.00011614896357059479,"evaluations":8.875,"distances_sum":2274.0124104035162}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8459639319014327,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.1171875,"distances_sum":1584.251860543903}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7965204933954941,"seconds":5.0067901611328125e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.6328125,"distances_sum":1394.1961805220892}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7490234375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7490234375,"f1":0.8459639319014327,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.1171875,"distances_sum":1584.251860543903}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8927208208458216,"seconds":4.649162292480469e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.4765625,"distances_sum":1818.5325397609001}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9516998626373631,"seconds":3.771856427192688e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.796875,"distances_sum":2133.4619083794596}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9579326923076927,"seconds":3.812834620475769e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8203125,"distances_sum":2176.3417132034174}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9025157134532142,"seconds":3.6526471376419067e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.546875,"distances_sum":1852.4049072060582}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9579326923076927,"seconds":3.812834620475769e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8203125,"distances_sum":2176.3417132034174}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9672103937728942,"seconds":4.278495907783508e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.875,"distances_sum":2204.7415813857333}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9771978021978026,"seconds":4.0065497159957886e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.9765625,"distances_sum":2243.988438489607}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9640453296703303,"seconds":3.773719072341919e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.84375,"distances_sum":2212.872680955041}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9771978021978026,"seconds":4.0065497159957886e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.9765625,"distances_sum":2243.988438489607}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9771978021978026,"seconds":4.0065497159957886e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.9765625,"distances_sum":2243.988438489607}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8595267579642588,"seconds":5.237758159637451e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.2421875,"distances_sum":1652.9374707200905}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8595267579642588,"seconds":5.237758159637451e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.2421875,"distances_sum":1652.9374707200905}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.951568223443224,"seconds":6.025657057762146e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.796875,"distances_sum":2176.019251025422}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9432348901098906,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.734375,"distances_sum":2125.2396400863845}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9385874542124548,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.7734375,"distances_sum":2096.5662941150786}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.951568223443224,"seconds":6.025657057762146e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.796875,"distances_sum":2176.019251025422}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":8,"bsize":13}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9752461080586083,"seconds":6.5248459577560425e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.921875,"distances_sum":2281.6989250746183}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9694940476190479,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.8984375,"distances_sum":2262.6510990109514}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9589285714285719,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.8046875,"distances_sum":2207.591667488486}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9517170329670335,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.8046875,"distances_sum":2166.842791015435}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9705929487179492,"seconds":6.3050538301467896e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.90625,"distances_sum":2263.071441206892}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9636561355311358,"seconds":6.232410669326782e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.8515625,"distances_sum":2239.0528097062897}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9685267857142862,"seconds":6.137415766716003e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.8984375,"distances_sum":2247.158780965359}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":8,"bsize":13},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9752461080586083,"seconds":6.5248459577560425e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.921875,"distances_sum":2281.6989250746183}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":8,"bsize":13},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9752461080586083,"seconds":6.5248459577560425e-6,"exhaustive_search_seconds":1.000240445137024e-6,"evaluations":8.921875,"distances_sum":2281.6989250746183}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.392578125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.392578125,"f1":null,"seconds":3.637745976448059e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":5.6875,"distances_sum":771.5283863369864}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.392578125,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.392578125,"f1":null,"seconds":3.637745976448059e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":5.6875,"distances_sum":771.5283863369864}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5185546875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5185546875,"f1":0.6672103937728943,"seconds":4.0959566831588745e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":6.6171875,"distances_sum":961.6640388715039}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.49609375, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.49609375,"f1":null,"seconds":4.015862941741943e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":6.4140625,"distances_sum":918.5002746626092}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5185546875,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.5185546875,"f1":0.6672103937728943,"seconds":4.0959566831588745e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":6.6171875,"distances_sum":961.6640388715039}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6357421875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6357421875,"f1":0.7657830017205024,"seconds":4.455447196960449e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":6.9375,"distances_sum":1275.5906087445342}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9263907967032974,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.7265625,"distances_sum":1986.6431557404906}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.941059981684982,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8359375,"distances_sum":2047.0664853720868}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8974609375,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8974609375,"f1":0.941059981684982,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8359375,"distances_sum":2047.0664853720868}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8974609375,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8974609375,"f1":0.941059981684982,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8359375,"distances_sum":2047.0664853720868}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.369140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.369140625,"f1":null,"seconds":3.693625330924988e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":6.0390625,"distances_sum":735.9207354467796}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8594670954045964,"seconds":5.247071385383606e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.0625,"distances_sum":1629.8311112135052}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8594670954045964,"seconds":5.247071385383606e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.0625,"distances_sum":1629.8311112135052}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9398866758241765,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.6640625,"distances_sum":2108.454730144152}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8885187728937738,"seconds":5.4854899644851685e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.2265625,"distances_sum":1851.9377563886812}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.89453125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.9398866758241765,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.6640625,"distances_sum":2108.454730144152}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9517914377289385,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8125,"distances_sum":2143.8998926369604}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9686584249084254,"seconds":6.355345249176025e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.890625,"distances_sum":2233.0476569563934}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9686584249084254,"seconds":6.355345249176025e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.890625,"distances_sum":2233.0476569563934}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9686584249084254,"seconds":6.355345249176025e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.890625,"distances_sum":2233.0476569563934}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8643491924741932,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.09375,"distances_sum":1612.4440272895956}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7099609375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.7099609375,"f1":0.8198971167721177,"seconds":4.9211084842681885e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.8984375,"distances_sum":1445.7388096015418}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4013671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4013671875,"f1":null,"seconds":3.7979334592819214e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":6.359375,"distances_sum":766.6688478433462}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7724609375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7724609375,"f1":0.8643491924741932,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.09375,"distances_sum":1612.4440272895956}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9055465367965375,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.4375,"distances_sum":1854.215560604739}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9286604020979028,"seconds":5.997717380523682e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.7890625,"distances_sum":1984.703060088204}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9393887362637369,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.890625,"distances_sum":2026.4704494359562}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9393887362637369,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.890625,"distances_sum":2026.4704494359562}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9713198260073266,"seconds":6.407499313354492e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9609375,"distances_sum":2215.2541429058538}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9700377747252753,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8984375,"distances_sum":2225.819917772815}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9615155677655681,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.90625,"distances_sum":2157.1888510530925}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9433264652014658,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.859375,"distances_sum":2054.5811367060905}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9551968864468868,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.859375,"distances_sum":2130.441640985022}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9713198260073266,"seconds":6.407499313354492e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9609375,"distances_sum":2215.2541429058538}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9713198260073266,"seconds":6.407499313354492e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9609375,"distances_sum":2215.2541429058538}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5498046875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5498046875,"f1":null,"seconds":4.202127456665039e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":6.84375,"distances_sum":1066.1670510970343}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8061384795759802,"seconds":4.71062958240509e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.3671875,"distances_sum":1398.684983311709}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3623046875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3623046875,"f1":null,"seconds":3.514811396598816e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":5.859375,"distances_sum":721.6203499012079}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6923828125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6923828125,"f1":0.8061384795759802,"seconds":4.71062958240509e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.3671875,"distances_sum":1398.684983311709}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.8888829920079929,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.375,"distances_sum":1767.731225726816}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.943072032134533,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.6953125,"distances_sum":2123.5658853098184}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9324893856143862,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.6171875,"distances_sum":2022.8707353364932}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9069914460539469,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.5,"distances_sum":1840.745718014128}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.943072032134533,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.6953125,"distances_sum":2123.5658853098184}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9551224816849821,"seconds":6.813555955886841e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8046875,"distances_sum":2142.452321986296}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9499141483516489,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.71875,"distances_sum":2135.7517739431914}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9675423534798535,"seconds":6.141141057014465e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.8359375,"distances_sum":2227.625485462126}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.974685210622711,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.84375,"distances_sum":2273.686774079075}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.974685210622711,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.84375,"distances_sum":2273.686774079075}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.974685210622711,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.84375,"distances_sum":2273.686774079075}}, n: 9
mean(cfft.distances) = 0.3298249165323626
mean(cdnet.distances) = 0.4016633672181772
mean(crand.distances) = 0.34901265498147505
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8555555555555555
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9044444444444445
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9155555555555556
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9266666666666666
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9355555555555556
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9199999999999999
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9444444444444443
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9333333333333335
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8911111111111111
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9066666666666667
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9222222222222222
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9177777777777777
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8266666666666667
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8688888888888888
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9177777777777777
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9044444444444445
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9155555555555556
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9155555555555556
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9066666666666667
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9133333333333334
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8555555555555555
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9066666666666666
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9066666666666666
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.6178791105747223] ***
*** center 1: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 9, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.24294093265002398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24294093265002398, 0.2025926869212966] ***
*** finished computation of 7 references, err: [Inf, 0.24294093265002398, 0.2025926869212966] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [24, 28, 0]]
** centroid: 1, normalized-entropy: 0.9957274520849256, [(1, 24), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [103, 7, 0]]
** centroid: 2, normalized-entropy: 0.34171390666761664, [(1, 103), (2, 7)]
*** center 3: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [12, 48, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 12), (2, 48)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [93, 36, 0]]
** centroid: 6, normalized-entropy: 0.8541802051521676, [(1, 93), (2, 36)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 116, 19]]
** centroid: 7, normalized-entropy: 0.5861754623084124, [(2, 116), (3, 19)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22858823277196055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22858823277196055, 0.19208659479595921] ***
*** finished computation of 7 references, err: [Inf, 0.22858823277196055, 0.19208659479595921] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [14, 87, 0]]
** centroid: 1, normalized-entropy: 0.5805970961414402, [(1, 14), (2, 87)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [88, 3, 0]]
** centroid: 3, normalized-entropy: 0.20905980566852464, [(1, 88), (2, 3)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 46, 19]]
** centroid: 4, normalized-entropy: 0.871683617119982, [(2, 46), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [88, 3, 0]]
** centroid: 5, normalized-entropy: 0.20905980566852464, [(1, 88), (2, 3)]
*** center 6: selecting labels [1] (freq >= 2) [from [137, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [13, 96, 0]]
** centroid: 7, normalized-entropy: 0.527247477024035, [(1, 13), (2, 96)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22099607952519962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22099607952519962, 0.1925418200892867] ***
*** finished computation of 7 references, err: [Inf, 0.22099607952519962, 0.1925418200892867] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 69, 23]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 69), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [72, 9, 0]]
** centroid: 2, normalized-entropy: 0.5032583347756457, [(1, 72), (2, 9)]
*** center 3: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [7, 86, 0]]
** centroid: 6, normalized-entropy: 0.3852851190780996, [(1, 7), (2, 86)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [29, 74, 0]]
** centroid: 7, normalized-entropy: 0.857558799850773, [(1, 29), (2, 74)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2432823542790345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2432823542790345, 0.21608037029768618] ***
*** finished computation of 7 references, err: [Inf, 0.2432823542790345, 0.21608037029768618] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 64, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 35, 0]]
** centroid: 2, normalized-entropy: 0.9668701645630143, [(1, 54), (2, 35)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [103, 3, 0]]
** centroid: 3, normalized-entropy: 0.1858030790723033, [(1, 103), (2, 3)]
*** center 4: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [4, 79, 0]]
** centroid: 5, normalized-entropy: 0.27866980356389914, [(1, 4), (2, 79)]
*** center 6: selecting labels [1] (freq >= 1) [from [153, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 54, 24]]
** centroid: 7, normalized-entropy: 0.8904916402194913, [(2, 54), (3, 24)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26602391487000754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26602391487000754, 0.2098199156229734] ***
*** finished computation of 7 references, err: [Inf, 0.26602391487000754, 0.2098199156229734] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [32, 94, 0]]
** centroid: 1, normalized-entropy: 0.8175072881213616, [(1, 32), (2, 94)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [112, 1, 0]]
** centroid: 2, normalized-entropy: 0.07306611931384553, [(1, 112), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 81, 19]]
** centroid: 4, normalized-entropy: 0.7014714598838974, [(2, 81), (3, 19)]
*** center 5: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [11, 56, 0]]
** centroid: 6, normalized-entropy: 0.6442142137378306, [(1, 11), (2, 56)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [63, 3, 0]]
** centroid: 7, normalized-entropy: 0.2667649878030262, [(1, 63), (2, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28060930642415244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28060930642415244, 0.21121803391026683] ***
*** finished computation of 7 references, err: [Inf, 0.28060930642415244, 0.21121803391026683] ***
*** center 1: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [17, 62, 0]]
** centroid: 2, normalized-entropy: 0.751286576718343, [(1, 17), (2, 62)]
*** center 3: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 91, 23]]
** centroid: 4, normalized-entropy: 0.7254230207665605, [(2, 91), (3, 23)]
*** center 5: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [57, 73, 0]]
** centroid: 6, normalized-entropy: 0.9890453237543657, [(1, 57), (2, 73)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [60, 12, 0]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(1, 60), (2, 12)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2647972918182578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2647972918182578, 0.2164279535102813] ***
*** finished computation of 7 references, err: [Inf, 0.2647972918182578, 0.2164279535102813] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [3, 132, 21]]
** centroid: 1, normalized-entropy: 0.44354834471647137, [(1, 3), (2, 132), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [69, 41, 0]]
** centroid: 2, normalized-entropy: 0.9527431707334316, [(1, 69), (2, 41)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [92, 3, 0]]
** centroid: 3, normalized-entropy: 0.2022494245476988, [(1, 92), (2, 3)]
*** center 4: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [53, 59, 3]]
** centroid: 5, normalized-entropy: 0.723214171737094, [(1, 53), (2, 59), (3, 3)]
*** center 6: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [26, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2700877667736128] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2700877667736128, 0.26479888115324324] ***
*** starting iteration: 2; err: [Inf, 0.2700877667736128, 0.26479888115324324] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2700877667736128, 0.26479888115324324, 0.2579803114600323] ***
*** starting iteration: 3; err: [Inf, 0.2700877667736128, 0.26479888115324324, 0.2579803114600323] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2700877667736128, 0.26479888115324324, 0.2579803114600323, 0.23665231503350465] ***
*** finished computation of 3 references, err: [Inf, 0.2700877667736128, 0.26479888115324324, 0.2579803114600323, 0.23665231503350465] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [2, 176, 19]]
** centroid: 1, normalized-entropy: 0.3394005606838792, [(1, 2), (2, 176), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [245, 3, 0]]
** centroid: 2, normalized-entropy: 0.0943931549119023, [(1, 245), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [165, 56, 0]]
** centroid: 3, normalized-entropy: 0.8166127811752079, [(1, 165), (2, 56)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2934296809379821] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2934296809379821, 0.24287750179190998] ***
*** starting iteration: 2; err: [Inf, 0.2934296809379821, 0.24287750179190998] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2934296809379821, 0.24287750179190998, 0.23566302027751593] ***
*** starting iteration: 3; err: [Inf, 0.2934296809379821, 0.24287750179190998, 0.23566302027751593] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2934296809379821, 0.24287750179190998, 0.23566302027751593, 0.23466990800990514] ***
*** finished computation of 3 references, err: [Inf, 0.2934296809379821, 0.24287750179190998, 0.23566302027751593, 0.23466990800990514] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [1, 176, 23]]
** centroid: 1, normalized-entropy: 0.5165146211995502, [(2, 176), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [268, 18, 0]]
** centroid: 2, normalized-entropy: 0.3389952770978139, [(1, 268), (2, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [137, 44, 0]]
** centroid: 3, normalized-entropy: 0.8001476186542924, [(1, 137), (2, 44)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36195393295252115] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36195393295252115, 0.24267619548887684] ***
*** starting iteration: 2; err: [Inf, 0.36195393295252115, 0.24267619548887684] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36195393295252115, 0.24267619548887684, 0.23501305680057366] ***
*** starting iteration: 3; err: [Inf, 0.36195393295252115, 0.24267619548887684, 0.23501305680057366] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36195393295252115, 0.24267619548887684, 0.23501305680057366, 0.23285367224237014] ***
*** finished computation of 3 references, err: [Inf, 0.36195393295252115, 0.24267619548887684, 0.23501305680057366, 0.23285367224237014] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [255, 2, 0]]
** centroid: 1, normalized-entropy: 0.06570187838061436, [(1, 255), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [124, 76, 0]]
** centroid: 2, normalized-entropy: 0.9580420222262997, [(1, 124), (2, 76)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [29, 157, 24]]
** centroid: 3, normalized-entropy: 0.6724375772930098, [(1, 29), (2, 157), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.17787423320869739] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17787423320869739, 0.16174933914229409] ***
*** finished computation of 7 references, err: [Inf, 0.17787423320869739, 0.16174933914229409] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [112, 3, 0]]
** centroid: 1, normalized-entropy: 0.17437145292163486, [(1, 112), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 82, 8]]
** centroid: 2, normalized-entropy: 0.43275015878875417, [(2, 82), (3, 8)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [14, 77, 0]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(1, 14), (2, 77)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [118, 16, 0]]
** centroid: 5, normalized-entropy: 0.52764232609436, [(1, 118), (2, 16)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 57, 11]]
** centroid: 6, normalized-entropy: 0.6385146263620961, [(2, 57), (3, 11)]
*** center 7: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22882700644187753] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22882700644187753, 0.17706602791008696] ***
*** finished computation of 7 references, err: [Inf, 0.22882700644187753, 0.17706602791008696] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [123, 37, 0]]
** centroid: 1, normalized-entropy: 0.7801839781061272, [(1, 123), (2, 37)]
*** center 2: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [20, 32, 0]]
** centroid: 3, normalized-entropy: 0.961236604722876, [(1, 20), (2, 32)]
*** center 4: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 129, 23]]
** centroid: 5, normalized-entropy: 0.6131232967402233, [(2, 129), (3, 23)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [70, 22, 0]]
** centroid: 6, normalized-entropy: 0.7935912300117066, [(1, 70), (2, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [56, 18, 0]]
** centroid: 7, normalized-entropy: 0.8003922080453356, [(1, 56), (2, 18)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21685232173349858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21685232173349858, 0.1707183097557596] ***
*** finished computation of 7 references, err: [Inf, 0.21685232173349858, 0.1707183097557596] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [44, 33, 0]]
** centroid: 1, normalized-entropy: 0.9852281360342514, [(1, 44), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [42, 37, 0]]
** centroid: 2, normalized-entropy: 0.9971085167216716, [(1, 42), (2, 37)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 56, 24]]
** centroid: 3, normalized-entropy: 0.8812908992306927, [(2, 56), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 18, 0]]
** centroid: 4, normalized-entropy: 0.8512243352621381, [(1, 47), (2, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [169, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 91, 0]]
** centroid: 6, normalized-entropy: 0.29518174309075856, [(1, 5), (2, 91)]
*** center 7: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.32066010839135217] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32066010839135217, 0.293097890099628] ***
*** finished computation of 3 references, err: [Inf, 0.32066010839135217, 0.293097890099628] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 198, 19]]
** centroid: 1, normalized-entropy: 0.4282644419781622, [(2, 198), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [143, 30, 0]]
** centroid: 2, normalized-entropy: 0.665447192795307, [(1, 143), (2, 30)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [269, 7, 0]]
** centroid: 3, normalized-entropy: 0.170572065538549, [(1, 269), (2, 7)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4188980678811312] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4188980678811312, 0.3200714317076411] ***
*** finished computation of 3 references, err: [Inf, 0.4188980678811312, 0.3200714317076411] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [1, 120, 23]]
** centroid: 1, normalized-entropy: 0.6363133195592738, [(2, 120), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [247, 10, 0]]
** centroid: 2, normalized-entropy: 0.23727440464022428, [(1, 247), (2, 10)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [158, 108, 0]]
** centroid: 3, normalized-entropy: 0.974360599239397, [(1, 158), (2, 108)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.397780761100363] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.397780761100363, 0.3169788197283333] ***
*** finished computation of 3 references, err: [Inf, 0.397780761100363, 0.3169788197283333] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 103, 24]]
** centroid: 1, normalized-entropy: 0.6993252039597307, [(2, 103), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [99, 108, 0]]
** centroid: 2, normalized-entropy: 0.9986359641585719, [(1, 99), (2, 108)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [309, 24, 0]]
** centroid: 3, normalized-entropy: 0.3736090708557681, [(1, 309), (2, 24)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4885710856538859] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4885710856538859, 0.3264123078088861] ***
*** finished computation of 3 references, err: [Inf, 0.4885710856538859, 0.3264123078088861] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [243, 27, 0]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(1, 243), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [127, 84, 0]]
** centroid: 2, normalized-entropy: 0.9698308534774176, [(1, 127), (2, 84)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [42, 124, 19]]
** centroid: 3, normalized-entropy: 0.7632451806872629, [(1, 42), (2, 124), (3, 19)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4384841991524244] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4384841991524244, 0.3345112941050525] ***
*** finished computation of 3 references, err: [Inf, 0.4384841991524244, 0.3345112941050525] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [140, 190, 23]]
** centroid: 1, normalized-entropy: 0.7993147005748094, [(1, 140), (2, 190), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [180, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [86, 48, 0]]
** centroid: 3, normalized-entropy: 0.9411864371816836, [(1, 86), (2, 48)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.40464984728623815] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40464984728623815, 0.3139183938201668] ***
*** finished computation of 3 references, err: [Inf, 0.40464984728623815, 0.3139183938201668] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [122, 105, 0]]
** centroid: 1, normalized-entropy: 0.9959505377860031, [(1, 122), (2, 105)]
*** center 2: selecting labels [1] (freq >= 1) [from [259, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [27, 130, 24]]
** centroid: 3, normalized-entropy: 0.7185740088186192, [(1, 27), (2, 130), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31653548234531115] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31653548234531115, 0.24621685756252962] ***
*** starting iteration: 2; err: [Inf, 0.31653548234531115, 0.24621685756252962] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31653548234531115, 0.24621685756252962, 0.2354511917630272] ***
*** starting iteration: 3; err: [Inf, 0.31653548234531115, 0.24621685756252962, 0.2354511917630272] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31653548234531115, 0.24621685756252962, 0.2354511917630272, 0.2331531724875776] ***
*** finished computation of 3 references, err: [Inf, 0.31653548234531115, 0.24621685756252962, 0.2354511917630272, 0.2331531724875776] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [86, 137, 19]]
** centroid: 1, normalized-entropy: 0.8096891419628952, [(1, 86), (2, 137), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [101, 98, 0]]
** centroid: 2, normalized-entropy: 0.9998360553113791, [(1, 101), (2, 98)]
*** center 3: selecting labels [1] (freq >= 1) [from [225, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3423392179616164] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3423392179616164, 0.2424712817546265] ***
*** starting iteration: 2; err: [Inf, 0.3423392179616164, 0.2424712817546265] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3423392179616164, 0.2424712817546265, 0.2390084040771494] ***
*** starting iteration: 3; err: [Inf, 0.3423392179616164, 0.2424712817546265, 0.2390084040771494] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3423392179616164, 0.2424712817546265, 0.2390084040771494, 0.23856653481710707] ***
*** finished computation of 3 references, err: [Inf, 0.3423392179616164, 0.2424712817546265, 0.2390084040771494, 0.23856653481710707] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [95, 125, 20]]
** centroid: 1, normalized-entropy: 0.8316596936577223, [(1, 95), (2, 125), (3, 20)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [115, 113, 3]]
** centroid: 2, normalized-entropy: 0.6857948653835423, [(1, 115), (2, 113), (3, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [196, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2890237676275746] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2890237676275746, 0.23923260418661887] ***
*** starting iteration: 2; err: [Inf, 0.2890237676275746, 0.23923260418661887] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2890237676275746, 0.23923260418661887, 0.2299088252557517] ***
*** starting iteration: 3; err: [Inf, 0.2890237676275746, 0.23923260418661887, 0.2299088252557517] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2890237676275746, 0.23923260418661887, 0.2299088252557517, 0.22758708066883673] ***
*** finished computation of 3 references, err: [Inf, 0.2890237676275746, 0.23923260418661887, 0.2299088252557517, 0.22758708066883673] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [264, 20, 0]]
** centroid: 1, normalized-entropy: 0.3674984948272913, [(1, 264), (2, 20)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 182, 24]]
** centroid: 2, normalized-entropy: 0.3538512393858879, [(1, 1), (2, 182), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [143, 33, 0]]
** centroid: 3, normalized-entropy: 0.6962122601251459, [(1, 143), (2, 33)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39911896784792655] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39911896784792655, 0.23410030151088093] ***
*** finished computation of 3 references, err: [Inf, 0.39911896784792655, 0.23410030151088093] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [230, 33, 0]]
** centroid: 1, normalized-entropy: 0.5448972491552861, [(1, 230), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [182, 37, 0]]
** centroid: 2, normalized-entropy: 0.6552966530055849, [(1, 182), (2, 37)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 165, 19]]
** centroid: 3, normalized-entropy: 0.47924789026360143, [(2, 165), (3, 19)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3470411660928821] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3470411660928821, 0.24090032032209224] ***
*** finished computation of 3 references, err: [Inf, 0.3470411660928821, 0.24090032032209224] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [120, 150, 19]]
** centroid: 1, normalized-entropy: 0.8049118520391322, [(1, 120), (2, 150), (3, 19)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [102, 88, 4]]
** centroid: 2, normalized-entropy: 0.7069201171032515, [(1, 102), (2, 88), (3, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [184, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36550568619315726] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36550568619315726, 0.23377528338102455] ***
*** finished computation of 3 references, err: [Inf, 0.36550568619315726, 0.23377528338102455] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [45, 193, 24]]
** centroid: 1, normalized-entropy: 0.6796705914057622, [(1, 45), (2, 193), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [237, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [126, 42, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 126), (2, 42)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2383649272940539] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2383649272940539, 0.19211265320486126] ***
*** finished computation of 7 references, err: [Inf, 0.2383649272940539, 0.19211265320486126] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 88, 20]]
** centroid: 1, normalized-entropy: 0.6912898694057888, [(2, 88), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 11, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 55), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [109, 15, 0]]
** centroid: 4, normalized-entropy: 0.5321362270416112, [(1, 109), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 47, 0]]
** centroid: 5, normalized-entropy: 0.983013379603719, [(1, 64), (2, 47)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 76, 3]]
** centroid: 6, normalized-entropy: 0.23292785546981223, [(2, 76), (3, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26504846802190773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26504846802190773, 0.1983305163544671] ***
*** finished computation of 7 references, err: [Inf, 0.26504846802190773, 0.1983305163544671] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [80, 41, 0]]
** centroid: 1, normalized-entropy: 0.9237072060321943, [(1, 80), (2, 41)]
*** center 2: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 90, 24]]
** centroid: 4, normalized-entropy: 0.7424875695421234, [(2, 90), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [76, 33, 0]]
** centroid: 5, normalized-entropy: 0.8846293067903075, [(1, 76), (2, 33)]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [22, 71, 0]]
** centroid: 7, normalized-entropy: 0.7892712724536985, [(1, 22), (2, 71)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22772667633772298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22772667633772298, 0.19549821678537865] ***
*** finished computation of 7 references, err: [Inf, 0.22772667633772298, 0.19549821678537865] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [80, 56, 0]]
** centroid: 1, normalized-entropy: 0.9774178175281716, [(1, 80), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [76, 8, 0]]
** centroid: 2, normalized-entropy: 0.45371633918694493, [(1, 76), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 71, 19]]
** centroid: 4, normalized-entropy: 0.7436012269934466, [(2, 71), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 100, 0]]
** centroid: 5, normalized-entropy: 0.5373760853377334, [(1, 14), (2, 100)]
*** center 6: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25182561936328884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25182561936328884, 0.19370592646356644] ***
*** finished computation of 7 references, err: [Inf, 0.25182561936328884, 0.19370592646356644] ***
*** center 1: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 75, 23]]
** centroid: 2, normalized-entropy: 0.7861044688447759, [(2, 75), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 26, 0]]
** centroid: 3, normalized-entropy: 0.8926230133850988, [(1, 58), (2, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [44, 66, 0]]
** centroid: 5, normalized-entropy: 0.9709505944546688, [(1, 44), (2, 66)]
*** center 6: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 71, 0]]
** centroid: 7, normalized-entropy: 0.5392163432092415, [(1, 10), (2, 71)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22925756318282442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22925756318282442, 0.19199496469386423] ***
*** finished computation of 7 references, err: [Inf, 0.22925756318282442, 0.19199496469386423] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [95, 25, 0]]
** centroid: 1, normalized-entropy: 0.7382848661434506, [(1, 95), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 10, 0]]
** centroid: 2, normalized-entropy: 0.6024308020404452, [(1, 58), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 70, 24]]
** centroid: 3, normalized-entropy: 0.8196004346196011, [(2, 70), (3, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [120, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [55, 18, 0]]
** centroid: 6, normalized-entropy: 0.8058049113482652, [(1, 55), (2, 18)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 111, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9430118741495986, 0.9320008631385877, 0.9239928551305797, 0.916014817212422, 0.9159998321674969, 0.9150288012563461, 0.9150048251844659, 0.897993802185419, 0.8860567153980328, 0.8860057662452872, 0.884075692458926, 0.7870055684426941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9430118741495986
finished with 13
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.3241804424622977] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3241804424622977, 0.2976026421653347] ***
*** finished computation of 3 references, err: [Inf, 0.3241804424622977, 0.2976026421653347] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [321, 102, 0]]
** centroid: 1, normalized-entropy: 0.7969222449701818, [(1, 321), (2, 102)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [38, 120, 19]]
** centroid: 2, normalized-entropy: 0.7585680640327997, [(1, 38), (2, 120), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 13, 0]]
** centroid: 3, normalized-entropy: 0.7158259310602146, [(1, 53), (2, 13)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.26556576792753933] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26556576792753933, 0.237748588440937] ***
*** finished computation of 3 references, err: [Inf, 0.26556576792753933, 0.237748588440937] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [197, 27, 0]]
** centroid: 1, normalized-entropy: 0.530898801560641, [(1, 197), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [209, 50, 0]]
** centroid: 2, normalized-entropy: 0.7078087969775163, [(1, 209), (2, 50)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 161, 23]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(2, 161), (3, 23)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32207820229330053] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32207820229330053, 0.2404793249778282] ***
*** finished computation of 3 references, err: [Inf, 0.32207820229330053, 0.2404793249778282] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [92, 101, 12]]
** centroid: 1, normalized-entropy: 0.7959773167122671, [(1, 92), (2, 101), (3, 12)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [40, 132, 12]]
** centroid: 2, normalized-entropy: 0.6809196290293285, [(1, 40), (2, 132), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [276, 2, 0]]
** centroid: 3, normalized-entropy: 0.06155707966316698, [(1, 276), (2, 2)]
finished with 7 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 13)
[0.9430118741495986, 0.9320008631385877, 0.9239928551305797, 0.916014817212422, 0.9159998321674969, 0.9150288012563461, 0.9150048251844659, 0.897993802185419, 0.8940077802353251, 0.8860567153980328, 0.8860057662452872, 0.884075692458926, 0.7870055684426941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9430118741495986
finished with 15
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.408524840769523] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.408524840769523, 0.2444329968473228] ***
*** starting iteration: 2; err: [Inf, 0.408524840769523, 0.2444329968473228] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.408524840769523, 0.2444329968473228, 0.23417963288646113] ***
*** starting iteration: 3; err: [Inf, 0.408524840769523, 0.2444329968473228, 0.23417963288646113] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.408524840769523, 0.2444329968473228, 0.23417963288646113, 0.23177106775114084] ***
*** finished computation of 3 references, err: [Inf, 0.408524840769523, 0.2444329968473228, 0.23417963288646113, 0.23177106775114084] ***
*** center 1: selecting labels [1] (freq >= 1) [from [233, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [62, 158, 19]]
** centroid: 2, normalized-entropy: 0.7508830024035265, [(1, 62), (2, 158), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [117, 77, 0]]
** centroid: 3, normalized-entropy: 0.9691126575233867, [(1, 117), (2, 77)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2855030470367136] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2855030470367136, 0.23636986933246457] ***
*** starting iteration: 2; err: [Inf, 0.2855030470367136, 0.23636986933246457] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2855030470367136, 0.23636986933246457, 0.23498982437669874] ***
*** starting iteration: 3; err: [Inf, 0.2855030470367136, 0.23636986933246457, 0.23498982437669874] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2855030470367136, 0.23636986933246457, 0.23498982437669874, 0.2348401483366157] ***
*** finished computation of 3 references, err: [Inf, 0.2855030470367136, 0.23636986933246457, 0.23498982437669874, 0.2348401483366157] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [234, 15, 0]]
** centroid: 1, normalized-entropy: 0.32840071392894665, [(1, 234), (2, 15)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 186, 23]]
** centroid: 2, normalized-entropy: 0.500060261959327, [(2, 186), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [172, 37, 0]]
** centroid: 3, normalized-entropy: 0.6735442405161364, [(1, 172), (2, 37)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36503512040618386] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36503512040618386, 0.27336921026257205] ***
*** starting iteration: 2; err: [Inf, 0.36503512040618386, 0.27336921026257205] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36503512040618386, 0.27336921026257205, 0.2436205955617398] ***
*** starting iteration: 3; err: [Inf, 0.36503512040618386, 0.27336921026257205, 0.2436205955617398] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36503512040618386, 0.27336921026257205, 0.2436205955617398, 0.2294240436520891] ***
*** finished computation of 3 references, err: [Inf, 0.36503512040618386, 0.27336921026257205, 0.2436205955617398, 0.2294240436520891] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [5, 192, 24]]
** centroid: 1, normalized-entropy: 0.4087195060966548, [(1, 5), (2, 192), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [273, 4, 0]]
** centroid: 2, normalized-entropy: 0.10896707770579578, [(1, 273), (2, 4)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [130, 39, 0]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(1, 130), (2, 39)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37097505476345327] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37097505476345327, 0.3090718236217672] ***
*** starting iteration: 2; err: [Inf, 0.37097505476345327, 0.3090718236217672] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37097505476345327, 0.3090718236217672, 0.2986087858419608] ***
*** starting iteration: 3; err: [Inf, 0.37097505476345327, 0.3090718236217672, 0.2986087858419608] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37097505476345327, 0.3090718236217672, 0.2986087858419608, 0.29594054208458725] ***
*** finished computation of 3 references, err: [Inf, 0.37097505476345327, 0.3090718236217672, 0.2986087858419608, 0.29594054208458725] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [134, 82, 0]]
** centroid: 1, normalized-entropy: 0.9577800211448372, [(1, 134), (2, 82)]
*** center 2: selecting labels [1] (freq >= 1) [from [238, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [40, 153, 19]]
** centroid: 3, normalized-entropy: 0.6974483497775464, [(1, 40), (2, 153), (3, 19)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.40008884527046107] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40008884527046107, 0.31833289245861224] ***
*** starting iteration: 2; err: [Inf, 0.40008884527046107, 0.31833289245861224] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40008884527046107, 0.31833289245861224, 0.30182750472544817] ***
*** starting iteration: 3; err: [Inf, 0.40008884527046107, 0.31833289245861224, 0.30182750472544817] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40008884527046107, 0.31833289245861224, 0.30182750472544817, 0.3003813742249478] ***
*** finished computation of 3 references, err: [Inf, 0.40008884527046107, 0.31833289245861224, 0.30182750472544817, 0.3003813742249478] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [99, 97, 0]]
** centroid: 1, normalized-entropy: 0.9999248896252452, [(1, 99), (2, 97)]
*** center 2: selecting labels [1] (freq >= 1) [from [208, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [99, 141, 23]]
** centroid: 3, normalized-entropy: 0.8329489580779202, [(1, 99), (2, 141), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5050674295346106] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5050674295346106, 0.31318601920943834] ***
*** starting iteration: 2; err: [Inf, 0.5050674295346106, 0.31318601920943834] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5050674295346106, 0.31318601920943834, 0.29278638346520053] ***
*** starting iteration: 3; err: [Inf, 0.5050674295346106, 0.31318601920943834, 0.29278638346520053] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5050674295346106, 0.31318601920943834, 0.29278638346520053, 0.2894514102846205] ***
*** finished computation of 3 references, err: [Inf, 0.5050674295346106, 0.31318601920943834, 0.29278638346520053, 0.2894514102846205] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [252, 9, 0]]
** centroid: 1, normalized-entropy: 0.21639693245126485, [(1, 252), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [156, 61, 0]]
** centroid: 2, normalized-entropy: 0.8569534272193788, [(1, 156), (2, 61)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 165, 24]]
** centroid: 3, normalized-entropy: 0.5491087450260074, [(2, 165), (3, 24)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9430118741495986, 0.9320008631385877, 0.9239928551305797, 0.918013822205439, 0.916014817212422, 0.9159998321674969, 0.9150288012563461, 0.9150048251844659, 0.9080008151864439, 0.897993802185419, 0.8940077802353251, 0.8860567153980328, 0.8860057662452872, 0.884075692458926, 0.7870055684426941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9430118741495986
finished with 17
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.2819119068967352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2819119068967352, 0.21562319641999966] ***
*** starting iteration: 2; err: [Inf, 0.2819119068967352, 0.21562319641999966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2819119068967352, 0.21562319641999966, 0.19401722145896103] ***
*** starting iteration: 3; err: [Inf, 0.2819119068967352, 0.21562319641999966, 0.19401722145896103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2819119068967352, 0.21562319641999966, 0.19401722145896103, 0.189852572337783] ***
*** finished computation of 7 references, err: [Inf, 0.2819119068967352, 0.21562319641999966, 0.19401722145896103, 0.189852572337783] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 42, 19]]
** centroid: 1, normalized-entropy: 0.8948692308065576, [(2, 42), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [18, 89, 0]]
** centroid: 2, normalized-entropy: 0.6536265622705767, [(1, 18), (2, 89)]
*** center 3: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 14, 0]]
** centroid: 4, normalized-entropy: 0.6690158350565576, [(1, 66), (2, 14)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 77, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [91, 13, 0]]
** centroid: 7, normalized-entropy: 0.5435644431995963, [(1, 91), (2, 13)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3062066902843551] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3062066902843551, 0.21196072618093068] ***
*** starting iteration: 2; err: [Inf, 0.3062066902843551, 0.21196072618093068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3062066902843551, 0.21196072618093068, 0.1964500447751946] ***
*** starting iteration: 3; err: [Inf, 0.3062066902843551, 0.21196072618093068, 0.1964500447751946] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3062066902843551, 0.21196072618093068, 0.1964500447751946, 0.19361831133031862] ***
*** finished computation of 7 references, err: [Inf, 0.3062066902843551, 0.21196072618093068, 0.1964500447751946, 0.19361831133031862] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [78, 15, 0]]
** centroid: 1, normalized-entropy: 0.6373874992221911, [(1, 78), (2, 15)]
*** center 2: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 104, 23]]
** centroid: 3, normalized-entropy: 0.6824826735754346, [(2, 104), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [80, 3, 0]]
** centroid: 5, normalized-entropy: 0.2243269603450881, [(1, 80), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [16, 85, 0]]
** centroid: 6, normalized-entropy: 0.6305062394675903, [(1, 16), (2, 85)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [87, 31, 0]]
** centroid: 7, normalized-entropy: 0.8308111022361421, [(1, 87), (2, 31)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27156256305157156] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27156256305157156, 0.21435654713636798] ***
*** starting iteration: 2; err: [Inf, 0.27156256305157156, 0.21435654713636798] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27156256305157156, 0.21435654713636798, 0.20548628424496754] ***
*** starting iteration: 3; err: [Inf, 0.27156256305157156, 0.21435654713636798, 0.20548628424496754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27156256305157156, 0.21435654713636798, 0.20548628424496754, 0.20006083414891268] ***
*** finished computation of 7 references, err: [Inf, 0.27156256305157156, 0.21435654713636798, 0.20548628424496754, 0.20006083414891268] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 128, 24]]
** centroid: 1, normalized-entropy: 0.6292492238560344, [(2, 128), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [105, 11, 0]]
** centroid: 2, normalized-entropy: 0.4523816230590106, [(1, 105), (2, 11)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 62, 0]]
** centroid: 3, normalized-entropy: 0.9995565335032316, [(1, 59), (2, 62)]
*** center 4: selecting labels [1] (freq >= 2) [from [29, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [79, 34, 0]]
** centroid: 6, normalized-entropy: 0.8823699738443678, [(1, 79), (2, 34)]
*** center 7: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21550565846921602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21550565846921602, 0.16638809636615598] ***
*** starting iteration: 2; err: [Inf, 0.21550565846921602, 0.16638809636615598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21550565846921602, 0.16638809636615598, 0.1595815468094292] ***
*** starting iteration: 3; err: [Inf, 0.21550565846921602, 0.16638809636615598, 0.1595815468094292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21550565846921602, 0.16638809636615598, 0.1595815468094292, 0.15564567084192066] ***
*** finished computation of 7 references, err: [Inf, 0.21550565846921602, 0.16638809636615598, 0.1595815468094292, 0.15564567084192066] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [108, 12, 0]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(1, 108), (2, 12)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 80, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [15, 48, 0]]
** centroid: 3, normalized-entropy: 0.7918583525674836, [(1, 15), (2, 48)]
*** center 4: selecting labels [1] (freq >= 2) [from [181, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [108, 5, 0]]
** centroid: 5, normalized-entropy: 0.26144010659136985, [(1, 108), (2, 5)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 31, 19]]
** centroid: 6, normalized-entropy: 0.9580420222262997, [(2, 31), (3, 19)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 59, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25159268849284977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25159268849284977, 0.18010401627540343] ***
*** starting iteration: 2; err: [Inf, 0.25159268849284977, 0.18010401627540343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25159268849284977, 0.18010401627540343, 0.16070882366576428] ***
*** starting iteration: 3; err: [Inf, 0.25159268849284977, 0.18010401627540343, 0.16070882366576428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25159268849284977, 0.18010401627540343, 0.16070882366576428, 0.15550384749665389] ***
*** finished computation of 7 references, err: [Inf, 0.25159268849284977, 0.18010401627540343, 0.16070882366576428, 0.15550384749665389] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 111, 23]]
** centroid: 1, normalized-entropy: 0.6614467564714064, [(2, 111), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [77, 32, 0]]
** centroid: 2, normalized-entropy: 0.8732984198823629, [(1, 77), (2, 32)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [35, 54, 0]]
** centroid: 6, normalized-entropy: 0.9668701645630143, [(1, 35), (2, 54)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [91, 41, 0]]
** centroid: 7, normalized-entropy: 0.8938718129385839, [(1, 91), (2, 41)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20243885063683556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20243885063683556, 0.16412237905680777] ***
*** starting iteration: 2; err: [Inf, 0.20243885063683556, 0.16412237905680777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20243885063683556, 0.16412237905680777, 0.15067424713822453] ***
*** starting iteration: 3; err: [Inf, 0.20243885063683556, 0.16412237905680777, 0.15067424713822453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20243885063683556, 0.16412237905680777, 0.15067424713822453, 0.14688810218695267] ***
*** finished computation of 7 references, err: [Inf, 0.20243885063683556, 0.16412237905680777, 0.15067424713822453, 0.14688810218695267] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [22, 88, 0]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(1, 22), (2, 88)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [86, 11, 0]]
** centroid: 3, normalized-entropy: 0.5100930822965021, [(1, 86), (2, 11)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 109, 24]]
** centroid: 4, normalized-entropy: 0.6810629511553796, [(2, 109), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [89, 5, 0]]
** centroid: 5, normalized-entropy: 0.2998025130558691, [(1, 89), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [49, 22, 0]]
** centroid: 6, normalized-entropy: 0.893010810044601, [(1, 49), (2, 22)]
*** center 7: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 17)
[0.9430118741495986, 0.9370208531885179, 0.9320008631385877, 0.9290128451805099, 0.9239928551305797, 0.918013822205439, 0.916014817212422, 0.9159998321674969, 0.9150288012563461, 0.9150048251844659, 0.9080008151864439, 0.897993802185419, 0.8940077802353251, 0.8860567153980328, 0.8860057662452872, 0.884075692458926, 0.7870055684426941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9430118741495986
finished with 17
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9430118741495986, 0.9370208531885179, 0.9320008631385877, 0.9290128451805099, 0.9239928551305797, 0.918013822205439, 0.916014817212422, 0.9159998321674969, 0.9150288012563461, 0.9150048251844659, 0.9080008151864439, 0.897993802185419, 0.8940077802353251, 0.8860567153980328, 0.8860057662452872, 0.884075692458926, 0.7870055684426941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9430118741495986
finished with 18
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.3338607385021833] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3338607385021833, 0.3213252844093172] ***
*** starting iteration: 2; err: [Inf, 0.3338607385021833, 0.3213252844093172] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3338607385021833, 0.3213252844093172, 0.2980639721426341] ***
*** starting iteration: 3; err: [Inf, 0.3338607385021833, 0.3213252844093172, 0.2980639721426341] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3338607385021833, 0.3213252844093172, 0.2980639721426341, 0.2956410357756568] ***
*** finished computation of 3 references, err: [Inf, 0.3338607385021833, 0.3213252844093172, 0.2980639721426341, 0.2956410357756568] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [139, 63, 0]]
** centroid: 1, normalized-entropy: 0.895333045677229, [(1, 139), (2, 63)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [265, 3, 0]]
** centroid: 2, normalized-entropy: 0.08860876841836096, [(1, 265), (2, 3)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [8, 169, 19]]
** centroid: 3, normalized-entropy: 0.44108389835759587, [(1, 8), (2, 169), (3, 19)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36411476208698534] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36411476208698534, 0.3067264591763983] ***
*** starting iteration: 2; err: [Inf, 0.36411476208698534, 0.3067264591763983] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36411476208698534, 0.3067264591763983, 0.29796232168899217] ***
*** starting iteration: 3; err: [Inf, 0.36411476208698534, 0.3067264591763983, 0.29796232168899217] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36411476208698534, 0.3067264591763983, 0.29796232168899217, 0.2960636541359071] ***
*** finished computation of 3 references, err: [Inf, 0.36411476208698534, 0.3067264591763983, 0.29796232168899217, 0.2960636541359071] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [150, 39, 0]]
** centroid: 1, normalized-entropy: 0.7344461802527668, [(1, 150), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [256, 21, 0]]
** centroid: 2, normalized-entropy: 0.38724878742697183, [(1, 256), (2, 21)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 178, 23]]
** centroid: 3, normalized-entropy: 0.5131289264956943, [(2, 178), (3, 23)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4784407065608825] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4784407065608825, 0.3400046855345301] ***
*** starting iteration: 2; err: [Inf, 0.4784407065608825, 0.3400046855345301] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4784407065608825, 0.3400046855345301, 0.3369015877971473] ***
*** starting iteration: 3; err: [Inf, 0.4784407065608825, 0.3400046855345301, 0.3369015877971473] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4784407065608825, 0.3400046855345301, 0.3369015877971473, 0.3352234665781952] ***
*** finished computation of 3 references, err: [Inf, 0.4784407065608825, 0.3400046855345301, 0.3369015877971473, 0.3352234665781952] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [248, 26, 0]]
** centroid: 1, normalized-entropy: 0.45258639811522205, [(1, 248), (2, 26)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [51, 89, 24]]
** centroid: 2, normalized-entropy: 0.8885547643695243, [(1, 51), (2, 89), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [109, 120, 0]]
** centroid: 3, normalized-entropy: 0.9983349545873056, [(1, 109), (2, 120)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 18)
[0.9430118741495986, 0.9370208531885179, 0.9320008631385877, 0.9290128451805099, 0.9239928551305797, 0.9209958461455466, 0.918013822205439, 0.916014817212422, 0.9159998321674969, 0.9150288012563461, 0.9150048251844659, 0.9080008151864439, 0.897993802185419, 0.8940077802353251, 0.8860567153980328, 0.8860057662452872, 0.884075692458926, 0.7870055684426941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9430118741495986
finished with 19
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.1607352537903571] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1607352537903571, 0.15413143855586714] ***
*** finished computation of 7 references, err: [Inf, 0.1607352537903571, 0.15413143855586714] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [95, 14, 0]]
** centroid: 1, normalized-entropy: 0.5531453183526465, [(1, 95), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [86, 31, 0]]
** centroid: 2, normalized-entropy: 0.834135193716964, [(1, 86), (2, 31)]
*** center 3: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [13, 35, 0]]
** centroid: 4, normalized-entropy: 0.842657877202239, [(1, 13), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [11, 53, 0]]
** centroid: 5, normalized-entropy: 0.6619760641115651, [(1, 11), (2, 53)]
*** center 6: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 102, 19]]
** centroid: 7, normalized-entropy: 0.6271441658983906, [(2, 102), (3, 19)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2319536084767202] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2319536084767202, 0.18054103516768302] ***
*** finished computation of 7 references, err: [Inf, 0.2319536084767202, 0.18054103516768302] ***
*** center 1: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [19, 101, 0]]
** centroid: 3, normalized-entropy: 0.6303074079971902, [(1, 19), (2, 101)]
*** center 4: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 33, 0]]
** centroid: 5, normalized-entropy: 0.9695235828220429, [(1, 50), (2, 33)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [161, 1, 0]]
** centroid: 6, normalized-entropy: 0.054185698091702775, [(1, 161), (2, 1)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 103, 23]]
** centroid: 7, normalized-entropy: 0.68560151644291, [(2, 103), (3, 23)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21046419396041438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21046419396041438, 0.15660798798749473] ***
*** finished computation of 7 references, err: [Inf, 0.21046419396041438, 0.15660798798749473] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [124, 25, 0]]
** centroid: 1, normalized-entropy: 0.6526131699095399, [(1, 124), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [5, 71, 0]]
** centroid: 2, normalized-entropy: 0.35001059292688486, [(1, 5), (2, 71)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 90, 24]]
** centroid: 3, normalized-entropy: 0.7424875695421234, [(2, 90), (3, 24)]
*** center 4: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [78, 5, 0]]
** centroid: 5, normalized-entropy: 0.32840071392894665, [(1, 78), (2, 5)]
*** center 6: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [12, 44, 0]]
** centroid: 7, normalized-entropy: 0.7495952572594798, [(1, 12), (2, 44)]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 19)
[0.9430118741495986, 0.9370208531885179, 0.9320008631385877, 0.9290128451805099, 0.9260308212404021, 0.9239928551305797, 0.9209958461455466, 0.918013822205439, 0.916014817212422, 0.9159998321674969, 0.9150288012563461, 0.9150048251844659, 0.9080008151864439, 0.897993802185419, 0.8940077802353251, 0.8860567153980328, 0.8860057662452872, 0.884075692458926, 0.7870055684426941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9430118741495986
finished with 21
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.2235246736517137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2235246736517137, 0.18780389421846014] ***
*** starting iteration: 2; err: [Inf, 0.2235246736517137, 0.18780389421846014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2235246736517137, 0.18780389421846014, 0.17195276718995012] ***
*** starting iteration: 3; err: [Inf, 0.2235246736517137, 0.18780389421846014, 0.17195276718995012] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2235246736517137, 0.18780389421846014, 0.17195276718995012, 0.16197482786104977] ***
*** starting iteration: 4; err: [Inf, 0.2235246736517137, 0.18780389421846014, 0.17195276718995012, 0.16197482786104977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2235246736517137, 0.18780389421846014, 0.17195276718995012, 0.16197482786104977, 0.1562834345975432] ***
*** starting iteration: 5; err: [Inf, 0.2235246736517137, 0.18780389421846014, 0.17195276718995012, 0.16197482786104977, 0.1562834345975432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2235246736517137, 0.18780389421846014, 0.17195276718995012, 0.16197482786104977, 0.1562834345975432, 0.15355621241508527] ***
*** starting iteration: 6; err: [Inf, 0.2235246736517137, 0.18780389421846014, 0.17195276718995012, 0.16197482786104977, 0.1562834345975432, 0.15355621241508527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2235246736517137, 0.18780389421846014, 0.17195276718995012, 0.16197482786104977, 0.1562834345975432, 0.15355621241508527, 0.15243654438733562] ***
*** starting iteration: 7; err: [Inf, 0.2235246736517137, 0.18780389421846014, 0.17195276718995012, 0.16197482786104977, 0.1562834345975432, 0.15355621241508527, 0.15243654438733562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2235246736517137, 0.18780389421846014, 0.17195276718995012, 0.16197482786104977, 0.1562834345975432, 0.15355621241508527, 0.15243654438733562, 0.1514742486318713] ***
*** finished computation of 7 references, err: [Inf, 0.2235246736517137, 0.18780389421846014, 0.17195276718995012, 0.16197482786104977, 0.1562834345975432, 0.15355621241508527, 0.15243654438733562, 0.1514742486318713] ***
*** center 1: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 75, 18]]
** centroid: 2, normalized-entropy: 0.708835673332196, [(2, 75), (3, 18)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 85, 1]]
** centroid: 3, normalized-entropy: 0.09140162014739266, [(2, 85), (3, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [63, 22, 0]]
** centroid: 4, normalized-entropy: 0.8249658680139929, [(1, 63), (2, 22)]
*** center 5: selecting labels [1] (freq >= 1) [from [140, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [39, 45, 0]]
** centroid: 6, normalized-entropy: 0.9963165195589622, [(1, 39), (2, 45)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [101, 8, 0]]
** centroid: 7, normalized-entropy: 0.3784654279151717, [(1, 101), (2, 8)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22909989051040502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22909989051040502, 0.1713197711356699] ***
*** starting iteration: 2; err: [Inf, 0.22909989051040502, 0.1713197711356699] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22909989051040502, 0.1713197711356699, 0.15968817092528542] ***
*** starting iteration: 3; err: [Inf, 0.22909989051040502, 0.1713197711356699, 0.15968817092528542] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22909989051040502, 0.1713197711356699, 0.15968817092528542, 0.15587214301752186] ***
*** starting iteration: 4; err: [Inf, 0.22909989051040502, 0.1713197711356699, 0.15968817092528542, 0.15587214301752186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22909989051040502, 0.1713197711356699, 0.15968817092528542, 0.15587214301752186, 0.15489833981407503] ***
*** finished computation of 7 references, err: [Inf, 0.22909989051040502, 0.1713197711356699, 0.15968817092528542, 0.15587214301752186, 0.15489833981407503] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [94, 4, 0]]
** centroid: 1, normalized-entropy: 0.2460225782203316, [(1, 94), (2, 4)]
*** center 2: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [36, 2, 0]]
** centroid: 3, normalized-entropy: 0.2974722489192896, [(1, 36), (2, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 84, 16]]
** centroid: 4, normalized-entropy: 0.634309554640566, [(2, 84), (3, 16)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 98, 7]]
** centroid: 5, normalized-entropy: 0.3533593350214213, [(2, 98), (3, 7)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [103, 25, 0]]
** centroid: 6, normalized-entropy: 0.7124534449668779, [(1, 103), (2, 25)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [64, 25, 0]]
** centroid: 7, normalized-entropy: 0.8566727035015875, [(1, 64), (2, 25)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1763906584078002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1763906584078002, 0.16006197276870082] ***
*** starting iteration: 2; err: [Inf, 0.1763906584078002, 0.16006197276870082] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1763906584078002, 0.16006197276870082, 0.1551741907789164] ***
*** starting iteration: 3; err: [Inf, 0.1763906584078002, 0.16006197276870082, 0.1551741907789164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1763906584078002, 0.16006197276870082, 0.1551741907789164, 0.15195983431247556] ***
*** starting iteration: 4; err: [Inf, 0.1763906584078002, 0.16006197276870082, 0.1551741907789164, 0.15195983431247556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1763906584078002, 0.16006197276870082, 0.1551741907789164, 0.15195983431247556, 0.15037419171961977] ***
*** starting iteration: 5; err: [Inf, 0.1763906584078002, 0.16006197276870082, 0.1551741907789164, 0.15195983431247556, 0.15037419171961977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1763906584078002, 0.16006197276870082, 0.1551741907789164, 0.15195983431247556, 0.15037419171961977, 0.1494145115608464] ***
*** finished computation of 7 references, err: [Inf, 0.1763906584078002, 0.16006197276870082, 0.1551741907789164, 0.15195983431247556, 0.15037419171961977, 0.1494145115608464] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [77, 30, 0]]
** centroid: 1, normalized-entropy: 0.8559596826463527, [(1, 77), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [18, 76, 0]]
** centroid: 2, normalized-entropy: 0.7045767128725937, [(1, 18), (2, 76)]
*** center 3: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 119, 24]]
** centroid: 4, normalized-entropy: 0.6527215895689277, [(2, 119), (3, 24)]
*** center 5: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [109, 10, 0]]
** centroid: 7, normalized-entropy: 0.41623480238728294, [(1, 109), (2, 10)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24615839211054863] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24615839211054863, 0.21373099801004738] ***
*** starting iteration: 2; err: [Inf, 0.24615839211054863, 0.21373099801004738] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24615839211054863, 0.21373099801004738, 0.20494198161750674] ***
*** starting iteration: 3; err: [Inf, 0.24615839211054863, 0.21373099801004738, 0.20494198161750674] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24615839211054863, 0.21373099801004738, 0.20494198161750674, 0.20006560166604123] ***
*** starting iteration: 4; err: [Inf, 0.24615839211054863, 0.21373099801004738, 0.20494198161750674, 0.20006560166604123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24615839211054863, 0.21373099801004738, 0.20494198161750674, 0.20006560166604123, 0.19644298805790888] ***
*** starting iteration: 5; err: [Inf, 0.24615839211054863, 0.21373099801004738, 0.20494198161750674, 0.20006560166604123, 0.19644298805790888] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24615839211054863, 0.21373099801004738, 0.20494198161750674, 0.20006560166604123, 0.19644298805790888, 0.19260797124948945] ***
*** starting iteration: 6; err: [Inf, 0.24615839211054863, 0.21373099801004738, 0.20494198161750674, 0.20006560166604123, 0.19644298805790888, 0.19260797124948945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24615839211054863, 0.21373099801004738, 0.20494198161750674, 0.20006560166604123, 0.19644298805790888, 0.19260797124948945, 0.18781900205285856] ***
*** starting iteration: 7; err: [Inf, 0.24615839211054863, 0.21373099801004738, 0.20494198161750674, 0.20006560166604123, 0.19644298805790888, 0.19260797124948945, 0.18781900205285856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24615839211054863, 0.21373099801004738, 0.20494198161750674, 0.20006560166604123, 0.19644298805790888, 0.19260797124948945, 0.18781900205285856, 0.18675849061353025] ***
*** starting iteration: 8; err: [Inf, 0.24615839211054863, 0.21373099801004738, 0.20494198161750674, 0.20006560166604123, 0.19644298805790888, 0.19260797124948945, 0.18781900205285856, 0.18675849061353025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24615839211054863, 0.21373099801004738, 0.20494198161750674, 0.20006560166604123, 0.19644298805790888, 0.19260797124948945, 0.18781900205285856, 0.18675849061353025, 0.18654059024259179] ***
*** finished computation of 7 references, err: [Inf, 0.24615839211054863, 0.21373099801004738, 0.20494198161750674, 0.20006560166604123, 0.19644298805790888, 0.19260797124948945, 0.18781900205285856, 0.18675849061353025, 0.18654059024259179] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 82, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [76, 34, 0]]
** centroid: 2, normalized-entropy: 0.8921212805771683, [(1, 76), (2, 34)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 89, 19]]
** centroid: 3, normalized-entropy: 0.6710828900205286, [(2, 89), (3, 19)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [76, 19, 0]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(1, 76), (2, 19)]
*** center 5: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [83, 11, 0]]
** centroid: 7, normalized-entropy: 0.5207375686265202, [(1, 83), (2, 11)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.273132872418675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.273132872418675, 0.22244022604541622] ***
*** starting iteration: 2; err: [Inf, 0.273132872418675, 0.22244022604541622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.273132872418675, 0.22244022604541622, 0.21124856270056613] ***
*** starting iteration: 3; err: [Inf, 0.273132872418675, 0.22244022604541622, 0.21124856270056613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.273132872418675, 0.22244022604541622, 0.21124856270056613, 0.20342093853159868] ***
*** starting iteration: 4; err: [Inf, 0.273132872418675, 0.22244022604541622, 0.21124856270056613, 0.20342093853159868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.273132872418675, 0.22244022604541622, 0.21124856270056613, 0.20342093853159868, 0.19425378793521017] ***
*** starting iteration: 5; err: [Inf, 0.273132872418675, 0.22244022604541622, 0.21124856270056613, 0.20342093853159868, 0.19425378793521017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.273132872418675, 0.22244022604541622, 0.21124856270056613, 0.20342093853159868, 0.19425378793521017, 0.1917935384638507] ***
*** starting iteration: 6; err: [Inf, 0.273132872418675, 0.22244022604541622, 0.21124856270056613, 0.20342093853159868, 0.19425378793521017, 0.1917935384638507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.273132872418675, 0.22244022604541622, 0.21124856270056613, 0.20342093853159868, 0.19425378793521017, 0.1917935384638507, 0.19104573180315376] ***
*** finished computation of 7 references, err: [Inf, 0.273132872418675, 0.22244022604541622, 0.21124856270056613, 0.20342093853159868, 0.19425378793521017, 0.1917935384638507, 0.19104573180315376] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [48, 15, 0]]
** centroid: 1, normalized-entropy: 0.7918583525674836, [(1, 48), (2, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [150, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 67, 23]]
** centroid: 3, normalized-entropy: 0.8199653102187632, [(2, 67), (3, 23)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [9, 76, 0]]
** centroid: 4, normalized-entropy: 0.48736957102366285, [(1, 9), (2, 76)]
*** center 5: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [29, 80, 0]]
** centroid: 6, normalized-entropy: 0.8357467426696918, [(1, 29), (2, 80)]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2842683524362508] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2842683524362508, 0.22754128651925246] ***
*** starting iteration: 2; err: [Inf, 0.2842683524362508, 0.22754128651925246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2842683524362508, 0.22754128651925246, 0.200326523964183] ***
*** starting iteration: 3; err: [Inf, 0.2842683524362508, 0.22754128651925246, 0.200326523964183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2842683524362508, 0.22754128651925246, 0.200326523964183, 0.19201433535936152] ***
*** starting iteration: 4; err: [Inf, 0.2842683524362508, 0.22754128651925246, 0.200326523964183, 0.19201433535936152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2842683524362508, 0.22754128651925246, 0.200326523964183, 0.19201433535936152, 0.18791419324483247] ***
*** starting iteration: 5; err: [Inf, 0.2842683524362508, 0.22754128651925246, 0.200326523964183, 0.19201433535936152, 0.18791419324483247] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2842683524362508, 0.22754128651925246, 0.200326523964183, 0.19201433535936152, 0.18791419324483247, 0.18547432367664426] ***
*** starting iteration: 6; err: [Inf, 0.2842683524362508, 0.22754128651925246, 0.200326523964183, 0.19201433535936152, 0.18791419324483247, 0.18547432367664426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2842683524362508, 0.22754128651925246, 0.200326523964183, 0.19201433535936152, 0.18791419324483247, 0.18547432367664426, 0.18513462222928273] ***
*** finished computation of 7 references, err: [Inf, 0.2842683524362508, 0.22754128651925246, 0.200326523964183, 0.19201433535936152, 0.18791419324483247, 0.18547432367664426, 0.18513462222928273] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [8, 89, 0]]
** centroid: 1, normalized-entropy: 0.4108378385169277, [(1, 8), (2, 89)]
*** center 2: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [31, 64, 0]]
** centroid: 3, normalized-entropy: 0.9111178649415465, [(1, 31), (2, 64)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 80, 24]]
** centroid: 4, normalized-entropy: 0.7793498372920851, [(2, 80), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [104, 2, 0]]
** centroid: 5, normalized-entropy: 0.13503620280212753, [(1, 104), (2, 2)]
*** center 6: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 21)
[0.9430118741495986, 0.9370208531885179, 0.9320008631385877, 0.9290128451805099, 0.9260308212404021, 0.9239928551305797, 0.9209958461455466, 0.918013822205439, 0.916014817212422, 0.9159998321674969, 0.9150288012563461, 0.9150048251844659, 0.9080008151864439, 0.897993802185419, 0.8940077802353251, 0.8890177602752453, 0.8860567153980328, 0.8860057662452872, 0.884075692458926, 0.8659857462252671, 0.7870055684426941]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9430118741495986
finished with 21
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.2222471998105757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2222471998105757, 0.18879605195112525] ***
*** finished computation of 7 references, err: [Inf, 0.2222471998105757, 0.18879605195112525] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [37, 115, 0]]
** centroid: 1, normalized-entropy: 0.8006832345825704, [(1, 37), (2, 115)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [99, 23, 0]]
** centroid: 2, normalized-entropy: 0.6983747934875366, [(1, 99), (2, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [146, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 60, 33]]
** centroid: 4, normalized-entropy: 0.9383153522334071, [(2, 60), (3, 33)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [175, 15, 0]]
** centroid: 5, normalized-entropy: 0.39845927409523557, [(1, 175), (2, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [156, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 141, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22191855894215404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22191855894215404, 0.19195075453072785] ***
*** finished computation of 7 references, err: [Inf, 0.22191855894215404, 0.19195075453072785] ***
*** center 1: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 5, 0]]
** centroid: 2, normalized-entropy: 0.462749058578174, [(1, 46), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 63, 14]]
** centroid: 3, normalized-entropy: 0.6840384356390419, [(2, 63), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 29, 0]]
** centroid: 5, normalized-entropy: 0.8991045208483789, [(1, 63), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [42, 36, 0]]
** centroid: 6, normalized-entropy: 0.9957274520849256, [(1, 42), (2, 36)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 52, 5]]
** centroid: 7, normalized-entropy: 0.4288109647301171, [(2, 52), (3, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24287099117785693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24287099117785693, 0.1929985195584595] ***
*** finished computation of 7 references, err: [Inf, 0.24287099117785693, 0.1929985195584595] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [88, 5, 0]]
** centroid: 1, normalized-entropy: 0.30217361847879526, [(1, 88), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 3, 0]]
** centroid: 2, normalized-entropy: 0.2795055456366802, [(1, 59), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 48, 14]]
** centroid: 3, normalized-entropy: 0.7706290693639406, [(2, 48), (3, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 36, 0]]
** centroid: 4, normalized-entropy: 0.9807983646944296, [(1, 50), (2, 36)]
*** center 5: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [39, 30, 0]]
** centroid: 6, normalized-entropy: 0.9876925088958032, [(1, 39), (2, 30)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 53, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24186233363300563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24186233363300563, 0.19312534781172871] ***
*** finished computation of 7 references, err: [Inf, 0.24186233363300563, 0.19312534781172871] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [8, 55, 0]]
** centroid: 1, normalized-entropy: 0.5491087450260074, [(1, 8), (2, 55)]
*** center 2: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 6, 0]]
** centroid: 4, normalized-entropy: 0.4220005168831531, [(1, 64), (2, 6)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 38, 18]]
** centroid: 5, normalized-entropy: 0.9059282160429994, [(2, 38), (3, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [15, 76, 0]]
** centroid: 7, normalized-entropy: 0.6457523329916605, [(1, 15), (2, 76)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.221206801392138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.221206801392138, 0.19277156170085072] ***
*** finished computation of 7 references, err: [Inf, 0.221206801392138, 0.19277156170085072] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 38, 19]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 38), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 10, 0]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(1, 55), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [15, 39, 0]]
** centroid: 4, normalized-entropy: 0.8524051786494784, [(1, 15), (2, 39)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [15, 85, 0]]
** centroid: 5, normalized-entropy: 0.6098403047164005, [(1, 15), (2, 85)]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2373057578355074] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2373057578355074, 0.19199128410965205] ***
*** finished computation of 7 references, err: [Inf, 0.2373057578355074, 0.19199128410965205] ***
*** center 1: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 42, 19]]
** centroid: 2, normalized-entropy: 0.8948692308065576, [(2, 42), (3, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [68, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [30, 22, 0]]
** centroid: 4, normalized-entropy: 0.9828586897127057, [(1, 30), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [35, 61, 0]]
** centroid: 5, normalized-entropy: 0.9464220508835531, [(1, 35), (2, 61)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 47, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2236507945917547] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2236507945917547, 0.18918740766309203] ***
*** finished computation of 7 references, err: [Inf, 0.2236507945917547, 0.18918740766309203] ***
*** center 1: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 28, 17]]
** centroid: 2, normalized-entropy: 0.9564574047992596, [(2, 28), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [62, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 6, 0]]
** centroid: 4, normalized-entropy: 0.4637773498877517, [(1, 55), (2, 6)]
*** center 5: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 82, 0]]
** centroid: 6, normalized-entropy: 0.3591016256485496, [(1, 6), (2, 82)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 63, 0]]
** centroid: 7, normalized-entropy: 0.32625881462949274, [(1, 4), (2, 63)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21622679752483964] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21622679752483964, 0.19597211413830518] ***
*** finished computation of 7 references, err: [Inf, 0.21622679752483964, 0.19597211413830518] ***
*** center 1: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 8, 0]]
** centroid: 2, normalized-entropy: 0.5983474220910422, [(1, 47), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 35, 17]]
** centroid: 3, normalized-entropy: 0.9117517586347538, [(2, 35), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 36, 0]]
** centroid: 5, normalized-entropy: 0.9910760598382222, [(1, 45), (2, 36)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [48, 54, 0]]
** centroid: 6, normalized-entropy: 0.9975025463691153, [(1, 48), (2, 54)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 54, 2]]
** centroid: 7, normalized-entropy: 0.2222848306856879, [(2, 54), (3, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21956764366850257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21956764366850257, 0.18992998922616244] ***
*** finished computation of 7 references, err: [Inf, 0.21956764366850257, 0.18992998922616244] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [43, 53, 0]]
** centroid: 1, normalized-entropy: 0.9921586617207422, [(1, 43), (2, 53)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 11, 0]]
** centroid: 2, normalized-entropy: 0.6329208984823799, [(1, 58), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 48, 13]]
** centroid: 4, normalized-entropy: 0.7473944462440388, [(2, 48), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 52, 0]]
** centroid: 5, normalized-entropy: 0.8524051786494784, [(1, 20), (2, 52)]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2289168675262481] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2289168675262481, 0.19421753759309648] ***
*** finished computation of 7 references, err: [Inf, 0.2289168675262481, 0.19421753759309648] ***
*** center 1: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 49, 21]]
** centroid: 2, normalized-entropy: 0.8812908992306927, [(2, 49), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 5, 0]]
** centroid: 3, normalized-entropy: 0.46899559358928133, [(1, 45), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 26, 0]]
** centroid: 4, normalized-entropy: 0.8841151220488478, [(1, 60), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [36, 20, 0]]
** centroid: 5, normalized-entropy: 0.940285958670631, [(1, 36), (2, 20)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [79, 8, 0]]
** centroid: 6, normalized-entropy: 0.4429586785384856, [(1, 79), (2, 8)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 76, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24589183747582138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24589183747582138, 0.19546285404637456] ***
*** finished computation of 7 references, err: [Inf, 0.24589183747582138, 0.19546285404637456] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [48, 21, 0]]
** centroid: 1, normalized-entropy: 0.8865408928220899, [(1, 48), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 24, 0]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(1, 48), (2, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 78, 15]]
** centroid: 4, normalized-entropy: 0.6373874992221911, [(2, 78), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 74, 0]]
** centroid: 5, normalized-entropy: 0.8667256130949592, [(1, 30), (2, 74)]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2457319673113525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2457319673113525, 0.19200482180528342] ***
*** finished computation of 7 references, err: [Inf, 0.2457319673113525, 0.19200482180528342] ***
*** center 1: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 34, 13]]
** centroid: 2, normalized-entropy: 0.8507707040532602, [(2, 34), (3, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [11, 68, 0]]
** centroid: 4, normalized-entropy: 0.5822463050121238, [(1, 11), (2, 68)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 15, 0]]
** centroid: 5, normalized-entropy: 0.8047175193210769, [(1, 46), (2, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 61, 0]]
** centroid: 7, normalized-entropy: 0.5175827525559071, [(1, 8), (2, 61)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23282290522009133] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23282290522009133, 0.19065549301961437] ***
*** finished computation of 7 references, err: [Inf, 0.23282290522009133, 0.19065549301961437] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 68, 11]]
** centroid: 1, normalized-entropy: 0.5822463050121238, [(2, 68), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [41, 9, 0]]
** centroid: 3, normalized-entropy: 0.6800770457282798, [(1, 41), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [80, 7, 0]]
** centroid: 4, normalized-entropy: 0.40379715049939235, [(1, 80), (2, 7)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [81, 16, 0]]
** centroid: 5, normalized-entropy: 0.6460174789535751, [(1, 81), (2, 16)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 52, 5]]
** centroid: 6, normalized-entropy: 0.4288109647301171, [(2, 52), (3, 5)]
*** center 7: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.224778816357255] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.224778816357255, 0.1901138270460069] ***
*** finished computation of 7 references, err: [Inf, 0.224778816357255, 0.1901138270460069] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [7, 67, 0]]
** centroid: 1, normalized-entropy: 0.45162282218200417, [(1, 7), (2, 67)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 14, 0]]
** centroid: 2, normalized-entropy: 0.7516499461153354, [(1, 51), (2, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 62, 20]]
** centroid: 4, normalized-entropy: 0.8014698931335286, [(2, 62), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [60, 31, 0]]
** centroid: 5, normalized-entropy: 0.9254482516437047, [(1, 60), (2, 31)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23832338932156563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23832338932156563, 0.18978021294996142] ***
*** finished computation of 7 references, err: [Inf, 0.23832338932156563, 0.18978021294996142] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [12, 64, 0]]
** centroid: 1, normalized-entropy: 0.6292492238560344, [(1, 12), (2, 64)]
*** center 2: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [77, 3, 0]]
** centroid: 3, normalized-entropy: 0.2307099556914763, [(1, 77), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [67, 5, 0]]
** centroid: 4, normalized-entropy: 0.3638469981769295, [(1, 67), (2, 5)]
*** center 5: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 29, 16]]
** centroid: 6, normalized-entropy: 0.9389320105807949, [(2, 29), (3, 16)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 69, 0]]
** centroid: 7, normalized-entropy: 0.5479900080939728, [(1, 10), (2, 69)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23380745187029242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23380745187029242, 0.19774215194489808] ***
*** finished computation of 7 references, err: [Inf, 0.23380745187029242, 0.19774215194489808] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 94, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [62, 27, 0]]
** centroid: 3, normalized-entropy: 0.8853723770068483, [(1, 62), (2, 27)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [35, 23, 0]]
** centroid: 4, normalized-entropy: 0.9688977092243805, [(1, 35), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [85, 4, 0]]
** centroid: 5, normalized-entropy: 0.2645173683629748, [(1, 85), (2, 4)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 19, 18]]
** centroid: 6, normalized-entropy: 0.9994730201859837, [(2, 19), (3, 18)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [63, 7, 0]]
** centroid: 7, normalized-entropy: 0.46899559358928133, [(1, 63), (2, 7)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24700679109618068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24700679109618068, 0.19749572374089622] ***
*** finished computation of 7 references, err: [Inf, 0.24700679109618068, 0.19749572374089622] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [34, 45, 0]]
** centroid: 1, normalized-entropy: 0.985969027451193, [(1, 34), (2, 45)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 3, 0]]
** centroid: 2, normalized-entropy: 0.32275695889739825, [(1, 48), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 70, 18]]
** centroid: 4, normalized-entropy: 0.7309263775906009, [(2, 70), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [39, 6, 0]]
** centroid: 5, normalized-entropy: 0.5665095065529052, [(1, 39), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [52, 55, 0]]
** centroid: 6, normalized-entropy: 0.9994328781096228, [(1, 52), (2, 55)]
*** center 7: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21936880123522132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21936880123522132, 0.1849231074154377] ***
*** finished computation of 7 references, err: [Inf, 0.21936880123522132, 0.1849231074154377] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [19, 60, 0]]
** centroid: 1, normalized-entropy: 0.7958812735955936, [(1, 19), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 6, 0]]
** centroid: 2, normalized-entropy: 0.4637773498877517, [(1, 55), (2, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 37, 18]]
** centroid: 4, normalized-entropy: 0.9121156307204275, [(2, 37), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [82, 8, 0]]
** centroid: 5, normalized-entropy: 0.43275015878875417, [(1, 82), (2, 8)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23837818223983048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23837818223983048, 0.19731260662525893] ***
*** finished computation of 7 references, err: [Inf, 0.23837818223983048, 0.19731260662525893] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [47, 24, 0]]
** centroid: 1, normalized-entropy: 0.9229192878686723, [(1, 47), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 20, 0]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(1, 40), (2, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [13, 84, 0]]
** centroid: 4, normalized-entropy: 0.5683625344629001, [(1, 13), (2, 84)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 53, 15]]
** centroid: 5, normalized-entropy: 0.7612401496918493, [(2, 53), (3, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21657151781767606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21657151781767606, 0.19564008024707435] ***
*** finished computation of 7 references, err: [Inf, 0.21657151781767606, 0.19564008024707435] ***
*** center 1: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 40, 20]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 40), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 18, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 54), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [41, 35, 0]]
** centroid: 4, normalized-entropy: 0.9954993847275952, [(1, 41), (2, 35)]
*** center 5: selecting labels [2] (freq >= 2) [from [1, 85, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [73, 4, 0]]
** centroid: 7, normalized-entropy: 0.29461520565280713, [(1, 73), (2, 4)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2412597228512168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2412597228512168, 0.19346429671533405] ***
*** finished computation of 7 references, err: [Inf, 0.2412597228512168, 0.19346429671533405] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [71, 12, 0]]
** centroid: 1, normalized-entropy: 0.5961045458832345, [(1, 71), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 4, 0]]
** centroid: 2, normalized-entropy: 0.4199210973757179, [(1, 43), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 53, 16]]
** centroid: 3, normalized-entropy: 0.7812812090702043, [(2, 53), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [73, 18, 0]]
** centroid: 5, normalized-entropy: 0.7175106531195438, [(1, 73), (2, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [50, 16, 0]]
** centroid: 6, normalized-entropy: 0.7990485210442682, [(1, 50), (2, 16)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 71, 1]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22532571735978127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22532571735978127, 0.1931351943332702] ***
*** finished computation of 7 references, err: [Inf, 0.22532571735978127, 0.1931351943332702] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [119, 3, 0]]
** centroid: 1, normalized-entropy: 0.16648978563002756, [(1, 119), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 34, 17]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 34), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [53, 9, 0]]
** centroid: 4, normalized-entropy: 0.5975977764379984, [(1, 53), (2, 9)]
*** center 5: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 62, 0]]
** centroid: 7, normalized-entropy: 0.581321498763703, [(1, 10), (2, 62)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2602622837051749] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2602622837051749, 0.1940749922450632] ***
*** finished computation of 7 references, err: [Inf, 0.2602622837051749, 0.1940749922450632] ***
*** center 1: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 14, 0]]
** centroid: 2, normalized-entropy: 0.7051819722888517, [(1, 59), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 66, 15]]
** centroid: 3, normalized-entropy: 0.6912898694057888, [(2, 66), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 39, 0]]
** centroid: 5, normalized-entropy: 0.9721439323621084, [(1, 58), (2, 39)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 62, 0]]
** centroid: 6, normalized-entropy: 0.47357292491745173, [(1, 7), (2, 62)]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23487270595133306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23487270595133306, 0.1894920604871586] ***
*** finished computation of 7 references, err: [Inf, 0.23487270595133306, 0.1894920604871586] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 58, 12]]
** centroid: 1, normalized-entropy: 0.6609623351442084, [(2, 58), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 11, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 44), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [67, 19, 0]]
** centroid: 4, normalized-entropy: 0.7618624463753669, [(1, 67), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 9, 0]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(1, 45), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [71, 17, 0]]
** centroid: 6, normalized-entropy: 0.7080803256135676, [(1, 71), (2, 17)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 69, 2]]
** centroid: 7, normalized-entropy: 0.18512476010054582, [(2, 69), (3, 2)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22314353044517338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22314353044517338, 0.18661602980829775] ***
*** finished computation of 7 references, err: [Inf, 0.22314353044517338, 0.18661602980829775] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 38, 16]]
** centroid: 2, normalized-entropy: 0.876716288999464, [(2, 38), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 7, 0]]
** centroid: 3, normalized-entropy: 0.43949698692151346, [(1, 70), (2, 7)]
*** center 4: selecting labels [1] (freq >= 2) [from [57, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 54, 0]]
** centroid: 5, normalized-entropy: 0.8554508105601307, [(1, 21), (2, 54)]
*** center 6: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 65, 0]]
** centroid: 7, normalized-entropy: 0.4986751363204345, [(1, 8), (2, 65)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2188551687784493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2188551687784493, 0.18695563216041775] ***
*** finished computation of 7 references, err: [Inf, 0.2188551687784493, 0.18695563216041775] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 85, 0]]
** centroid: 1, normalized-entropy: 0.3095434291503252, [(1, 5), (2, 85)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 7, 0]]
** centroid: 2, normalized-entropy: 0.5564215672884282, [(1, 47), (2, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 28, 0]]
** centroid: 4, normalized-entropy: 0.9063701886077911, [(1, 59), (2, 28)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 53, 18]]
** centroid: 5, normalized-entropy: 0.8168114277045246, [(2, 53), (3, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [44, 3, 0]]
** centroid: 7, normalized-entropy: 0.3424637724817958, [(1, 44), (2, 3)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22780362801253795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22780362801253795, 0.19266236855275928] ***
*** finished computation of 7 references, err: [Inf, 0.22780362801253795, 0.19266236855275928] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [9, 80, 0]]
** centroid: 1, normalized-entropy: 0.4725472219330293, [(1, 9), (2, 80)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [38, 17, 0]]
** centroid: 2, normalized-entropy: 0.8921212805771683, [(1, 38), (2, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 71, 17]]
** centroid: 4, normalized-entropy: 0.7080803256135676, [(2, 71), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 5, 0]]
** centroid: 5, normalized-entropy: 0.48890859144051524, [(1, 42), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [63, 14, 0]]
** centroid: 6, normalized-entropy: 0.6840384356390419, [(1, 63), (2, 14)]
*** center 7: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23310665041394532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23310665041394532, 0.19622412334545516] ***
*** finished computation of 7 references, err: [Inf, 0.23310665041394532, 0.19622412334545516] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [4, 84, 0]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(1, 4), (2, 84)]
*** center 2: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 25, 0]]
** centroid: 3, normalized-entropy: 0.9530483471581301, [(1, 42), (2, 25)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [52, 16, 0]]
** centroid: 4, normalized-entropy: 0.787126586201269, [(1, 52), (2, 16)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 48, 15]]
** centroid: 5, normalized-entropy: 0.7918583525674836, [(2, 48), (3, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [90, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23250562590546905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23250562590546905, 0.19367368810810148] ***
*** finished computation of 7 references, err: [Inf, 0.23250562590546905, 0.19367368810810148] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [58, 42, 0]]
** centroid: 1, normalized-entropy: 0.9814538950336533, [(1, 58), (2, 42)]
*** center 2: selecting labels [1] (freq >= 2) [from [37, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 55, 15]]
** centroid: 3, normalized-entropy: 0.7495952572594798, [(2, 55), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [60, 4, 0]]
** centroid: 5, normalized-entropy: 0.3372900666170139, [(1, 60), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 77, 0]]
** centroid: 6, normalized-entropy: 0.17033057560105982, [(1, 2), (2, 77)]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 1, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2187370854280889] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2187370854280889, 0.1923081145202741] ***
*** finished computation of 7 references, err: [Inf, 0.2187370854280889, 0.1923081145202741] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 92, 18]]
** centroid: 1, normalized-entropy: 0.6429383500409613, [(2, 92), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 17, 0]]
** centroid: 4, normalized-entropy: 0.7885131605379784, [(1, 55), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 12, 0]]
** centroid: 5, normalized-entropy: 0.5916727785823274, [(1, 72), (2, 12)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [16, 56, 0]]
** centroid: 7, normalized-entropy: 0.7642045065086204, [(1, 16), (2, 56)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23134115464240312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23134115464240312, 0.191073193654418] ***
*** finished computation of 7 references, err: [Inf, 0.23134115464240312, 0.191073193654418] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 8, 0]]
** centroid: 2, normalized-entropy: 0.5032583347756457, [(1, 64), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 53, 15]]
** centroid: 3, normalized-entropy: 0.7612401496918493, [(2, 53), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 37, 0]]
** centroid: 5, normalized-entropy: 0.9420365814945866, [(1, 66), (2, 37)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 27, 0]]
** centroid: 6, normalized-entropy: 0.8680403986166402, [(1, 11), (2, 27)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 61, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 354,3 => 33,1 => 613), Dict(2 => 396,3 => 33,1 => 571))
[ Info: ===== scores for single classifier: {"micro_f1":0.912,"precision":0.912,"recall":0.912,"macro_recall":0.875529963971295,"macro_f1":0.8277940110386174,"accuracy":0.912,"class_f1":{"2":0.8835978835978836,"3":0.6506024096385542,"1":0.9491817398794143},"class_precision":{"2":0.9277777777777778,"3":0.54,"1":0.9338983050847458},"class_recall":{"2":0.8434343434343434,"3":0.8181818181818182,"1":0.9649737302977233}}
[ Info: ===== scores for 1: {"micro_f1":0.977,"precision":0.977,"recall":0.977,"macro_recall":0.9726703697807025,"macro_f1":0.9650732206299679,"accuracy":0.977,"class_f1":{"2":0.970550576184379,"3":0.9411764705882354,"1":0.9834926151172894},"class_precision":{"2":0.9844155844155844,"3":0.9142857142857143,"1":0.9758620689655172},"class_recall":{"2":0.9570707070707071,"3":0.9696969696969697,"1":0.9912434325744308}}
[ Info: ===== scores for 5: {"micro_f1":0.983,"precision":0.983,"recall":0.983,"macro_recall":0.9597183156727814,"macro_f1":0.9637223198295691,"accuracy":0.983,"class_f1":{"2":0.9786163522012579,"3":0.923076923076923,"1":0.9894736842105264},"class_precision":{"2":0.974937343358396,"3":0.9375,"1":0.9912126537785588},"class_recall":{"2":0.9823232323232324,"3":0.9090909090909091,"1":0.9877408056042032}}
[ Info: ===== scores for 7: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9470242412449067,"macro_f1":0.9462983376067141,"accuracy":0.978,"class_f1":{"2":0.9724310776942355,"3":0.8787878787878788,"1":0.9876760563380281},"class_precision":{"2":0.9651741293532339,"3":0.8787878787878788,"1":0.9929203539823008},"class_recall":{"2":0.9797979797979798,"3":0.8787878787878788,"1":0.9824868651488616}}
[ Info: ===== scores for 9: {"micro_f1":0.976,"precision":0.976,"recall":0.976,"macro_recall":0.9455987192414512,"macro_f1":0.9368401031627727,"accuracy":0.976,"class_f1":{"2":0.9699248120300752,"3":0.8529411764705883,"1":0.9876543209876543},"class_precision":{"2":0.9626865671641791,"3":0.8285714285714286,"1":0.9946714031971581},"class_recall":{"2":0.9772727272727273,"3":0.8787878787878788,"1":0.9807355516637478}}
[ Info: ===== scores for 11: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9565414801842121,"macro_f1":0.9435074440517554,"accuracy":0.978,"class_f1":{"2":0.9724310776942355,"3":0.8695652173913043,"1":0.9885260370697264},"class_precision":{"2":0.9651741293532339,"3":0.8333333333333334,"1":0.99644128113879},"class_recall":{"2":0.9797979797979798,"3":0.9090909090909091,"1":0.9807355516637478}}
(score = 0.977, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.983, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.983, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.988, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.988, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.987, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.987, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.988,"k":5,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.988,"precision":0.988,"recall":0.988,"macro_recall":0.982187608720008,"macro_f1":0.9866204561356854,"accuracy":0.988,"class_f1":{"2":0.9848866498740554,"3":0.9846153846153847,"1":0.9903593339176161},"class_precision":{"2":0.9824120603015075,"3":1.0,"1":0.9912280701754386},"class_recall":{"2":0.9873737373737373,"3":0.9696969696969697,"1":0.989492119089317}}
Test Summary: | Pass  Total
AKNC          |    8      8
[429, 1, 7, 1, 2, 1, 2, 3, 1, 3, 4, 1, 4, 19, 4, 2, 8, 4, 10, 2, 19, 38, 6, 1, 15, 26, 9, 1, 42, 1, 6, 20, 17, 11, 13, 6, 2, 18, 17, 2, 17, 6, 1, 33, 4, 12, 10, 27, 13, 18, 6, 26, 22, 34, 11, 10, 5, 1, 4, 6, 9, 16, 41, 9, 8, 2, 1, 15, 8, 4, 32, 20, 14, 55, 25, 31, 47, 54, 13, 8, 5, 13, 6, 30, 6, 8, 25, 3, 55, 2, 20, 9, 293, 8, 210, 7, 14, 27, 30, 33, 1, 10, 13, 25, 7, 37, 38, 5, 1, 10, 12, 11, 14, 10, 2, 10, 7, 10, 210, 11, 6, 5, 10, 8, 14, 47, 13, 8, 12, 7, 141, 7, 9, 168, 11, 15, 13, 3, 15, 93, 225, 9, 17, 3, 33, 35, 38, 7, 21, 45, 21, 68, 125, 4, 5, 21, 4, 7, 149, 1, 45, 8, 41, 2, 6, 6, 2, 4, 21, 5, 63, 99, 29, 60, 14, 5, 50, 16, 237, 10, 10, 6, 511, 4, 5, 13, 50, 17, 1, 10, 48, 23, 58, 18, 10, 31, 46, 142, 23, 6, 14, 26, 54, 40, 20, 4, 3, 5, 14, 23, 51, 1, 22, 30, 29, 55, 20, 12, 16, 17, 48, 7, 28, 2, 10, 2, 52, 26, 4, 7, 28, 87, 51, 6, 37, 9, 5, 24, 19, 47, 38, 29, 15, 17, 53, 15, 27, 75, 153, 103, 245, 14, 226, 55, 5, 323, 8, 4, 16, 21, 83, 22, 11, 36, 3, 11, 139, 7, 15, 24, 54, 1, 35, 4, 128, 38, 9, 105, 240, 105, 144, 3, 14, 16, 26, 23, 19, 8, 15, 7, 16, 16, 109, 3, 4, 9, 8, 10, 2, 179]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6129999999999997, speedup = 0.3235045775186325, eval_ratio = 0.064595)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.385556175595238,"recall":0.3758680555555554,"f1":null,"seconds":8.884631097316742e-5,"exhaustive_search_seconds":0.00021786056458950043,"evaluations":435.3828125,"distances_sum":1721.9160475236968}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5503472222222223,"recall":0.5503472222222223,"f1":0.5503472222222223,"seconds":0.0002079792320728302,"exhaustive_search_seconds":0.00021786056458950043,"evaluations":548.4921875,"distances_sum":1662.5102130522112}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6553819444444443,"recall":0.6553819444444443,"f1":0.6553819444444443,"seconds":0.00026909448206424713,"exhaustive_search_seconds":0.00021786056458950043,"evaluations":663.09375,"distances_sum":1613.4099729421519}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7473958333333329,"recall":0.7473958333333329,"f1":0.7473958333333329,"seconds":0.00024826452136039734,"exhaustive_search_seconds":0.00021786056458950043,"evaluations":782.5703125,"distances_sum":1583.3878922318752}
KCenters.DeloneInvIndex> reached performance {"precision":0.8046874999999994,"recall":0.8046874999999994,"f1":0.8046874999999994,"seconds":0.0003001987934112549,"exhaustive_search_seconds":0.00021786056458950043,"evaluations":884.6171875,"distances_sum":1564.9600449526756}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7489999999999994, speedup = 1.2800021044878203, eval_ratio = 0.08430800000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
