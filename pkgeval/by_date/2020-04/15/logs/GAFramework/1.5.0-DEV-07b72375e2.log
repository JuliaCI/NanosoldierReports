Julia Version 1.5.0-DEV.633
Commit 07b72375e2 (2020-04-15 15:23 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.2.4
Updating `~/.julia/environments/v1.5/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [5789e2e9] + FileIO v1.2.4
  [91ca9103] + GAFramework v0.4.1
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_Wmw5fE/Project.toml`
  [5789e2e9] FileIO v1.2.4
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_Wmw5fE/Manifest.toml`
  [5789e2e9] FileIO v1.2.4
  [91ca9103] GAFramework v0.4.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21722762110656077
curgen: 20 fitness: 0.21722762110656077
curgen: 30 fitness: 0.2172336272903707
curgen: 40 fitness: 0.2172336272903707
curgen: 50 fitness: 0.2172336272903707
CoordinateCreature{Array{Float64,1}}([-0.22255271881559535], -0.2172336272903707) -0.22255271881559535 -0.2172336272903707
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2581759462283015
curgen: 100 fitness: 3.258295792794169
curgen: 150 fitness: 3.258328170774918
curgen: 200 fitness: 3.258367358305594
curgen: 250 fitness: 3.2583912615073762
curgen: 300 fitness: 3.258409344658069
curgen: 350 fitness: 3.258409344658069
curgen: 400 fitness: 3.258441041611749
curgen: 450 fitness: 3.25847953436542
curgen: 500 fitness: 3.25847953436542
CoordinateCreature{Array{Float64,1}}([0.2226051363199904, -0.22252906787863264, -0.22260267800052141, -0.22276426905726832, -0.22268017438963744, -0.2222777546360003, 0.22269707741291161, 0.2225651453180056, -0.2226092875694531, 0.22227353568302988, 0.2226692739707811, 0.2226286479660984, 0.22237208725531063, -0.22304823769045595, -0.22267063829346512], -3.25847953436542) [0.2226051363199904, -0.22252906787863264, -0.22260267800052141, -0.22276426905726832, -0.22268017438963744, -0.2222777546360003, 0.22269707741291161, 0.2225651453180056, -0.2226092875694531, 0.22227353568302988, 0.2226692739707811, 0.2226286479660984, 0.22237208725531063, -0.22304823769045595, -0.22267063829346512] -3.25847953436542
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.001444511474119281
curgen: 100 fitness: -0.0010865218937112786
curgen: 150 fitness: -0.0010865218937112786
curgen: 200 fitness: -0.0009493646151952362
curgen: 250 fitness: -0.0009493646151952362
curgen: 300 fitness: -0.0009493646151952362
curgen: 350 fitness: -0.0009493646151952362
curgen: 400 fitness: -0.0009493646151952362
curgen: 450 fitness: -0.0009493646151952362
curgen: 500 fitness: -0.000931778598243227
CoordinateCreature{Array{Float64,1}}([-0.00020697950307441105, -2.8218370267064032e-5, -0.00012025657048666131, -0.00015284286563270772, -0.00047566325340144905, -1.7131145104780008e-5, 0.0002912657864542639, 0.0005129414073143319, -0.0012414916544173425, -1.3528605400736984e-5, 0.00024646994871377467, 0.0013716497866714911, 0.00030495975658530704, 0.0004252644871545362, -0.000532178274579283], 0.000931778598243227) [-0.00020697950307441105, -2.8218370267064032e-5, -0.00012025657048666131, -0.00015284286563270772, -0.00047566325340144905, -1.7131145104780008e-5, 0.0002912657864542639, 0.0005129414073143319, -0.0012414916544173425, -1.3528605400736984e-5, 0.00024646994871377467, 0.0013716497866714911, 0.00030495975658530704, 0.0004252644871545362, -0.000532178274579283] 0.000931778598243227
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
