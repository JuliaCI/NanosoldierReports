Julia Version 1.5.0-DEV.650
Commit dd738f9ee8 (2020-04-19 16:28 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataAPI ───────────────────── v1.2.0
  Installed KCenters ──────────────────── v0.2.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed SimilaritySearch ──────────── v0.3.19
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Tables ────────────────────── v1.0.4
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed Missings ──────────────────── v0.4.3
  Installed MLDataUtils ───────────────── v0.5.1
  Installed MLDataPattern ─────────────── v0.5.1
  Installed DataFrames ────────────────── v0.20.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Compat ────────────────────── v3.8.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed OrderedCollections ────────── v1.1.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed InvertedIndices ───────────── v1.0.0
  Installed Parsers ───────────────────── v1.0.2
  Installed JSON ──────────────────────── v0.21.0
  Installed DataStructures ────────────── v0.17.13
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.2.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.13
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_lEdYOU/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_lEdYOU/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.2.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.13
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9326678744951884
[ Info: 0.8302954188982645
[ Info: 0.5553481129308542
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3226904027412335
mean(cdnet.distances) = 0.392313431451718
mean(crand.distances) = 0.3424704946329196
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.580078125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.580078125,"f1":0.7213794885669891,"seconds":4.628673195838928e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":7.53125,"distances_sum":1730.8507042072572}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8611638361638371,"seconds":5.539506673812866e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.40625,"distances_sum":2449.866039674357}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4326171875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4326171875,"f1":null,"seconds":4.045665264129639e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":6.8203125,"distances_sum":1212.7185819623628}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7646484375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7646484375,"f1":0.8611638361638371,"seconds":5.539506673812866e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.40625,"distances_sum":2449.866039674357}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9391082875457879,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.9140625,"distances_sum":3076.0757620771205}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9375801282051287,"seconds":6.120651960372925e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.9453125,"distances_sum":3059.505430459463}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.927781593406594,"seconds":6.152316927909851e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.875,"distances_sum":2959.6636109984743}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8638283591408601,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.296875,"distances_sum":2466.9833811256385}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9064477189477198,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.6796875,"distances_sum":2792.945388511982}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9391082875457879,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.9140625,"distances_sum":3076.0757620771205}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9707589285714291,"seconds":6.688758730888367e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.984375,"distances_sum":3374.9952753634893}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9675251831501837,"seconds":6.3963234424591064e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.9921875,"distances_sum":3345.3681392534113}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9680288461538465,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.9609375,"distances_sum":3367.939619905346}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9678228021978025,"seconds":6.293877959251404e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.953125,"distances_sum":3369.79345028943}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9750400641025643,"seconds":6.619840860366821e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.9921875,"distances_sum":3430.2432762733206}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9800251831501834,"seconds":6.323680281639099e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.984375,"distances_sum":3463.5441184520923}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9638671875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9800251831501834,"seconds":6.323680281639099e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.984375,"distances_sum":3463.5441184520923}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9638671875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9800251831501834,"seconds":6.323680281639099e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.984375,"distances_sum":3463.5441184520923}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.224609375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.224609375,"f1":null,"seconds":3.5781413316726685e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":5.375,"distances_sum":638.6407181026204}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.369140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.369140625,"f1":null,"seconds":3.67872416973114e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":5.625,"distances_sum":997.7851865210939}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.369140625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.369140625,"f1":null,"seconds":3.67872416973114e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":5.625,"distances_sum":997.7851865210939}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.693359375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.693359375,"f1":0.8081168831168839,"seconds":5.010515451431274e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.8046875,"distances_sum":2026.8565993024074}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9186500999001005,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.4453125,"distances_sum":2686.509597485789}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8633850524475533,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.140625,"distances_sum":2336.7917814307425}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.859375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.859375,"f1":0.9186500999001005,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.4453125,"distances_sum":2686.509597485789}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9564789377289381,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.7578125,"distances_sum":3055.9401304278003}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9514194139194142,"seconds":5.763024091720581e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.734375,"distances_sum":3023.541119258576}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9209800616050621,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.40625,"distances_sum":2760.129410442414}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9564789377289381,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.7578125,"distances_sum":3055.9401304278003}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9228515625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9564789377289381,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.7578125,"distances_sum":3055.9401304278003}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8572437978687987,"seconds":5.172565579414368e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.0234375,"distances_sum":2379.923398409245}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4111328125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4111328125,"f1":null,"seconds":3.5725533962249756e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":5.9609375,"distances_sum":1170.6157032664491}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2197265625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2197265625,"f1":null,"seconds":2.99699604511261e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":5.5546875,"distances_sum":667.7184707882221}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8572437978687987,"seconds":5.172565579414368e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.0234375,"distances_sum":2379.923398409245}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9230940934065941,"seconds":5.811452865600586e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.5546875,"distances_sum":2749.7307123310134}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9605540293040296,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8828125,"distances_sum":3095.548290207765}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9378491300366306,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.625,"distances_sum":2875.6294694595513}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.920341117216118,"seconds":5.479902029037476e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.6875,"distances_sum":2727.2693652410926}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9605540293040296,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8828125,"distances_sum":3095.548290207765}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9679143772893777,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.875,"distances_sum":3159.498762243168}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9643429487179491,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8828125,"distances_sum":3089.7457701609583}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9679143772893777,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.875,"distances_sum":3159.498762243168}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9679143772893777,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.875,"distances_sum":3159.498762243168}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.478515625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.478515625,"f1":null,"seconds":3.693625330924988e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":6.75,"distances_sum":1132.2603221873962}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.58984375, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.58984375,"f1":0.7299511252636258,"seconds":4.127621650695801e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":7.453125,"distances_sum":1468.2703480293817}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.58984375,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.58984375,"f1":0.7299511252636258,"seconds":4.127621650695801e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":7.453125,"distances_sum":1468.2703480293817}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.943984661172162,"seconds":5.580484867095947e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.71875,"distances_sum":2707.7114341466095}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9096153846153854,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.6171875,"distances_sum":2403.6583362778947}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7811860014985021,"seconds":4.71062958240509e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.015625,"distances_sum":1736.4588750595042}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.943984661172162,"seconds":5.580484867095947e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.71875,"distances_sum":2707.7114341466095}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9450008325008331,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.671875,"distances_sum":2678.057804617258}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9562957875457878,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.875,"distances_sum":2820.280959313328}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9632841117216123,"seconds":5.966052412986755e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.890625,"distances_sum":2850.9326424383225}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.954115155677656,"seconds":9.983591735363007e-5,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8671875,"distances_sum":2790.0255952497373}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9644917582417585,"seconds":4.352442920207977e-5,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.859375,"distances_sum":2877.6870627348876}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9644917582417585,"seconds":4.352442920207977e-5,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.859375,"distances_sum":2877.6870627348876}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9644917582417585,"seconds":4.352442920207977e-5,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.859375,"distances_sum":2877.6870627348876}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.26171875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.26171875,"f1":null,"seconds":3.3937394618988037e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.484375,"distances_sum":663.8030857016975}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.26171875,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.26171875,"f1":null,"seconds":3.3937394618988037e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.484375,"distances_sum":663.8030857016975}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.26171875,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.26171875,"f1":null,"seconds":3.3937394618988037e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.484375,"distances_sum":663.8030857016975}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.873612325174826,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.6484375,"distances_sum":1562.1761487693695}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8655943015318025,"seconds":5.345791578292847e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.6171875,"distances_sum":1504.6367652503052}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7900390625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7900390625,"f1":0.873612325174826,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.6484375,"distances_sum":1562.1761487693695}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.942141712454213,"seconds":5.926936864852905e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.9765625,"distances_sum":1923.583395738743}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9383012820512826,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.96875,"distances_sum":1903.4416816639423}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9556235431235437,"seconds":6.152316927909851e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.9140625,"distances_sum":2042.3977472014867}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9556235431235437,"seconds":6.152316927909851e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.9140625,"distances_sum":2042.3977472014867}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.973923992673993,"seconds":6.120651960372925e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.984375,"distances_sum":2142.596665309447}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9658138736263739,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.9609375,"distances_sum":2089.984426013969}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9751144688644693,"seconds":5.928799510002136e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":9.0,"distances_sum":2137.7470927753425}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9654647435897441,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.9921875,"distances_sum":2081.8031097397497}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.980191163003663,"seconds":6.018206477165222e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":9.0,"distances_sum":2175.30426720996}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9638671875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.980191163003663,"seconds":6.018206477165222e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":9.0,"distances_sum":2175.30426720996}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9638671875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.980191163003663,"seconds":6.018206477165222e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":9.0,"distances_sum":2175.30426720996}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7745057026307034,"seconds":4.649162292480469e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":6.984375,"distances_sum":1307.036910878377}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4931640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.4931640625,"f1":0.6433434620934624,"seconds":4.015862941741943e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":6.0234375,"distances_sum":902.3585799877511}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6533203125,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6533203125,"f1":0.7745057026307034,"seconds":4.649162292480469e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":6.984375,"distances_sum":1307.036910878377}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9238152472527478,"seconds":5.783513188362122e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.6328125,"distances_sum":1994.823571870505}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9482371794871801,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.859375,"distances_sum":2089.4489804118225}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.861404741092242,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.140625,"distances_sum":1629.4632780385969}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9482371794871801,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.859375,"distances_sum":2089.4489804118225}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9621336996337002,"seconds":6.185844540596008e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.9296875,"distances_sum":2188.501975994656}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9521806318681324,"seconds":6.034970283508301e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.859375,"distances_sum":2123.5885026986043}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9621336996337002,"seconds":6.185844540596008e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.9296875,"distances_sum":2188.501975994656}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9621336996337002,"seconds":6.185844540596008e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.9296875,"distances_sum":2188.501975994656}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.525390625, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.525390625,"f1":null,"seconds":4.30084764957428e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":6.890625,"distances_sum":1101.848050600007}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.525390625,"state":{"ssize":4,"bsize":3},"perf":{"precision":null,"recall":0.525390625,"f1":null,"seconds":4.30084764957428e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":6.890625,"distances_sum":1101.848050600007}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9266343031968038,"seconds":5.8710575103759766e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.734375,"distances_sum":2091.7776357470448}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.875,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.875,"f1":0.9266343031968038,"seconds":5.8710575103759766e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.734375,"distances_sum":2091.7776357470448}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.964921016483517,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.90625,"distances_sum":2304.0861668333487}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9704842032967038,"seconds":0.00012123025953769684,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.9140625,"distances_sum":2351.0192238788554}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.954006410256411,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.8046875,"distances_sum":2276.6381661511978}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9704842032967038,"seconds":0.00012123025953769684,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.9140625,"distances_sum":2351.0192238788554}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9704842032967038,"seconds":0.00012123025953769684,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.9140625,"distances_sum":2351.0192238788554}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.484375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.484375,"f1":null,"seconds":3.829598426818848e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":6.828125,"distances_sum":948.4594301632761}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8495941558441569,"seconds":5.042180418968201e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.1875,"distances_sum":1544.8705599100158}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7470703125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7470703125,"f1":0.8495941558441569,"seconds":5.042180418968201e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.1875,"distances_sum":1544.8705599100158}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8956475815850825,"seconds":5.4370611906051636e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.8515625,"distances_sum":1809.913862572643}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8943967490842499,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.953125,"distances_sum":1795.995791832045}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8651390276390283,"seconds":5.0906091928482056e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.1875,"distances_sum":1638.8105862660007}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8203125,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.8203125,"f1":0.8956475815850825,"seconds":5.4370611906051636e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.8515625,"distances_sum":1809.913862572643}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9683436355311357,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.984375,"distances_sum":2295.805485789604}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9638793498168501,"seconds":5.928799510002136e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.96875,"distances_sum":2281.325181103753}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.944167811355312,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.96875,"distances_sum":2148.478693602602}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9648294413919418,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":9.0,"distances_sum":2282.2284796762706}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9531135531135537,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.96875,"distances_sum":2206.81044052121}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9683436355311357,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.984375,"distances_sum":2295.805485789604}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9683436355311357,"seconds":5.675479769706726e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.984375,"distances_sum":2295.805485789604}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5771484375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5771484375,"f1":0.71496454933955,"seconds":4.025176167488098e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.15625,"distances_sum":1172.0195994160026}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5771484375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5771484375,"f1":0.71496454933955,"seconds":4.025176167488098e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.15625,"distances_sum":1172.0195994160026}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9147092490842496,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7421875,"distances_sum":2077.586598385744}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.85546875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.85546875,"f1":0.9147092490842496,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7421875,"distances_sum":2077.586598385744}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.85546875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.85546875,"f1":0.9147092490842496,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7421875,"distances_sum":2077.586598385744}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.85546875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.85546875,"f1":0.9147092490842496,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7421875,"distances_sum":2077.586598385744}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8630156302031311,"seconds":4.990026354789734e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.5546875,"distances_sum":1742.8642751168984}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.792477314352315,"seconds":4.395842552185059e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.09375,"distances_sum":1459.788007656156}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.771484375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.771484375,"f1":0.8630156302031311,"seconds":4.990026354789734e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.5546875,"distances_sum":1742.8642751168984}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.939961080586081,"seconds":5.474314093589783e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8828125,"distances_sum":2174.3385462451756}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9620020604395605,"seconds":5.500391125679016e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9140625,"distances_sum":2352.711255145644}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9431063727938731,"seconds":5.336478352546692e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.859375,"distances_sum":2244.3143453100574}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9620020604395605,"seconds":5.500391125679016e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9140625,"distances_sum":2352.711255145644}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.964795100732601,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.859375,"distances_sum":2368.329405586906}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":11,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9793727106227109,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9921875,"distances_sum":2439.0353837292278}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9718234890109892,"seconds":6.234273314476013e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9453125,"distances_sum":2406.133252404405}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9635645604395611,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9140625,"distances_sum":2338.2501951045933}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":11,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9793727106227109,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9921875,"distances_sum":2439.0353837292278}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":11,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9793727106227109,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9921875,"distances_sum":2439.0353837292278}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6357421875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6357421875,"f1":0.7647442834942842,"seconds":4.492700099945068e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.4296875,"distances_sum":1394.127562017579}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.208984375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.208984375,"f1":null,"seconds":3.2205134630203247e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":5.28125,"distances_sum":461.2470180067001}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8503324800199809,"seconds":5.045905709266663e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.2109375,"distances_sum":1725.1260930546662}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.75,"f1":0.8503324800199809,"seconds":5.045905709266663e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.2109375,"distances_sum":1725.1260930546662}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9475675366300372,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7578125,"distances_sum":2317.1716359468865}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.818359375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.818359375,"f1":0.8934555028305036,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.2734375,"distances_sum":1963.5098310584717}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9355368589743595,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.71875,"distances_sum":2235.9560925507008}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9475675366300372,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7578125,"distances_sum":2317.1716359468865}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9675251831501837,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8515625,"distances_sum":2454.064684807777}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9630608974358978,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8359375,"distances_sum":2437.1766459285445}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9700148809523815,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8515625,"distances_sum":2475.280899513933}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9712625915750919,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.84375,"distances_sum":2509.7513078351417}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9527243589743596,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.703125,"distances_sum":2424.509655958549}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9712625915750919,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.84375,"distances_sum":2509.7513078351417}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9712625915750919,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.84375,"distances_sum":2509.7513078351417}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.720703125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.720703125,"f1":0.8294845779220787,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.328125,"distances_sum":1587.418298642099}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.8468817640692649,"seconds":5.071982741355896e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.5078125,"distances_sum":1707.7196081384748}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5908203125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5908203125,"f1":0.7303004287379294,"seconds":4.248693585395813e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":7.359375,"distances_sum":1244.2462211169384}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.748046875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.748046875,"f1":0.8468817640692649,"seconds":5.071982741355896e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.5078125,"distances_sum":1707.7196081384748}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9631181318681321,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9765625,"distances_sum":2400.1813866319144}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9593635531135533,"seconds":6.079673767089844e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.8828125,"distances_sum":2389.790729983373}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9353308150183156,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9140625,"distances_sum":2161.7503192389045}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9631181318681321,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9765625,"distances_sum":2400.1813866319144}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9789262820512823,"seconds":6.44288957118988e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9921875,"distances_sum":2514.085817857267}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9763965201465202,"seconds":6.26780092716217e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9765625,"distances_sum":2492.5779427609}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9658138736263742,"seconds":6.156042218208313e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9140625,"distances_sum":2419.321117250795}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9789262820512823,"seconds":6.44288957118988e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9921875,"distances_sum":2514.085817857267}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9789262820512823,"seconds":6.44288957118988e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9921875,"distances_sum":2514.085817857267}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.603515625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.603515625,"f1":0.73943278943279,"seconds":4.3995678424835205e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.1484375,"distances_sum":1377.035213286352}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.25390625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.25390625,"f1":null,"seconds":3.3657997846603394e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":5.7421875,"distances_sum":598.537872977797}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2578125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2578125,"f1":null,"seconds":3.3043324947357178e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":5.859375,"distances_sum":575.35743587724}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.603515625,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.603515625,"f1":0.73943278943279,"seconds":4.3995678424835205e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.1484375,"distances_sum":1377.035213286352}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9028247793872805,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.609375,"distances_sum":2076.0348124390584}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":9,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7831593753468761,"seconds":4.317611455917358e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.765625,"distances_sum":1501.324878903463}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7875568875568885,"seconds":4.386529326438904e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.796875,"distances_sum":1530.3811184327697}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8349609375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8349609375,"f1":0.9028247793872805,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.609375,"distances_sum":2076.0348124390584}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9404819139194147,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.7890625,"distances_sum":2318.673379540612}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9597699175824179,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8984375,"distances_sum":2460.230917231138}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.948629495504496,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.7734375,"distances_sum":2403.099575541585}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9597699175824179,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8984375,"distances_sum":2460.230917231138}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9597699175824179,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8984375,"distances_sum":2460.230917231138}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5400390625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5400390625,"f1":0.683493416305917,"seconds":3.721565008163452e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.7109375,"distances_sum":1214.8176992258361}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5458984375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5458984375,"f1":0.6917245948495955,"seconds":3.779307007789612e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.75,"distances_sum":1208.4907134942957}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5810546875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5810546875,"f1":0.7240051615051621,"seconds":3.885477781295776e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.046875,"distances_sum":1289.2705023266865}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5810546875,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.5810546875,"f1":0.7240051615051621,"seconds":3.885477781295776e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.046875,"distances_sum":1289.2705023266865}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7294921875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7294921875,"f1":0.8336694555444564,"seconds":4.645437002182007e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.0078125,"distances_sum":1753.8098402985777}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7863001581751591,"seconds":4.32133674621582e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.5078125,"distances_sum":1570.7046969038727}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7916701354201362,"seconds":4.250556230545044e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.625,"distances_sum":1576.9098551302277}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7294921875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7294921875,"f1":0.8336694555444564,"seconds":4.645437002182007e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.0078125,"distances_sum":1753.8098402985777}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8990332584082592,"seconds":5.077570676803589e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.390625,"distances_sum":2045.2391873587346}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9502117673992678,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.7265625,"distances_sum":2479.078718423737}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9216663544788549,"seconds":5.243346095085144e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.53125,"distances_sum":2218.4636285077277}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9502117673992678,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.7265625,"distances_sum":2479.078718423737}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.912109375,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9502117673992678,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.7265625,"distances_sum":2479.078718423737}}, n: 9
mean(cfft.distances) = 0.469348199152975
mean(cdnet.distances) = 0.40407134192700167
mean(crand.distances) = 0.33790261179675835
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8577777777777778
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8822222222222221
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8777777777777778
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9022222222222221
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9266666666666666
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.86
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9066666666666666
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8666666666666666
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8977777777777778
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9155555555555557
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9355555555555556
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9266666666666666
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.851111111111111
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9244444444444445
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9244444444444445
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9244444444444445
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.88
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9066666666666666
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.88
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9022222222222224
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9066666666666666
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 9, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 2, 1]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 9, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 2, 1]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 9, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 2, 1]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 9, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 2, 1]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 9, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 2, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 9, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 2, 1]
acc = 0.9133333333333333
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 9, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 2, 1]
acc = 0.9533333333333334
*** finished computation of 12 references, err: [Inf, 0.6065741968154907] ***
*** center 1: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 8, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.5635493356879946] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5635493356879946, 0.3319805303403923] ***
*** starting iteration: 2; err: [Inf, 0.5635493356879946, 0.3319805303403923] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5635493356879946, 0.3319805303403923, 0.30356077702195794] ***
*** starting iteration: 3; err: [Inf, 0.5635493356879946, 0.3319805303403923, 0.30356077702195794] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5635493356879946, 0.3319805303403923, 0.30356077702195794, 0.2706558482355072] ***
*** finished computation of 3 references, err: [Inf, 0.5635493356879946, 0.3319805303403923, 0.30356077702195794, 0.2706558482355072] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [118, 207, 26]]
** centroid: 1, normalized-entropy: 0.7925353845696622, [(1, 118), (2, 207), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [162, 44, 0]]
** centroid: 2, normalized-entropy: 0.7482932859824888, [(1, 162), (2, 44)]
*** center 3: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.18430802120908243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18430802120908243, 0.15466127842357075] ***
*** finished computation of 7 references, err: [Inf, 0.18430802120908243, 0.15466127842357075] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [132, 5, 0]]
** centroid: 1, normalized-entropy: 0.22599073821780646, [(1, 132), (2, 5)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 41, 26]]
** centroid: 2, normalized-entropy: 0.9635359835770286, [(2, 41), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [81, 2, 0]]
** centroid: 3, normalized-entropy: 0.1638605128691586, [(1, 81), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [89, 2, 0]]
** centroid: 4, normalized-entropy: 0.15240699892386778, [(1, 89), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [5, 102, 0]]
** centroid: 5, normalized-entropy: 0.2723359083120876, [(1, 5), (2, 102)]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 99, 0]]
** centroid: 7, normalized-entropy: 0.2781710079264946, [(1, 5), (2, 99)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.41794397390546695] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41794397390546695, 0.26107127544773123] ***
*** starting iteration: 2; err: [Inf, 0.41794397390546695, 0.26107127544773123] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41794397390546695, 0.26107127544773123, 0.24254595070122287] ***
*** starting iteration: 3; err: [Inf, 0.41794397390546695, 0.26107127544773123, 0.24254595070122287] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41794397390546695, 0.26107127544773123, 0.24254595070122287, 0.23942357796276437] ***
*** finished computation of 3 references, err: [Inf, 0.41794397390546695, 0.26107127544773123, 0.24254595070122287, 0.23942357796276437] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [81, 171, 28]]
** centroid: 1, normalized-entropy: 0.8103226337806803, [(1, 81), (2, 171), (3, 28)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [120, 77, 0]]
** centroid: 2, normalized-entropy: 0.9653541793217082, [(1, 120), (2, 77)]
*** center 3: selecting labels [1] (freq >= 2) [from [190, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4277585035991454] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4277585035991454, 0.25578604519473336] ***
*** starting iteration: 2; err: [Inf, 0.4277585035991454, 0.25578604519473336] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4277585035991454, 0.25578604519473336, 0.23485231630202533] ***
*** starting iteration: 3; err: [Inf, 0.4277585035991454, 0.25578604519473336, 0.23485231630202533] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4277585035991454, 0.25578604519473336, 0.23485231630202533, 0.23127525888880465] ***
*** finished computation of 3 references, err: [Inf, 0.4277585035991454, 0.25578604519473336, 0.23485231630202533, 0.23127525888880465] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 197, 30]]
** centroid: 1, normalized-entropy: 0.5633285476382204, [(2, 197), (3, 30)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [136, 39, 0]]
** centroid: 2, normalized-entropy: 0.765350352142764, [(1, 136), (2, 39)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [252, 13, 0]]
** centroid: 3, normalized-entropy: 0.28237588130787045, [(1, 252), (2, 13)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2871789887013311] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2871789887013311, 0.22090383045593495] ***
*** finished computation of 7 references, err: [Inf, 0.2871789887013311, 0.22090383045593495] ***
*** center 1: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [79, 12, 0]]
** centroid: 2, normalized-entropy: 0.5625393752025972, [(1, 79), (2, 12)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [3, 148, 26]]
** centroid: 3, normalized-entropy: 0.4555553931403051, [(1, 3), (2, 148), (3, 26)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [37, 86, 0]]
** centroid: 4, normalized-entropy: 0.8822824449111785, [(1, 37), (2, 86)]
*** center 5: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [70, 5, 0]]
** centroid: 7, normalized-entropy: 0.3533593350214213, [(1, 70), (2, 5)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3883696570783027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3883696570783027, 0.2490938355967492] ***
*** finished computation of 7 references, err: [Inf, 0.3883696570783027, 0.2490938355967492] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [93, 102, 0]]
** centroid: 1, normalized-entropy: 0.9984628557283827, [(1, 93), (2, 102)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [145, 19, 0]]
** centroid: 2, normalized-entropy: 0.5173237070108057, [(1, 145), (2, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [25, 36, 0]]
** centroid: 3, normalized-entropy: 0.9764143081154868, [(1, 25), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [7, 7, 0]]
** centroid: 4, normalized-entropy: 1.0, [(1, 7), (2, 7)]
*** center 5: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 84, 28]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(2, 84), (3, 28)]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3009790667343879] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3009790667343879, 0.21218352584863664] ***
*** finished computation of 7 references, err: [Inf, 0.3009790667343879, 0.21218352584863664] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [33, 14, 0]]
** centroid: 1, normalized-entropy: 0.8786744932173094, [(1, 33), (2, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [110, 7, 0]]
** centroid: 3, normalized-entropy: 0.32676597648839795, [(1, 110), (2, 7)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 99, 29]]
** centroid: 4, normalized-entropy: 0.7719706699485864, [(2, 99), (3, 29)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 23, 0]]
** centroid: 5, normalized-entropy: 0.9421631690835511, [(1, 41), (2, 23)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [20, 80, 1]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(1, 20), (2, 80)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [108, 26, 0]]
** centroid: 7, normalized-entropy: 0.709825885194168, [(1, 108), (2, 26)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2655517161955257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2655517161955257, 0.20564334738339568] ***
*** finished computation of 7 references, err: [Inf, 0.2655517161955257, 0.20564334738339568] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [45, 34, 0]]
** centroid: 1, normalized-entropy: 0.985969027451193, [(1, 45), (2, 34)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 113, 26]]
** centroid: 2, normalized-entropy: 0.6952600984459203, [(2, 113), (3, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 72, 0]]
** centroid: 4, normalized-entropy: 0.9984492478692008, [(1, 79), (2, 72)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [76, 8, 0]]
** centroid: 5, normalized-entropy: 0.45371633918694493, [(1, 76), (2, 8)]
*** center 6: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [66, 24, 0]]
** centroid: 7, normalized-entropy: 0.8366407419411671, [(1, 66), (2, 24)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23064671112001053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23064671112001053, 0.1984713469315013] ***
*** finished computation of 7 references, err: [Inf, 0.23064671112001053, 0.1984713469315013] ***
*** center 1: selecting labels [1] (freq >= 2) [from [172, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [87, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 30, 28]]
** centroid: 3, normalized-entropy: 0.999142103991909, [(2, 30), (3, 28)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [12, 72, 0]]
** centroid: 4, normalized-entropy: 0.5916727785823274, [(1, 12), (2, 72)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 54, 0]]
** centroid: 5, normalized-entropy: 0.9335289015212996, [(1, 29), (2, 54)]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 91, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22251560567770673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22251560567770673, 0.19808466560200325] ***
*** finished computation of 7 references, err: [Inf, 0.22251560567770673, 0.19808466560200325] ***
*** center 1: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 39, 0]]
** centroid: 3, normalized-entropy: 0.9963165195589622, [(1, 45), (2, 39)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 111, 30]]
** centroid: 4, normalized-entropy: 0.7467366074830678, [(2, 111), (3, 30)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [85, 33, 0]]
** centroid: 5, normalized-entropy: 0.85498851113698, [(1, 85), (2, 33)]
*** center 6: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [36, 66, 0]]
** centroid: 7, normalized-entropy: 0.9366673818775627, [(1, 36), (2, 66)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4736816508614377] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4736816508614377, 0.3254084771837446] ***
*** finished computation of 3 references, err: [Inf, 0.4736816508614377, 0.3254084771837446] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [166, 24, 0]]
** centroid: 1, normalized-entropy: 0.5472469471683307, [(1, 166), (2, 24)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [64, 191, 26]]
** centroid: 2, normalized-entropy: 0.7460541296850844, [(1, 64), (2, 191), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [159, 36, 0]]
** centroid: 3, normalized-entropy: 0.6900703653284017, [(1, 159), (2, 36)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3664667317671687] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3664667317671687, 0.34361614300583165] ***
*** finished computation of 3 references, err: [Inf, 0.3664667317671687, 0.34361614300583165] ***
*** center 1: selecting labels [1] (freq >= 1) [from [164, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [95, 155, 28]]
** centroid: 2, normalized-entropy: 0.8409161454571945, [(1, 95), (2, 155), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [132, 93, 0]]
** centroid: 3, normalized-entropy: 0.9782176659354249, [(1, 132), (2, 93)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.47859069841147317] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47859069841147317, 0.30633790696645785] ***
*** finished computation of 3 references, err: [Inf, 0.47859069841147317, 0.30633790696645785] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [241, 30, 0]]
** centroid: 1, normalized-entropy: 0.5020270933845863, [(1, 241), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [147, 84, 0]]
** centroid: 2, normalized-entropy: 0.9456603046006401, [(1, 147), (2, 84)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 135, 30]]
** centroid: 3, normalized-entropy: 0.6840384356390419, [(2, 135), (3, 30)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27218882174597486] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27218882174597486, 0.23560394166182871] ***
*** finished computation of 3 references, err: [Inf, 0.27218882174597486, 0.23560394166182871] ***
*** center 1: selecting labels [1] (freq >= 2) [from [183, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [115, 112, 1]]
** centroid: 2, normalized-entropy: 0.9998740065461803, [(1, 115), (2, 112)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [91, 139, 25]]
** centroid: 3, normalized-entropy: 0.8430250796320596, [(1, 91), (2, 139), (3, 25)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3303681749534951] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3303681749534951, 0.25071610568225317] ***
*** finished computation of 3 references, err: [Inf, 0.3303681749534951, 0.25071610568225317] ***
*** center 1: selecting labels [1] (freq >= 2) [from [171, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [121, 149, 19]]
** centroid: 2, normalized-entropy: 0.8055910594640289, [(1, 121), (2, 149), (3, 19)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [99, 99, 9]]
** centroid: 3, normalized-entropy: 0.7662896801928346, [(1, 99), (2, 99), (3, 9)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24747267576574028] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.24747267576574028, 0.23460660192059882] ***
*** finished computation of 3 references, err: [Inf, 0.24747267576574028, 0.23460660192059882] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 170, 30]]
** centroid: 1, normalized-entropy: 0.6098403047164005, [(2, 170), (3, 30)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [226, 27, 0]]
** centroid: 2, normalized-entropy: 0.48994057839294236, [(1, 226), (2, 27)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [162, 52, 0]]
** centroid: 3, normalized-entropy: 0.7999783611177544, [(1, 162), (2, 52)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27803916848116406] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27803916848116406, 0.2413046341920803] ***
*** starting iteration: 2; err: [Inf, 0.27803916848116406, 0.2413046341920803] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27803916848116406, 0.2413046341920803, 0.2358486316678626] ***
*** starting iteration: 3; err: [Inf, 0.27803916848116406, 0.2413046341920803, 0.2358486316678626] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27803916848116406, 0.2413046341920803, 0.2358486316678626, 0.23476176959946304] ***
*** starting iteration: 4; err: [Inf, 0.27803916848116406, 0.2413046341920803, 0.2358486316678626, 0.23476176959946304] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27803916848116406, 0.2413046341920803, 0.2358486316678626, 0.23476176959946304, 0.23447470231591402] ***
*** finished computation of 3 references, err: [Inf, 0.27803916848116406, 0.2413046341920803, 0.2358486316678626, 0.23476176959946304, 0.23447470231591402] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [76, 139, 25]]
** centroid: 1, normalized-entropy: 0.8338316046569945, [(1, 76), (2, 139), (3, 25)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [111, 112, 1]]
** centroid: 2, normalized-entropy: 0.6541490672940642, [(1, 111), (2, 112), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [202, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3588137083073919] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3588137083073919, 0.2471771233197095] ***
*** starting iteration: 2; err: [Inf, 0.3588137083073919, 0.2471771233197095] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3588137083073919, 0.2471771233197095, 0.2399163249198688] ***
*** starting iteration: 3; err: [Inf, 0.3588137083073919, 0.2471771233197095, 0.2399163249198688] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3588137083073919, 0.2471771233197095, 0.2399163249198688, 0.23837374420515423] ***
*** starting iteration: 4; err: [Inf, 0.3588137083073919, 0.2471771233197095, 0.2399163249198688, 0.23837374420515423] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3588137083073919, 0.2471771233197095, 0.2399163249198688, 0.23837374420515423, 0.23777335221848467] ***
*** finished computation of 3 references, err: [Inf, 0.3588137083073919, 0.2471771233197095, 0.2399163249198688, 0.23837374420515423, 0.23777335221848467] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 181, 28]]
** centroid: 1, normalized-entropy: 0.5682297379197676, [(2, 181), (3, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [171, 51, 0]]
** centroid: 2, normalized-entropy: 0.77753986416076, [(1, 171), (2, 51)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [220, 16, 0]]
** centroid: 3, normalized-entropy: 0.3576467062456333, [(1, 220), (2, 16)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4218394799071407] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4218394799071407, 0.24852121689648687] ***
*** starting iteration: 2; err: [Inf, 0.4218394799071407, 0.24852121689648687] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4218394799071407, 0.24852121689648687, 0.2355232456813509] ***
*** starting iteration: 3; err: [Inf, 0.4218394799071407, 0.24852121689648687, 0.2355232456813509] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4218394799071407, 0.24852121689648687, 0.2355232456813509, 0.23195249792411812] ***
*** starting iteration: 4; err: [Inf, 0.4218394799071407, 0.24852121689648687, 0.2355232456813509, 0.23195249792411812] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4218394799071407, 0.24852121689648687, 0.2355232456813509, 0.23195249792411812, 0.23074469967944913] ***
*** starting iteration: 5; err: [Inf, 0.4218394799071407, 0.24852121689648687, 0.2355232456813509, 0.23195249792411812, 0.23074469967944913] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4218394799071407, 0.24852121689648687, 0.2355232456813509, 0.23195249792411812, 0.23074469967944913, 0.23026312531057236] ***
*** finished computation of 3 references, err: [Inf, 0.4218394799071407, 0.24852121689648687, 0.2355232456813509, 0.23195249792411812, 0.23074469967944913, 0.23026312531057236] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [245, 1, 0]]
** centroid: 1, normalized-entropy: 0.03813932218627333, [(1, 245), (2, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [7, 189, 30]]
** centroid: 2, normalized-entropy: 0.47805051898502554, [(1, 7), (2, 189), (3, 30)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [136, 59, 0]]
** centroid: 3, normalized-entropy: 0.8844026915834835, [(1, 136), (2, 59)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22465332312643663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22465332312643663, 0.16310632063807254] ***
*** finished computation of 7 references, err: [Inf, 0.22465332312643663, 0.16310632063807254] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [123, 46, 0]]
** centroid: 1, normalized-entropy: 0.8445887017534917, [(1, 123), (2, 46)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 77, 16]]
** centroid: 2, normalized-entropy: 0.6623570516079519, [(2, 77), (3, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 67, 10]]
** centroid: 4, normalized-entropy: 0.557081908103416, [(2, 67), (3, 10)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 61, 0]]
** centroid: 5, normalized-entropy: 0.9984144269374468, [(1, 67), (2, 61)]
*** center 6: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21148639605583056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21148639605583056, 0.1670236728877399] ***
*** finished computation of 7 references, err: [Inf, 0.21148639605583056, 0.1670236728877399] ***
*** center 1: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 123, 28]]
** centroid: 2, normalized-entropy: 0.6918138653228311, [(2, 123), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [104, 3, 0]]
** centroid: 3, normalized-entropy: 0.18445186314098744, [(1, 104), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 14, 0]]
** centroid: 4, normalized-entropy: 0.6690158350565576, [(1, 66), (2, 14)]
*** center 5: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [19, 67, 0]]
** centroid: 6, normalized-entropy: 0.7618624463753669, [(1, 19), (2, 67)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [64, 41, 0]]
** centroid: 7, normalized-entropy: 0.9651061634819187, [(1, 64), (2, 41)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1877994037888151] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1877994037888151, 0.1542872674051097] ***
*** finished computation of 7 references, err: [Inf, 0.1877994037888151, 0.1542872674051097] ***
*** center 1: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [72, 17, 0]]
** centroid: 2, normalized-entropy: 0.7035821005719904, [(1, 72), (2, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [7, 54, 0]]
** centroid: 3, normalized-entropy: 0.5140912790181233, [(1, 7), (2, 54)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [95, 13, 0]]
** centroid: 4, normalized-entropy: 0.5304245472812997, [(1, 95), (2, 13)]
*** center 5: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [81, 50, 0]]
** centroid: 6, normalized-entropy: 0.9592194922062226, [(1, 81), (2, 50)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 115, 30]]
** centroid: 7, normalized-entropy: 0.7355085815538399, [(2, 115), (3, 30)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18712178502801521] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18712178502801521, 0.14917452697330777] ***
*** finished computation of 7 references, err: [Inf, 0.18712178502801521, 0.14917452697330777] ***
*** center 1: selecting labels [1] (freq >= 1) [from [131, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 49, 28]]
** centroid: 2, normalized-entropy: 0.9456603046006401, [(2, 49), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [79, 15, 0]]
** centroid: 3, normalized-entropy: 0.6332905746550958, [(1, 79), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [9, 76, 0]]
** centroid: 4, normalized-entropy: 0.48736957102366285, [(1, 9), (2, 76)]
*** center 5: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [19, 108, 0]]
** centroid: 6, normalized-entropy: 0.6088541907951365, [(1, 19), (2, 108)]
*** center 7: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18561024785689687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18561024785689687, 0.15331382386671236] ***
*** finished computation of 7 references, err: [Inf, 0.18561024785689687, 0.15331382386671236] ***
*** center 1: selecting labels [1] (freq >= 1) [from [150, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 37, 30]]
** centroid: 2, normalized-entropy: 0.9921116920021501, [(2, 37), (3, 30)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [43, 11, 0]]
** centroid: 3, normalized-entropy: 0.7292739418449411, [(1, 43), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [85, 2, 0]]
** centroid: 4, normalized-entropy: 0.15790637433488164, [(1, 85), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [14, 112, 0]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(1, 14), (2, 112)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 87, 0]]
** centroid: 6, normalized-entropy: 0.08970338978685011, [(1, 1), (2, 87)]
*** center 7: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23137476886328948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23137476886328948, 0.19399957629004577] ***
*** starting iteration: 2; err: [Inf, 0.23137476886328948, 0.19399957629004577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23137476886328948, 0.19399957629004577, 0.19241023202658863] ***
*** starting iteration: 3; err: [Inf, 0.23137476886328948, 0.19399957629004577, 0.19241023202658863] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23137476886328948, 0.19399957629004577, 0.19241023202658863, 0.19214007705478026] ***
*** finished computation of 7 references, err: [Inf, 0.23137476886328948, 0.19399957629004577, 0.19241023202658863, 0.19214007705478026] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [108, 6, 0]]
** centroid: 1, normalized-entropy: 0.2974722489192896, [(1, 108), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 45, 26]]
** centroid: 2, normalized-entropy: 0.9477073729342067, [(2, 45), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [98, 8, 0]]
** centroid: 3, normalized-entropy: 0.3860189005698936, [(1, 98), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [89, 2, 0]]
** centroid: 4, normalized-entropy: 0.15240699892386778, [(1, 89), (2, 2)]
*** center 5: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 99, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 91, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23106851595184436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23106851595184436, 0.1935996466513159] ***
*** starting iteration: 2; err: [Inf, 0.23106851595184436, 0.1935996466513159] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23106851595184436, 0.1935996466513159, 0.19082412505738794] ***
*** starting iteration: 3; err: [Inf, 0.23106851595184436, 0.1935996466513159, 0.19082412505738794] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23106851595184436, 0.1935996466513159, 0.19082412505738794, 0.19026647784469322] ***
*** finished computation of 7 references, err: [Inf, 0.23106851595184436, 0.1935996466513159, 0.19082412505738794, 0.19026647784469322] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 88, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [56, 38, 0]]
** centroid: 3, normalized-entropy: 0.9733854352299557, [(1, 56), (2, 38)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [105, 2, 0]]
** centroid: 4, normalized-entropy: 0.13402979616803584, [(1, 105), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 33, 0]]
** centroid: 5, normalized-entropy: 0.9216597034450192, [(1, 65), (2, 33)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 87, 28]]
** centroid: 6, normalized-entropy: 0.8007768165404425, [(2, 87), (3, 28)]
*** center 7: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23326959062473795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23326959062473795, 0.19290411834237814] ***
*** starting iteration: 2; err: [Inf, 0.23326959062473795, 0.19290411834237814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23326959062473795, 0.19290411834237814, 0.19083357650704258] ***
*** starting iteration: 3; err: [Inf, 0.23326959062473795, 0.19290411834237814, 0.19083357650704258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23326959062473795, 0.19290411834237814, 0.19083357650704258, 0.19038988856076525] ***
*** finished computation of 7 references, err: [Inf, 0.23326959062473795, 0.19290411834237814, 0.19083357650704258, 0.19038988856076525] ***
*** center 1: selecting labels [1] (freq >= 2) [from [115, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 43, 30]]
** centroid: 2, normalized-entropy: 0.9770012394218561, [(2, 43), (3, 30)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [100, 10, 0]]
** centroid: 3, normalized-entropy: 0.43949698692151346, [(1, 100), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [74, 2, 0]]
** centroid: 4, normalized-entropy: 0.17556502585750275, [(1, 74), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [2, 99, 0]]
** centroid: 5, normalized-entropy: 0.1403272709905931, [(1, 2), (2, 99)]
*** center 6: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 94, 0]]
** centroid: 7, normalized-entropy: 0.2885385136944103, [(1, 5), (2, 94)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23967351285145022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23967351285145022, 0.19236476565137864] ***
*** finished computation of 7 references, err: [Inf, 0.23967351285145022, 0.19236476565137864] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [86, 41, 0]]
** centroid: 1, normalized-entropy: 0.9074374340656945, [(1, 86), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 7, 0]]
** centroid: 2, normalized-entropy: 0.5197027865043053, [(1, 53), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 81, 26]]
** centroid: 3, normalized-entropy: 0.7999783611177544, [(2, 81), (3, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 30, 0]]
** centroid: 5, normalized-entropy: 0.9438767571287909, [(1, 53), (2, 30)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 92, 0]]
** centroid: 6, normalized-entropy: 0.4901757916273403, [(1, 11), (2, 92)]
*** center 7: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22382771183919536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22382771183919536, 0.19403201029838427] ***
*** finished computation of 7 references, err: [Inf, 0.22382771183919536, 0.19403201029838427] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [116, 7, 0]]
** centroid: 1, normalized-entropy: 0.3150569452644301, [(1, 116), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 15, 0]]
** centroid: 2, normalized-entropy: 0.6864381668766382, [(1, 67), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 65, 28]]
** centroid: 3, normalized-entropy: 0.8826013308449944, [(2, 65), (3, 28)]
*** center 4: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 92, 0]]
** centroid: 5, normalized-entropy: 0.6926889992682925, [(1, 21), (2, 92)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [36, 69, 0]]
** centroid: 6, normalized-entropy: 0.927526588431676, [(1, 36), (2, 69)]
*** center 7: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23823696190583474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23823696190583474, 0.19571991128123728] ***
*** finished computation of 7 references, err: [Inf, 0.23823696190583474, 0.19571991128123728] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 123, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 43, 0]]
** centroid: 3, normalized-entropy: 0.9858150371789197, [(1, 57), (2, 43)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 38, 0]]
** centroid: 4, normalized-entropy: 0.968461008760162, [(1, 58), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [111, 4, 0]]
** centroid: 5, normalized-entropy: 0.2178364755977513, [(1, 111), (2, 4)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 38, 30]]
** centroid: 6, normalized-entropy: 0.9899927915575186, [(2, 38), (3, 30)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [91, 3, 0]]
** centroid: 7, normalized-entropy: 0.2039058755048202, [(1, 91), (2, 3)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9469889050727374, 0.9450138761516006, 0.9349798900697105, 0.9310028591465717, 0.9300018581455708, 0.907994821168474, 0.8920327513141885, 0.8810247373121625, 0.8789987592382801, 0.8210545875216534, 0.7820125514736294, 0.7389185592778408]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.9, 2) => 0.9469889050727374
finished with 13
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.2079205554196829] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2079205554196829, 0.15200544957647677] ***
*** starting iteration: 2; err: [Inf, 0.2079205554196829, 0.15200544957647677] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2079205554196829, 0.15200544957647677, 0.1481558464959756] ***
*** starting iteration: 3; err: [Inf, 0.2079205554196829, 0.15200544957647677, 0.1481558464959756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2079205554196829, 0.15200544957647677, 0.1481558464959756, 0.14736761962162895] ***
*** finished computation of 7 references, err: [Inf, 0.2079205554196829, 0.15200544957647677, 0.1481558464959756, 0.14736761962162895] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [79, 24, 0]]
** centroid: 1, normalized-entropy: 0.7832211182191516, [(1, 79), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [69, 36, 0]]
** centroid: 2, normalized-entropy: 0.927526588431676, [(1, 69), (2, 36)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 91, 26]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(2, 91), (3, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 5, 0]]
** centroid: 5, normalized-entropy: 0.340373285759646, [(1, 74), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [85, 2, 0]]
** centroid: 6, normalized-entropy: 0.15790637433488164, [(1, 85), (2, 2)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 93, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.17827111546814475] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17827111546814475, 0.15052593363144587] ***
*** starting iteration: 2; err: [Inf, 0.17827111546814475, 0.15052593363144587] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17827111546814475, 0.15052593363144587, 0.1474737479523204] ***
*** starting iteration: 3; err: [Inf, 0.17827111546814475, 0.15052593363144587, 0.1474737479523204] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17827111546814475, 0.15052593363144587, 0.1474737479523204, 0.14708224695170302] ***
*** finished computation of 7 references, err: [Inf, 0.17827111546814475, 0.15052593363144587, 0.1474737479523204, 0.14708224695170302] ***
*** center 1: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 44, 28]]
** centroid: 2, normalized-entropy: 0.9640787648082293, [(2, 44), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [75, 14, 0]]
** centroid: 3, normalized-entropy: 0.6278191534832795, [(1, 75), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [84, 6, 0]]
** centroid: 4, normalized-entropy: 0.3533593350214213, [(1, 84), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 93, 0]]
** centroid: 5, normalized-entropy: 0.43055186701043935, [(1, 9), (2, 93)]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 91, 0]]
** centroid: 7, normalized-entropy: 0.2039058755048202, [(1, 3), (2, 91)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19534189542238858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19534189542238858, 0.15296913830408437] ***
*** starting iteration: 2; err: [Inf, 0.19534189542238858, 0.15296913830408437] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19534189542238858, 0.15296913830408437, 0.14996232430281667] ***
*** starting iteration: 3; err: [Inf, 0.19534189542238858, 0.15296913830408437, 0.14996232430281667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19534189542238858, 0.15296913830408437, 0.14996232430281667, 0.14968966278687365] ***
*** finished computation of 7 references, err: [Inf, 0.19534189542238858, 0.15296913830408437, 0.14996232430281667, 0.14968966278687365] ***
*** center 1: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 64, 30]]
** centroid: 2, normalized-entropy: 0.9034535552068337, [(2, 64), (3, 30)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 2, 0]]
** centroid: 3, normalized-entropy: 0.22536363912739493, [(1, 53), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [85, 28, 0]]
** centroid: 4, normalized-entropy: 0.8077527023327313, [(1, 85), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 71, 0]]
** centroid: 5, normalized-entropy: 0.6454495903301855, [(1, 14), (2, 71)]
*** center 6: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [15, 84, 0]]
** centroid: 7, normalized-entropy: 0.6136190195993708, [(1, 15), (2, 84)]
finished with 8 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9469889050727374, 0.9450138761516006, 0.9349798900697105, 0.9310028591465717, 0.9300018581455708, 0.9290188391984798, 0.907994821168474, 0.8920327513141885, 0.8810247373121625, 0.8789987592382801, 0.8210545875216534, 0.7820125514736294, 0.7389185592778408]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.9, 2) => 0.9469889050727374
finished with 14
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.3283197376919021] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3283197376919021, 0.22095457386846343] ***
*** starting iteration: 2; err: [Inf, 0.3283197376919021, 0.22095457386846343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3283197376919021, 0.22095457386846343, 0.21291015587618445] ***
*** starting iteration: 3; err: [Inf, 0.3283197376919021, 0.22095457386846343, 0.21291015587618445] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3283197376919021, 0.22095457386846343, 0.21291015587618445, 0.20969055549104562] ***
*** starting iteration: 4; err: [Inf, 0.3283197376919021, 0.22095457386846343, 0.21291015587618445, 0.20969055549104562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3283197376919021, 0.22095457386846343, 0.21291015587618445, 0.20969055549104562, 0.2051274931217703] ***
*** starting iteration: 5; err: [Inf, 0.3283197376919021, 0.22095457386846343, 0.21291015587618445, 0.20969055549104562, 0.2051274931217703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3283197376919021, 0.22095457386846343, 0.21291015587618445, 0.20969055549104562, 0.2051274931217703, 0.20199716870334591] ***
*** starting iteration: 6; err: [Inf, 0.3283197376919021, 0.22095457386846343, 0.21291015587618445, 0.20969055549104562, 0.2051274931217703, 0.20199716870334591] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3283197376919021, 0.22095457386846343, 0.21291015587618445, 0.20969055549104562, 0.2051274931217703, 0.20199716870334591, 0.19914395230271303] ***
*** starting iteration: 7; err: [Inf, 0.3283197376919021, 0.22095457386846343, 0.21291015587618445, 0.20969055549104562, 0.2051274931217703, 0.20199716870334591, 0.19914395230271303] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3283197376919021, 0.22095457386846343, 0.21291015587618445, 0.20969055549104562, 0.2051274931217703, 0.20199716870334591, 0.19914395230271303, 0.1946871274936799] ***
*** starting iteration: 8; err: [Inf, 0.3283197376919021, 0.22095457386846343, 0.21291015587618445, 0.20969055549104562, 0.2051274931217703, 0.20199716870334591, 0.19914395230271303, 0.1946871274936799] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3283197376919021, 0.22095457386846343, 0.21291015587618445, 0.20969055549104562, 0.2051274931217703, 0.20199716870334591, 0.19914395230271303, 0.1946871274936799, 0.19302891556232296] ***
*** starting iteration: 9; err: [Inf, 0.3283197376919021, 0.22095457386846343, 0.21291015587618445, 0.20969055549104562, 0.2051274931217703, 0.20199716870334591, 0.19914395230271303, 0.1946871274936799, 0.19302891556232296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3283197376919021, 0.22095457386846343, 0.21291015587618445, 0.20969055549104562, 0.2051274931217703, 0.20199716870334591, 0.19914395230271303, 0.1946871274936799, 0.19302891556232296, 0.19228643249837798] ***
*** finished computation of 7 references, err: [Inf, 0.3283197376919021, 0.22095457386846343, 0.21291015587618445, 0.20969055549104562, 0.2051274931217703, 0.20199716870334591, 0.19914395230271303, 0.1946871274936799, 0.19302891556232296, 0.19228643249837798] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 55, 26]]
** centroid: 1, normalized-entropy: 0.9054522631867892, [(2, 55), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [4, 85, 0]]
** centroid: 3, normalized-entropy: 0.2645173683629748, [(1, 4), (2, 85)]
*** center 4: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [4, 84, 0]]
** centroid: 5, normalized-entropy: 0.2667649878030262, [(1, 4), (2, 84)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [96, 4, 0]]
** centroid: 6, normalized-entropy: 0.24229218908241482, [(1, 96), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [76, 23, 0]]
** centroid: 7, normalized-entropy: 0.7820392866349247, [(1, 76), (2, 23)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28378497673243264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28378497673243264, 0.22416020797026612] ***
*** starting iteration: 2; err: [Inf, 0.28378497673243264, 0.22416020797026612] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28378497673243264, 0.22416020797026612, 0.20969614720270818] ***
*** starting iteration: 3; err: [Inf, 0.28378497673243264, 0.22416020797026612, 0.20969614720270818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28378497673243264, 0.22416020797026612, 0.20969614720270818, 0.20360652219666087] ***
*** starting iteration: 4; err: [Inf, 0.28378497673243264, 0.22416020797026612, 0.20969614720270818, 0.20360652219666087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28378497673243264, 0.22416020797026612, 0.20969614720270818, 0.20360652219666087, 0.19977655493817675] ***
*** starting iteration: 5; err: [Inf, 0.28378497673243264, 0.22416020797026612, 0.20969614720270818, 0.20360652219666087, 0.19977655493817675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28378497673243264, 0.22416020797026612, 0.20969614720270818, 0.20360652219666087, 0.19977655493817675, 0.19725694612361144] ***
*** starting iteration: 6; err: [Inf, 0.28378497673243264, 0.22416020797026612, 0.20969614720270818, 0.20360652219666087, 0.19977655493817675, 0.19725694612361144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28378497673243264, 0.22416020797026612, 0.20969614720270818, 0.20360652219666087, 0.19977655493817675, 0.19725694612361144, 0.1957102761990663] ***
*** starting iteration: 7; err: [Inf, 0.28378497673243264, 0.22416020797026612, 0.20969614720270818, 0.20360652219666087, 0.19977655493817675, 0.19725694612361144, 0.1957102761990663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28378497673243264, 0.22416020797026612, 0.20969614720270818, 0.20360652219666087, 0.19977655493817675, 0.19725694612361144, 0.1957102761990663, 0.19468592750285563] ***
*** starting iteration: 8; err: [Inf, 0.28378497673243264, 0.22416020797026612, 0.20969614720270818, 0.20360652219666087, 0.19977655493817675, 0.19725694612361144, 0.1957102761990663, 0.19468592750285563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28378497673243264, 0.22416020797026612, 0.20969614720270818, 0.20360652219666087, 0.19977655493817675, 0.19725694612361144, 0.1957102761990663, 0.19468592750285563, 0.19404946972938558] ***
*** finished computation of 7 references, err: [Inf, 0.28378497673243264, 0.22416020797026612, 0.20969614720270818, 0.20360652219666087, 0.19977655493817675, 0.19725694612361144, 0.1957102761990663, 0.19468592750285563, 0.19404946972938558] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [57, 16, 0]]
** centroid: 1, normalized-entropy: 0.7586638628883696, [(1, 57), (2, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [63, 48, 0]]
** centroid: 3, normalized-entropy: 0.9867867202680318, [(1, 63), (2, 48)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [65, 37, 0]]
** centroid: 4, normalized-entropy: 0.9449382598624693, [(1, 65), (2, 37)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [77, 22, 0]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(1, 77), (2, 22)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 125, 28]]
** centroid: 6, normalized-entropy: 0.6866102387686401, [(2, 125), (3, 28)]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24800448210817808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24800448210817808, 0.21104377141568637] ***
*** starting iteration: 2; err: [Inf, 0.24800448210817808, 0.21104377141568637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24800448210817808, 0.21104377141568637, 0.20075004873797297] ***
*** starting iteration: 3; err: [Inf, 0.24800448210817808, 0.21104377141568637, 0.20075004873797297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24800448210817808, 0.21104377141568637, 0.20075004873797297, 0.1965826400813983] ***
*** starting iteration: 4; err: [Inf, 0.24800448210817808, 0.21104377141568637, 0.20075004873797297, 0.1965826400813983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24800448210817808, 0.21104377141568637, 0.20075004873797297, 0.1965826400813983, 0.19545631271659925] ***
*** starting iteration: 5; err: [Inf, 0.24800448210817808, 0.21104377141568637, 0.20075004873797297, 0.1965826400813983, 0.19545631271659925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24800448210817808, 0.21104377141568637, 0.20075004873797297, 0.1965826400813983, 0.19545631271659925, 0.1942517878403929] ***
*** starting iteration: 6; err: [Inf, 0.24800448210817808, 0.21104377141568637, 0.20075004873797297, 0.1965826400813983, 0.19545631271659925, 0.1942517878403929] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24800448210817808, 0.21104377141568637, 0.20075004873797297, 0.1965826400813983, 0.19545631271659925, 0.1942517878403929, 0.19392157753027495] ***
*** finished computation of 7 references, err: [Inf, 0.24800448210817808, 0.21104377141568637, 0.20075004873797297, 0.1965826400813983, 0.19545631271659925, 0.1942517878403929, 0.19392157753027495] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [38, 64, 0]]
** centroid: 1, normalized-entropy: 0.9526092095121206, [(1, 38), (2, 64)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [91, 15, 0]]
** centroid: 2, normalized-entropy: 0.5881782735046225, [(1, 91), (2, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [49, 49, 0]]
** centroid: 3, normalized-entropy: 1.0, [(1, 49), (2, 49)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [59, 8, 0]]
** centroid: 4, normalized-entropy: 0.52764232609436, [(1, 59), (2, 8)]
*** center 5: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 110, 30]]
** centroid: 6, normalized-entropy: 0.7495952572594798, [(2, 110), (3, 30)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [77, 3, 0]]
** centroid: 7, normalized-entropy: 0.2307099556914763, [(1, 77), (2, 3)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9469889050727374, 0.9450138761516006, 0.9349798900697105, 0.9310028591465717, 0.9300018581455708, 0.9290188391984798, 0.9289888691086295, 0.907994821168474, 0.8920327513141885, 0.8810247373121625, 0.8789987592382801, 0.8210545875216534, 0.7820125514736294, 0.7389185592778408]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.9, 2) => 0.9469889050727374
finished with 15
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.21868738831040468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21868738831040468, 0.19403002010910092] ***
*** finished computation of 7 references, err: [Inf, 0.21868738831040468, 0.19403002010910092] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 89, 6]]
** centroid: 1, normalized-entropy: 0.3398550782221443, [(2, 89), (3, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 26, 0]]
** centroid: 3, normalized-entropy: 0.943601631299382, [(1, 46), (2, 26)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [111, 14, 0]]
** centroid: 4, normalized-entropy: 0.5059192440727414, [(1, 111), (2, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [87, 32, 0]]
** centroid: 5, normalized-entropy: 0.8398926865109739, [(1, 87), (2, 32)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 90, 20]]
** centroid: 6, normalized-entropy: 0.6840384356390419, [(2, 90), (3, 20)]
*** center 7: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2380511695833254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2380511695833254, 0.1955004715174995] ***
*** finished computation of 7 references, err: [Inf, 0.2380511695833254, 0.1955004715174995] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [101, 19, 0]]
** centroid: 1, normalized-entropy: 0.6303074079971902, [(1, 101), (2, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 36, 28]]
** centroid: 3, normalized-entropy: 0.9886994082884974, [(2, 36), (3, 28)]
*** center 4: selecting labels [1] (freq >= 1) [from [126, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [6, 106, 0]]
** centroid: 5, normalized-entropy: 0.3013786435930858, [(1, 6), (2, 106)]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 87, 0]]
** centroid: 7, normalized-entropy: 0.2108423003185322, [(1, 3), (2, 87)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25055922576222106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25055922576222106, 0.19011647551358193] ***
*** finished computation of 7 references, err: [Inf, 0.25055922576222106, 0.19011647551358193] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [49, 52, 0]]
** centroid: 1, normalized-entropy: 0.999363485672765, [(1, 49), (2, 52)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [64, 33, 0]]
** centroid: 2, normalized-entropy: 0.925015873745592, [(1, 64), (2, 33)]
*** center 3: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [14, 98, 0]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(1, 14), (2, 98)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 66, 30]]
** centroid: 5, normalized-entropy: 0.8960382325345574, [(2, 66), (3, 30)]
*** center 6: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9469889050727374, 0.9450138761516006, 0.9349798900697105, 0.9310028591465717, 0.9300018581455708, 0.9290368212523901, 0.9290188391984798, 0.9289888691086295, 0.907994821168474, 0.8920327513141885, 0.8810247373121625, 0.8789987592382801, 0.8210545875216534, 0.7820125514736294, 0.7389185592778408]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.9, 2) => 0.9469889050727374
finished with 15
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9469889050727374, 0.9450138761516006, 0.9349798900697105, 0.9310028591465717, 0.9300018581455708, 0.9290368212523901, 0.9290188391984798, 0.9289888691086295, 0.907994821168474, 0.8920327513141885, 0.8810247373121625, 0.8789987592382801, 0.8210545875216534, 0.7820125514736294, 0.7389185592778408]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.9, 2) => 0.9469889050727374
finished with 15
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9469889050727374, 0.9450138761516006, 0.9349798900697105, 0.9310028591465717, 0.9300018581455708, 0.9290368212523901, 0.9290188391984798, 0.9289888691086295, 0.907994821168474, 0.8920327513141885, 0.8810247373121625, 0.8789987592382801, 0.8210545875216534, 0.7820125514736294, 0.7389185592778408]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.9, 2) => 0.9469889050727374
finished with 16
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.2318131547622584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2318131547622584, 0.16081193396080476] ***
*** finished computation of 7 references, err: [Inf, 0.2318131547622584, 0.16081193396080476] ***
*** center 1: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [9, 119, 4]]
** centroid: 2, normalized-entropy: 0.3481938076421571, [(1, 9), (2, 119), (3, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [87, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [52, 5, 0]]
** centroid: 4, normalized-entropy: 0.4288109647301171, [(1, 52), (2, 5)]
*** center 5: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [82, 12, 0]]
** centroid: 6, normalized-entropy: 0.5509844433017146, [(1, 82), (2, 12)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 114, 22]]
** centroid: 7, normalized-entropy: 0.6385146263620961, [(2, 114), (3, 22)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2928453118696033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2928453118696033, 0.19710690541733253] ***
*** finished computation of 7 references, err: [Inf, 0.2928453118696033, 0.19710690541733253] ***
*** center 1: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [164, 23, 0]]
** centroid: 2, normalized-entropy: 0.5379080762155668, [(1, 164), (2, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 4: selecting labels [1, 2, 3] (freq >= 2) [from [8, 126, 28]]
** centroid: 4, normalized-entropy: 0.5893058856296101, [(1, 8), (2, 126), (3, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 57, 0]]
** centroid: 5, normalized-entropy: 0.8533728188427888, [(1, 22), (2, 57)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [19, 8, 0]]
** centroid: 6, normalized-entropy: 0.876716288999464, [(1, 19), (2, 8)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 34, 0]]
** centroid: 7, normalized-entropy: 0.3095434291503252, [(1, 2), (2, 34)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24745585988352503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24745585988352503, 0.15682429975286863] ***
*** finished computation of 7 references, err: [Inf, 0.24745585988352503, 0.15682429975286863] ***
*** center 1: selecting labels [1] (freq >= 2) [from [131, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [19, 79, 0]]
** centroid: 3, normalized-entropy: 0.7095128863456239, [(1, 19), (2, 79)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 67, 30]]
** centroid: 4, normalized-entropy: 0.892338681064176, [(2, 67), (3, 30)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 48, 0]]
** centroid: 5, normalized-entropy: 0.9836116360305414, [(1, 65), (2, 48)]
*** center 6: selecting labels [1] (freq >= 2) [from [37, 1, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [17, 54, 0]]
** centroid: 7, normalized-entropy: 0.7941021417852022, [(1, 17), (2, 54)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 16)
[0.9469889050727374, 0.9450138761516006, 0.9349798900697105, 0.9310028591465717, 0.9300018581455708, 0.9290368212523901, 0.9290188391984798, 0.9289888691086295, 0.907994821168474, 0.8920327513141885, 0.8859937782093471, 0.8810247373121625, 0.8789987592382801, 0.8210545875216534, 0.7820125514736294, 0.7389185592778408]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.9, 2) => 0.9469889050727374
finished with 16
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9469889050727374, 0.9450138761516006, 0.9349798900697105, 0.9310028591465717, 0.9300018581455708, 0.9290368212523901, 0.9290188391984798, 0.9289888691086295, 0.907994821168474, 0.8920327513141885, 0.8859937782093471, 0.8810247373121625, 0.8789987592382801, 0.8210545875216534, 0.7820125514736294, 0.7389185592778408]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.9, 2) => 0.9469889050727374
finished with 16
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.25017697108723225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25017697108723225, 0.19385292618745006] ***
*** starting iteration: 2; err: [Inf, 0.25017697108723225, 0.19385292618745006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25017697108723225, 0.19385292618745006, 0.19112663862900808] ***
*** starting iteration: 3; err: [Inf, 0.25017697108723225, 0.19385292618745006, 0.19112663862900808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25017697108723225, 0.19385292618745006, 0.19112663862900808, 0.1912815097961575] ***
*** finished computation of 7 references, err: [Inf, 0.25017697108723225, 0.19385292618745006, 0.19112663862900808, 0.1912815097961575] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [142, 22, 0]]
** centroid: 1, normalized-entropy: 0.5687008669370753, [(1, 142), (2, 22)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 55, 42]]
** centroid: 2, normalized-entropy: 0.9870044298101771, [(2, 55), (3, 42)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [161, 12, 0]]
** centroid: 3, normalized-entropy: 0.3635463352372608, [(1, 161), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [137, 6, 0]]
** centroid: 4, normalized-entropy: 0.2511988167090251, [(1, 137), (2, 6)]
*** center 5: selecting labels [1] (freq >= 2) [from [144, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 148, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 131, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2421210823673755] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2421210823673755, 0.1935444709993899] ***
*** starting iteration: 2; err: [Inf, 0.2421210823673755, 0.1935444709993899] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2421210823673755, 0.1935444709993899, 0.19039226821810007] ***
*** starting iteration: 3; err: [Inf, 0.2421210823673755, 0.1935444709993899, 0.19039226821810007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2421210823673755, 0.1935444709993899, 0.19039226821810007, 0.19032418248429894] ***
*** finished computation of 7 references, err: [Inf, 0.2421210823673755, 0.1935444709993899, 0.19039226821810007, 0.19032418248429894] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [41, 28, 0]]
** centroid: 1, normalized-entropy: 0.9742408334889756, [(1, 41), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 2, 0]]
** centroid: 2, normalized-entropy: 0.24988229283318547, [(1, 46), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 69, 15]]
** centroid: 3, normalized-entropy: 0.6769418697808861, [(2, 69), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 21, 0]]
** centroid: 5, normalized-entropy: 0.8554508105601307, [(1, 54), (2, 21)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 69, 0]]
** centroid: 6, normalized-entropy: 0.5159469300074472, [(1, 9), (2, 69)]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21689449431560934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21689449431560934, 0.18620301549881696] ***
*** starting iteration: 2; err: [Inf, 0.21689449431560934, 0.18620301549881696] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21689449431560934, 0.18620301549881696, 0.18492790115624666] ***
*** starting iteration: 3; err: [Inf, 0.21689449431560934, 0.18620301549881696, 0.18492790115624666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21689449431560934, 0.18620301549881696, 0.18492790115624666, 0.1845264498796314] ***
*** finished computation of 7 references, err: [Inf, 0.21689449431560934, 0.18620301549881696, 0.18492790115624666, 0.1845264498796314] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [38, 41, 0]]
** centroid: 1, normalized-entropy: 0.9989595114657399, [(1, 38), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [42, 19, 0]]
** centroid: 2, normalized-entropy: 0.8948692308065576, [(1, 42), (2, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 53, 21]]
** centroid: 4, normalized-entropy: 0.8605553930586318, [(2, 53), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 61, 0]]
** centroid: 5, normalized-entropy: 0.8342867421739538, [(1, 22), (2, 61)]
*** center 6: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [75, 9, 0]]
** centroid: 7, normalized-entropy: 0.4912373418243334, [(1, 75), (2, 9)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22270827906485646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22270827906485646, 0.19278763565421103] ***
*** starting iteration: 2; err: [Inf, 0.22270827906485646, 0.19278763565421103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22270827906485646, 0.19278763565421103, 0.19023439386300742] ***
*** starting iteration: 3; err: [Inf, 0.22270827906485646, 0.19278763565421103, 0.19023439386300742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22270827906485646, 0.19278763565421103, 0.19023439386300742, 0.18947964834515005] ***
*** finished computation of 7 references, err: [Inf, 0.22270827906485646, 0.19278763565421103, 0.19023439386300742, 0.18947964834515005] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 62, 18]]
** centroid: 2, normalized-entropy: 0.7691928290130138, [(2, 62), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [41, 15, 0]]
** centroid: 3, normalized-entropy: 0.8383729377099398, [(1, 41), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [68, 2, 0]]
** centroid: 4, normalized-entropy: 0.18717625687320805, [(1, 68), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 69, 0]]
** centroid: 5, normalized-entropy: 0.35678001438394347, [(1, 5), (2, 69)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [37, 43, 0]]
** centroid: 6, normalized-entropy: 0.9959386076315955, [(1, 37), (2, 43)]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2228193193487823] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2228193193487823, 0.19266848635300993] ***
*** starting iteration: 2; err: [Inf, 0.2228193193487823, 0.19266848635300993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2228193193487823, 0.19266848635300993, 0.19000229324866086] ***
*** starting iteration: 3; err: [Inf, 0.2228193193487823, 0.19266848635300993, 0.19000229324866086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2228193193487823, 0.19266848635300993, 0.19000229324866086, 0.1902959580644965] ***
*** finished computation of 7 references, err: [Inf, 0.2228193193487823, 0.19266848635300993, 0.19000229324866086, 0.1902959580644965] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 61, 21]]
** centroid: 1, normalized-entropy: 0.8208002549877175, [(2, 61), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 9, 0]]
** centroid: 3, normalized-entropy: 0.6429383500409613, [(1, 46), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 23, 0]]
** centroid: 4, normalized-entropy: 0.8749315876677922, [(1, 55), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 10, 0]]
** centroid: 5, normalized-entropy: 0.625262405223423, [(1, 54), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [63, 18, 0]]
** centroid: 6, normalized-entropy: 0.7642045065086204, [(1, 63), (2, 18)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 69, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22920281781069934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22920281781069934, 0.19108635314693675] ***
*** starting iteration: 2; err: [Inf, 0.22920281781069934, 0.19108635314693675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22920281781069934, 0.19108635314693675, 0.1851836200915277] ***
*** starting iteration: 3; err: [Inf, 0.22920281781069934, 0.19108635314693675, 0.1851836200915277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22920281781069934, 0.19108635314693675, 0.1851836200915277, 0.18411861982382835] ***
*** finished computation of 7 references, err: [Inf, 0.22920281781069934, 0.19108635314693675, 0.1851836200915277, 0.18411861982382835] ***
*** center 1: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 9, 0]]
** centroid: 2, normalized-entropy: 0.569190343735683, [(1, 58), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 60, 22]]
** centroid: 3, normalized-entropy: 0.8390040613676978, [(2, 60), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [32, 25, 0]]
** centroid: 5, normalized-entropy: 0.9890934397021431, [(1, 32), (2, 25)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [38, 45, 0]]
** centroid: 6, normalized-entropy: 0.9948631079048572, [(1, 38), (2, 45)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24193235524743795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24193235524743795, 0.19319479706976564] ***
*** starting iteration: 2; err: [Inf, 0.24193235524743795, 0.19319479706976564] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24193235524743795, 0.19319479706976564, 0.18961493114382028] ***
*** starting iteration: 3; err: [Inf, 0.24193235524743795, 0.19319479706976564, 0.18961493114382028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24193235524743795, 0.19319479706976564, 0.18961493114382028, 0.18889612044021487] ***
*** finished computation of 7 references, err: [Inf, 0.24193235524743795, 0.19319479706976564, 0.18961493114382028, 0.18889612044021487] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [64, 14, 0]]
** centroid: 1, normalized-entropy: 0.6789538995185759, [(1, 64), (2, 14)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 27, 19]]
** centroid: 2, normalized-entropy: 0.978070970973496, [(2, 27), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [68, 4, 0]]
** centroid: 3, normalized-entropy: 0.3095434291503252, [(1, 68), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [89, 5, 0]]
** centroid: 4, normalized-entropy: 0.2998025130558691, [(1, 89), (2, 5)]
*** center 5: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 68, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22477093671262263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22477093671262263, 0.1892525590742007] ***
*** starting iteration: 2; err: [Inf, 0.22477093671262263, 0.1892525590742007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22477093671262263, 0.1892525590742007, 0.1872707801386714] ***
*** starting iteration: 3; err: [Inf, 0.22477093671262263, 0.1892525590742007, 0.1872707801386714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22477093671262263, 0.1892525590742007, 0.1872707801386714, 0.1873089231867343] ***
*** finished computation of 7 references, err: [Inf, 0.22477093671262263, 0.1892525590742007, 0.1872707801386714, 0.1873089231867343] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [55, 21, 0]]
** centroid: 1, normalized-entropy: 0.8503821170987139, [(1, 55), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 9, 0]]
** centroid: 2, normalized-entropy: 0.6646953053493416, [(1, 43), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 67, 21]]
** centroid: 3, normalized-entropy: 0.7927652363756529, [(2, 67), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [52, 10, 0]]
** centroid: 5, normalized-entropy: 0.6373874992221911, [(1, 52), (2, 10)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 72, 0]]
** centroid: 7, normalized-entropy: 0.24229218908241482, [(1, 3), (2, 72)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23124216771498324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23124216771498324, 0.19287303391098976] ***
*** starting iteration: 2; err: [Inf, 0.23124216771498324, 0.19287303391098976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23124216771498324, 0.19287303391098976, 0.19007679617404938] ***
*** starting iteration: 3; err: [Inf, 0.23124216771498324, 0.19287303391098976, 0.19007679617404938] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23124216771498324, 0.19287303391098976, 0.19007679617404938, 0.18980515426956118] ***
*** finished computation of 7 references, err: [Inf, 0.23124216771498324, 0.19287303391098976, 0.19007679617404938, 0.18980515426956118] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [76, 3, 0]]
** centroid: 1, normalized-entropy: 0.23292785546981223, [(1, 76), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [71, 8, 0]]
** centroid: 2, normalized-entropy: 0.47299536229314826, [(1, 71), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 37, 19]]
** centroid: 3, normalized-entropy: 0.9241335419915458, [(2, 37), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 3, 0]]
** centroid: 5, normalized-entropy: 0.2974722489192896, [(1, 54), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [18, 53, 0]]
** centroid: 6, normalized-entropy: 0.8168114277045246, [(1, 18), (2, 53)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 74, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24534989474248142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24534989474248142, 0.1928047724738717] ***
*** starting iteration: 2; err: [Inf, 0.24534989474248142, 0.1928047724738717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24534989474248142, 0.1928047724738717, 0.188222358526662] ***
*** starting iteration: 3; err: [Inf, 0.24534989474248142, 0.1928047724738717, 0.188222358526662] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24534989474248142, 0.1928047724738717, 0.188222358526662, 0.1872962254881859] ***
*** finished computation of 7 references, err: [Inf, 0.24534989474248142, 0.1928047724738717, 0.188222358526662, 0.1872962254881859] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [7, 71, 0]]
** centroid: 1, normalized-entropy: 0.4356133734874324, [(1, 7), (2, 71)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [36, 25, 0]]
** centroid: 2, normalized-entropy: 0.9764143081154868, [(1, 36), (2, 25)]
*** center 3: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 13, 0]]
** centroid: 4, normalized-entropy: 0.698124573139618, [(1, 56), (2, 13)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 50, 21]]
** centroid: 5, normalized-entropy: 0.8760643678555242, [(2, 50), (3, 21)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [35, 40, 0]]
** centroid: 6, normalized-entropy: 0.9967916319816367, [(1, 35), (2, 40)]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2302181454524398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2302181454524398, 0.1906979745971039] ***
*** starting iteration: 2; err: [Inf, 0.2302181454524398, 0.1906979745971039] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2302181454524398, 0.1906979745971039, 0.18885202159918846] ***
*** starting iteration: 3; err: [Inf, 0.2302181454524398, 0.1906979745971039, 0.18885202159918846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2302181454524398, 0.1906979745971039, 0.18885202159918846, 0.18840926269069314] ***
*** finished computation of 7 references, err: [Inf, 0.2302181454524398, 0.1906979745971039, 0.18885202159918846, 0.18840926269069314] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [4, 57, 0]]
** centroid: 1, normalized-entropy: 0.34918437350730797, [(1, 4), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 17, 0]]
** centroid: 2, normalized-entropy: 0.7885131605379784, [(1, 55), (2, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 52, 23]]
** centroid: 4, normalized-entropy: 0.8892881527272397, [(2, 52), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 48, 0]]
** centroid: 5, normalized-entropy: 0.961236604722876, [(1, 30), (2, 48)]
*** center 6: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [79, 2, 0]]
** centroid: 7, normalized-entropy: 0.16702680404522793, [(1, 79), (2, 2)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22896080628409982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22896080628409982, 0.189025806048885] ***
*** starting iteration: 2; err: [Inf, 0.22896080628409982, 0.189025806048885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22896080628409982, 0.189025806048885, 0.18749809313565494] ***
*** starting iteration: 3; err: [Inf, 0.22896080628409982, 0.189025806048885, 0.18749809313565494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22896080628409982, 0.189025806048885, 0.18749809313565494, 0.18723451762646437] ***
*** finished computation of 7 references, err: [Inf, 0.22896080628409982, 0.189025806048885, 0.18749809313565494, 0.18723451762646437] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 24]]
** centroid: 2, normalized-entropy: 0.9229192878686723, [(2, 47), (3, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [65, 13, 0]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(1, 65), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 53, 0]]
** centroid: 5, normalized-entropy: 0.8729882944709463, [(1, 22), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 78, 0]]
** centroid: 7, normalized-entropy: 0.1686609314966701, [(1, 2), (2, 78)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23283823180943727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23283823180943727, 0.19196931900829076] ***
*** starting iteration: 2; err: [Inf, 0.23283823180943727, 0.19196931900829076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23283823180943727, 0.19196931900829076, 0.19062035684287548] ***
*** starting iteration: 3; err: [Inf, 0.23283823180943727, 0.19196931900829076, 0.19062035684287548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23283823180943727, 0.19196931900829076, 0.19062035684287548, 0.19012398320436477] ***
*** finished computation of 7 references, err: [Inf, 0.23283823180943727, 0.19196931900829076, 0.19062035684287548, 0.19012398320436477] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [34, 51, 0]]
** centroid: 1, normalized-entropy: 0.9709505944546688, [(1, 34), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [36, 30, 0]]
** centroid: 2, normalized-entropy: 0.9940302114769566, [(1, 36), (2, 30)]
*** center 3: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 71, 21]]
** centroid: 4, normalized-entropy: 0.7749672673267259, [(2, 71), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 46, 0]]
** centroid: 5, normalized-entropy: 0.9985090989176322, [(1, 42), (2, 46)]
*** center 6: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22798486388102174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22798486388102174, 0.19295409885793924] ***
*** starting iteration: 2; err: [Inf, 0.22798486388102174, 0.19295409885793924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22798486388102174, 0.19295409885793924, 0.1913591483384371] ***
*** starting iteration: 3; err: [Inf, 0.22798486388102174, 0.19295409885793924, 0.1913591483384371] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22798486388102174, 0.19295409885793924, 0.1913591483384371, 0.19084788113785908] ***
*** finished computation of 7 references, err: [Inf, 0.22798486388102174, 0.19295409885793924, 0.1913591483384371, 0.19084788113785908] ***
*** center 1: selecting labels [1] (freq >= 2) [from [88, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 33, 23]]
** centroid: 2, normalized-entropy: 0.9768740126265281, [(2, 33), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 9, 0]]
** centroid: 3, normalized-entropy: 0.511639783631173, [(1, 70), (2, 9)]
*** center 4: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 70, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 77, 0]]
** centroid: 7, normalized-entropy: 0.2307099556914763, [(1, 3), (2, 77)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22878739446401597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22878739446401597, 0.19608469839394094] ***
*** starting iteration: 2; err: [Inf, 0.22878739446401597, 0.19608469839394094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22878739446401597, 0.19608469839394094, 0.1943742890227586] ***
*** starting iteration: 3; err: [Inf, 0.22878739446401597, 0.19608469839394094, 0.1943742890227586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22878739446401597, 0.19608469839394094, 0.1943742890227586, 0.19347346984036268] ***
*** finished computation of 7 references, err: [Inf, 0.22878739446401597, 0.19608469839394094, 0.1943742890227586, 0.19347346984036268] ***
*** center 1: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 10, 0]]
** centroid: 2, normalized-entropy: 0.581321498763703, [(1, 62), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 48, 23]]
** centroid: 3, normalized-entropy: 0.9086185980409245, [(2, 48), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 21, 0]]
** centroid: 5, normalized-entropy: 0.8970964164730478, [(1, 46), (2, 21)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [23, 44, 0]]
** centroid: 7, normalized-entropy: 0.9279262619599757, [(1, 23), (2, 44)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23077696327492594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23077696327492594, 0.19405680507794024] ***
*** starting iteration: 2; err: [Inf, 0.23077696327492594, 0.19405680507794024] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23077696327492594, 0.19405680507794024, 0.1886318928003311] ***
*** starting iteration: 3; err: [Inf, 0.23077696327492594, 0.19405680507794024, 0.1886318928003311] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23077696327492594, 0.19405680507794024, 0.1886318928003311, 0.18714483659341932] ***
*** finished computation of 7 references, err: [Inf, 0.23077696327492594, 0.19405680507794024, 0.1886318928003311, 0.18714483659341932] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [61, 2, 0]]
** centroid: 1, normalized-entropy: 0.20307392998664567, [(1, 61), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 51, 22]]
** centroid: 2, normalized-entropy: 0.8829589691462253, [(2, 51), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 37, 0]]
** centroid: 3, normalized-entropy: 0.9959386076315955, [(1, 43), (2, 37)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 18, 0]]
** centroid: 4, normalized-entropy: 0.8058049113482652, [(1, 55), (2, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 84, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 1, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25720125130936505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25720125130936505, 0.1957001424320042] ***
*** starting iteration: 2; err: [Inf, 0.25720125130936505, 0.1957001424320042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25720125130936505, 0.1957001424320042, 0.18973249542713166] ***
*** starting iteration: 3; err: [Inf, 0.25720125130936505, 0.1957001424320042, 0.18973249542713166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25720125130936505, 0.1957001424320042, 0.18973249542713166, 0.1872290093638003] ***
*** finished computation of 7 references, err: [Inf, 0.25720125130936505, 0.1957001424320042, 0.18973249542713166, 0.1872290093638003] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 76, 16]]
** centroid: 1, normalized-entropy: 0.6665783579949205, [(2, 76), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 34, 0]]
** centroid: 3, normalized-entropy: 0.9788698505067782, [(1, 48), (2, 34)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [45, 4, 0]]
** centroid: 4, normalized-entropy: 0.4079059801389762, [(1, 45), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 18, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 72), (2, 18)]
*** center 6: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 61, 0]]
** centroid: 7, normalized-entropy: 0.5175827525559071, [(1, 8), (2, 61)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23635163767263292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23635163767263292, 0.18596755077317356] ***
*** starting iteration: 2; err: [Inf, 0.23635163767263292, 0.18596755077317356] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23635163767263292, 0.18596755077317356, 0.1838953568302095] ***
*** starting iteration: 3; err: [Inf, 0.23635163767263292, 0.18596755077317356, 0.1838953568302095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23635163767263292, 0.18596755077317356, 0.1838953568302095, 0.18333479158300905] ***
*** finished computation of 7 references, err: [Inf, 0.23635163767263292, 0.18596755077317356, 0.1838953568302095, 0.18333479158300905] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 77, 2]]
** centroid: 1, normalized-entropy: 0.17033057560105982, [(2, 77), (3, 2)]
*** center 2: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 17, 0]]
** centroid: 3, normalized-entropy: 0.8599530497177523, [(1, 43), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [61, 16, 0]]
** centroid: 4, normalized-entropy: 0.7372413771710565, [(1, 61), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 24, 0]]
** centroid: 5, normalized-entropy: 0.9043814577244941, [(1, 51), (2, 24)]
*** center 6: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 54, 19]]
** centroid: 7, normalized-entropy: 0.8271595195340525, [(2, 54), (3, 19)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24124215713422745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24124215713422745, 0.19183656763285398] ***
*** starting iteration: 2; err: [Inf, 0.24124215713422745, 0.19183656763285398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24124215713422745, 0.19183656763285398, 0.18909441596455873] ***
*** starting iteration: 3; err: [Inf, 0.24124215713422745, 0.19183656763285398, 0.18909441596455873] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24124215713422745, 0.19183656763285398, 0.18909441596455873, 0.18848305129446088] ***
*** finished computation of 7 references, err: [Inf, 0.24124215713422745, 0.19183656763285398, 0.18909441596455873, 0.18848305129446088] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 40, 19]]
** centroid: 2, normalized-entropy: 0.9065795484987461, [(2, 40), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 27, 0]]
** centroid: 3, normalized-entropy: 0.9224062617590724, [(1, 53), (2, 27)]
*** center 4: selecting labels [1] (freq >= 2) [from [69, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 63, 0]]
** centroid: 5, normalized-entropy: 0.576291461217437, [(1, 10), (2, 63)]
*** center 6: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 66, 0]]
** centroid: 7, normalized-entropy: 0.1914332548141934, [(1, 2), (2, 66)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24391028315201402] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24391028315201402, 0.19576483285799623] ***
*** starting iteration: 2; err: [Inf, 0.24391028315201402, 0.19576483285799623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24391028315201402, 0.19576483285799623, 0.19012839671596884] ***
*** starting iteration: 3; err: [Inf, 0.24391028315201402, 0.19576483285799623, 0.19012839671596884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24391028315201402, 0.19576483285799623, 0.19012839671596884, 0.18806861341837794] ***
*** finished computation of 7 references, err: [Inf, 0.24391028315201402, 0.19576483285799623, 0.19012839671596884, 0.18806861341837794] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 84, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 40, 0]]
** centroid: 3, normalized-entropy: 0.9894340222202265, [(1, 51), (2, 40)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 18, 0]]
** centroid: 4, normalized-entropy: 0.8003922080453356, [(1, 56), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [77, 2, 0]]
** centroid: 5, normalized-entropy: 0.17033057560105982, [(1, 77), (2, 2)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 49, 21]]
** centroid: 6, normalized-entropy: 0.8812908992306927, [(2, 49), (3, 21)]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25124732743948697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25124732743948697, 0.1904930930174887] ***
*** starting iteration: 2; err: [Inf, 0.25124732743948697, 0.1904930930174887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25124732743948697, 0.1904930930174887, 0.18780989644210785] ***
*** starting iteration: 3; err: [Inf, 0.25124732743948697, 0.1904930930174887, 0.18780989644210785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25124732743948697, 0.1904930930174887, 0.18780989644210785, 0.18738295010477304] ***
*** finished computation of 7 references, err: [Inf, 0.25124732743948697, 0.1904930930174887, 0.18780989644210785, 0.18738295010477304] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [74, 7, 0]]
** centroid: 1, normalized-entropy: 0.42440514472480345, [(1, 74), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 23, 0]]
** centroid: 2, normalized-entropy: 0.8941071841443881, [(1, 51), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 49, 24]]
** centroid: 3, normalized-entropy: 0.9136617865655933, [(2, 49), (3, 24)]
*** center 4: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 30, 0]]
** centroid: 5, normalized-entropy: 0.9826154285526119, [(1, 41), (2, 30)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 68, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2317139507904649] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2317139507904649, 0.18838417585007847] ***
*** starting iteration: 2; err: [Inf, 0.2317139507904649, 0.18838417585007847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2317139507904649, 0.18838417585007847, 0.1870622642133385] ***
*** starting iteration: 3; err: [Inf, 0.2317139507904649, 0.18838417585007847, 0.1870622642133385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2317139507904649, 0.18838417585007847, 0.1870622642133385, 0.1870966165550053] ***
*** finished computation of 7 references, err: [Inf, 0.2317139507904649, 0.18838417585007847, 0.1870622642133385, 0.1870966165550053] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [40, 47, 0]]
** centroid: 1, normalized-entropy: 0.9953251070631713, [(1, 40), (2, 47)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 25, 0]]
** centroid: 2, normalized-entropy: 0.9049382594235603, [(1, 53), (2, 25)]
*** center 3: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 71, 27]]
** centroid: 4, normalized-entropy: 0.8492607824494318, [(2, 71), (3, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 44, 0]]
** centroid: 5, normalized-entropy: 0.9445911819316588, [(1, 25), (2, 44)]
*** center 6: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22779840527102352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22779840527102352, 0.1947869541235268] ***
*** starting iteration: 2; err: [Inf, 0.22779840527102352, 0.1947869541235268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22779840527102352, 0.1947869541235268, 0.19289028189331292] ***
*** starting iteration: 3; err: [Inf, 0.22779840527102352, 0.1947869541235268, 0.19289028189331292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22779840527102352, 0.1947869541235268, 0.19289028189331292, 0.19261553727090358] ***
*** finished computation of 7 references, err: [Inf, 0.22779840527102352, 0.1947869541235268, 0.19289028189331292, 0.19261553727090358] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [75, 5, 0]]
** centroid: 1, normalized-entropy: 0.3372900666170139, [(1, 75), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 28, 0]]
** centroid: 2, normalized-entropy: 0.9023932827949788, [(1, 60), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 17, 19]]
** centroid: 3, normalized-entropy: 0.9977724720899819, [(2, 17), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 15, 0]]
** centroid: 5, normalized-entropy: 0.7062740891876008, [(1, 63), (2, 15)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21848121552914382] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21848121552914382, 0.1929916078876704] ***
*** starting iteration: 2; err: [Inf, 0.21848121552914382, 0.1929916078876704] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21848121552914382, 0.1929916078876704, 0.1875655196411535] ***
*** starting iteration: 3; err: [Inf, 0.21848121552914382, 0.1929916078876704, 0.1875655196411535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21848121552914382, 0.1929916078876704, 0.1875655196411535, 0.18666299795079977] ***
*** finished computation of 7 references, err: [Inf, 0.21848121552914382, 0.1929916078876704, 0.1875655196411535, 0.18666299795079977] ***
*** center 1: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 3, 0]]
** centroid: 2, normalized-entropy: 0.25524211319019174, [(1, 67), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 55, 18]]
** centroid: 3, normalized-entropy: 0.8058049113482652, [(2, 55), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 38, 0]]
** centroid: 5, normalized-entropy: 0.9833761901392238, [(1, 28), (2, 38)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [41, 40, 0]]
** centroid: 6, normalized-entropy: 0.9998900524545515, [(1, 41), (2, 40)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 55, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23166830226406454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23166830226406454, 0.1928727393588051] ***
*** starting iteration: 2; err: [Inf, 0.23166830226406454, 0.1928727393588051] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23166830226406454, 0.1928727393588051, 0.19018054244108498] ***
*** starting iteration: 3; err: [Inf, 0.23166830226406454, 0.1928727393588051, 0.19018054244108498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23166830226406454, 0.1928727393588051, 0.19018054244108498, 0.1894543587625958] ***
*** finished computation of 7 references, err: [Inf, 0.23166830226406454, 0.1928727393588051, 0.19018054244108498, 0.1894543587625958] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 74, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [83, 2, 0]]
** centroid: 3, normalized-entropy: 0.16082302082246946, [(1, 83), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [70, 8, 0]]
** centroid: 4, normalized-entropy: 0.4770713062193298, [(1, 70), (2, 8)]
*** center 5: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 26, 25]]
** centroid: 6, normalized-entropy: 0.9997226475394071, [(2, 26), (3, 25)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 74, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23312976083531975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23312976083531975, 0.19245492187794297] ***
*** starting iteration: 2; err: [Inf, 0.23312976083531975, 0.19245492187794297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23312976083531975, 0.19245492187794297, 0.18884740311093628] ***
*** starting iteration: 3; err: [Inf, 0.23312976083531975, 0.19245492187794297, 0.18884740311093628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23312976083531975, 0.19245492187794297, 0.18884740311093628, 0.18832505267299712] ***
*** finished computation of 7 references, err: [Inf, 0.23312976083531975, 0.19245492187794297, 0.18884740311093628, 0.18832505267299712] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [59, 5, 0]]
** centroid: 1, normalized-entropy: 0.3955378064564774, [(1, 59), (2, 5)]
*** center 2: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 65, 21]]
** centroid: 3, normalized-entropy: 0.8019325020834525, [(2, 65), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 14, 0]]
** centroid: 4, normalized-entropy: 0.6892019851173655, [(1, 62), (2, 14)]
*** center 5: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [42, 39, 0]]
** centroid: 6, normalized-entropy: 0.9990102708804813, [(1, 42), (2, 39)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 69, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22256050200946628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22256050200946628, 0.18864476005733014] ***
*** starting iteration: 2; err: [Inf, 0.22256050200946628, 0.18864476005733014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22256050200946628, 0.18864476005733014, 0.18440323987789453] ***
*** starting iteration: 3; err: [Inf, 0.22256050200946628, 0.18864476005733014, 0.18440323987789453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22256050200946628, 0.18864476005733014, 0.18440323987789453, 0.1831810927093029] ***
*** finished computation of 7 references, err: [Inf, 0.22256050200946628, 0.18864476005733014, 0.18440323987789453, 0.1831810927093029] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 61, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [39, 30, 0]]
** centroid: 3, normalized-entropy: 0.9876925088958032, [(1, 39), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 9, 0]]
** centroid: 4, normalized-entropy: 0.5074109636646968, [(1, 71), (2, 9)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 14, 0]]
** centroid: 5, normalized-entropy: 0.7578784625383954, [(1, 50), (2, 14)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 77, 16]]
** centroid: 6, normalized-entropy: 0.6623570516079519, [(2, 77), (3, 16)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23992704429849981] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23992704429849981, 0.19084975088201464] ***
*** starting iteration: 2; err: [Inf, 0.23992704429849981, 0.19084975088201464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23992704429849981, 0.19084975088201464, 0.1853423614334315] ***
*** starting iteration: 3; err: [Inf, 0.23992704429849981, 0.19084975088201464, 0.1853423614334315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23992704429849981, 0.19084975088201464, 0.1853423614334315, 0.18433329312875868] ***
*** finished computation of 7 references, err: [Inf, 0.23992704429849981, 0.19084975088201464, 0.1853423614334315, 0.18433329312875868] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [21, 55, 0]]
** centroid: 1, normalized-entropy: 0.8503821170987139, [(1, 21), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [56, 8, 0]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(1, 56), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 60, 23]]
** centroid: 4, normalized-entropy: 0.8514808683852091, [(2, 60), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [80, 5, 0]]
** centroid: 5, normalized-entropy: 0.32275695889739825, [(1, 80), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [48, 5, 0]]
** centroid: 6, normalized-entropy: 0.4507913883546652, [(1, 48), (2, 5)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21918563074059785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21918563074059785, 0.190672839615494] ***
*** starting iteration: 2; err: [Inf, 0.21918563074059785, 0.190672839615494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21918563074059785, 0.190672839615494, 0.18921002659760416] ***
*** starting iteration: 3; err: [Inf, 0.21918563074059785, 0.190672839615494, 0.18921002659760416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21918563074059785, 0.190672839615494, 0.18921002659760416, 0.1892935030926019] ***
*** finished computation of 7 references, err: [Inf, 0.21918563074059785, 0.190672839615494, 0.18921002659760416, 0.1892935030926019] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 45, 22]]
** centroid: 2, normalized-entropy: 0.9132401614300725, [(2, 45), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [39, 29, 0]]
** centroid: 3, normalized-entropy: 0.9843432030984676, [(1, 39), (2, 29)]
*** center 4: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 54, 0]]
** centroid: 5, normalized-entropy: 0.5140912790181233, [(1, 7), (2, 54)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [20, 58, 0]]
** centroid: 6, normalized-entropy: 0.8212809417449864, [(1, 20), (2, 58)]
*** center 7: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23651279082894325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23651279082894325, 0.18834192498773336] ***
*** starting iteration: 2; err: [Inf, 0.23651279082894325, 0.18834192498773336] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23651279082894325, 0.18834192498773336, 0.18404545888118445] ***
*** starting iteration: 3; err: [Inf, 0.23651279082894325, 0.18834192498773336, 0.18404545888118445] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23651279082894325, 0.18834192498773336, 0.18404545888118445, 0.18233534717187286] ***
*** finished computation of 7 references, err: [Inf, 0.23651279082894325, 0.18834192498773336, 0.18404545888118445, 0.18233534717187286] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [43, 34, 0]]
** centroid: 1, normalized-entropy: 0.9901226308935799, [(1, 43), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 25, 0]]
** centroid: 2, normalized-entropy: 0.9227346209530939, [(1, 49), (2, 25)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 57, 23]]
** centroid: 3, normalized-entropy: 0.8654698974285927, [(2, 57), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [5, 65, 0]]
** centroid: 5, normalized-entropy: 0.3712323266408756, [(1, 5), (2, 65)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23120114266127348] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23120114266127348, 0.1937869457062334] ***
*** starting iteration: 2; err: [Inf, 0.23120114266127348, 0.1937869457062334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23120114266127348, 0.1937869457062334, 0.19317370123416186] ***
*** finished computation of 7 references, err: [Inf, 0.23120114266127348, 0.1937869457062334, 0.19317370123416186] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [10, 74, 0]]
** centroid: 1, normalized-entropy: 0.5266170655714281, [(1, 10), (2, 74)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 2, 0]]
** centroid: 2, normalized-entropy: 0.2761954276479391, [(1, 40), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 33, 23]]
** centroid: 4, normalized-entropy: 0.9768740126265281, [(2, 33), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [70, 4, 0]]
** centroid: 5, normalized-entropy: 0.30337483608641397, [(1, 70), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 71, 0]]
** centroid: 6, normalized-entropy: 0.4356133734874324, [(1, 7), (2, 71)]
*** center 7: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
finished with 8 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 374,3 => 42,1 => 584), Dict(2 => 365,3 => 31,1 => 604))
[ Info: ===== scores for single classifier: {"micro_f1":0.938,"precision":0.938,"recall":0.938,"macro_recall":0.9138606569450581,"macro_f1":0.8646364351112125,"accuracy":0.938,"class_f1":{"2":0.9080118694362019,"3":0.7179487179487178,"1":0.9679487179487178},"class_precision":{"2":0.9902912621359223,"3":0.5957446808510638,"1":0.937888198757764},"class_recall":{"2":0.8383561643835616,"3":0.9032258064516129,"1":1.0}}
[ Info: ===== scores for 1: {"micro_f1":0.968,"precision":0.968,"recall":0.968,"macro_recall":0.8963970739577755,"macro_f1":0.929541289526214,"accuracy":0.968,"class_f1":{"2":0.9566395663956639,"3":0.8518518518518519,"1":0.9801324503311258},"class_precision":{"2":0.9463806970509383,"3":1.0,"1":0.9801324503311258},"class_recall":{"2":0.9671232876712329,"3":0.7419354838709677,"1":0.9801324503311258}}
[ Info: ===== scores for 5: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9068080523714345,"macro_f1":0.9382583055400017,"accuracy":0.971,"class_f1":{"2":0.9601100412654746,"3":0.8727272727272727,"1":0.9819376026272578},"class_precision":{"2":0.9640883977900553,"3":1.0,"1":0.9739413680781759},"class_recall":{"2":0.9561643835616438,"3":0.7741935483870968,"1":0.9900662251655629}}
[ Info: ===== scores for 7: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9036873048435382,"macro_f1":0.9346432360130991,"accuracy":0.966,"class_f1":{"2":0.9534246575342465,"3":0.8727272727272727,"1":0.9777777777777779},"class_precision":{"2":0.9534246575342465,"3":1.0,"1":0.972176759410802},"class_recall":{"2":0.9534246575342465,"3":0.7741935483870968,"1":0.9834437086092715}}
[ Info: ===== scores for 9: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9129748746267579,"macro_f1":0.940325952054347,"accuracy":0.965,"class_f1":{"2":0.9519890260631001,"3":0.8928571428571428,"1":0.9761316872427983},"class_precision":{"2":0.9532967032967034,"3":1.0,"1":0.9705400981996727},"class_recall":{"2":0.9506849315068493,"3":0.8064516129032258,"1":0.9817880794701986}}
[ Info: ===== scores for 11: {"micro_f1":0.962,"precision":0.962,"recall":0.962,"macro_recall":0.9095124173404777,"macro_f1":0.938012994843902,"accuracy":0.962,"class_f1":{"2":0.9473684210526316,"3":0.8928571428571428,"1":0.9738134206219313},"class_precision":{"2":0.957983193277311,"3":1.0,"1":0.9627831715210357},"class_recall":{"2":0.936986301369863,"3":0.8064516129032258,"1":0.9850993377483444}}
(score = 0.968, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.978,"k":3,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.9139234776942443,"macro_f1":0.9434964894701796,"accuracy":0.978,"class_f1":{"2":0.970189701897019,"3":0.8727272727272727,"1":0.9875724937862469},"class_precision":{"2":0.9597855227882037,"3":1.0,"1":0.988391376451078},"class_recall":{"2":0.9808219178082191,"3":0.7741935483870968,"1":0.9867549668874173}}
Test Summary: | Pass  Total
AKNC          |    8      8
[65, 2, 1, 1, 1, 4, 9, 4, 9, 6, 7, 1, 6, 7, 8, 3, 14, 1, 15, 39, 39, 5, 18, 6, 9, 9, 31, 1, 2, 1, 4, 2, 27, 79, 4, 10, 8, 1, 4, 14, 12, 13, 3, 1, 5, 2, 3, 1, 17, 20, 6, 27, 3, 4, 41, 2, 13, 15, 17, 3, 15, 3, 5, 11, 14, 20, 1, 26, 4, 28, 107, 10, 2, 2, 1, 39, 2, 7, 5, 5, 6, 8, 9, 10, 85, 17, 6, 5, 17, 3, 27, 7, 72, 10, 9, 4, 24, 7, 4, 79, 6, 17, 23, 19, 14, 12, 6, 73, 37, 102, 33, 5, 11, 7, 13, 5, 18, 116, 57, 35, 24, 7, 68, 3, 772, 3, 20, 2, 20, 192, 20, 23, 18, 24, 20, 1, 12, 13, 3, 3, 1, 4, 33, 17, 30, 10, 37, 1, 20, 3, 2, 129, 11, 4, 23, 46, 5, 61, 145, 21, 14, 41, 6, 41, 1, 100, 53, 35, 5, 126, 6, 21, 65, 43, 33, 69, 21, 15, 21, 12, 32, 1, 12, 35, 4, 100, 17, 12, 73, 26, 41, 7, 22, 11, 11, 8, 110, 60, 23, 5, 6, 5, 5, 10, 33, 252, 26, 10, 59, 33, 3, 16, 117, 7, 20, 81, 11, 16, 4, 14, 81, 18, 56, 26, 12, 25, 9, 12, 2, 16, 34, 5, 284, 70, 20, 17, 84, 4, 1, 2, 10, 3, 4, 69, 43, 16, 6, 27, 25, 27, 39, 27, 5, 16, 225, 4, 36, 46, 14, 39, 141, 11, 14, 3, 101, 45, 97, 20, 28, 27, 16, 3, 11, 12, 12, 37, 8, 113, 12, 166, 11, 406, 9, 62, 32, 13, 26, 18, 63, 137, 100, 10, 37, 21, 55, 505, 3, 22, 18, 189]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6449999999999997, speedup = 0.1920703766740011, eval_ratio = 0.07405700000000001)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":null,"recall":0.39930555555555547,"f1":null,"seconds":0.00010334886610507965,"exhaustive_search_seconds":0.00040017254650592804,"evaluations":476.28125,"distances_sum":1648.0106165080906}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5963541666666667,"recall":0.5963541666666667,"f1":null,"seconds":0.000187726691365242,"exhaustive_search_seconds":0.00040017254650592804,"evaluations":644.3125,"distances_sum":1585.6019027579562}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.7083333333333328,"recall":0.7083333333333328,"f1":0.7083333333333328,"seconds":0.0003687981516122818,"exhaustive_search_seconds":0.00040017254650592804,"evaluations":800.6796875,"distances_sum":1529.5475699045069}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7925347222222218,"recall":0.7925347222222218,"f1":0.7925347222222218,"seconds":0.00029712170362472534,"exhaustive_search_seconds":0.00040017254650592804,"evaluations":910.1953125,"distances_sum":1498.7478872945687}
KCenters.DeloneInvIndex> reached performance {"precision":0.8359374999999996,"recall":0.8359374999999996,"f1":0.8359374999999996,"seconds":0.00035119615495204926,"exhaustive_search_seconds":0.00040017254650592804,"evaluations":1027.734375,"distances_sum":1486.9928746264786}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7809999999999999, speedup = 0.464768581443594, eval_ratio = 0.096919)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
