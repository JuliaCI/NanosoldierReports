Julia Version 1.5.0-DEV.651
Commit 881fee905f (2020-04-20 16:22 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed InvertedIndices ───────────── v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed CoordinateTransformations ─── v0.5.1
  Installed Compat ────────────────────── v3.8.0
  Installed DataAPI ───────────────────── v1.2.0
  Installed StaticArrays ──────────────── v0.12.1
  Installed SyntheticGrids ────────────── v0.1.0
  Installed PyCall ────────────────────── v1.91.4
  Installed MacroTools ────────────────── v0.5.5
  Installed AutoHashEquals ────────────── v0.2.0
  Installed Tables ────────────────────── v1.0.4
  Installed PooledArrays ──────────────── v0.5.3
  Installed VersionParsing ────────────── v1.2.0
  Installed OrderedCollections ────────── v1.1.0
  Installed DataStructures ────────────── v0.17.13
  Installed CategoricalArrays ─────────── v0.7.7
  Installed Rotations ─────────────────── v0.13.0
  Installed Conda ─────────────────────── v1.4.1
  Installed TableTraits ───────────────── v1.0.0
  Installed JSON ──────────────────────── v0.21.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Reexport ──────────────────── v0.2.0
  Installed Geodesy ───────────────────── v0.5.0
  Installed WeakRefStrings ────────────── v0.6.2
  Installed FilePathsBase ─────────────── v0.7.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Parsers ───────────────────── v0.3.12
  Installed DataFrames ────────────────── v0.20.2
  Installed CSV ───────────────────────── v0.5.26
Updating `~/.julia/environments/v1.5/Project.toml`
  [34f115b4] + SyntheticGrids v0.1.0
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [15f4f7f2] + AutoHashEquals v0.2.0
  [336ed68f] + CSV v0.5.26
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [8f4d0f93] + Conda v1.4.1
  [150eb455] + CoordinateTransformations v0.5.1
  [9a962f9c] + DataAPI v1.2.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.13
  [e2d170a0] + DataValueInterfaces v1.0.0
  [48062228] + FilePathsBase v0.7.0
  [0ef565a4] + Geodesy v0.5.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [1914dd2f] + MacroTools v0.5.5
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.12
  [2dfb63ee] + PooledArrays v0.5.3
  [438e738f] + PyCall v1.91.4
  [189a3867] + Reexport v0.2.0
  [6038ab10] + Rotations v0.13.0
  [a2af1166] + SortingAlgorithms v0.3.1
  [90137ffa] + StaticArrays v0.12.1
  [34f115b4] + SyntheticGrids v0.1.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [81def892] + VersionParsing v1.2.0
  [ea10d353] + WeakRefStrings v0.6.2
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building Conda ─────────→ `~/.julia/packages/Conda/3rPhK/deps/build.log`
   Building PyCall ────────→ `~/.julia/packages/PyCall/zqDXB/deps/build.log`
   Building SyntheticGrids → `~/.julia/packages/SyntheticGrids/WgelH/deps/build.log`
    Testing SyntheticGrids
Status `/tmp/jl_kb12IP/Project.toml`
  [15f4f7f2] AutoHashEquals v0.2.0
  [336ed68f] CSV v0.5.26
  [8f4d0f93] Conda v1.4.1
  [0ef565a4] Geodesy v0.5.0
  [682c06a0] JSON v0.21.0
  [438e738f] PyCall v1.91.4
  [34f115b4] SyntheticGrids v0.1.0
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_kb12IP/Manifest.toml`
  [15f4f7f2] AutoHashEquals v0.2.0
  [336ed68f] CSV v0.5.26
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [8f4d0f93] Conda v1.4.1
  [150eb455] CoordinateTransformations v0.5.1
  [9a962f9c] DataAPI v1.2.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.13
  [e2d170a0] DataValueInterfaces v1.0.0
  [48062228] FilePathsBase v0.7.0
  [0ef565a4] Geodesy v0.5.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [1914dd2f] MacroTools v0.5.5
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.12
  [2dfb63ee] PooledArrays v0.5.3
  [438e738f] PyCall v1.91.4
  [189a3867] Reexport v0.2.0
  [6038ab10] Rotations v0.13.0
  [a2af1166] SortingAlgorithms v0.3.1
  [90137ffa] StaticArrays v0.12.1
  [34f115b4] SyntheticGrids v0.1.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [81def892] VersionParsing v1.2.0
  [ea10d353] WeakRefStrings v0.6.2
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
ERROR: LoadError: InitError: PyError (PyImport_ImportModule

The Python package pandapower could not be found by pyimport. Usually this means
that you did not install pandapower in the Python version being used by PyCall.

PyCall is currently configured to use the Python version at:

/usr/bin/python3

and you should use whatever mechanism you usually use (apt-get, pip, conda,
etcetera) to install the Python package containing the pandapower module.

One alternative is to re-configure PyCall to use a different Python
version on your system: set ENV["PYTHON"] to the path/name of the python
executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.

Another alternative is to configure PyCall to use a Julia-specific Python
distribution via the Conda.jl package (which installs a private Anaconda
Python distribution), which has the advantage that packages can be installed
and kept up-to-date via Julia.  As explained in the PyCall documentation,
set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
To install the pandapower module, you can use `pyimport_conda("pandapower", PKG)`,
where PKG is the Anaconda package the contains the module pandapower,
or alternatively you can use the Conda package directly (via
`using Conda` followed by `Conda.add` etcetera).

) <class 'ModuleNotFoundError'>
ModuleNotFoundError("No module named 'pandapower'",)

Stacktrace:
 [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:536
 [2] pyimport_conda(::String, ::String, ::String) at /home/pkgeval/.julia/packages/PyCall/zqDXB/src/PyCall.jl:694
 [3] __init__() at /home/pkgeval/.julia/packages/SyntheticGrids/WgelH/src/SyntheticGrids.jl:21
 [4] _include_from_serialized(::String, ::Array{Any,1}) at ./loading.jl:697
 [5] _require_from_serialized(::String) at ./loading.jl:748
 [6] _require(::Base.PkgId) at ./loading.jl:1039
 [7] require(::Base.PkgId) at ./loading.jl:927
 [8] require(::Module, ::Symbol) at ./loading.jl:922
 [9] include(::String) at ./client.jl:442
 [10] top-level scope at none:6
during initialization of module SyntheticGrids
in expression starting at /home/pkgeval/.julia/packages/SyntheticGrids/WgelH/test/runtests.jl:1
ERROR: Package SyntheticGrids errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1516
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:316
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:303
 [5] #test#68 at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [7] #test#67 at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [11] top-level scope at none:16
