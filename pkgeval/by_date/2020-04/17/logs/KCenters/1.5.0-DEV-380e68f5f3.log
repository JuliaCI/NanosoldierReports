Julia Version 1.5.0-DEV.640
Commit 380e68f5f3 (2020-04-17 17:55 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed InvertedIndices ───────────── v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed DataStructures ────────────── v0.17.12
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed MLDataPattern ─────────────── v0.5.1
  Installed StatsBase ─────────────────── v0.32.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed Parsers ───────────────────── v1.0.1
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed Tables ────────────────────── v1.0.4
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed OrderedCollections ────────── v1.1.0
  Installed TableTraits ───────────────── v1.0.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed Compat ────────────────────── v3.8.0
  Installed Missings ──────────────────── v0.4.3
  Installed Reexport ──────────────────── v0.2.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed JSON ──────────────────────── v0.21.0
  Installed DataFrames ────────────────── v0.20.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.12
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.1
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_6kmCSk/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_6kmCSk/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.12
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.1
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9360659371813138
[ Info: 0.8326150393486023
[ Info: 0.5548521900673707
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3219924190888802
mean(cdnet.distances) = 0.35029623957971734
mean(crand.distances) = 0.3494896611571312
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.384765625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.384765625,"f1":null,"seconds":5.0067901611328125e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":6.359375,"distances_sum":1188.6598571766485}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3759765625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3759765625,"f1":null,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":6.34375,"distances_sum":1111.2414008362489}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8523871961371969,"seconds":6.621703505516052e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.484375,"distances_sum":2450.8294648694155}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.751953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.751953125,"f1":0.8523871961371969,"seconds":6.621703505516052e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.484375,"distances_sum":2450.8294648694155}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8515057858807866,"seconds":6.645917892456055e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.390625,"distances_sum":2493.6029079691816}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.938012508325009,"seconds":7.1749091148376465e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.796875,"distances_sum":3088.140190240569}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9542499167499172,"seconds":7.079914212226868e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8046875,"distances_sum":3250.142441752454}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9110233516483524,"seconds":6.880611181259155e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.5546875,"distances_sum":2929.522149301137}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8905001248751255,"seconds":6.465241312980652e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.4609375,"distances_sum":2797.9442409340704}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9542499167499172,"seconds":7.079914212226868e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.8046875,"distances_sum":3250.142441752454}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9773809523809527,"seconds":7.653608918190002e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9375,"distances_sum":3408.608048514329}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9775125915750918,"seconds":7.634982466697693e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9453125,"distances_sum":3415.869781457277}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9776785714285716,"seconds":7.340684533119202e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9296875,"distances_sum":3436.1704988068186}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9775125915750918,"seconds":7.634982466697693e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9453125,"distances_sum":3415.869781457277}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9775125915750918,"seconds":7.634982466697693e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9453125,"distances_sum":3415.869781457277}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.19140625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.19140625,"f1":null,"seconds":4.12575900554657e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":5.59375,"distances_sum":592.9948898245174}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.19140625,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.19140625,"f1":null,"seconds":4.12575900554657e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":5.59375,"distances_sum":592.9948898245174}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8484120046620055,"seconds":6.368383765220642e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":8.3515625,"distances_sum":2229.391167220542}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.75,"f1":0.8484120046620055,"seconds":6.368383765220642e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":8.3515625,"distances_sum":2229.391167220542}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8558243839493849,"seconds":6.4801424741744995e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":8.390625,"distances_sum":2305.75061983449}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8558243839493849,"seconds":6.4801424741744995e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":8.390625,"distances_sum":2305.75061983449}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.763671875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8558243839493849,"seconds":6.4801424741744995e-6,"exhaustive_search_seconds":1.8440186977386475e-6,"evaluations":8.390625,"distances_sum":2305.75061983449}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.560546875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.560546875,"f1":0.7013651279276285,"seconds":5.31412661075592e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":7.390625,"distances_sum":1441.0078850171788}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.560546875,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.560546875,"f1":0.7013651279276285,"seconds":5.31412661075592e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":7.390625,"distances_sum":1441.0078850171788}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8516322219447227,"seconds":6.4373016357421875e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.5,"distances_sum":2178.2819721128126}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9279678654678661,"seconds":6.865710020065308e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.6796875,"distances_sum":2720.1676477525557}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.876953125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.876953125,"f1":0.9279678654678661,"seconds":6.865710020065308e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.6796875,"distances_sum":2720.1676477525557}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9613152472527478,"seconds":6.629154086112976e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.8828125,"distances_sum":3018.4403610097684}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9579670329670336,"seconds":6.4782798290252686e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.890625,"distances_sum":2968.7063173518745}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9316907051282061,"seconds":6.2230974435806274e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.7578125,"distances_sum":2732.0435277133643}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9613152472527478,"seconds":6.629154086112976e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.8828125,"distances_sum":3018.4403610097684}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9613152472527478,"seconds":6.629154086112976e-6,"exhaustive_search_seconds":1.8831342458724976e-6,"evaluations":8.8828125,"distances_sum":3018.4403610097684}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8098568098568107,"seconds":4.958361387252808e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.375,"distances_sum":1831.451006048543}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1708984375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1708984375,"f1":null,"seconds":3.889203071594238e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":4.984375,"distances_sum":413.02811256181513}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.185546875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.185546875,"f1":null,"seconds":3.1776726245880127e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":5.4296875,"distances_sum":505.87193485158775}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6923828125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6923828125,"f1":0.8098568098568107,"seconds":4.958361387252808e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.375,"distances_sum":1831.451006048543}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8837089993340003,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.296875,"distances_sum":2317.638681848237}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9504178113553119,"seconds":6.202608346939087e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7890625,"distances_sum":2849.7138663832948}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9504178113553119,"seconds":6.202608346939087e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7890625,"distances_sum":2849.7138663832948}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.953932005494506,"seconds":6.411224603652954e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7890625,"distances_sum":2916.7447561534873}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.953932005494506,"seconds":6.411224603652954e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7890625,"distances_sum":2916.7447561534873}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9189453125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.953932005494506,"seconds":6.411224603652954e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7890625,"distances_sum":2916.7447561534873}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.703125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.703125,"f1":0.8146173271173279,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.03125,"distances_sum":1871.4992997940406}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.21875,"f1":null,"seconds":3.8780272006988525e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":5.9453125,"distances_sum":623.5106423422042}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.59765625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.59765625,"f1":0.7320363664113669,"seconds":4.800036549568176e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.7109375,"distances_sum":1525.9523055382836}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.689453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.689453125,"f1":0.8064810189810198,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.0078125,"distances_sum":1843.5710604237267}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.703125,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.703125,"f1":0.8146173271173279,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.03125,"distances_sum":1871.4992997940406}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.845703125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.845703125,"f1":0.9092782217782225,"seconds":6.433576345443726e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.546875,"distances_sum":2477.5254390172186}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8662925616050624,"seconds":5.939975380897522e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.46875,"distances_sum":2173.4353939232446}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.918240613553114,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.71875,"distances_sum":2530.810993318378}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9344207875457882,"seconds":6.342306733131409e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.71875,"distances_sum":2682.4080188395783}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8519978285603294,"seconds":6.230548024177551e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.34375,"distances_sum":2080.5284810446215}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.71484375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.71484375,"f1":0.8241539710289719,"seconds":5.694106221199036e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.1796875,"distances_sum":1910.1687498867082}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8876953125,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8876953125,"f1":0.9344207875457882,"seconds":6.342306733131409e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.71875,"distances_sum":2682.4080188395783}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9625400641025643,"seconds":6.992369890213013e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.8515625,"distances_sum":2941.7477561315536}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9509214743589751,"seconds":6.459653377532959e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.796875,"distances_sum":2806.865453688175}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9710393772893777,"seconds":6.9979578256607056e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.890625,"distances_sum":3004.0408670779143}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":12,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9579097985347989,"seconds":7.066875696182251e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.8515625,"distances_sum":2897.3920666516237}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9496336996337003,"seconds":6.712973117828369e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.8046875,"distances_sum":2817.447282443602}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":11,"bsize":7}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9452438186813191,"seconds":6.614252924919128e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.703125,"distances_sum":2776.9815605042286}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9710393772893777,"seconds":6.9979578256607056e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.890625,"distances_sum":3004.0408670779143}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9710393772893777,"seconds":6.9979578256607056e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.890625,"distances_sum":3004.0408670779143}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.804034507159508,"seconds":5.189329385757446e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":7.8515625,"distances_sum":1828.3757579067583}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2197265625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2197265625,"f1":null,"seconds":3.645196557044983e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":6.5,"distances_sum":591.0451754812681}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8762882950382958,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.1796875,"distances_sum":2281.0528715927508}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.791015625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.791015625,"f1":0.8762882950382958,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.1796875,"distances_sum":2281.0528715927508}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9536515567765572,"seconds":6.6123902797698975e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.7890625,"distances_sum":2841.3817093233115}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9339743589743597,"seconds":6.517395377159119e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.7265625,"distances_sum":2669.474766097887}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9536515567765572,"seconds":6.6123902797698975e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.7890625,"distances_sum":2841.3817093233115}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9608287545787549,"seconds":6.493180990219116e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.875,"distances_sum":2876.3404305862873}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.964251373626374,"seconds":6.496906280517578e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.8671875,"distances_sum":2904.215392662019}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.964251373626374,"seconds":6.496906280517578e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.8671875,"distances_sum":2904.215392662019}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.964251373626374,"seconds":6.496906280517578e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.8671875,"distances_sum":2904.215392662019}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3134765625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3134765625,"f1":null,"seconds":4.1835010051727295e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":5.2265625,"distances_sum":740.1524988963278}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9791945684523808,"recall":0.748046875,"f1":0.8406614869505501,"seconds":6.28642737865448e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.2265625,"distances_sum":1781.7800387456916}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.748046875,"state":{"ssize":1,"bsize":5},"perf":{"precision":0.9791945684523808,"recall":0.748046875,"f1":0.8406614869505501,"seconds":6.28642737865448e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.2265625,"distances_sum":1781.7800387456916}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":1,"bsize":6}, perf: {"precision":0.9799107142857142,"recall":0.8095703125,"f1":0.8802105446636702,"seconds":6.586313247680664e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.609375,"distances_sum":2005.1138110526097}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":4,"bsize":6}, perf: {"precision":0.9834170386904761,"recall":0.791015625,"f1":0.8688885983807864,"seconds":6.310641765594482e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.5390625,"distances_sum":1903.9959328089838}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8095703125,"state":{"ssize":1,"bsize":6},"perf":{"precision":0.9799107142857142,"recall":0.8095703125,"f1":0.8802105446636702,"seconds":6.586313247680664e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.609375,"distances_sum":2005.1138110526097}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":1,"bsize":7}, perf: {"precision":0.9846540178571428,"recall":0.849609375,"f1":0.9073989812271066,"seconds":6.800517439842224e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.625,"distances_sum":2147.099857269446}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":2,"bsize":10}, perf: {"precision":0.9756510416666667,"recall":0.908203125,"f1":0.937236721611722,"seconds":6.834045052528381e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.71875,"distances_sum":2431.85670376404}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":7,"bsize":8}, perf: {"precision":0.9828590029761904,"recall":0.8759765625,"f1":0.9211316678113555,"seconds":6.580725312232971e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.6484375,"distances_sum":2290.189536917451}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":0.9866071428571429,"recall":0.9423828125,"f1":0.9623340201465205,"seconds":6.692484021186829e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.875,"distances_sum":2500.1038516894077}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":4,"bsize":7}, perf: {"precision":0.9849795386904762,"recall":0.8466796875,"f1":0.9053724270521151,"seconds":6.53974711894989e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.625,"distances_sum":2146.4208576858655}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":3,"bsize":6}, perf: {"precision":0.9818638392857144,"recall":0.8330078125,"f1":0.8953027441308697,"seconds":6.575137376785278e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.7265625,"distances_sum":2035.4556621533377}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":0.9866071428571429,"recall":0.9423828125,"f1":0.9623340201465205,"seconds":6.692484021186829e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.875,"distances_sum":2500.1038516894077}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":0.9866071428571429,"recall":0.9423828125,"f1":0.9623340201465205,"seconds":6.692484021186829e-6,"exhaustive_search_seconds":1.7415732145309448e-6,"evaluations":8.875,"distances_sum":2500.1038516894077}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8604119838494846,"seconds":5.95487654209137e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":7.7734375,"distances_sum":1731.7132790907658}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7775838744588751,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":7.3359375,"distances_sum":1378.4986612269665}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.595703125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.595703125,"f1":0.7364895521145526,"seconds":4.973262548446655e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":7.1875,"distances_sum":1272.4775424108848}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8604119838494846,"seconds":5.95487654209137e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":7.7734375,"distances_sum":1731.7132790907658}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.905692224442225,"seconds":8.326023817062378e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.328125,"distances_sum":2030.883867379804}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9575549450549454,"seconds":7.187947630882263e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.78125,"distances_sum":2430.804476125237}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9518486721611727,"seconds":6.198883056640625e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.7734375,"distances_sum":2388.338256083235}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9210737179487186,"seconds":6.426125764846802e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.4921875,"distances_sum":2138.0901278279944}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9575549450549454,"seconds":7.187947630882263e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.78125,"distances_sum":2430.804476125237}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9643429487179492,"seconds":6.876885890960693e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.8515625,"distances_sum":2459.4822550739163}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.963009386446887,"seconds":6.848946213722229e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.8515625,"distances_sum":2446.793660298937}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":9,"bsize":12}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9808608058608062,"seconds":7.072463631629944e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.9453125,"distances_sum":2562.4217232338783}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":9,"bsize":12},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9808608058608062,"seconds":7.072463631629944e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.9453125,"distances_sum":2562.4217232338783}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":9,"bsize":12},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9808608058608062,"seconds":7.072463631629944e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.9453125,"distances_sum":2562.4217232338783}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.396484375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.396484375,"f1":null,"seconds":4.075467586517334e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":5.84375,"distances_sum":845.2169928806384}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2177734375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2177734375,"f1":null,"seconds":3.8780272006988525e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":5.96875,"distances_sum":495.62970315049483}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5498046875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5498046875,"f1":0.6891630938505945,"seconds":4.9173831939697266e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":6.9453125,"distances_sum":1208.1358741762895}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5498046875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5498046875,"f1":0.6891630938505945,"seconds":4.9173831939697266e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":6.9453125,"distances_sum":1208.1358741762895}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8644725066600075,"seconds":5.986541509628296e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.109375,"distances_sum":1925.8142777715964}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7899943806193813,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":7.4609375,"distances_sum":1523.4281628919991}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8978422619047627,"seconds":6.547197699546814e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.7109375,"distances_sum":2088.4743828412193}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7900235181485189,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":7.2421875,"distances_sum":1498.6338783098956}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":7,"bsize":3}, perf: {"precision":1.0,"recall":0.556640625,"f1":0.6973274988899996,"seconds":4.803761839866638e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":6.859375,"distances_sum":1169.8484106386227}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.822265625,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.822265625,"f1":0.8978422619047627,"seconds":6.547197699546814e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.7109375,"distances_sum":2088.4743828412193}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9650125915750919,"seconds":6.932765245437622e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.859375,"distances_sum":2611.496648078278}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9590086996337002,"seconds":7.098540663719177e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.828125,"distances_sum":2523.7903870947152}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9236013986013991,"seconds":6.327405571937561e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.5625,"distances_sum":2357.3345828692713}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9376602564102569,"seconds":6.7390501499176025e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.7265625,"distances_sum":2389.4283793789973}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9650125915750919,"seconds":6.932765245437622e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.859375,"distances_sum":2611.496648078278}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9650125915750919,"seconds":6.932765245437622e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.859375,"distances_sum":2611.496648078278}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8524163336663344,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.671875,"distances_sum":1935.1904449190167}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.21875,"f1":null,"seconds":3.25031578540802e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":5.09375,"distances_sum":481.21272906781303}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7578125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7578125,"f1":0.8524163336663344,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.671875,"distances_sum":1935.1904449190167}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8046875, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8046875,"f1":0.881602772227773,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.296875,"distances_sum":2112.7748113353664}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8046875,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.8046875,"f1":0.881602772227773,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.296875,"distances_sum":2112.7748113353664}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8909345862470869,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.3125,"distances_sum":2196.6099444960423}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8965492840492849,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.3359375,"distances_sum":2215.391969733341}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.82421875,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.82421875,"f1":0.8965492840492849,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.3359375,"distances_sum":2215.391969733341}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.82421875,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.82421875,"f1":0.8965492840492849,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.3359375,"distances_sum":2215.391969733341}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5546875,"f1":null,"seconds":4.7292560338974e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.2890625,"distances_sum":1216.6140128678612}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.685546875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.685546875,"f1":0.8007383241758248,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.71875,"distances_sum":1632.542164281465}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.236328125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.236328125,"f1":null,"seconds":4.015862941741943e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":6.1640625,"distances_sum":526.5684496752548}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.240234375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.240234375,"f1":null,"seconds":4.580244421958923e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":6.1484375,"distances_sum":521.234179591877}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.685546875,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.685546875,"f1":0.8007383241758248,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":7.71875,"distances_sum":1632.542164281465}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8611185689310697,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.3359375,"distances_sum":1893.2361951823696}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9345898892773897,"seconds":6.895512342453003e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.65625,"distances_sum":2397.0108597389954}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9072552447552453,"seconds":6.644055247306824e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.6953125,"distances_sum":2183.949654824752}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8857421875,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8857421875,"f1":0.9345898892773897,"seconds":6.895512342453003e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.65625,"distances_sum":2397.0108597389954}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9595638736263739,"seconds":6.923452019691467e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.8828125,"distances_sum":2523.672781630222}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9392227564102571,"seconds":6.647780537605286e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.671875,"distances_sum":2428.627705593831}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9595638736263739,"seconds":6.923452019691467e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.8828125,"distances_sum":2523.672781630222}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.927734375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9595638736263739,"seconds":6.923452019691467e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.8828125,"distances_sum":2523.672781630222}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.59375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.59375,"f1":0.7322025197025203,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":6.75,"distances_sum":1535.5659071709772}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2763671875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.2763671875,"f1":null,"seconds":3.926455974578857e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":4.53125,"distances_sum":729.084911433838}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.59375,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.59375,"f1":0.7322025197025203,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":6.75,"distances_sum":1535.5659071709772}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9212797619047624,"seconds":6.6515058279037476e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.4609375,"distances_sum":2437.4537595442434}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8642578125,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.8642578125,"f1":0.9212797619047624,"seconds":6.6515058279037476e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.4609375,"distances_sum":2437.4537595442434}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9387992216117222,"seconds":6.541609764099121e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.640625,"distances_sum":2507.2298629958073}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9387992216117222,"seconds":6.541609764099121e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.640625,"distances_sum":2507.2298629958073}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.892578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9387992216117222,"seconds":6.541609764099121e-6,"exhaustive_search_seconds":1.687556505203247e-6,"evaluations":8.640625,"distances_sum":2507.2298629958073}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.416015625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.416015625,"f1":null,"seconds":4.386529326438904e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":6.6015625,"distances_sum":957.1871481557511}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5576171875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5576171875,"f1":0.7003564144189149,"seconds":5.155801773071289e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":7.578125,"distances_sum":1383.4322773237125}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5576171875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5576171875,"f1":0.7003564144189149,"seconds":5.155801773071289e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":7.578125,"distances_sum":1383.4322773237125}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9031968031968041,"seconds":6.528571248054504e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.921875,"distances_sum":2321.9959334417777}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9414179570429575,"seconds":6.774440407752991e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.9609375,"distances_sum":2633.470880984315}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7177734375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7177734375,"f1":0.8250905344655354,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.390625,"distances_sum":1900.6453120320082}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8703988719613729,"seconds":6.085261702537537e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.7734375,"distances_sum":2095.7054174603795}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.866509532134533,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.6875,"distances_sum":2059.3403636763232}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9062931859806869,"seconds":6.549060344696045e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.9609375,"distances_sum":2316.766682406653}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.697265625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.697265625,"f1":0.8116399225774235,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.3984375,"distances_sum":1773.7920925435592}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.9414179570429575,"seconds":6.774440407752991e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.9609375,"distances_sum":2633.470880984315}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9757841117216122,"seconds":7.29784369468689e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.96875,"distances_sum":2925.5130139490057}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9569081959706962,"seconds":6.996095180511475e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.9609375,"distances_sum":2798.343571783063}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9638965201465205,"seconds":6.504356861114502e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.984375,"distances_sum":2846.734760315202}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9640109890109892,"seconds":6.763264536857605e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.96875,"distances_sum":2821.422423436952}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9757841117216122,"seconds":7.29784369468689e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.96875,"distances_sum":2925.5130139490057}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9757841117216122,"seconds":7.29784369468689e-6,"exhaustive_search_seconds":1.734122633934021e-6,"evaluations":8.96875,"distances_sum":2925.5130139490057}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6201171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6201171875,"f1":0.7551301129426138,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":7.296875,"distances_sum":1782.028899243602}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.30078125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.30078125,"f1":null,"seconds":3.904104232788086e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":4.8203125,"distances_sum":870.1937672803367}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6201171875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6201171875,"f1":0.7551301129426138,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":7.296875,"distances_sum":1782.028899243602}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.868518981018982,"seconds":6.100162863731384e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.2421875,"distances_sum":2271.352700625321}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9307406135531141,"seconds":6.44288957118988e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.546875,"distances_sum":2702.2807718013305}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.72265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.72265625,"f1":0.8286728896103903,"seconds":5.373731255531311e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":7.890625,"distances_sum":2096.3864898902116}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.880859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.880859375,"f1":0.9307406135531141,"seconds":6.44288957118988e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.546875,"distances_sum":2702.2807718013305}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9662202380952384,"seconds":6.897374987602234e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.8046875,"distances_sum":2906.24554198902}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9661858974358981,"seconds":6.513670086860657e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.828125,"distances_sum":2894.7050318224597}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9478651556776562,"seconds":6.420537829399109e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.6796875,"distances_sum":2796.0201990646688}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9605883699633708,"seconds":6.44288957118988e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.796875,"distances_sum":2826.485421628309}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9605857683982688,"seconds":6.1802566051483154e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.7578125,"distances_sum":2870.193784150004}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9448546245421252,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.640625,"distances_sum":2778.823989314503}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9662202380952384,"seconds":6.897374987602234e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.8046875,"distances_sum":2906.24554198902}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9662202380952384,"seconds":6.897374987602234e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.8046875,"distances_sum":2906.24554198902}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.40625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.40625,"f1":null,"seconds":3.9208680391311646e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":5.8984375,"distances_sum":993.5723137024179}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8725274725274734,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.3671875,"distances_sum":2095.4677696080566}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.783203125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.783203125,"f1":0.8725274725274734,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.3671875,"distances_sum":2095.4677696080566}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9594322344322347,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8671875,"distances_sum":2832.7108469145737}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9627060439560442,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8984375,"distances_sum":2849.669420539005}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9627060439560442,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8984375,"distances_sum":2849.669420539005}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.974609375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.974609375,"f1":0.9863095238095239,"seconds":6.5583735704422e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9765625,"distances_sum":3013.75769966785}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9725274725274726,"seconds":6.4801424741744995e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9375,"distances_sum":2914.6955508275605}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9716796875, conf: {"ssize":6,"bsize":13}, perf: {"precision":1.0,"recall":0.9716796875,"f1":0.9845982142857145,"seconds":6.269663572311401e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9765625,"distances_sum":3003.77307238918}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":10,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9786286630036634,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9609375,"distances_sum":2948.9851145484763}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.974609375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.974609375,"f1":0.9863095238095239,"seconds":6.5583735704422e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9765625,"distances_sum":3013.75769966785}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.974609375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.974609375,"f1":0.9863095238095239,"seconds":6.5583735704422e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9765625,"distances_sum":3013.75769966785}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1455078125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1455078125,"f1":null,"seconds":2.8479844331741333e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":4.75,"distances_sum":383.3812094342006}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1474609375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1474609375,"f1":null,"seconds":3.4514814615249634e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":4.8203125,"distances_sum":385.87157703476595}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6376953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6376953125,"f1":0.7641108891108898,"seconds":5.580484867095947e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.71875,"distances_sum":1665.7556518545312}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6376953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6376953125,"f1":0.7641108891108898,"seconds":5.580484867095947e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.71875,"distances_sum":1665.7556518545312}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9459909881784887,"seconds":6.662681698799133e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7578125,"distances_sum":2719.3031856272123}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8486986971361979,"seconds":5.9138983488082886e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.1796875,"distances_sum":2132.5945204781087}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8737330377955387,"seconds":6.251037120819092e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.4375,"distances_sum":2168.1750193145213}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9459909881784887,"seconds":6.662681698799133e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7578125,"distances_sum":2719.3031856272123}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9618360805860808,"seconds":6.301328539848328e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8515625,"distances_sum":2804.6177347982366}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9747023809523812,"seconds":6.6533684730529785e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9609375,"distances_sum":2876.4945761362137}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9675251831501838,"seconds":6.821006536483765e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9765625,"distances_sum":2830.9313225736737}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.94883553946054,"seconds":6.444752216339111e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8203125,"distances_sum":2717.87141004133}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9747023809523812,"seconds":6.6533684730529785e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9609375,"distances_sum":2876.4945761362137}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9747023809523812,"seconds":6.6533684730529785e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9609375,"distances_sum":2876.4945761362137}}, n: 9
mean(cfft.distances) = 0.32294875829231867
mean(cdnet.distances) = 0.41188970666052044
mean(crand.distances) = 0.3509580696084793
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8844444444444445
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8555555555555556
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8866666666666667
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.888888888888889
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9333333333333332
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.831111111111111
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9177777777777778
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8822222222222221
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9177777777777778
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9400000000000001
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8888888888888888
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8822222222222221
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8777777777777778
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9355555555555556
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8999999999999999
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8111111111111112
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8933333333333332
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8888888888888888
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8488888888888889
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 7]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(2, 1), (3, 7)]
*** center 5: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 7, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 8: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 3, 1, 2, 3, 1, 3, 2, 2, 3, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 7]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(2, 1), (3, 7)]
*** center 5: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 7, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 8: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 3, 1, 2, 3, 1, 3, 2, 2, 3, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 7]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(2, 1), (3, 7)]
*** center 5: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 7, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 8: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 3, 1, 2, 3, 1, 3, 2, 2, 3, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 7]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(2, 1), (3, 7)]
*** center 5: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 7, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 8: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 3, 1, 2, 3, 1, 3, 2, 2, 3, 3]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 7]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(2, 1), (3, 7)]
*** center 5: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 7, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 8: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 3, 1, 2, 3, 1, 3, 2, 2, 3, 3]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 7]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(2, 1), (3, 7)]
*** center 5: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 7, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 8: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 3, 1, 2, 3, 1, 3, 2, 2, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 7]]
** centroid: 4, normalized-entropy: 0.5435644431995963, [(2, 1), (3, 7)]
*** center 5: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 7, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 8: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 3, 1, 2, 3, 1, 3, 2, 2, 3, 3]
acc = 0.96
*** finished computation of 12 references, err: [Inf, 0.5988057625293731] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 30, 3]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(2, 30), (3, 3)]
*** center 2: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 11, 2]]
** centroid: 7, normalized-entropy: 0.6193821946787638, [(2, 11), (3, 2)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 10, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
finished with 14 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.2143678340526695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2143678340526695, 0.16728077297219196] ***
*** starting iteration: 2; err: [Inf, 0.2143678340526695, 0.16728077297219196] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2143678340526695, 0.16728077297219196, 0.16066363295148667] ***
*** starting iteration: 3; err: [Inf, 0.2143678340526695, 0.16728077297219196, 0.16066363295148667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2143678340526695, 0.16728077297219196, 0.16066363295148667, 0.15732222722630734] ***
*** finished computation of 7 references, err: [Inf, 0.2143678340526695, 0.16728077297219196, 0.16066363295148667, 0.15732222722630734] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [109, 51, 0]]
** centroid: 1, normalized-entropy: 0.9030169458796671, [(1, 109), (2, 51)]
*** center 2: selecting labels [1] (freq >= 2) [from [138, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 28, 0]]
** centroid: 3, normalized-entropy: 0.9675594819018211, [(1, 43), (2, 28)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [5, 74, 0]]
** centroid: 4, normalized-entropy: 0.340373285759646, [(1, 5), (2, 74)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 69, 24]]
** centroid: 5, normalized-entropy: 0.8238116333123173, [(2, 69), (3, 24)]
*** center 6: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39559008392600437] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39559008392600437, 0.30005381665928094] ***
*** starting iteration: 2; err: [Inf, 0.39559008392600437, 0.30005381665928094] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39559008392600437, 0.30005381665928094, 0.29540999781329175] ***
*** starting iteration: 3; err: [Inf, 0.39559008392600437, 0.30005381665928094, 0.29540999781329175] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39559008392600437, 0.30005381665928094, 0.29540999781329175, 0.29433411860128156] ***
*** starting iteration: 4; err: [Inf, 0.39559008392600437, 0.30005381665928094, 0.29540999781329175, 0.29433411860128156] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39559008392600437, 0.30005381665928094, 0.29540999781329175, 0.29433411860128156, 0.2942436069009585] ***
*** finished computation of 3 references, err: [Inf, 0.39559008392600437, 0.30005381665928094, 0.29540999781329175, 0.29433411860128156, 0.2942436069009585] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [250, 24, 0]]
** centroid: 1, normalized-entropy: 0.4283781735341417, [(1, 250), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [170, 42, 0]]
** centroid: 2, normalized-entropy: 0.7181384220154764, [(1, 170), (2, 42)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 156, 24]]
** centroid: 3, normalized-entropy: 0.5665095065529052, [(2, 156), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3835064004101362] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3835064004101362, 0.3021911398592828] ***
*** starting iteration: 2; err: [Inf, 0.3835064004101362, 0.3021911398592828] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3835064004101362, 0.3021911398592828, 0.30078281786689337] ***
*** starting iteration: 3; err: [Inf, 0.3835064004101362, 0.3021911398592828, 0.30078281786689337] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3835064004101362, 0.3021911398592828, 0.30078281786689337, 0.30061037342079444] ***
*** finished computation of 3 references, err: [Inf, 0.3835064004101362, 0.3021911398592828, 0.30078281786689337, 0.30061037342079444] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [108, 153, 23]]
** centroid: 1, normalized-entropy: 0.8232701702650037, [(1, 108), (2, 153), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [192, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [115, 76, 0]]
** centroid: 3, normalized-entropy: 0.9697123522225778, [(1, 115), (2, 76)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5089386021529885] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5089386021529885, 0.29349517060382324] ***
*** starting iteration: 2; err: [Inf, 0.5089386021529885, 0.29349517060382324] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5089386021529885, 0.29349517060382324, 0.2901196983046662] ***
*** starting iteration: 3; err: [Inf, 0.5089386021529885, 0.29349517060382324, 0.2901196983046662] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5089386021529885, 0.29349517060382324, 0.2901196983046662, 0.28866934893454527] ***
*** starting iteration: 4; err: [Inf, 0.5089386021529885, 0.29349517060382324, 0.2901196983046662, 0.28866934893454527] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5089386021529885, 0.29349517060382324, 0.2901196983046662, 0.28866934893454527, 0.28819557598818546] ***
*** finished computation of 3 references, err: [Inf, 0.5089386021529885, 0.29349517060382324, 0.2901196983046662, 0.28866934893454527, 0.28819557598818546] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [82, 139, 19]]
** centroid: 1, normalized-entropy: 0.8046747861124338, [(1, 82), (2, 139), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [112, 88, 0]]
** centroid: 2, normalized-entropy: 0.9895875212220558, [(1, 112), (2, 88)]
*** center 3: selecting labels [1] (freq >= 1) [from [227, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2881408047232626] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2881408047232626, 0.17701535709649102] ***
*** starting iteration: 2; err: [Inf, 0.2881408047232626, 0.17701535709649102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2881408047232626, 0.17701535709649102, 0.15511490605810638] ***
*** starting iteration: 3; err: [Inf, 0.2881408047232626, 0.17701535709649102, 0.15511490605810638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2881408047232626, 0.17701535709649102, 0.15511490605810638, 0.15202228320871425] ***
*** finished computation of 7 references, err: [Inf, 0.2881408047232626, 0.17701535709649102, 0.15511490605810638, 0.15202228320871425] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [121, 22, 0]]
** centroid: 1, normalized-entropy: 0.6193821946787638, [(1, 121), (2, 22)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 83, 23]]
** centroid: 2, normalized-entropy: 0.7546167018169155, [(2, 83), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [73, 2, 0]]
** centroid: 3, normalized-entropy: 0.1773894531859976, [(1, 73), (2, 2)]
*** center 4: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 53, 0]]
** centroid: 5, normalized-entropy: 0.8325582396745668, [(1, 19), (2, 53)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 69, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23456707333299753] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23456707333299753, 0.16637417343843064] ***
*** starting iteration: 2; err: [Inf, 0.23456707333299753, 0.16637417343843064] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23456707333299753, 0.16637417343843064, 0.15740742599954646] ***
*** starting iteration: 3; err: [Inf, 0.23456707333299753, 0.16637417343843064, 0.15740742599954646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23456707333299753, 0.16637417343843064, 0.15740742599954646, 0.15372863777520798] ***
*** finished computation of 7 references, err: [Inf, 0.23456707333299753, 0.16637417343843064, 0.15740742599954646, 0.15372863777520798] ***
*** center 1: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [90, 16, 0]]
** centroid: 2, normalized-entropy: 0.612196127490834, [(1, 90), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 111, 19]]
** centroid: 3, normalized-entropy: 0.6001310136416094, [(2, 111), (3, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [84, 38, 0]]
** centroid: 4, normalized-entropy: 0.8948692308065576, [(1, 84), (2, 38)]
*** center 5: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 62, 0]]
** centroid: 6, normalized-entropy: 0.43055186701043935, [(1, 6), (2, 62)]
*** center 7: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2462645164962198] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2462645164962198, 0.206437789945508] ***
*** finished computation of 7 references, err: [Inf, 0.2462645164962198, 0.206437789945508] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [25, 50, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 25), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [15, 100, 0]]
** centroid: 2, normalized-entropy: 0.5586293734521991, [(1, 15), (2, 100)]
*** center 3: selecting labels [1] (freq >= 1) [from [162, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 41, 24]]
** centroid: 4, normalized-entropy: 0.9500796252338518, [(2, 41), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 31, 0]]
** centroid: 5, normalized-entropy: 0.9395876193289702, [(1, 56), (2, 31)]
*** center 6: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2851670260779906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2851670260779906, 0.19691404213883107] ***
*** finished computation of 7 references, err: [Inf, 0.2851670260779906, 0.19691404213883107] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 92, 23]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 92), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [38, 79, 0]]
** centroid: 3, normalized-entropy: 0.9095106630291536, [(1, 38), (2, 79)]
*** center 4: selecting labels [1] (freq >= 1) [from [124, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [21, 38, 0]]
** centroid: 5, normalized-entropy: 0.9392547207311595, [(1, 21), (2, 38)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [72, 20, 0]]
** centroid: 6, normalized-entropy: 0.7553754125614286, [(1, 72), (2, 20)]
*** center 7: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24974990495783592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24974990495783592, 0.20168340149247596] ***
*** finished computation of 7 references, err: [Inf, 0.24974990495783592, 0.20168340149247596] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [67, 28, 0]]
** centroid: 1, normalized-entropy: 0.8747617811911199, [(1, 67), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [3, 57, 0]]
** centroid: 2, normalized-entropy: 0.2863969571159561, [(1, 3), (2, 57)]
*** center 3: selecting labels [1] (freq >= 1) [from [173, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [117, 5, 0]]
** centroid: 4, normalized-entropy: 0.2467839550571885, [(1, 117), (2, 5)]
*** center 5: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 41, 19]]
** centroid: 6, normalized-entropy: 0.9007196798623592, [(2, 41), (3, 19)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [12, 96, 0]]
** centroid: 7, normalized-entropy: 0.5032583347756457, [(1, 12), (2, 96)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4815352034549489] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4815352034549489, 0.27600340125802625] ***
*** starting iteration: 2; err: [Inf, 0.4815352034549489, 0.27600340125802625] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4815352034549489, 0.27600340125802625, 0.2620474475970095] ***
*** starting iteration: 3; err: [Inf, 0.4815352034549489, 0.27600340125802625, 0.2620474475970095] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4815352034549489, 0.27600340125802625, 0.2620474475970095, 0.23952378179561962] ***
*** finished computation of 3 references, err: [Inf, 0.4815352034549489, 0.27600340125802625, 0.2620474475970095, 0.23952378179561962] ***
*** center 1: selecting labels [1] (freq >= 2) [from [204, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [119, 111, 3]]
** centroid: 2, normalized-entropy: 0.6849162441460958, [(1, 119), (2, 111), (3, 3)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [97, 111, 21]]
** centroid: 3, normalized-entropy: 0.8501497258942498, [(1, 97), (2, 111), (3, 21)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3003489760796482] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3003489760796482, 0.2532017950675097] ***
*** starting iteration: 2; err: [Inf, 0.3003489760796482, 0.2532017950675097] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3003489760796482, 0.2532017950675097, 0.24269046423736138] ***
*** starting iteration: 3; err: [Inf, 0.3003489760796482, 0.2532017950675097, 0.24269046423736138] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3003489760796482, 0.2532017950675097, 0.24269046423736138, 0.24037807323652943] ***
*** finished computation of 3 references, err: [Inf, 0.3003489760796482, 0.2532017950675097, 0.24269046423736138, 0.24037807323652943] ***
*** center 1: selecting labels [1] (freq >= 2) [from [210, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [129, 75, 0]]
** centroid: 2, normalized-entropy: 0.9488482942421287, [(1, 129), (2, 75)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [76, 154, 23]]
** centroid: 3, normalized-entropy: 0.8023227715627765, [(1, 76), (2, 154), (3, 23)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.404443040004243] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.404443040004243, 0.25960228415946107] ***
*** starting iteration: 2; err: [Inf, 0.404443040004243, 0.25960228415946107] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.404443040004243, 0.25960228415946107, 0.2443275586206248] ***
*** starting iteration: 3; err: [Inf, 0.404443040004243, 0.25960228415946107, 0.2443275586206248] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.404443040004243, 0.25960228415946107, 0.2443275586206248, 0.24147647801183467] ***
*** finished computation of 3 references, err: [Inf, 0.404443040004243, 0.25960228415946107, 0.2443275586206248, 0.24147647801183467] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [280, 20, 0]]
** centroid: 1, normalized-entropy: 0.3533593350214213, [(1, 280), (2, 20)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 176, 19]]
** centroid: 2, normalized-entropy: 0.4608144797209315, [(2, 176), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [141, 31, 0]]
** centroid: 3, normalized-entropy: 0.6805855319682431, [(1, 141), (2, 31)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18028012135096858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18028012135096858, 0.1574998408005022] ***
*** starting iteration: 2; err: [Inf, 0.18028012135096858, 0.1574998408005022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18028012135096858, 0.1574998408005022, 0.15371781113217012] ***
*** starting iteration: 3; err: [Inf, 0.18028012135096858, 0.1574998408005022, 0.15371781113217012] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18028012135096858, 0.1574998408005022, 0.15371781113217012, 0.15189031594049734] ***
*** starting iteration: 4; err: [Inf, 0.18028012135096858, 0.1574998408005022, 0.15371781113217012, 0.15189031594049734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18028012135096858, 0.1574998408005022, 0.15371781113217012, 0.15189031594049734, 0.1511546637549683] ***
*** finished computation of 7 references, err: [Inf, 0.18028012135096858, 0.1574998408005022, 0.15371781113217012, 0.15189031594049734, 0.1511546637549683] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [55, 21, 0]]
** centroid: 1, normalized-entropy: 0.8503821170987139, [(1, 55), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [82, 2, 0]]
** centroid: 2, normalized-entropy: 0.1623261801753929, [(1, 82), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [102, 50, 0]]
** centroid: 3, normalized-entropy: 0.9138472873262908, [(1, 102), (2, 50)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [1, 73, 0]]
** centroid: 4, normalized-entropy: 0.10327508457163559, [(1, 1), (2, 73)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 76, 24]]
** centroid: 5, normalized-entropy: 0.7950402793845225, [(2, 76), (3, 24)]
*** center 6: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2363222670007282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2363222670007282, 0.16131423915020082] ***
*** starting iteration: 2; err: [Inf, 0.2363222670007282, 0.16131423915020082] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2363222670007282, 0.16131423915020082, 0.15334988676564493] ***
*** starting iteration: 3; err: [Inf, 0.2363222670007282, 0.16131423915020082, 0.15334988676564493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2363222670007282, 0.16131423915020082, 0.15334988676564493, 0.15158919091203782] ***
*** starting iteration: 4; err: [Inf, 0.2363222670007282, 0.16131423915020082, 0.15334988676564493, 0.15158919091203782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2363222670007282, 0.16131423915020082, 0.15334988676564493, 0.15158919091203782, 0.15109795543387522] ***
*** finished computation of 7 references, err: [Inf, 0.2363222670007282, 0.16131423915020082, 0.15334988676564493, 0.15158919091203782, 0.15109795543387522] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 49, 20]]
** centroid: 1, normalized-entropy: 0.868533960265235, [(2, 49), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [144, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [50, 47, 0]]
** centroid: 4, normalized-entropy: 0.999309898706868, [(1, 50), (2, 47)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [25, 66, 0]]
** centroid: 5, normalized-entropy: 0.8481636883083004, [(1, 25), (2, 66)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 64, 3]]
** centroid: 6, normalized-entropy: 0.26377743669413856, [(2, 64), (3, 3)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [93, 3, 0]]
** centroid: 7, normalized-entropy: 0.2006223243127146, [(1, 93), (2, 3)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18498062376771401] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18498062376771401, 0.1558604282124535] ***
*** starting iteration: 2; err: [Inf, 0.18498062376771401, 0.1558604282124535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18498062376771401, 0.1558604282124535, 0.15266818665470677] ***
*** starting iteration: 3; err: [Inf, 0.18498062376771401, 0.1558604282124535, 0.15266818665470677] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18498062376771401, 0.1558604282124535, 0.15266818665470677, 0.15185419408879572] ***
*** finished computation of 7 references, err: [Inf, 0.18498062376771401, 0.1558604282124535, 0.15266818665470677, 0.15185419408879572] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 84, 19]]
** centroid: 1, normalized-entropy: 0.6897501750585195, [(2, 84), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [115, 8, 0]]
** centroid: 4, normalized-entropy: 0.3471376284400274, [(1, 115), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 55, 0]]
** centroid: 5, normalized-entropy: 0.8749315876677922, [(1, 23), (2, 55)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 80, 0]]
** centroid: 6, normalized-entropy: 0.09597040299587173, [(1, 1), (2, 80)]
*** center 7: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32154848490906013] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32154848490906013, 0.2442365604712888] ***
*** starting iteration: 2; err: [Inf, 0.32154848490906013, 0.2442365604712888] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32154848490906013, 0.2442365604712888, 0.2364851576863444] ***
*** starting iteration: 3; err: [Inf, 0.32154848490906013, 0.2442365604712888, 0.2364851576863444] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32154848490906013, 0.2442365604712888, 0.2364851576863444, 0.2344457649670586] ***
*** starting iteration: 4; err: [Inf, 0.32154848490906013, 0.2442365604712888, 0.2364851576863444, 0.2344457649670586] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32154848490906013, 0.2442365604712888, 0.2364851576863444, 0.2344457649670586, 0.23366841964155166] ***
*** finished computation of 3 references, err: [Inf, 0.32154848490906013, 0.2442365604712888, 0.2364851576863444, 0.2344457649670586, 0.23366841964155166] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [142, 60, 0]]
** centroid: 1, normalized-entropy: 0.8776296673746861, [(1, 142), (2, 60)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [4, 160, 24]]
** centroid: 2, normalized-entropy: 0.4386811247686572, [(1, 4), (2, 160), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [274, 2, 0]]
** centroid: 3, normalized-entropy: 0.06192738891155935, [(1, 274), (2, 2)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.287540792537828] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.287540792537828, 0.2405257730900465] ***
*** starting iteration: 2; err: [Inf, 0.287540792537828, 0.2405257730900465] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.287540792537828, 0.2405257730900465, 0.23785655778543702] ***
*** starting iteration: 3; err: [Inf, 0.287540792537828, 0.2405257730900465, 0.23785655778543702] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.287540792537828, 0.2405257730900465, 0.23785655778543702, 0.23719545222003421] ***
*** finished computation of 3 references, err: [Inf, 0.287540792537828, 0.2405257730900465, 0.23785655778543702, 0.23719545222003421] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [174, 31, 0]]
** centroid: 1, normalized-entropy: 0.6128837390192418, [(1, 174), (2, 31)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 175, 23]]
** centroid: 2, normalized-entropy: 0.5182259657363326, [(2, 175), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [241, 23, 0]]
** centroid: 3, normalized-entropy: 0.4267870927647716, [(1, 241), (2, 23)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26364907430487683] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26364907430487683, 0.24147365524292527] ***
*** starting iteration: 2; err: [Inf, 0.26364907430487683, 0.24147365524292527] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26364907430487683, 0.24147365524292527, 0.23895106059422289] ***
*** starting iteration: 3; err: [Inf, 0.26364907430487683, 0.24147365524292527, 0.23895106059422289] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26364907430487683, 0.24147365524292527, 0.23895106059422289, 0.23870313222306422] ***
*** finished computation of 3 references, err: [Inf, 0.26364907430487683, 0.24147365524292527, 0.23895106059422289, 0.23870313222306422] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 184, 19]]
** centroid: 1, normalized-entropy: 0.44836043605257264, [(2, 184), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [226, 16, 0]]
** centroid: 2, normalized-entropy: 0.3512580905562789, [(1, 226), (2, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [195, 27, 0]]
** centroid: 3, normalized-entropy: 0.5340042729285396, [(1, 195), (2, 27)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22188961355144288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22188961355144288, 0.1736099254367901] ***
*** starting iteration: 2; err: [Inf, 0.22188961355144288, 0.1736099254367901] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22188961355144288, 0.1736099254367901, 0.16320422361395112] ***
*** starting iteration: 3; err: [Inf, 0.22188961355144288, 0.1736099254367901, 0.16320422361395112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22188961355144288, 0.1736099254367901, 0.16320422361395112, 0.15884399222274376] ***
*** finished computation of 7 references, err: [Inf, 0.22188961355144288, 0.1736099254367901, 0.16320422361395112, 0.15884399222274376] ***
*** center 1: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 117, 24]]
** centroid: 2, normalized-entropy: 0.6581912658132184, [(2, 117), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [113, 48, 0]]
** centroid: 3, normalized-entropy: 0.8790012086268424, [(1, 113), (2, 48)]
*** center 4: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [78, 21, 0]]
** centroid: 5, normalized-entropy: 0.7455178428108284, [(1, 78), (2, 21)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [45, 36, 0]]
** centroid: 6, normalized-entropy: 0.9910760598382222, [(1, 45), (2, 36)]
*** center 7: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22263020481090473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22263020481090473, 0.16449326359648733] ***
*** starting iteration: 2; err: [Inf, 0.22263020481090473, 0.16449326359648733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22263020481090473, 0.16449326359648733, 0.1556525761059121] ***
*** starting iteration: 3; err: [Inf, 0.22263020481090473, 0.16449326359648733, 0.1556525761059121] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22263020481090473, 0.16449326359648733, 0.1556525761059121, 0.15288302388127384] ***
*** finished computation of 7 references, err: [Inf, 0.22263020481090473, 0.16449326359648733, 0.1556525761059121, 0.15288302388127384] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 69, 23]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 69), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [122, 19, 0]]
** centroid: 2, normalized-entropy: 0.5703273953909904, [(1, 122), (2, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [45, 9, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 45), (2, 9)]
*** center 4: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [25, 33, 0]]
** centroid: 5, normalized-entropy: 0.9862325350724501, [(1, 25), (2, 33)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 99, 0]]
** centroid: 6, normalized-entropy: 0.4138168503036336, [(1, 9), (2, 99)]
*** center 7: selecting labels [1] (freq >= 1) [from [142, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18898953832658022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18898953832658022, 0.15126420316988717] ***
*** starting iteration: 2; err: [Inf, 0.18898953832658022, 0.15126420316988717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18898953832658022, 0.15126420316988717, 0.14757032320653876] ***
*** starting iteration: 3; err: [Inf, 0.18898953832658022, 0.15126420316988717, 0.14757032320653876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18898953832658022, 0.15126420316988717, 0.14757032320653876, 0.14718239294013186] ***
*** finished computation of 7 references, err: [Inf, 0.18898953832658022, 0.15126420316988717, 0.14757032320653876, 0.14718239294013186] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [8, 90, 0]]
** centroid: 1, normalized-entropy: 0.4079059801389762, [(1, 8), (2, 90)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [78, 14, 0]]
** centroid: 2, normalized-entropy: 0.6152538910563409, [(1, 78), (2, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [3, 86, 0]]
** centroid: 4, normalized-entropy: 0.21265863988163503, [(1, 3), (2, 86)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [94, 4, 0]]
** centroid: 5, normalized-entropy: 0.2460225782203316, [(1, 94), (2, 4)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 33, 19]]
** centroid: 6, normalized-entropy: 0.9470622432515328, [(2, 33), (3, 19)]
*** center 7: selecting labels [1] (freq >= 1) [from [128, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26234772811187906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26234772811187906, 0.20933837044352033] ***
*** starting iteration: 2; err: [Inf, 0.26234772811187906, 0.20933837044352033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26234772811187906, 0.20933837044352033, 0.19143027558995485] ***
*** starting iteration: 3; err: [Inf, 0.26234772811187906, 0.20933837044352033, 0.19143027558995485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26234772811187906, 0.20933837044352033, 0.19143027558995485, 0.1664316319908063] ***
*** finished computation of 7 references, err: [Inf, 0.26234772811187906, 0.20933837044352033, 0.19143027558995485, 0.1664316319908063] ***
*** center 1: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [127, 29, 0]]
** centroid: 2, normalized-entropy: 0.6928098850240134, [(1, 127), (2, 29)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 105, 24]]
** centroid: 3, normalized-entropy: 0.6931274153282881, [(2, 105), (3, 24)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [13, 80, 0]]
** centroid: 4, normalized-entropy: 0.5836753280239112, [(1, 13), (2, 80)]
*** center 5: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [43, 8, 0]]
** centroid: 7, normalized-entropy: 0.6267511370265896, [(1, 43), (2, 8)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22256231842830643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22256231842830643, 0.16341047524439653] ***
*** starting iteration: 2; err: [Inf, 0.22256231842830643, 0.16341047524439653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22256231842830643, 0.16341047524439653, 0.15724350514261798] ***
*** starting iteration: 3; err: [Inf, 0.22256231842830643, 0.16341047524439653, 0.15724350514261798] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22256231842830643, 0.16341047524439653, 0.15724350514261798, 0.15294740852554967] ***
*** finished computation of 7 references, err: [Inf, 0.22256231842830643, 0.16341047524439653, 0.15724350514261798, 0.15294740852554967] ***
*** center 1: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 118, 23]]
** centroid: 2, normalized-entropy: 0.6417229494625626, [(2, 118), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [41, 45, 0]]
** centroid: 3, normalized-entropy: 0.9984389230256238, [(1, 41), (2, 45)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [71, 12, 0]]
** centroid: 4, normalized-entropy: 0.5961045458832345, [(1, 71), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [96, 24, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 96), (2, 24)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [47, 30, 0]]
** centroid: 6, normalized-entropy: 0.9645476589143235, [(1, 47), (2, 30)]
*** center 7: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19176117822421768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19176117822421768, 0.1536904135998199] ***
*** starting iteration: 2; err: [Inf, 0.19176117822421768, 0.1536904135998199] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19176117822421768, 0.1536904135998199, 0.15005221003889926] ***
*** starting iteration: 3; err: [Inf, 0.19176117822421768, 0.1536904135998199, 0.15005221003889926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19176117822421768, 0.1536904135998199, 0.15005221003889926, 0.14767329422533623] ***
*** finished computation of 7 references, err: [Inf, 0.19176117822421768, 0.1536904135998199, 0.15005221003889926, 0.14767329422533623] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 69, 15]]
** centroid: 1, normalized-entropy: 0.6769418697808861, [(2, 69), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [44, 42, 0]]
** centroid: 2, normalized-entropy: 0.9996098363678071, [(1, 44), (2, 42)]
*** center 3: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [83, 18, 0]]
** centroid: 4, normalized-entropy: 0.6761627418829197, [(1, 83), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [97, 11, 0]]
** centroid: 5, normalized-entropy: 0.4748384883008607, [(1, 97), (2, 11)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 87, 4]]
** centroid: 6, normalized-entropy: 0.26014536394771426, [(2, 87), (3, 4)]
*** center 7: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.32464849662354534] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32464849662354534, 0.30080146363771354] ***
*** starting iteration: 2; err: [Inf, 0.32464849662354534, 0.30080146363771354] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32464849662354534, 0.30080146363771354, 0.29905737303868607] ***
*** starting iteration: 3; err: [Inf, 0.32464849662354534, 0.30080146363771354, 0.29905737303868607] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32464849662354534, 0.30080146363771354, 0.29905737303868607, 0.2986779647778619] ***
*** finished computation of 3 references, err: [Inf, 0.32464849662354534, 0.30080146363771354, 0.29905737303868607, 0.2986779647778619] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [133, 81, 0]]
** centroid: 1, normalized-entropy: 0.9569790697875358, [(1, 133), (2, 81)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [56, 141, 24]]
** centroid: 2, normalized-entropy: 0.7970805343153029, [(1, 56), (2, 141), (3, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [231, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37079611812149926] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37079611812149926, 0.296605693832643] ***
*** starting iteration: 2; err: [Inf, 0.37079611812149926, 0.296605693832643] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37079611812149926, 0.296605693832643, 0.2953949400532371] ***
*** starting iteration: 3; err: [Inf, 0.37079611812149926, 0.296605693832643, 0.2953949400532371] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37079611812149926, 0.296605693832643, 0.2953949400532371, 0.2952389194193049] ***
*** finished computation of 3 references, err: [Inf, 0.37079611812149926, 0.296605693832643, 0.2953949400532371, 0.2952389194193049] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [230, 7, 0]]
** centroid: 1, normalized-entropy: 0.19205887686615145, [(1, 230), (2, 7)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 171, 23]]
** centroid: 2, normalized-entropy: 0.3589333682638664, [(1, 1), (2, 171), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [184, 51, 0]]
** centroid: 3, normalized-entropy: 0.7546910216499503, [(1, 184), (2, 51)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35623531378358825] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35623531378358825, 0.2936975029220377] ***
*** starting iteration: 2; err: [Inf, 0.35623531378358825, 0.2936975029220377] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35623531378358825, 0.2936975029220377, 0.2891146610909863] ***
*** starting iteration: 3; err: [Inf, 0.35623531378358825, 0.2936975029220377, 0.2891146610909863] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35623531378358825, 0.2936975029220377, 0.2891146610909863, 0.28818440461612266] ***
*** finished computation of 3 references, err: [Inf, 0.35623531378358825, 0.2936975029220377, 0.2891146610909863, 0.28818440461612266] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [110, 88, 0]]
** centroid: 1, normalized-entropy: 0.9910760598382222, [(1, 110), (2, 88)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [80, 139, 19]]
** centroid: 2, normalized-entropy: 0.803160184182327, [(1, 80), (2, 139), (3, 19)]
*** center 3: selecting labels [1] (freq >= 1) [from [231, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.46586632671382827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46586632671382827, 0.23172194826627826] ***
*** starting iteration: 2; err: [Inf, 0.46586632671382827, 0.23172194826627826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46586632671382827, 0.23172194826627826, 0.2109012692032645] ***
*** starting iteration: 3; err: [Inf, 0.46586632671382827, 0.23172194826627826, 0.2109012692032645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46586632671382827, 0.23172194826627826, 0.2109012692032645, 0.19699492215041867] ***
*** finished computation of 7 references, err: [Inf, 0.46586632671382827, 0.23172194826627826, 0.2109012692032645, 0.19699492215041867] ***
*** center 1: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [136, 13, 0]]
** centroid: 2, normalized-entropy: 0.42721776377840087, [(1, 136), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [83, 2, 0]]
** centroid: 3, normalized-entropy: 0.16082302082246946, [(1, 83), (2, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 121, 24]]
** centroid: 4, normalized-entropy: 0.6473466643078056, [(2, 121), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 62, 0]]
** centroid: 5, normalized-entropy: 0.269828447703074, [(1, 3), (2, 62)]
*** center 6: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [46, 24, 0]]
** centroid: 7, normalized-entropy: 0.927526588431676, [(1, 46), (2, 24)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34320531971333756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34320531971333756, 0.23041983904816893] ***
*** starting iteration: 2; err: [Inf, 0.34320531971333756, 0.23041983904816893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34320531971333756, 0.23041983904816893, 0.20728059838814983] ***
*** starting iteration: 3; err: [Inf, 0.34320531971333756, 0.23041983904816893, 0.20728059838814983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34320531971333756, 0.23041983904816893, 0.20728059838814983, 0.20053195745741453] ***
*** finished computation of 7 references, err: [Inf, 0.34320531971333756, 0.23041983904816893, 0.20728059838814983, 0.20053195745741453] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [40, 26, 0]]
** centroid: 1, normalized-entropy: 0.9672947789468944, [(1, 40), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [114, 51, 0]]
** centroid: 2, normalized-entropy: 0.8921212805771683, [(1, 114), (2, 51)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 117, 23]]
** centroid: 3, normalized-entropy: 0.6444644656551834, [(2, 117), (3, 23)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [50, 18, 0]]
** centroid: 4, normalized-entropy: 0.8337649072106652, [(1, 50), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [59, 17, 0]]
** centroid: 5, normalized-entropy: 0.7668379316856329, [(1, 59), (2, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2725626761973396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2725626761973396, 0.2074499615688698] ***
*** starting iteration: 2; err: [Inf, 0.2725626761973396, 0.2074499615688698] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2725626761973396, 0.2074499615688698, 0.1890253933855909] ***
*** starting iteration: 3; err: [Inf, 0.2725626761973396, 0.2074499615688698, 0.1890253933855909] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2725626761973396, 0.2074499615688698, 0.1890253933855909, 0.18677854218633325] ***
*** finished computation of 7 references, err: [Inf, 0.2725626761973396, 0.2074499615688698, 0.1890253933855909, 0.18677854218633325] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [76, 24, 0]]
** centroid: 1, normalized-entropy: 0.7950402793845225, [(1, 76), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [6, 86, 0]]
** centroid: 2, normalized-entropy: 0.3478169135710632, [(1, 6), (2, 86)]
*** center 3: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [64, 43, 0]]
** centroid: 4, normalized-entropy: 0.9720334868479672, [(1, 64), (2, 43)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 70, 19]]
** centroid: 5, normalized-entropy: 0.748088105780153, [(2, 70), (3, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [93, 4, 0]]
** centroid: 7, normalized-entropy: 0.24793583772272637, [(1, 93), (2, 4)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35220596092604883] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35220596092604883, 0.23403035753963142] ***
*** starting iteration: 2; err: [Inf, 0.35220596092604883, 0.23403035753963142] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35220596092604883, 0.23403035753963142, 0.23287205769493058] ***
*** starting iteration: 3; err: [Inf, 0.35220596092604883, 0.23403035753963142, 0.23287205769493058] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35220596092604883, 0.23403035753963142, 0.23287205769493058, 0.232342265757128] ***
*** finished computation of 3 references, err: [Inf, 0.35220596092604883, 0.23403035753963142, 0.23287205769493058, 0.232342265757128] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [263, 19, 0]]
** centroid: 1, normalized-entropy: 0.35605377459984455, [(1, 263), (2, 19)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 153, 24]]
** centroid: 2, normalized-entropy: 0.572580465623769, [(2, 153), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [157, 50, 0]]
** centroid: 3, normalized-entropy: 0.7976016093605731, [(1, 157), (2, 50)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35312042198237453] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35312042198237453, 0.23595343482564726] ***
*** starting iteration: 2; err: [Inf, 0.35312042198237453, 0.23595343482564726] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35312042198237453, 0.23595343482564726, 0.23409937769370057] ***
*** starting iteration: 3; err: [Inf, 0.35312042198237453, 0.23595343482564726, 0.23409937769370057] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35312042198237453, 0.23595343482564726, 0.23409937769370057, 0.23408552285456943] ***
*** finished computation of 3 references, err: [Inf, 0.35312042198237453, 0.23595343482564726, 0.23409937769370057, 0.23408552285456943] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [66, 154, 23]]
** centroid: 1, normalized-entropy: 0.7884606429921963, [(1, 66), (2, 154), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [215, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [134, 75, 0]]
** centroid: 3, normalized-entropy: 0.9417258626620666, [(1, 134), (2, 75)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3806665354077404] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3806665354077404, 0.23143821418553456] ***
*** starting iteration: 2; err: [Inf, 0.3806665354077404, 0.23143821418553456] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3806665354077404, 0.23143821418553456, 0.2309169045117484] ***
*** finished computation of 3 references, err: [Inf, 0.3806665354077404, 0.23143821418553456, 0.2309169045117484] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [102, 116, 13]]
** centroid: 1, normalized-entropy: 0.7908066209075876, [(1, 102), (2, 116), (3, 13)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [98, 111, 6]]
** centroid: 2, normalized-entropy: 0.7275646031723573, [(1, 98), (2, 111), (3, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [221, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24373693725334722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24373693725334722, 0.1926359240729194] ***
*** finished computation of 7 references, err: [Inf, 0.24373693725334722, 0.1926359240729194] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [60, 51, 0]]
** centroid: 1, normalized-entropy: 0.9952525494396791, [(1, 60), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 1, 0]]
** centroid: 2, normalized-entropy: 0.14372616993938164, [(1, 48), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 59, 24]]
** centroid: 4, normalized-entropy: 0.8676293117125105, [(2, 59), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [80, 13, 0]]
** centroid: 5, normalized-entropy: 0.5836753280239112, [(1, 80), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [14, 98, 0]]
** centroid: 6, normalized-entropy: 0.5435644431995963, [(1, 14), (2, 98)]
*** center 7: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23743340786898331] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23743340786898331, 0.19654004847158915] ***
*** finished computation of 7 references, err: [Inf, 0.23743340786898331, 0.19654004847158915] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [38, 60, 0]]
** centroid: 1, normalized-entropy: 0.9633355456726842, [(1, 38), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [71, 7, 0]]
** centroid: 2, normalized-entropy: 0.4356133734874324, [(1, 71), (2, 7)]
*** center 3: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 51, 23]]
** centroid: 4, normalized-entropy: 0.8941071841443881, [(2, 51), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [112, 13, 0]]
** centroid: 5, normalized-entropy: 0.4815485438118002, [(1, 112), (2, 13)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 96, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [82, 2, 0]]
** centroid: 7, normalized-entropy: 0.1623261801753929, [(1, 82), (2, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24754902677306126] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24754902677306126, 0.19454151955314505] ***
*** finished computation of 7 references, err: [Inf, 0.24754902677306126, 0.19454151955314505] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [124, 7, 0]]
** centroid: 1, normalized-entropy: 0.3008136355651162, [(1, 124), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 24, 19]]
** centroid: 2, normalized-entropy: 0.9902246902198684, [(2, 24), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [114, 2, 0]]
** centroid: 3, normalized-entropy: 0.12565805017256745, [(1, 114), (2, 2)]
*** center 4: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [81, 9, 0]]
** centroid: 5, normalized-entropy: 0.46899559358928133, [(1, 81), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 86, 0]]
** centroid: 6, normalized-entropy: 0.09054385326964301, [(1, 1), (2, 86)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 99, 0]]
** centroid: 7, normalized-entropy: 0.08079313589591128, [(1, 1), (2, 99)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22018304119004053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22018304119004053, 0.1924417413611737] ***
*** starting iteration: 2; err: [Inf, 0.22018304119004053, 0.1924417413611737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22018304119004053, 0.1924417413611737, 0.19073663836249988] ***
*** starting iteration: 3; err: [Inf, 0.22018304119004053, 0.1924417413611737, 0.19073663836249988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22018304119004053, 0.1924417413611737, 0.19073663836249988, 0.19023860758485123] ***
*** finished computation of 7 references, err: [Inf, 0.22018304119004053, 0.1924417413611737, 0.19073663836249988, 0.19023860758485123] ***
*** center 1: selecting labels [1] (freq >= 1) [from [135, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 43, 24]]
** centroid: 2, normalized-entropy: 0.9411864371816836, [(2, 43), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 1, 0]]
** centroid: 3, normalized-entropy: 0.13303964861069897, [(1, 53), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [94, 13, 0]]
** centroid: 4, normalized-entropy: 0.5336439173027161, [(1, 94), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [17, 73, 0]]
** centroid: 5, normalized-entropy: 0.6991413063352633, [(1, 17), (2, 73)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 91, 0]]
** centroid: 6, normalized-entropy: 0.2039058755048202, [(1, 3), (2, 91)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [118, 1, 0]]
** centroid: 7, normalized-entropy: 0.0700120504953614, [(1, 118), (2, 1)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2342155868511485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2342155868511485, 0.1944357440541631] ***
*** starting iteration: 2; err: [Inf, 0.2342155868511485, 0.1944357440541631] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2342155868511485, 0.1944357440541631, 0.19041217558890178] ***
*** starting iteration: 3; err: [Inf, 0.2342155868511485, 0.1944357440541631, 0.19041217558890178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2342155868511485, 0.1944357440541631, 0.19041217558890178, 0.18974708850918592] ***
*** finished computation of 7 references, err: [Inf, 0.2342155868511485, 0.1944357440541631, 0.19041217558890178, 0.18974708850918592] ***
*** center 1: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 53, 23]]
** centroid: 2, normalized-entropy: 0.8844839729019952, [(2, 53), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [75, 6, 0]]
** centroid: 3, normalized-entropy: 0.38094658570539014, [(1, 75), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [105, 19, 0]]
** centroid: 4, normalized-entropy: 0.6178543578838833, [(1, 105), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [22, 82, 0]]
** centroid: 5, normalized-entropy: 0.7444131797881749, [(1, 22), (2, 82)]
*** center 6: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [7, 69, 0]]
** centroid: 7, normalized-entropy: 0.4434581453896789, [(1, 7), (2, 69)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2359050853621924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2359050853621924, 0.19260772867225992] ***
*** starting iteration: 2; err: [Inf, 0.2359050853621924, 0.19260772867225992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2359050853621924, 0.19260772867225992, 0.18628206920413498] ***
*** starting iteration: 3; err: [Inf, 0.2359050853621924, 0.19260772867225992, 0.18628206920413498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2359050853621924, 0.19260772867225992, 0.18628206920413498, 0.18564660427184299] ***
*** finished computation of 7 references, err: [Inf, 0.2359050853621924, 0.19260772867225992, 0.18628206920413498, 0.18564660427184299] ***
*** center 1: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 58, 19]]
** centroid: 2, normalized-entropy: 0.8060914696192223, [(2, 58), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [71, 34, 0]]
** centroid: 3, normalized-entropy: 0.908476164453323, [(1, 71), (2, 34)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [71, 38, 0]]
** centroid: 4, normalized-entropy: 0.9328330312384981, [(1, 71), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [6, 97, 0]]
** centroid: 5, normalized-entropy: 0.32046828741158423, [(1, 6), (2, 97)]
*** center 6: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9400148651645658, 0.9260098421775069, 0.9260038481595368, 0.92402282522043, 0.9159998321674968, 0.9150437863012714, 0.912999826173479, 0.9049858241475008, 0.9009548470626315, 0.8999688311065558, 0.8830357303411196, 0.8680806555058052, 0.8051524578470687, 0.7879136621651591]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9400148651645658
finished with 15
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.21139014725553784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21139014725553784, 0.17033596220985614] ***
*** finished computation of 7 references, err: [Inf, 0.21139014725553784, 0.17033596220985614] ***
*** center 1: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [31, 99, 19]]
** centroid: 2, normalized-entropy: 0.7836193939522007, [(1, 31), (2, 99), (3, 19)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [27, 85, 5]]
** centroid: 3, normalized-entropy: 0.6419458926913265, [(1, 27), (2, 85), (3, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [38, 38, 0]]
** centroid: 4, normalized-entropy: 1.0, [(1, 38), (2, 38)]
*** center 5: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2288599897516721] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2288599897516721, 0.16604098723991878] ***
*** finished computation of 7 references, err: [Inf, 0.2288599897516721, 0.16604098723991878] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [104, 5, 0]]
** centroid: 1, normalized-entropy: 0.2685937636658219, [(1, 104), (2, 5)]
*** center 2: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 118, 23]]
** centroid: 3, normalized-entropy: 0.6417229494625626, [(2, 118), (3, 23)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [36, 62, 0]]
** centroid: 4, normalized-entropy: 0.9486131982385807, [(1, 36), (2, 62)]
*** center 5: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [96, 44, 0]]
** centroid: 6, normalized-entropy: 0.8980587934501658, [(1, 96), (2, 44)]
*** center 7: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20882608378295558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20882608378295558, 0.16175283685974454] ***
*** finished computation of 7 references, err: [Inf, 0.20882608378295558, 0.16175283685974454] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [104, 23, 0]]
** centroid: 1, normalized-entropy: 0.6824826735754346, [(1, 104), (2, 23)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 98, 18]]
** centroid: 2, normalized-entropy: 0.6226343162547099, [(2, 98), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [45, 4, 0]]
** centroid: 3, normalized-entropy: 0.4079059801389762, [(1, 45), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [77, 5, 0]]
** centroid: 4, normalized-entropy: 0.3313056130577883, [(1, 77), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [151, 2, 0]]
** centroid: 5, normalized-entropy: 0.10053087773783542, [(1, 151), (2, 2)]
*** center 6: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 95, 1]]
** centroid: 7, normalized-entropy: 0.08354288831032243, [(2, 95), (3, 1)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9400148651645658, 0.9260098421775069, 0.9260038481595368, 0.92402282522043, 0.9159998321674968, 0.9150437863012714, 0.912999826173479, 0.9120078161994329, 0.9049858241475008, 0.9009548470626315, 0.8999688311065558, 0.8830357303411196, 0.8680806555058052, 0.8051524578470687, 0.7879136621651591]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9400148651645658
finished with 16
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.3561995331094497] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3561995331094497, 0.33173957985179786] ***
*** starting iteration: 2; err: [Inf, 0.3561995331094497, 0.33173957985179786] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3561995331094497, 0.33173957985179786, 0.32807456728703044] ***
*** starting iteration: 3; err: [Inf, 0.3561995331094497, 0.33173957985179786, 0.32807456728703044] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3561995331094497, 0.33173957985179786, 0.32807456728703044, 0.32567827300065094] ***
*** starting iteration: 4; err: [Inf, 0.3561995331094497, 0.33173957985179786, 0.32807456728703044, 0.32567827300065094] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3561995331094497, 0.33173957985179786, 0.32807456728703044, 0.32567827300065094, 0.32174590659291447] ***
*** starting iteration: 5; err: [Inf, 0.3561995331094497, 0.33173957985179786, 0.32807456728703044, 0.32567827300065094, 0.32174590659291447] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3561995331094497, 0.33173957985179786, 0.32807456728703044, 0.32567827300065094, 0.32174590659291447, 0.31670786586363575] ***
*** starting iteration: 6; err: [Inf, 0.3561995331094497, 0.33173957985179786, 0.32807456728703044, 0.32567827300065094, 0.32174590659291447, 0.31670786586363575] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3561995331094497, 0.33173957985179786, 0.32807456728703044, 0.32567827300065094, 0.32174590659291447, 0.31670786586363575, 0.31291799981974894] ***
*** starting iteration: 7; err: [Inf, 0.3561995331094497, 0.33173957985179786, 0.32807456728703044, 0.32567827300065094, 0.32174590659291447, 0.31670786586363575, 0.31291799981974894] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3561995331094497, 0.33173957985179786, 0.32807456728703044, 0.32567827300065094, 0.32174590659291447, 0.31670786586363575, 0.31291799981974894, 0.3089780432882498] ***
*** starting iteration: 8; err: [Inf, 0.3561995331094497, 0.33173957985179786, 0.32807456728703044, 0.32567827300065094, 0.32174590659291447, 0.31670786586363575, 0.31291799981974894, 0.3089780432882498] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3561995331094497, 0.33173957985179786, 0.32807456728703044, 0.32567827300065094, 0.32174590659291447, 0.31670786586363575, 0.31291799981974894, 0.3089780432882498, 0.305120953469182] ***
*** starting iteration: 9; err: [Inf, 0.3561995331094497, 0.33173957985179786, 0.32807456728703044, 0.32567827300065094, 0.32174590659291447, 0.31670786586363575, 0.31291799981974894, 0.3089780432882498, 0.305120953469182] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3561995331094497, 0.33173957985179786, 0.32807456728703044, 0.32567827300065094, 0.32174590659291447, 0.31670786586363575, 0.31291799981974894, 0.3089780432882498, 0.305120953469182, 0.2980792853902947] ***
*** starting iteration: 10; err: [Inf, 0.3561995331094497, 0.33173957985179786, 0.32807456728703044, 0.32567827300065094, 0.32174590659291447, 0.31670786586363575, 0.31291799981974894, 0.3089780432882498, 0.305120953469182, 0.2980792853902947] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3561995331094497, 0.33173957985179786, 0.32807456728703044, 0.32567827300065094, 0.32174590659291447, 0.31670786586363575, 0.31291799981974894, 0.3089780432882498, 0.305120953469182, 0.2980792853902947, 0.2902054884708724] ***
*** finished computation of 3 references, err: [Inf, 0.3561995331094497, 0.33173957985179786, 0.32807456728703044, 0.32567827300065094, 0.32174590659291447, 0.31670786586363575, 0.31291799981974894, 0.3089780432882498, 0.305120953469182, 0.2980792853902947, 0.2902054884708724] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [2, 175, 24]]
** centroid: 1, normalized-entropy: 0.38251401818342073, [(1, 2), (2, 175), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [251, 5, 0]]
** centroid: 2, normalized-entropy: 0.13880049798406022, [(1, 251), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [167, 42, 0]]
** centroid: 3, normalized-entropy: 0.7238378469140183, [(1, 167), (2, 42)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.49930574248141346] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49930574248141346, 0.36827427187216827] ***
*** starting iteration: 2; err: [Inf, 0.49930574248141346, 0.36827427187216827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49930574248141346, 0.36827427187216827, 0.34900560708942713] ***
*** starting iteration: 3; err: [Inf, 0.49930574248141346, 0.36827427187216827, 0.34900560708942713] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49930574248141346, 0.36827427187216827, 0.34900560708942713, 0.33976189566516446] ***
*** starting iteration: 4; err: [Inf, 0.49930574248141346, 0.36827427187216827, 0.34900560708942713, 0.33976189566516446] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49930574248141346, 0.36827427187216827, 0.34900560708942713, 0.33976189566516446, 0.33291078205436825] ***
*** starting iteration: 5; err: [Inf, 0.49930574248141346, 0.36827427187216827, 0.34900560708942713, 0.33976189566516446, 0.33291078205436825] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49930574248141346, 0.36827427187216827, 0.34900560708942713, 0.33976189566516446, 0.33291078205436825, 0.324640037635735] ***
*** starting iteration: 6; err: [Inf, 0.49930574248141346, 0.36827427187216827, 0.34900560708942713, 0.33976189566516446, 0.33291078205436825, 0.324640037635735] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49930574248141346, 0.36827427187216827, 0.34900560708942713, 0.33976189566516446, 0.33291078205436825, 0.324640037635735, 0.3006635684620539] ***
*** starting iteration: 7; err: [Inf, 0.49930574248141346, 0.36827427187216827, 0.34900560708942713, 0.33976189566516446, 0.33291078205436825, 0.324640037635735, 0.3006635684620539] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.49930574248141346, 0.36827427187216827, 0.34900560708942713, 0.33976189566516446, 0.33291078205436825, 0.324640037635735, 0.3006635684620539, 0.2997458783945982] ***
*** finished computation of 3 references, err: [Inf, 0.49930574248141346, 0.36827427187216827, 0.34900560708942713, 0.33976189566516446, 0.33291078205436825, 0.324640037635735, 0.3006635684620539, 0.2997458783945982] ***
*** center 1: selecting labels [1] (freq >= 2) [from [199, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [125, 66, 0]]
** centroid: 2, normalized-entropy: 0.9300306737927182, [(1, 125), (2, 66)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [91, 163, 23]]
** centroid: 3, normalized-entropy: 0.8049767453078986, [(1, 91), (2, 163), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4263601020394616] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4263601020394616, 0.33276047123347535] ***
*** starting iteration: 2; err: [Inf, 0.4263601020394616, 0.33276047123347535] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4263601020394616, 0.33276047123347535, 0.3307057847471341] ***
*** starting iteration: 3; err: [Inf, 0.4263601020394616, 0.33276047123347535, 0.3307057847471341] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4263601020394616, 0.33276047123347535, 0.3307057847471341, 0.32988409843223204] ***
*** finished computation of 3 references, err: [Inf, 0.4263601020394616, 0.33276047123347535, 0.3307057847471341, 0.32988409843223204] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [97, 127, 0]]
** centroid: 1, normalized-entropy: 0.9870223286994949, [(1, 97), (2, 127)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [80, 98, 19]]
** centroid: 2, normalized-entropy: 0.8545984293989811, [(1, 80), (2, 98), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [244, 2, 0]]
** centroid: 3, normalized-entropy: 0.06812462580532001, [(1, 244), (2, 2)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 16)
[0.9400148651645658, 0.9260098421775069, 0.9260038481595368, 0.92402282522043, 0.9159998321674968, 0.9150437863012714, 0.912999826173479, 0.9120078161994329, 0.909001816187445, 0.9049858241475008, 0.9009548470626315, 0.8999688311065558, 0.8830357303411196, 0.8680806555058052, 0.8051524578470687, 0.7879136621651591]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9400148651645658
finished with 17
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.4013516320385509] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4013516320385509, 0.27887099651429614] ***
*** starting iteration: 2; err: [Inf, 0.4013516320385509, 0.27887099651429614] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4013516320385509, 0.27887099651429614, 0.27272779711692763] ***
*** starting iteration: 3; err: [Inf, 0.4013516320385509, 0.27887099651429614, 0.27272779711692763] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4013516320385509, 0.27887099651429614, 0.27272779711692763, 0.2580417342086857] ***
*** finished computation of 3 references, err: [Inf, 0.4013516320385509, 0.27887099651429614, 0.27272779711692763, 0.2580417342086857] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [147, 23, 0]]
** centroid: 1, normalized-entropy: 0.5717805850773673, [(1, 147), (2, 23)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [45, 168, 24]]
** centroid: 2, normalized-entropy: 0.7202458030091888, [(1, 45), (2, 168), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [228, 31, 0]]
** centroid: 3, normalized-entropy: 0.5284723461747616, [(1, 228), (2, 31)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27614820520554123] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27614820520554123, 0.23925966604136634] ***
*** starting iteration: 2; err: [Inf, 0.27614820520554123, 0.23925966604136634] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27614820520554123, 0.23925966604136634, 0.23823862707429472] ***
*** starting iteration: 3; err: [Inf, 0.27614820520554123, 0.23925966604136634, 0.23823862707429472] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27614820520554123, 0.23925966604136634, 0.23823862707429472, 0.23816699170922187] ***
*** finished computation of 3 references, err: [Inf, 0.27614820520554123, 0.23925966604136634, 0.23823862707429472, 0.23816699170922187] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [120, 71, 0]]
** centroid: 1, normalized-entropy: 0.9519894722354625, [(1, 120), (2, 71)]
*** center 2: selecting labels [1] (freq >= 1) [from [189, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [106, 158, 23]]
** centroid: 3, normalized-entropy: 0.8180750303567316, [(1, 106), (2, 158), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3081394039049767] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3081394039049767, 0.24817253413821] ***
*** starting iteration: 2; err: [Inf, 0.3081394039049767, 0.24817253413821] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3081394039049767, 0.24817253413821, 0.23285818731218905] ***
*** starting iteration: 3; err: [Inf, 0.3081394039049767, 0.24817253413821, 0.23285818731218905] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3081394039049767, 0.24817253413821, 0.23285818731218905, 0.22924074333376143] ***
*** finished computation of 3 references, err: [Inf, 0.3081394039049767, 0.24817253413821, 0.23285818731218905, 0.22924074333376143] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [84, 155, 19]]
** centroid: 1, normalized-entropy: 0.7860505898468058, [(1, 84), (2, 155), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [118, 72, 0]]
** centroid: 2, normalized-entropy: 0.9572951876544017, [(1, 118), (2, 72)]
*** center 3: selecting labels [1] (freq >= 1) [from [219, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 17)
[0.9400148651645658, 0.9260098421775069, 0.9260038481595368, 0.92402282522043, 0.9159998321674968, 0.9150437863012714, 0.912999826173479, 0.9120078161994329, 0.909001816187445, 0.9049858241475008, 0.9009548470626315, 0.8999688311065558, 0.8940407473341606, 0.8830357303411196, 0.8680806555058052, 0.8051524578470687, 0.7879136621651591]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9400148651645658
finished with 18
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.19157179810285746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19157179810285746, 0.16275684921386968] ***
*** starting iteration: 2; err: [Inf, 0.19157179810285746, 0.16275684921386968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19157179810285746, 0.16275684921386968, 0.15844973050373923] ***
*** starting iteration: 3; err: [Inf, 0.19157179810285746, 0.16275684921386968, 0.15844973050373923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19157179810285746, 0.16275684921386968, 0.15844973050373923, 0.15685055560086975] ***
*** starting iteration: 4; err: [Inf, 0.19157179810285746, 0.16275684921386968, 0.15844973050373923, 0.15685055560086975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19157179810285746, 0.16275684921386968, 0.15844973050373923, 0.15685055560086975, 0.15539180005162215] ***
*** starting iteration: 5; err: [Inf, 0.19157179810285746, 0.16275684921386968, 0.15844973050373923, 0.15685055560086975, 0.15539180005162215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19157179810285746, 0.16275684921386968, 0.15844973050373923, 0.15685055560086975, 0.15539180005162215, 0.1543030483548896] ***
*** starting iteration: 6; err: [Inf, 0.19157179810285746, 0.16275684921386968, 0.15844973050373923, 0.15685055560086975, 0.15539180005162215, 0.1543030483548896] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19157179810285746, 0.16275684921386968, 0.15844973050373923, 0.15685055560086975, 0.15539180005162215, 0.1543030483548896, 0.15278949336828412] ***
*** starting iteration: 7; err: [Inf, 0.19157179810285746, 0.16275684921386968, 0.15844973050373923, 0.15685055560086975, 0.15539180005162215, 0.1543030483548896, 0.15278949336828412] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19157179810285746, 0.16275684921386968, 0.15844973050373923, 0.15685055560086975, 0.15539180005162215, 0.1543030483548896, 0.15278949336828412, 0.1510740498726902] ***
*** starting iteration: 8; err: [Inf, 0.19157179810285746, 0.16275684921386968, 0.15844973050373923, 0.15685055560086975, 0.15539180005162215, 0.1543030483548896, 0.15278949336828412, 0.1510740498726902] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19157179810285746, 0.16275684921386968, 0.15844973050373923, 0.15685055560086975, 0.15539180005162215, 0.1543030483548896, 0.15278949336828412, 0.1510740498726902, 0.1496999612086461] ***
*** starting iteration: 9; err: [Inf, 0.19157179810285746, 0.16275684921386968, 0.15844973050373923, 0.15685055560086975, 0.15539180005162215, 0.1543030483548896, 0.15278949336828412, 0.1510740498726902, 0.1496999612086461] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19157179810285746, 0.16275684921386968, 0.15844973050373923, 0.15685055560086975, 0.15539180005162215, 0.1543030483548896, 0.15278949336828412, 0.1510740498726902, 0.1496999612086461, 0.14913194945121222] ***
*** finished computation of 7 references, err: [Inf, 0.19157179810285746, 0.16275684921386968, 0.15844973050373923, 0.15685055560086975, 0.15539180005162215, 0.1543030483548896, 0.15278949336828412, 0.1510740498726902, 0.1496999612086461, 0.14913194945121222] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [71, 44, 0]]
** centroid: 1, normalized-entropy: 0.9598636448150405, [(1, 71), (2, 44)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 96, 24]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 96), (3, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [63, 35, 0]]
** centroid: 5, normalized-entropy: 0.940285958670631, [(1, 63), (2, 35)]
*** center 6: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [37, 47, 0]]
** centroid: 7, normalized-entropy: 0.9897525351939971, [(1, 37), (2, 47)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19906892395205517] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19906892395205517, 0.16356642389281847] ***
*** starting iteration: 2; err: [Inf, 0.19906892395205517, 0.16356642389281847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19906892395205517, 0.16356642389281847, 0.1537171296574276] ***
*** starting iteration: 3; err: [Inf, 0.19906892395205517, 0.16356642389281847, 0.1537171296574276] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19906892395205517, 0.16356642389281847, 0.1537171296574276, 0.14971505182779868] ***
*** starting iteration: 4; err: [Inf, 0.19906892395205517, 0.16356642389281847, 0.1537171296574276, 0.14971505182779868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19906892395205517, 0.16356642389281847, 0.1537171296574276, 0.14971505182779868, 0.14884170732213772] ***
*** finished computation of 7 references, err: [Inf, 0.19906892395205517, 0.16356642389281847, 0.1537171296574276, 0.14971505182779868, 0.14884170732213772] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [94, 39, 0]]
** centroid: 1, normalized-entropy: 0.8728610926942303, [(1, 94), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [78, 33, 0]]
** centroid: 2, normalized-entropy: 0.8779620013943914, [(1, 78), (2, 33)]
*** center 3: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 113, 23]]
** centroid: 6, normalized-entropy: 0.6556823431457255, [(2, 113), (3, 23)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [34, 44, 0]]
** centroid: 7, normalized-entropy: 0.98811083652183, [(1, 34), (2, 44)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20490471632785348] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20490471632785348, 0.15185571598891598] ***
*** starting iteration: 2; err: [Inf, 0.20490471632785348, 0.15185571598891598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20490471632785348, 0.15185571598891598, 0.1477576320902954] ***
*** starting iteration: 3; err: [Inf, 0.20490471632785348, 0.15185571598891598, 0.1477576320902954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20490471632785348, 0.15185571598891598, 0.1477576320902954, 0.14685487894500526] ***
*** finished computation of 7 references, err: [Inf, 0.20490471632785348, 0.15185571598891598, 0.1477576320902954, 0.14685487894500526] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [79, 32, 0]]
** centroid: 1, normalized-entropy: 0.8664998383682039, [(1, 79), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [99, 11, 0]]
** centroid: 2, normalized-entropy: 0.46899559358928133, [(1, 99), (2, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 91, 19]]
** centroid: 4, normalized-entropy: 0.6639057588563916, [(2, 91), (3, 19)]
*** center 5: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [66, 4, 0]]
** centroid: 6, normalized-entropy: 0.3159971329784246, [(1, 66), (2, 4)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 89, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 18)
[0.9409858960757164, 0.9400148651645658, 0.9260098421775069, 0.9260038481595368, 0.92402282522043, 0.9159998321674968, 0.9150437863012714, 0.912999826173479, 0.9120078161994329, 0.909001816187445, 0.9049858241475008, 0.9009548470626315, 0.8999688311065558, 0.8940407473341606, 0.8830357303411196, 0.8680806555058052, 0.8051524578470687, 0.7879136621651591]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 1) => 0.9409858960757164
finished with 18
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9409858960757164, 0.9400148651645658, 0.9260098421775069, 0.9260038481595368, 0.92402282522043, 0.9159998321674968, 0.9150437863012714, 0.912999826173479, 0.9120078161994329, 0.909001816187445, 0.9049858241475008, 0.9009548470626315, 0.8999688311065558, 0.8940407473341606, 0.8830357303411196, 0.8680806555058052, 0.8051524578470687, 0.7879136621651591]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 1) => 0.9409858960757164
finished with 19
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.3255983429230951] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3255983429230951, 0.20622795668371893] ***
*** starting iteration: 2; err: [Inf, 0.3255983429230951, 0.20622795668371893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3255983429230951, 0.20622795668371893, 0.19504850261142706] ***
*** starting iteration: 3; err: [Inf, 0.3255983429230951, 0.20622795668371893, 0.19504850261142706] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3255983429230951, 0.20622795668371893, 0.19504850261142706, 0.1911752963880519] ***
*** starting iteration: 4; err: [Inf, 0.3255983429230951, 0.20622795668371893, 0.19504850261142706, 0.1911752963880519] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3255983429230951, 0.20622795668371893, 0.19504850261142706, 0.1911752963880519, 0.18911006106497222] ***
*** starting iteration: 5; err: [Inf, 0.3255983429230951, 0.20622795668371893, 0.19504850261142706, 0.1911752963880519, 0.18911006106497222] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3255983429230951, 0.20622795668371893, 0.19504850261142706, 0.1911752963880519, 0.18911006106497222, 0.18775708692088197] ***
*** starting iteration: 6; err: [Inf, 0.3255983429230951, 0.20622795668371893, 0.19504850261142706, 0.1911752963880519, 0.18911006106497222, 0.18775708692088197] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3255983429230951, 0.20622795668371893, 0.19504850261142706, 0.1911752963880519, 0.18911006106497222, 0.18775708692088197, 0.18728140056938739] ***
*** finished computation of 7 references, err: [Inf, 0.3255983429230951, 0.20622795668371893, 0.19504850261142706, 0.1911752963880519, 0.18911006106497222, 0.18775708692088197, 0.18728140056938739] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [3, 77, 0]]
** centroid: 1, normalized-entropy: 0.2307099556914763, [(1, 3), (2, 77)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 54, 24]]
** centroid: 2, normalized-entropy: 0.8904916402194913, [(2, 54), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [76, 15, 0]]
** centroid: 3, normalized-entropy: 0.6457523329916605, [(1, 76), (2, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [10, 76, 0]]
** centroid: 5, normalized-entropy: 0.5185697317883058, [(1, 10), (2, 76)]
*** center 6: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.32574143384567933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32574143384567933, 0.20424161205344696] ***
*** starting iteration: 2; err: [Inf, 0.32574143384567933, 0.20424161205344696] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32574143384567933, 0.20424161205344696, 0.1924553308405563] ***
*** starting iteration: 3; err: [Inf, 0.32574143384567933, 0.20424161205344696, 0.1924553308405563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32574143384567933, 0.20424161205344696, 0.1924553308405563, 0.19105520191277076] ***
*** starting iteration: 4; err: [Inf, 0.32574143384567933, 0.20424161205344696, 0.1924553308405563, 0.19105520191277076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32574143384567933, 0.20424161205344696, 0.1924553308405563, 0.19105520191277076, 0.19065978220975335] ***
*** finished computation of 7 references, err: [Inf, 0.32574143384567933, 0.20424161205344696, 0.1924553308405563, 0.19105520191277076, 0.19065978220975335] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [66, 29, 0]]
** centroid: 1, normalized-entropy: 0.8876297058429742, [(1, 66), (2, 29)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [79, 13, 0]]
** centroid: 2, normalized-entropy: 0.5876446142980418, [(1, 79), (2, 13)]
*** center 3: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 106, 23]]
** centroid: 4, normalized-entropy: 0.6763319595084449, [(2, 106), (3, 23)]
*** center 5: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [86, 1, 0]]
** centroid: 6, normalized-entropy: 0.09054385326964301, [(1, 86), (2, 1)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [21, 80, 0]]
** centroid: 7, normalized-entropy: 0.7374895672137457, [(1, 21), (2, 80)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2704968369730666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2704968369730666, 0.23016352707037013] ***
*** starting iteration: 2; err: [Inf, 0.2704968369730666, 0.23016352707037013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2704968369730666, 0.23016352707037013, 0.22099285108223] ***
*** starting iteration: 3; err: [Inf, 0.2704968369730666, 0.23016352707037013, 0.22099285108223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2704968369730666, 0.23016352707037013, 0.22099285108223, 0.20246501077899243] ***
*** starting iteration: 4; err: [Inf, 0.2704968369730666, 0.23016352707037013, 0.22099285108223, 0.20246501077899243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2704968369730666, 0.23016352707037013, 0.22099285108223, 0.20246501077899243, 0.19593461774599583] ***
*** starting iteration: 5; err: [Inf, 0.2704968369730666, 0.23016352707037013, 0.22099285108223, 0.20246501077899243, 0.19593461774599583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2704968369730666, 0.23016352707037013, 0.22099285108223, 0.20246501077899243, 0.19593461774599583, 0.19348373557433954] ***
*** starting iteration: 6; err: [Inf, 0.2704968369730666, 0.23016352707037013, 0.22099285108223, 0.20246501077899243, 0.19593461774599583, 0.19348373557433954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2704968369730666, 0.23016352707037013, 0.22099285108223, 0.20246501077899243, 0.19593461774599583, 0.19348373557433954, 0.19149028063323098] ***
*** starting iteration: 7; err: [Inf, 0.2704968369730666, 0.23016352707037013, 0.22099285108223, 0.20246501077899243, 0.19593461774599583, 0.19348373557433954, 0.19149028063323098] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2704968369730666, 0.23016352707037013, 0.22099285108223, 0.20246501077899243, 0.19593461774599583, 0.19348373557433954, 0.19149028063323098, 0.19068677099652007] ***
*** finished computation of 7 references, err: [Inf, 0.2704968369730666, 0.23016352707037013, 0.22099285108223, 0.20246501077899243, 0.19593461774599583, 0.19348373557433954, 0.19149028063323098, 0.19068677099652007] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [38, 51, 0]]
** centroid: 1, normalized-entropy: 0.9845543528607513, [(1, 38), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [53, 35, 0]]
** centroid: 2, normalized-entropy: 0.9696055994904408, [(1, 53), (2, 35)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [73, 30, 0]]
** centroid: 3, normalized-entropy: 0.8703460546929581, [(1, 73), (2, 30)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 105, 19]]
** centroid: 4, normalized-entropy: 0.6178543578838833, [(2, 105), (3, 19)]
*** center 5: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [74, 6, 0]]
** centroid: 7, normalized-entropy: 0.3843115441264972, [(1, 74), (2, 6)]
finished with 12 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 19)
[0.9409858960757164, 0.9400148651645658, 0.9260098421775069, 0.9260038481595368, 0.92402282522043, 0.9199918481355608, 0.9159998321674968, 0.9150437863012714, 0.912999826173479, 0.9120078161994329, 0.909001816187445, 0.9049858241475008, 0.9009548470626315, 0.8999688311065558, 0.8940407473341606, 0.8830357303411196, 0.8680806555058052, 0.8051524578470687, 0.7879136621651591]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 1) => 0.9409858960757164
finished with 19
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 19)
[0.9409858960757164, 0.9400148651645658, 0.9260098421775069, 0.9260038481595368, 0.92402282522043, 0.9199918481355608, 0.9159998321674968, 0.9150437863012714, 0.912999826173479, 0.9120078161994329, 0.909001816187445, 0.9049858241475008, 0.9009548470626315, 0.8999688311065558, 0.8940407473341606, 0.8830357303411196, 0.8680806555058052, 0.8051524578470687, 0.7879136621651591]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 1) => 0.9409858960757164
finished with 19
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.21751985801756382] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21751985801756382, 0.17236733007151633] ***
*** starting iteration: 2; err: [Inf, 0.21751985801756382, 0.17236733007151633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21751985801756382, 0.17236733007151633, 0.15851954628992826] ***
*** starting iteration: 3; err: [Inf, 0.21751985801756382, 0.17236733007151633, 0.15851954628992826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21751985801756382, 0.17236733007151633, 0.15851954628992826, 0.15405517787230202] ***
*** starting iteration: 4; err: [Inf, 0.21751985801756382, 0.17236733007151633, 0.15851954628992826, 0.15405517787230202] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21751985801756382, 0.17236733007151633, 0.15851954628992826, 0.15405517787230202, 0.15138244363944978] ***
*** starting iteration: 5; err: [Inf, 0.21751985801756382, 0.17236733007151633, 0.15851954628992826, 0.15405517787230202, 0.15138244363944978] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21751985801756382, 0.17236733007151633, 0.15851954628992826, 0.15405517787230202, 0.15138244363944978, 0.14983786174049601] ***
*** starting iteration: 6; err: [Inf, 0.21751985801756382, 0.17236733007151633, 0.15851954628992826, 0.15405517787230202, 0.15138244363944978, 0.14983786174049601] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21751985801756382, 0.17236733007151633, 0.15851954628992826, 0.15405517787230202, 0.15138244363944978, 0.14983786174049601, 0.14918686857027932] ***
*** finished computation of 7 references, err: [Inf, 0.21751985801756382, 0.17236733007151633, 0.15851954628992826, 0.15405517787230202, 0.15138244363944978, 0.14983786174049601, 0.14918686857027932] ***
*** center 1: selecting labels [1] (freq >= 1) [from [164, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [22, 122, 0]]
** centroid: 2, normalized-entropy: 0.6167482598263911, [(1, 22), (2, 122)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [92, 15, 0]]
** centroid: 3, normalized-entropy: 0.5847281182574745, [(1, 92), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [16, 116, 0]]
** centroid: 4, normalized-entropy: 0.5328350630342235, [(1, 16), (2, 116)]
*** center 5: selecting labels [1] (freq >= 1) [from [206, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [128, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 86, 33]]
** centroid: 7, normalized-entropy: 0.8517608318524026, [(2, 86), (3, 33)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18961012296751142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18961012296751142, 0.1557101933453232] ***
*** starting iteration: 2; err: [Inf, 0.18961012296751142, 0.1557101933453232] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18961012296751142, 0.1557101933453232, 0.15067617709492334] ***
*** starting iteration: 3; err: [Inf, 0.18961012296751142, 0.1557101933453232, 0.15067617709492334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18961012296751142, 0.1557101933453232, 0.15067617709492334, 0.14910400676820426] ***
*** starting iteration: 4; err: [Inf, 0.18961012296751142, 0.1557101933453232, 0.15067617709492334, 0.14910400676820426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18961012296751142, 0.1557101933453232, 0.15067617709492334, 0.14910400676820426, 0.14821270399726927] ***
*** finished computation of 7 references, err: [Inf, 0.18961012296751142, 0.1557101933453232, 0.15067617709492334, 0.14910400676820426, 0.14821270399726927] ***
*** center 1: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 32, 17]]
** centroid: 3, normalized-entropy: 0.9313043685793762, [(2, 32), (3, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [1, 76, 0]]
** centroid: 4, normalized-entropy: 0.1000009430103234, [(1, 1), (2, 76)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [65, 3, 0]]
** centroid: 5, normalized-entropy: 0.260862909647207, [(1, 65), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [61, 24, 0]]
** centroid: 6, normalized-entropy: 0.8586370819183629, [(1, 61), (2, 24)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [57, 29, 0]]
** centroid: 7, normalized-entropy: 0.9221231306777973, [(1, 57), (2, 29)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22105941085517405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22105941085517405, 0.16106005828641354] ***
*** starting iteration: 2; err: [Inf, 0.22105941085517405, 0.16106005828641354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22105941085517405, 0.16106005828641354, 0.1484765245616436] ***
*** starting iteration: 3; err: [Inf, 0.22105941085517405, 0.16106005828641354, 0.1484765245616436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22105941085517405, 0.16106005828641354, 0.1484765245616436, 0.1471517846044153] ***
*** starting iteration: 4; err: [Inf, 0.22105941085517405, 0.16106005828641354, 0.1484765245616436, 0.1471517846044153] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22105941085517405, 0.16106005828641354, 0.1484765245616436, 0.1471517846044153, 0.14667832546308637] ***
*** finished computation of 7 references, err: [Inf, 0.22105941085517405, 0.16106005828641354, 0.1484765245616436, 0.1471517846044153, 0.14667832546308637] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 59, 16]]
** centroid: 1, normalized-entropy: 0.7478061583312324, [(2, 59), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 32, 0]]
** centroid: 2, normalized-entropy: 0.9113423759758414, [(1, 66), (2, 32)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [8, 44, 0]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(1, 8), (2, 44)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [35, 30, 0]]
** centroid: 4, normalized-entropy: 0.9957274520849256, [(1, 35), (2, 30)]
*** center 5: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19655098628625273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19655098628625273, 0.1533897793069482] ***
*** starting iteration: 2; err: [Inf, 0.19655098628625273, 0.1533897793069482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19655098628625273, 0.1533897793069482, 0.14986230247467755] ***
*** starting iteration: 3; err: [Inf, 0.19655098628625273, 0.1533897793069482, 0.14986230247467755] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19655098628625273, 0.1533897793069482, 0.14986230247467755, 0.14836788834352047] ***
*** starting iteration: 4; err: [Inf, 0.19655098628625273, 0.1533897793069482, 0.14986230247467755, 0.14836788834352047] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19655098628625273, 0.1533897793069482, 0.14986230247467755, 0.14836788834352047, 0.1478679810203612] ***
*** finished computation of 7 references, err: [Inf, 0.19655098628625273, 0.1533897793069482, 0.14986230247467755, 0.14836788834352047, 0.1478679810203612] ***
*** center 1: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [44, 1, 0]]
** centroid: 2, normalized-entropy: 0.1537421803287618, [(1, 44), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [36, 41, 0]]
** centroid: 4, normalized-entropy: 0.9969562518473082, [(1, 36), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [70, 22, 0]]
** centroid: 5, normalized-entropy: 0.7935912300117066, [(1, 70), (2, 22)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 78, 15]]
** centroid: 6, normalized-entropy: 0.6373874992221911, [(2, 78), (3, 15)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [35, 29, 0]]
** centroid: 7, normalized-entropy: 0.9936507116910402, [(1, 35), (2, 29)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2431196613702923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2431196613702923, 0.1736006839442998] ***
*** starting iteration: 2; err: [Inf, 0.2431196613702923, 0.1736006839442998] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2431196613702923, 0.1736006839442998, 0.1569362839795649] ***
*** starting iteration: 3; err: [Inf, 0.2431196613702923, 0.1736006839442998, 0.1569362839795649] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2431196613702923, 0.1736006839442998, 0.1569362839795649, 0.15223889550566674] ***
*** starting iteration: 4; err: [Inf, 0.2431196613702923, 0.1736006839442998, 0.1569362839795649, 0.15223889550566674] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2431196613702923, 0.1736006839442998, 0.1569362839795649, 0.15223889550566674, 0.1511184268379584] ***
*** starting iteration: 5; err: [Inf, 0.2431196613702923, 0.1736006839442998, 0.1569362839795649, 0.15223889550566674, 0.1511184268379584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2431196613702923, 0.1736006839442998, 0.1569362839795649, 0.15223889550566674, 0.1511184268379584, 0.1507437423467636] ***
*** finished computation of 7 references, err: [Inf, 0.2431196613702923, 0.1736006839442998, 0.1569362839795649, 0.15223889550566674, 0.1511184268379584, 0.1507437423467636] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [76, 2, 0]]
** centroid: 1, normalized-entropy: 0.17203694935311387, [(1, 76), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 33, 13]]
** centroid: 2, normalized-entropy: 0.8589810370425965, [(2, 33), (3, 13)]
*** center 3: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [42, 3, 0]]
** centroid: 4, normalized-entropy: 0.3533593350214213, [(1, 42), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [9, 58, 0]]
** centroid: 5, normalized-entropy: 0.569190343735683, [(1, 9), (2, 58)]
*** center 6: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 78, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17992952921241523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17992952921241523, 0.1612500940216705] ***
*** starting iteration: 2; err: [Inf, 0.17992952921241523, 0.1612500940216705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17992952921241523, 0.1612500940216705, 0.1535101230442524] ***
*** starting iteration: 3; err: [Inf, 0.17992952921241523, 0.1612500940216705, 0.1535101230442524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17992952921241523, 0.1612500940216705, 0.1535101230442524, 0.15079565882589668] ***
*** starting iteration: 4; err: [Inf, 0.17992952921241523, 0.1612500940216705, 0.1535101230442524, 0.15079565882589668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17992952921241523, 0.1612500940216705, 0.1535101230442524, 0.15079565882589668, 0.14962024687137454] ***
*** starting iteration: 5; err: [Inf, 0.17992952921241523, 0.1612500940216705, 0.1535101230442524, 0.15079565882589668, 0.14962024687137454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17992952921241523, 0.1612500940216705, 0.1535101230442524, 0.15079565882589668, 0.14962024687137454, 0.14909534774301575] ***
*** finished computation of 7 references, err: [Inf, 0.17992952921241523, 0.1612500940216705, 0.1535101230442524, 0.15079565882589668, 0.14962024687137454, 0.14909534774301575] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 53, 16]]
** centroid: 1, normalized-entropy: 0.7812812090702043, [(2, 53), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 1, 0]]
** centroid: 2, normalized-entropy: 0.11190990870168394, [(1, 66), (2, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [22, 48, 0]]
** centroid: 3, normalized-entropy: 0.8980587934501658, [(1, 22), (2, 48)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [1, 61, 0]]
** centroid: 4, normalized-entropy: 0.11911602665564841, [(1, 1), (2, 61)]
*** center 5: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [76, 3, 0]]
** centroid: 7, normalized-entropy: 0.23292785546981223, [(1, 76), (2, 3)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20982499627768994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20982499627768994, 0.15754863376356662] ***
*** starting iteration: 2; err: [Inf, 0.20982499627768994, 0.15754863376356662] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20982499627768994, 0.15754863376356662, 0.15135267392359675] ***
*** starting iteration: 3; err: [Inf, 0.20982499627768994, 0.15754863376356662, 0.15135267392359675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20982499627768994, 0.15754863376356662, 0.15135267392359675, 0.15096968826605006] ***
*** finished computation of 7 references, err: [Inf, 0.20982499627768994, 0.15754863376356662, 0.15135267392359675, 0.15096968826605006] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 48, 12]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 48), (3, 12)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 55, 4]]
** centroid: 2, normalized-entropy: 0.3576467062456333, [(2, 55), (3, 4)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [87, 3, 0]]
** centroid: 3, normalized-entropy: 0.2108423003185322, [(1, 87), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [69, 2, 0]]
** centroid: 4, normalized-entropy: 0.18512476010054582, [(1, 69), (2, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [23, 50, 0]]
** centroid: 6, normalized-entropy: 0.8989377852081333, [(1, 23), (2, 50)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [51, 9, 0]]
** centroid: 7, normalized-entropy: 0.6098403047164005, [(1, 51), (2, 9)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1719720448628068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1719720448628068, 0.15137487281300127] ***
*** starting iteration: 2; err: [Inf, 0.1719720448628068, 0.15137487281300127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1719720448628068, 0.15137487281300127, 0.1498741805870086] ***
*** starting iteration: 3; err: [Inf, 0.1719720448628068, 0.15137487281300127, 0.1498741805870086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1719720448628068, 0.15137487281300127, 0.1498741805870086, 0.14930883095320313] ***
*** finished computation of 7 references, err: [Inf, 0.1719720448628068, 0.15137487281300127, 0.1498741805870086, 0.14930883095320313] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [20, 40, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 20), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 24, 0]]
** centroid: 2, normalized-entropy: 0.8497511372532974, [(1, 63), (2, 24)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 31, 15]]
** centroid: 3, normalized-entropy: 0.9108783787500366, [(2, 31), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 67, 0]]
** centroid: 6, normalized-entropy: 0.11058084476988722, [(1, 1), (2, 67)]
*** center 7: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1828334746044129] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1828334746044129, 0.14996657590311951] ***
*** starting iteration: 2; err: [Inf, 0.1828334746044129, 0.14996657590311951] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1828334746044129, 0.14996657590311951, 0.14709428693447263] ***
*** starting iteration: 3; err: [Inf, 0.1828334746044129, 0.14996657590311951, 0.14709428693447263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1828334746044129, 0.14996657590311951, 0.14709428693447263, 0.14595183647656812] ***
*** starting iteration: 4; err: [Inf, 0.1828334746044129, 0.14996657590311951, 0.14709428693447263, 0.14595183647656812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1828334746044129, 0.14996657590311951, 0.14709428693447263, 0.14595183647656812, 0.14541997872665524] ***
*** finished computation of 7 references, err: [Inf, 0.1828334746044129, 0.14996657590311951, 0.14709428693447263, 0.14595183647656812, 0.14541997872665524] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [80, 31, 0]]
** centroid: 1, normalized-entropy: 0.8544669184854021, [(1, 80), (2, 31)]
*** center 2: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 11, 0]]
** centroid: 3, normalized-entropy: 0.693965967334286, [(1, 48), (2, 11)]
*** center 4: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 53, 20]]
** centroid: 5, normalized-entropy: 0.847107490529376, [(2, 53), (3, 20)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 57, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [69, 12, 0]]
** centroid: 7, normalized-entropy: 0.6051865766334207, [(1, 69), (2, 12)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20403292952105404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20403292952105404, 0.16049722702242433] ***
*** starting iteration: 2; err: [Inf, 0.20403292952105404, 0.16049722702242433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20403292952105404, 0.16049722702242433, 0.15266845710901544] ***
*** starting iteration: 3; err: [Inf, 0.20403292952105404, 0.16049722702242433, 0.15266845710901544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20403292952105404, 0.16049722702242433, 0.15266845710901544, 0.1522714686426334] ***
*** finished computation of 7 references, err: [Inf, 0.20403292952105404, 0.16049722702242433, 0.15266845710901544, 0.1522714686426334] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [47, 25, 0]]
** centroid: 1, normalized-entropy: 0.9315627684809641, [(1, 47), (2, 25)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 44, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [65, 5, 0]]
** centroid: 5, normalized-entropy: 0.3712323266408756, [(1, 65), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [18, 45, 0]]
** centroid: 6, normalized-entropy: 0.8631205685666311, [(1, 18), (2, 45)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 51, 13]]
** centroid: 7, normalized-entropy: 0.7281342378690551, [(2, 51), (3, 13)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18410568168386818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18410568168386818, 0.15255057493661298] ***
*** starting iteration: 2; err: [Inf, 0.18410568168386818, 0.15255057493661298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18410568168386818, 0.15255057493661298, 0.1500872486140579] ***
*** starting iteration: 3; err: [Inf, 0.18410568168386818, 0.15255057493661298, 0.1500872486140579] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18410568168386818, 0.15255057493661298, 0.1500872486140579, 0.14909468598663808] ***
*** finished computation of 7 references, err: [Inf, 0.18410568168386818, 0.15255057493661298, 0.1500872486140579, 0.14909468598663808] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [5, 63, 0]]
** centroid: 1, normalized-entropy: 0.378958787501346, [(1, 5), (2, 63)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [65, 11, 0]]
** centroid: 2, normalized-entropy: 0.5965109917085881, [(1, 65), (2, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 7, 0]]
** centroid: 4, normalized-entropy: 0.5032583347756457, [(1, 56), (2, 7)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 58, 16]]
** centroid: 5, normalized-entropy: 0.7531979910695015, [(2, 58), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [33, 37, 0]]
** centroid: 6, normalized-entropy: 0.9976432959863935, [(1, 33), (2, 37)]
*** center 7: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2630112545788288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2630112545788288, 0.16403561664000155] ***
*** starting iteration: 2; err: [Inf, 0.2630112545788288, 0.16403561664000155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2630112545788288, 0.16403561664000155, 0.15644966839347035] ***
*** starting iteration: 3; err: [Inf, 0.2630112545788288, 0.16403561664000155, 0.15644966839347035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2630112545788288, 0.16403561664000155, 0.15644966839347035, 0.1529012919794768] ***
*** starting iteration: 4; err: [Inf, 0.2630112545788288, 0.16403561664000155, 0.15644966839347035, 0.1529012919794768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2630112545788288, 0.16403561664000155, 0.15644966839347035, 0.1529012919794768, 0.15111299940012396] ***
*** starting iteration: 5; err: [Inf, 0.2630112545788288, 0.16403561664000155, 0.15644966839347035, 0.1529012919794768, 0.15111299940012396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2630112545788288, 0.16403561664000155, 0.15644966839347035, 0.1529012919794768, 0.15111299940012396, 0.15019816302135586] ***
*** finished computation of 7 references, err: [Inf, 0.2630112545788288, 0.16403561664000155, 0.15644966839347035, 0.1529012919794768, 0.15111299940012396, 0.15019816302135586] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 84, 19]]
** centroid: 1, normalized-entropy: 0.6897501750585195, [(2, 84), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [39, 34, 0]]
** centroid: 2, normalized-entropy: 0.9966132830150962, [(1, 39), (2, 34)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [66, 1, 0]]
** centroid: 3, normalized-entropy: 0.11190990870168394, [(1, 66), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [26, 42, 0]]
** centroid: 4, normalized-entropy: 0.9596868937742168, [(1, 26), (2, 42)]
*** center 5: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [58, 12, 0]]
** centroid: 7, normalized-entropy: 0.6609623351442084, [(1, 58), (2, 12)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17728659223206342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17728659223206342, 0.15342575536668301] ***
*** starting iteration: 2; err: [Inf, 0.17728659223206342, 0.15342575536668301] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17728659223206342, 0.15342575536668301, 0.14873261209204794] ***
*** starting iteration: 3; err: [Inf, 0.17728659223206342, 0.15342575536668301, 0.14873261209204794] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17728659223206342, 0.15342575536668301, 0.14873261209204794, 0.14706508980458602] ***
*** starting iteration: 4; err: [Inf, 0.17728659223206342, 0.15342575536668301, 0.14873261209204794, 0.14706508980458602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17728659223206342, 0.15342575536668301, 0.14873261209204794, 0.14706508980458602, 0.14670731277950108] ***
*** finished computation of 7 references, err: [Inf, 0.17728659223206342, 0.15342575536668301, 0.14873261209204794, 0.14706508980458602, 0.14670731277950108] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [4, 57, 0]]
** centroid: 1, normalized-entropy: 0.34918437350730797, [(1, 4), (2, 57)]
*** center 2: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 51, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [80, 6, 0]]
** centroid: 5, normalized-entropy: 0.3650551896402848, [(1, 80), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [35, 25, 0]]
** centroid: 6, normalized-entropy: 0.9798687566511527, [(1, 35), (2, 25)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 33, 15]]
** centroid: 7, normalized-entropy: 0.8960382325345574, [(2, 33), (3, 15)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20687076014932246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20687076014932246, 0.16273058956256137] ***
*** starting iteration: 2; err: [Inf, 0.20687076014932246, 0.16273058956256137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20687076014932246, 0.16273058956256137, 0.15437197816558182] ***
*** starting iteration: 3; err: [Inf, 0.20687076014932246, 0.16273058956256137, 0.15437197816558182] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20687076014932246, 0.16273058956256137, 0.15437197816558182, 0.15238952868711203] ***
*** starting iteration: 4; err: [Inf, 0.20687076014932246, 0.16273058956256137, 0.15437197816558182, 0.15238952868711203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20687076014932246, 0.16273058956256137, 0.15437197816558182, 0.15238952868711203, 0.15161442757770419] ***
*** finished computation of 7 references, err: [Inf, 0.20687076014932246, 0.16273058956256137, 0.15437197816558182, 0.15238952868711203, 0.15161442757770419] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [40, 25, 0]]
** centroid: 1, normalized-entropy: 0.961236604722876, [(1, 40), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [52, 30, 0]]
** centroid: 2, normalized-entropy: 0.9474351361840305, [(1, 52), (2, 30)]
*** center 3: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [63, 22, 0]]
** centroid: 4, normalized-entropy: 0.8249658680139929, [(1, 63), (2, 22)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 88, 15]]
** centroid: 5, normalized-entropy: 0.5987981837442868, [(2, 88), (3, 15)]
*** center 6: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22897514821588993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22897514821588993, 0.16141204796358943] ***
*** starting iteration: 2; err: [Inf, 0.22897514821588993, 0.16141204796358943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22897514821588993, 0.16141204796358943, 0.15458849191479385] ***
*** starting iteration: 3; err: [Inf, 0.22897514821588993, 0.16141204796358943, 0.15458849191479385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22897514821588993, 0.16141204796358943, 0.15458849191479385, 0.15201669683214278] ***
*** starting iteration: 4; err: [Inf, 0.22897514821588993, 0.16141204796358943, 0.15458849191479385, 0.15201669683214278] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22897514821588993, 0.16141204796358943, 0.15458849191479385, 0.15201669683214278, 0.15141947405785322] ***
*** finished computation of 7 references, err: [Inf, 0.22897514821588993, 0.16141204796358943, 0.15458849191479385, 0.15201669683214278, 0.15141947405785322] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 42, 16]]
** centroid: 1, normalized-entropy: 0.8497511372532974, [(2, 42), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [64, 6, 0]]
** centroid: 3, normalized-entropy: 0.4220005168831531, [(1, 64), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [25, 54, 0]]
** centroid: 4, normalized-entropy: 0.9004854334784268, [(1, 25), (2, 54)]
*** center 5: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [8, 70, 0]]
** centroid: 7, normalized-entropy: 0.4770713062193298, [(1, 8), (2, 70)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21074841410666703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21074841410666703, 0.1582808284740895] ***
*** starting iteration: 2; err: [Inf, 0.21074841410666703, 0.1582808284740895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21074841410666703, 0.1582808284740895, 0.15147134516015648] ***
*** starting iteration: 3; err: [Inf, 0.21074841410666703, 0.1582808284740895, 0.15147134516015648] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21074841410666703, 0.1582808284740895, 0.15147134516015648, 0.1490674398969859] ***
*** starting iteration: 4; err: [Inf, 0.21074841410666703, 0.1582808284740895, 0.15147134516015648, 0.1490674398969859] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21074841410666703, 0.1582808284740895, 0.15147134516015648, 0.1490674398969859, 0.14801504838932306] ***
*** starting iteration: 5; err: [Inf, 0.21074841410666703, 0.1582808284740895, 0.15147134516015648, 0.1490674398969859, 0.14801504838932306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21074841410666703, 0.1582808284740895, 0.15147134516015648, 0.1490674398969859, 0.14801504838932306, 0.14735887311398982] ***
*** finished computation of 7 references, err: [Inf, 0.21074841410666703, 0.1582808284740895, 0.15147134516015648, 0.1490674398969859, 0.14801504838932306, 0.14735887311398982] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [93, 2, 0]]
** centroid: 1, normalized-entropy: 0.14731066693045392, [(1, 93), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 34, 17]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 34), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [2, 74, 0]]
** centroid: 3, normalized-entropy: 0.17556502585750275, [(1, 2), (2, 74)]
*** center 4: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 51, 0]]
** centroid: 6, normalized-entropy: 0.3095434291503252, [(1, 3), (2, 51)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [46, 4, 0]]
** centroid: 7, normalized-entropy: 0.4021791902022729, [(1, 46), (2, 4)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18504709428735078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18504709428735078, 0.15784190922346897] ***
*** starting iteration: 2; err: [Inf, 0.18504709428735078, 0.15784190922346897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18504709428735078, 0.15784190922346897, 0.15391085368394852] ***
*** starting iteration: 3; err: [Inf, 0.18504709428735078, 0.15784190922346897, 0.15391085368394852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18504709428735078, 0.15784190922346897, 0.15391085368394852, 0.1517567909359932] ***
*** starting iteration: 4; err: [Inf, 0.18504709428735078, 0.15784190922346897, 0.15391085368394852, 0.1517567909359932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18504709428735078, 0.15784190922346897, 0.15391085368394852, 0.1517567909359932, 0.15093222460802644] ***
*** finished computation of 7 references, err: [Inf, 0.18504709428735078, 0.15784190922346897, 0.15391085368394852, 0.1517567909359932, 0.15093222460802644] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [57, 1, 0]]
** centroid: 1, normalized-entropy: 0.12565805017256745, [(1, 57), (2, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [4, 57, 0]]
** centroid: 4, normalized-entropy: 0.34918437350730797, [(1, 4), (2, 57)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [54, 16, 0]]
** centroid: 5, normalized-entropy: 0.775512658133148, [(1, 54), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [44, 38, 0]]
** centroid: 6, normalized-entropy: 0.9961344835095798, [(1, 44), (2, 38)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 56, 20]]
** centroid: 7, normalized-entropy: 0.8314743880097292, [(2, 56), (3, 20)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19682121596299113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19682121596299113, 0.1660363240484148] ***
*** starting iteration: 2; err: [Inf, 0.19682121596299113, 0.1660363240484148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19682121596299113, 0.1660363240484148, 0.15908903275523334] ***
*** starting iteration: 3; err: [Inf, 0.19682121596299113, 0.1660363240484148, 0.15908903275523334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19682121596299113, 0.1660363240484148, 0.15908903275523334, 0.1542406570557505] ***
*** starting iteration: 4; err: [Inf, 0.19682121596299113, 0.1660363240484148, 0.15908903275523334, 0.1542406570557505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19682121596299113, 0.1660363240484148, 0.15908903275523334, 0.1542406570557505, 0.15068879225663842] ***
*** starting iteration: 5; err: [Inf, 0.19682121596299113, 0.1660363240484148, 0.15908903275523334, 0.1542406570557505, 0.15068879225663842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19682121596299113, 0.1660363240484148, 0.15908903275523334, 0.1542406570557505, 0.15068879225663842, 0.1487755068205297] ***
*** starting iteration: 6; err: [Inf, 0.19682121596299113, 0.1660363240484148, 0.15908903275523334, 0.1542406570557505, 0.15068879225663842, 0.1487755068205297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19682121596299113, 0.1660363240484148, 0.15908903275523334, 0.1542406570557505, 0.15068879225663842, 0.1487755068205297, 0.1480359035860747] ***
*** finished computation of 7 references, err: [Inf, 0.19682121596299113, 0.1660363240484148, 0.15908903275523334, 0.1542406570557505, 0.15068879225663842, 0.1487755068205297, 0.1480359035860747] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 61, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [33, 25, 0]]
** centroid: 3, normalized-entropy: 0.9862325350724501, [(1, 33), (2, 25)]
*** center 4: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [46, 20, 0]]
** centroid: 5, normalized-entropy: 0.8849636363831529, [(1, 46), (2, 20)]
*** center 6: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 55, 14]]
** centroid: 7, normalized-entropy: 0.7276874545656657, [(2, 55), (3, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2045769612826407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2045769612826407, 0.15595955402590334] ***
*** starting iteration: 2; err: [Inf, 0.2045769612826407, 0.15595955402590334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2045769612826407, 0.15595955402590334, 0.1531893418239197] ***
*** starting iteration: 3; err: [Inf, 0.2045769612826407, 0.15595955402590334, 0.1531893418239197] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2045769612826407, 0.15595955402590334, 0.1531893418239197, 0.15169703359436243] ***
*** starting iteration: 4; err: [Inf, 0.2045769612826407, 0.15595955402590334, 0.1531893418239197, 0.15169703359436243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2045769612826407, 0.15595955402590334, 0.1531893418239197, 0.15169703359436243, 0.14980845571309329] ***
*** starting iteration: 5; err: [Inf, 0.2045769612826407, 0.15595955402590334, 0.1531893418239197, 0.15169703359436243, 0.14980845571309329] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2045769612826407, 0.15595955402590334, 0.1531893418239197, 0.15169703359436243, 0.14980845571309329, 0.14820024344790728] ***
*** starting iteration: 6; err: [Inf, 0.2045769612826407, 0.15595955402590334, 0.1531893418239197, 0.15169703359436243, 0.14980845571309329, 0.14820024344790728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2045769612826407, 0.15595955402590334, 0.1531893418239197, 0.15169703359436243, 0.14980845571309329, 0.14820024344790728, 0.1474057183302939] ***
*** finished computation of 7 references, err: [Inf, 0.2045769612826407, 0.15595955402590334, 0.1531893418239197, 0.15169703359436243, 0.14980845571309329, 0.14820024344790728, 0.1474057183302939] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [60, 30, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 60), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [35, 12, 0]]
** centroid: 2, normalized-entropy: 0.8196004346196011, [(1, 35), (2, 12)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [19, 56, 0]]
** centroid: 3, normalized-entropy: 0.8165187119538281, [(1, 19), (2, 56)]
*** center 4: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 58, 16]]
** centroid: 5, normalized-entropy: 0.7531979910695015, [(2, 58), (3, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20190376493614168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20190376493614168, 0.1599371437728405] ***
*** starting iteration: 2; err: [Inf, 0.20190376493614168, 0.1599371437728405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20190376493614168, 0.1599371437728405, 0.15262602171674372] ***
*** starting iteration: 3; err: [Inf, 0.20190376493614168, 0.1599371437728405, 0.15262602171674372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20190376493614168, 0.1599371437728405, 0.15262602171674372, 0.15164338184637016] ***
*** finished computation of 7 references, err: [Inf, 0.20190376493614168, 0.1599371437728405, 0.15262602171674372, 0.15164338184637016] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [13, 53, 0]]
** centroid: 1, normalized-entropy: 0.7158259310602146, [(1, 13), (2, 53)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [24, 61, 0]]
** centroid: 2, normalized-entropy: 0.8586370819183629, [(1, 24), (2, 61)]
*** center 3: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 51, 17]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(2, 51), (3, 17)]
*** center 5: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [44, 18, 0]]
** centroid: 6, normalized-entropy: 0.8691375806126381, [(1, 44), (2, 18)]
*** center 7: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2312227721111849] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2312227721111849, 0.1681626219358295] ***
*** starting iteration: 2; err: [Inf, 0.2312227721111849, 0.1681626219358295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2312227721111849, 0.1681626219358295, 0.15549792024306952] ***
*** starting iteration: 3; err: [Inf, 0.2312227721111849, 0.1681626219358295, 0.15549792024306952] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2312227721111849, 0.1681626219358295, 0.15549792024306952, 0.1514835117198527] ***
*** starting iteration: 4; err: [Inf, 0.2312227721111849, 0.1681626219358295, 0.15549792024306952, 0.1514835117198527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2312227721111849, 0.1681626219358295, 0.15549792024306952, 0.1514835117198527, 0.1502121062213555] ***
*** starting iteration: 5; err: [Inf, 0.2312227721111849, 0.1681626219358295, 0.15549792024306952, 0.1514835117198527, 0.1502121062213555] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2312227721111849, 0.1681626219358295, 0.15549792024306952, 0.1514835117198527, 0.1502121062213555, 0.1493937929319218] ***
*** finished computation of 7 references, err: [Inf, 0.2312227721111849, 0.1681626219358295, 0.15549792024306952, 0.1514835117198527, 0.1502121062213555, 0.1493937929319218] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [51, 12, 0]]
** centroid: 1, normalized-entropy: 0.7024665512903904, [(1, 51), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [75, 12, 0]]
** centroid: 2, normalized-entropy: 0.5787946246321198, [(1, 75), (2, 12)]
*** center 3: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [77, 18, 0]]
** centroid: 4, normalized-entropy: 0.7003691487575897, [(1, 77), (2, 18)]
*** center 5: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 71, 7]]
** centroid: 6, normalized-entropy: 0.4356133734874324, [(2, 71), (3, 7)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 63, 9]]
** centroid: 7, normalized-entropy: 0.5435644431995963, [(2, 63), (3, 9)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.15344318294478582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.15344318294478582, 0.14604472015425563] ***
*** starting iteration: 2; err: [Inf, 0.15344318294478582, 0.14604472015425563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.15344318294478582, 0.14604472015425563, 0.1436733257956803] ***
*** starting iteration: 3; err: [Inf, 0.15344318294478582, 0.14604472015425563, 0.1436733257956803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.15344318294478582, 0.14604472015425563, 0.1436733257956803, 0.14261086816713214] ***
*** starting iteration: 4; err: [Inf, 0.15344318294478582, 0.14604472015425563, 0.1436733257956803, 0.14261086816713214] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.15344318294478582, 0.14604472015425563, 0.1436733257956803, 0.14261086816713214, 0.14218340618396177] ***
*** finished computation of 7 references, err: [Inf, 0.15344318294478582, 0.14604472015425563, 0.1436733257956803, 0.14261086816713214, 0.14218340618396177] ***
*** center 1: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 54, 3]]
** centroid: 2, normalized-entropy: 0.2974722489192896, [(2, 54), (3, 3)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [62, 12, 0]]
** centroid: 3, normalized-entropy: 0.6394571324851642, [(1, 62), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [75, 19, 0]]
** centroid: 4, normalized-entropy: 0.7261630586710504, [(1, 75), (2, 19)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 53, 10]]
** centroid: 5, normalized-entropy: 0.6312630180916119, [(2, 53), (3, 10)]
*** center 6: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [40, 23, 0]]
** centroid: 7, normalized-entropy: 0.9468188316776024, [(1, 40), (2, 23)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19289806916192173] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19289806916192173, 0.15085685497708617] ***
*** starting iteration: 2; err: [Inf, 0.19289806916192173, 0.15085685497708617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19289806916192173, 0.15085685497708617, 0.1472469290625304] ***
*** starting iteration: 3; err: [Inf, 0.19289806916192173, 0.15085685497708617, 0.1472469290625304] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19289806916192173, 0.15085685497708617, 0.1472469290625304, 0.14649683772586286] ***
*** finished computation of 7 references, err: [Inf, 0.19289806916192173, 0.15085685497708617, 0.1472469290625304, 0.14649683772586286] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [41, 18, 0]]
** centroid: 1, normalized-entropy: 0.8874179270685693, [(1, 41), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 2, 0]]
** centroid: 2, normalized-entropy: 0.2108423003185322, [(1, 58), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 49, 19]]
** centroid: 3, normalized-entropy: 0.8546480601169081, [(2, 49), (3, 19)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 22, 0]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(1, 66), (2, 22)]
*** center 5: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 76, 0]]
** centroid: 7, normalized-entropy: 0.17203694935311387, [(1, 2), (2, 76)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19171458205161615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19171458205161615, 0.1620694021191448] ***
*** starting iteration: 2; err: [Inf, 0.19171458205161615, 0.1620694021191448] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19171458205161615, 0.1620694021191448, 0.15385230557620524] ***
*** starting iteration: 3; err: [Inf, 0.19171458205161615, 0.1620694021191448, 0.15385230557620524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19171458205161615, 0.1620694021191448, 0.15385230557620524, 0.15181374723277985] ***
*** starting iteration: 4; err: [Inf, 0.19171458205161615, 0.1620694021191448, 0.15385230557620524, 0.15181374723277985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19171458205161615, 0.1620694021191448, 0.15385230557620524, 0.15181374723277985, 0.15020070552267134] ***
*** starting iteration: 5; err: [Inf, 0.19171458205161615, 0.1620694021191448, 0.15385230557620524, 0.15181374723277985, 0.15020070552267134] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19171458205161615, 0.1620694021191448, 0.15385230557620524, 0.15181374723277985, 0.15020070552267134, 0.1484820966841653] ***
*** starting iteration: 6; err: [Inf, 0.19171458205161615, 0.1620694021191448, 0.15385230557620524, 0.15181374723277985, 0.15020070552267134, 0.1484820966841653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19171458205161615, 0.1620694021191448, 0.15385230557620524, 0.15181374723277985, 0.15020070552267134, 0.1484820966841653, 0.14751228617690504] ***
*** finished computation of 7 references, err: [Inf, 0.19171458205161615, 0.1620694021191448, 0.15385230557620524, 0.15181374723277985, 0.15020070552267134, 0.1484820966841653, 0.14751228617690504] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [3, 66, 0]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(1, 3), (2, 66)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [44, 26, 0]]
** centroid: 2, normalized-entropy: 0.9517626756348312, [(1, 44), (2, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 11, 0]]
** centroid: 5, normalized-entropy: 0.6220403090607189, [(1, 60), (2, 11)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 63, 15]]
** centroid: 6, normalized-entropy: 0.7062740891876008, [(2, 63), (3, 15)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [68, 13, 0]]
** centroid: 7, normalized-entropy: 0.635489638182683, [(1, 68), (2, 13)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17521926676575095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17521926676575095, 0.153318609084934] ***
*** starting iteration: 2; err: [Inf, 0.17521926676575095, 0.153318609084934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17521926676575095, 0.153318609084934, 0.15169748824089765] ***
*** starting iteration: 3; err: [Inf, 0.17521926676575095, 0.153318609084934, 0.15169748824089765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17521926676575095, 0.153318609084934, 0.15169748824089765, 0.1508068909049034] ***
*** finished computation of 7 references, err: [Inf, 0.17521926676575095, 0.153318609084934, 0.15169748824089765, 0.1508068909049034] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [80, 6, 0]]
** centroid: 1, normalized-entropy: 0.3650551896402848, [(1, 80), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 49, 16]]
** centroid: 2, normalized-entropy: 0.8051250074646822, [(2, 49), (3, 16)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [80, 17, 0]]
** centroid: 5, normalized-entropy: 0.6695920597928519, [(1, 80), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [6, 39, 0]]
** centroid: 6, normalized-entropy: 0.5665095065529052, [(1, 6), (2, 39)]
*** center 7: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2575066494140774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2575066494140774, 0.17045357163622976] ***
*** starting iteration: 2; err: [Inf, 0.2575066494140774, 0.17045357163622976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2575066494140774, 0.17045357163622976, 0.15902554379217326] ***
*** starting iteration: 3; err: [Inf, 0.2575066494140774, 0.17045357163622976, 0.15902554379217326] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2575066494140774, 0.17045357163622976, 0.15902554379217326, 0.1555477753933519] ***
*** starting iteration: 4; err: [Inf, 0.2575066494140774, 0.17045357163622976, 0.15902554379217326, 0.1555477753933519] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2575066494140774, 0.17045357163622976, 0.15902554379217326, 0.1555477753933519, 0.15363618344813584] ***
*** starting iteration: 5; err: [Inf, 0.2575066494140774, 0.17045357163622976, 0.15902554379217326, 0.1555477753933519, 0.15363618344813584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2575066494140774, 0.17045357163622976, 0.15902554379217326, 0.1555477753933519, 0.15363618344813584, 0.1523841172121465] ***
*** starting iteration: 6; err: [Inf, 0.2575066494140774, 0.17045357163622976, 0.15902554379217326, 0.1555477753933519, 0.15363618344813584, 0.1523841172121465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2575066494140774, 0.17045357163622976, 0.15902554379217326, 0.1555477753933519, 0.15363618344813584, 0.1523841172121465, 0.15174204678833483] ***
*** finished computation of 7 references, err: [Inf, 0.2575066494140774, 0.17045357163622976, 0.15902554379217326, 0.1555477753933519, 0.15363618344813584, 0.1523841172121465, 0.15174204678833483] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 34, 19]]
** centroid: 1, normalized-entropy: 0.9414231081869789, [(2, 34), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [1, 47, 0]]
** centroid: 4, normalized-entropy: 0.14609425012013613, [(1, 1), (2, 47)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [15, 53, 0]]
** centroid: 5, normalized-entropy: 0.7612401496918493, [(1, 15), (2, 53)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [51, 5, 0]]
** centroid: 6, normalized-entropy: 0.4340811200043348, [(1, 51), (2, 5)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [74, 24, 0]]
** centroid: 7, normalized-entropy: 0.8030909760146977, [(1, 74), (2, 24)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21003872750140726] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21003872750140726, 0.1736566811632365] ***
*** starting iteration: 2; err: [Inf, 0.21003872750140726, 0.1736566811632365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21003872750140726, 0.1736566811632365, 0.1591611340958625] ***
*** starting iteration: 3; err: [Inf, 0.21003872750140726, 0.1736566811632365, 0.1591611340958625] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21003872750140726, 0.1736566811632365, 0.1591611340958625, 0.15180233314842917] ***
*** starting iteration: 4; err: [Inf, 0.21003872750140726, 0.1736566811632365, 0.1591611340958625, 0.15180233314842917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21003872750140726, 0.1736566811632365, 0.1591611340958625, 0.15180233314842917, 0.14919736334867775] ***
*** starting iteration: 5; err: [Inf, 0.21003872750140726, 0.1736566811632365, 0.1591611340958625, 0.15180233314842917, 0.14919736334867775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21003872750140726, 0.1736566811632365, 0.1591611340958625, 0.15180233314842917, 0.14919736334867775, 0.1483099795412272] ***
*** finished computation of 7 references, err: [Inf, 0.21003872750140726, 0.1736566811632365, 0.1591611340958625, 0.15180233314842917, 0.14919736334867775, 0.1483099795412272] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [58, 4, 0]]
** centroid: 1, normalized-entropy: 0.3451173149449528, [(1, 58), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 91, 14]]
** centroid: 2, normalized-entropy: 0.5665095065529052, [(2, 91), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 30, 0]]
** centroid: 3, normalized-entropy: 0.961236604722876, [(1, 48), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [25, 40, 0]]
** centroid: 4, normalized-entropy: 0.961236604722876, [(1, 25), (2, 40)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 6, 0]]
** centroid: 5, normalized-entropy: 0.39481484603049416, [(1, 71), (2, 6)]
*** center 6: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20510219669155777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20510219669155777, 0.16808418651856483] ***
*** starting iteration: 2; err: [Inf, 0.20510219669155777, 0.16808418651856483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20510219669155777, 0.16808418651856483, 0.15885884197987615] ***
*** starting iteration: 3; err: [Inf, 0.20510219669155777, 0.16808418651856483, 0.15885884197987615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20510219669155777, 0.16808418651856483, 0.15885884197987615, 0.1560769924595952] ***
*** starting iteration: 4; err: [Inf, 0.20510219669155777, 0.16808418651856483, 0.15885884197987615, 0.1560769924595952] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20510219669155777, 0.16808418651856483, 0.15885884197987615, 0.1560769924595952, 0.15440583497658372] ***
*** starting iteration: 5; err: [Inf, 0.20510219669155777, 0.16808418651856483, 0.15885884197987615, 0.1560769924595952, 0.15440583497658372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20510219669155777, 0.16808418651856483, 0.15885884197987615, 0.1560769924595952, 0.15440583497658372, 0.15368567208573222] ***
*** finished computation of 7 references, err: [Inf, 0.20510219669155777, 0.16808418651856483, 0.15885884197987615, 0.1560769924595952, 0.15440583497658372, 0.15368567208573222] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 44, 16]]
** centroid: 1, normalized-entropy: 0.8366407419411671, [(2, 44), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [18, 38, 0]]
** centroid: 2, normalized-entropy: 0.9059282160429994, [(1, 18), (2, 38)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [78, 1, 0]]
** centroid: 3, normalized-entropy: 0.09794058271817412, [(1, 78), (2, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 55, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [89, 24, 0]]
** centroid: 5, normalized-entropy: 0.7460251980495494, [(1, 89), (2, 24)]
*** center 6: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21509187158779242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21509187158779242, 0.16747725834324956] ***
*** starting iteration: 2; err: [Inf, 0.21509187158779242, 0.16747725834324956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21509187158779242, 0.16747725834324956, 0.1552971349582076] ***
*** starting iteration: 3; err: [Inf, 0.21509187158779242, 0.16747725834324956, 0.1552971349582076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21509187158779242, 0.16747725834324956, 0.1552971349582076, 0.15060965215694158] ***
*** starting iteration: 4; err: [Inf, 0.21509187158779242, 0.16747725834324956, 0.1552971349582076, 0.15060965215694158] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21509187158779242, 0.16747725834324956, 0.1552971349582076, 0.15060965215694158, 0.14891016832366585] ***
*** starting iteration: 5; err: [Inf, 0.21509187158779242, 0.16747725834324956, 0.1552971349582076, 0.15060965215694158, 0.14891016832366585] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21509187158779242, 0.16747725834324956, 0.1552971349582076, 0.15060965215694158, 0.14891016832366585, 0.14771536369994281] ***
*** starting iteration: 6; err: [Inf, 0.21509187158779242, 0.16747725834324956, 0.1552971349582076, 0.15060965215694158, 0.14891016832366585, 0.14771536369994281] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21509187158779242, 0.16747725834324956, 0.1552971349582076, 0.15060965215694158, 0.14891016832366585, 0.14771536369994281, 0.14681593470834195] ***
*** finished computation of 7 references, err: [Inf, 0.21509187158779242, 0.16747725834324956, 0.1552971349582076, 0.15060965215694158, 0.14891016832366585, 0.14771536369994281, 0.14681593470834195] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [30, 41, 0]]
** centroid: 1, normalized-entropy: 0.9826154285526119, [(1, 30), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [4, 64, 0]]
** centroid: 2, normalized-entropy: 0.32275695889739825, [(1, 4), (2, 64)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 48, 21]]
** centroid: 3, normalized-entropy: 0.8865408928220899, [(2, 48), (3, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 1, 0]]
** centroid: 4, normalized-entropy: 0.1274185117923586, [(1, 56), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [76, 15, 0]]
** centroid: 5, normalized-entropy: 0.6457523329916605, [(1, 76), (2, 15)]
*** center 6: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29307161992788316] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29307161992788316, 0.2012440138515085] ***
*** starting iteration: 2; err: [Inf, 0.29307161992788316, 0.2012440138515085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29307161992788316, 0.2012440138515085, 0.17696556355804205] ***
*** starting iteration: 3; err: [Inf, 0.29307161992788316, 0.2012440138515085, 0.17696556355804205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29307161992788316, 0.2012440138515085, 0.17696556355804205, 0.1645458252588287] ***
*** starting iteration: 4; err: [Inf, 0.29307161992788316, 0.2012440138515085, 0.17696556355804205, 0.1645458252588287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29307161992788316, 0.2012440138515085, 0.17696556355804205, 0.1645458252588287, 0.15624349462985992] ***
*** starting iteration: 5; err: [Inf, 0.29307161992788316, 0.2012440138515085, 0.17696556355804205, 0.1645458252588287, 0.15624349462985992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29307161992788316, 0.2012440138515085, 0.17696556355804205, 0.1645458252588287, 0.15624349462985992, 0.1505422348137945] ***
*** starting iteration: 6; err: [Inf, 0.29307161992788316, 0.2012440138515085, 0.17696556355804205, 0.1645458252588287, 0.15624349462985992, 0.1505422348137945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29307161992788316, 0.2012440138515085, 0.17696556355804205, 0.1645458252588287, 0.15624349462985992, 0.1505422348137945, 0.14741333048790695] ***
*** starting iteration: 7; err: [Inf, 0.29307161992788316, 0.2012440138515085, 0.17696556355804205, 0.1645458252588287, 0.15624349462985992, 0.1505422348137945, 0.14741333048790695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29307161992788316, 0.2012440138515085, 0.17696556355804205, 0.1645458252588287, 0.15624349462985992, 0.1505422348137945, 0.14741333048790695, 0.14597134984843432] ***
*** starting iteration: 8; err: [Inf, 0.29307161992788316, 0.2012440138515085, 0.17696556355804205, 0.1645458252588287, 0.15624349462985992, 0.1505422348137945, 0.14741333048790695, 0.14597134984843432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29307161992788316, 0.2012440138515085, 0.17696556355804205, 0.1645458252588287, 0.15624349462985992, 0.1505422348137945, 0.14741333048790695, 0.14597134984843432, 0.14544429869018496] ***
*** finished computation of 7 references, err: [Inf, 0.29307161992788316, 0.2012440138515085, 0.17696556355804205, 0.1645458252588287, 0.15624349462985992, 0.1505422348137945, 0.14741333048790695, 0.14597134984843432, 0.14544429869018496] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [5, 66, 0]]
** centroid: 1, normalized-entropy: 0.3674984948272913, [(1, 5), (2, 66)]
*** center 2: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [1, 65, 0]]
** centroid: 3, normalized-entropy: 0.11327430349709665, [(1, 1), (2, 65)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 23, 16]]
** centroid: 4, normalized-entropy: 0.9766349114440099, [(2, 23), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [59, 3, 0]]
** centroid: 5, normalized-entropy: 0.2795055456366802, [(1, 59), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [67, 11, 0]]
** centroid: 6, normalized-entropy: 0.5869185834047994, [(1, 67), (2, 11)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [95, 1, 0]]
** centroid: 7, normalized-entropy: 0.08354288831032243, [(1, 95), (2, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1996830755881965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1996830755881965, 0.1552345216795802] ***
*** starting iteration: 2; err: [Inf, 0.1996830755881965, 0.1552345216795802] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1996830755881965, 0.1552345216795802, 0.15352251009643078] ***
*** starting iteration: 3; err: [Inf, 0.1996830755881965, 0.1552345216795802, 0.15352251009643078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1996830755881965, 0.1552345216795802, 0.15352251009643078, 0.15308918889425696] ***
*** finished computation of 7 references, err: [Inf, 0.1996830755881965, 0.1552345216795802, 0.15352251009643078, 0.15308918889425696] ***
*** center 1: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 63, 17]]
** centroid: 2, normalized-entropy: 0.7462343013654809, [(2, 63), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [59, 30, 0]]
** centroid: 3, normalized-entropy: 0.9219957030944405, [(1, 59), (2, 30)]
*** center 4: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [80, 4, 0]]
** centroid: 5, normalized-entropy: 0.2761954276479391, [(1, 80), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 43, 0]]
** centroid: 6, normalized-entropy: 0.6646953053493416, [(1, 9), (2, 43)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [7, 35, 0]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(1, 7), (2, 35)]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 339,3 => 33,1 => 628), Dict(2 => 372,3 => 28,1 => 600))
[ Info: ===== scores for single classifier: {"micro_f1":0.922,"precision":0.922,"recall":0.922,"macro_recall":0.9338530465949821,"macro_f1":0.8857008854540096,"accuracy":0.922,"class_f1":{"2":0.8866279069767442,"3":0.8235294117647058,"1":0.9469453376205789},"class_precision":{"2":0.9651898734177216,"3":0.7,"1":0.9145962732919255},"class_recall":{"2":0.8198924731182796,"3":1.0,"1":0.9816666666666667}}
[ Info: ===== scores for 1: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9684587813620071,"macro_f1":0.919616328042364,"accuracy":0.961,"class_f1":{"2":0.9462068965517241,"3":0.835820895522388,"1":0.9768211920529801},"class_precision":{"2":0.9716713881019831,"3":0.717948717948718,"1":0.9703947368421053},"class_recall":{"2":0.9220430107526881,"3":1.0,"1":0.9833333333333333}}
[ Info: ===== scores for 5: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.9732437275985664,"macro_f1":0.9610412824361957,"accuracy":0.969,"class_f1":{"2":0.956884561891516,"3":0.9491525423728813,"1":0.9770867430441899},"class_precision":{"2":0.9913544668587896,"3":0.9032258064516129,"1":0.9598070739549839},"class_recall":{"2":0.9247311827956989,"3":1.0,"1":0.995}}
[ Info: ===== scores for 7: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9784050179211471,"macro_f1":0.9648256678556956,"accuracy":0.974,"class_f1":{"2":0.9642857142857143,"3":0.9491525423728813,"1":0.9810387469084915},"class_precision":{"2":0.9859550561797753,"3":0.9032258064516129,"1":0.9706362153344209},"class_recall":{"2":0.9435483870967742,"3":1.0,"1":0.9916666666666667}}
[ Info: ===== scores for 9: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9763978494623656,"macro_f1":0.9481404328078961,"accuracy":0.971,"class_f1":{"2":0.9602194787379972,"3":0.9032258064516129,"1":0.9809760132340778},"class_precision":{"2":0.9803921568627451,"3":0.8235294117647058,"1":0.9737274220032841},"class_recall":{"2":0.9408602150537635,"3":1.0,"1":0.9883333333333333}}
[ Info: ===== scores for 11: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.9786559139784946,"macro_f1":0.9359083554205506,"accuracy":0.972,"class_f1":{"2":0.962059620596206,"3":0.8615384615384616,"1":0.9841269841269842},"class_precision":{"2":0.9699453551912568,"3":0.7567567567567568,"1":0.9865996649916248},"class_recall":{"2":0.9543010752688172,"3":1.0,"1":0.9816666666666667}}
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.962, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.962, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.974,"k":7,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9784050179211471,"macro_f1":0.9648256678556956,"accuracy":0.974,"class_f1":{"2":0.9642857142857143,"3":0.9491525423728813,"1":0.9810387469084915},"class_precision":{"2":0.9859550561797753,"3":0.9032258064516129,"1":0.9706362153344209},"class_recall":{"2":0.9435483870967742,"3":1.0,"1":0.9916666666666667}}
Test Summary: | Pass  Total
AKNC          |    8      8
[453, 1, 2, 2, 5, 7, 1, 1, 3, 3, 3, 1, 12, 1, 3, 4, 11, 3, 2, 3, 4, 3, 2, 9, 5, 3, 2, 5, 2, 6, 4, 14, 74, 1, 3, 6, 5, 39, 20, 1, 88, 3, 7, 2, 31, 34, 12, 15, 22, 10, 29, 11, 13, 23, 10, 10, 2, 21, 11, 6, 15, 57, 11, 6, 3, 1, 10, 20, 4, 6, 1, 9, 2, 10, 2, 7, 2, 22, 18, 10, 5, 14, 28, 54, 8, 5, 2, 4, 5, 12, 8, 2, 2, 66, 38, 4, 11, 71, 28, 15, 37, 16, 35, 55, 20, 31, 5, 13, 118, 7, 70, 12, 3, 5, 94, 25, 159, 14, 6, 29, 44, 5, 152, 33, 1, 15, 13, 75, 3, 22, 4, 8, 1, 99, 71, 2, 41, 22, 11, 9, 40, 9, 33, 21, 5, 10, 47, 7, 16, 9, 15, 40, 12, 2, 85, 7, 47, 41, 16, 15, 7, 7, 11, 133, 7, 14, 50, 59, 39, 1, 8, 53, 17, 4, 21, 6, 32, 9, 6, 15, 15, 326, 21, 12, 7, 30, 30, 11, 23, 5, 4, 13, 5, 25, 30, 33, 29, 79, 39, 41, 3, 2, 20, 287, 2, 94, 69, 19, 14, 21, 39, 25, 21, 18, 12, 186, 3, 63, 515, 12, 62, 9, 15, 127, 10, 157, 193, 53, 13, 8, 18, 15, 26, 112, 11, 81, 11, 15, 32, 12, 7, 12, 87, 5, 24, 2, 2, 33, 2, 33, 23, 24, 98, 127, 13, 12, 20, 15, 74, 33, 21, 119, 21, 16, 4, 72, 16, 29, 23, 6, 24, 21, 53, 229, 15, 100, 6, 192, 118, 86, 19, 7, 5, 30, 17, 38, 21, 19, 243, 13, 11, 45, 7, 13, 17, 8, 161, 40, 225, 13]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.653, speedup = 0.3430333219342337, eval_ratio = 0.066315)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3963975694444447,"recall":0.3845486111111113,"f1":null,"seconds":0.00015618093311786652,"exhaustive_search_seconds":0.00038764066994190216,"evaluations":456.171875,"distances_sum":1676.7100629611248}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5520833333333334,"recall":0.5520833333333334,"f1":null,"seconds":0.00024450570344924927,"exhaustive_search_seconds":0.00038764066994190216,"evaluations":567.34375,"distances_sum":1614.114014240164}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6371527777777775,"recall":0.6371527777777775,"f1":null,"seconds":0.0003042556345462799,"exhaustive_search_seconds":0.00038764066994190216,"evaluations":666.6796875,"distances_sum":1570.0297286730467}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7239583333333331,"recall":0.7239583333333331,"f1":null,"seconds":0.0003820955753326416,"exhaustive_search_seconds":0.00038764066994190216,"evaluations":774.265625,"distances_sum":1535.163961832146}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7803819444444441,"recall":0.7803819444444441,"f1":0.7803819444444441,"seconds":0.0004540737718343735,"exhaustive_search_seconds":0.00038764066994190216,"evaluations":862.734375,"distances_sum":1519.8913240139523}
KCenters.DeloneInvIndex> reached performance {"precision":0.8315972222222217,"recall":0.8315972222222217,"f1":0.8315972222222217,"seconds":0.0005458705127239227,"exhaustive_search_seconds":0.00038764066994190216,"evaluations":958.453125,"distances_sum":1507.4858674686636}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8299999999999997, speedup = 0.3906107264698751, eval_ratio = 0.094967)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
