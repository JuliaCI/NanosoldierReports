Julia Version 1.5.0-DEV.638
Commit b0f3403f06 (2020-04-16 01:02 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Compat ────────────────────── v3.8.0
  Installed TableTraits ───────────────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.1
  Installed Tables ────────────────────── v1.0.4
  Installed JSON ──────────────────────── v0.21.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed LearnBase ─────────────────── v0.2.2
  Installed Missings ──────────────────── v0.4.3
  Installed DataAPI ───────────────────── v1.1.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataValueInterfaces ───────── v1.0.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataPattern ─────────────── v0.5.1
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed DataFrames ────────────────── v0.20.2
  Installed Reexport ──────────────────── v0.2.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed DataStructures ────────────── v0.17.12
  Installed SimilaritySearch ──────────── v0.3.19
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.12
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.1
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.1
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_rnUNke/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_rnUNke/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.12
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.1
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.1
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.932025450070699
[ Info: 0.8307796732584636
[ Info: 0.5544419614970684
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33385128431022165
mean(cdnet.distances) = 0.3435162977625926
mean(crand.distances) = 0.33139372743666173
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7138671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7138671875,"f1":0.8236829143079151,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.905485987663269e-6,"evaluations":8.2578125,"distances_sum":1909.892529054618}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7138671875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.7138671875,"f1":0.8236829143079151,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.905485987663269e-6,"evaluations":8.2578125,"distances_sum":1909.892529054618}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9461767399267405,"seconds":6.290152668952942e-6,"exhaustive_search_seconds":1.905485987663269e-6,"evaluations":8.796875,"distances_sum":2574.666373327278}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9461767399267405,"seconds":6.290152668952942e-6,"exhaustive_search_seconds":1.905485987663269e-6,"evaluations":8.796875,"distances_sum":2574.666373327278}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9801911630036633,"seconds":7.115304470062256e-6,"exhaustive_search_seconds":1.905485987663269e-6,"evaluations":8.9765625,"distances_sum":2839.237227434961}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9789262820512823,"seconds":6.489455699920654e-6,"exhaustive_search_seconds":1.905485987663269e-6,"evaluations":8.9375,"distances_sum":2851.268943398425}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9613183691308698,"seconds":6.798654794692993e-6,"exhaustive_search_seconds":1.905485987663269e-6,"evaluations":8.8984375,"distances_sum":2714.837521477363}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9638671875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9801911630036633,"seconds":7.115304470062256e-6,"exhaustive_search_seconds":1.905485987663269e-6,"evaluations":8.9765625,"distances_sum":2839.237227434961}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9638671875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9801911630036633,"seconds":7.115304470062256e-6,"exhaustive_search_seconds":1.905485987663269e-6,"evaluations":8.9765625,"distances_sum":2839.237227434961}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.150390625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.150390625,"f1":null,"seconds":3.2801181077957153e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":5.421875,"distances_sum":373.4467229572323}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.169921875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.169921875,"f1":null,"seconds":3.5800039768218994e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":5.4140625,"distances_sum":419.87979926603833}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.169921875,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.169921875,"f1":null,"seconds":3.5800039768218994e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":5.4140625,"distances_sum":419.87979926603833}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.33984375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.33984375,"f1":null,"seconds":3.810971975326538e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":5.9765625,"distances_sum":794.0513733514425}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7951043747918756,"seconds":5.1781535148620605e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":7.8828125,"distances_sum":1635.1798003865088}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6728515625,"state":{"ssize":6,"bsize":4},"perf":{"precision":1.0,"recall":0.6728515625,"f1":0.7951043747918756,"seconds":5.1781535148620605e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":7.8828125,"distances_sum":1635.1798003865088}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9517971611721614,"seconds":4.0959566831588745e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":8.8125,"distances_sum":2442.284689319381}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.734375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.734375,"f1":0.838605665168166,"seconds":5.042180418968201e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":8.2265625,"distances_sum":1803.409866156139}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.798710144022645,"seconds":4.936009645462036e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":7.96875,"distances_sum":1648.7842467772332}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":10,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9517971611721614,"seconds":4.0959566831588745e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":8.8125,"distances_sum":2442.284689319381}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.916015625,"state":{"ssize":10,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9517971611721614,"seconds":4.0959566831588745e-6,"exhaustive_search_seconds":1.6391277313232422e-6,"evaluations":8.8125,"distances_sum":2442.284689319381}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8647165334665343,"seconds":5.187466740608215e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.5078125,"distances_sum":1890.082810726408}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3740234375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3740234375,"f1":null,"seconds":3.729015588760376e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":6.09375,"distances_sum":854.5883127894443}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.8647165334665343,"seconds":5.187466740608215e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.5078125,"distances_sum":1890.082810726408}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9021207958707964,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.6875,"distances_sum":2107.819371903149}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9028705669330677,"seconds":5.602836608886719e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.6953125,"distances_sum":2107.7744606008373}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8349609375,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8349609375,"f1":0.9021207958707964,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.6875,"distances_sum":2107.819371903149}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9724905303030306,"seconds":6.454065442085266e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.953125,"distances_sum":2543.047171402493}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.953857600732601,"seconds":0.0001158732920885086,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.859375,"distances_sum":2424.034525102169}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9629521520146522,"seconds":6.183981895446777e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.9375,"distances_sum":2489.2341141108413}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9057265651015658,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.71875,"distances_sum":2106.7260222198756}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.958155906593407,"seconds":6.362795829772949e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.890625,"distances_sum":2462.2340979514065}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9724905303030306,"seconds":6.454065442085266e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.953125,"distances_sum":2543.047171402493}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9724905303030306,"seconds":6.454065442085266e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.953125,"distances_sum":2543.047171402493}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.203125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.203125,"f1":null,"seconds":3.552064299583435e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.140625,"distances_sum":504.6314688290138}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1865234375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1865234375,"f1":null,"seconds":3.4440308809280396e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.0625,"distances_sum":442.73569486149677}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5537109375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5537109375,"f1":0.6980679043179048,"seconds":4.753470420837402e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.9140625,"distances_sum":1231.1163662868858}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5537109375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5537109375,"f1":0.6980679043179048,"seconds":4.753470420837402e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.9140625,"distances_sum":1231.1163662868858}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9374745046620051,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.921875,"distances_sum":2309.4576511441383}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9245395229770237,"seconds":6.163492798805237e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9765625,"distances_sum":2202.08804158657}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9390396062271069,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.953125,"distances_sum":2315.8654246605975}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.7962823634698643,"seconds":4.86522912979126e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.28125,"distances_sum":1604.7824885530677}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5849609375, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.5849609375,"f1":0.7245136807636813,"seconds":4.507601261138916e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.8125,"distances_sum":1361.664406659276}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9390396062271069,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.953125,"distances_sum":2315.8654246605975}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9603308150183157,"seconds":6.230548024177551e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.953125,"distances_sum":2460.2746657399093}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9773065476190477,"seconds":6.277114152908325e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9921875,"distances_sum":2566.990112846901}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9684237637362643,"seconds":6.148591637611389e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":9.0,"distances_sum":2513.5341866839053}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9645292207792211,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9609375,"distances_sum":2486.8590646058915}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9491529304029309,"seconds":5.751848220825195e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9765625,"distances_sum":2365.7910708740064}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9448717948717955,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9609375,"distances_sum":2339.392578460733}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9773065476190477,"seconds":6.277114152908325e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9921875,"distances_sum":2566.990112846901}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9773065476190477,"seconds":6.277114152908325e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.9921875,"distances_sum":2566.990112846901}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1513671875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1513671875,"f1":null,"seconds":3.159046173095703e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":4.6640625,"distances_sum":369.4289600210599}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5810546875, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.5810546875,"f1":null,"seconds":4.863366484642029e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.1328125,"distances_sum":1328.758124986222}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.658203125,"f1":0.7828239468864476,"seconds":4.770234227180481e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.3984375,"distances_sum":1532.2615394557124}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.658203125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.658203125,"f1":0.7828239468864476,"seconds":4.770234227180481e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.3984375,"distances_sum":1532.2615394557124}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9487236721611726,"seconds":6.0480087995529175e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.71875,"distances_sum":2424.5729194970877}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8448702339327346,"seconds":5.418434739112854e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.0,"distances_sum":1813.317865995934}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8451928280053289,"seconds":5.368143320083618e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.96875,"distances_sum":1797.0054823924943}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8523330835830845,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.9296875,"distances_sum":1857.6009935516786}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9487236721611726,"seconds":6.0480087995529175e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.71875,"distances_sum":2424.5729194970877}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9617788461538467,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.828125,"distances_sum":2479.3224427271975}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.970335393772894,"seconds":1.1323019862174988e-5,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8671875,"distances_sum":2536.807124448845}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9640853937728942,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8203125,"distances_sum":2499.561094383216}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.970335393772894,"seconds":1.1323019862174988e-5,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8671875,"distances_sum":2536.807124448845}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.970335393772894,"seconds":1.1323019862174988e-5,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8671875,"distances_sum":2536.807124448845}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2177734375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2177734375,"f1":null,"seconds":3.60049307346344e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":6.3203125,"distances_sum":474.29161359352935}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2177734375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2177734375,"f1":null,"seconds":3.60049307346344e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":6.3203125,"distances_sum":474.29161359352935}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8689419955044962,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.296875,"distances_sum":1694.4404958001362}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7783203125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7783203125,"f1":0.8689419955044962,"seconds":5.7220458984375e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.296875,"distances_sum":1694.4404958001362}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9409345862470867,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.7265625,"distances_sum":2133.1968070476046}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9560928654678659,"seconds":6.165355443954468e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.828125,"distances_sum":2232.6722346339466}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9538003663003668,"seconds":6.2230974435806274e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8203125,"distances_sum":2198.525545863395}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9560928654678659,"seconds":6.165355443954468e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.828125,"distances_sum":2232.6722346339466}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9722870879120882,"seconds":6.42240047454834e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.921875,"distances_sum":2297.055778115505}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9632497710622712,"seconds":6.245449185371399e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.8828125,"distances_sum":2267.7134949354286}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9723214285714289,"seconds":6.28642737865448e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9375,"distances_sum":2312.8743053949142}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9719494047619053,"seconds":6.258487701416016e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9609375,"distances_sum":2285.2674023179293}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9670444139194143,"seconds":6.485730409622192e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9140625,"distances_sum":2256.0414289108567}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9657566391941397,"seconds":6.230548024177551e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9296875,"distances_sum":2256.3801911370942}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9722870879120882,"seconds":6.42240047454834e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.921875,"distances_sum":2297.055778115505}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9722870879120882,"seconds":6.42240047454834e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.921875,"distances_sum":2297.055778115505}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.84664640914641,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.15625,"distances_sum":1575.2046148844422}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7509765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7509765625,"f1":0.84664640914641,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.15625,"distances_sum":1575.2046148844422}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8634219946719955,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.15625,"distances_sum":1656.2513089650702}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7705078125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7705078125,"f1":0.8634219946719955,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.15625,"distances_sum":1656.2513089650702}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9347558691308699,"seconds":6.239861249923706e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.6796875,"distances_sum":2046.6995276585449}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9631353021978029,"seconds":6.275251507759094e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8984375,"distances_sum":2197.1103413817636}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.964291437728938,"seconds":6.446614861488342e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.859375,"distances_sum":2216.616177924793}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9131503912753919,"seconds":5.977228283882141e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.53125,"distances_sum":1899.3356570159613}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.964291437728938,"seconds":6.446614861488342e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.859375,"distances_sum":2216.616177924793}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.964291437728938,"seconds":6.446614861488342e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.859375,"distances_sum":2216.616177924793}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.701171875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.701171875,"f1":0.8117752039627048,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":7.734375,"distances_sum":1619.2622515135067}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.701171875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.701171875,"f1":0.8117752039627048,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":7.734375,"distances_sum":1619.2622515135067}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.71484375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.71484375,"f1":0.8223609723609732,"seconds":5.3960829973220825e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":7.8359375,"distances_sum":1620.9580092541362}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9245993589743596,"seconds":5.997717380523682e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.6640625,"distances_sum":2073.179064866957}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9501404845154849,"seconds":6.152316927909851e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.6953125,"distances_sum":2273.605024201151}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9501404845154849,"seconds":6.152316927909851e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.6953125,"distances_sum":2273.605024201151}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9587511446886453,"seconds":6.12996518611908e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.8203125,"distances_sum":2277.758873107681}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9669299450549453,"seconds":5.939975380897522e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.8515625,"distances_sum":2336.266815169856}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9642914377289381,"seconds":6.215646862983704e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.890625,"distances_sum":2319.125980845074}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9659626831501837,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.859375,"distances_sum":2330.9516903617805}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9669299450549453,"seconds":5.939975380897522e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.8515625,"distances_sum":2336.266815169856}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9669299450549453,"seconds":5.939975380897522e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.8515625,"distances_sum":2336.266815169856}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5693359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5693359375,"f1":0.7112462190587197,"seconds":4.6137720346450806e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.53125,"distances_sum":1137.9326667459513}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2451171875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2451171875,"f1":null,"seconds":3.648921847343445e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":6.90625,"distances_sum":528.0049830738512}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5693359375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5693359375,"f1":0.7112462190587197,"seconds":4.6137720346450806e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.53125,"distances_sum":1137.9326667459513}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9384157509157516,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.7109375,"distances_sum":2117.7244752232405}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9384157509157516,"seconds":6.0442835092544556e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.7109375,"distances_sum":2117.7244752232405}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9680517399267403,"seconds":6.902962923049927e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.90625,"distances_sum":2335.1499166418853}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9667124542124543,"seconds":6.254762411117554e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9296875,"distances_sum":2314.9047098901983}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9680517399267403,"seconds":6.902962923049927e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.90625,"distances_sum":2335.1499166418853}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9680517399267403,"seconds":6.902962923049927e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.90625,"distances_sum":2335.1499166418853}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.140625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.140625,"f1":null,"seconds":2.866610884666443e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":3.8125,"distances_sum":352.53525491539835}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7158203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7158203125,"f1":0.8220435814185822,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.828125,"distances_sum":1709.6639323273087}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7158203125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7158203125,"f1":0.8220435814185822,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.828125,"distances_sum":1709.6639323273087}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8881987803862813,"seconds":5.600973963737488e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.3984375,"distances_sum":1991.251684260823}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9339056776556781,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.78125,"distances_sum":2213.940414445824}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.88671875,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.88671875,"f1":0.9339056776556781,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.78125,"distances_sum":2213.940414445824}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9377174908424917,"seconds":5.7015568017959595e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.671875,"distances_sum":2241.8861360668952}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9424278846153851,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.7265625,"distances_sum":2248.5525329000748}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.900390625,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.9424278846153851,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.7265625,"distances_sum":2248.5525329000748}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.900390625,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.9424278846153851,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.7265625,"distances_sum":2248.5525329000748}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5615234375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5615234375,"f1":0.7000914016539022,"seconds":4.492700099945068e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":6.5859375,"distances_sum":1484.4131962193007}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.388671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.388671875,"f1":null,"seconds":3.864988684654236e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":5.84375,"distances_sum":1002.7904064977886}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5615234375,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.5615234375,"f1":0.7000914016539022,"seconds":4.492700099945068e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":6.5859375,"distances_sum":1484.4131962193007}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.70703125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.70703125,"f1":0.8179908633033641,"seconds":4.958361387252808e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.265625,"distances_sum":1895.6622854017405}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7977652555777563,"seconds":4.645437002182007e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":6.859375,"distances_sum":1787.8762901621599}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8062864219114226,"seconds":4.723668098449707e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":6.984375,"distances_sum":1847.8915587402457}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.70703125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.70703125,"f1":0.8179908633033641,"seconds":4.958361387252808e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.265625,"distances_sum":1895.6622854017405}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9550480769230774,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.6875,"distances_sum":3048.395250537419}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8430923243423253,"seconds":5.2265822887420654e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.421875,"distances_sum":2149.089271590341}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7353515625,"f1":0.8359919594294605,"seconds":5.15766441822052e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.4453125,"distances_sum":2093.2083968041006}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9402847152847158,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.546875,"distances_sum":2925.935287833016}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8076171875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8076171875,"f1":0.8849249708624715,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.0390625,"distances_sum":2441.6623315428283}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9550480769230774,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.6875,"distances_sum":3048.395250537419}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9208984375,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9550480769230774,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.6875,"distances_sum":3048.395250537419}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2685546875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2685546875,"f1":null,"seconds":3.382563591003418e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":4.84375,"distances_sum":827.0864544858791}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2724609375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2724609375,"f1":null,"seconds":3.4123659133911133e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":5.03125,"distances_sum":736.9431118889789}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2724609375,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.2724609375,"f1":null,"seconds":3.4123659133911133e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":5.03125,"distances_sum":736.9431118889789}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2724609375,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.2724609375,"f1":null,"seconds":3.4123659133911133e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":5.03125,"distances_sum":736.9431118889789}}, n: 9
mean(cfft.distances) = 0.333851282647477
mean(cdnet.distances) = 0.3829452098514894
mean(crand.distances) = 0.86923317530138
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9022222222222224
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9022222222222224
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.9511111111111111
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.86
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9244444444444445
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9466666666666667
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.851111111111111
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9044444444444445
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9111111111111111
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.888888888888889
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8888888888888888
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9177777777777778
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9244444444444445
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8555555555555556
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8977777777777778
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9244444444444445
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8444444444444444
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9311111111111111
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.888888888888889
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8911111111111111
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8822222222222224
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9133333333333334
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 7, 9]]
** centroid: 12, normalized-entropy: 0.9886994082884974, [(2, 7), (3, 9)]
finished with 15 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 2, 3, 2, 3, 2, 1, 3, 2, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 7, 9]]
** centroid: 12, normalized-entropy: 0.9886994082884974, [(2, 7), (3, 9)]
finished with 15 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 2, 3, 2, 3, 2, 1, 3, 2, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 7, 9]]
** centroid: 12, normalized-entropy: 0.9886994082884974, [(2, 7), (3, 9)]
finished with 15 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 2, 3, 2, 3, 2, 1, 3, 2, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 7, 9]]
** centroid: 12, normalized-entropy: 0.9886994082884974, [(2, 7), (3, 9)]
finished with 15 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 2, 3, 2, 3, 2, 1, 3, 2, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 7, 9]]
** centroid: 12, normalized-entropy: 0.9886994082884974, [(2, 7), (3, 9)]
finished with 15 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 2, 3, 2, 3, 2, 1, 3, 2, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 7, 9]]
** centroid: 12, normalized-entropy: 0.9886994082884974, [(2, 7), (3, 9)]
finished with 15 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 2, 3, 2, 3, 2, 1, 3, 2, 3]
acc = 0.9466666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 8, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 7, 9]]
** centroid: 12, normalized-entropy: 0.9886994082884974, [(2, 7), (3, 9)]
finished with 15 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 2, 3, 2, 3, 2, 1, 3, 2, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5182461724678675] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 11, 21]]
** centroid: 1, normalized-entropy: 0.9283620723948678, [(2, 11), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 29, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 7]]
** centroid: 8, normalized-entropy: 0.9456603046006401, [(2, 4), (3, 7)]
*** center 9: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
finished with 14 centroids; started with 12
acc = 0.9733333333333334
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.29190244661314085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29190244661314085, 0.21255148345864638] ***
*** finished computation of 7 references, err: [Inf, 0.29190244661314085, 0.21255148345864638] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 52, 12]]
** centroid: 1, normalized-entropy: 0.6962122601251459, [(2, 52), (3, 12)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [4, 38, 0]]
** centroid: 2, normalized-entropy: 0.45371633918694493, [(1, 4), (2, 38)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 114, 10]]
** centroid: 3, normalized-entropy: 0.4044483864864384, [(2, 114), (3, 10)]
*** center 4: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [40, 35, 0]]
** centroid: 6, normalized-entropy: 0.9967916319816367, [(1, 40), (2, 35)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [162, 17, 0]]
** centroid: 7, normalized-entropy: 0.45285170593149116, [(1, 162), (2, 17)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2527212216546787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2527212216546787, 0.18656529272716302] ***
*** starting iteration: 2; err: [Inf, 0.2527212216546787, 0.18656529272716302] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2527212216546787, 0.18656529272716302, 0.18162282621390088] ***
*** starting iteration: 3; err: [Inf, 0.2527212216546787, 0.18656529272716302, 0.18162282621390088] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2527212216546787, 0.18656529272716302, 0.18162282621390088, 0.18092181403105995] ***
*** finished computation of 7 references, err: [Inf, 0.2527212216546787, 0.18656529272716302, 0.18162282621390088, 0.18092181403105995] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 94, 22]]
** centroid: 1, normalized-entropy: 0.7007495497162061, [(2, 94), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 4, 0]]
** centroid: 3, normalized-entropy: 0.30337483608641397, [(1, 70), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [67, 33, 0]]
** centroid: 4, normalized-entropy: 0.9149263727797277, [(1, 67), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 41, 0]]
** centroid: 5, normalized-entropy: 0.9602553596067602, [(1, 66), (2, 41)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 84, 0]]
** centroid: 6, normalized-entropy: 0.3912435636292556, [(1, 7), (2, 84)]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24231906331142877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24231906331142877, 0.1887496216892861] ***
*** starting iteration: 2; err: [Inf, 0.24231906331142877, 0.1887496216892861] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24231906331142877, 0.1887496216892861, 0.1836481252531598] ***
*** starting iteration: 3; err: [Inf, 0.24231906331142877, 0.1887496216892861, 0.1836481252531598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24231906331142877, 0.1887496216892861, 0.1836481252531598, 0.18256706379303733] ***
*** starting iteration: 4; err: [Inf, 0.24231906331142877, 0.1887496216892861, 0.1836481252531598, 0.18256706379303733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24231906331142877, 0.1887496216892861, 0.1836481252531598, 0.18256706379303733, 0.1821891786600428] ***
*** finished computation of 7 references, err: [Inf, 0.24231906331142877, 0.1887496216892861, 0.1836481252531598, 0.18256706379303733, 0.1821891786600428] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 34, 0]]
** centroid: 1, normalized-entropy: 0.9377342939868042, [(1, 62), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [75, 7, 0]]
** centroid: 2, normalized-entropy: 0.42080948947668984, [(1, 75), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 91, 23]]
** centroid: 3, normalized-entropy: 0.7254230207665605, [(2, 91), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 35, 0]]
** centroid: 5, normalized-entropy: 0.9696055994904408, [(1, 53), (2, 35)]
*** center 6: selecting labels [1] (freq >= 2) [from [95, 1, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 84, 0]]
** centroid: 7, normalized-entropy: 0.15935006268563429, [(1, 2), (2, 84)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23190742164481615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23190742164481615, 0.18994564341934123] ***
*** starting iteration: 2; err: [Inf, 0.23190742164481615, 0.18994564341934123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23190742164481615, 0.18994564341934123, 0.18466035499079697] ***
*** starting iteration: 3; err: [Inf, 0.23190742164481615, 0.18994564341934123, 0.18466035499079697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23190742164481615, 0.18994564341934123, 0.18466035499079697, 0.18277694266554767] ***
*** starting iteration: 4; err: [Inf, 0.23190742164481615, 0.18994564341934123, 0.18466035499079697, 0.18277694266554767] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23190742164481615, 0.18994564341934123, 0.18466035499079697, 0.18277694266554767, 0.1821627203120977] ***
*** finished computation of 7 references, err: [Inf, 0.23190742164481615, 0.18994564341934123, 0.18466035499079697, 0.18277694266554767, 0.1821627203120977] ***
*** center 1: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 102, 19]]
** centroid: 2, normalized-entropy: 0.6271441658983906, [(2, 102), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [85, 3, 0]]
** centroid: 3, normalized-entropy: 0.21450983370697788, [(1, 85), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [45, 54, 0]]
** centroid: 4, normalized-entropy: 0.9940302114769566, [(1, 45), (2, 54)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [76, 41, 0]]
** centroid: 5, normalized-entropy: 0.9344491365829435, [(1, 76), (2, 41)]
*** center 6: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.40293735245874784] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40293735245874784, 0.2871832900814147] ***
*** starting iteration: 2; err: [Inf, 0.40293735245874784, 0.2871832900814147] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40293735245874784, 0.2871832900814147, 0.28650880504019177] ***
*** finished computation of 3 references, err: [Inf, 0.40293735245874784, 0.2871832900814147, 0.28650880504019177] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [250, 37, 0]]
** centroid: 1, normalized-entropy: 0.5544684399377333, [(1, 250), (2, 37)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [138, 49, 0]]
** centroid: 2, normalized-entropy: 0.8297973615077835, [(1, 138), (2, 49)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 170, 22]]
** centroid: 3, normalized-entropy: 0.5135877363803757, [(2, 170), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.356001567822983] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.356001567822983, 0.28878848137951146] ***
*** starting iteration: 2; err: [Inf, 0.356001567822983, 0.28878848137951146] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.356001567822983, 0.28878848137951146, 0.28430004465020914] ***
*** starting iteration: 3; err: [Inf, 0.356001567822983, 0.28878848137951146, 0.28430004465020914] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.356001567822983, 0.28878848137951146, 0.28430004465020914, 0.2839052713192675] ***
*** finished computation of 3 references, err: [Inf, 0.356001567822983, 0.28878848137951146, 0.28430004465020914, 0.2839052713192675] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [234, 30, 0]]
** centroid: 1, normalized-entropy: 0.5107878229540133, [(1, 234), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [158, 51, 0]]
** centroid: 2, normalized-entropy: 0.8016603251309853, [(1, 158), (2, 51)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 171, 23]]
** centroid: 3, normalized-entropy: 0.5251978677809431, [(2, 171), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39629427913850035] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39629427913850035, 0.3209262973750415] ***
*** starting iteration: 2; err: [Inf, 0.39629427913850035, 0.3209262973750415] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39629427913850035, 0.3209262973750415, 0.2966120563659711] ***
*** starting iteration: 3; err: [Inf, 0.39629427913850035, 0.3209262973750415, 0.2966120563659711] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39629427913850035, 0.3209262973750415, 0.2966120563659711, 0.2920539720441917] ***
*** starting iteration: 4; err: [Inf, 0.39629427913850035, 0.3209262973750415, 0.2966120563659711, 0.2920539720441917] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39629427913850035, 0.3209262973750415, 0.2966120563659711, 0.2920539720441917, 0.2910930543769335] ***
*** finished computation of 3 references, err: [Inf, 0.39629427913850035, 0.3209262973750415, 0.2966120563659711, 0.2920539720441917, 0.2910930543769335] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [85, 183, 19]]
** centroid: 1, normalized-entropy: 0.7528209087856053, [(1, 85), (2, 183), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [197, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [104, 79, 0]]
** centroid: 3, normalized-entropy: 0.9864954131875139, [(1, 104), (2, 79)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2510439507241572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2510439507241572, 0.18584212680302584] ***
*** finished computation of 7 references, err: [Inf, 0.2510439507241572, 0.18584212680302584] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 94, 23]]
** centroid: 1, normalized-entropy: 0.7150375653354627, [(2, 94), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [72, 62, 0]]
** centroid: 2, normalized-entropy: 0.995978956518722, [(1, 72), (2, 62)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [6, 76, 0]]
** centroid: 3, normalized-entropy: 0.3776463213737003, [(1, 6), (2, 76)]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [66, 20, 0]]
** centroid: 6, normalized-entropy: 0.7824441294066888, [(1, 66), (2, 20)]
*** center 7: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24090954211346435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24090954211346435, 0.2026688908778321] ***
*** finished computation of 7 references, err: [Inf, 0.24090954211346435, 0.2026688908778321] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [30, 75, 0]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(1, 30), (2, 75)]
*** center 2: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [2, 102, 16]]
** centroid: 3, normalized-entropy: 0.43239449174407807, [(1, 2), (2, 102), (3, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [126, 6, 0]]
** centroid: 4, normalized-entropy: 0.2667649878030262, [(1, 126), (2, 6)]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [11, 76, 3]]
** centroid: 5, normalized-entropy: 0.466997745726367, [(1, 11), (2, 76), (3, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [91, 3, 0]]
** centroid: 6, normalized-entropy: 0.2039058755048202, [(1, 91), (2, 3)]
*** center 7: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33981945908134775] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33981945908134775, 0.25191368529008135] ***
*** finished computation of 3 references, err: [Inf, 0.33981945908134775, 0.25191368529008135] ***
*** center 1: selecting labels [1] (freq >= 1) [from [265, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [44, 161, 9]]
** centroid: 2, normalized-entropy: 0.6122141407599528, [(1, 44), (2, 161), (3, 9)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [79, 95, 13]]
** centroid: 3, normalized-entropy: 0.8132198193628037, [(1, 79), (2, 95), (3, 13)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36410597507943815] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36410597507943815, 0.24145555938978022] ***
*** finished computation of 3 references, err: [Inf, 0.36410597507943815, 0.24145555938978022] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [272, 28, 0]]
** centroid: 1, normalized-entropy: 0.44749925503686355, [(1, 272), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [120, 46, 0]]
** centroid: 2, normalized-entropy: 0.8514808683852091, [(1, 120), (2, 46)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 178, 23]]
** centroid: 3, normalized-entropy: 0.5131289264956943, [(2, 178), (3, 23)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3132180716490549] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3132180716490549, 0.2553329682745587] ***
*** finished computation of 3 references, err: [Inf, 0.3132180716490549, 0.2553329682745587] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [114, 3, 0]]
** centroid: 1, normalized-entropy: 0.17203694935311387, [(1, 114), (2, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [24, 197, 19]]
** centroid: 2, normalized-entropy: 0.5398650642285542, [(1, 24), (2, 197), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [248, 62, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 248), (2, 62)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2778260613240682] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2778260613240682, 0.2450106087792385] ***
*** starting iteration: 2; err: [Inf, 0.2778260613240682, 0.2450106087792385] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2778260613240682, 0.2450106087792385, 0.234141400832034] ***
*** starting iteration: 3; err: [Inf, 0.2778260613240682, 0.2450106087792385, 0.234141400832034] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2778260613240682, 0.2450106087792385, 0.234141400832034, 0.23221402877505432] ***
*** starting iteration: 4; err: [Inf, 0.2778260613240682, 0.2450106087792385, 0.234141400832034, 0.23221402877505432] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2778260613240682, 0.2450106087792385, 0.234141400832034, 0.23221402877505432, 0.2319264438425613] ***
*** finished computation of 3 references, err: [Inf, 0.2778260613240682, 0.2450106087792385, 0.234141400832034, 0.23221402877505432, 0.2319264438425613] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [6, 174, 22]]
** centroid: 1, normalized-entropy: 0.4318722928242562, [(1, 6), (2, 174), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [238, 4, 0]]
** centroid: 2, normalized-entropy: 0.12148047831884834, [(1, 238), (2, 4)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [144, 78, 0]]
** centroid: 3, normalized-entropy: 0.9352691398683568, [(1, 144), (2, 78)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30581924656330645] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30581924656330645, 0.23792241606721726] ***
*** starting iteration: 2; err: [Inf, 0.30581924656330645, 0.23792241606721726] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30581924656330645, 0.23792241606721726, 0.22825150114290046] ***
*** starting iteration: 3; err: [Inf, 0.30581924656330645, 0.23792241606721726, 0.22825150114290046] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30581924656330645, 0.23792241606721726, 0.22825150114290046, 0.2261225217335468] ***
*** starting iteration: 4; err: [Inf, 0.30581924656330645, 0.23792241606721726, 0.22825150114290046, 0.2261225217335468] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30581924656330645, 0.23792241606721726, 0.22825150114290046, 0.2261225217335468, 0.225787658124989] ***
*** finished computation of 3 references, err: [Inf, 0.30581924656330645, 0.23792241606721726, 0.22825150114290046, 0.2261225217335468, 0.225787658124989] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [165, 56, 0]]
** centroid: 1, normalized-entropy: 0.8166127811752079, [(1, 165), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [227, 19, 0]]
** centroid: 2, normalized-entropy: 0.3923635729389723, [(1, 227), (2, 19)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 177, 23]]
** centroid: 3, normalized-entropy: 0.5148156530047155, [(2, 177), (3, 23)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26995716249846713] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26995716249846713, 0.24457420831974847] ***
*** starting iteration: 2; err: [Inf, 0.26995716249846713, 0.24457420831974847] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26995716249846713, 0.24457420831974847, 0.2322079705526826] ***
*** starting iteration: 3; err: [Inf, 0.26995716249846713, 0.24457420831974847, 0.2322079705526826] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26995716249846713, 0.24457420831974847, 0.2322079705526826, 0.23154323833479337] ***
*** finished computation of 3 references, err: [Inf, 0.26995716249846713, 0.24457420831974847, 0.2322079705526826, 0.23154323833479337] ***
*** center 1: selecting labels [1] (freq >= 1) [from [189, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [107, 108, 2]]
** centroid: 2, normalized-entropy: 0.6727740605489521, [(1, 107), (2, 108), (3, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [90, 154, 17]]
** centroid: 3, normalized-entropy: 0.7794634074674863, [(1, 90), (2, 154), (3, 17)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4099251706203496] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4099251706203496, 0.26384647242206094] ***
*** starting iteration: 2; err: [Inf, 0.4099251706203496, 0.26384647242206094] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4099251706203496, 0.26384647242206094, 0.23915821471176035] ***
*** starting iteration: 3; err: [Inf, 0.4099251706203496, 0.26384647242206094, 0.23915821471176035] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4099251706203496, 0.26384647242206094, 0.23915821471176035, 0.23103068212142308] ***
*** starting iteration: 4; err: [Inf, 0.4099251706203496, 0.26384647242206094, 0.23915821471176035, 0.23103068212142308] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4099251706203496, 0.26384647242206094, 0.23915821471176035, 0.23103068212142308, 0.229479392449296] ***
*** starting iteration: 5; err: [Inf, 0.4099251706203496, 0.26384647242206094, 0.23915821471176035, 0.23103068212142308, 0.229479392449296] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4099251706203496, 0.26384647242206094, 0.23915821471176035, 0.23103068212142308, 0.229479392449296, 0.2290597514196246] ***
*** finished computation of 3 references, err: [Inf, 0.4099251706203496, 0.26384647242206094, 0.23915821471176035, 0.23103068212142308, 0.229479392449296, 0.2290597514196246] ***
*** center 1: selecting labels [1] (freq >= 1) [from [211, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [93, 118, 4]]
** centroid: 2, normalized-entropy: 0.6971562882208802, [(1, 93), (2, 118), (3, 4)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [84, 138, 18]]
** centroid: 3, normalized-entropy: 0.8009234031106355, [(1, 84), (2, 138), (3, 18)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3523128684987126] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3523128684987126, 0.2756149696822891] ***
*** starting iteration: 2; err: [Inf, 0.3523128684987126, 0.2756149696822891] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3523128684987126, 0.2756149696822891, 0.2548404611029971] ***
*** starting iteration: 3; err: [Inf, 0.3523128684987126, 0.2756149696822891, 0.2548404611029971] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3523128684987126, 0.2756149696822891, 0.2548404611029971, 0.2296723756657123] ***
*** starting iteration: 4; err: [Inf, 0.3523128684987126, 0.2756149696822891, 0.2548404611029971, 0.2296723756657123] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3523128684987126, 0.2756149696822891, 0.2548404611029971, 0.2296723756657123, 0.22759137908625102] ***
*** starting iteration: 5; err: [Inf, 0.3523128684987126, 0.2756149696822891, 0.2548404611029971, 0.2296723756657123, 0.22759137908625102] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3523128684987126, 0.2756149696822891, 0.2548404611029971, 0.2296723756657123, 0.22759137908625102, 0.2274560492424325] ***
*** finished computation of 3 references, err: [Inf, 0.3523128684987126, 0.2756149696822891, 0.2548404611029971, 0.2296723756657123, 0.22759137908625102, 0.2274560492424325] ***
*** center 1: selecting labels [1] (freq >= 1) [from [216, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [43, 186, 23]]
** centroid: 2, normalized-entropy: 0.6775476819309152, [(1, 43), (2, 186), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [133, 66, 0]]
** centroid: 3, normalized-entropy: 0.9166116768284924, [(1, 133), (2, 66)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32232133002541236] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32232133002541236, 0.24717124395709167] ***
*** starting iteration: 2; err: [Inf, 0.32232133002541236, 0.24717124395709167] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32232133002541236, 0.24717124395709167, 0.2365069240401464] ***
*** starting iteration: 3; err: [Inf, 0.32232133002541236, 0.24717124395709167, 0.2365069240401464] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32232133002541236, 0.24717124395709167, 0.2365069240401464, 0.23387638477760755] ***
*** starting iteration: 4; err: [Inf, 0.32232133002541236, 0.24717124395709167, 0.2365069240401464, 0.23387638477760755] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32232133002541236, 0.24717124395709167, 0.2365069240401464, 0.23387638477760755, 0.2334616063267406] ***
*** finished computation of 3 references, err: [Inf, 0.32232133002541236, 0.24717124395709167, 0.2365069240401464, 0.23387638477760755, 0.2334616063267406] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [84, 146, 15]]
** centroid: 1, normalized-entropy: 0.7705168763259317, [(1, 84), (2, 146), (3, 15)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [97, 116, 4]]
** centroid: 2, normalized-entropy: 0.6993704439112198, [(1, 97), (2, 116), (3, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [205, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.20350978187601398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20350978187601398, 0.15782038303436124] ***
*** starting iteration: 2; err: [Inf, 0.20350978187601398, 0.15782038303436124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20350978187601398, 0.15782038303436124, 0.14969326847116812] ***
*** starting iteration: 3; err: [Inf, 0.20350978187601398, 0.15782038303436124, 0.14969326847116812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20350978187601398, 0.15782038303436124, 0.14969326847116812, 0.14693669768612463] ***
*** starting iteration: 4; err: [Inf, 0.20350978187601398, 0.15782038303436124, 0.14969326847116812, 0.14693669768612463] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20350978187601398, 0.15782038303436124, 0.14969326847116812, 0.14693669768612463, 0.14621717528812028] ***
*** finished computation of 7 references, err: [Inf, 0.20350978187601398, 0.15782038303436124, 0.14969326847116812, 0.14693669768612463, 0.14621717528812028] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [79, 23, 0]]
** centroid: 1, normalized-entropy: 0.7700664782920602, [(1, 79), (2, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [77, 28, 0]]
** centroid: 2, normalized-entropy: 0.8366407419411671, [(1, 77), (2, 28)]
*** center 3: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 71, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 64, 0]]
** centroid: 5, normalized-entropy: 0.8332661971210122, [(1, 23), (2, 64)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 70, 22]]
** centroid: 6, normalized-entropy: 0.7935912300117066, [(2, 70), (3, 22)]
*** center 7: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21010205194471346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21010205194471346, 0.15280438727675483] ***
*** starting iteration: 2; err: [Inf, 0.21010205194471346, 0.15280438727675483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21010205194471346, 0.15280438727675483, 0.15041635561779118] ***
*** starting iteration: 3; err: [Inf, 0.21010205194471346, 0.15280438727675483, 0.15041635561779118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21010205194471346, 0.15280438727675483, 0.15041635561779118, 0.1489637115833418] ***
*** starting iteration: 4; err: [Inf, 0.21010205194471346, 0.15280438727675483, 0.15041635561779118, 0.1489637115833418] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21010205194471346, 0.15280438727675483, 0.15041635561779118, 0.1489637115833418, 0.14728593841443646] ***
*** starting iteration: 5; err: [Inf, 0.21010205194471346, 0.15280438727675483, 0.15041635561779118, 0.1489637115833418, 0.14728593841443646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21010205194471346, 0.15280438727675483, 0.15041635561779118, 0.1489637115833418, 0.14728593841443646, 0.14627863862342305] ***
*** starting iteration: 6; err: [Inf, 0.21010205194471346, 0.15280438727675483, 0.15041635561779118, 0.1489637115833418, 0.14728593841443646, 0.14627863862342305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21010205194471346, 0.15280438727675483, 0.15041635561779118, 0.1489637115833418, 0.14728593841443646, 0.14627863862342305, 0.14547420123060034] ***
*** finished computation of 7 references, err: [Inf, 0.21010205194471346, 0.15280438727675483, 0.15041635561779118, 0.1489637115833418, 0.14728593841443646, 0.14627863862342305, 0.14547420123060034] ***
*** center 1: selecting labels [1] (freq >= 1) [from [119, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [71, 37, 0]]
** centroid: 2, normalized-entropy: 0.9272780575976948, [(1, 71), (2, 37)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 34, 0]]
** centroid: 3, normalized-entropy: 0.9409217747114994, [(1, 61), (2, 34)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [52, 30, 0]]
** centroid: 4, normalized-entropy: 0.9474351361840305, [(1, 52), (2, 30)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 82, 23]]
** centroid: 5, normalized-entropy: 0.7584246665423688, [(2, 82), (3, 23)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 69, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.214519831132719] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.214519831132719, 0.1529477540528572] ***
*** starting iteration: 2; err: [Inf, 0.214519831132719, 0.1529477540528572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.214519831132719, 0.1529477540528572, 0.14568017918834353] ***
*** starting iteration: 3; err: [Inf, 0.214519831132719, 0.1529477540528572, 0.14568017918834353] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.214519831132719, 0.1529477540528572, 0.14568017918834353, 0.1438292420980265] ***
*** starting iteration: 4; err: [Inf, 0.214519831132719, 0.1529477540528572, 0.14568017918834353, 0.1438292420980265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.214519831132719, 0.1529477540528572, 0.14568017918834353, 0.1438292420980265, 0.14308518734693168] ***
*** finished computation of 7 references, err: [Inf, 0.214519831132719, 0.1529477540528572, 0.14568017918834353, 0.1438292420980265, 0.14308518734693168] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [10, 89, 0]]
** centroid: 1, normalized-entropy: 0.47218938467675087, [(1, 10), (2, 89)]
*** center 2: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 14, 0]]
** centroid: 3, normalized-entropy: 0.699772221773307, [(1, 60), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [53, 50, 0]]
** centroid: 4, normalized-entropy: 0.9993879681484049, [(1, 53), (2, 50)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [89, 18, 0]]
** centroid: 5, normalized-entropy: 0.6536265622705767, [(1, 89), (2, 18)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 91, 19]]
** centroid: 6, normalized-entropy: 0.6639057588563916, [(2, 91), (3, 19)]
*** center 7: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22707219300483977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22707219300483977, 0.20154907393783847] ***
*** starting iteration: 2; err: [Inf, 0.22707219300483977, 0.20154907393783847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22707219300483977, 0.20154907393783847, 0.19522292853554] ***
*** starting iteration: 3; err: [Inf, 0.22707219300483977, 0.20154907393783847, 0.19522292853554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22707219300483977, 0.20154907393783847, 0.19522292853554, 0.19134670417537694] ***
*** finished computation of 7 references, err: [Inf, 0.22707219300483977, 0.20154907393783847, 0.19522292853554, 0.19134670417537694] ***
*** center 1: selecting labels [1] (freq >= 1) [from [146, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [43, 69, 0]]
** centroid: 2, normalized-entropy: 0.960769458040784, [(1, 43), (2, 69)]
*** center 3: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 71, 2]]
** centroid: 5, normalized-entropy: 0.18116640155354563, [(2, 71), (3, 2)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 59, 20]]
** centroid: 6, normalized-entropy: 0.8162554088088008, [(2, 59), (3, 20)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [28, 57, 0]]
** centroid: 7, normalized-entropy: 0.9143242464317818, [(1, 28), (2, 57)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27498100306056833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27498100306056833, 0.1945969962432556] ***
*** starting iteration: 2; err: [Inf, 0.27498100306056833, 0.1945969962432556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27498100306056833, 0.1945969962432556, 0.18694212801078672] ***
*** starting iteration: 3; err: [Inf, 0.27498100306056833, 0.1945969962432556, 0.18694212801078672] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27498100306056833, 0.1945969962432556, 0.18694212801078672, 0.18475580999189276] ***
*** finished computation of 7 references, err: [Inf, 0.27498100306056833, 0.1945969962432556, 0.18694212801078672, 0.18475580999189276] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [62, 36, 0]]
** centroid: 2, normalized-entropy: 0.9486131982385807, [(1, 62), (2, 36)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 94, 23]]
** centroid: 3, normalized-entropy: 0.7150375653354627, [(2, 94), (3, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [55, 39, 0]]
** centroid: 5, normalized-entropy: 0.978998737002276, [(1, 55), (2, 39)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 80, 0]]
** centroid: 6, normalized-entropy: 0.16542703399626665, [(1, 2), (2, 80)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [117, 3, 0]]
** centroid: 7, normalized-entropy: 0.1686609314966701, [(1, 117), (2, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27229074129731445] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27229074129731445, 0.20035615074273752] ***
*** starting iteration: 2; err: [Inf, 0.27229074129731445, 0.20035615074273752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27229074129731445, 0.20035615074273752, 0.18800852530966813] ***
*** starting iteration: 3; err: [Inf, 0.27229074129731445, 0.20035615074273752, 0.18800852530966813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27229074129731445, 0.20035615074273752, 0.18800852530966813, 0.18423158755579006] ***
*** finished computation of 7 references, err: [Inf, 0.27229074129731445, 0.20035615074273752, 0.18800852530966813, 0.18423158755579006] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 95, 19]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 95), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 13, 0]]
** centroid: 2, normalized-entropy: 0.6451006442088483, [(1, 66), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [7, 81, 0]]
** centroid: 3, normalized-entropy: 0.40057554263664, [(1, 7), (2, 81)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [57, 50, 0]]
** centroid: 4, normalized-entropy: 0.9969105350354788, [(1, 57), (2, 50)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [77, 23, 0]]
** centroid: 5, normalized-entropy: 0.7780113035465377, [(1, 77), (2, 23)]
*** center 6: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2927345033607784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2927345033607784, 0.23133514113528458] ***
*** finished computation of 7 references, err: [Inf, 0.2927345033607784, 0.23133514113528458] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [48, 42, 0]]
** centroid: 1, normalized-entropy: 0.9967916319816367, [(1, 48), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [177, 49, 0]]
** centroid: 2, normalized-entropy: 0.754307437077419, [(1, 177), (2, 49)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 67, 9]]
** centroid: 3, normalized-entropy: 0.524805134842907, [(2, 67), (3, 9)]
*** center 4: selecting labels [1] (freq >= 1) [from [152, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [11, 49, 0]]
** centroid: 5, normalized-entropy: 0.6873150928309273, [(1, 11), (2, 49)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 41, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 8, 13]]
** centroid: 7, normalized-entropy: 0.9587118829771317, [(2, 8), (3, 13)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2866549639358022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2866549639358022, 0.2149659889195857] ***
*** finished computation of 7 references, err: [Inf, 0.2866549639358022, 0.2149659889195857] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [8, 39, 0]]
** centroid: 1, normalized-entropy: 0.6581912658132184, [(1, 8), (2, 39)]
*** center 2: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [40, 52, 0]]
** centroid: 3, normalized-entropy: 0.9876925088958032, [(1, 40), (2, 52)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [42, 30, 0]]
** centroid: 4, normalized-entropy: 0.9798687566511527, [(1, 42), (2, 30)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [15, 60, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 15), (2, 60)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 71, 23]]
** centroid: 6, normalized-entropy: 0.8027381019527042, [(2, 71), (3, 23)]
*** center 7: selecting labels [1] (freq >= 1) [from [158, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.286520861819487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.286520861819487, 0.20167597133046325] ***
*** finished computation of 7 references, err: [Inf, 0.286520861819487, 0.20167597133046325] ***
*** center 1: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 94, 19]]
** centroid: 2, normalized-entropy: 0.6534358224760193, [(2, 94), (3, 19)]
*** center 3: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [17, 60, 0]]
** centroid: 4, normalized-entropy: 0.7615877869576693, [(1, 17), (2, 60)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [69, 26, 0]]
** centroid: 5, normalized-entropy: 0.846701711600821, [(1, 69), (2, 26)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [72, 82, 0]]
** centroid: 6, normalized-entropy: 0.9969562518473082, [(1, 72), (2, 82)]
*** center 7: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9269958581335827, 0.9220028411645179, 0.912016807226388, 0.8999988011964059, 0.8999808191424958, 0.8830057602512692, 0.8789657921394448, 0.8660247073420725, 0.831031630432828, 0.8090665515815217, 0.7989876103648559]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.3, 1) => 0.9269958581335827
finished with 12
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.319235074993883] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.319235074993883, 0.29260605175150195] ***
*** finished computation of 3 references, err: [Inf, 0.319235074993883, 0.29260605175150195] ***
*** center 1: selecting labels [1] (freq >= 1) [from [217, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [96, 88, 0]]
** centroid: 2, normalized-entropy: 0.9986359641585719, [(1, 96), (2, 88)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [75, 168, 22]]
** centroid: 3, normalized-entropy: 0.7762379736846017, [(1, 75), (2, 168), (3, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3174767154038533] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3174767154038533, 0.2988384072256946] ***
*** finished computation of 3 references, err: [Inf, 0.3174767154038533, 0.2988384072256946] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [258, 32, 0]]
** centroid: 1, normalized-entropy: 0.5009551869142463, [(1, 258), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [134, 59, 0]]
** centroid: 2, normalized-entropy: 0.888146718958805, [(1, 134), (2, 59)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 161, 23]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(2, 161), (3, 23)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5594804940977018] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5594804940977018, 0.3673633614846825] ***
*** finished computation of 3 references, err: [Inf, 0.5594804940977018, 0.3673633614846825] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [152, 235, 19]]
** centroid: 1, normalized-entropy: 0.7533072741965824, [(1, 152), (2, 235), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [166, 27, 0]]
** centroid: 2, normalized-entropy: 0.5839673576722091, [(1, 166), (2, 27)]
*** center 3: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 12)
[0.9269958581335827, 0.9220028411645179, 0.912016807226388, 0.8999988011964059, 0.8999808191424958, 0.8830057602512692, 0.8789657921394448, 0.8660247073420725, 0.831031630432828, 0.8090665515815217, 0.7989876103648559, 0.7789496082909256]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.3, 1) => 0.9269958581335827
finished with 12
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9269958581335827, 0.9220028411645179, 0.912016807226388, 0.8999988011964059, 0.8999808191424958, 0.8830057602512692, 0.8789657921394448, 0.8660247073420725, 0.831031630432828, 0.8090665515815217, 0.7989876103648559, 0.7789496082909256]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.3, 1) => 0.9269958581335827
finished with 13
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.34115156476657177] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34115156476657177, 0.22793263233442967] ***
*** starting iteration: 2; err: [Inf, 0.34115156476657177, 0.22793263233442967] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34115156476657177, 0.22793263233442967, 0.22561330368949306] ***
*** starting iteration: 3; err: [Inf, 0.34115156476657177, 0.22793263233442967, 0.22561330368949306] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34115156476657177, 0.22793263233442967, 0.22561330368949306, 0.22523413744913107] ***
*** finished computation of 3 references, err: [Inf, 0.34115156476657177, 0.22793263233442967, 0.22561330368949306, 0.22523413744913107] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [56, 178, 22]]
** centroid: 1, normalized-entropy: 0.7245835812089528, [(1, 56), (2, 178), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [106, 78, 0]]
** centroid: 2, normalized-entropy: 0.9832307535844343, [(1, 106), (2, 78)]
*** center 3: selecting labels [1] (freq >= 2) [from [226, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34311765853407744] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34311765853407744, 0.2299290452071506] ***
*** starting iteration: 2; err: [Inf, 0.34311765853407744, 0.2299290452071506] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34311765853407744, 0.2299290452071506, 0.22768465416977876] ***
*** starting iteration: 3; err: [Inf, 0.34311765853407744, 0.2299290452071506, 0.22768465416977876] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34311765853407744, 0.2299290452071506, 0.22768465416977876, 0.22738663001597553] ***
*** finished computation of 3 references, err: [Inf, 0.34311765853407744, 0.2299290452071506, 0.22768465416977876, 0.22738663001597553] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [44, 189, 23]]
** centroid: 1, normalized-entropy: 0.6764731852093727, [(1, 44), (2, 189), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [211, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [137, 63, 0]]
** centroid: 3, normalized-entropy: 0.8988610370442902, [(1, 137), (2, 63)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30262039144379627] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30262039144379627, 0.23868539293800695] ***
*** starting iteration: 2; err: [Inf, 0.30262039144379627, 0.23868539293800695] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30262039144379627, 0.23868539293800695, 0.22985277969998935] ***
*** starting iteration: 3; err: [Inf, 0.30262039144379627, 0.23868539293800695, 0.22985277969998935] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30262039144379627, 0.23868539293800695, 0.22985277969998935, 0.22872858527193274] ***
*** starting iteration: 4; err: [Inf, 0.30262039144379627, 0.23868539293800695, 0.22985277969998935, 0.22872858527193274] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30262039144379627, 0.23868539293800695, 0.22985277969998935, 0.22872858527193274, 0.22862059371950832] ***
*** finished computation of 3 references, err: [Inf, 0.30262039144379627, 0.23868539293800695, 0.22985277969998935, 0.22872858527193274, 0.22862059371950832] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [234, 32, 0]]
** centroid: 1, normalized-entropy: 0.5302247498526306, [(1, 234), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [152, 51, 0]]
** centroid: 2, normalized-entropy: 0.8132242202198007, [(1, 152), (2, 51)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 179, 19]]
** centroid: 3, normalized-entropy: 0.4560553731819833, [(2, 179), (3, 19)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 13)
[0.9269958581335827, 0.9220028411645179, 0.912016807226388, 0.8999988011964059, 0.8999808191424958, 0.8830057602512692, 0.8789657921394448, 0.8660247073420725, 0.8660067252881624, 0.831031630432828, 0.8090665515815217, 0.7989876103648559, 0.7789496082909256]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.3, 1) => 0.9269958581335827
finished with 14
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.2587277350650804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2587277350650804, 0.20893513131607044] ***
*** starting iteration: 2; err: [Inf, 0.2587277350650804, 0.20893513131607044] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2587277350650804, 0.20893513131607044, 0.1982531951636904] ***
*** starting iteration: 3; err: [Inf, 0.2587277350650804, 0.20893513131607044, 0.1982531951636904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2587277350650804, 0.20893513131607044, 0.1982531951636904, 0.193294885108253] ***
*** starting iteration: 4; err: [Inf, 0.2587277350650804, 0.20893513131607044, 0.1982531951636904, 0.193294885108253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2587277350650804, 0.20893513131607044, 0.1982531951636904, 0.193294885108253, 0.19101717401234372] ***
*** starting iteration: 5; err: [Inf, 0.2587277350650804, 0.20893513131607044, 0.1982531951636904, 0.193294885108253, 0.19101717401234372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2587277350650804, 0.20893513131607044, 0.1982531951636904, 0.193294885108253, 0.19101717401234372, 0.19011133997463384] ***
*** finished computation of 7 references, err: [Inf, 0.2587277350650804, 0.20893513131607044, 0.1982531951636904, 0.193294885108253, 0.19101717401234372, 0.19011133997463384] ***
*** center 1: selecting labels [1] (freq >= 1) [from [133, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 34, 0]]
** centroid: 2, normalized-entropy: 0.9763102872004581, [(1, 49), (2, 34)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [15, 79, 0]]
** centroid: 3, normalized-entropy: 0.6332905746550958, [(1, 15), (2, 79)]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 83, 22]]
** centroid: 5, normalized-entropy: 0.7405715327916912, [(2, 83), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [35, 52, 0]]
** centroid: 6, normalized-entropy: 0.9722794620968822, [(1, 35), (2, 52)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [78, 8, 0]]
** centroid: 7, normalized-entropy: 0.446481346896803, [(1, 78), (2, 8)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27549237216581246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27549237216581246, 0.21220290259007124] ***
*** starting iteration: 2; err: [Inf, 0.27549237216581246, 0.21220290259007124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27549237216581246, 0.21220290259007124, 0.19985742495022435] ***
*** starting iteration: 3; err: [Inf, 0.27549237216581246, 0.21220290259007124, 0.19985742495022435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27549237216581246, 0.21220290259007124, 0.19985742495022435, 0.18909242974819038] ***
*** starting iteration: 4; err: [Inf, 0.27549237216581246, 0.21220290259007124, 0.19985742495022435, 0.18909242974819038] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27549237216581246, 0.21220290259007124, 0.19985742495022435, 0.18909242974819038, 0.18768230855403498] ***
*** starting iteration: 5; err: [Inf, 0.27549237216581246, 0.21220290259007124, 0.19985742495022435, 0.18909242974819038, 0.18768230855403498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27549237216581246, 0.21220290259007124, 0.19985742495022435, 0.18909242974819038, 0.18768230855403498, 0.18732531113491424] ***
*** finished computation of 7 references, err: [Inf, 0.27549237216581246, 0.21220290259007124, 0.19985742495022435, 0.18909242974819038, 0.18768230855403498, 0.18732531113491424] ***
*** center 1: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [76, 41, 0]]
** centroid: 2, normalized-entropy: 0.9344491365829435, [(1, 76), (2, 41)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 46, 23]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 46), (3, 23)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 69, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [91, 17, 0]]
** centroid: 5, normalized-entropy: 0.6280710155029396, [(1, 91), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [13, 79, 0]]
** centroid: 6, normalized-entropy: 0.5876446142980418, [(1, 13), (2, 79)]
*** center 7: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.35096708652486597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35096708652486597, 0.2213065205030199] ***
*** starting iteration: 2; err: [Inf, 0.35096708652486597, 0.2213065205030199] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35096708652486597, 0.2213065205030199, 0.19725694179093686] ***
*** starting iteration: 3; err: [Inf, 0.35096708652486597, 0.2213065205030199, 0.19725694179093686] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35096708652486597, 0.2213065205030199, 0.19725694179093686, 0.18997317116646126] ***
*** starting iteration: 4; err: [Inf, 0.35096708652486597, 0.2213065205030199, 0.19725694179093686, 0.18997317116646126] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35096708652486597, 0.2213065205030199, 0.19725694179093686, 0.18997317116646126, 0.18528773466116752] ***
*** starting iteration: 5; err: [Inf, 0.35096708652486597, 0.2213065205030199, 0.19725694179093686, 0.18997317116646126, 0.18528773466116752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35096708652486597, 0.2213065205030199, 0.19725694179093686, 0.18997317116646126, 0.18528773466116752, 0.18415004509533273] ***
*** starting iteration: 6; err: [Inf, 0.35096708652486597, 0.2213065205030199, 0.19725694179093686, 0.18997317116646126, 0.18528773466116752, 0.18415004509533273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35096708652486597, 0.2213065205030199, 0.19725694179093686, 0.18997317116646126, 0.18528773466116752, 0.18415004509533273, 0.18325973000388587] ***
*** finished computation of 7 references, err: [Inf, 0.35096708652486597, 0.2213065205030199, 0.19725694179093686, 0.18997317116646126, 0.18528773466116752, 0.18415004509533273, 0.18325973000388587] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 82, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [80, 36, 0]]
** centroid: 2, normalized-entropy: 0.8935711016541908, [(1, 80), (2, 36)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [82, 9, 0]]
** centroid: 3, normalized-entropy: 0.4655024490815131, [(1, 82), (2, 9)]
*** center 4: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [57, 47, 0]]
** centroid: 5, normalized-entropy: 0.993320421638792, [(1, 57), (2, 47)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 88, 19]]
** centroid: 6, normalized-entropy: 0.6747323584057238, [(2, 88), (3, 19)]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9269958581335827, 0.9220028411645179, 0.912016807226388, 0.8999988011964059, 0.8999808191424958, 0.8930397463331595, 0.8830057602512692, 0.8789657921394448, 0.8660247073420725, 0.8660067252881624, 0.831031630432828, 0.8090665515815217, 0.7989876103648559, 0.7789496082909256]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :dnet, 0.3, 1) => 0.9269958581335827
finished with 15
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.19554934270719104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19554934270719104, 0.15185490816093242] ***
*** starting iteration: 2; err: [Inf, 0.19554934270719104, 0.15185490816093242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19554934270719104, 0.15185490816093242, 0.146981944207416] ***
*** starting iteration: 3; err: [Inf, 0.19554934270719104, 0.15185490816093242, 0.146981944207416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19554934270719104, 0.15185490816093242, 0.146981944207416, 0.1453419708508394] ***
*** finished computation of 7 references, err: [Inf, 0.19554934270719104, 0.15185490816093242, 0.146981944207416, 0.1453419708508394] ***
*** center 1: selecting labels [1] (freq >= 1) [from [148, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [71, 17, 0]]
** centroid: 2, normalized-entropy: 0.7080803256135676, [(1, 71), (2, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [68, 29, 0]]
** centroid: 3, normalized-entropy: 0.8800270477157599, [(1, 68), (2, 29)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 67, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 57, 22]]
** centroid: 5, normalized-entropy: 0.8533728188427888, [(2, 57), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [7, 83, 0]]
** centroid: 6, normalized-entropy: 0.39430023792747493, [(1, 7), (2, 83)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [94, 3, 0]]
** centroid: 7, normalized-entropy: 0.19902377455969078, [(1, 94), (2, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2179727833246815] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2179727833246815, 0.16081135034019398] ***
*** starting iteration: 2; err: [Inf, 0.2179727833246815, 0.16081135034019398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2179727833246815, 0.16081135034019398, 0.15053717101291603] ***
*** starting iteration: 3; err: [Inf, 0.2179727833246815, 0.16081135034019398, 0.15053717101291603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2179727833246815, 0.16081135034019398, 0.15053717101291603, 0.14742740909003468] ***
*** finished computation of 7 references, err: [Inf, 0.2179727833246815, 0.16081135034019398, 0.15053717101291603, 0.14742740909003468] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [79, 38, 0]]
** centroid: 1, normalized-entropy: 0.9095106630291536, [(1, 79), (2, 38)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 71, 2]]
** centroid: 2, normalized-entropy: 0.18116640155354563, [(2, 71), (3, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [134, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 24, 0]]
** centroid: 4, normalized-entropy: 0.8812908992306927, [(1, 56), (2, 24)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 41, 21]]
** centroid: 5, normalized-entropy: 0.9235785996175947, [(2, 41), (3, 21)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [123, 1, 0]]
** centroid: 7, normalized-entropy: 0.06766982525198395, [(1, 123), (2, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2101381818969515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2101381818969515, 0.17939338997576101] ***
*** starting iteration: 2; err: [Inf, 0.2101381818969515, 0.17939338997576101] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2101381818969515, 0.17939338997576101, 0.16174263159033733] ***
*** starting iteration: 3; err: [Inf, 0.2101381818969515, 0.17939338997576101, 0.16174263159033733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2101381818969515, 0.17939338997576101, 0.16174263159033733, 0.15217241873710544] ***
*** finished computation of 7 references, err: [Inf, 0.2101381818969515, 0.17939338997576101, 0.16174263159033733, 0.15217241873710544] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [58, 37, 0]]
** centroid: 1, normalized-entropy: 0.9644590583765235, [(1, 58), (2, 37)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 77, 2]]
** centroid: 2, normalized-entropy: 0.17033057560105982, [(2, 77), (3, 2)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [114, 18, 0]]
** centroid: 3, normalized-entropy: 0.5746356978376794, [(1, 114), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [107, 15, 0]]
** centroid: 4, normalized-entropy: 0.537783841832964, [(1, 107), (2, 15)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 31, 17]]
** centroid: 5, normalized-entropy: 0.9377342939868042, [(2, 31), (3, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 84, 0]]
** centroid: 6, normalized-entropy: 0.0922772477445739, [(1, 1), (2, 84)]
*** center 7: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9360048671425917, 0.9269958581335827, 0.9220028411645179, 0.912016807226388, 0.8999988011964059, 0.8999808191424958, 0.8930397463331595, 0.8830057602512692, 0.8789657921394448, 0.8660247073420725, 0.8660067252881624, 0.831031630432828, 0.8090665515815217, 0.7989876103648559, 0.7789496082909256]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9360048671425917
finished with 16
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.23712777595004966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23712777595004966, 0.17924585325053302] ***
*** finished computation of 7 references, err: [Inf, 0.23712777595004966, 0.17924585325053302] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [26, 38, 0]]
** centroid: 1, normalized-entropy: 0.9744894033980525, [(1, 26), (2, 38)]
*** center 2: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [44, 22, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 44), (2, 22)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 90, 22]]
** centroid: 4, normalized-entropy: 0.7147274731317893, [(2, 90), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 89, 0]]
** centroid: 5, normalized-entropy: 0.990851089632101, [(1, 71), (2, 89)]
*** center 6: selecting labels [1] (freq >= 1) [from [138, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [18, 17, 0]]
** centroid: 7, normalized-entropy: 0.9994110647387552, [(1, 18), (2, 17)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21887429802073935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21887429802073935, 0.16215673803157735] ***
*** finished computation of 7 references, err: [Inf, 0.21887429802073935, 0.16215673803157735] ***
*** center 1: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [37, 83, 2]]
** centroid: 3, normalized-entropy: 0.6292330068689667, [(1, 37), (2, 83), (3, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [63, 14, 0]]
** centroid: 4, normalized-entropy: 0.6840384356390419, [(1, 63), (2, 14)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 130, 21]]
** centroid: 5, normalized-entropy: 0.5818055236161183, [(2, 130), (3, 21)]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [98, 25, 0]]
** centroid: 7, normalized-entropy: 0.7283846722688453, [(1, 98), (2, 25)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.246227093191742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.246227093191742, 0.1825161505786554] ***
*** finished computation of 7 references, err: [Inf, 0.246227093191742, 0.1825161505786554] ***
*** center 1: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [2, 62, 2]]
** centroid: 4, normalized-entropy: 0.2463478666754271, [(1, 2), (2, 62), (3, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 6: selecting labels [1, 2, 3] (freq >= 1) [from [1, 109, 16]]
** centroid: 6, normalized-entropy: 0.38759706735380534, [(1, 1), (2, 109), (3, 16)]
*** center 7: selecting labels [1, 2, 3] (freq >= 1) [from [106, 91, 1]]
** centroid: 7, normalized-entropy: 0.6540120010187175, [(1, 106), (2, 91), (3, 1)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9360048671425917, 0.9269958581335827, 0.9220028411645179, 0.912016807226388, 0.9109738480995966, 0.8999988011964059, 0.8999808191424958, 0.8930397463331595, 0.8830057602512692, 0.8789657921394448, 0.8660247073420725, 0.8660067252881624, 0.831031630432828, 0.8090665515815217, 0.7989876103648559, 0.7789496082909256]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9360048671425917
finished with 16
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9360048671425917, 0.9269958581335827, 0.9220028411645179, 0.912016807226388, 0.9109738480995966, 0.8999988011964059, 0.8999808191424958, 0.8930397463331595, 0.8830057602512692, 0.8789657921394448, 0.8660247073420725, 0.8660067252881624, 0.831031630432828, 0.8090665515815217, 0.7989876103648559, 0.7789496082909256]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9360048671425917
finished with 16
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.21661703350953757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21661703350953757, 0.15946765683288686] ***
*** starting iteration: 2; err: [Inf, 0.21661703350953757, 0.15946765683288686] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21661703350953757, 0.15946765683288686, 0.1508002659303602] ***
*** starting iteration: 3; err: [Inf, 0.21661703350953757, 0.15946765683288686, 0.1508002659303602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21661703350953757, 0.15946765683288686, 0.1508002659303602, 0.1463126622296404] ***
*** finished computation of 7 references, err: [Inf, 0.21661703350953757, 0.15946765683288686, 0.1508002659303602, 0.1463126622296404] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [131, 1, 0]]
** centroid: 1, normalized-entropy: 0.06425462540840794, [(1, 131), (2, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 154, 32]]
** centroid: 2, normalized-entropy: 0.6623570516079519, [(2, 154), (3, 32)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [46, 109, 0]]
** centroid: 3, normalized-entropy: 0.8773118802464468, [(1, 46), (2, 109)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [124, 38, 0]]
** centroid: 4, normalized-entropy: 0.785889583138768, [(1, 124), (2, 38)]
*** center 5: selecting labels [1] (freq >= 1) [from [170, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [33, 83, 0]]
** centroid: 7, normalized-entropy: 0.8614872128808162, [(1, 33), (2, 83)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28220566201768815] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28220566201768815, 0.18426411438919604] ***
*** starting iteration: 2; err: [Inf, 0.28220566201768815, 0.18426411438919604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28220566201768815, 0.18426411438919604, 0.16092259680945425] ***
*** starting iteration: 3; err: [Inf, 0.28220566201768815, 0.18426411438919604, 0.16092259680945425] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28220566201768815, 0.18426411438919604, 0.16092259680945425, 0.1534595794789493] ***
*** finished computation of 7 references, err: [Inf, 0.28220566201768815, 0.18426411438919604, 0.16092259680945425, 0.1534595794789493] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [85, 28, 0]]
** centroid: 1, normalized-entropy: 0.8077527023327313, [(1, 85), (2, 28)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 24, 9]]
** centroid: 2, normalized-entropy: 0.8453509366224364, [(2, 24), (3, 9)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [63, 21, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 63), (2, 21)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 55, 6]]
** centroid: 4, normalized-entropy: 0.4637773498877517, [(2, 55), (3, 6)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 44, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [45, 27, 0]]
** centroid: 7, normalized-entropy: 0.954434002924965, [(1, 45), (2, 27)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2854005430389661] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2854005430389661, 0.16873117789812386] ***
*** starting iteration: 2; err: [Inf, 0.2854005430389661, 0.16873117789812386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2854005430389661, 0.16873117789812386, 0.15480886696779636] ***
*** starting iteration: 3; err: [Inf, 0.2854005430389661, 0.16873117789812386, 0.15480886696779636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2854005430389661, 0.16873117789812386, 0.15480886696779636, 0.14671698413789272] ***
*** finished computation of 7 references, err: [Inf, 0.2854005430389661, 0.16873117789812386, 0.15480886696779636, 0.14671698413789272] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 38, 14]]
** centroid: 1, normalized-entropy: 0.8403586716091169, [(2, 38), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [50, 30, 0]]
** centroid: 4, normalized-entropy: 0.954434002924965, [(1, 50), (2, 30)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [30, 58, 0]]
** centroid: 5, normalized-entropy: 0.9256859869821296, [(1, 30), (2, 58)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [40, 24, 0]]
** centroid: 6, normalized-entropy: 0.954434002924965, [(1, 40), (2, 24)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 52, 3]]
** centroid: 7, normalized-entropy: 0.30540057087920036, [(2, 52), (3, 3)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19739160897023975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19739160897023975, 0.16035732663795352] ***
*** starting iteration: 2; err: [Inf, 0.19739160897023975, 0.16035732663795352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19739160897023975, 0.16035732663795352, 0.15552331386692822] ***
*** starting iteration: 3; err: [Inf, 0.19739160897023975, 0.16035732663795352, 0.15552331386692822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19739160897023975, 0.16035732663795352, 0.15552331386692822, 0.1535814385842532] ***
*** finished computation of 7 references, err: [Inf, 0.19739160897023975, 0.16035732663795352, 0.15552331386692822, 0.1535814385842532] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [46, 11, 0]]
** centroid: 1, normalized-entropy: 0.7076690004167966, [(1, 46), (2, 11)]
*** center 2: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [46, 60, 0]]
** centroid: 4, normalized-entropy: 0.987380023288353, [(1, 46), (2, 60)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [11, 58, 0]]
** centroid: 5, normalized-entropy: 0.6329208984823799, [(1, 11), (2, 58)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 60, 20]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(2, 60), (3, 20)]
*** center 7: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23378183201700448] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23378183201700448, 0.15554529645014553] ***
*** starting iteration: 2; err: [Inf, 0.23378183201700448, 0.15554529645014553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23378183201700448, 0.15554529645014553, 0.14868675650656224] ***
*** starting iteration: 3; err: [Inf, 0.23378183201700448, 0.15554529645014553, 0.14868675650656224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23378183201700448, 0.15554529645014553, 0.14868675650656224, 0.14539611134148436] ***
*** finished computation of 7 references, err: [Inf, 0.23378183201700448, 0.15554529645014553, 0.14868675650656224, 0.14539611134148436] ***
*** center 1: selecting labels [1] (freq >= 1) [from [29, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [40, 38, 0]]
** centroid: 2, normalized-entropy: 0.9995256892936492, [(1, 40), (2, 38)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [50, 33, 0]]
** centroid: 3, normalized-entropy: 0.9695235828220429, [(1, 50), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [63, 26, 0]]
** centroid: 4, normalized-entropy: 0.8714630056611941, [(1, 63), (2, 26)]
*** center 5: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 86, 18]]
** centroid: 7, normalized-entropy: 0.6646953053493416, [(2, 86), (3, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29293285061698404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29293285061698404, 0.18851758874207736] ***
*** starting iteration: 2; err: [Inf, 0.29293285061698404, 0.18851758874207736] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29293285061698404, 0.18851758874207736, 0.16693112719058992] ***
*** starting iteration: 3; err: [Inf, 0.29293285061698404, 0.18851758874207736, 0.16693112719058992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29293285061698404, 0.18851758874207736, 0.16693112719058992, 0.16080481021944434] ***
*** finished computation of 7 references, err: [Inf, 0.29293285061698404, 0.18851758874207736, 0.16693112719058992, 0.16080481021944434] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [78, 39, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 78), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [105, 1, 0]]
** centroid: 2, normalized-entropy: 0.07701687574298331, [(1, 105), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 32, 4]]
** centroid: 4, normalized-entropy: 0.5032583347756457, [(2, 32), (3, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 48, 0]]
** centroid: 5, normalized-entropy: 0.9996995428565171, [(1, 50), (2, 48)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 12, 17]]
** centroid: 6, normalized-entropy: 0.9784493292686188, [(2, 12), (3, 17)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 49, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2303167949002236] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2303167949002236, 0.1596217752364464] ***
*** starting iteration: 2; err: [Inf, 0.2303167949002236, 0.1596217752364464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2303167949002236, 0.1596217752364464, 0.1501497395001352] ***
*** starting iteration: 3; err: [Inf, 0.2303167949002236, 0.1596217752364464, 0.1501497395001352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2303167949002236, 0.1596217752364464, 0.1501497395001352, 0.146250828220509] ***
*** finished computation of 7 references, err: [Inf, 0.2303167949002236, 0.1596217752364464, 0.1501497395001352, 0.146250828220509] ***
*** center 1: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [57, 31, 0]]
** centroid: 3, normalized-entropy: 0.9360814319397586, [(1, 57), (2, 31)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [51, 44, 0]]
** centroid: 4, normalized-entropy: 0.996079990851081, [(1, 51), (2, 44)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [25, 40, 0]]
** centroid: 5, normalized-entropy: 0.961236604722876, [(1, 25), (2, 40)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 84, 13]]
** centroid: 6, normalized-entropy: 0.5683625344629001, [(2, 84), (3, 13)]
*** center 7: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21707558754645287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21707558754645287, 0.1760992939006537] ***
*** starting iteration: 2; err: [Inf, 0.21707558754645287, 0.1760992939006537] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21707558754645287, 0.1760992939006537, 0.1636833762265742] ***
*** starting iteration: 3; err: [Inf, 0.21707558754645287, 0.1760992939006537, 0.1636833762265742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21707558754645287, 0.1760992939006537, 0.1636833762265742, 0.1555755113158375] ***
*** finished computation of 7 references, err: [Inf, 0.21707558754645287, 0.1760992939006537, 0.1636833762265742, 0.1555755113158375] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [80, 33, 0]]
** centroid: 1, normalized-entropy: 0.8713360108238786, [(1, 80), (2, 33)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 101, 16]]
** centroid: 2, normalized-entropy: 0.5756693370369834, [(2, 101), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [24, 37, 0]]
** centroid: 3, normalized-entropy: 0.9669852958320848, [(1, 24), (2, 37)]
*** center 4: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 15, 0]]
** centroid: 5, normalized-entropy: 0.9677884628267678, [(1, 23), (2, 15)]
*** center 6: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [23, 8, 0]]
** centroid: 7, normalized-entropy: 0.8238116333123173, [(1, 23), (2, 8)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19204890049807727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19204890049807727, 0.15231240070797503] ***
*** starting iteration: 2; err: [Inf, 0.19204890049807727, 0.15231240070797503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19204890049807727, 0.15231240070797503, 0.14863122526928782] ***
*** starting iteration: 3; err: [Inf, 0.19204890049807727, 0.15231240070797503, 0.14863122526928782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19204890049807727, 0.15231240070797503, 0.14863122526928782, 0.14785631169937552] ***
*** finished computation of 7 references, err: [Inf, 0.19204890049807727, 0.15231240070797503, 0.14863122526928782, 0.14785631169937552] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [44, 46, 0]]
** centroid: 1, normalized-entropy: 0.9996437496778561, [(1, 44), (2, 46)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [55, 1, 0]]
** centroid: 2, normalized-entropy: 0.12923377484588472, [(1, 55), (2, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [57, 16, 0]]
** centroid: 3, normalized-entropy: 0.7586638628883696, [(1, 57), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [44, 26, 0]]
** centroid: 4, normalized-entropy: 0.9517626756348312, [(1, 44), (2, 26)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 95, 18]]
** centroid: 5, normalized-entropy: 0.6326131852700402, [(2, 95), (3, 18)]
*** center 6: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20216652432456614] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20216652432456614, 0.18273145681619643] ***
*** starting iteration: 2; err: [Inf, 0.20216652432456614, 0.18273145681619643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20216652432456614, 0.18273145681619643, 0.17108103022165597] ***
*** starting iteration: 3; err: [Inf, 0.20216652432456614, 0.18273145681619643, 0.17108103022165597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20216652432456614, 0.18273145681619643, 0.17108103022165597, 0.15775480806082487] ***
*** finished computation of 7 references, err: [Inf, 0.20216652432456614, 0.18273145681619643, 0.17108103022165597, 0.15775480806082487] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [54, 56, 0]]
** centroid: 1, normalized-entropy: 0.9997615248696311, [(1, 54), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [37, 36, 0]]
** centroid: 2, normalized-entropy: 0.9998646331239297, [(1, 37), (2, 36)]
*** center 3: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [57, 19, 0]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(1, 57), (2, 19)]
*** center 5: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 82, 15]]
** centroid: 6, normalized-entropy: 0.6213290966942344, [(2, 82), (3, 15)]
*** center 7: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2658589680171572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2658589680171572, 0.16239078207686544] ***
*** starting iteration: 2; err: [Inf, 0.2658589680171572, 0.16239078207686544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2658589680171572, 0.16239078207686544, 0.14928350785560907] ***
*** starting iteration: 3; err: [Inf, 0.2658589680171572, 0.16239078207686544, 0.14928350785560907] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2658589680171572, 0.16239078207686544, 0.14928350785560907, 0.14497110042348504] ***
*** finished computation of 7 references, err: [Inf, 0.2658589680171572, 0.16239078207686544, 0.14928350785560907, 0.14497110042348504] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 90, 10]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(2, 90), (3, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 36, 0]]
** centroid: 2, normalized-entropy: 0.9572951876544017, [(1, 59), (2, 36)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 10, 0]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(1, 70), (2, 10)]
*** center 4: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [30, 51, 0]]
** centroid: 6, normalized-entropy: 0.9509560484549724, [(1, 30), (2, 51)]
*** center 7: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20723471611924468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20723471611924468, 0.16683873416669667] ***
*** starting iteration: 2; err: [Inf, 0.20723471611924468, 0.16683873416669667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20723471611924468, 0.16683873416669667, 0.15763757986482232] ***
*** starting iteration: 3; err: [Inf, 0.20723471611924468, 0.16683873416669667, 0.15763757986482232] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20723471611924468, 0.16683873416669667, 0.15763757986482232, 0.15148363525886088] ***
*** finished computation of 7 references, err: [Inf, 0.20723471611924468, 0.16683873416669667, 0.15763757986482232, 0.15148363525886088] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 4, 0]]
** centroid: 1, normalized-entropy: 0.30337483608641397, [(1, 70), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [79, 21, 0]]
** centroid: 2, normalized-entropy: 0.7414827399312738, [(1, 79), (2, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [13, 72, 0]]
** centroid: 3, normalized-entropy: 0.617151919200282, [(1, 13), (2, 72)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 60, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 35, 16]]
** centroid: 6, normalized-entropy: 0.8974271930876951, [(2, 35), (3, 16)]
*** center 7: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23703261219337582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23703261219337582, 0.171867480836343] ***
*** starting iteration: 2; err: [Inf, 0.23703261219337582, 0.171867480836343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23703261219337582, 0.171867480836343, 0.15990039694262667] ***
*** starting iteration: 3; err: [Inf, 0.23703261219337582, 0.171867480836343, 0.15990039694262667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23703261219337582, 0.171867480836343, 0.15990039694262667, 0.15415008670836688] ***
*** finished computation of 7 references, err: [Inf, 0.23703261219337582, 0.171867480836343, 0.15990039694262667, 0.15415008670836688] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [43, 42, 0]]
** centroid: 1, normalized-entropy: 0.9999001572094882, [(1, 43), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [80, 8, 0]]
** centroid: 2, normalized-entropy: 0.43949698692151346, [(1, 80), (2, 8)]
*** center 3: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [27, 60, 0]]
** centroid: 5, normalized-entropy: 0.8935711016541908, [(1, 27), (2, 60)]
*** center 6: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 91, 8]]
** centroid: 7, normalized-entropy: 0.40502013262424225, [(2, 91), (3, 8)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23790584104694426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23790584104694426, 0.16534783287905155] ***
*** starting iteration: 2; err: [Inf, 0.23790584104694426, 0.16534783287905155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23790584104694426, 0.16534783287905155, 0.15697267998196185] ***
*** starting iteration: 3; err: [Inf, 0.23790584104694426, 0.16534783287905155, 0.15697267998196185] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23790584104694426, 0.16534783287905155, 0.15697267998196185, 0.153538041675929] ***
*** finished computation of 7 references, err: [Inf, 0.23790584104694426, 0.16534783287905155, 0.15697267998196185, 0.153538041675929] ***
*** center 1: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [12, 77, 0]]
** centroid: 2, normalized-entropy: 0.5705411428522262, [(1, 12), (2, 77)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [78, 2, 0]]
** centroid: 3, normalized-entropy: 0.1686609314966701, [(1, 78), (2, 2)]
*** center 4: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [42, 40, 0]]
** centroid: 5, normalized-entropy: 0.9995708393473225, [(1, 42), (2, 40)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 73, 13]]
** centroid: 6, normalized-entropy: 0.6127425554686624, [(2, 73), (3, 13)]
*** center 7: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2108910582186654] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2108910582186654, 0.1623569163531065] ***
*** starting iteration: 2; err: [Inf, 0.2108910582186654, 0.1623569163531065] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2108910582186654, 0.1623569163531065, 0.15309756426140667] ***
*** starting iteration: 3; err: [Inf, 0.2108910582186654, 0.1623569163531065, 0.15309756426140667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2108910582186654, 0.1623569163531065, 0.15309756426140667, 0.1502754096761346] ***
*** finished computation of 7 references, err: [Inf, 0.2108910582186654, 0.1623569163531065, 0.15309756426140667, 0.1502754096761346] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [80, 9, 0]]
** centroid: 1, normalized-entropy: 0.4725472219330293, [(1, 80), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [5, 53, 0]]
** centroid: 2, normalized-entropy: 0.4236805715709106, [(1, 5), (2, 53)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [18, 27, 0]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(1, 18), (2, 27)]
*** center 4: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [61, 32, 0]]
** centroid: 6, normalized-entropy: 0.928675181093665, [(1, 61), (2, 32)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 73, 18]]
** centroid: 7, normalized-entropy: 0.7175106531195438, [(2, 73), (3, 18)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2099671890968457] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2099671890968457, 0.15595371971465646] ***
*** starting iteration: 2; err: [Inf, 0.2099671890968457, 0.15595371971465646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2099671890968457, 0.15595371971465646, 0.14631608694978057] ***
*** starting iteration: 3; err: [Inf, 0.2099671890968457, 0.15595371971465646, 0.14631608694978057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2099671890968457, 0.15595371971465646, 0.14631608694978057, 0.1408797432119027] ***
*** finished computation of 7 references, err: [Inf, 0.2099671890968457, 0.15595371971465646, 0.14631608694978057, 0.1408797432119027] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [51, 38, 0]]
** centroid: 1, normalized-entropy: 0.9845543528607513, [(1, 51), (2, 38)]
*** center 2: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [36, 37, 0]]
** centroid: 3, normalized-entropy: 0.9998646331239297, [(1, 36), (2, 37)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 66, 16]]
** centroid: 4, normalized-entropy: 0.7120640548905481, [(2, 66), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 56, 0]]
** centroid: 5, normalized-entropy: 0.2899860470332091, [(1, 3), (2, 56)]
*** center 6: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18258888974878937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18258888974878937, 0.1510390243511647] ***
*** starting iteration: 2; err: [Inf, 0.18258888974878937, 0.1510390243511647] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18258888974878937, 0.1510390243511647, 0.14466760667413472] ***
*** starting iteration: 3; err: [Inf, 0.18258888974878937, 0.1510390243511647, 0.14466760667413472] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18258888974878937, 0.1510390243511647, 0.14466760667413472, 0.14170779378712178] ***
*** finished computation of 7 references, err: [Inf, 0.18258888974878937, 0.1510390243511647, 0.14466760667413472, 0.14170779378712178] ***
*** center 1: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [40, 51, 0]]
** centroid: 2, normalized-entropy: 0.9894340222202265, [(1, 40), (2, 51)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 15, 0]]
** centroid: 3, normalized-entropy: 0.7166336117927455, [(1, 61), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [2, 54, 0]]
** centroid: 4, normalized-entropy: 0.2222848306856879, [(1, 2), (2, 54)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 64, 17]]
** centroid: 5, normalized-entropy: 0.7412466905234424, [(2, 64), (3, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19061480862274766] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19061480862274766, 0.1595007226988673] ***
*** starting iteration: 2; err: [Inf, 0.19061480862274766, 0.1595007226988673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19061480862274766, 0.1595007226988673, 0.157557368690148] ***
*** starting iteration: 3; err: [Inf, 0.19061480862274766, 0.1595007226988673, 0.157557368690148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19061480862274766, 0.1595007226988673, 0.157557368690148, 0.1558438381589949] ***
*** finished computation of 7 references, err: [Inf, 0.19061480862274766, 0.1595007226988673, 0.157557368690148, 0.1558438381589949] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [100, 5, 0]]
** centroid: 1, normalized-entropy: 0.2761954276479391, [(1, 100), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 35, 0]]
** centroid: 2, normalized-entropy: 0.9554189905653109, [(1, 58), (2, 35)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 40, 12]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(2, 40), (3, 12)]
*** center 4: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [10, 62, 0]]
** centroid: 5, normalized-entropy: 0.581321498763703, [(1, 10), (2, 62)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 57, 1]]
** centroid: 6, normalized-entropy: 0.12565805017256745, [(2, 57), (3, 1)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [54, 2, 0]]
** centroid: 7, normalized-entropy: 0.2222848306856879, [(1, 54), (2, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2630779037866741] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2630779037866741, 0.17474116413667798] ***
*** starting iteration: 2; err: [Inf, 0.2630779037866741, 0.17474116413667798] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2630779037866741, 0.17474116413667798, 0.16664613651111723] ***
*** starting iteration: 3; err: [Inf, 0.2630779037866741, 0.17474116413667798, 0.16664613651111723] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2630779037866741, 0.17474116413667798, 0.16664613651111723, 0.16467546060122548] ***
*** finished computation of 7 references, err: [Inf, 0.2630779037866741, 0.17474116413667798, 0.16664613651111723, 0.16467546060122548] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [92, 43, 0]]
** centroid: 1, normalized-entropy: 0.9027631199439022, [(1, 92), (2, 43)]
*** center 2: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 14, 0]]
** centroid: 3, normalized-entropy: 0.7706290693639406, [(1, 48), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [23, 63, 0]]
** centroid: 4, normalized-entropy: 0.8377698690066789, [(1, 23), (2, 63)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 17, 8]]
** centroid: 5, normalized-entropy: 0.9043814577244941, [(2, 17), (3, 8)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 65, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.245744938287884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.245744938287884, 0.2024886396136135] ***
*** starting iteration: 2; err: [Inf, 0.245744938287884, 0.2024886396136135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.245744938287884, 0.2024886396136135, 0.1788477100150194] ***
*** starting iteration: 3; err: [Inf, 0.245744938287884, 0.2024886396136135, 0.1788477100150194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.245744938287884, 0.2024886396136135, 0.1788477100150194, 0.1682864511841908] ***
*** finished computation of 7 references, err: [Inf, 0.245744938287884, 0.2024886396136135, 0.1788477100150194, 0.1682864511841908] ***
*** center 1: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [71, 7, 0]]
** centroid: 2, normalized-entropy: 0.4356133734874324, [(1, 71), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [82, 15, 0]]
** centroid: 3, normalized-entropy: 0.6213290966942344, [(1, 82), (2, 15)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 67, 5]]
** centroid: 4, normalized-entropy: 0.3638469981769295, [(2, 67), (3, 5)]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [3, 96, 14]]
** centroid: 5, normalized-entropy: 0.4492776307197651, [(1, 3), (2, 96), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26097930285334586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26097930285334586, 0.19839379787258804] ***
*** starting iteration: 2; err: [Inf, 0.26097930285334586, 0.19839379787258804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26097930285334586, 0.19839379787258804, 0.1669250901795458] ***
*** starting iteration: 3; err: [Inf, 0.26097930285334586, 0.19839379787258804, 0.1669250901795458] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26097930285334586, 0.19839379787258804, 0.1669250901795458, 0.15058024049550295] ***
*** finished computation of 7 references, err: [Inf, 0.26097930285334586, 0.19839379787258804, 0.1669250901795458, 0.15058024049550295] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [103, 5, 0]]
** centroid: 1, normalized-entropy: 0.2704505135124657, [(1, 103), (2, 5)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 65, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 53, 16]]
** centroid: 3, normalized-entropy: 0.7812812090702043, [(2, 53), (3, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [1, 49, 0]]
** centroid: 4, normalized-entropy: 0.14144054254182067, [(1, 1), (2, 49)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [40, 28, 0]]
** centroid: 5, normalized-entropy: 0.9774178175281716, [(1, 40), (2, 28)]
*** center 6: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2680502427965403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2680502427965403, 0.1609252391848713] ***
*** starting iteration: 2; err: [Inf, 0.2680502427965403, 0.1609252391848713] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2680502427965403, 0.1609252391848713, 0.15075859837047756] ***
*** starting iteration: 3; err: [Inf, 0.2680502427965403, 0.1609252391848713, 0.15075859837047756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2680502427965403, 0.1609252391848713, 0.15075859837047756, 0.14808290267921984] ***
*** finished computation of 7 references, err: [Inf, 0.2680502427965403, 0.1609252391848713, 0.15075859837047756, 0.14808290267921984] ***
*** center 1: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [81, 28, 0]]
** centroid: 3, normalized-entropy: 0.8220027830221787, [(1, 81), (2, 28)]
*** center 4: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 39, 0]]
** centroid: 5, normalized-entropy: 0.9804679314541813, [(1, 28), (2, 39)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [14, 56, 0]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(1, 14), (2, 56)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 74, 17]]
** centroid: 7, normalized-entropy: 0.6947570868163001, [(2, 74), (3, 17)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20576508047804237] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20576508047804237, 0.16515604245010762] ***
*** starting iteration: 2; err: [Inf, 0.20576508047804237, 0.16515604245010762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20576508047804237, 0.16515604245010762, 0.1517750992132351] ***
*** starting iteration: 3; err: [Inf, 0.20576508047804237, 0.16515604245010762, 0.1517750992132351] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20576508047804237, 0.16515604245010762, 0.1517750992132351, 0.14560244572721423] ***
*** finished computation of 7 references, err: [Inf, 0.20576508047804237, 0.16515604245010762, 0.1517750992132351, 0.14560244572721423] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [56, 5, 0]]
** centroid: 1, normalized-entropy: 0.4090731390438265, [(1, 56), (2, 5)]
*** center 2: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 87, 15]]
** centroid: 3, normalized-entropy: 0.6024308020404452, [(2, 87), (3, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [7, 70, 0]]
** centroid: 4, normalized-entropy: 0.43949698692151346, [(1, 7), (2, 70)]
*** center 5: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [69, 6, 0]]
** centroid: 6, normalized-entropy: 0.4021791902022729, [(1, 69), (2, 6)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [38, 25, 0]]
** centroid: 7, normalized-entropy: 0.9690632527820694, [(1, 38), (2, 25)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24598931113351136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24598931113351136, 0.16601775544695557] ***
*** starting iteration: 2; err: [Inf, 0.24598931113351136, 0.16601775544695557] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24598931113351136, 0.16601775544695557, 0.15163434459269046] ***
*** starting iteration: 3; err: [Inf, 0.24598931113351136, 0.16601775544695557, 0.15163434459269046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24598931113351136, 0.16601775544695557, 0.15163434459269046, 0.1463363005425781] ***
*** finished computation of 7 references, err: [Inf, 0.24598931113351136, 0.16601775544695557, 0.15163434459269046, 0.1463363005425781] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [43, 29, 0]]
** centroid: 1, normalized-entropy: 0.9725523165688429, [(1, 43), (2, 29)]
*** center 2: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [87, 1, 0]]
** centroid: 3, normalized-entropy: 0.08970338978685011, [(1, 87), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [62, 19, 0]]
** centroid: 4, normalized-entropy: 0.785889583138768, [(1, 62), (2, 19)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 50, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 38, 13]]
** centroid: 6, normalized-entropy: 0.8189555018403103, [(2, 38), (3, 13)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 63, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28308227683091536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28308227683091536, 0.18553025963995606] ***
*** starting iteration: 2; err: [Inf, 0.28308227683091536, 0.18553025963995606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28308227683091536, 0.18553025963995606, 0.16300121560320258] ***
*** starting iteration: 3; err: [Inf, 0.28308227683091536, 0.18553025963995606, 0.16300121560320258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28308227683091536, 0.18553025963995606, 0.16300121560320258, 0.1528059471976012] ***
*** finished computation of 7 references, err: [Inf, 0.28308227683091536, 0.18553025963995606, 0.16300121560320258, 0.1528059471976012] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [20, 33, 0]]
** centroid: 1, normalized-entropy: 0.9561550236844027, [(1, 20), (2, 33)]
*** center 2: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [38, 39, 0]]
** centroid: 4, normalized-entropy: 0.9998783322990061, [(1, 38), (2, 39)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 56, 17]]
** centroid: 5, normalized-entropy: 0.7829924501610913, [(2, 56), (3, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [65, 47, 0]]
** centroid: 6, normalized-entropy: 0.9812872088817248, [(1, 65), (2, 47)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 28, 3]]
** centroid: 7, normalized-entropy: 0.45868581620054033, [(2, 28), (3, 3)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.201435616184026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.201435616184026, 0.16764572133123876] ***
*** starting iteration: 2; err: [Inf, 0.201435616184026, 0.16764572133123876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.201435616184026, 0.16764572133123876, 0.15493316915258765] ***
*** starting iteration: 3; err: [Inf, 0.201435616184026, 0.16764572133123876, 0.15493316915258765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.201435616184026, 0.16764572133123876, 0.15493316915258765, 0.14893476903066039] ***
*** finished computation of 7 references, err: [Inf, 0.201435616184026, 0.16764572133123876, 0.15493316915258765, 0.14893476903066039] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [42, 28, 0]]
** centroid: 1, normalized-entropy: 0.9709505944546688, [(1, 42), (2, 28)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [33, 39, 0]]
** centroid: 2, normalized-entropy: 0.9949848281859699, [(1, 33), (2, 39)]
*** center 3: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 46, 3]]
** centroid: 4, normalized-entropy: 0.3322866302216152, [(2, 46), (3, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [58, 15, 0]]
** centroid: 5, normalized-entropy: 0.7327525499549903, [(1, 58), (2, 15)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 64, 10]]
** centroid: 6, normalized-entropy: 0.5713549744279549, [(2, 64), (3, 10)]
*** center 7: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2071633849106729] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2071633849106729, 0.17449502691440283] ***
*** starting iteration: 2; err: [Inf, 0.2071633849106729, 0.17449502691440283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2071633849106729, 0.17449502691440283, 0.165689828094095] ***
*** starting iteration: 3; err: [Inf, 0.2071633849106729, 0.17449502691440283, 0.165689828094095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2071633849106729, 0.17449502691440283, 0.165689828094095, 0.1603079817276448] ***
*** finished computation of 7 references, err: [Inf, 0.2071633849106729, 0.17449502691440283, 0.165689828094095, 0.1603079817276448] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [87, 22, 0]]
** centroid: 1, normalized-entropy: 0.725582675704817, [(1, 87), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [81, 4, 0]]
** centroid: 2, normalized-entropy: 0.2737691686829417, [(1, 81), (2, 4)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [3, 46, 0]]
** centroid: 3, normalized-entropy: 0.3322866302216152, [(1, 3), (2, 46)]
*** center 4: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 42, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 49, 0]]
** centroid: 6, normalized-entropy: 0.3860189005698936, [(1, 4), (2, 49)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 24, 17]]
** centroid: 7, normalized-entropy: 0.9788698505067782, [(2, 24), (3, 17)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2980794047936797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2980794047936797, 0.19971594401227777] ***
*** starting iteration: 2; err: [Inf, 0.2980794047936797, 0.19971594401227777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2980794047936797, 0.19971594401227777, 0.1695753919929266] ***
*** starting iteration: 3; err: [Inf, 0.2980794047936797, 0.19971594401227777, 0.1695753919929266] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2980794047936797, 0.19971594401227777, 0.1695753919929266, 0.15584632187895478] ***
*** finished computation of 7 references, err: [Inf, 0.2980794047936797, 0.19971594401227777, 0.1695753919929266, 0.15584632187895478] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [88, 26, 0]]
** centroid: 1, normalized-entropy: 0.7746319868686841, [(1, 88), (2, 26)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 12, 16]]
** centroid: 2, normalized-entropy: 0.9852281360342514, [(2, 12), (3, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [71, 32, 0]]
** centroid: 4, normalized-entropy: 0.8939563962625153, [(1, 71), (2, 32)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 40, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [11, 50, 0]]
** centroid: 6, normalized-entropy: 0.6807937753703207, [(1, 11), (2, 50)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 39, 2]]
** centroid: 7, normalized-entropy: 0.2811937964320427, [(2, 39), (3, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2073544433750212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2073544433750212, 0.15685957548301668] ***
*** starting iteration: 2; err: [Inf, 0.2073544433750212, 0.15685957548301668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2073544433750212, 0.15685957548301668, 0.14922120869578795] ***
*** starting iteration: 3; err: [Inf, 0.2073544433750212, 0.15685957548301668, 0.14922120869578795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2073544433750212, 0.15685957548301668, 0.14922120869578795, 0.1457404675837606] ***
*** finished computation of 7 references, err: [Inf, 0.2073544433750212, 0.15685957548301668, 0.14922120869578795, 0.1457404675837606] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 74, 18]]
** centroid: 1, normalized-entropy: 0.7131467486384921, [(2, 74), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [70, 30, 0]]
** centroid: 2, normalized-entropy: 0.8812908992306927, [(1, 70), (2, 30)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 16, 0]]
** centroid: 3, normalized-entropy: 0.7424875695421234, [(1, 60), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [31, 17, 0]]
** centroid: 4, normalized-entropy: 0.9377342939868042, [(1, 31), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [2, 55, 0]]
** centroid: 5, normalized-entropy: 0.2192973081321754, [(1, 2), (2, 55)]
*** center 6: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2678635884318501] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2678635884318501, 0.1757757715769112] ***
*** starting iteration: 2; err: [Inf, 0.2678635884318501, 0.1757757715769112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2678635884318501, 0.1757757715769112, 0.15938342059962451] ***
*** starting iteration: 3; err: [Inf, 0.2678635884318501, 0.1757757715769112, 0.15938342059962451] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2678635884318501, 0.1757757715769112, 0.15938342059962451, 0.1546658128881827] ***
*** finished computation of 7 references, err: [Inf, 0.2678635884318501, 0.1757757715769112, 0.15938342059962451, 0.1546658128881827] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [81, 35, 0]]
** centroid: 1, normalized-entropy: 0.8833882724833615, [(1, 81), (2, 35)]
*** center 2: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [18, 37, 0]]
** centroid: 3, normalized-entropy: 0.9121156307204275, [(1, 18), (2, 37)]
*** center 4: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 90, 21]]
** centroid: 5, normalized-entropy: 0.699772221773307, [(2, 90), (3, 21)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [13, 43, 0]]
** centroid: 6, normalized-entropy: 0.7817281222714539, [(1, 13), (2, 43)]
*** center 7: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24040453066956252] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24040453066956252, 0.16936580932233483] ***
*** starting iteration: 2; err: [Inf, 0.24040453066956252, 0.16936580932233483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24040453066956252, 0.16936580932233483, 0.15225935610849411] ***
*** starting iteration: 3; err: [Inf, 0.24040453066956252, 0.16936580932233483, 0.15225935610849411] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24040453066956252, 0.16936580932233483, 0.15225935610849411, 0.14806500417739152] ***
*** finished computation of 7 references, err: [Inf, 0.24040453066956252, 0.16936580932233483, 0.15225935610849411, 0.14806500417739152] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [62, 22, 0]]
** centroid: 1, normalized-entropy: 0.8296071030882032, [(1, 62), (2, 22)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 38, 16]]
** centroid: 2, normalized-entropy: 0.876716288999464, [(2, 38), (3, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 50, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [10, 61, 0]]
** centroid: 6, normalized-entropy: 0.5864477034453907, [(1, 10), (2, 61)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [56, 15, 0]]
** centroid: 7, normalized-entropy: 0.743898745288434, [(1, 56), (2, 15)]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 385,3 => 32,1 => 583), Dict(2 => 345,3 => 39,1 => 616))
[ Info: ===== scores for single classifier: {"micro_f1":0.922,"precision":0.922,"recall":0.922,"macro_recall":0.9348390739695088,"macro_f1":0.8676351080893512,"accuracy":0.922,"class_f1":{"2":0.8818181818181818,"3":0.7647058823529412,"1":0.9563812600969306},"class_precision":{"2":0.9238095238095239,"3":0.6190476190476191,"1":0.9517684887459807},"class_recall":{"2":0.8434782608695652,"3":1.0,"1":0.961038961038961}}
[ Info: ===== scores for 1: {"micro_f1":0.985,"precision":0.985,"recall":0.985,"macro_recall":0.9817519437084655,"macro_f1":0.9807270978402532,"accuracy":0.985,"class_f1":{"2":0.9784172661870504,"3":0.9743589743589743,"1":0.9894050529747351},"class_precision":{"2":0.9714285714285714,"3":0.9743589743589743,"1":0.9934533551554828},"class_recall":{"2":0.9855072463768116,"3":0.9743589743589743,"1":0.9853896103896104}}
[ Info: ===== scores for 5: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9647790615181919,"macro_f1":0.9578799370750751,"accuracy":0.97,"class_f1":{"2":0.9575070821529745,"3":0.9367088607594937,"1":0.9794238683127573},"class_precision":{"2":0.9362880886426593,"3":0.925,"1":0.993322203672788},"class_recall":{"2":0.9797101449275363,"3":0.9487179487179487,"1":0.9659090909090909}}
[ Info: ===== scores for 7: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.9730939350504567,"macro_f1":0.95771595451414,"accuracy":0.969,"class_f1":{"2":0.9563994374120957,"3":0.9382716049382716,"1":0.9784768211920529},"class_precision":{"2":0.9289617486338798,"3":0.9047619047619048,"1":0.9983108108108109},"class_recall":{"2":0.9855072463768116,"3":0.9743589743589743,"1":0.9594155844155844}}
[ Info: ===== scores for 9: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.966639640552684,"macro_f1":0.934882496001629,"accuracy":0.961,"class_f1":{"2":0.9449929478138223,"3":0.8837209302325582,"1":0.9759336099585062},"class_precision":{"2":0.9203296703296703,"3":0.8085106382978723,"1":0.99830220713073},"class_recall":{"2":0.9710144927536232,"3":0.9743589743589743,"1":0.9545454545454546}}
[ Info: ===== scores for 11: {"micro_f1":0.959,"precision":0.959,"recall":0.959,"macro_recall":0.9651323314366792,"macro_f1":0.9302727827373154,"accuracy":0.959,"class_f1":{"2":0.9421720733427362,"3":0.8735632183908045,"1":0.9750830564784052},"class_precision":{"2":0.9175824175824175,"3":0.7916666666666666,"1":0.9982993197278912},"class_recall":{"2":0.9681159420289855,"3":0.9743589743589743,"1":0.952922077922078}}
(score = 0.984, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.984, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.985, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.985, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.978, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.978, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.985,"k":1,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.985,"precision":0.985,"recall":0.985,"macro_recall":0.9817519437084655,"macro_f1":0.9807270978402532,"accuracy":0.985,"class_f1":{"2":0.9784172661870504,"3":0.9743589743589743,"1":0.9894050529747351},"class_precision":{"2":0.9714285714285714,"3":0.9743589743589743,"1":0.9934533551554828},"class_recall":{"2":0.9855072463768116,"3":0.9743589743589743,"1":0.9853896103896104}}
Test Summary: | Pass  Total
AKNC          |    8      8
[476, 2, 2, 14, 3, 3, 5, 2, 4, 1, 4, 1, 3, 5, 2, 55, 6, 1, 12, 2, 4, 15, 18, 3, 5, 2, 5, 5, 5, 1, 55, 3, 5, 5, 25, 14, 4, 28, 2, 4, 20, 15, 7, 8, 13, 17, 12, 16, 18, 5, 36, 3, 7, 2, 3, 2, 10, 4, 35, 34, 3, 8, 5, 7, 28, 2, 1, 202, 19, 116, 22, 29, 3, 11, 20, 28, 7, 17, 28, 1, 27, 6, 10, 22, 8, 9, 1, 46, 15, 3, 1, 4, 12, 7, 8, 3, 3, 201, 22, 16, 47, 6, 13, 1, 75, 14, 10, 4, 21, 23, 6, 96, 5, 36, 225, 11, 81, 42, 10, 98, 34, 17, 13, 5, 54, 14, 22, 49, 15, 28, 18, 5, 2, 13, 41, 8, 1, 6, 32, 2, 19, 10, 75, 20, 21, 28, 28, 26, 3, 59, 15, 249, 6, 108, 4, 1, 22, 29, 36, 11, 450, 28, 5, 7, 16, 291, 11, 7, 19, 20, 21, 65, 262, 7, 4, 25, 201, 7, 42, 64, 88, 24, 477, 8, 25, 6, 185, 62, 8, 11, 42, 46, 5, 7, 16, 20, 56, 82, 17, 18, 2, 44, 7, 15, 65, 3, 16, 11, 8, 7, 25, 3, 40, 14, 56, 38, 58, 33, 8, 18, 14, 6, 19, 47, 8, 18, 54, 5, 13, 24, 8, 8, 13, 30, 41, 23, 84, 9, 5, 52, 13, 15, 39, 18, 3, 7, 8, 195, 13, 15, 77, 5, 23, 10, 127, 8, 8, 13, 23, 16, 32, 7, 10, 3, 13, 32, 2, 46, 21, 84, 16, 25, 88, 26, 168, 28, 29, 54, 2, 38, 10, 41, 3, 76, 11, 36, 49, 7, 64, 53, 69, 34, 90, 18, 64, 26, 15, 4, 197, 34]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.701, speedup = 0.32627520948163247, eval_ratio = 0.071963)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3779761904761906,"recall":0.36892361111111116,"f1":null,"seconds":0.0002421196550130844,"exhaustive_search_seconds":0.0005903281271457672,"evaluations":448.8671875,"distances_sum":1691.4033070930623}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5477430555555554,"recall":0.5477430555555554,"f1":null,"seconds":0.00042380020022392273,"exhaustive_search_seconds":0.0005903281271457672,"evaluations":585.3671875,"distances_sum":1617.2797507295054}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6579861111111107,"recall":0.6579861111111107,"f1":null,"seconds":0.0005219336599111557,"exhaustive_search_seconds":0.0005903281271457672,"evaluations":722.984375,"distances_sum":1563.9911185424382}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7369791666666663,"recall":0.7369791666666663,"f1":0.7369791666666663,"seconds":0.0005380734801292419,"exhaustive_search_seconds":0.0005903281271457672,"evaluations":816.9453125,"distances_sum":1537.5274464973782}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7994791666666659,"recall":0.7994791666666659,"f1":0.7994791666666659,"seconds":0.0005340781062841415,"exhaustive_search_seconds":0.0005903281271457672,"evaluations":932.78125,"distances_sum":1517.451166810057}
KCenters.DeloneInvIndex> reached performance {"precision":0.835069444444444,"recall":0.835069444444444,"f1":0.835069444444444,"seconds":0.0005383547395467758,"exhaustive_search_seconds":0.0005903281271457672,"evaluations":1015.3828125,"distances_sum":1507.9014274483204}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8349999999999999, speedup = 0.4971310401071855, eval_ratio = 0.099957)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
