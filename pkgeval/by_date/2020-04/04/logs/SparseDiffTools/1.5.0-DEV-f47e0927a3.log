Julia Version 1.5.0-DEV.567
Commit f47e0927a3 (2020-04-03 02:05 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed NaNMath ────────────────────── v0.3.3
  Installed DiffResults ────────────────── v1.0.2
  Installed Compat ─────────────────────── v3.8.0
  Installed SpecialFunctions ───────────── v0.10.0
  Installed SparseDiffTools ────────────── v1.4.0
  Installed ArnoldiMethod ──────────────── v0.0.4
  Installed LightGraphs ────────────────── v1.3.1
  Installed Inflate ────────────────────── v0.1.2
  Installed Adapt ──────────────────────── v1.0.1
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed SimpleTraits ───────────────── v0.9.1
  Installed MacroTools ─────────────────── v0.5.5
  Installed OrderedCollections ─────────── v1.1.0
  Installed Requires ───────────────────── v1.0.1
  Installed FiniteDiff ─────────────────── v2.3.0
  Installed VertexSafeGraphs ───────────── v0.1.1
  Installed DataStructures ─────────────── v0.17.11
  Installed ForwardDiff ────────────────── v0.10.10
  Installed ArrayInterface ─────────────── v2.6.2
  Installed DiffRules ──────────────────── v1.0.1
  Installed StaticArrays ───────────────── v0.12.1
  Installed CommonSubexpressions ───────── v0.2.0
   Updating `~/.julia/environments/v1.5/Project.toml`
   47a9eef4 + SparseDiffTools v1.4.0
   Updating `~/.julia/environments/v1.5/Manifest.toml`
   79e6a3ab + Adapt v1.0.1
   ec485272 + ArnoldiMethod v0.0.4
   4fba245c + ArrayInterface v2.6.2
   bbf7d656 + CommonSubexpressions v0.2.0
   34da2185 + Compat v3.8.0
   e66e0078 + CompilerSupportLibraries_jll v0.3.3+0
   864edb3b + DataStructures v0.17.11
   163ba53b + DiffResults v1.0.2
   b552c78f + DiffRules v1.0.1
   6a86dc24 + FiniteDiff v2.3.0
   f6369f11 + ForwardDiff v0.10.10
   d25df0c9 + Inflate v0.1.2
   093fc24a + LightGraphs v1.3.1
   1914dd2f + MacroTools v0.5.5
   77ba4419 + NaNMath v0.3.3
   efe28fd5 + OpenSpecFun_jll v0.5.3+3
   bac558e1 + OrderedCollections v1.1.0
   ae029012 + Requires v1.0.1
   699a6c99 + SimpleTraits v0.9.1
   47a9eef4 + SparseDiffTools v1.4.0
   276daf66 + SpecialFunctions v0.10.0
   90137ffa + StaticArrays v0.12.1
   19fa3120 + VertexSafeGraphs v0.1.1
   2a0f44e3 + Base64
   ade2ca70 + Dates
   8bb1440f + DelimitedFiles
   8ba89e20 + Distributed
   b77e0a4c + InteractiveUtils
   76f85450 + LibGit2
   8f399da3 + Libdl
   37e2e46d + LinearAlgebra
   56ddb016 + Logging
   d6f4376e + Markdown
   a63ad114 + Mmap
   44cfe95a + Pkg
   de0858da + Printf
   3fa0cd96 + REPL
   9a3f8284 + Random
   ea8e919c + SHA
   9e88b42a + Serialization
   1a1011a3 + SharedArrays
   6462fe0b + Sockets
   2f01184e + SparseArrays
   10745b16 + Statistics
   8dfed614 + Test
   cf7118a7 + UUIDs
   4ec0a83e + Unicode
    Testing SparseDiffTools
     Status `/tmp/jl_oFZBpe/Project.toml`
   79e6a3ab Adapt v1.0.1
   4fba245c ArrayInterface v2.6.2
   aae01518 BandedMatrices v0.14.3
   ffab5731 BlockBandedMatrices v0.7.2
   34da2185 Compat v3.8.0
   864edb3b DataStructures v0.17.11
   6a86dc24 FiniteDiff v2.3.0
   f6369f11 ForwardDiff v0.10.10
   42fd0dbc IterativeSolvers v0.8.3
   093fc24a LightGraphs v1.3.1
   ae029012 Requires v1.0.1
   1bc83da4 SafeTestsets v0.0.1
   47a9eef4 SparseDiffTools v1.4.0
   684fba80 SparsityDetection v0.2.0
   90137ffa StaticArrays v0.12.1
   19fa3120 VertexSafeGraphs v0.1.1
   e88e6eb3 Zygote v0.4.12
   b77e0a4c InteractiveUtils
   37e2e46d LinearAlgebra
   9a3f8284 Random
   2f01184e SparseArrays
   8dfed614 Test
     Status `/tmp/jl_oFZBpe/Manifest.toml`
   621f4979 AbstractFFTs v0.5.0
   79e6a3ab Adapt v1.0.1
   ec485272 ArnoldiMethod v0.0.4
   4fba245c ArrayInterface v2.6.2
   4c555306 ArrayLayouts v0.1.5
   aae01518 BandedMatrices v0.14.3
   b99e7846 BinaryProvider v0.5.8
   8e7c35d0 BlockArrays v0.11.2
   ffab5731 BlockBandedMatrices v0.7.2
   7057c7e9 Cassette v0.3.1
   bbf7d656 CommonSubexpressions v0.2.0
   34da2185 Compat v3.8.0
   e66e0078 CompilerSupportLibraries_jll v0.3.3+0
   864edb3b DataStructures v0.17.11
   163ba53b DiffResults v1.0.2
   b552c78f DiffRules v1.0.1
   7a1cc6ca FFTW v1.2.0
   f5851436 FFTW_jll v3.3.9+5
   1a297f60 FillArrays v0.8.6
   6a86dc24 FiniteDiff v2.3.0
   f6369f11 ForwardDiff v0.10.10
   7869d1d1 IRTools v0.3.1
   d25df0c9 Inflate v0.1.2
   1d5cc7b8 IntelOpenMP_jll v2018.0.3+0
   42fd0dbc IterativeSolvers v0.8.3
   093fc24a LightGraphs v1.3.1
   856f044c MKL_jll v2019.0.117+2
   1914dd2f MacroTools v0.5.5
   a3b82374 MatrixFactorizations v0.3.1
   872c559c NNlib v0.6.6
   77ba4419 NaNMath v0.3.3
   efe28fd5 OpenSpecFun_jll v0.5.3+3
   bac558e1 OrderedCollections v1.1.0
   3cdcf5f2 RecipesBase v0.8.0
   189a3867 Reexport v0.2.0
   ae029012 Requires v1.0.1
   1bc83da4 SafeTestsets v0.0.1
   699a6c99 SimpleTraits v0.9.1
   47a9eef4 SparseDiffTools v1.4.0
   684fba80 SparsityDetection v0.2.0
   276daf66 SpecialFunctions v0.10.0
   90137ffa StaticArrays v0.12.1
   19fa3120 VertexSafeGraphs v0.1.1
   e88e6eb3 Zygote v0.4.12
   700de1a5 ZygoteRules v0.2.0
   2a0f44e3 Base64
   ade2ca70 Dates
   8bb1440f DelimitedFiles
   8ba89e20 Distributed
   b77e0a4c InteractiveUtils
   76f85450 LibGit2
   8f399da3 Libdl
   37e2e46d LinearAlgebra
   56ddb016 Logging
   d6f4376e Markdown
   a63ad114 Mmap
   44cfe95a Pkg
   de0858da Printf
   3fa0cd96 REPL
   9a3f8284 Random
   ea8e919c SHA
   9e88b42a Serialization
   1a1011a3 SharedArrays
   6462fe0b Sockets
   2f01184e SparseArrays
   10745b16 Statistics
   8dfed614 Test
   cf7118a7 UUIDs
   4ec0a83e Unicode
Test Summary:                  | Pass  Total
Exact coloring via contraction |   20     20
103.183443 seconds (8.34 M allocations: 426.422 MiB, 0.60% gc time)
Test Summary:              | Pass  Total
Greedy distance-1 coloring |   20     20
  0.616759 seconds (1.01 M allocations: 51.627 MiB, 2.35% gc time)
Test Summary:        | Pass  Total
Greedy star coloring |  816    816
  1.072697 seconds (829.88 k allocations: 41.330 MiB, 0.99% gc time)
┌ Warning: `find_root` is deprecated, use `find_root!` instead.
│   caller = find at acyclic_coloring.jl:195 [inlined]
└ @ Core ~/.julia/packages/SparseDiffTools/FANCq/src/coloring/acyclic_coloring.jl:195
┌ Warning: `find_root` is deprecated, use `find_root!` instead.
│   caller = find at acyclic_coloring.jl:195 [inlined]
└ @ Core ~/.julia/packages/SparseDiffTools/FANCq/src/coloring/acyclic_coloring.jl:195
┌ Warning: `find_root` is deprecated, use `find_root!` instead.
│   caller = find at acyclic_coloring.jl:195 [inlined]
└ @ Core ~/.julia/packages/SparseDiffTools/FANCq/src/coloring/acyclic_coloring.jl:195
┌ Warning: `find_root` is deprecated, use `find_root!` instead.
│   caller = find at acyclic_coloring.jl:195 [inlined]
└ @ Core ~/.julia/packages/SparseDiffTools/FANCq/src/coloring/acyclic_coloring.jl:195
┌ Warning: `find_root` is deprecated, use `find_root!` instead.
│   caller = find at acyclic_coloring.jl:195 [inlined]
└ @ Core ~/.julia/packages/SparseDiffTools/FANCq/src/coloring/acyclic_coloring.jl:195
Test Summary:    |    Pass    Total
Acyclic coloring | 2872590  2872590
 37.631964 seconds (107.66 M allocations: 6.097 GiB, 9.47% gc time)
┌ Warning: Assignment to `n` in soft scope is ambiguous because a global variable by the same name exists: `n` will be treated as a new local. Disambiguate by using `local n` to suppress this warning or `global n` to assign to the existing global variable.
└ @ ~/.julia/packages/SparseDiffTools/FANCq/test/test_matrix2graph.jl:13
Test Summary:              |  Pass  Total
Matrix to graph conversion | 67079  67079
  3.499458 seconds (4.36 M allocations: 416.217 MiB, 2.78% gc time)
[ Info: ended definitions
[ Info: second passed
[ Info: third passed
[ Info: 4th passed
[ Info: which (::SparseDiffTools.var"#forwarddiff_color_jacobian##kw")(::Any, ::typeof(SparseDiffTools.forwarddiff_color_jacobian), f, x::AbstractArray{var"#s20",N} where N where var"#s20"<:Number) in SparseDiffTools at /home/pkgeval/.julia/packages/SparseDiffTools/FANCq/src/differentiation/compute_jacobian_ad.jl:67
[ Info: 5
Test Summary:            | Pass  Total
AD using colorvec vector |   43     43
1493.372600 seconds (2.17 G allocations: 90.366 GiB, 1.92% gc time)
Integration test: Error During Test at /home/pkgeval/.julia/packages/SafeTestsets/A83XK/src/SafeTestsets.jl:25
  Got exception outside of a @test
  LoadError: MethodError: no method matching overdub(::Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:name, :metadata, :tag, :pass, :bindingscache, :hooktoggle),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:m, :n, :I, :J),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:path, :cursor),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:chunks, :len, :dims),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:ht, :count, :ndel),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta,1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}}, ::typeof(iterate), ::Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Tuple{Float64,Float64},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}})
  Closest candidates are:
    overdub(!Matched::Cassette.Context{nametype(SparsityContext),M,T,P,B,H} where H<:Union{Cassette.DisableHooks, Nothing} where B<:Union{Nothing, IdDict{Module,Dict{Symbol,Cassette.BindingMeta}}} where P<:Cassette.AbstractPass where T<:Union{Nothing, Cassette.Tag} where M, ::Any, ::Any...) at /home/pkgeval/.julia/packages/SparsityDetection/jUfqh/src/sparsity_tracker.jl:122
    overdub(!Matched::Cassette.Context{nametype(HessianSparsityContext),M,T,P,B,H} where H<:Union{Cassette.DisableHooks, Nothing} where B<:Union{Nothing, IdDict{Module,Dict{Symbol,Cassette.BindingMeta}}} where P<:Cassette.AbstractPass where T<:Union{Nothing, Cassette.Tag} where M, ::Any, ::Any...) at /home/pkgeval/.julia/packages/SparsityDetection/jUfqh/src/hessian.jl:136
    overdub(!Matched::Cassette.Context, ::Any...) at /home/pkgeval/.julia/packages/Cassette/7OymZ/src/overdub.jl:531
    ...
  Stacktrace:
   [1] call at /home/pkgeval/.julia/packages/Cassette/7OymZ/src/context.jl:451 [inlined]
   [2] fallback at /home/pkgeval/.julia/packages/Cassette/7OymZ/src/context.jl:448 [inlined]
   [3] recurse(::Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}, ::typeof(Cassette.overdub), ::Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:name, :metadata, :tag, :pass, :bindingscache, :hooktoggle),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:m, :n, :I, :J),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:path, :cursor),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:chunks, :len, :dims),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:ht, :count, :ndel),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta,1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:context, :value, :meta),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:name, :metadata, :tag, :pass, :bindingscache, :hooktoggle),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:m, :n, :I, :J),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:path, :cursor),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:chunks, :len, :dims),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:ht, :count, :ndel),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta,1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:name, :metadata, :tag, :pass, :bindingscache, :hooktoggle),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:m, :n, :I, :J),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:path, :cursor),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:chunks, :len, :dims),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:ht, :count, :ndel),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta,1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:data, :meta),Tuple{Cassette.Immutable{Cassette.Meta},Cassette.Immutable{Cassette.Meta}}}}}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}}, ::typeof(iterate), ::Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Tuple{Float64,Float64},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:context, :value, :meta),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:name, :metadata, :tag, :pass, :bindingscache, :hooktoggle),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:m, :n, :I, :J),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:path, :cursor),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:chunks, :len, :dims),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:ht, :count, :ndel),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta,1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:data, :meta),Tuple{Cassette.Immutable{Cassette.Meta},Cassette.Immutable{Cassette.Meta}}}}}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}}) at /home/pkgeval/.julia/packages/Cassette/7OymZ/src/overdub.jl:486
   [4] _overdub_union_provinance(::Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}, ::Function, ::Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:name, :metadata, :tag, :pass, :bindingscache, :hooktoggle),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:m, :n, :I, :J),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:path, :cursor),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:chunks, :len, :dims),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:ht, :count, :ndel),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta,1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:context, :value, :meta),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:name, :metadata, :tag, :pass, :bindingscache, :hooktoggle),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:m, :n, :I, :J),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:path, :cursor),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:chunks, :len, :dims),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:ht, :count, :ndel),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta,1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:name, :metadata, :tag, :pass, :bindingscache, :hooktoggle),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:m, :n, :I, :J),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:path, :cursor),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:chunks, :len, :dims),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:ht, :count, :ndel),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta,1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:data, :meta),Tuple{Cassette.Immutable{Cassette.Meta},Cassette.Immutable{Cassette.Meta}}}}}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}}, ::Vararg{Any,N} where N) at /home/pkgeval/.julia/packages/SparsityDetection/jUfqh/src/sparsity_tracker.jl:113
   [5] overdub(::Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}, ::Function, ::Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:name, :metadata, :tag, :pass, :bindingscache, :hooktoggle),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:m, :n, :I, :J),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:path, :cursor),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:chunks, :len, :dims),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:ht, :count, :ndel),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta,1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:context, :value, :meta),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:name, :metadata, :tag, :pass, :bindingscache, :hooktoggle),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:m, :n, :I, :J),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:path, :cursor),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:chunks, :len, :dims),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:ht, :count, :ndel),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta,1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:name, :metadata, :tag, :pass, :bindingscache, :hooktoggle),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:m, :n, :I, :J),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:path, :cursor),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:chunks, :len, :dims),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:ht, :count, :ndel),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta,1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:data, :meta),Tuple{Cassette.Immutable{Cassette.Meta},Cassette.Immutable{Cassette.Meta}}}}}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}}, ::Function, ::Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Tuple{Float64,Float64},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:context, :value, :meta),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:name, :metadata, :tag, :pass, :bindingscache, :hooktoggle),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:m, :n, :I, :J),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:path, :cursor),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:chunks, :len, :dims),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:ht, :count, :ndel),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta,1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:data, :meta),Tuple{Cassette.Immutable{Cassette.Meta},Cassette.Immutable{Cassette.Meta}}}}}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}}) at /home/pkgeval/.julia/packages/SparsityDetection/jUfqh/src/sparsity_tracker.jl:138
   [6] iterate at /home/pkgeval/.julia/packages/Cassette/7OymZ/src/tagging.jl:460 [inlined]
   [7] recurse(::Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}, ::typeof(iterate), ::Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Tuple{Float64,Float64},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:context, :value, :meta),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:name, :metadata, :tag, :pass, :bindingscache, :hooktoggle),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:m, :n, :I, :J),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:path, :cursor),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:chunks, :len, :dims),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:ht, :count, :ndel),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta,1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:data, :meta),Tuple{Cassette.Immutable{Cassette.Meta},Cassette.Immutable{Cassette.Meta}}}}}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}}) at /home/pkgeval/.julia/packages/Cassette/7OymZ/src/overdub.jl:0
   [8] _overdub_union_provinance(::Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}, ::Function, ::Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Tuple{Float64,Float64},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:context, :value, :meta),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:name, :metadata, :tag, :pass, :bindingscache, :hooktoggle),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:m, :n, :I, :J),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:path, :cursor),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:chunks, :len, :dims),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:ht, :count, :ndel),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta,1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:data, :meta),Tuple{Cassette.Immutable{Cassette.Meta},Cassette.Immutable{Cassette.Meta}}}}}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}}) at /home/pkgeval/.julia/packages/SparsityDetection/jUfqh/src/sparsity_tracker.jl:113
   [9] overdub(::Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}, ::Function, ::Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Tuple{Float64,Float64},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:context, :value, :meta),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:name, :metadata, :tag, :pass, :bindingscache, :hooktoggle),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:m, :n, :I, :J),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:path, :cursor),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:chunks, :len, :dims),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:ht, :count, :ndel),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta,1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:data, :meta),Tuple{Cassette.Immutable{Cassette.Meta},Cassette.Immutable{Cassette.Meta}}}}}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}}) at /home/pkgeval/.julia/packages/SparsityDetection/jUfqh/src/sparsity_tracker.jl:138
   [10] indexed_iterate at ./tuple.jl:84 [inlined]
   [11] recurse(::Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}, ::typeof(Base.indexed_iterate), ::Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Tuple{Float64,Float64},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:context, :value, :meta),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:name, :metadata, :tag, :pass, :bindingscache, :hooktoggle),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:m, :n, :I, :J),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:path, :cursor),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:chunks, :len, :dims),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:ht, :count, :ndel),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta,1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:data, :meta),Tuple{Cassette.Immutable{Cassette.Meta},Cassette.Immutable{Cassette.Meta}}}}}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}}, ::Int64) at /home/pkgeval/.julia/packages/Cassette/7OymZ/src/overdub.jl:0
   [12] _overdub_union_provinance(::Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}, ::Function, ::Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Tuple{Float64,Float64},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:context, :value, :meta),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:name, :metadata, :tag, :pass, :bindingscache, :hooktoggle),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:m, :n, :I, :J),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:path, :cursor),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:chunks, :len, :dims),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:ht, :count, :ndel),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta,1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:data, :meta),Tuple{Cassette.Immutable{Cassette.Meta},Cassette.Immutable{Cassette.Meta}}}}}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}}, ::Vararg{Any,N} where N) at /home/pkgeval/.julia/packages/SparsityDetection/jUfqh/src/sparsity_tracker.jl:113
   [13] overdub(::Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}, ::Function, ::Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Tuple{Float64,Float64},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:context, :value, :meta),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:name, :metadata, :tag, :pass, :bindingscache, :hooktoggle),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:m, :n, :I, :J),Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:path, :cursor),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:chunks, :len, :dims),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:ht, :count, :ndel),Tuple{Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta,1}}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Mutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Tuple{Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta}}}}},Cassette.Immutable{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},NamedTuple{(:data, :meta),Tuple{Cassette.Immutable{Cassette.Meta},Cassette.Immutable{Cassette.Meta}}}}}}},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}}, ::Int64) at /home/pkgeval/.julia/packages/SparsityDetection/jUfqh/src/sparsity_tracker.jl:138
   [14] promote at ./promotion.jl:282 [inlined]
   [15] recurse(::Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}, ::typeof(promote), ::Int64, ::Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Float64,Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta,Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}}) at /home/pkgeval/.julia/packages/Cassette/7OymZ/src/overdub.jl:0
   [16] _overdub_union_provinance(::Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}, ::Function, ::Int64, ::Vararg{Any,N} where N) at /home/pkgeval/.julia/packages/SparsityDetection/jUfqh/src/sparsity_tracker.jl:113
   [17] overdub(::Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}, ::Function, ::Int64, ::Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Float64,Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta,Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}}) at /home/pkgeval/.julia/packages/SparsityDetection/jUfqh/src/sparsity_tracker.jl:138
   [18] * at ./promotion.jl:312 [inlined]
   [19] recurse(::Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}, ::typeof(*), ::Int64, ::Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Float64,Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta,Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}}) at /home/pkgeval/.julia/packages/Cassette/7OymZ/src/overdub.jl:0
   [20] _overdub_union_provinance(::Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}, ::Function, ::Int64, ::Vararg{Any,N} where N) at /home/pkgeval/.julia/packages/SparsityDetection/jUfqh/src/sparsity_tracker.jl:113
   [21] overdub(::Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}, ::Function, ::Int64, ::Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Float64,Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta,Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}}) at /home/pkgeval/.julia/packages/SparsityDetection/jUfqh/src/sparsity_tracker.jl:138
   [22] f at /home/pkgeval/.julia/packages/SparseDiffTools/FANCq/test/test_integration.jl:23 [inlined]
   [23] recurse(::Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}, ::typeof(Main.##260.f), ::Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Array{Float64,1},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}}, ::Cassette.Tagged{Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},Array{Float64,1},Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Array{Cassette.Meta{Union{SparsityDetection.Input, SparsityDetection.Output, SparsityDetection.ProvinanceSet},Cassette.NoMetaMeta},1},Cassette.Context{nametype(SparsityContext),Tuple{SparsityDetection.Sparsity,SparsityDetection.Path},Cassette.Tag{nametype(SparsityContext),0x000000002ff309c3,Nothing},SparsityDetection.var"##PassType#254",IdDict{Module,Dict{Symbol,Cassette.BindingMeta}},Cassette.DisableHooks}}) at /home/pkgeval/.julia/packages/Cassette/7OymZ/src/overdub.jl:0
   [24] sparsity!(::Function, ::Array{Float64,1}, ::Array{Float64,1}; sparsity::SparsityDetection.Sparsity, verbose::Bool) at /home/pkgeval/.julia/packages/SparsityDetection/jUfqh/src/program_sparsity.jl:29
   [25] sparsity!(::Function, ::Array{Float64,1}, ::Array{Float64,1}) at /home/pkgeval/.julia/packages/SparsityDetection/jUfqh/src/program_sparsity.jl:23
   [26] top-level scope at /home/pkgeval/.julia/packages/SparseDiffTools/FANCq/test/test_integration.jl:40
   [27] include(::Function, ::Module, ::String) at ./Base.jl:380
   [28] include at ./Base.jl:368 [inlined]
   [29] include(::String) at /home/pkgeval/.julia/packages/SafeTestsets/A83XK/src/SafeTestsets.jl:23
   [30] top-level scope at /home/pkgeval/.julia/packages/SparseDiffTools/FANCq/test/runtests.jl:14
   [31] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [32] top-level scope at /home/pkgeval/.julia/packages/SparseDiffTools/FANCq/test/runtests.jl:14
   [33] eval(::Module, ::Any) at ./boot.jl:331
   [34] top-level scope at /home/pkgeval/.julia/packages/SafeTestsets/A83XK/src/SafeTestsets.jl:23
   [35] top-level scope at util.jl:175
   [36] top-level scope at /home/pkgeval/.julia/packages/SparseDiffTools/FANCq/test/runtests.jl:14
   [37] include(::String) at ./client.jl:441
   [38] top-level scope at none:6
   [39] eval(::Module, ::Any) at ./boot.jl:331
   [40] exec_options(::Base.JLOptions) at ./client.jl:264
   [41] _start() at ./client.jl:490
  in expression starting at /home/pkgeval/.julia/packages/SparseDiffTools/FANCq/test/test_integration.jl:40
  
Test Summary:    | Error  Total
Integration test |     1      1
ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/SparseDiffTools/FANCq/test/runtests.jl:7
ERROR: Package SparseDiffTools errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:53
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1523
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:316
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:303
 [5] #test#68 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [7] #test#67 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [11] top-level scope at none:16
