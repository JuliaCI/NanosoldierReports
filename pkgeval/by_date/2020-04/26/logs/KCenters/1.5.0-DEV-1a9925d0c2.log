Julia Version 1.5.0-DEV.684
Commit 1a9925d0c2 (2020-04-25 09:48 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Reexport ──────────────────── v0.2.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed Missings ──────────────────── v0.4.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed OrderedCollections ────────── v1.1.0
  Installed KCenters ──────────────────── v0.2.2
  Installed MLDataPattern ─────────────── v0.5.2
  Installed DataFrames ────────────────── v0.20.2
  Installed InvertedIndices ───────────── v1.0.0
  Installed JSON ──────────────────────── v0.21.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed DataStructures ────────────── v0.17.13
  Installed Compat ────────────────────── v3.8.0
  Installed Parsers ───────────────────── v1.0.2
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed TableTraits ───────────────── v1.0.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MappedArrays ──────────────── v0.2.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Tables ────────────────────── v1.0.4
  Installed MLDataUtils ───────────────── v0.5.1
  Installed DataAPI ───────────────────── v1.2.0
  Installed SimilaritySearch ──────────── v0.3.19
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.2.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.13
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.2
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_6HWfrA/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_6HWfrA/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.2.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.13
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.932025450070699
[ Info: 0.8307796732584636
[ Info: 0.5533601232866446
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33956977538764477
mean(cdnet.distances) = 0.34983977985878784
mean(crand.distances) = 0.3669296875347694
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2255859375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2255859375,"f1":null,"seconds":3.887340426445007e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":5.3984375,"distances_sum":588.9223051129954}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8618943556443565,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.2578125,"distances_sum":2047.3674318800847}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7868714618714626,"seconds":4.4461339712142944e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":7.671875,"distances_sum":1743.787069413898}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7734375,"f1":0.8618943556443565,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.2578125,"distances_sum":2047.3674318800847}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.90638215950716,"seconds":5.472451448440552e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.4609375,"distances_sum":2311.892681948434}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9470695970695977,"seconds":6.387010216712952e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.7890625,"distances_sum":2582.1591893967925}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9701865842490847,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.9140625,"distances_sum":2744.6202644015857}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9572000915750923,"seconds":5.928799510002136e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.859375,"distances_sum":2667.468885637065}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9255494505494513,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.578125,"distances_sum":2496.6969104035393}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9701865842490847,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.9140625,"distances_sum":2744.6202644015857}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9708161630036634,"seconds":6.087124347686768e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.921875,"distances_sum":2759.3836228085593}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9824404761904764,"seconds":6.152316927909851e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.96875,"distances_sum":2855.173979128279}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9789262820512825,"seconds":6.379559636116028e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.953125,"distances_sum":2819.022645024227}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.974089972527473,"seconds":6.12996518611908e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.9375,"distances_sum":2770.558869750689}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9790579212454217,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.953125,"distances_sum":2823.5354253066726}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9740556318681322,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.90625,"distances_sum":2794.0141767406917}, best_list's length: 14, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.974221611721612,"seconds":6.932765245437622e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.8984375,"distances_sum":2798.6305372377515}, best_list's length: 16, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9677734375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9824404761904764,"seconds":6.152316927909851e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.96875,"distances_sum":2855.173979128279}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9677734375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9824404761904764,"seconds":6.152316927909851e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.96875,"distances_sum":2855.173979128279}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.8045922827172836,"seconds":4.895031452178955e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.890625,"distances_sum":1686.3480898213593}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6904296875,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6904296875,"f1":0.8045922827172836,"seconds":4.895031452178955e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.890625,"distances_sum":1686.3480898213593}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9324118589743595,"seconds":5.997717380523682e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.7109375,"distances_sum":2388.8338938815027}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9380551739926747,"seconds":5.8710575103759766e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.7421875,"distances_sum":2454.3781166406216}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9312073343323349,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.6796875,"distances_sum":2371.1490153410923}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8468245296370306,"seconds":5.187466740608215e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.1640625,"distances_sum":1894.4437672311533}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8569862429237438,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.3359375,"distances_sum":1963.5698438875731}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9380551739926747,"seconds":5.8710575103759766e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.7421875,"distances_sum":2454.3781166406216}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9594894688644693,"seconds":6.355345249176025e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.890625,"distances_sum":2542.137698521212}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9750228937728942,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9140625,"distances_sum":2683.291667374462}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9718578296703302,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8828125,"distances_sum":2647.3005980356465}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9514194139194144,"seconds":5.3960829973220825e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.765625,"distances_sum":2548.6718265172785}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9750228937728942,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9140625,"distances_sum":2683.291667374462}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9750228937728942,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.9140625,"distances_sum":2683.291667374462}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.138671875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.138671875,"f1":null,"seconds":2.9280781745910645e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":4.390625,"distances_sum":378.33841658511517}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6083984375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6083984375,"f1":0.7399893509268515,"seconds":4.686415195465088e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":7.3125,"distances_sum":1505.3396378579014}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6083984375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6083984375,"f1":0.7399893509268515,"seconds":4.686415195465088e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":7.3125,"distances_sum":1505.3396378579014}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6484375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6484375,"f1":0.7767038517038526,"seconds":4.699453711509705e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":7.546875,"distances_sum":1603.7875765944318}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6484375,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6484375,"f1":0.7767038517038526,"seconds":4.699453711509705e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":7.546875,"distances_sum":1603.7875765944318}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9167239010989017,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.578125,"distances_sum":2258.840814780854}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.857421875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.857421875,"f1":0.9167239010989017,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.578125,"distances_sum":2258.840814780854}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.857421875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.857421875,"f1":0.9167239010989017,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.578125,"distances_sum":2258.840814780854}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.189453125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.189453125,"f1":null,"seconds":2.7064234018325806e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":5.03125,"distances_sum":502.80707514783194}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.703125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.703125,"f1":0.8097135503385509,"seconds":4.5765191316604614e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.96875,"distances_sum":1750.3692637028585}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3740234375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3740234375,"f1":null,"seconds":3.373250365257263e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":5.8515625,"distances_sum":975.0656567974765}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.703125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.703125,"f1":0.8097135503385509,"seconds":4.5765191316604614e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.96875,"distances_sum":1750.3692637028585}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9031250000000008,"seconds":5.276873707771301e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.53125,"distances_sum":2183.377624967331}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9358375999001005,"seconds":5.258247256278992e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.625,"distances_sum":2423.4019464226767}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8968078796203803,"seconds":5.075708031654358e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.5078125,"distances_sum":2206.493562765937}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.869974643412144,"seconds":4.852190613746643e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.2578125,"distances_sum":2074.3112642080678}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.9358375999001005,"seconds":5.258247256278992e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.625,"distances_sum":2423.4019464226767}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9597126831501837,"seconds":5.373731255531311e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8046875,"distances_sum":2603.248867819815}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9569425366300371,"seconds":5.273148417472839e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8046875,"distances_sum":2586.7101386855034}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9566277472527479,"seconds":5.276873707771301e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8359375,"distances_sum":2533.513192443456}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9531478937728942,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.7734375,"distances_sum":2563.020373215503}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9439217032967038,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.734375,"distances_sum":2477.8778096458695}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9597126831501837,"seconds":5.373731255531311e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8046875,"distances_sum":2603.248867819815}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9597126831501837,"seconds":5.373731255531311e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8046875,"distances_sum":2603.248867819815}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8577438186813195,"seconds":5.217269062995911e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.3515625,"distances_sum":1861.9224235213997}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.8577438186813195,"seconds":5.217269062995911e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.3515625,"distances_sum":1861.9224235213997}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8629774739149747,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.359375,"distances_sum":1901.407808431509}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9589743589743592,"seconds":6.3478946685791016e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8203125,"distances_sum":2476.5497901123144}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8730545496170504,"seconds":5.0514936447143555e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.3203125,"distances_sum":1924.9937855807232}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9589743589743592,"seconds":6.3478946685791016e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8203125,"distances_sum":2476.5497901123144}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9593437812187816,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8515625,"distances_sum":2496.7532406029836}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9593437812187816,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8515625,"distances_sum":2496.7532406029836}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9296875,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9593437812187816,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8515625,"distances_sum":2496.7532406029836}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4228515625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4228515625,"f1":null,"seconds":3.9637088775634766e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":6.3359375,"distances_sum":1023.8593238370115}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1689453125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1689453125,"f1":null,"seconds":2.9299408197402954e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":4.9140625,"distances_sum":485.5441698459993}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4228515625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4228515625,"f1":null,"seconds":3.9637088775634766e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":6.3359375,"distances_sum":1023.8593238370115}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8578452797202805,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":7.9296875,"distances_sum":1984.7570641746502}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8608204295704306,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.03125,"distances_sum":1985.6399188180187}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6982421875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6982421875,"f1":0.8100736069486079,"seconds":5.071982741355896e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":7.875,"distances_sum":1798.8337656797787}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7903346653346659,"seconds":5.155801773071289e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":7.78125,"distances_sum":1711.2206222088364}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8670563811188821,"seconds":5.619600415229797e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.0625,"distances_sum":2017.843357411731}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8568655303030313,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":7.9375,"distances_sum":1989.459506206549}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7843338952713961,"seconds":5.101785063743591e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":7.6171875,"distances_sum":1656.0177697658166}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":8,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.8670563811188821,"seconds":5.619600415229797e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.0625,"distances_sum":2017.843357411731}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9699290293040297,"seconds":6.355345249176025e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.921875,"distances_sum":2713.581329312169}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9495821886446891,"seconds":6.297603249549866e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.78125,"distances_sum":2561.6718981372114}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.967542353479854,"seconds":6.487593054771423e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.9140625,"distances_sum":2683.6719600918486}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9563301282051284,"seconds":6.4391642808914185e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.875,"distances_sum":2608.3430440211637}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8076171875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8076171875,"f1":0.8861612345987352,"seconds":6.372109055519104e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.4375,"distances_sum":2147.4614267315656}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":10,"bsize":9},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9699290293040297,"seconds":6.355345249176025e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.921875,"distances_sum":2713.581329312169}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":10,"bsize":9},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9699290293040297,"seconds":6.355345249176025e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.921875,"distances_sum":2713.581329312169}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.43359375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.43359375,"f1":null,"seconds":4.108995199203491e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":6.484375,"distances_sum":979.2610955867939}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6962890625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6962890625,"f1":0.8095526001776009,"seconds":4.7869980335235596e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.546875,"distances_sum":1666.8208166116624}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6962890625,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6962890625,"f1":0.8095526001776009,"seconds":4.7869980335235596e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.546875,"distances_sum":1666.8208166116624}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8658893190143196,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.1796875,"distances_sum":1939.490019069423}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9147467116217124,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.7109375,"distances_sum":2182.4419564773802}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8525390625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8525390625,"f1":0.9147467116217124,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.7109375,"distances_sum":2182.4419564773802}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9490384615384618,"seconds":5.748122930526733e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8203125,"distances_sum":2441.6295285979973}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9542868589743596,"seconds":5.926936864852905e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8359375,"distances_sum":2465.0605998789742}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9437042124542132,"seconds":5.455687642097473e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8203125,"distances_sum":2342.465208871775}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9542868589743596,"seconds":5.926936864852905e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8359375,"distances_sum":2465.0605998789742}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9189453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9542868589743596,"seconds":5.926936864852905e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8359375,"distances_sum":2465.0605998789742}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5673828125, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.5673828125,"f1":null,"seconds":3.917142748832703e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.703125,"distances_sum":1350.3784083813232}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8683580308580315,"seconds":4.8782676458358765e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.21875,"distances_sum":1983.571716138166}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7841796875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7841796875,"f1":0.8683580308580315,"seconds":4.8782676458358765e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.21875,"distances_sum":1983.571716138166}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9501347610722615,"seconds":6.141141057014465e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.796875,"distances_sum":2516.720180874159}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9416755119880126,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.703125,"distances_sum":2432.920327954689}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.960233516483517,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.875,"distances_sum":2577.126549357039}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.960233516483517,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.875,"distances_sum":2577.126549357039}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9699633699633701,"seconds":5.971640348434448e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9453125,"distances_sum":2611.6488189796055}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9798191391941393,"seconds":6.366521120071411e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9453125,"distances_sum":2716.6217071071733}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9682177197802201,"seconds":6.42240047454834e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.921875,"distances_sum":2639.8989343894373}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9784970238095241,"seconds":6.444752216339111e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9375,"distances_sum":2702.3170100716716}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9607028388278391,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.875,"distances_sum":2570.782282456913}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9651442307692311,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.875,"distances_sum":2634.379998068991}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.97340315934066,"seconds":6.016343832015991e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9140625,"distances_sum":2666.585767036914}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9798191391941393,"seconds":6.366521120071411e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9453125,"distances_sum":2716.6217071071733}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9798191391941393,"seconds":6.366521120071411e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9453125,"distances_sum":2716.6217071071733}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6875, conf: {"ssize":1,"bsize":4}, perf: {"precision":0.9854166666666666,"recall":0.6875,"f1":0.7946919400044408,"seconds":4.522502422332764e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.765625,"distances_sum":1260.7396117976757}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6875,"state":{"ssize":1,"bsize":4},"perf":{"precision":0.9854166666666666,"recall":0.6875,"f1":0.7946919400044408,"seconds":4.522502422332764e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.765625,"distances_sum":1260.7396117976757}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.986625744047619,"recall":0.7705078125,"f1":0.8561887331418585,"seconds":4.82611358165741e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.421875,"distances_sum":1480.251746461729}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7705078125,"state":{"ssize":1,"bsize":5},"perf":{"precision":0.986625744047619,"recall":0.7705078125,"f1":0.8561887331418585,"seconds":4.82611358165741e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.421875,"distances_sum":1480.251746461729}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":0.9896763392857144,"recall":0.912109375,"f1":0.9464128319597074,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.890625,"distances_sum":1972.2851812655356}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":5,"bsize":7}, perf: {"precision":0.9867931547619049,"recall":0.8701171875,"f1":0.9202695741758246,"seconds":5.358830094337463e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.765625,"distances_sum":1865.106656191558}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":6,"bsize":8}, perf: {"precision":0.9915364583333334,"recall":0.9111328125,"f1":0.9458748282967038,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8125,"distances_sum":1982.3220835146992}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":2,"bsize":6}, perf: {"precision":0.9877697172619048,"recall":0.84375,"f1":0.9050487923534805,"seconds":5.172565579414368e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.609375,"distances_sum":1733.284675549477}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":0.9896763392857144,"recall":0.912109375,"f1":0.9464128319597074,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.890625,"distances_sum":1972.2851812655356}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.912109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":0.9896763392857144,"recall":0.912109375,"f1":0.9464128319597074,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.890625,"distances_sum":1972.2851812655356}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3779296875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3779296875,"f1":null,"seconds":3.302469849586487e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":6.125,"distances_sum":679.1223375108555}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8705965909090918,"seconds":4.773959517478943e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.1015625,"distances_sum":1658.9131250458208}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8705965909090918,"seconds":4.773959517478943e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.1015625,"distances_sum":1658.9131250458208}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9347069597069602,"seconds":5.306676030158997e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.609375,"distances_sum":2051.4201708972387}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9658882783882787,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8203125,"distances_sum":2209.209152122837}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8978427822177828,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.3125,"distances_sum":1794.6954199667864}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9658882783882787,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8203125,"distances_sum":2209.209152122837}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9693280677655682,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9375,"distances_sum":2202.091674456956}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9795959249084251,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9375,"distances_sum":2278.248484311027}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9695512820512824,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8515625,"distances_sum":2209.698064862804}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9795959249084251,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9375,"distances_sum":2278.248484311027}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9795959249084251,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9375,"distances_sum":2278.248484311027}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.390625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.390625,"f1":null,"seconds":4.12575900554657e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":6.4140625,"distances_sum":775.1287953617383}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21484375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.21484375,"f1":null,"seconds":3.475695848464966e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":6.078125,"distances_sum":460.61224511407846}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.201171875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.201171875,"f1":null,"seconds":2.8815120458602905e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":5.8671875,"distances_sum":418.1719221376681}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.390625,"state":{"ssize":2,"bsize":2},"perf":{"precision":null,"recall":0.390625,"f1":null,"seconds":4.12575900554657e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":6.4140625,"distances_sum":775.1287953617383}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8563285672660679,"seconds":4.76837158203125e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":7.9609375,"distances_sum":1632.8730845357447}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.564453125, conf: {"ssize":6,"bsize":3}, perf: {"precision":null,"recall":0.564453125,"f1":null,"seconds":4.032626748085022e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":7.3828125,"distances_sum":1105.7798647693185}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8752313658563665,"seconds":4.867091774940491e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.09375,"distances_sum":1702.4672247064561}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7919921875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7919921875,"f1":0.8752313658563665,"seconds":4.867091774940491e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.09375,"distances_sum":1702.4672247064561}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9552655677655685,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.8671875,"distances_sum":2188.9120967496056}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9548420329670335,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.8359375,"distances_sum":2195.3396310616563}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9568681318681322,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.7890625,"distances_sum":2229.783041963267}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.9004864926739933,"seconds":5.2675604820251465e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.5625,"distances_sum":1811.268202084381}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.9184872419247423,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.7109375,"distances_sum":1956.576551161924}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9296245421245427,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.765625,"distances_sum":2015.6991346403925}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9045558608058616,"seconds":5.319714546203613e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.640625,"distances_sum":1818.216373347965}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8978802447552454,"seconds":5.219131708145142e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.5078125,"distances_sum":1827.4195818496582}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.939777930402931,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.8125,"distances_sum":2089.704059012304}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9300881410256416,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.8046875,"distances_sum":2012.5156799504882}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9568681318681322,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.7890625,"distances_sum":2229.783041963267}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9228515625,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9568681318681322,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.7890625,"distances_sum":2229.783041963267}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1982421875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1982421875,"f1":null,"seconds":2.982094883918762e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":5.859375,"distances_sum":430.69516512880983}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.59765625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.59765625,"f1":0.7320849289599296,"seconds":4.1369348764419556e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.3046875,"distances_sum":1222.7705956350947}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.59765625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.59765625,"f1":0.7320849289599296,"seconds":4.1369348764419556e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.3046875,"distances_sum":1222.7705956350947}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.7976419413919421,"seconds":4.373490810394287e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.4140625,"distances_sum":1471.5680946675232}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66015625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.66015625,"f1":0.7800348956598963,"seconds":4.4852495193481445e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.484375,"distances_sum":1392.0239446608746}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6845703125,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6845703125,"f1":0.7976419413919421,"seconds":4.373490810394287e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.4140625,"distances_sum":1471.5680946675232}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8605524683649692,"seconds":4.841014742851257e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.75,"distances_sum":1724.3141241097628}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9459706959706965,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.796875,"distances_sum":2227.4399197010403}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8681672494172502,"seconds":4.86522912979126e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.96875,"distances_sum":1714.685841496667}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.70703125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.70703125,"f1":0.8144475316350325,"seconds":4.626810550689697e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.765625,"distances_sum":1497.5029145815088}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.716796875, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.716796875,"f1":0.8249755452880461,"seconds":4.595145583152771e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.734375,"distances_sum":1533.503999177118}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9497596153846158,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.765625,"distances_sum":2252.7018937400458}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9497596153846158,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.765625,"distances_sum":2252.7018937400458}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.912109375,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9497596153846158,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.765625,"distances_sum":2252.7018937400458}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7099609375, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.7099609375,"f1":null,"seconds":4.796311259269714e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.9453125,"distances_sum":1456.0640434888562}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.423828125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.423828125,"f1":null,"seconds":3.8389116525650024e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":6.7890625,"distances_sum":746.0011850199725}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7099609375,"state":{"ssize":1,"bsize":4},"perf":{"precision":null,"recall":0.7099609375,"f1":null,"seconds":4.796311259269714e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.9453125,"distances_sum":1456.0640434888562}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7978515625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7978515625,"f1":0.8768184940059945,"seconds":4.9658119678497314e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.21875,"distances_sum":1712.393318986615}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8897784507159513,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.265625,"distances_sum":1754.7945292459028}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.814453125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.814453125,"f1":0.8897784507159513,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.265625,"distances_sum":1754.7945292459028}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9006295787545796,"seconds":5.381181836128235e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.46875,"distances_sum":1839.228108042732}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.939520375457876,"seconds":6.433576345443726e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.828125,"distances_sum":2076.2825308541755}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.89453125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.939520375457876,"seconds":6.433576345443726e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.828125,"distances_sum":2076.2825308541755}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.89453125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.939520375457876,"seconds":6.433576345443726e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.828125,"distances_sum":2076.2825308541755}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2421875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2421875,"f1":null,"seconds":3.1832605600357056e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.0625,"distances_sum":513.245127414599}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2421875,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.2421875,"f1":null,"seconds":3.1832605600357056e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.0625,"distances_sum":513.245127414599}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.7953681734931741,"seconds":4.490837454795837e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.03125,"distances_sum":1375.072608227806}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4208984375, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4208984375,"f1":null,"seconds":3.5222619771957397e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.734375,"distances_sum":790.180256417701}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6787109375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6787109375,"f1":0.7953681734931741,"seconds":4.490837454795837e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.03125,"distances_sum":1375.072608227806}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8056640625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8056640625,"f1":0.8849509865134872,"seconds":4.9173831939697266e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.1640625,"distances_sum":1795.3567172911235}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8786203379953388,"seconds":4.986301064491272e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.265625,"distances_sum":1759.5924896199065}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9506353021978027,"seconds":5.535781383514404e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.921875,"distances_sum":2195.988434665217}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9115670787545793,"seconds":5.260109901428223e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.5390625,"distances_sum":1933.024148970048}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7021484375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.7021484375,"f1":0.8130739052614061,"seconds":4.6174973249435425e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.0625,"distances_sum":1472.3069026383005}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9506353021978027,"seconds":5.535781383514404e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.921875,"distances_sum":2195.988434665217}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9130859375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9506353021978027,"seconds":5.535781383514404e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.921875,"distances_sum":2195.988434665217}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2060546875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2060546875,"f1":null,"seconds":2.814456820487976e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":5.0390625,"distances_sum":514.0423043674408}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8626919955044965,"seconds":4.645437002182007e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":7.875,"distances_sum":1850.9378151788367}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.771484375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.771484375,"f1":0.8626919955044965,"seconds":4.645437002182007e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":7.875,"distances_sum":1850.9378151788367}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80859375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.80859375,"f1":0.88498844905095,"seconds":4.90434467792511e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.2578125,"distances_sum":1961.2443617312522}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9289205586080591,"seconds":5.194917321205139e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.671875,"distances_sum":2204.385460183859}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.87890625,"f1":0.9289205586080591,"seconds":5.194917321205139e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.671875,"distances_sum":2204.385460183859}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9514995421245425,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.78125,"distances_sum":2343.9230696669956}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9465888278388284,"seconds":5.159527063369751e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.703125,"distances_sum":2348.645933355929}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9514995421245425,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.78125,"distances_sum":2343.9230696669956}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.916015625,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9514995421245425,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.78125,"distances_sum":2343.9230696669956}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5791015625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5791015625,"f1":0.7159649378399386,"seconds":3.91155481338501e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.4296875,"distances_sum":1288.667908583735}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5498046875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5498046875,"f1":0.6893625471750477,"seconds":4.628673195838928e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.25,"distances_sum":1165.6951625690451}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5791015625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5791015625,"f1":0.7159649378399386,"seconds":3.91155481338501e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.4296875,"distances_sum":1288.667908583735}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9051287254412265,"seconds":5.159527063369751e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.484375,"distances_sum":2095.873814497317}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9335711163836168,"seconds":6.077811121940613e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.78125,"distances_sum":2273.9546955435253}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9280682858807867,"seconds":5.356967449188232e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.75,"distances_sum":2264.3488141343455}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8809211621711629,"seconds":4.848465323448181e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.125,"distances_sum":1904.2330167919517}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.9335711163836168,"seconds":6.077811121940613e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.78125,"distances_sum":2273.9546955435253}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9708733974358975,"seconds":6.625428795814514e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.953125,"distances_sum":2513.2992815873918}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9728079212454217,"seconds":6.455928087234497e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.953125,"distances_sum":2540.195624515371}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9507726648351653,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.84375,"distances_sum":2415.90163158842}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9776614010989013,"seconds":6.794929504394531e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.953125,"distances_sum":2580.178387969186}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9418040293040297,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7578125,"distances_sum":2365.493838777618}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9531536172161177,"seconds":5.379319190979004e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7734375,"distances_sum":2462.0169295575283}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9776614010989013,"seconds":6.794929504394531e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.953125,"distances_sum":2580.178387969186}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9776614010989013,"seconds":6.794929504394531e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.953125,"distances_sum":2580.178387969186}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.634765625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.634765625,"f1":0.7586703227328231,"seconds":4.541128873825073e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.3203125,"distances_sum":1521.5613769826882}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2001953125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2001953125,"f1":null,"seconds":3.246590495109558e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":5.203125,"distances_sum":491.57679719716214}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.33203125, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.33203125,"f1":null,"seconds":3.4999102354049683e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":5.6328125,"distances_sum":762.4190411793905}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.634765625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.634765625,"f1":0.7586703227328231,"seconds":4.541128873825073e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.3203125,"distances_sum":1521.5613769826882}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.887028596403597,"seconds":5.019828677177429e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.453125,"distances_sum":1997.8752195938405}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8115234375,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8115234375,"f1":0.887028596403597,"seconds":5.019828677177429e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.453125,"distances_sum":1997.8752195938405}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.9006410256410265,"seconds":5.120411515235901e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.5625,"distances_sum":2066.9548209766554}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9595867673992678,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.8125,"distances_sum":2461.929589545989}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9059643481518487,"seconds":5.109235644340515e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.4296875,"distances_sum":2207.9844881395215}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9595867673992678,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.8125,"distances_sum":2461.929589545989}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9595867673992678,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.8125,"distances_sum":2461.929589545989}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.556640625,"f1":0.7027555777555784,"seconds":3.909692168235779e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.1875,"distances_sum":1292.8078402618667}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.556640625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.556640625,"f1":0.7027555777555784,"seconds":3.909692168235779e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.1875,"distances_sum":1292.8078402618667}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7918836371961381,"seconds":4.490837454795837e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.96875,"distances_sum":1517.1976751926725}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8907743298368307,"seconds":5.027279257774353e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.453125,"distances_sum":2021.0221058568409}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8994047619047626,"seconds":4.990026354789734e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.4609375,"distances_sum":2048.710285035784}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9363209706959712,"seconds":5.323439836502075e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.890625,"distances_sum":2262.8546828402295}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8876953125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8876953125,"f1":0.9363209706959712,"seconds":5.323439836502075e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.890625,"distances_sum":2262.8546828402295}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9375,"f1":0.965516254578755,"seconds":5.669891834259033e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9453125,"distances_sum":2471.761588031866}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9703525641025644,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9296875,"distances_sum":2518.4623654742795}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9464915293040299,"seconds":5.474314093589783e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.90625,"distances_sum":2342.8570452032372}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9407368672993677,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.7421875,"distances_sum":2333.448626696963}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9583218864468868,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.84375,"distances_sum":2456.7268772283783}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9565361721611727,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8828125,"distances_sum":2438.6134241510485}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9433894230769235,"seconds":5.587935447692871e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.765625,"distances_sum":2356.9096362824157}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9703525641025644,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9296875,"distances_sum":2518.4623654742795}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9703525641025644,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9296875,"distances_sum":2518.4623654742795}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8652227980352988,"seconds":5.288049578666687e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.140625,"distances_sum":1944.488209190282}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5419921875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5419921875,"f1":0.6791760323010329,"seconds":4.298985004425049e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.4375,"distances_sum":1246.5719781842772}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7763671875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7763671875,"f1":0.8652227980352988,"seconds":5.288049578666687e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.140625,"distances_sum":1944.488209190282}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9240702006327013,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.734375,"distances_sum":2320.530465858489}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9277529761904768,"seconds":6.172806024551392e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.703125,"distances_sum":2349.175155557835}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.935760073260074,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7421875,"distances_sum":2412.962643241891}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8673309329559337,"seconds":5.107372999191284e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.125,"distances_sum":1982.9888043996054}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.88671875,"state":{"ssize":9,"bsize":7},"perf":{"precision":1.0,"recall":0.88671875,"f1":0.935760073260074,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7421875,"distances_sum":2412.962643241891}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9366217116217121,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7578125,"distances_sum":2421.9112698629433}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9594754204129208,"seconds":5.433335900306702e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.796875,"distances_sum":2611.8211019739992}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9711538461538464,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8515625,"distances_sum":2683.1680834382532}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9718578296703303,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.90625,"distances_sum":2674.7090894612406}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9629693223443229,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8515625,"distances_sum":2612.2702017628612}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9711538461538464,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8515625,"distances_sum":2683.1680834382532}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9711538461538464,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.8515625,"distances_sum":2683.1680834382532}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.789268197080698,"seconds":4.468485713005066e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.84375,"distances_sum":1643.944336570135}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6708984375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6708984375,"f1":0.789268197080698,"seconds":4.468485713005066e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.84375,"distances_sum":1643.944336570135}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9373912545787555,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9453125,"distances_sum":2454.4696170482234}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9573775183150187,"seconds":5.725771188735962e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9296875,"distances_sum":2621.2427769627047}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8965404387279396,"seconds":5.055218935012817e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.53125,"distances_sum":2178.432071136586}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7967482170607179,"seconds":4.4889748096466064e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.96875,"distances_sum":1648.9738397528977}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8741548382173391,"seconds":4.908069968223572e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.203125,"distances_sum":2056.1940631074444}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9573775183150187,"seconds":5.725771188735962e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9296875,"distances_sum":2621.2427769627047}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9747767857142864,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":9.0,"distances_sum":2756.814977715111}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9772149725274728,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9765625,"distances_sum":2780.611086300165}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9637534340659345,"seconds":5.513429641723633e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9453125,"distances_sum":2675.8689685709733}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9614640567765572,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9375,"distances_sum":2635.735282129377}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9659855769230774,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9609375,"distances_sum":2674.6181872686043}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9772149725274728,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9765625,"distances_sum":2780.611086300165}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9772149725274728,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9765625,"distances_sum":2780.611086300165}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8715175449550455,"seconds":4.814937710762024e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.3359375,"distances_sum":1962.8910703203921}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.783203125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.783203125,"f1":0.8715175449550455,"seconds":4.814937710762024e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.3359375,"distances_sum":1962.8910703203921}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9206959706959715,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.546875,"distances_sum":2319.584204641353}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9487408424908428,"seconds":5.912035703659058e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.71875,"distances_sum":2527.762863441898}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9487408424908428,"seconds":5.912035703659058e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.71875,"distances_sum":2527.762863441898}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9675595238095243,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8515625,"distances_sum":2655.3603712659597}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9564217032967035,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.75,"distances_sum":2582.178927509052}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.970369734432235,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8515625,"distances_sum":2681.8938492130446}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9700549450549454,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.875,"distances_sum":2665.076345801768}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9507497710622715,"seconds":5.345791578292847e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.6796875,"distances_sum":2591.054881654093}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.970369734432235,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8515625,"distances_sum":2681.8938492130446}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.970369734432235,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8515625,"distances_sum":2681.8938492130446}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8632955586080594,"seconds":5.058944225311279e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.1484375,"distances_sum":1857.535455072373}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7685546875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7685546875,"f1":0.8632955586080594,"seconds":5.058944225311279e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.1484375,"distances_sum":1857.535455072373}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9584878663003666,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.7890625,"distances_sum":2573.709889400262}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8974702380952387,"seconds":5.334615707397461e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.3125,"distances_sum":2077.2288910274888}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9584878663003666,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.7890625,"distances_sum":2573.709889400262}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9702037545787551,"seconds":6.634742021560669e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.90625,"distances_sum":2630.54005176327}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9652186355311358,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8515625,"distances_sum":2596.5732599023286}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9702037545787551,"seconds":6.634742021560669e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.90625,"distances_sum":2630.54005176327}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9702037545787551,"seconds":6.634742021560669e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.90625,"distances_sum":2630.54005176327}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2470703125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2470703125,"f1":null,"seconds":2.9727816581726074e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":5.9296875,"distances_sum":635.3981436523657}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5234375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5234375,"f1":0.6739017926517931,"seconds":3.7979334592819214e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.5546875,"distances_sum":1160.815185839931}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8456741175491185,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.5390625,"distances_sum":1786.111671164061}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.744140625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.744140625,"f1":0.8456741175491185,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.5390625,"distances_sum":1786.111671164061}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9428285256410263,"seconds":5.461275577545166e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.75,"distances_sum":2471.1881820977824}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.9198946886446894,"seconds":5.455687642097473e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8515625,"distances_sum":2257.0187028102305}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9043326465201472,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8046875,"distances_sum":2107.8393059504574}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80859375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.80859375,"f1":0.8860753829503837,"seconds":5.245208740234375e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.6796875,"distances_sum":2026.7254845613138}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.9428285256410263,"seconds":5.461275577545166e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.75,"distances_sum":2471.1881820977824}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9648122710622714,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9140625,"distances_sum":2591.5827313136215}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9682291666666669,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9453125,"distances_sum":2618.6656141486874}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9448946886446892,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8125,"distances_sum":2479.4689247627234}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":10,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.967788461538462,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.953125,"distances_sum":2619.691627584097}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":12,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9752976190476191,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9609375,"distances_sum":2670.6307409362184}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9698660714285722,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.921875,"distances_sum":2633.307936241557}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9679544413919419,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.921875,"distances_sum":2629.4019823430617}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":12,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9752976190476191,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9609375,"distances_sum":2670.6307409362184}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":12,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9752976190476191,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9609375,"distances_sum":2670.6307409362184}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.24609375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.24609375,"f1":null,"seconds":4.034489393234253e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":5.6953125,"distances_sum":628.8949836384095}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2236328125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2236328125,"f1":null,"seconds":3.3285468816757202e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":5.65625,"distances_sum":497.6861868436084}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8470102813852823,"seconds":5.038455128669739e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.03125,"distances_sum":1806.7100369090792}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.74609375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.74609375,"f1":0.8470102813852823,"seconds":5.038455128669739e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.03125,"distances_sum":1806.7100369090792}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9390338827838831,"seconds":5.593523383140564e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8984375,"distances_sum":2420.1274676310013}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.884910402097903,"seconds":5.336478352546692e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.6171875,"distances_sum":2056.05536843003}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8563452172827181,"seconds":4.854053258895874e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.1484375,"distances_sum":1883.764037374353}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9390338827838831,"seconds":5.593523383140564e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8984375,"distances_sum":2420.1274676310013}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9667639652014656,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9296875,"distances_sum":2658.1132157293687}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9664835164835168,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.953125,"distances_sum":2629.3061434218607}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9667639652014656,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9296875,"distances_sum":2658.1132157293687}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9667639652014656,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.9296875,"distances_sum":2658.1132157293687}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.236328125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.236328125,"f1":null,"seconds":2.8461217880249023e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":5.546875,"distances_sum":551.8959220460049}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.236328125,"state":{"ssize":4,"bsize":1},"perf":{"precision":null,"recall":0.236328125,"f1":null,"seconds":2.8461217880249023e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":5.546875,"distances_sum":551.8959220460049}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.236328125,"state":{"ssize":4,"bsize":1},"perf":{"precision":null,"recall":0.236328125,"f1":null,"seconds":2.8461217880249023e-6,"exhaustive_search_seconds":1.2796372175216675e-6,"evaluations":5.546875,"distances_sum":551.8959220460049}}, n: 9
mean(cfft.distances) = 0.33754648353654254
mean(cdnet.distances) = 0.3548951303266886
mean(crand.distances) = 0.48661349333752973
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8355555555555556
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9022222222222224
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8622222222222221
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8555555555555555
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9022222222222221
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9044444444444445
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9444444444444445
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9377777777777778
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8799999999999999
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9244444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8577777777777778
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9444444444444445
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9266666666666666
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9199999999999999
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.88
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.931111111111111
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9155555555555556
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8133333333333334
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9155555555555556
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9199999999999999
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9177777777777778
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8822222222222221
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.888888888888889
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9177777777777778
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9022222222222224
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.6191535857319832] ***
*** center 1: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 9, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.33817386625798884] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33817386625798884, 0.26120673836273206] ***
*** starting iteration: 2; err: [Inf, 0.33817386625798884, 0.26120673836273206] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33817386625798884, 0.26120673836273206, 0.2445046675109022] ***
*** starting iteration: 3; err: [Inf, 0.33817386625798884, 0.26120673836273206, 0.2445046675109022] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33817386625798884, 0.26120673836273206, 0.2445046675109022, 0.24093806431223233] ***
*** finished computation of 3 references, err: [Inf, 0.33817386625798884, 0.26120673836273206, 0.2445046675109022, 0.24093806431223233] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [126, 87, 3]]
** centroid: 1, normalized-entropy: 0.6736561367422865, [(1, 126), (2, 87), (3, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [69, 132, 24]]
** centroid: 2, normalized-entropy: 0.832023769503167, [(1, 69), (2, 132), (3, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [225, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.21033607653828826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21033607653828826, 0.14797538920940534] ***
*** starting iteration: 2; err: [Inf, 0.21033607653828826, 0.14797538920940534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21033607653828826, 0.14797538920940534, 0.14479024399158633] ***
*** starting iteration: 3; err: [Inf, 0.21033607653828826, 0.14797538920940534, 0.14479024399158633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21033607653828826, 0.14797538920940534, 0.14479024399158633, 0.14452181814179696] ***
*** finished computation of 7 references, err: [Inf, 0.21033607653828826, 0.14797538920940534, 0.14479024399158633, 0.14452181814179696] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [57, 33, 0]]
** centroid: 1, normalized-entropy: 0.9480782435939054, [(1, 57), (2, 33)]
*** center 2: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 70, 27]]
** centroid: 4, normalized-entropy: 0.8531935252328874, [(2, 70), (3, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 40, 0]]
** centroid: 5, normalized-entropy: 0.9894340222202265, [(1, 51), (2, 40)]
*** center 6: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 76, 0]]
** centroid: 7, normalized-entropy: 0.23292785546981223, [(1, 3), (2, 76)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19313326608976056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19313326608976056, 0.15111769077115353] ***
*** starting iteration: 2; err: [Inf, 0.19313326608976056, 0.15111769077115353] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19313326608976056, 0.15111769077115353, 0.14797403212047477] ***
*** starting iteration: 3; err: [Inf, 0.19313326608976056, 0.15111769077115353, 0.14797403212047477] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19313326608976056, 0.15111769077115353, 0.14797403212047477, 0.1471880627698314] ***
*** finished computation of 7 references, err: [Inf, 0.19313326608976056, 0.15111769077115353, 0.14797403212047477, 0.1471880627698314] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 96, 7]]
** centroid: 1, normalized-entropy: 0.35826863860424546, [(2, 96), (3, 7)]
*** center 2: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 28, 0]]
** centroid: 3, normalized-entropy: 0.8592759806609698, [(1, 71), (2, 28)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [101, 4, 0]]
** centroid: 4, normalized-entropy: 0.23348971044772968, [(1, 101), (2, 4)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 99, 15]]
** centroid: 5, normalized-entropy: 0.5617526078313283, [(2, 99), (3, 15)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [82, 13, 0]]
** centroid: 6, normalized-entropy: 0.5759084429149787, [(1, 82), (2, 13)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [59, 8, 0]]
** centroid: 7, normalized-entropy: 0.52764232609436, [(1, 59), (2, 8)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18625587077163483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18625587077163483, 0.1472680089559624] ***
*** starting iteration: 2; err: [Inf, 0.18625587077163483, 0.1472680089559624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18625587077163483, 0.1472680089559624, 0.14454739743573494] ***
*** starting iteration: 3; err: [Inf, 0.18625587077163483, 0.1472680089559624, 0.14454739743573494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18625587077163483, 0.1472680089559624, 0.14454739743573494, 0.14426659479055895] ***
*** finished computation of 7 references, err: [Inf, 0.18625587077163483, 0.1472680089559624, 0.14454739743573494, 0.14426659479055895] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 82, 25]]
** centroid: 1, normalized-entropy: 0.7843112002044088, [(2, 82), (3, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 36, 0]]
** centroid: 4, normalized-entropy: 0.9486131982385807, [(1, 62), (2, 36)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [70, 27, 0]]
** centroid: 5, normalized-entropy: 0.8531935252328874, [(1, 70), (2, 27)]
*** center 6: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 84, 0]]
** centroid: 7, normalized-entropy: 0.2667649878030262, [(1, 4), (2, 84)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2473494548451256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2473494548451256, 0.19053198845341085] ***
*** starting iteration: 2; err: [Inf, 0.2473494548451256, 0.19053198845341085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2473494548451256, 0.19053198845341085, 0.1878338618897595] ***
*** starting iteration: 3; err: [Inf, 0.2473494548451256, 0.19053198845341085, 0.1878338618897595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2473494548451256, 0.19053198845341085, 0.1878338618897595, 0.1867113040267929] ***
*** finished computation of 7 references, err: [Inf, 0.2473494548451256, 0.19053198845341085, 0.1878338618897595, 0.1867113040267929] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [92, 11, 0]]
** centroid: 1, normalized-entropy: 0.4901757916273403, [(1, 92), (2, 11)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 51, 27]]
** centroid: 2, normalized-entropy: 0.9305861291319927, [(2, 51), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 46, 0]]
** centroid: 3, normalized-entropy: 0.999280531064971, [(1, 49), (2, 46)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [114, 7, 0]]
** centroid: 4, normalized-entropy: 0.3188554185210095, [(1, 114), (2, 7)]
*** center 5: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 104, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23127597734622513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23127597734622513, 0.18808079366830513] ***
*** starting iteration: 2; err: [Inf, 0.23127597734622513, 0.18808079366830513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23127597734622513, 0.18808079366830513, 0.1834644845247372] ***
*** starting iteration: 3; err: [Inf, 0.23127597734622513, 0.18808079366830513, 0.1834644845247372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23127597734622513, 0.18808079366830513, 0.1834644845247372, 0.1824527222696675] ***
*** finished computation of 7 references, err: [Inf, 0.23127597734622513, 0.18808079366830513, 0.1834644845247372, 0.1824527222696675] ***
*** center 1: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [91, 7, 0]]
** centroid: 2, normalized-entropy: 0.3712323266408756, [(1, 91), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 65, 22]]
** centroid: 3, normalized-entropy: 0.8158009273789572, [(2, 65), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [73, 37, 0]]
** centroid: 5, normalized-entropy: 0.9212963741927287, [(1, 73), (2, 37)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [29, 70, 0]]
** centroid: 6, normalized-entropy: 0.8724752054851931, [(1, 29), (2, 70)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 69, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22345624250713095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22345624250713095, 0.18950123108596703] ***
*** starting iteration: 2; err: [Inf, 0.22345624250713095, 0.18950123108596703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22345624250713095, 0.18950123108596703, 0.18870194476639582] ***
*** finished computation of 7 references, err: [Inf, 0.22345624250713095, 0.18950123108596703, 0.18870194476639582] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 88, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [66, 27, 0]]
** centroid: 3, normalized-entropy: 0.8691375806126381, [(1, 66), (2, 27)]
*** center 4: selecting labels [1] (freq >= 2) [from [84, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [73, 8, 0]]
** centroid: 5, normalized-entropy: 0.46506984488164627, [(1, 73), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [94, 9, 0]]
** centroid: 6, normalized-entropy: 0.4276590022251725, [(1, 94), (2, 9)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 96, 25]]
** centroid: 7, normalized-entropy: 0.7349557594762549, [(2, 96), (3, 25)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.45231511021402104] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45231511021402104, 0.3029935026888151] ***
*** starting iteration: 2; err: [Inf, 0.45231511021402104, 0.3029935026888151] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45231511021402104, 0.3029935026888151, 0.30190160953056616] ***
*** starting iteration: 3; err: [Inf, 0.45231511021402104, 0.3029935026888151, 0.30190160953056616] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45231511021402104, 0.3029935026888151, 0.30190160953056616, 0.3017305013941819] ***
*** finished computation of 3 references, err: [Inf, 0.45231511021402104, 0.3029935026888151, 0.30190160953056616, 0.3017305013941819] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [108, 137, 27]]
** centroid: 1, normalized-entropy: 0.8569735239011794, [(1, 108), (2, 137), (3, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [110, 82, 0]]
** centroid: 2, normalized-entropy: 0.98460399620868, [(1, 110), (2, 82)]
*** center 3: selecting labels [1] (freq >= 1) [from [202, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36184028902466686] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36184028902466686, 0.30182910851598055] ***
*** starting iteration: 2; err: [Inf, 0.36184028902466686, 0.30182910851598055] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36184028902466686, 0.30182910851598055, 0.2954651017322846] ***
*** starting iteration: 3; err: [Inf, 0.36184028902466686, 0.30182910851598055, 0.2954651017322846] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36184028902466686, 0.30182910851598055, 0.2954651017322846, 0.2941267594912912] ***
*** finished computation of 3 references, err: [Inf, 0.36184028902466686, 0.30182910851598055, 0.2954651017322846, 0.2941267594912912] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [262, 14, 0]]
** centroid: 1, normalized-entropy: 0.2894672273882472, [(1, 262), (2, 14)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 165, 22]]
** centroid: 2, normalized-entropy: 0.5225593745369407, [(2, 165), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [135, 69, 0]]
** centroid: 3, normalized-entropy: 0.9231199835423002, [(1, 135), (2, 69)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4668534983094709] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4668534983094709, 0.2974602534146658] ***
*** starting iteration: 2; err: [Inf, 0.4668534983094709, 0.2974602534146658] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4668534983094709, 0.2974602534146658, 0.2967469099646565] ***
*** finished computation of 3 references, err: [Inf, 0.4668534983094709, 0.2974602534146658, 0.2967469099646565] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [259, 1, 0]]
** centroid: 1, normalized-entropy: 0.03639340337146428, [(1, 259), (2, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [8, 178, 25]]
** centroid: 2, normalized-entropy: 0.47357100907314714, [(1, 8), (2, 178), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [146, 50, 0]]
** centroid: 3, normalized-entropy: 0.8192649712314392, [(1, 146), (2, 50)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3554955754468198] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3554955754468198, 0.2821401782491631] ***
*** starting iteration: 2; err: [Inf, 0.3554955754468198, 0.2821401782491631] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3554955754468198, 0.2821401782491631, 0.26088143504368533] ***
*** starting iteration: 3; err: [Inf, 0.3554955754468198, 0.2821401782491631, 0.26088143504368533] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3554955754468198, 0.2821401782491631, 0.26088143504368533, 0.24351897875386022] ***
*** finished computation of 3 references, err: [Inf, 0.3554955754468198, 0.2821401782491631, 0.26088143504368533, 0.24351897875386022] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [232, 42, 0]]
** centroid: 1, normalized-entropy: 0.6179995186309477, [(1, 232), (2, 42)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [2, 194, 22]]
** centroid: 2, normalized-entropy: 0.34433019029380785, [(1, 2), (2, 194), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [163, 12, 0]]
** centroid: 3, normalized-entropy: 0.36056974527050306, [(1, 163), (2, 12)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4034731491654553] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4034731491654553, 0.29102576186118095] ***
*** starting iteration: 2; err: [Inf, 0.4034731491654553, 0.29102576186118095] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4034731491654553, 0.29102576186118095, 0.27764268500403666] ***
*** starting iteration: 3; err: [Inf, 0.4034731491654553, 0.29102576186118095, 0.27764268500403666] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4034731491654553, 0.29102576186118095, 0.27764268500403666, 0.2538457781808085] ***
*** finished computation of 3 references, err: [Inf, 0.4034731491654553, 0.29102576186118095, 0.27764268500403666, 0.2538457781808085] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [279, 17, 0]]
** centroid: 1, normalized-entropy: 0.317167168664088, [(1, 279), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [134, 86, 0]]
** centroid: 2, normalized-entropy: 0.96538371158956, [(1, 134), (2, 86)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 126, 25]]
** centroid: 3, normalized-entropy: 0.6474532485611214, [(2, 126), (3, 25)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3279247782570687] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3279247782570687, 0.3048807593907143] ***
*** starting iteration: 2; err: [Inf, 0.3279247782570687, 0.3048807593907143] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3279247782570687, 0.3048807593907143, 0.30119745292303685] ***
*** starting iteration: 3; err: [Inf, 0.3279247782570687, 0.3048807593907143, 0.30119745292303685] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3279247782570687, 0.3048807593907143, 0.30119745292303685, 0.30100973006533654] ***
*** finished computation of 3 references, err: [Inf, 0.3279247782570687, 0.3048807593907143, 0.30119745292303685, 0.30100973006533654] ***
*** center 1: selecting labels [1] (freq >= 2) [from [218, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [121, 78, 0]]
** centroid: 2, normalized-entropy: 0.9660526367171095, [(1, 121), (2, 78)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [81, 141, 27]]
** centroid: 3, normalized-entropy: 0.8449237123334898, [(1, 81), (2, 141), (3, 27)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3854570827744287] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3854570827744287, 0.33716959957552817] ***
*** starting iteration: 2; err: [Inf, 0.3854570827744287, 0.33716959957552817] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3854570827744287, 0.33716959957552817, 0.33411283228082816] ***
*** starting iteration: 3; err: [Inf, 0.3854570827744287, 0.33716959957552817, 0.33411283228082816] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3854570827744287, 0.33716959957552817, 0.33411283228082816, 0.3311452334048576] ***
*** finished computation of 3 references, err: [Inf, 0.3854570827744287, 0.33716959957552817, 0.33411283228082816, 0.3311452334048576] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [78, 149, 0]]
** centroid: 1, normalized-entropy: 0.9282335858807058, [(1, 78), (2, 149)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [90, 98, 22]]
** centroid: 2, normalized-entropy: 0.8694083405916196, [(1, 90), (2, 98), (3, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [229, 1, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3756836731003589] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3756836731003589, 0.3473954629851156] ***
*** starting iteration: 2; err: [Inf, 0.3756836731003589, 0.3473954629851156] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3756836731003589, 0.3473954629851156, 0.342036548282845] ***
*** starting iteration: 3; err: [Inf, 0.3756836731003589, 0.3473954629851156, 0.342036548282845] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3756836731003589, 0.3473954629851156, 0.342036548282845, 0.33849036791731885] ***
*** finished computation of 3 references, err: [Inf, 0.3756836731003589, 0.3473954629851156, 0.342036548282845, 0.33849036791731885] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [169, 37, 0]]
** centroid: 1, normalized-entropy: 0.6792267443678772, [(1, 169), (2, 37)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [81, 176, 25]]
** centroid: 2, normalized-entropy: 0.7894883553640638, [(1, 81), (2, 176), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [163, 16, 0]]
** centroid: 3, normalized-entropy: 0.4344152792772977, [(1, 163), (2, 16)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2223701323816055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2223701323816055, 0.19613182687063566] ***
*** starting iteration: 2; err: [Inf, 0.2223701323816055, 0.19613182687063566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2223701323816055, 0.19613182687063566, 0.1910743317818521] ***
*** starting iteration: 3; err: [Inf, 0.2223701323816055, 0.19613182687063566, 0.1910743317818521] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2223701323816055, 0.19613182687063566, 0.1910743317818521, 0.18757870558414375] ***
*** finished computation of 7 references, err: [Inf, 0.2223701323816055, 0.19613182687063566, 0.1910743317818521, 0.18757870558414375] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [62, 38, 0]]
** centroid: 1, normalized-entropy: 0.9580420222262997, [(1, 62), (2, 38)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [129, 1, 0]]
** centroid: 2, normalized-entropy: 0.06507307495461005, [(1, 129), (2, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [4, 55, 0]]
** centroid: 3, normalized-entropy: 0.3576467062456333, [(1, 4), (2, 55)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [3, 75, 0]]
** centroid: 4, normalized-entropy: 0.23519338181924157, [(1, 3), (2, 75)]
*** center 5: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 50, 27]]
** centroid: 6, normalized-entropy: 0.9346466439786693, [(2, 50), (3, 27)]
*** center 7: selecting labels [1] (freq >= 1) [from [128, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2314889041547743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2314889041547743, 0.20702171297967323] ***
*** starting iteration: 2; err: [Inf, 0.2314889041547743, 0.20702171297967323] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2314889041547743, 0.20702171297967323, 0.19908328033911102] ***
*** starting iteration: 3; err: [Inf, 0.2314889041547743, 0.20702171297967323, 0.19908328033911102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2314889041547743, 0.20702171297967323, 0.19908328033911102, 0.19465031372550792] ***
*** finished computation of 7 references, err: [Inf, 0.2314889041547743, 0.20702171297967323, 0.19908328033911102, 0.19465031372550792] ***
*** center 1: selecting labels [1] (freq >= 1) [from [143, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [21, 81, 0]]
** centroid: 3, normalized-entropy: 0.7335379291086666, [(1, 21), (2, 81)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 88, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [49, 15, 0]]
** centroid: 5, normalized-entropy: 0.7855602922535471, [(1, 49), (2, 15)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 58, 22]]
** centroid: 6, normalized-entropy: 0.8485481782946159, [(2, 58), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [126, 6, 0]]
** centroid: 7, normalized-entropy: 0.2667649878030262, [(1, 126), (2, 6)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2748926925951841] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2748926925951841, 0.2126972578560886] ***
*** starting iteration: 2; err: [Inf, 0.2748926925951841, 0.2126972578560886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2748926925951841, 0.2126972578560886, 0.20209837460686556] ***
*** starting iteration: 3; err: [Inf, 0.2748926925951841, 0.2126972578560886, 0.20209837460686556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2748926925951841, 0.2126972578560886, 0.20209837460686556, 0.19842213680590692] ***
*** finished computation of 7 references, err: [Inf, 0.2748926925951841, 0.2126972578560886, 0.20209837460686556, 0.19842213680590692] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [90, 10, 0]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(1, 90), (2, 10)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 127, 25]]
** centroid: 2, normalized-entropy: 0.64490540841442, [(2, 127), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [66, 31, 0]]
** centroid: 3, normalized-entropy: 0.9039324555927869, [(1, 66), (2, 31)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [54, 56, 0]]
** centroid: 4, normalized-entropy: 0.9997615248696311, [(1, 54), (2, 56)]
*** center 5: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [92, 5, 0]]
** centroid: 7, normalized-entropy: 0.29292995113885967, [(1, 92), (2, 5)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19825073102626856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19825073102626856, 0.1528289090127435] ***
*** starting iteration: 2; err: [Inf, 0.19825073102626856, 0.1528289090127435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19825073102626856, 0.1528289090127435, 0.14936234946949994] ***
*** starting iteration: 3; err: [Inf, 0.19825073102626856, 0.1528289090127435, 0.14936234946949994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19825073102626856, 0.1528289090127435, 0.14936234946949994, 0.14799053458407432] ***
*** finished computation of 7 references, err: [Inf, 0.19825073102626856, 0.1528289090127435, 0.14936234946949994, 0.14799053458407432] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [84, 26, 0]]
** centroid: 1, normalized-entropy: 0.7889406572966208, [(1, 84), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 58, 0]]
** centroid: 2, normalized-entropy: 1.0, [(1, 58), (2, 58)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 72, 27]]
** centroid: 3, normalized-entropy: 0.8453509366224364, [(2, 72), (3, 27)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [5, 63, 0]]
** centroid: 4, normalized-entropy: 0.378958787501346, [(1, 5), (2, 63)]
*** center 5: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1890246207969657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1890246207969657, 0.15638030136550038] ***
*** starting iteration: 2; err: [Inf, 0.1890246207969657, 0.15638030136550038] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1890246207969657, 0.15638030136550038, 0.14964580275202127] ***
*** starting iteration: 3; err: [Inf, 0.1890246207969657, 0.15638030136550038, 0.14964580275202127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1890246207969657, 0.15638030136550038, 0.14964580275202127, 0.14770583757387845] ***
*** finished computation of 7 references, err: [Inf, 0.1890246207969657, 0.15638030136550038, 0.14964580275202127, 0.14770583757387845] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [56, 8, 0]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(1, 56), (2, 8)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [100, 52, 0]]
** centroid: 3, normalized-entropy: 0.9268190639645774, [(1, 100), (2, 52)]
*** center 4: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 40, 0]]
** centroid: 5, normalized-entropy: 0.9926108898749407, [(1, 49), (2, 40)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 77, 22]]
** centroid: 6, normalized-entropy: 0.7642045065086204, [(2, 77), (3, 22)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19999457412431465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19999457412431465, 0.15969076288921263] ***
*** starting iteration: 2; err: [Inf, 0.19999457412431465, 0.15969076288921263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19999457412431465, 0.15969076288921263, 0.1555275821212171] ***
*** starting iteration: 3; err: [Inf, 0.19999457412431465, 0.15969076288921263, 0.1555275821212171] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19999457412431465, 0.15969076288921263, 0.1555275821212171, 0.1531038761133331] ***
*** finished computation of 7 references, err: [Inf, 0.19999457412431465, 0.15969076288921263, 0.1555275821212171, 0.1531038761133331] ***
*** center 1: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [76, 30, 0]]
** centroid: 2, normalized-entropy: 0.8595316914502928, [(1, 76), (2, 30)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [20, 78, 0]]
** centroid: 3, normalized-entropy: 0.7300166301457938, [(1, 20), (2, 78)]
*** center 4: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [109, 44, 0]]
** centroid: 5, normalized-entropy: 0.8655768451715665, [(1, 109), (2, 44)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 77, 25]]
** centroid: 7, normalized-entropy: 0.8034158480707552, [(2, 77), (3, 25)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2965211242957561] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2965211242957561, 0.2779765270011326] ***
*** starting iteration: 2; err: [Inf, 0.2965211242957561, 0.2779765270011326] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2965211242957561, 0.2779765270011326, 0.27552696396512827] ***
*** starting iteration: 3; err: [Inf, 0.2965211242957561, 0.2779765270011326, 0.27552696396512827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2965211242957561, 0.2779765270011326, 0.27552696396512827, 0.27265241161805465] ***
*** starting iteration: 4; err: [Inf, 0.2965211242957561, 0.2779765270011326, 0.27552696396512827, 0.27265241161805465] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2965211242957561, 0.2779765270011326, 0.27552696396512827, 0.27265241161805465, 0.256932664909414] ***
*** starting iteration: 5; err: [Inf, 0.2965211242957561, 0.2779765270011326, 0.27552696396512827, 0.27265241161805465, 0.256932664909414] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2965211242957561, 0.2779765270011326, 0.27552696396512827, 0.27265241161805465, 0.256932664909414, 0.23804242288632257] ***
*** starting iteration: 6; err: [Inf, 0.2965211242957561, 0.2779765270011326, 0.27552696396512827, 0.27265241161805465, 0.256932664909414, 0.23804242288632257] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2965211242957561, 0.2779765270011326, 0.27552696396512827, 0.27265241161805465, 0.256932664909414, 0.23804242288632257, 0.23646170939053143] ***
*** starting iteration: 7; err: [Inf, 0.2965211242957561, 0.2779765270011326, 0.27552696396512827, 0.27265241161805465, 0.256932664909414, 0.23804242288632257, 0.23646170939053143] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2965211242957561, 0.2779765270011326, 0.27552696396512827, 0.27265241161805465, 0.256932664909414, 0.23804242288632257, 0.23646170939053143, 0.2360975058650033] ***
*** finished computation of 3 references, err: [Inf, 0.2965211242957561, 0.2779765270011326, 0.27552696396512827, 0.27265241161805465, 0.256932664909414, 0.23804242288632257, 0.23646170939053143, 0.2360975058650033] ***
*** center 1: selecting labels [1] (freq >= 1) [from [224, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [154, 70, 0]]
** centroid: 2, normalized-entropy: 0.8960382325345574, [(1, 154), (2, 70)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [42, 149, 27]]
** centroid: 3, normalized-entropy: 0.7610193041141319, [(1, 42), (2, 149), (3, 27)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3555671885034357] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3555671885034357, 0.2650466009826473] ***
*** starting iteration: 2; err: [Inf, 0.3555671885034357, 0.2650466009826473] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3555671885034357, 0.2650466009826473, 0.2405209855540939] ***
*** starting iteration: 3; err: [Inf, 0.3555671885034357, 0.2650466009826473, 0.2405209855540939] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3555671885034357, 0.2650466009826473, 0.2405209855540939, 0.23533976049549218] ***
*** starting iteration: 4; err: [Inf, 0.3555671885034357, 0.2650466009826473, 0.2405209855540939, 0.23533976049549218] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3555671885034357, 0.2650466009826473, 0.2405209855540939, 0.23533976049549218, 0.23335202960534834] ***
*** starting iteration: 5; err: [Inf, 0.3555671885034357, 0.2650466009826473, 0.2405209855540939, 0.23533976049549218, 0.23335202960534834] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3555671885034357, 0.2650466009826473, 0.2405209855540939, 0.23533976049549218, 0.23335202960534834, 0.2326748830907192] ***
*** finished computation of 3 references, err: [Inf, 0.3555671885034357, 0.2650466009826473, 0.2405209855540939, 0.23533976049549218, 0.23335202960534834, 0.2326748830907192] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 167, 22]]
** centroid: 1, normalized-entropy: 0.5189296599184945, [(2, 167), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [130, 75, 0]]
** centroid: 2, normalized-entropy: 0.9474351361840305, [(1, 130), (2, 75)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [267, 6, 0]]
** centroid: 3, normalized-entropy: 0.15240699892386778, [(1, 267), (2, 6)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4028477768593145] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4028477768593145, 0.2579199529652284] ***
*** starting iteration: 2; err: [Inf, 0.4028477768593145, 0.2579199529652284] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4028477768593145, 0.2579199529652284, 0.24557038703081624] ***
*** starting iteration: 3; err: [Inf, 0.4028477768593145, 0.2579199529652284, 0.24557038703081624] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4028477768593145, 0.2579199529652284, 0.24557038703081624, 0.24361623610848787] ***
*** starting iteration: 4; err: [Inf, 0.4028477768593145, 0.2579199529652284, 0.24557038703081624, 0.24361623610848787] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4028477768593145, 0.2579199529652284, 0.24557038703081624, 0.24361623610848787, 0.2430410366645013] ***
*** finished computation of 3 references, err: [Inf, 0.4028477768593145, 0.2579199529652284, 0.24557038703081624, 0.24361623610848787, 0.2430410366645013] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [53, 152, 25]]
** centroid: 1, normalized-entropy: 0.7765964582449735, [(1, 53), (2, 152), (3, 25)]
*** center 2: selecting labels [1] (freq >= 1) [from [237, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [123, 77, 0]]
** centroid: 3, normalized-entropy: 0.9614969508235551, [(1, 123), (2, 77)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 10)
[0.9339758920597244, 0.9269748790706874, 0.914009818201435, 0.9069578560596524, 0.9049888211564858, 0.8729897562232892, 0.8669567771364178, 0.844949740159321, 0.8369627112142082, 0.7829895764027501]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.9339758920597244
finished with 11
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.43292467691306324] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43292467691306324, 0.30858352360967267] ***
*** starting iteration: 2; err: [Inf, 0.43292467691306324, 0.30858352360967267] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43292467691306324, 0.30858352360967267, 0.3029769164126915] ***
*** starting iteration: 3; err: [Inf, 0.43292467691306324, 0.30858352360967267, 0.3029769164126915] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.43292467691306324, 0.30858352360967267, 0.3029769164126915, 0.30187806570566855] ***
*** finished computation of 3 references, err: [Inf, 0.43292467691306324, 0.30858352360967267, 0.3029769164126915, 0.30187806570566855] ***
*** center 1: selecting labels [1] (freq >= 2) [from [222, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [103, 82, 0]]
** centroid: 2, normalized-entropy: 0.9906851433349372, [(1, 103), (2, 82)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [95, 137, 27]]
** centroid: 3, normalized-entropy: 0.8560296696190127, [(1, 95), (2, 137), (3, 27)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3341251957457865] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3341251957457865, 0.29508762482506246] ***
*** starting iteration: 2; err: [Inf, 0.3341251957457865, 0.29508762482506246] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3341251957457865, 0.29508762482506246, 0.291269248352851] ***
*** starting iteration: 3; err: [Inf, 0.3341251957457865, 0.29508762482506246, 0.291269248352851] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3341251957457865, 0.29508762482506246, 0.291269248352851, 0.29095700052126994] ***
*** finished computation of 3 references, err: [Inf, 0.3341251957457865, 0.29508762482506246, 0.291269248352851, 0.29095700052126994] ***
*** center 1: selecting labels [1] (freq >= 2) [from [197, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [78, 165, 22]]
** centroid: 2, normalized-entropy: 0.7842524252869801, [(1, 78), (2, 165), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [122, 83, 0]]
** centroid: 3, normalized-entropy: 0.9737326459226808, [(1, 122), (2, 83)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4045801954050695] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4045801954050695, 0.31567777853006723] ***
*** starting iteration: 2; err: [Inf, 0.4045801954050695, 0.31567777853006723] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4045801954050695, 0.31567777853006723, 0.3091512715326681] ***
*** starting iteration: 3; err: [Inf, 0.4045801954050695, 0.31567777853006723, 0.3091512715326681] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4045801954050695, 0.31567777853006723, 0.3091512715326681, 0.30886169660115975] ***
*** finished computation of 3 references, err: [Inf, 0.4045801954050695, 0.31567777853006723, 0.3091512715326681, 0.30886169660115975] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [7, 173, 25]]
** centroid: 1, normalized-entropy: 0.46890344677884904, [(1, 7), (2, 173), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [237, 2, 0]]
** centroid: 2, normalized-entropy: 0.06976994610255842, [(1, 237), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [169, 54, 0]]
** centroid: 3, normalized-entropy: 0.7986014701063298, [(1, 169), (2, 54)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 11)
[0.9339758920597244, 0.9269748790706874, 0.914009818201435, 0.9069578560596524, 0.9049888211564858, 0.8889698081314847, 0.8729897562232892, 0.8669567771364178, 0.844949740159321, 0.8369627112142082, 0.7829895764027501]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.9339758920597244
finished with 11
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9339758920597244, 0.9269748790706874, 0.914009818201435, 0.9069578560596524, 0.9049888211564858, 0.8889698081314847, 0.8729897562232892, 0.8669567771364178, 0.844949740159321, 0.8369627112142082, 0.7829895764027501]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.9339758920597244
finished with 11
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9339758920597244, 0.9269748790706874, 0.914009818201435, 0.9069578560596524, 0.9049888211564858, 0.8889698081314847, 0.8729897562232892, 0.8669567771364178, 0.844949740159321, 0.8369627112142082, 0.7829895764027501]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.9339758920597244
finished with 12
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.316421544254833] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.316421544254833, 0.24465959242547866] ***
*** starting iteration: 2; err: [Inf, 0.316421544254833, 0.24465959242547866] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.316421544254833, 0.24465959242547866, 0.24049412263361541] ***
*** starting iteration: 3; err: [Inf, 0.316421544254833, 0.24465959242547866, 0.24049412263361541] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.316421544254833, 0.24465959242547866, 0.24049412263361541, 0.239481359507676] ***
*** finished computation of 3 references, err: [Inf, 0.316421544254833, 0.24465959242547866, 0.24049412263361541, 0.239481359507676] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [112, 136, 24]]
** centroid: 1, normalized-entropy: 0.8430151552039075, [(1, 112), (2, 136), (3, 24)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [113, 83, 3]]
** centroid: 2, normalized-entropy: 0.6820538216637579, [(1, 113), (2, 83), (3, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [195, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3068000606081073] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3068000606081073, 0.23709702140734024] ***
*** starting iteration: 2; err: [Inf, 0.3068000606081073, 0.23709702140734024] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3068000606081073, 0.23709702140734024, 0.2323999128749837] ***
*** starting iteration: 3; err: [Inf, 0.3068000606081073, 0.23709702140734024, 0.2323999128749837] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3068000606081073, 0.23709702140734024, 0.2323999128749837, 0.23201731525674307] ***
*** finished computation of 3 references, err: [Inf, 0.3068000606081073, 0.23709702140734024, 0.2323999128749837, 0.23201731525674307] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [276, 6, 0]]
** centroid: 1, normalized-entropy: 0.14854949043034832, [(1, 276), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 171, 22]]
** centroid: 2, normalized-entropy: 0.5118338473431631, [(2, 171), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [121, 71, 0]]
** centroid: 3, normalized-entropy: 0.950511994496894, [(1, 121), (2, 71)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34216053124008955] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34216053124008955, 0.23911563082244888] ***
*** starting iteration: 2; err: [Inf, 0.34216053124008955, 0.23911563082244888] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34216053124008955, 0.23911563082244888, 0.2359585902797452] ***
*** starting iteration: 3; err: [Inf, 0.34216053124008955, 0.23911563082244888, 0.2359585902797452] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34216053124008955, 0.23911563082244888, 0.2359585902797452, 0.23504304748469743] ***
*** finished computation of 3 references, err: [Inf, 0.34216053124008955, 0.23911563082244888, 0.2359585902797452, 0.23504304748469743] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [89, 152, 25]]
** centroid: 1, normalized-entropy: 0.8268108274920258, [(1, 89), (2, 152), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [128, 77, 0]]
** centroid: 2, normalized-entropy: 0.9548822281224831, [(1, 128), (2, 77)]
*** center 3: selecting labels [1] (freq >= 1) [from [196, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 12)
[0.9339758920597244, 0.9269748790706874, 0.926021830213447, 0.914009818201435, 0.9069578560596524, 0.9049888211564858, 0.8889698081314847, 0.8729897562232892, 0.8669567771364178, 0.844949740159321, 0.8369627112142082, 0.7829895764027501]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.9339758920597244
finished with 12
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9339758920597244, 0.9269748790706874, 0.926021830213447, 0.914009818201435, 0.9069578560596524, 0.9049888211564858, 0.8889698081314847, 0.8729897562232892, 0.8669567771364178, 0.844949740159321, 0.8369627112142082, 0.7829895764027501]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.9339758920597244
finished with 12
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9339758920597244, 0.9269748790706874, 0.926021830213447, 0.914009818201435, 0.9069578560596524, 0.9049888211564858, 0.8889698081314847, 0.8729897562232892, 0.8669567771364178, 0.844949740159321, 0.8369627112142082, 0.7829895764027501]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.9339758920597244
finished with 13
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.23505227965534897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23505227965534897, 0.19345525812564623] ***
*** starting iteration: 2; err: [Inf, 0.23505227965534897, 0.19345525812564623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23505227965534897, 0.19345525812564623, 0.18987358310441668] ***
*** starting iteration: 3; err: [Inf, 0.23505227965534897, 0.19345525812564623, 0.18987358310441668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23505227965534897, 0.19345525812564623, 0.18987358310441668, 0.18786527473317297] ***
*** finished computation of 7 references, err: [Inf, 0.23505227965534897, 0.19345525812564623, 0.18987358310441668, 0.18786527473317297] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [96, 18, 0]]
** centroid: 1, normalized-entropy: 0.6292492238560344, [(1, 96), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [11, 76, 0]]
** centroid: 2, normalized-entropy: 0.5475844288749033, [(1, 11), (2, 76)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [96, 2, 0]]
** centroid: 3, normalized-entropy: 0.14372616993938164, [(1, 96), (2, 2)]
*** center 4: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [60, 42, 0]]
** centroid: 5, normalized-entropy: 0.9774178175281716, [(1, 60), (2, 42)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 81, 27]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(2, 81), (3, 27)]
*** center 7: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22197088360719416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22197088360719416, 0.20204783201837603] ***
*** starting iteration: 2; err: [Inf, 0.22197088360719416, 0.20204783201837603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22197088360719416, 0.20204783201837603, 0.19483574148828814] ***
*** starting iteration: 3; err: [Inf, 0.22197088360719416, 0.20204783201837603, 0.19483574148828814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22197088360719416, 0.20204783201837603, 0.19483574148828814, 0.1926605774905125] ***
*** finished computation of 7 references, err: [Inf, 0.22197088360719416, 0.20204783201837603, 0.19483574148828814, 0.1926605774905125] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 105, 22]]
** centroid: 1, normalized-entropy: 0.6650368524023751, [(2, 105), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [88, 43, 0]]
** centroid: 2, normalized-entropy: 0.9131224909094169, [(1, 88), (2, 43)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [88, 6, 0]]
** centroid: 3, normalized-entropy: 0.3424637724817958, [(1, 88), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [7, 87, 0]]
** centroid: 4, normalized-entropy: 0.3823806751537801, [(1, 7), (2, 87)]
*** center 5: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [49, 7, 0]]
** centroid: 7, normalized-entropy: 0.5435644431995963, [(1, 49), (2, 7)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2703292504863358] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2703292504863358, 0.20228639373910437] ***
*** starting iteration: 2; err: [Inf, 0.2703292504863358, 0.20228639373910437] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2703292504863358, 0.20228639373910437, 0.19836298202204963] ***
*** starting iteration: 3; err: [Inf, 0.2703292504863358, 0.20228639373910437, 0.19836298202204963] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2703292504863358, 0.20228639373910437, 0.19836298202204963, 0.196183838113246] ***
*** finished computation of 7 references, err: [Inf, 0.2703292504863358, 0.20228639373910437, 0.19836298202204963, 0.196183838113246] ***
*** center 1: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 16, 0]]
** centroid: 2, normalized-entropy: 0.7531979910695015, [(1, 58), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [112, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [14, 89, 0]]
** centroid: 4, normalized-entropy: 0.5734593207286953, [(1, 14), (2, 89)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 90, 25]]
** centroid: 5, normalized-entropy: 0.7553754125614286, [(2, 90), (3, 25)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [30, 33, 0]]
** centroid: 6, normalized-entropy: 0.998363672593813, [(1, 30), (2, 33)]
*** center 7: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9339758920597244, 0.9269748790706874, 0.926021830213447, 0.9159758560956166, 0.914009818201435, 0.9069578560596524, 0.9049888211564858, 0.8889698081314847, 0.8729897562232892, 0.8669567771364178, 0.844949740159321, 0.8369627112142082, 0.7829895764027501]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :rand, 0.3, 1) => 0.9339758920597244
finished with 14
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.44391783987320177] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44391783987320177, 0.3576810955106317] ***
*** starting iteration: 2; err: [Inf, 0.44391783987320177, 0.3576810955106317] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44391783987320177, 0.3576810955106317, 0.3465510299764909] ***
*** starting iteration: 3; err: [Inf, 0.44391783987320177, 0.3576810955106317, 0.3465510299764909] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44391783987320177, 0.3576810955106317, 0.3465510299764909, 0.3375699960223928] ***
*** starting iteration: 4; err: [Inf, 0.44391783987320177, 0.3576810955106317, 0.3465510299764909, 0.3375699960223928] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44391783987320177, 0.3576810955106317, 0.3465510299764909, 0.3375699960223928, 0.33208923680881214] ***
*** starting iteration: 5; err: [Inf, 0.44391783987320177, 0.3576810955106317, 0.3465510299764909, 0.3375699960223928, 0.33208923680881214] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44391783987320177, 0.3576810955106317, 0.3465510299764909, 0.3375699960223928, 0.33208923680881214, 0.3293913903551081] ***
*** starting iteration: 6; err: [Inf, 0.44391783987320177, 0.3576810955106317, 0.3465510299764909, 0.3375699960223928, 0.33208923680881214, 0.3293913903551081] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44391783987320177, 0.3576810955106317, 0.3465510299764909, 0.3375699960223928, 0.33208923680881214, 0.3293913903551081, 0.3270505805997676] ***
*** starting iteration: 7; err: [Inf, 0.44391783987320177, 0.3576810955106317, 0.3465510299764909, 0.3375699960223928, 0.33208923680881214, 0.3293913903551081, 0.3270505805997676] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44391783987320177, 0.3576810955106317, 0.3465510299764909, 0.3375699960223928, 0.33208923680881214, 0.3293913903551081, 0.3270505805997676, 0.3242284737851795] ***
*** starting iteration: 8; err: [Inf, 0.44391783987320177, 0.3576810955106317, 0.3465510299764909, 0.3375699960223928, 0.33208923680881214, 0.3293913903551081, 0.3270505805997676, 0.3242284737851795] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44391783987320177, 0.3576810955106317, 0.3465510299764909, 0.3375699960223928, 0.33208923680881214, 0.3293913903551081, 0.3270505805997676, 0.3242284737851795, 0.32268552242445425] ***
*** starting iteration: 9; err: [Inf, 0.44391783987320177, 0.3576810955106317, 0.3465510299764909, 0.3375699960223928, 0.33208923680881214, 0.3293913903551081, 0.3270505805997676, 0.3242284737851795, 0.32268552242445425] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44391783987320177, 0.3576810955106317, 0.3465510299764909, 0.3375699960223928, 0.33208923680881214, 0.3293913903551081, 0.3270505805997676, 0.3242284737851795, 0.32268552242445425, 0.3211330584552441] ***
*** starting iteration: 10; err: [Inf, 0.44391783987320177, 0.3576810955106317, 0.3465510299764909, 0.3375699960223928, 0.33208923680881214, 0.3293913903551081, 0.3270505805997676, 0.3242284737851795, 0.32268552242445425, 0.3211330584552441] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44391783987320177, 0.3576810955106317, 0.3465510299764909, 0.3375699960223928, 0.33208923680881214, 0.3293913903551081, 0.3270505805997676, 0.3242284737851795, 0.32268552242445425, 0.3211330584552441, 0.316952097212879] ***
*** finished computation of 3 references, err: [Inf, 0.44391783987320177, 0.3576810955106317, 0.3465510299764909, 0.3375699960223928, 0.33208923680881214, 0.3293913903551081, 0.3270505805997676, 0.3242284737851795, 0.32268552242445425, 0.3211330584552441, 0.316952097212879] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [40, 163, 27]]
** centroid: 1, normalized-entropy: 0.7279309134742074, [(1, 40), (2, 163), (3, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [216, 11, 0]]
** centroid: 2, normalized-entropy: 0.27981082970360444, [(1, 216), (2, 11)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [164, 45, 0]]
** centroid: 3, normalized-entropy: 0.7515126340320738, [(1, 164), (2, 45)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3559712188170365] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3559712188170365, 0.3331370041768501] ***
*** starting iteration: 2; err: [Inf, 0.3559712188170365, 0.3331370041768501] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3559712188170365, 0.3331370041768501, 0.30004358858797237] ***
*** starting iteration: 3; err: [Inf, 0.3559712188170365, 0.3331370041768501, 0.30004358858797237] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3559712188170365, 0.3331370041768501, 0.30004358858797237, 0.29678357589705057] ***
*** starting iteration: 4; err: [Inf, 0.3559712188170365, 0.3331370041768501, 0.30004358858797237, 0.29678357589705057] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3559712188170365, 0.3331370041768501, 0.30004358858797237, 0.29678357589705057, 0.29655541288854925] ***
*** finished computation of 3 references, err: [Inf, 0.3559712188170365, 0.3331370041768501, 0.30004358858797237, 0.29678357589705057, 0.29655541288854925] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [3, 190, 22]]
** centroid: 1, normalized-entropy: 0.3660170638177579, [(1, 3), (2, 190), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [166, 51, 0]]
** centroid: 2, normalized-entropy: 0.786665342840167, [(1, 166), (2, 51)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [228, 7, 0]]
** centroid: 3, normalized-entropy: 0.19332372237791742, [(1, 228), (2, 7)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3374248139694266] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3374248139694266, 0.3056970645884412] ***
*** starting iteration: 2; err: [Inf, 0.3374248139694266, 0.3056970645884412] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3374248139694266, 0.3056970645884412, 0.3025953878286941] ***
*** starting iteration: 3; err: [Inf, 0.3374248139694266, 0.3056970645884412, 0.3025953878286941] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3374248139694266, 0.3056970645884412, 0.3025953878286941, 0.30193205132963197] ***
*** finished computation of 3 references, err: [Inf, 0.3374248139694266, 0.3056970645884412, 0.3025953878286941, 0.30193205132963197] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [102, 122, 25]]
** centroid: 1, normalized-entropy: 0.8610208047431922, [(1, 102), (2, 122), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [99, 107, 0]]
** centroid: 2, normalized-entropy: 0.998911823625917, [(1, 99), (2, 107)]
*** center 3: selecting labels [1] (freq >= 1) [from [212, 0, 0]]
finished with 6 centroids; started with 3
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.25636893197754396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25636893197754396, 0.21728102757176385] ***
*** starting iteration: 2; err: [Inf, 0.25636893197754396, 0.21728102757176385] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25636893197754396, 0.21728102757176385, 0.20792427442688494] ***
*** starting iteration: 3; err: [Inf, 0.25636893197754396, 0.21728102757176385, 0.20792427442688494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25636893197754396, 0.21728102757176385, 0.20792427442688494, 0.20257611779216678] ***
*** finished computation of 7 references, err: [Inf, 0.25636893197754396, 0.21728102757176385, 0.20792427442688494, 0.20257611779216678] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [38, 144, 0]]
** centroid: 1, normalized-entropy: 0.7391658175693049, [(1, 38), (2, 144)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [125, 2, 0]]
** centroid: 2, normalized-entropy: 0.116849760923655, [(1, 125), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [74, 23, 0]]
** centroid: 3, normalized-entropy: 0.790206924188637, [(1, 74), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [20, 52, 0]]
** centroid: 4, normalized-entropy: 0.8524051786494784, [(1, 20), (2, 52)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [157, 22, 0]]
** centroid: 5, normalized-entropy: 0.537654027621765, [(1, 157), (2, 22)]
*** center 6: selecting labels [1] (freq >= 1) [from [201, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 105, 37]]
** centroid: 7, normalized-entropy: 0.8275953315947242, [(2, 105), (3, 37)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21614055071771146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21614055071771146, 0.19370118659734725] ***
*** starting iteration: 2; err: [Inf, 0.21614055071771146, 0.19370118659734725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21614055071771146, 0.19370118659734725, 0.18906324406713249] ***
*** starting iteration: 3; err: [Inf, 0.21614055071771146, 0.19370118659734725, 0.18906324406713249] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21614055071771146, 0.19370118659734725, 0.18906324406713249, 0.18745909883826972] ***
*** finished computation of 7 references, err: [Inf, 0.21614055071771146, 0.19370118659734725, 0.18906324406713249, 0.18745909883826972] ***
*** center 1: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 51, 16]]
** centroid: 3, normalized-entropy: 0.7930490047779772, [(2, 51), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [93, 14, 0]]
** centroid: 5, normalized-entropy: 0.5597404598417697, [(1, 93), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [19, 44, 0]]
** centroid: 6, normalized-entropy: 0.8832225588099292, [(1, 19), (2, 44)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [19, 61, 0]]
** centroid: 7, normalized-entropy: 0.79085809055281, [(1, 19), (2, 61)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23346617148164658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23346617148164658, 0.19697232911922039] ***
*** starting iteration: 2; err: [Inf, 0.23346617148164658, 0.19697232911922039] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23346617148164658, 0.19697232911922039, 0.19162076960504054] ***
*** starting iteration: 3; err: [Inf, 0.23346617148164658, 0.19697232911922039, 0.19162076960504054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23346617148164658, 0.19697232911922039, 0.19162076960504054, 0.18953489372879267] ***
*** finished computation of 7 references, err: [Inf, 0.23346617148164658, 0.19697232911922039, 0.19162076960504054, 0.18953489372879267] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [35, 30, 0]]
** centroid: 1, normalized-entropy: 0.9957274520849256, [(1, 35), (2, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [4, 51, 0]]
** centroid: 5, normalized-entropy: 0.37601985096927276, [(1, 4), (2, 51)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 40, 19]]
** centroid: 6, normalized-entropy: 0.9065795484987461, [(2, 40), (3, 19)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [24, 48, 0]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(1, 24), (2, 48)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.251645144357346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.251645144357346, 0.2108870817180723] ***
*** starting iteration: 2; err: [Inf, 0.251645144357346, 0.2108870817180723] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.251645144357346, 0.2108870817180723, 0.19634373108670117] ***
*** starting iteration: 3; err: [Inf, 0.251645144357346, 0.2108870817180723, 0.19634373108670117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.251645144357346, 0.2108870817180723, 0.19634373108670117, 0.19049445813894272] ***
*** finished computation of 7 references, err: [Inf, 0.251645144357346, 0.2108870817180723, 0.19634373108670117, 0.19049445813894272] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 63, 22]]
** centroid: 1, normalized-entropy: 0.8249658680139929, [(2, 63), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [65, 15, 0]]
** centroid: 2, normalized-entropy: 0.6962122601251459, [(1, 65), (2, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [55, 30, 0]]
** centroid: 4, normalized-entropy: 0.9366673818775627, [(1, 55), (2, 30)]
*** center 5: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 58, 0]]
** centroid: 7, normalized-entropy: 0.12394986771100755, [(1, 1), (2, 58)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22967240130715072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22967240130715072, 0.18830497121438383] ***
*** starting iteration: 2; err: [Inf, 0.22967240130715072, 0.18830497121438383] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22967240130715072, 0.18830497121438383, 0.1862567403288558] ***
*** starting iteration: 3; err: [Inf, 0.22967240130715072, 0.18830497121438383, 0.1862567403288558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22967240130715072, 0.18830497121438383, 0.1862567403288558, 0.18613436777330936] ***
*** finished computation of 7 references, err: [Inf, 0.22967240130715072, 0.18830497121438383, 0.1862567403288558, 0.18613436777330936] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 39, 16]]
** centroid: 1, normalized-entropy: 0.8698926856041562, [(2, 39), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [17, 65, 0]]
** centroid: 4, normalized-entropy: 0.7363230272021651, [(1, 17), (2, 65)]
*** center 5: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [69, 10, 0]]
** centroid: 6, normalized-entropy: 0.5479900080939728, [(1, 69), (2, 10)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 54, 0]]
** centroid: 7, normalized-entropy: 0.2222848306856879, [(1, 2), (2, 54)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.237356652145274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.237356652145274, 0.20382266091369092] ***
*** starting iteration: 2; err: [Inf, 0.237356652145274, 0.20382266091369092] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.237356652145274, 0.20382266091369092, 0.19630295041948556] ***
*** starting iteration: 3; err: [Inf, 0.237356652145274, 0.20382266091369092, 0.19630295041948556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.237356652145274, 0.20382266091369092, 0.19630295041948556, 0.19314188526570797] ***
*** finished computation of 7 references, err: [Inf, 0.237356652145274, 0.20382266091369092, 0.19630295041948556, 0.19314188526570797] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [47, 10, 0]]
** centroid: 1, normalized-entropy: 0.6699960320994334, [(1, 47), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [6, 67, 0]]
** centroid: 2, normalized-entropy: 0.4098553703184051, [(1, 6), (2, 67)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [98, 2, 0]]
** centroid: 3, normalized-entropy: 0.14144054254182067, [(1, 98), (2, 2)]
*** center 4: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 48, 27]]
** centroid: 6, normalized-entropy: 0.9426831892554921, [(2, 48), (3, 27)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [61, 39, 0]]
** centroid: 7, normalized-entropy: 0.9647995485050873, [(1, 61), (2, 39)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24800862313061953] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24800862313061953, 0.2084620944187045] ***
*** starting iteration: 2; err: [Inf, 0.24800862313061953, 0.2084620944187045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24800862313061953, 0.2084620944187045, 0.1983814206700772] ***
*** starting iteration: 3; err: [Inf, 0.24800862313061953, 0.2084620944187045, 0.1983814206700772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24800862313061953, 0.2084620944187045, 0.1983814206700772, 0.19527588117681444] ***
*** finished computation of 7 references, err: [Inf, 0.24800862313061953, 0.2084620944187045, 0.1983814206700772, 0.19527588117681444] ***
*** center 1: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [81, 1, 0]]
** centroid: 2, normalized-entropy: 0.09501724567107643, [(1, 81), (2, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [78, 28, 0]]
** centroid: 3, normalized-entropy: 0.8329458235361399, [(1, 78), (2, 28)]
*** center 4: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 35, 25]]
** centroid: 5, normalized-entropy: 0.9798687566511527, [(2, 35), (3, 25)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [23, 35, 0]]
** centroid: 6, normalized-entropy: 0.9688977092243805, [(1, 23), (2, 35)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 54, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2454822404354345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2454822404354345, 0.19145184382982552] ***
*** starting iteration: 2; err: [Inf, 0.2454822404354345, 0.19145184382982552] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2454822404354345, 0.19145184382982552, 0.18392622232437134] ***
*** starting iteration: 3; err: [Inf, 0.2454822404354345, 0.19145184382982552, 0.18392622232437134] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2454822404354345, 0.19145184382982552, 0.18392622232437134, 0.1824208921138197] ***
*** finished computation of 7 references, err: [Inf, 0.2454822404354345, 0.19145184382982552, 0.18392622232437134, 0.1824208921138197] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [55, 30, 0]]
** centroid: 1, normalized-entropy: 0.9366673818775627, [(1, 55), (2, 30)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 52, 18]]
** centroid: 2, normalized-entropy: 0.8224042259549892, [(2, 52), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [30, 43, 0]]
** centroid: 3, normalized-entropy: 0.9770012394218561, [(1, 30), (2, 43)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [5, 53, 0]]
** centroid: 4, normalized-entropy: 0.4236805715709106, [(1, 5), (2, 53)]
*** center 5: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2705698041561991] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2705698041561991, 0.2078541413275525] ***
*** starting iteration: 2; err: [Inf, 0.2705698041561991, 0.2078541413275525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2705698041561991, 0.2078541413275525, 0.19775918797031045] ***
*** starting iteration: 3; err: [Inf, 0.2705698041561991, 0.2078541413275525, 0.19775918797031045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2705698041561991, 0.2078541413275525, 0.19775918797031045, 0.19444566962821408] ***
*** finished computation of 7 references, err: [Inf, 0.2705698041561991, 0.2078541413275525, 0.19775918797031045, 0.19444566962821408] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 49, 17]]
** centroid: 1, normalized-entropy: 0.8230660790114689, [(2, 49), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [87, 3, 0]]
** centroid: 2, normalized-entropy: 0.2108423003185322, [(1, 87), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [67, 25, 0]]
** centroid: 3, normalized-entropy: 0.8439491244805034, [(1, 67), (2, 25)]
*** center 4: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [11, 45, 0]]
** centroid: 6, normalized-entropy: 0.7147274731317893, [(1, 11), (2, 45)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 54, 1]]
** centroid: 7, normalized-entropy: 0.13110652958234514, [(2, 54), (3, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2540547849014401] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2540547849014401, 0.21504877771623432] ***
*** starting iteration: 2; err: [Inf, 0.2540547849014401, 0.21504877771623432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2540547849014401, 0.21504877771623432, 0.19761751072853803] ***
*** starting iteration: 3; err: [Inf, 0.2540547849014401, 0.21504877771623432, 0.19761751072853803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2540547849014401, 0.21504877771623432, 0.19761751072853803, 0.19259029323235155] ***
*** finished computation of 7 references, err: [Inf, 0.2540547849014401, 0.21504877771623432, 0.19761751072853803, 0.19259029323235155] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [53, 15, 0]]
** centroid: 1, normalized-entropy: 0.7612401496918493, [(1, 53), (2, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [51, 26, 0]]
** centroid: 4, normalized-entropy: 0.9225641366401655, [(1, 51), (2, 26)]
*** center 5: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [26, 44, 0]]
** centroid: 6, normalized-entropy: 0.9517626756348312, [(1, 26), (2, 44)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 65, 16]]
** centroid: 7, normalized-entropy: 0.7169622516889513, [(2, 65), (3, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2523671460687183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2523671460687183, 0.1932595501448959] ***
*** starting iteration: 2; err: [Inf, 0.2523671460687183, 0.1932595501448959] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2523671460687183, 0.1932595501448959, 0.1890581851862371] ***
*** starting iteration: 3; err: [Inf, 0.2523671460687183, 0.1932595501448959, 0.1890581851862371] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2523671460687183, 0.1932595501448959, 0.1890581851862371, 0.1889235707819462] ***
*** finished computation of 7 references, err: [Inf, 0.2523671460687183, 0.1932595501448959, 0.1890581851862371, 0.1889235707819462] ***
*** center 1: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [57, 13, 0]]
** centroid: 2, normalized-entropy: 0.6924194863274741, [(1, 57), (2, 13)]
*** center 3: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 65, 14]]
** centroid: 4, normalized-entropy: 0.6739468651941155, [(2, 65), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [90, 18, 0]]
** centroid: 5, normalized-entropy: 0.6500224216483541, [(1, 90), (2, 18)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 59, 1]]
** centroid: 6, normalized-entropy: 0.12229159706937456, [(2, 59), (3, 1)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [73, 7, 0]]
** centroid: 7, normalized-entropy: 0.4280696292293062, [(1, 73), (2, 7)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2891588346585631] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2891588346585631, 0.20301670893467963] ***
*** starting iteration: 2; err: [Inf, 0.2891588346585631, 0.20301670893467963] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2891588346585631, 0.20301670893467963, 0.1938104733116925] ***
*** starting iteration: 3; err: [Inf, 0.2891588346585631, 0.20301670893467963, 0.1938104733116925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2891588346585631, 0.20301670893467963, 0.1938104733116925, 0.1902831388115883] ***
*** finished computation of 7 references, err: [Inf, 0.2891588346585631, 0.20301670893467963, 0.1938104733116925, 0.1902831388115883] ***
*** center 1: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [17, 57, 0]]
** centroid: 2, normalized-entropy: 0.77753986416076, [(1, 17), (2, 57)]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [81, 12, 0]]
** centroid: 4, normalized-entropy: 0.5547781633412736, [(1, 81), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [40, 12, 0]]
** centroid: 5, normalized-entropy: 0.7793498372920851, [(1, 40), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [30, 34, 0]]
** centroid: 6, normalized-entropy: 0.9971803988942641, [(1, 30), (2, 34)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 53, 24]]
** centroid: 7, normalized-entropy: 0.8951127210954559, [(2, 53), (3, 24)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23714683759491892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23714683759491892, 0.19936497164703906] ***
*** starting iteration: 2; err: [Inf, 0.23714683759491892, 0.19936497164703906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23714683759491892, 0.19936497164703906, 0.1921442741025239] ***
*** starting iteration: 3; err: [Inf, 0.23714683759491892, 0.19936497164703906, 0.1921442741025239] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23714683759491892, 0.19936497164703906, 0.1921442741025239, 0.19007804453000426] ***
*** finished computation of 7 references, err: [Inf, 0.23714683759491892, 0.19936497164703906, 0.1921442741025239, 0.19007804453000426] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 60, 19]]
** centroid: 1, normalized-entropy: 0.7958812735955936, [(2, 60), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [90, 2, 0]]
** centroid: 4, normalized-entropy: 0.1510969705171136, [(1, 90), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [40, 35, 0]]
** centroid: 5, normalized-entropy: 0.9967916319816367, [(1, 40), (2, 35)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [37, 15, 0]]
** centroid: 6, normalized-entropy: 0.8667256130949592, [(1, 37), (2, 15)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 70, 0]]
** centroid: 7, normalized-entropy: 0.10679203237584184, [(1, 1), (2, 70)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24414559600874783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24414559600874783, 0.2054238941781223] ***
*** starting iteration: 2; err: [Inf, 0.24414559600874783, 0.2054238941781223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24414559600874783, 0.2054238941781223, 0.19656598939932882] ***
*** starting iteration: 3; err: [Inf, 0.24414559600874783, 0.2054238941781223, 0.19656598939932882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24414559600874783, 0.2054238941781223, 0.19656598939932882, 0.19187921085488052] ***
*** finished computation of 7 references, err: [Inf, 0.24414559600874783, 0.2054238941781223, 0.19656598939932882, 0.19187921085488052] ***
*** center 1: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [67, 8, 0]]
** centroid: 2, normalized-entropy: 0.48977901368693744, [(1, 67), (2, 8)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [72, 29, 0]]
** centroid: 3, normalized-entropy: 0.8649832752018335, [(1, 72), (2, 29)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 70, 22]]
** centroid: 4, normalized-entropy: 0.7935912300117066, [(2, 70), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [57, 4, 0]]
** centroid: 5, normalized-entropy: 0.34918437350730797, [(1, 57), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 55, 0]]
** centroid: 6, normalized-entropy: 0.5858732928619204, [(1, 9), (2, 55)]
*** center 7: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2702034709295258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2702034709295258, 0.212663381613791] ***
*** starting iteration: 2; err: [Inf, 0.2702034709295258, 0.212663381613791] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2702034709295258, 0.212663381613791, 0.19917496379464864] ***
*** starting iteration: 3; err: [Inf, 0.2702034709295258, 0.212663381613791, 0.19917496379464864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2702034709295258, 0.212663381613791, 0.19917496379464864, 0.19181978652626275] ***
*** finished computation of 7 references, err: [Inf, 0.2702034709295258, 0.212663381613791, 0.19917496379464864, 0.19181978652626275] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [73, 10, 0]]
** centroid: 1, normalized-entropy: 0.530744566923854, [(1, 73), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [105, 4, 0]]
** centroid: 2, normalized-entropy: 0.22693864262148727, [(1, 105), (2, 4)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 41, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [63, 6, 0]]
** centroid: 4, normalized-entropy: 0.42622865699814483, [(1, 63), (2, 6)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 37, 19]]
** centroid: 5, normalized-entropy: 0.9241335419915458, [(2, 37), (3, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 65, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24204947101324797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24204947101324797, 0.19560285072028638] ***
*** starting iteration: 2; err: [Inf, 0.24204947101324797, 0.19560285072028638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24204947101324797, 0.19560285072028638, 0.19024112544115632] ***
*** starting iteration: 3; err: [Inf, 0.24204947101324797, 0.19560285072028638, 0.19024112544115632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24204947101324797, 0.19560285072028638, 0.19024112544115632, 0.18798079600930215] ***
*** finished computation of 7 references, err: [Inf, 0.24204947101324797, 0.19560285072028638, 0.19024112544115632, 0.18798079600930215] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [49, 4, 0]]
** centroid: 1, normalized-entropy: 0.3860189005698936, [(1, 49), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [28, 52, 0]]
** centroid: 2, normalized-entropy: 0.9340680553754911, [(1, 28), (2, 52)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [7, 62, 0]]
** centroid: 3, normalized-entropy: 0.47357292491745173, [(1, 7), (2, 62)]
*** center 4: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 45, 21]]
** centroid: 5, normalized-entropy: 0.9023932827949788, [(2, 45), (3, 21)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [73, 4, 0]]
** centroid: 6, normalized-entropy: 0.29461520565280713, [(1, 73), (2, 4)]
*** center 7: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25621036173217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25621036173217, 0.19827131436020135] ***
*** starting iteration: 2; err: [Inf, 0.25621036173217, 0.19827131436020135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25621036173217, 0.19827131436020135, 0.18700058553554116] ***
*** starting iteration: 3; err: [Inf, 0.25621036173217, 0.19827131436020135, 0.18700058553554116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25621036173217, 0.19827131436020135, 0.18700058553554116, 0.1848701237048954] ***
*** finished computation of 7 references, err: [Inf, 0.25621036173217, 0.19827131436020135, 0.18700058553554116, 0.1848701237048954] ***
*** center 1: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 51, 20]]
** centroid: 2, normalized-entropy: 0.8577435372751958, [(2, 51), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 3, 0]]
** centroid: 3, normalized-entropy: 0.3274449191544762, [(1, 47), (2, 3)]
*** center 4: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 58, 0]]
** centroid: 5, normalized-entropy: 0.28290479297989196, [(1, 3), (2, 58)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [27, 58, 0]]
** centroid: 6, normalized-entropy: 0.9018043446575508, [(1, 27), (2, 58)]
*** center 7: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2696826209537685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2696826209537685, 0.20347997463867068] ***
*** starting iteration: 2; err: [Inf, 0.2696826209537685, 0.20347997463867068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2696826209537685, 0.20347997463867068, 0.19290284926444293] ***
*** starting iteration: 3; err: [Inf, 0.2696826209537685, 0.20347997463867068, 0.19290284926444293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2696826209537685, 0.20347997463867068, 0.19290284926444293, 0.18787684110831468] ***
*** finished computation of 7 references, err: [Inf, 0.2696826209537685, 0.20347997463867068, 0.19290284926444293, 0.18787684110831468] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 56, 20]]
** centroid: 1, normalized-entropy: 0.8314743880097292, [(2, 56), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [68, 1, 0]]
** centroid: 2, normalized-entropy: 0.10928571467638523, [(1, 68), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [33, 34, 0]]
** centroid: 4, normalized-entropy: 0.9998393017810486, [(1, 33), (2, 34)]
*** center 5: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [31, 41, 0]]
** centroid: 6, normalized-entropy: 0.9860400318404435, [(1, 31), (2, 41)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 47, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25329829687066374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25329829687066374, 0.20579816426709294] ***
*** starting iteration: 2; err: [Inf, 0.25329829687066374, 0.20579816426709294] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25329829687066374, 0.20579816426709294, 0.1992187516335398] ***
*** starting iteration: 3; err: [Inf, 0.25329829687066374, 0.20579816426709294, 0.1992187516335398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25329829687066374, 0.20579816426709294, 0.1992187516335398, 0.192725291762501] ***
*** finished computation of 7 references, err: [Inf, 0.25329829687066374, 0.20579816426709294, 0.1992187516335398, 0.192725291762501] ***
*** center 1: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [91, 13, 0]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(1, 91), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [6, 54, 0]]
** centroid: 3, normalized-entropy: 0.46899559358928133, [(1, 6), (2, 54)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 36, 17]]
** centroid: 4, normalized-entropy: 0.9052002969560479, [(2, 36), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [7, 66, 0]]
** centroid: 5, normalized-entropy: 0.4558314584408233, [(1, 7), (2, 66)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [60, 7, 0]]
** centroid: 6, normalized-entropy: 0.4830306801456181, [(1, 60), (2, 7)]
*** center 7: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2977795166950673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2977795166950673, 0.22207238877378405] ***
*** starting iteration: 2; err: [Inf, 0.2977795166950673, 0.22207238877378405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2977795166950673, 0.22207238877378405, 0.20836390006542205] ***
*** starting iteration: 3; err: [Inf, 0.2977795166950673, 0.22207238877378405, 0.20836390006542205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2977795166950673, 0.22207238877378405, 0.20836390006542205, 0.2004396766461432] ***
*** finished computation of 7 references, err: [Inf, 0.2977795166950673, 0.22207238877378405, 0.20836390006542205, 0.2004396766461432] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [46, 4, 0]]
** centroid: 1, normalized-entropy: 0.4021791902022729, [(1, 46), (2, 4)]
*** center 2: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [18, 66, 0]]
** centroid: 3, normalized-entropy: 0.7495952572594798, [(1, 18), (2, 66)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [82, 10, 0]]
** centroid: 4, normalized-entropy: 0.49596907206183377, [(1, 82), (2, 10)]
*** center 5: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 60, 16]]
** centroid: 6, normalized-entropy: 0.7424875695421234, [(2, 60), (3, 16)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [34, 37, 0]]
** centroid: 7, normalized-entropy: 0.9987117514654895, [(1, 34), (2, 37)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23413047990575434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23413047990575434, 0.20970503860898315] ***
*** starting iteration: 2; err: [Inf, 0.23413047990575434, 0.20970503860898315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23413047990575434, 0.20970503860898315, 0.20060226759687066] ***
*** starting iteration: 3; err: [Inf, 0.23413047990575434, 0.20970503860898315, 0.20060226759687066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23413047990575434, 0.20970503860898315, 0.20060226759687066, 0.19359632413089276] ***
*** finished computation of 7 references, err: [Inf, 0.23413047990575434, 0.20970503860898315, 0.20060226759687066, 0.19359632413089276] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 66, 5]]
** centroid: 1, normalized-entropy: 0.3674984948272913, [(2, 66), (3, 5)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [64, 4, 0]]
** centroid: 2, normalized-entropy: 0.32275695889739825, [(1, 64), (2, 4)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [94, 2, 0]]
** centroid: 3, normalized-entropy: 0.14609425012013613, [(1, 94), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [61, 14, 0]]
** centroid: 4, normalized-entropy: 0.6944460704939805, [(1, 61), (2, 14)]
*** center 5: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 65, 9]]
** centroid: 6, normalized-entropy: 0.5340042729285396, [(2, 65), (3, 9)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [33, 22, 0]]
** centroid: 7, normalized-entropy: 0.9709505944546688, [(1, 33), (2, 22)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2734838289581239] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2734838289581239, 0.19470413031009956] ***
*** starting iteration: 2; err: [Inf, 0.2734838289581239, 0.19470413031009956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2734838289581239, 0.19470413031009956, 0.19150215583015234] ***
*** starting iteration: 3; err: [Inf, 0.2734838289581239, 0.19470413031009956, 0.19150215583015234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2734838289581239, 0.19470413031009956, 0.19150215583015234, 0.19041213816404343] ***
*** finished computation of 7 references, err: [Inf, 0.2734838289581239, 0.19470413031009956, 0.19150215583015234, 0.19041213816404343] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 58, 19]]
** centroid: 1, normalized-entropy: 0.8060914696192223, [(2, 58), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [41, 37, 0]]
** centroid: 4, normalized-entropy: 0.9981021327390103, [(1, 41), (2, 37)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [5, 82, 0]]
** centroid: 5, normalized-entropy: 0.3173238998358585, [(1, 5), (2, 82)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [46, 16, 0]]
** centroid: 6, normalized-entropy: 0.8238116333123173, [(1, 46), (2, 16)]
*** center 7: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23056741862557828] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23056741862557828, 0.20819989331439137] ***
*** starting iteration: 2; err: [Inf, 0.23056741862557828, 0.20819989331439137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23056741862557828, 0.20819989331439137, 0.199553759817034] ***
*** starting iteration: 3; err: [Inf, 0.23056741862557828, 0.20819989331439137, 0.199553759817034] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23056741862557828, 0.20819989331439137, 0.199553759817034, 0.1910606560204178] ***
*** finished computation of 7 references, err: [Inf, 0.23056741862557828, 0.20819989331439137, 0.199553759817034, 0.1910606560204178] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 84, 20]]
** centroid: 1, normalized-entropy: 0.7062740891876008, [(2, 84), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [74, 2, 0]]
** centroid: 2, normalized-entropy: 0.17556502585750275, [(1, 74), (2, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [29, 51, 0]]
** centroid: 5, normalized-entropy: 0.9447388286467892, [(1, 29), (2, 51)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [30, 30, 0]]
** centroid: 6, normalized-entropy: 1.0, [(1, 30), (2, 30)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [59, 7, 0]]
** centroid: 7, normalized-entropy: 0.48791799258948565, [(1, 59), (2, 7)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2469525822736323] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2469525822736323, 0.19487238123174758] ***
*** starting iteration: 2; err: [Inf, 0.2469525822736323, 0.19487238123174758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2469525822736323, 0.19487238123174758, 0.19296957139857113] ***
*** starting iteration: 3; err: [Inf, 0.2469525822736323, 0.19487238123174758, 0.19296957139857113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2469525822736323, 0.19487238123174758, 0.19296957139857113, 0.19141822958178817] ***
*** finished computation of 7 references, err: [Inf, 0.2469525822736323, 0.19487238123174758, 0.19296957139857113, 0.19141822958178817] ***
*** center 1: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [3, 53, 0]]
** centroid: 2, normalized-entropy: 0.3013786435930858, [(1, 3), (2, 53)]
*** center 3: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 47, 16]]
** centroid: 4, normalized-entropy: 0.8175072881213616, [(2, 47), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [10, 61, 0]]
** centroid: 5, normalized-entropy: 0.5864477034453907, [(1, 10), (2, 61)]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [82, 4, 0]]
** centroid: 7, normalized-entropy: 0.2713895875081112, [(1, 82), (2, 4)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2617969578579068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2617969578579068, 0.20488194519095124] ***
*** starting iteration: 2; err: [Inf, 0.2617969578579068, 0.20488194519095124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2617969578579068, 0.20488194519095124, 0.1942343989647925] ***
*** starting iteration: 3; err: [Inf, 0.2617969578579068, 0.20488194519095124, 0.1942343989647925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2617969578579068, 0.20488194519095124, 0.1942343989647925, 0.1890727476030588] ***
*** finished computation of 7 references, err: [Inf, 0.2617969578579068, 0.20488194519095124, 0.1942343989647925, 0.1890727476030588] ***
*** center 1: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 75, 19]]
** centroid: 2, normalized-entropy: 0.7261630586710504, [(2, 75), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [1, 70, 0]]
** centroid: 3, normalized-entropy: 0.10679203237584184, [(1, 1), (2, 70)]
*** center 4: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [32, 9, 0]]
** centroid: 5, normalized-entropy: 0.7592757847892834, [(1, 32), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [78, 6, 0]]
** centroid: 6, normalized-entropy: 0.3712323266408756, [(1, 78), (2, 6)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [95, 16, 0]]
** centroid: 7, normalized-entropy: 0.5949898952560516, [(1, 95), (2, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24725304278731347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24725304278731347, 0.1999133700057864] ***
*** starting iteration: 2; err: [Inf, 0.24725304278731347, 0.1999133700057864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24725304278731347, 0.1999133700057864, 0.18909401034377515] ***
*** starting iteration: 3; err: [Inf, 0.24725304278731347, 0.1999133700057864, 0.18909401034377515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24725304278731347, 0.1999133700057864, 0.18909401034377515, 0.18695482349582015] ***
*** finished computation of 7 references, err: [Inf, 0.24725304278731347, 0.1999133700057864, 0.18909401034377515, 0.18695482349582015] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 47, 17]]
** centroid: 1, normalized-entropy: 0.8351164948421137, [(2, 47), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [39, 29, 0]]
** centroid: 2, normalized-entropy: 0.9843432030984676, [(1, 39), (2, 29)]
*** center 3: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [35, 39, 0]]
** centroid: 4, normalized-entropy: 0.9978913098356861, [(1, 35), (2, 39)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 59, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [81, 6, 0]]
** centroid: 6, normalized-entropy: 0.36205125173399805, [(1, 81), (2, 6)]
*** center 7: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2699246163163334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2699246163163334, 0.21470350907556712] ***
*** starting iteration: 2; err: [Inf, 0.2699246163163334, 0.21470350907556712] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2699246163163334, 0.21470350907556712, 0.20507540644705297] ***
*** starting iteration: 3; err: [Inf, 0.2699246163163334, 0.21470350907556712, 0.20507540644705297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2699246163163334, 0.21470350907556712, 0.20507540644705297, 0.1939242804031819] ***
*** finished computation of 7 references, err: [Inf, 0.2699246163163334, 0.21470350907556712, 0.20507540644705297, 0.1939242804031819] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 65, 20]]
** centroid: 1, normalized-entropy: 0.787126586201269, [(2, 65), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 9, 0]]
** centroid: 2, normalized-entropy: 0.569190343735683, [(1, 58), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 65, 1]]
** centroid: 3, normalized-entropy: 0.11327430349709665, [(2, 65), (3, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [44, 22, 0]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(1, 44), (2, 22)]
*** center 5: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [87, 13, 0]]
** centroid: 7, normalized-entropy: 0.557438185027989, [(1, 87), (2, 13)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21415023467689753] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21415023467689753, 0.19648629835806786] ***
*** starting iteration: 2; err: [Inf, 0.21415023467689753, 0.19648629835806786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21415023467689753, 0.19648629835806786, 0.18989117618463933] ***
*** starting iteration: 3; err: [Inf, 0.21415023467689753, 0.19648629835806786, 0.18989117618463933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21415023467689753, 0.19648629835806786, 0.18989117618463933, 0.18814299291186035] ***
*** finished computation of 7 references, err: [Inf, 0.21415023467689753, 0.19648629835806786, 0.18989117618463933, 0.18814299291186035] ***
*** center 1: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [69, 27, 0]]
** centroid: 2, normalized-entropy: 0.8571484374283717, [(1, 69), (2, 27)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 61, 17]]
** centroid: 3, normalized-entropy: 0.7564041945982506, [(2, 61), (3, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [37, 31, 0]]
** centroid: 4, normalized-entropy: 0.9943766625699823, [(1, 37), (2, 31)]
*** center 5: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [29, 41, 0]]
** centroid: 6, normalized-entropy: 0.9786961448300948, [(1, 29), (2, 41)]
*** center 7: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2132827534498647] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2132827534498647, 0.1928298693750985] ***
*** starting iteration: 2; err: [Inf, 0.2132827534498647, 0.1928298693750985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2132827534498647, 0.1928298693750985, 0.19120848185010256] ***
*** starting iteration: 3; err: [Inf, 0.2132827534498647, 0.1928298693750985, 0.19120848185010256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2132827534498647, 0.1928298693750985, 0.19120848185010256, 0.19038269446883352] ***
*** finished computation of 7 references, err: [Inf, 0.2132827534498647, 0.1928298693750985, 0.19120848185010256, 0.19038269446883352] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [25, 40, 0]]
** centroid: 1, normalized-entropy: 0.961236604722876, [(1, 25), (2, 40)]
*** center 2: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 21, 0]]
** centroid: 4, normalized-entropy: 0.7973265101474423, [(1, 66), (2, 21)]
*** center 5: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [13, 58, 0]]
** centroid: 6, normalized-entropy: 0.6868088934028034, [(1, 13), (2, 58)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 71, 22]]
** centroid: 7, normalized-entropy: 0.7892712724536985, [(2, 71), (3, 22)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2595363718997687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2595363718997687, 0.20206530551239849] ***
*** starting iteration: 2; err: [Inf, 0.2595363718997687, 0.20206530551239849] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2595363718997687, 0.20206530551239849, 0.19225031271204351] ***
*** starting iteration: 3; err: [Inf, 0.2595363718997687, 0.20206530551239849, 0.19225031271204351] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2595363718997687, 0.20206530551239849, 0.19225031271204351, 0.18853210619650781] ***
*** finished computation of 7 references, err: [Inf, 0.2595363718997687, 0.20206530551239849, 0.19225031271204351, 0.18853210619650781] ***
*** center 1: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [11, 48, 0]]
** centroid: 2, normalized-entropy: 0.693965967334286, [(1, 11), (2, 48)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [55, 1, 0]]
** centroid: 3, normalized-entropy: 0.12923377484588472, [(1, 55), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [80, 6, 0]]
** centroid: 4, normalized-entropy: 0.3650551896402848, [(1, 80), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 54, 0]]
** centroid: 5, normalized-entropy: 0.8796975782775168, [(1, 23), (2, 54)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [82, 1, 0]]
** centroid: 6, normalized-entropy: 0.09408443883267342, [(1, 82), (2, 1)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 59, 18]]
** centroid: 7, normalized-entropy: 0.7845191388986644, [(2, 59), (3, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22059658892825246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22059658892825246, 0.19416487802565097] ***
*** starting iteration: 2; err: [Inf, 0.22059658892825246, 0.19416487802565097] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22059658892825246, 0.19416487802565097, 0.19088786333892493] ***
*** starting iteration: 3; err: [Inf, 0.22059658892825246, 0.19416487802565097, 0.19088786333892493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22059658892825246, 0.19416487802565097, 0.19088786333892493, 0.18828649431094527] ***
*** finished computation of 7 references, err: [Inf, 0.22059658892825246, 0.19416487802565097, 0.19088786333892493, 0.18828649431094527] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [74, 11, 0]]
** centroid: 1, normalized-entropy: 0.5558227377664954, [(1, 74), (2, 11)]
*** center 2: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 46, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 60, 12]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 60), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [30, 30, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 30), (2, 30)]
*** center 6: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [61, 17, 0]]
** centroid: 7, normalized-entropy: 0.7564041945982506, [(1, 61), (2, 17)]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 348,3 => 37,1 => 615), Dict(2 => 406,3 => 38,1 => 556))
[ Info: ===== scores for single classifier: {"micro_f1":0.881,"precision":0.881,"recall":0.881,"macro_recall":0.907416301856104,"macro_f1":0.8182018469773641,"accuracy":0.881,"class_f1":{"2":0.853628536285363,"3":0.6788990825688074,"1":0.922077922077922},"class_precision":{"2":0.8525798525798526,"3":0.5211267605633803,"1":0.9521072796934866},"class_recall":{"2":0.854679802955665,"3":0.9736842105263158,"1":0.8938848920863309}}
[ Info: ===== scores for 1: {"micro_f1":0.958,"precision":0.958,"recall":0.958,"macro_recall":0.9600028040828938,"macro_f1":0.9300125431298133,"accuracy":0.958,"class_f1":{"2":0.947103274559194,"3":0.8705882352941177,"1":0.9723461195361285},"class_precision":{"2":0.9690721649484536,"3":0.7872340425531915,"1":0.9646017699115044},"class_recall":{"2":0.9261083743842364,"3":0.9736842105263158,"1":0.9802158273381295}}
[ Info: ===== scores for 5: {"micro_f1":0.954,"precision":0.954,"recall":0.954,"macro_recall":0.9496538107859577,"macro_f1":0.9230589691073562,"accuracy":0.954,"class_f1":{"2":0.9425000000000001,"3":0.8571428571428571,"1":0.9695340501792115},"class_precision":{"2":0.9568527918781726,"3":0.782608695652174,"1":0.9660714285714286},"class_recall":{"2":0.9285714285714286,"3":0.9473684210526315,"1":0.9730215827338129}}
[ Info: ===== scores for 7: {"micro_f1":0.9500000000000001,"precision":0.95,"recall":0.95,"macro_recall":0.9461482408576639,"macro_f1":0.9140313843304294,"accuracy":0.95,"class_f1":{"2":0.9370277078085641,"3":0.8372093023255814,"1":0.9678571428571429},"class_precision":{"2":0.9587628865979382,"3":0.75,"1":0.9609929078014184},"class_recall":{"2":0.916256157635468,"3":0.9473684210526315,"1":0.9748201438848921}}
[ Info: ===== scores for 9: {"micro_f1":0.955,"precision":0.955,"recall":0.955,"macro_recall":0.9582042429318148,"macro_f1":0.9188815562776774,"accuracy":0.955,"class_f1":{"2":0.9435382685069009,"3":0.8409090909090909,"1":0.9721973094170404},"class_precision":{"2":0.9616368286445013,"3":0.74,"1":0.9695885509838998},"class_recall":{"2":0.9261083743842364,"3":0.9736842105263158,"1":0.9748201438848921}}
[ Info: ===== scores for 11: {"micro_f1":0.952,"precision":0.952,"recall":0.952,"macro_recall":0.9561841841020313,"macro_f1":0.916746022883224,"accuracy":0.952,"class_f1":{"2":0.9398496240601504,"3":0.8409090909090909,"1":0.9694793536804308},"class_precision":{"2":0.9566326530612245,"3":0.74,"1":0.967741935483871},"class_recall":{"2":0.9236453201970444,"3":0.9736842105263158,"1":0.9712230215827338}}
(score = 0.958, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.96, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.96, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.954, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.954, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.953, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.953, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.954, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.954, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.956, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.956, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.95, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.95, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.947, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.947, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.96,"k":1,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.96,"precision":0.96,"recall":0.96,"macro_recall":0.9689312589337398,"macro_f1":0.9323413397644099,"accuracy":0.96,"class_f1":{"2":0.9492385786802031,"3":0.8735632183908045,"1":0.9742222222222222},"class_precision":{"2":0.9790575916230366,"3":0.7755102040816326,"1":0.9630931458699473},"class_recall":{"2":0.9211822660098522,"3":1.0,"1":0.9856115107913669}}
Test Summary: | Pass  Total
AKNC          |    8      8
[372, 1, 2, 2, 2, 2, 1, 1, 5, 1, 3, 1, 3, 7, 1, 1, 1, 4, 2, 5, 9, 17, 2, 35, 43, 5, 2, 2, 6, 4, 3, 1, 7, 5, 26, 9, 10, 5, 3, 46, 1, 13, 25, 6, 2, 4, 2, 6, 4, 14, 5, 45, 15, 10, 79, 13, 2, 7, 5, 28, 14, 15, 20, 47, 38, 4, 11, 12, 35, 56, 16, 6, 18, 1, 101, 29, 23, 18, 12, 3, 36, 9, 7, 96, 2, 85, 43, 12, 10, 94, 5, 39, 13, 60, 42, 29, 29, 5, 20, 11, 104, 6, 12, 12, 3, 11, 8, 35, 14, 9, 5, 14, 16, 11, 2, 2, 20, 91, 11, 18, 37, 17, 6, 10, 4, 227, 18, 53, 15, 39, 4, 22, 7, 45, 3, 6, 31, 9, 24, 21, 23, 14, 40, 51, 55, 3, 13, 5, 50, 10, 7, 198, 39, 212, 111, 61, 5, 35, 29, 11, 22, 12, 32, 2, 19, 61, 2, 39, 3, 37, 13, 31, 86, 6, 32, 10, 8, 3, 15, 18, 112, 6, 1, 15, 5, 28, 8, 32, 20, 1139, 1, 30, 23, 17, 8, 26, 8, 48, 60, 37, 26, 51, 15, 7, 12, 11, 38, 15, 14, 20, 312, 3, 23, 14, 19, 22, 4, 12, 72, 12, 27, 29, 37, 12, 8, 9, 25, 13, 10, 11, 13, 89, 78, 17, 43, 56, 45, 13, 1, 35, 11, 17, 3, 225, 27, 21, 26, 58, 6, 61, 11, 9, 148, 62, 35, 32, 13, 19, 16, 98, 138, 37, 161, 29, 15, 27, 5, 14, 39, 13, 35, 46, 19, 15, 24, 3, 4, 51, 11, 12, 43, 23, 38, 4, 21, 15, 83, 15, 7, 11, 24, 18, 23, 24, 4, 4, 9, 576, 5, 66]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6869999999999997, speedup = 0.2887112714903006, eval_ratio = 0.083087)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":null,"recall":0.3758680555555557,"f1":null,"seconds":0.00016084499657154083,"exhaustive_search_seconds":0.00037583522498607635,"evaluations":465.171875,"distances_sum":1733.0637140674246}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.560763888888889,"recall":0.560763888888889,"f1":null,"seconds":0.00031054019927978516,"exhaustive_search_seconds":0.00037583522498607635,"evaluations":655.015625,"distances_sum":1669.2481668068244}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.675347222222222,"recall":0.675347222222222,"f1":null,"seconds":0.0005771312862634659,"exhaustive_search_seconds":0.00037583522498607635,"evaluations":826.578125,"distances_sum":1611.3676608375788}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7326388888888884,"recall":0.7326388888888884,"f1":0.7326388888888884,"seconds":0.00048630498349666595,"exhaustive_search_seconds":0.00037583522498607635,"evaluations":936.1328125,"distances_sum":1588.7566293527977}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7890624999999991,"recall":0.7890624999999991,"f1":0.7890624999999991,"seconds":0.0005671996623277664,"exhaustive_search_seconds":0.00037583522498607635,"evaluations":1051.6875,"distances_sum":1570.2074320010588}
KCenters.DeloneInvIndex> reached performance {"precision":0.8333333333333324,"recall":0.8333333333333324,"f1":0.8333333333333324,"seconds":0.0006898753345012665,"exhaustive_search_seconds":0.00037583522498607635,"evaluations":1144.2578125,"distances_sum":1558.2458300712426}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8460000000000001, speedup = 0.4370511262978738, eval_ratio = 0.122431)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
