Julia Version 1.5.0-DEV.719
Commit 5a71af311a (2020-04-29 17:39 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Compat ────────────────────── v3.8.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed DataStructures ────────────── v0.17.14
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed DataFrames ────────────────── v0.20.2
  Installed Parsers ───────────────────── v1.0.2
  Installed InvertedIndices ───────────── v1.0.0
  Installed JSON ──────────────────────── v0.21.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Tables ────────────────────── v1.0.4
  Installed LearnBase ─────────────────── v0.2.2
  Installed MappedArrays ──────────────── v0.2.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed SimilaritySearch ──────────── v0.3.19
  Installed PooledArrays ──────────────── v0.5.3
  Installed MLDataUtils ───────────────── v0.5.1
  Installed TableTraits ───────────────── v1.0.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed DataAPI ───────────────────── v1.3.0
  Installed Reexport ──────────────────── v0.2.0
  Installed Missings ──────────────────── v0.4.3
  Installed OrderedCollections ────────── v1.1.0
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.14
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_ujBxIQ/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_ujBxIQ/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.14
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
WARNING: Method definition deque(Type{T}) where {T} in module DataStructures at /home/pkgeval/.julia/packages/DataStructures/w35Mo/src/deque.jl:89 overwritten at deprecated.jl:70.
  ** incremental compilation may be fatally broken for this module **

Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9364293802777927
[ Info: 0.8302954188982645
[ Info: 0.5561528046429157
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3370421227564414
mean(cdnet.distances) = 0.34889625703295074
mean(crand.distances) = 0.3463947452604771
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4423828125, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.4423828125,"f1":0.5881096334221336,"seconds":4.2691826820373535e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":6.5703125,"distances_sum":1095.9253982681953}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2392578125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2392578125,"f1":null,"seconds":3.46451997756958e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":6.3671875,"distances_sum":608.0863005190458}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4423828125,"state":{"ssize":1,"bsize":2},"perf":{"precision":1.0,"recall":0.4423828125,"f1":0.5881096334221336,"seconds":4.2691826820373535e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":6.5703125,"distances_sum":1095.9253982681953}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5791015625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5791015625,"f1":0.7157998251748258,"seconds":4.284083843231201e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":7.625,"distances_sum":1498.9304749053674}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4833984375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4833984375,"f1":null,"seconds":6.813555955886841e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":6.8515625,"distances_sum":1201.1140450064627}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5791015625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5791015625,"f1":0.7157998251748258,"seconds":4.284083843231201e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":7.625,"distances_sum":1498.9304749053674}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9483287545787551,"seconds":6.243586540222168e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.921875,"distances_sum":2562.390734098393}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9142029845154852,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.6640625,"distances_sum":2321.979454716361}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9483287545787551,"seconds":6.243586540222168e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.921875,"distances_sum":2562.390734098393}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9072265625,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9483287545787551,"seconds":6.243586540222168e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.921875,"distances_sum":2562.390734098393}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.7920879467754475,"seconds":5.07943332195282e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":7.65625,"distances_sum":1680.6436221839042}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6689453125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6689453125,"f1":0.7920879467754475,"seconds":5.07943332195282e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":7.65625,"distances_sum":1680.6436221839042}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9342548076923083,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.7734375,"distances_sum":2336.4023419245805}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9545215201465206,"seconds":6.0051679611206055e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.703125,"distances_sum":2537.2091942421353}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9545215201465206,"seconds":6.0051679611206055e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.703125,"distances_sum":2537.2091942421353}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9545215201465206,"seconds":6.0051679611206055e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.703125,"distances_sum":2537.2091942421353}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9545215201465206,"seconds":6.0051679611206055e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.703125,"distances_sum":2537.2091942421353}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.8042114135864143,"seconds":5.107372999191284e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.171875,"distances_sum":1684.5455760160803}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5732421875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5732421875,"f1":0.7123149420024427,"seconds":4.624947905540466e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.3359375,"distances_sum":1427.993388858796}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6865234375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6865234375,"f1":0.8042114135864143,"seconds":5.107372999191284e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.171875,"distances_sum":1684.5455760160803}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8552863802863812,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.5,"distances_sum":1941.7838221430625}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8954040750915759,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.734375,"distances_sum":2136.4612428641963}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8993334790209799,"seconds":5.768612027168274e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.71875,"distances_sum":2179.2979125680777}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9112840284715291,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.765625,"distances_sum":2239.5883768126787}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8447265625,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8447265625,"f1":0.9112840284715291,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.765625,"distances_sum":2239.5883768126787}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9690705128205132,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9140625,"distances_sum":2677.9139919907407}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9458390567765576,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.84375,"distances_sum":2501.0198369026416}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9588942307692312,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.828125,"distances_sum":2629.0620391741595}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9406364468864474,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8203125,"distances_sum":2488.334855543091}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690705128205132,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9140625,"distances_sum":2677.9139919907407}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690705128205132,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9140625,"distances_sum":2677.9139919907407}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6298828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6298828125,"f1":0.75413752913753,"seconds":4.41819429397583e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.515625,"distances_sum":1483.8853697820625}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1572265625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1572265625,"f1":null,"seconds":2.8870999813079834e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":4.765625,"distances_sum":352.9793761046158}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6298828125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6298828125,"f1":0.75413752913753,"seconds":4.41819429397583e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.515625,"distances_sum":1483.8853697820625}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.942923222610723,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.6796875,"distances_sum":2394.5276396540107}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.942923222610723,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.6796875,"distances_sum":2394.5276396540107}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.942923222610723,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.6796875,"distances_sum":2394.5276396540107}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.904296875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.942923222610723,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.6796875,"distances_sum":2394.5276396540107}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6240234375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.6240234375,"f1":0.7563162531912538,"seconds":4.211440682411194e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.328125,"distances_sum":1501.5272534869946}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.197265625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.197265625,"f1":null,"seconds":3.043562173843384e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":5.984375,"distances_sum":482.64277778536734}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8592553280053289,"seconds":5.163252353668213e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.5,"distances_sum":1883.4630134466174}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.8592553280053289,"seconds":5.163252353668213e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.5,"distances_sum":1883.4630134466174}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8624526515151523,"seconds":5.153939127922058e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.5078125,"distances_sum":1929.6419048861344}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.903514194139195,"seconds":5.474314093589783e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7734375,"distances_sum":2124.6078525103035}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.964159798534799,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.90625,"distances_sum":2569.359895977102}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9337313727938734,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.859375,"distances_sum":2346.945335378465}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9405937812187819,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.90625,"distances_sum":2388.1953560450174}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.964159798534799,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.90625,"distances_sum":2569.359895977102}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9751316391941396,"seconds":6.32554292678833e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9609375,"distances_sum":2650.639858002939}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":11,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9678628663003666,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9453125,"distances_sum":2603.3503134108314}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.971932234432235,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9609375,"distances_sum":2617.7062416597837}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9780334249084253,"seconds":6.260350346565247e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9765625,"distances_sum":2671.6156359405195}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9745364010989013,"seconds":6.398186087608337e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9765625,"distances_sum":2630.346309224057}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9666151556776561,"seconds":6.062909960746765e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.921875,"distances_sum":2601.025875988573}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9731971153846157,"seconds":6.148591637611389e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9609375,"distances_sum":2620.096450641198}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9780334249084253,"seconds":6.260350346565247e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9765625,"distances_sum":2671.6156359405195}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9780334249084253,"seconds":6.260350346565247e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9765625,"distances_sum":2671.6156359405195}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7333984375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7333984375,"f1":0.8342584498834509,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.0546875,"distances_sum":1876.7772888415132}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.595703125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.595703125,"f1":0.7299955253080259,"seconds":4.811212420463562e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.25,"distances_sum":1480.0112740558382}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7333984375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7333984375,"f1":0.8342584498834509,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.0546875,"distances_sum":1876.7772888415132}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9491357600732605,"seconds":5.804002285003662e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.828125,"distances_sum":2453.30431295649}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9491357600732605,"seconds":5.804002285003662e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.828125,"distances_sum":2453.30431295649}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.979075091575092,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.9765625,"distances_sum":2622.431154637875}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9708733974358975,"seconds":6.025657057762146e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.9140625,"distances_sum":2580.159184668431}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.979075091575092,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.9765625,"distances_sum":2622.431154637875}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.979075091575092,"seconds":6.334856152534485e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.9765625,"distances_sum":2622.431154637875}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.658203125,"f1":0.7831886863136872,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.171875,"distances_sum":1297.026275693276}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8669991466866476,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.453125,"distances_sum":1566.177841099004}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.8669991466866476,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.453125,"distances_sum":1566.177841099004}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9735691391941395,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9140625,"distances_sum":2156.9444986319213}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9126805486180495,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.8125,"distances_sum":1796.5328050250914}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9495249542124546,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.8203125,"distances_sum":2008.511221938706}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9408971237096242,"seconds":6.027519702911377e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.78125,"distances_sum":1951.4704526628655}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9735691391941395,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9140625,"distances_sum":2156.9444986319213}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9766769688644692,"seconds":6.338581442832947e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9453125,"distances_sum":2163.8232661955158}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":2,"bsize":13}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9797447344322348,"seconds":6.584450602531433e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9375,"distances_sum":2179.108765634713}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":5,"bsize":13}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9787946428571435,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.984375,"distances_sum":2161.2353323390416}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9773637820512823,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9453125,"distances_sum":2161.4518708229607}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9746852106227109,"seconds":6.075948476791382e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.8984375,"distances_sum":2160.8646548906368}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9797447344322348,"seconds":6.584450602531433e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9375,"distances_sum":2179.108765634713}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9797447344322348,"seconds":6.584450602531433e-6,"exhaustive_search_seconds":1.3969838619232178e-6,"evaluations":8.9375,"distances_sum":2179.108765634713}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5048828125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5048828125,"f1":0.6528351856476861,"seconds":4.3567270040512085e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":6.609375,"distances_sum":953.78814855261}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.73046875,"f1":0.8328827422577431,"seconds":5.301088094711304e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.0546875,"distances_sum":1454.8576968751518}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7767801642801652,"seconds":4.855915904045105e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.546875,"distances_sum":1317.8983056169793}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7314453125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7314453125,"f1":0.8334275099900107,"seconds":5.280598998069763e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.1171875,"distances_sum":1462.275411314003}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7314453125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7314453125,"f1":0.8334275099900107,"seconds":5.280598998069763e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.1171875,"distances_sum":1462.275411314003}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9512133699633704,"seconds":1.4113262295722961e-5,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.7890625,"distances_sum":2008.5018003159917}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9440762362637368,"seconds":1.4415010809898376e-5,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.65625,"distances_sum":2003.6355874509293}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80078125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.80078125,"f1":0.879559502997004,"seconds":1.3353303074836731e-5,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.3203125,"distances_sum":1670.257355546352}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.9175740925740933,"seconds":0.00011929497122764587,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.609375,"distances_sum":1851.8685274114664}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8776359057609068,"seconds":6.16908073425293e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.328125,"distances_sum":1647.3462249698116}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9512133699633704,"seconds":1.4113262295722961e-5,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.7890625,"distances_sum":2008.5018003159917}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9535943223443231,"seconds":6.433576345443726e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.75,"distances_sum":2023.4437477588174}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9612580128205133,"seconds":4.049390554428101e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.828125,"distances_sum":2071.201022516863}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9612580128205133,"seconds":4.049390554428101e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.828125,"distances_sum":2071.201022516863}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9612580128205133,"seconds":4.049390554428101e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.828125,"distances_sum":2071.201022516863}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.408203125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.408203125,"f1":null,"seconds":7.534399628639221e-6,"exhaustive_search_seconds":2.6319175958633423e-6,"evaluations":6.1015625,"distances_sum":741.7406903592058}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2001953125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2001953125,"f1":null,"seconds":4.2729079723358154e-6,"exhaustive_search_seconds":2.6319175958633423e-6,"evaluations":5.4375,"distances_sum":423.4839682526697}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6455078125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6455078125,"f1":0.7716007950382957,"seconds":5.640089511871338e-6,"exhaustive_search_seconds":2.6319175958633423e-6,"evaluations":7.5,"distances_sum":1314.0763132884024}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6455078125,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6455078125,"f1":0.7716007950382957,"seconds":5.640089511871338e-6,"exhaustive_search_seconds":2.6319175958633423e-6,"evaluations":7.5,"distances_sum":1314.0763132884024}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9074461996337003,"seconds":6.750226020812988e-6,"exhaustive_search_seconds":2.6319175958633423e-6,"evaluations":8.3515625,"distances_sum":1828.3976908573688}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8683410339660349,"seconds":6.457790732383728e-6,"exhaustive_search_seconds":2.6319175958633423e-6,"evaluations":8.1171875,"distances_sum":1627.7320091842769}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8494110056610066,"seconds":6.545335054397583e-6,"exhaustive_search_seconds":2.6319175958633423e-6,"evaluations":8.046875,"distances_sum":1544.6809128160128}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8388671875,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.8388671875,"f1":0.9074461996337003,"seconds":6.750226020812988e-6,"exhaustive_search_seconds":2.6319175958633423e-6,"evaluations":8.3515625,"distances_sum":1828.3976908573688}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9511961996337002,"seconds":7.1711838245391846e-6,"exhaustive_search_seconds":2.6319175958633423e-6,"evaluations":8.7109375,"distances_sum":2086.160248747493}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9381269771894778,"seconds":6.9551169872283936e-6,"exhaustive_search_seconds":2.6319175958633423e-6,"evaluations":8.6328125,"distances_sum":2015.7378315417186}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.960788690476191,"seconds":7.329508662223816e-6,"exhaustive_search_seconds":2.6319175958633423e-6,"evaluations":8.8359375,"distances_sum":2127.003885118706}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9611263736263742,"seconds":7.2177499532699585e-6,"exhaustive_search_seconds":2.6319175958633423e-6,"evaluations":8.859375,"distances_sum":2111.1730674521573}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9519605394605398,"seconds":7.1339309215545654e-6,"exhaustive_search_seconds":2.6319175958633423e-6,"evaluations":8.7578125,"distances_sum":2084.482933339258}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9199233058608066,"seconds":7.061287760734558e-6,"exhaustive_search_seconds":2.6319175958633423e-6,"evaluations":8.5546875,"distances_sum":1880.8596853639096}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9597355769230775,"seconds":7.148832082748413e-6,"exhaustive_search_seconds":2.6319175958633423e-6,"evaluations":8.8203125,"distances_sum":2102.5216545141902}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.960788690476191,"seconds":7.329508662223816e-6,"exhaustive_search_seconds":2.6319175958633423e-6,"evaluations":8.8359375,"distances_sum":2127.003885118706}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.960788690476191,"seconds":7.329508662223816e-6,"exhaustive_search_seconds":2.6319175958633423e-6,"evaluations":8.8359375,"distances_sum":2127.003885118706}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8566766566766575,"seconds":6.549060344696045e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.625,"distances_sum":1698.9664589215784}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2099609375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2099609375,"f1":null,"seconds":4.1853636503219604e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.0234375,"distances_sum":421.3426790721808}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2099609375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2099609375,"f1":null,"seconds":4.244968295097351e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.0625,"distances_sum":468.9781896315471}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.8566766566766575,"seconds":6.549060344696045e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.625,"distances_sum":1698.9664589215784}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.960479624542125,"seconds":7.22147524356842e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8984375,"distances_sum":2285.7006334760417}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.960479624542125,"seconds":7.22147524356842e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.8984375,"distances_sum":2285.7006334760417}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9755608974358979,"seconds":7.363036274909973e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":9.0,"distances_sum":2377.7570368149345}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9755608974358979,"seconds":7.363036274909973e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":9.0,"distances_sum":2377.7570368149345}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9755608974358979,"seconds":7.363036274909973e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":9.0,"distances_sum":2377.7570368149345}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3828125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3828125,"f1":null,"seconds":3.5408884286880493e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.2109375,"distances_sum":833.7978260768535}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2275390625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2275390625,"f1":null,"seconds":2.1494925022125244e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.7890625,"distances_sum":513.6285790090495}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3828125,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3828125,"f1":null,"seconds":3.5408884286880493e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.2109375,"distances_sum":833.7978260768535}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5419921875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5419921875,"f1":0.6870957167832173,"seconds":2.9318034648895264e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.015625,"distances_sum":1253.9903679281342}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7255859375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7255859375,"f1":0.8324498418248427,"seconds":5.923211574554443e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.015625,"distances_sum":1713.7622679021479}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6328125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6328125,"f1":0.761511752136753,"seconds":5.319714546203613e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.625,"distances_sum":1431.4336876929344}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7255859375,"state":{"ssize":6,"bsize":5},"perf":{"precision":1.0,"recall":0.7255859375,"f1":0.8324498418248427,"seconds":5.923211574554443e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.015625,"distances_sum":1713.7622679021479}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.732421875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.732421875,"f1":0.8354952339327348,"seconds":3.6135315895080566e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.09375,"distances_sum":1701.5232331975305}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9069805194805202,"seconds":3.857538104057312e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.5390625,"distances_sum":2076.3453078737143}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9406910797535802,"seconds":4.112720489501953e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.7265625,"distances_sum":2288.125391794455}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9165324259074269,"seconds":3.919005393981934e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.6484375,"distances_sum":2111.2211101183366}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8560928654678663,"seconds":3.7960708141326904e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.0859375,"distances_sum":1868.178269606843}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8478740009990018,"seconds":3.7495046854019165e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.03125,"distances_sum":1737.7797213180972}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8994140625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.9406910797535802,"seconds":4.112720489501953e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.7265625,"distances_sum":2288.125391794455}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8994140625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.9406910797535802,"seconds":4.112720489501953e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.7265625,"distances_sum":2288.125391794455}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2216796875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2216796875,"f1":null,"seconds":3.1981617212295532e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":5.828125,"distances_sum":502.1847555944489}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4208984375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4208984375,"f1":null,"seconds":3.7997961044311523e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":6.4140625,"distances_sum":925.240783181039}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4208984375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4208984375,"f1":null,"seconds":3.7997961044311523e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":6.4140625,"distances_sum":925.240783181039}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.9002492299367307,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":8.40625,"distances_sum":2019.6165338463163}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.786714674214675,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":7.859375,"distances_sum":1514.9039342950668}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6416015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6416015625,"f1":0.768880425130426,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":7.71875,"distances_sum":1477.8390005027577}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8465524059274068,"seconds":5.947425961494446e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":8.1328125,"distances_sum":1741.4488693164835}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.828125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.828125,"f1":0.9002492299367307,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":8.40625,"distances_sum":2019.6165338463163}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9609432234432238,"seconds":6.876885890960693e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":8.8515625,"distances_sum":2370.448875372767}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.962614468864469,"seconds":7.504597306251526e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":8.9140625,"distances_sum":2373.174581191588}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9323603479853488,"seconds":6.843358278274536e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":8.7421875,"distances_sum":2193.630482612839}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9531650641025646,"seconds":7.197260856628418e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":8.84375,"distances_sum":2311.3497383751605}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9555173992673998,"seconds":7.361173629760742e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":8.8046875,"distances_sum":2340.10035256998}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.962614468864469,"seconds":7.504597306251526e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":8.9140625,"distances_sum":2373.174581191588}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.962614468864469,"seconds":7.504597306251526e-6,"exhaustive_search_seconds":9.443610906600952e-7,"evaluations":8.9140625,"distances_sum":2373.174581191588}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5595703125, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5595703125,"f1":0.6986364330114335,"seconds":4.077330231666565e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":6.7890625,"distances_sum":1199.297832337601}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.26953125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.26953125,"f1":null,"seconds":3.868713974952698e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":5.4921875,"distances_sum":626.1590292077228}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5595703125,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.5595703125,"f1":0.6986364330114335,"seconds":4.077330231666565e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":6.7890625,"distances_sum":1199.297832337601}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.8003902347652356,"seconds":6.401911377906799e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.59375,"distances_sum":1465.8059761990476}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8496368215118225,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.65625,"distances_sum":1683.3062392920601}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.75390625,"f1":0.8496368215118225,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.65625,"distances_sum":1683.3062392920601}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9464171245421252,"seconds":6.744638085365295e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.7109375,"distances_sum":2264.8824088357937}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9500629578754582,"seconds":6.835907697677612e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.671875,"distances_sum":2293.6407925433355}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9500629578754582,"seconds":6.835907697677612e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.671875,"distances_sum":2293.6407925433355}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91015625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9500629578754582,"seconds":6.835907697677612e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.671875,"distances_sum":2293.6407925433355}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.8435455169830177,"seconds":5.319714546203613e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.5546875,"distances_sum":1691.0705738060117}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7431640625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7431640625,"f1":0.8435455169830177,"seconds":5.319714546203613e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.5546875,"distances_sum":1691.0705738060117}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8521671037296046,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.4921875,"distances_sum":1744.130205879206}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.95292467948718,"seconds":6.550922989845276e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.703125,"distances_sum":2385.016754436351}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.95292467948718,"seconds":6.550922989845276e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.703125,"distances_sum":2385.016754436351}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9716796875, conf: {"ssize":10,"bsize":13}, perf: {"precision":1.0,"recall":0.9716796875,"f1":0.9846554487179489,"seconds":7.72811472415924e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.953125,"distances_sum":2571.8037157192043}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9716796875,"state":{"ssize":10,"bsize":13},"perf":{"precision":1.0,"recall":0.9716796875,"f1":0.9846554487179489,"seconds":7.72811472415924e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.953125,"distances_sum":2571.8037157192043}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9716796875,"state":{"ssize":10,"bsize":13},"perf":{"precision":1.0,"recall":0.9716796875,"f1":0.9846554487179489,"seconds":7.72811472415924e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.953125,"distances_sum":2571.8037157192043}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8670615842490852,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.0078125,"distances_sum":1807.0832491402775}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2412109375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2412109375,"f1":null,"seconds":3.470107913017273e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":5.3828125,"distances_sum":548.2694444208361}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2314453125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2314453125,"f1":null,"seconds":3.295019268989563e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":5.2109375,"distances_sum":494.27239516436305}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.779296875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.779296875,"f1":0.8670615842490852,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.0078125,"distances_sum":1807.0832491402775}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9587282509157515,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.7421875,"distances_sum":2363.9980568799842}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9217605311355316,"seconds":5.953013896942139e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.578125,"distances_sum":2134.0502213206178}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9587282509157515,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.7421875,"distances_sum":2363.9980568799842}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":13,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9604967948717953,"seconds":6.504356861114502e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.8046875,"distances_sum":2345.900754248403}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":13,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9690132783882789,"seconds":6.8675726652145386e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.875,"distances_sum":2388.0171680862823}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.960531135531136,"seconds":6.8284571170806885e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.8125,"distances_sum":2346.1978711578126}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":13,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690132783882789,"seconds":6.8675726652145386e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.875,"distances_sum":2388.0171680862823}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":13,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690132783882789,"seconds":6.8675726652145386e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.875,"distances_sum":2388.0171680862823}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.251953125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.251953125,"f1":null,"seconds":3.7979334592819214e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":5.4375,"distances_sum":563.4251977390426}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.251953125,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.251953125,"f1":null,"seconds":3.7979334592819214e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":5.4375,"distances_sum":563.4251977390426}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.251953125,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.251953125,"f1":null,"seconds":3.7979334592819214e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":5.4375,"distances_sum":563.4251977390426}}, n: 9
mean(cfft.distances) = 0.339927148306122
mean(cdnet.distances) = 0.346622798109373
mean(crand.distances) = 0.9712305105614472
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8422222222222221
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9444444444444445
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9177777777777778
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8711111111111111
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9355555555555556
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9355555555555556
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9155555555555556
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9355555555555556
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9244444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8422222222222223
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8822222222222221
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8911111111111111
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9088888888888889
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8555555555555555
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9377777777777778
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8822222222222221
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8844444444444445
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8822222222222221
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9177777777777778
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8733333333333334
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.888888888888889
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8288888888888888
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.888888888888889
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.86
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5476775347193082] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 34, 2]]
** centroid: 1, normalized-entropy: 0.3095434291503252, [(2, 34), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 10, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 12]]
** centroid: 11, normalized-entropy: 0.3912435636292556, [(2, 1), (3, 12)]
*** center 12: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
finished with 15 centroids; started with 12
acc = 0.94
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.5553220400122462] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5553220400122462, 0.32722840492415045] ***
*** starting iteration: 2; err: [Inf, 0.5553220400122462, 0.32722840492415045] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5553220400122462, 0.32722840492415045, 0.2849459606075978] ***
*** starting iteration: 3; err: [Inf, 0.5553220400122462, 0.32722840492415045, 0.2849459606075978] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5553220400122462, 0.32722840492415045, 0.2849459606075978, 0.2429479806454623] ***
*** starting iteration: 4; err: [Inf, 0.5553220400122462, 0.32722840492415045, 0.2849459606075978, 0.2429479806454623] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5553220400122462, 0.32722840492415045, 0.2849459606075978, 0.2429479806454623, 0.2302149563983038] ***
*** starting iteration: 5; err: [Inf, 0.5553220400122462, 0.32722840492415045, 0.2849459606075978, 0.2429479806454623, 0.2302149563983038] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5553220400122462, 0.32722840492415045, 0.2849459606075978, 0.2429479806454623, 0.2302149563983038, 0.22649286501738872] ***
*** starting iteration: 6; err: [Inf, 0.5553220400122462, 0.32722840492415045, 0.2849459606075978, 0.2429479806454623, 0.2302149563983038, 0.22649286501738872] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5553220400122462, 0.32722840492415045, 0.2849459606075978, 0.2429479806454623, 0.2302149563983038, 0.22649286501738872, 0.225427685209687] ***
*** starting iteration: 7; err: [Inf, 0.5553220400122462, 0.32722840492415045, 0.2849459606075978, 0.2429479806454623, 0.2302149563983038, 0.22649286501738872, 0.225427685209687] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5553220400122462, 0.32722840492415045, 0.2849459606075978, 0.2429479806454623, 0.2302149563983038, 0.22649286501738872, 0.225427685209687, 0.2249482526765876] ***
*** finished computation of 3 references, err: [Inf, 0.5553220400122462, 0.32722840492415045, 0.2849459606075978, 0.2429479806454623, 0.2302149563983038, 0.22649286501738872, 0.225427685209687, 0.2249482526765876] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [207, 29, 0]]
** centroid: 1, normalized-entropy: 0.5375869092726042, [(1, 207), (2, 29)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 170, 17]]
** centroid: 2, normalized-entropy: 0.43949698692151346, [(2, 170), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [193, 50, 0]]
** centroid: 3, normalized-entropy: 0.7333021427766627, [(1, 193), (2, 50)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31332813252763325] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31332813252763325, 0.2385542367143777] ***
*** starting iteration: 2; err: [Inf, 0.31332813252763325, 0.2385542367143777] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31332813252763325, 0.2385542367143777, 0.23329232839066005] ***
*** starting iteration: 3; err: [Inf, 0.31332813252763325, 0.2385542367143777, 0.23329232839066005] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31332813252763325, 0.2385542367143777, 0.23329232839066005, 0.23227964321184888] ***
*** starting iteration: 4; err: [Inf, 0.31332813252763325, 0.2385542367143777, 0.23329232839066005, 0.23227964321184888] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31332813252763325, 0.2385542367143777, 0.23329232839066005, 0.23227964321184888, 0.23217890430604857] ***
*** finished computation of 3 references, err: [Inf, 0.31332813252763325, 0.2385542367143777, 0.23329232839066005, 0.23227964321184888, 0.23217890430604857] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [24, 147, 19]]
** centroid: 1, normalized-entropy: 0.6281769343974221, [(1, 24), (2, 147), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [124, 99, 0]]
** centroid: 2, normalized-entropy: 0.9909149318671484, [(1, 124), (2, 99)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [252, 2, 0]]
** centroid: 3, normalized-entropy: 0.06634397526831168, [(1, 252), (2, 2)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26934592672197827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26934592672197827, 0.2408375426640977] ***
*** starting iteration: 2; err: [Inf, 0.26934592672197827, 0.2408375426640977] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26934592672197827, 0.2408375426640977, 0.23793158758671834] ***
*** starting iteration: 3; err: [Inf, 0.26934592672197827, 0.2408375426640977, 0.23793158758671834] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26934592672197827, 0.2408375426640977, 0.23793158758671834, 0.23692987781476] ***
*** starting iteration: 4; err: [Inf, 0.26934592672197827, 0.2408375426640977, 0.23793158758671834, 0.23692987781476] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26934592672197827, 0.2408375426640977, 0.23793158758671834, 0.23692987781476, 0.23669583483067141] ***
*** finished computation of 3 references, err: [Inf, 0.26934592672197827, 0.2408375426640977, 0.23793158758671834, 0.23692987781476, 0.23669583483067141] ***
*** center 1: selecting labels [1] (freq >= 2) [from [209, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [51, 150, 22]]
** centroid: 2, normalized-entropy: 0.7578985270029492, [(1, 51), (2, 150), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [140, 95, 0]]
** centroid: 3, normalized-entropy: 0.9733854352299557, [(1, 140), (2, 95)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2744546502383913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2744546502383913, 0.22586026163380202] ***
*** starting iteration: 2; err: [Inf, 0.2744546502383913, 0.22586026163380202] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2744546502383913, 0.22586026163380202, 0.20923703117855452] ***
*** starting iteration: 3; err: [Inf, 0.2744546502383913, 0.22586026163380202, 0.20923703117855452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2744546502383913, 0.22586026163380202, 0.20923703117855452, 0.1974737957223422] ***
*** starting iteration: 4; err: [Inf, 0.2744546502383913, 0.22586026163380202, 0.20923703117855452, 0.1974737957223422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2744546502383913, 0.22586026163380202, 0.20923703117855452, 0.1974737957223422, 0.1910665259436444] ***
*** starting iteration: 5; err: [Inf, 0.2744546502383913, 0.22586026163380202, 0.20923703117855452, 0.1974737957223422, 0.1910665259436444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2744546502383913, 0.22586026163380202, 0.20923703117855452, 0.1974737957223422, 0.1910665259436444, 0.1862616754771845] ***
*** starting iteration: 6; err: [Inf, 0.2744546502383913, 0.22586026163380202, 0.20923703117855452, 0.1974737957223422, 0.1910665259436444, 0.1862616754771845] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2744546502383913, 0.22586026163380202, 0.20923703117855452, 0.1974737957223422, 0.1910665259436444, 0.1862616754771845, 0.18429557978827227] ***
*** starting iteration: 7; err: [Inf, 0.2744546502383913, 0.22586026163380202, 0.20923703117855452, 0.1974737957223422, 0.1910665259436444, 0.1862616754771845, 0.18429557978827227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2744546502383913, 0.22586026163380202, 0.20923703117855452, 0.1974737957223422, 0.1910665259436444, 0.1862616754771845, 0.18429557978827227, 0.1833723752078385] ***
*** finished computation of 7 references, err: [Inf, 0.2744546502383913, 0.22586026163380202, 0.20923703117855452, 0.1974737957223422, 0.1910665259436444, 0.1862616754771845, 0.18429557978827227, 0.1833723752078385] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [71, 42, 0]]
** centroid: 1, normalized-entropy: 0.9519543850564236, [(1, 71), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [51, 35, 0]]
** centroid: 2, normalized-entropy: 0.9748857077995388, [(1, 51), (2, 35)]
*** center 3: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 78, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 89, 17]]
** centroid: 5, normalized-entropy: 0.6352115521361693, [(2, 89), (3, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [94, 5, 0]]
** centroid: 6, normalized-entropy: 0.2885385136944103, [(1, 94), (2, 5)]
*** center 7: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30656993211731537] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30656993211731537, 0.20759485185431173] ***
*** starting iteration: 2; err: [Inf, 0.30656993211731537, 0.20759485185431173] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30656993211731537, 0.20759485185431173, 0.20188284237314758] ***
*** starting iteration: 3; err: [Inf, 0.30656993211731537, 0.20759485185431173, 0.20188284237314758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30656993211731537, 0.20759485185431173, 0.20188284237314758, 0.1998105912819795] ***
*** starting iteration: 4; err: [Inf, 0.30656993211731537, 0.20759485185431173, 0.20188284237314758, 0.1998105912819795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30656993211731537, 0.20759485185431173, 0.20188284237314758, 0.1998105912819795, 0.19914858145960446] ***
*** finished computation of 7 references, err: [Inf, 0.30656993211731537, 0.20759485185431173, 0.20188284237314758, 0.1998105912819795, 0.19914858145960446] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [92, 11, 0]]
** centroid: 1, normalized-entropy: 0.4901757916273403, [(1, 92), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [67, 42, 0]]
** centroid: 2, normalized-entropy: 0.9617136136083148, [(1, 67), (2, 42)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [91, 3, 0]]
** centroid: 3, normalized-entropy: 0.2039058755048202, [(1, 91), (2, 3)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 124, 19]]
** centroid: 4, normalized-entropy: 0.5652492022091542, [(2, 124), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [61, 68, 0]]
** centroid: 5, normalized-entropy: 0.9978749236685321, [(1, 61), (2, 68)]
*** center 6: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31405108315923225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31405108315923225, 0.26151793121431455] ***
*** starting iteration: 2; err: [Inf, 0.31405108315923225, 0.26151793121431455] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31405108315923225, 0.26151793121431455, 0.22723512413647623] ***
*** starting iteration: 3; err: [Inf, 0.31405108315923225, 0.26151793121431455, 0.22723512413647623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31405108315923225, 0.26151793121431455, 0.22723512413647623, 0.21009618256972737] ***
*** starting iteration: 4; err: [Inf, 0.31405108315923225, 0.26151793121431455, 0.22723512413647623, 0.21009618256972737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31405108315923225, 0.26151793121431455, 0.22723512413647623, 0.21009618256972737, 0.20216994917277117] ***
*** starting iteration: 5; err: [Inf, 0.31405108315923225, 0.26151793121431455, 0.22723512413647623, 0.21009618256972737, 0.20216994917277117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31405108315923225, 0.26151793121431455, 0.22723512413647623, 0.21009618256972737, 0.20216994917277117, 0.19709973997398764] ***
*** starting iteration: 6; err: [Inf, 0.31405108315923225, 0.26151793121431455, 0.22723512413647623, 0.21009618256972737, 0.20216994917277117, 0.19709973997398764] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31405108315923225, 0.26151793121431455, 0.22723512413647623, 0.21009618256972737, 0.20216994917277117, 0.19709973997398764, 0.19582007716743574] ***
*** starting iteration: 7; err: [Inf, 0.31405108315923225, 0.26151793121431455, 0.22723512413647623, 0.21009618256972737, 0.20216994917277117, 0.19709973997398764, 0.19582007716743574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31405108315923225, 0.26151793121431455, 0.22723512413647623, 0.21009618256972737, 0.20216994917277117, 0.19709973997398764, 0.19582007716743574, 0.19565819686130695] ***
*** finished computation of 7 references, err: [Inf, 0.31405108315923225, 0.26151793121431455, 0.22723512413647623, 0.21009618256972737, 0.20216994917277117, 0.19709973997398764, 0.19582007716743574, 0.19565819686130695] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 23, 0]]
** centroid: 1, normalized-entropy: 0.8069896049203007, [(1, 70), (2, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 102, 22]]
** centroid: 3, normalized-entropy: 0.674398887071447, [(2, 102), (3, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 14, 0]]
** centroid: 5, normalized-entropy: 0.6454495903301855, [(1, 71), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [45, 69, 0]]
** centroid: 6, normalized-entropy: 0.9677884628267678, [(1, 45), (2, 69)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [67, 37, 0]]
** centroid: 7, normalized-entropy: 0.9391151961320356, [(1, 67), (2, 37)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20477583553563725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20477583553563725, 0.16807097027514567] ***
*** finished computation of 7 references, err: [Inf, 0.20477583553563725, 0.16807097027514567] ***
*** center 1: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [77, 55, 0]]
** centroid: 2, normalized-entropy: 0.9798687566511527, [(1, 77), (2, 55)]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 151, 17]]
** centroid: 5, normalized-entropy: 0.47275799456838713, [(2, 151), (3, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [146, 43, 0]]
** centroid: 6, normalized-entropy: 0.7736510483021695, [(1, 146), (2, 43)]
*** center 7: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1826176950034324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1826176950034324, 0.15481686096979136] ***
*** finished computation of 7 references, err: [Inf, 0.1826176950034324, 0.15481686096979136] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [6, 74, 0]]
** centroid: 1, normalized-entropy: 0.3843115441264972, [(1, 6), (2, 74)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [12, 112, 0]]
** centroid: 2, normalized-entropy: 0.45868581620054033, [(1, 12), (2, 112)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [91, 19, 0]]
** centroid: 3, normalized-entropy: 0.6639057588563916, [(1, 91), (2, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [123, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [112, 1, 0]]
** centroid: 5, normalized-entropy: 0.07306611931384553, [(1, 112), (2, 1)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 42, 19]]
** centroid: 6, normalized-entropy: 0.8948692308065576, [(2, 42), (3, 19)]
*** center 7: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22045613753970997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22045613753970997, 0.1585838546378837] ***
*** finished computation of 7 references, err: [Inf, 0.22045613753970997, 0.1585838546378837] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 68, 22]]
** centroid: 1, normalized-entropy: 0.80235344282919, [(2, 68), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [145, 21, 0]]
** centroid: 2, normalized-entropy: 0.5477774799582533, [(1, 145), (2, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 55, 0]]
** centroid: 5, normalized-entropy: 0.9891571023188154, [(1, 43), (2, 55)]
*** center 6: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 101, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.34634960762032113] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34634960762032113, 0.28550670698128483] ***
*** starting iteration: 2; err: [Inf, 0.34634960762032113, 0.28550670698128483] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34634960762032113, 0.28550670698128483, 0.2824547427815494] ***
*** starting iteration: 3; err: [Inf, 0.34634960762032113, 0.28550670698128483, 0.2824547427815494] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34634960762032113, 0.28550670698128483, 0.2824547427815494, 0.28195262453644665] ***
*** finished computation of 3 references, err: [Inf, 0.34634960762032113, 0.28550670698128483, 0.2824547427815494, 0.28195262453644665] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [177, 52, 0]]
** centroid: 1, normalized-entropy: 0.7728760688479162, [(1, 177), (2, 52)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 181, 17]]
** centroid: 2, normalized-entropy: 0.4224931157194282, [(2, 181), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [223, 16, 0]]
** centroid: 3, normalized-entropy: 0.35442045784590354, [(1, 223), (2, 16)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30899532793880047] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30899532793880047, 0.29164895911546035] ***
*** starting iteration: 2; err: [Inf, 0.30899532793880047, 0.29164895911546035] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30899532793880047, 0.29164895911546035, 0.2879235842104616] ***
*** starting iteration: 3; err: [Inf, 0.30899532793880047, 0.29164895911546035, 0.2879235842104616] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30899532793880047, 0.29164895911546035, 0.2879235842104616, 0.28716768850425795] ***
*** finished computation of 3 references, err: [Inf, 0.30899532793880047, 0.29164895911546035, 0.2879235842104616, 0.28716768850425795] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [170, 48, 0]]
** centroid: 1, normalized-entropy: 0.7605024019419504, [(1, 170), (2, 48)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 193, 19]]
** centroid: 2, normalized-entropy: 0.4352089878265592, [(2, 193), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [229, 7, 0]]
** centroid: 3, normalized-entropy: 0.19268901576606412, [(1, 229), (2, 7)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33685523314985155] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33685523314985155, 0.328370482279644] ***
*** starting iteration: 2; err: [Inf, 0.33685523314985155, 0.328370482279644] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33685523314985155, 0.328370482279644, 0.3237495287649635] ***
*** starting iteration: 3; err: [Inf, 0.33685523314985155, 0.328370482279644, 0.3237495287649635] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33685523314985155, 0.328370482279644, 0.3237495287649635, 0.3201285657183877] ***
*** starting iteration: 4; err: [Inf, 0.33685523314985155, 0.328370482279644, 0.3237495287649635, 0.3201285657183877] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33685523314985155, 0.328370482279644, 0.3237495287649635, 0.3201285657183877, 0.31468359096537063] ***
*** starting iteration: 5; err: [Inf, 0.33685523314985155, 0.328370482279644, 0.3237495287649635, 0.3201285657183877, 0.31468359096537063] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33685523314985155, 0.328370482279644, 0.3237495287649635, 0.3201285657183877, 0.31468359096537063, 0.30300906158123597] ***
*** starting iteration: 6; err: [Inf, 0.33685523314985155, 0.328370482279644, 0.3237495287649635, 0.3201285657183877, 0.31468359096537063, 0.30300906158123597] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33685523314985155, 0.328370482279644, 0.3237495287649635, 0.3201285657183877, 0.31468359096537063, 0.30300906158123597, 0.30063294808797797] ***
*** starting iteration: 7; err: [Inf, 0.33685523314985155, 0.328370482279644, 0.3237495287649635, 0.3201285657183877, 0.31468359096537063, 0.30300906158123597, 0.30063294808797797] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33685523314985155, 0.328370482279644, 0.3237495287649635, 0.3201285657183877, 0.31468359096537063, 0.30300906158123597, 0.30063294808797797, 0.29961551916457413] ***
*** starting iteration: 8; err: [Inf, 0.33685523314985155, 0.328370482279644, 0.3237495287649635, 0.3201285657183877, 0.31468359096537063, 0.30300906158123597, 0.30063294808797797, 0.29961551916457413] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33685523314985155, 0.328370482279644, 0.3237495287649635, 0.3201285657183877, 0.31468359096537063, 0.30300906158123597, 0.30063294808797797, 0.29961551916457413, 0.298785920141787] ***
*** finished computation of 3 references, err: [Inf, 0.33685523314985155, 0.328370482279644, 0.3237495287649635, 0.3201285657183877, 0.31468359096537063, 0.30300906158123597, 0.30063294808797797, 0.29961551916457413, 0.298785920141787] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [166, 58, 0]]
** centroid: 1, normalized-entropy: 0.8251252643746189, [(1, 166), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [234, 14, 0]]
** centroid: 2, normalized-entropy: 0.3131950471154111, [(1, 234), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 173, 22]]
** centroid: 3, normalized-entropy: 0.5083652932820523, [(2, 173), (3, 22)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33585186159607394] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33585186159607394, 0.2286580366980251] ***
*** finished computation of 3 references, err: [Inf, 0.33585186159607394, 0.2286580366980251] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 175, 17]]
** centroid: 1, normalized-entropy: 0.4315832670132745, [(2, 175), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [225, 34, 0]]
** centroid: 2, normalized-entropy: 0.5609221694381181, [(1, 225), (2, 34)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [175, 40, 0]]
** centroid: 3, normalized-entropy: 0.6931274153282881, [(1, 175), (2, 40)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28969149781192755] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28969149781192755, 0.23977121659393968] ***
*** finished computation of 3 references, err: [Inf, 0.28969149781192755, 0.23977121659393968] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [161, 32, 0]]
** centroid: 1, normalized-entropy: 0.6480134239185812, [(1, 161), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [220, 11, 0]]
** centroid: 2, normalized-entropy: 0.2761954276479391, [(1, 220), (2, 11)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [19, 205, 19]]
** centroid: 3, normalized-entropy: 0.4933579159151103, [(1, 19), (2, 205), (3, 19)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35426582101134885] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35426582101134885, 0.2680389926150285] ***
*** finished computation of 3 references, err: [Inf, 0.35426582101134885, 0.2680389926150285] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [301, 14, 0]]
** centroid: 1, normalized-entropy: 0.2623112196143368, [(1, 301), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [78, 113, 0]]
** centroid: 2, normalized-entropy: 0.9756403682233321, [(1, 78), (2, 113)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [21, 118, 22]]
** centroid: 3, normalized-entropy: 0.6966858640727173, [(1, 21), (2, 118), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.259661517374486] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.259661517374486, 0.18820074246497126] ***
*** starting iteration: 2; err: [Inf, 0.259661517374486, 0.18820074246497126] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.259661517374486, 0.18820074246497126, 0.18341460070983917] ***
*** starting iteration: 3; err: [Inf, 0.259661517374486, 0.18820074246497126, 0.18341460070983917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.259661517374486, 0.18820074246497126, 0.18341460070983917, 0.18336744862189097] ***
*** finished computation of 7 references, err: [Inf, 0.259661517374486, 0.18820074246497126, 0.18341460070983917, 0.18336744862189097] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [94, 6, 0]]
** centroid: 1, normalized-entropy: 0.3274449191544762, [(1, 94), (2, 6)]
*** center 2: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [82, 40, 0]]
** centroid: 3, normalized-entropy: 0.9127341558073343, [(1, 82), (2, 40)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [32, 42, 0]]
** centroid: 4, normalized-entropy: 0.9867867202680318, [(1, 32), (2, 42)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 54, 0]]
** centroid: 5, normalized-entropy: 0.8796975782775168, [(1, 23), (2, 54)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 107, 17]]
** centroid: 6, normalized-entropy: 0.5765847309822099, [(2, 107), (3, 17)]
*** center 7: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24982697089137076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24982697089137076, 0.20543583252675263] ***
*** starting iteration: 2; err: [Inf, 0.24982697089137076, 0.20543583252675263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24982697089137076, 0.20543583252675263, 0.20072416558504283] ***
*** starting iteration: 3; err: [Inf, 0.24982697089137076, 0.20543583252675263, 0.20072416558504283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24982697089137076, 0.20543583252675263, 0.20072416558504283, 0.19801253427205415] ***
*** finished computation of 7 references, err: [Inf, 0.24982697089137076, 0.20543583252675263, 0.20072416558504283, 0.19801253427205415] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [83, 26, 0]]
** centroid: 1, normalized-entropy: 0.7925906965800167, [(1, 83), (2, 26)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 136, 19]]
** centroid: 2, normalized-entropy: 0.536733636464726, [(2, 136), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [24, 74, 0]]
** centroid: 3, normalized-entropy: 0.8030909760146977, [(1, 24), (2, 74)]
*** center 4: selecting labels [1] (freq >= 2) [from [100, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [81, 11, 0]]
** centroid: 5, normalized-entropy: 0.5281098034628294, [(1, 81), (2, 11)]
*** center 6: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2759646104608217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2759646104608217, 0.2014262478120033] ***
*** starting iteration: 2; err: [Inf, 0.2759646104608217, 0.2014262478120033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2759646104608217, 0.2014262478120033, 0.19756540774215556] ***
*** starting iteration: 3; err: [Inf, 0.2759646104608217, 0.2014262478120033, 0.19756540774215556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2759646104608217, 0.2014262478120033, 0.19756540774215556, 0.19657608404241758] ***
*** finished computation of 7 references, err: [Inf, 0.2759646104608217, 0.2014262478120033, 0.19756540774215556, 0.19657608404241758] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [91, 39, 0]]
** centroid: 1, normalized-entropy: 0.8812908992306927, [(1, 91), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [18, 58, 0]]
** centroid: 2, normalized-entropy: 0.7897492536625221, [(1, 18), (2, 58)]
*** center 3: selecting labels [1] (freq >= 2) [from [150, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 16, 0]]
** centroid: 4, normalized-entropy: 0.7478061583312324, [(1, 59), (2, 16)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 54, 22]]
** centroid: 5, normalized-entropy: 0.8680403986166402, [(2, 54), (3, 22)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 78, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22236360783909667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22236360783909667, 0.15857690350605627] ***
*** starting iteration: 2; err: [Inf, 0.22236360783909667, 0.15857690350605627] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22236360783909667, 0.15857690350605627, 0.14779203234054428] ***
*** starting iteration: 3; err: [Inf, 0.22236360783909667, 0.15857690350605627, 0.14779203234054428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22236360783909667, 0.15857690350605627, 0.14779203234054428, 0.14450595714571374] ***
*** finished computation of 7 references, err: [Inf, 0.22236360783909667, 0.15857690350605627, 0.14779203234054428, 0.14450595714571374] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 94, 17]]
** centroid: 1, normalized-entropy: 0.6176751423955683, [(2, 94), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 102, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [78, 14, 0]]
** centroid: 5, normalized-entropy: 0.6152538910563409, [(1, 78), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [95, 5, 0]]
** centroid: 6, normalized-entropy: 0.2863969571159561, [(1, 95), (2, 5)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [88, 34, 0]]
** centroid: 7, normalized-entropy: 0.8536576732793314, [(1, 88), (2, 34)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2350573558189293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2350573558189293, 0.1653166070910006] ***
*** starting iteration: 2; err: [Inf, 0.2350573558189293, 0.1653166070910006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2350573558189293, 0.1653166070910006, 0.15444340764138584] ***
*** starting iteration: 3; err: [Inf, 0.2350573558189293, 0.1653166070910006, 0.15444340764138584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2350573558189293, 0.1653166070910006, 0.15444340764138584, 0.15168515975884478] ***
*** finished computation of 7 references, err: [Inf, 0.2350573558189293, 0.1653166070910006, 0.15444340764138584, 0.15168515975884478] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 14, 0]]
** centroid: 1, normalized-entropy: 0.6892019851173655, [(1, 62), (2, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [127, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [137, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 12, 0]]
** centroid: 4, normalized-entropy: 0.5916727785823274, [(1, 72), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [2, 114, 0]]
** centroid: 5, normalized-entropy: 0.12565805017256745, [(1, 2), (2, 114)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 43, 19]]
** centroid: 7, normalized-entropy: 0.8890349038123858, [(2, 43), (3, 19)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19172542729321448] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19172542729321448, 0.15583629852280892] ***
*** starting iteration: 2; err: [Inf, 0.19172542729321448, 0.15583629852280892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19172542729321448, 0.15583629852280892, 0.15192634697216026] ***
*** starting iteration: 3; err: [Inf, 0.19172542729321448, 0.15583629852280892, 0.15192634697216026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19172542729321448, 0.15583629852280892, 0.15192634697216026, 0.150704440183245] ***
*** finished computation of 7 references, err: [Inf, 0.19172542729321448, 0.15583629852280892, 0.15192634697216026, 0.150704440183245] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [121, 3, 0]]
** centroid: 1, normalized-entropy: 0.1643790586740573, [(1, 121), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [35, 42, 0]]
** centroid: 2, normalized-entropy: 0.9940302114769566, [(1, 35), (2, 42)]
*** center 3: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 97, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [130, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 55, 22]]
** centroid: 6, normalized-entropy: 0.8631205685666311, [(2, 55), (3, 22)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [46, 48, 0]]
** centroid: 7, normalized-entropy: 0.9996734260048917, [(1, 46), (2, 48)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3933451582423157] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3933451582423157, 0.3117313637096133] ***
*** finished computation of 3 references, err: [Inf, 0.3933451582423157, 0.3117313637096133] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [134, 191, 17]]
** centroid: 1, normalized-entropy: 0.7661070696547879, [(1, 134), (2, 191), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [171, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [95, 58, 0]]
** centroid: 3, normalized-entropy: 0.9573931988440293, [(1, 95), (2, 58)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4011457788840361] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4011457788840361, 0.3146468871936336] ***
*** finished computation of 3 references, err: [Inf, 0.4011457788840361, 0.3146468871936336] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [85, 98, 4]]
** centroid: 1, normalized-entropy: 0.7093049599668368, [(1, 85), (2, 98), (3, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [85, 111, 15]]
** centroid: 2, normalized-entropy: 0.8120460009775904, [(1, 85), (2, 111), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [230, 39, 0]]
** centroid: 3, normalized-entropy: 0.597137461988468, [(1, 230), (2, 39)]
finished with 8 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39573479178354615] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39573479178354615, 0.30240147422742225] ***
*** finished computation of 3 references, err: [Inf, 0.39573479178354615, 0.30240147422742225] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [100, 153, 22]]
** centroid: 1, normalized-entropy: 0.8156905177872921, [(1, 100), (2, 153), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [182, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [118, 92, 0]]
** centroid: 3, normalized-entropy: 0.9889141853711586, [(1, 118), (2, 92)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39453535263815354] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39453535263815354, 0.2933354419726017] ***
*** finished computation of 3 references, err: [Inf, 0.39453535263815354, 0.2933354419726017] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [90, 195, 17]]
** centroid: 1, normalized-entropy: 0.7329130156566216, [(1, 90), (2, 195), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [174, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [136, 54, 0]]
** centroid: 3, normalized-entropy: 0.8611247055579295, [(1, 136), (2, 54)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4300032417685062] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4300032417685062, 0.28863754289607324] ***
*** finished computation of 3 references, err: [Inf, 0.4300032417685062, 0.28863754289607324] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [77, 163, 19]]
** centroid: 1, normalized-entropy: 0.7679742026191915, [(1, 77), (2, 163), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [199, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [124, 85, 0]]
** centroid: 3, normalized-entropy: 0.9747343853838629, [(1, 124), (2, 85)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39387017444845684] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39387017444845684, 0.2919991909173028] ***
*** finished computation of 3 references, err: [Inf, 0.39387017444845684, 0.2919991909173028] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [260, 29, 0]]
** centroid: 1, normalized-entropy: 0.4700914947979185, [(1, 260), (2, 29)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 158, 22]]
** centroid: 2, normalized-entropy: 0.5357150195407704, [(2, 158), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [140, 58, 0]]
** centroid: 3, normalized-entropy: 0.8724752054851931, [(1, 140), (2, 58)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3750512024482807] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3750512024482807, 0.29859230522340435] ***
*** starting iteration: 2; err: [Inf, 0.3750512024482807, 0.29859230522340435] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3750512024482807, 0.29859230522340435, 0.28748355703791967] ***
*** starting iteration: 3; err: [Inf, 0.3750512024482807, 0.29859230522340435, 0.28748355703791967] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3750512024482807, 0.29859230522340435, 0.28748355703791967, 0.28632094763085114] ***
*** finished computation of 3 references, err: [Inf, 0.3750512024482807, 0.29859230522340435, 0.28748355703791967, 0.28632094763085114] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [77, 151, 17]]
** centroid: 1, normalized-entropy: 0.7711448715381151, [(1, 77), (2, 151), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [134, 98, 0]]
** centroid: 2, normalized-entropy: 0.9825606664869173, [(1, 134), (2, 98)]
*** center 3: selecting labels [1] (freq >= 1) [from [189, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3898742369849464] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3898742369849464, 0.311190375360078] ***
*** starting iteration: 2; err: [Inf, 0.3898742369849464, 0.311190375360078] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3898742369849464, 0.311190375360078, 0.2938095849772533] ***
*** starting iteration: 3; err: [Inf, 0.3898742369849464, 0.311190375360078, 0.2938095849772533] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3898742369849464, 0.311190375360078, 0.2938095849772533, 0.29166882075201805] ***
*** finished computation of 3 references, err: [Inf, 0.3898742369849464, 0.311190375360078, 0.2938095849772533, 0.29166882075201805] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [245, 27, 0]]
** centroid: 1, normalized-entropy: 0.46666042355165027, [(1, 245), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [155, 45, 0]]
** centroid: 2, normalized-entropy: 0.7691928290130138, [(1, 155), (2, 45)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 176, 19]]
** centroid: 3, normalized-entropy: 0.4608144797209315, [(2, 176), (3, 19)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3964031441814393] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3964031441814393, 0.31387992250290453] ***
*** starting iteration: 2; err: [Inf, 0.3964031441814393, 0.31387992250290453] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3964031441814393, 0.31387992250290453, 0.29362069011276315] ***
*** starting iteration: 3; err: [Inf, 0.3964031441814393, 0.31387992250290453, 0.29362069011276315] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3964031441814393, 0.31387992250290453, 0.29362069011276315, 0.2888472307713582] ***
*** finished computation of 3 references, err: [Inf, 0.3964031441814393, 0.31387992250290453, 0.29362069011276315, 0.2888472307713582] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [253, 20, 0]]
** centroid: 1, normalized-entropy: 0.37797349148612464, [(1, 253), (2, 20)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 165, 22]]
** centroid: 2, normalized-entropy: 0.5225593745369407, [(2, 165), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [147, 60, 0]]
** centroid: 3, normalized-entropy: 0.868533960265235, [(1, 147), (2, 60)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18087606945119844] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18087606945119844, 0.14702404204926625] ***
*** finished computation of 7 references, err: [Inf, 0.18087606945119844, 0.14702404204926625] ***
*** center 1: selecting labels [1] (freq >= 2) [from [149, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 33, 17]]
** centroid: 2, normalized-entropy: 0.9248187049730301, [(2, 33), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [72, 10, 0]]
** centroid: 3, normalized-entropy: 0.5349436990971067, [(1, 72), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 8, 0]]
** centroid: 4, normalized-entropy: 0.46899559358928133, [(1, 72), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 100, 0]]
** centroid: 5, normalized-entropy: 0.4661332827241355, [(1, 11), (2, 100)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 98, 0]]
** centroid: 6, normalized-entropy: 0.23868451135100152, [(1, 4), (2, 98)]
*** center 7: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1990447351174929] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1990447351174929, 0.1548958423416894] ***
*** finished computation of 7 references, err: [Inf, 0.1990447351174929, 0.1548958423416894] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [133, 18, 0]]
** centroid: 1, normalized-entropy: 0.5270721966256099, [(1, 133), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 15, 0]]
** centroid: 2, normalized-entropy: 0.7012065844539666, [(1, 64), (2, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 46, 19]]
** centroid: 4, normalized-entropy: 0.871683617119982, [(2, 46), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 88, 0]]
** centroid: 5, normalized-entropy: 0.8078738537818512, [(1, 29), (2, 88)]
*** center 6: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 81, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20551929715043424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20551929715043424, 0.15556063885329993] ***
*** finished computation of 7 references, err: [Inf, 0.20551929715043424, 0.15556063885329993] ***
*** center 1: selecting labels [1] (freq >= 2) [from [92, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [87, 13, 0]]
** centroid: 2, normalized-entropy: 0.557438185027989, [(1, 87), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 66, 22]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 66), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 86, 0]]
** centroid: 5, normalized-entropy: 0.8599530497177523, [(1, 34), (2, 86)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 79, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9380008751266237, 0.9369758980537424, 0.9359988731246216, 0.9299958641276008, 0.9260458062853273, 0.9169858481235726, 0.9010237782692873, 0.8990037942133751, 0.8860147572722422, 0.8719917522312732, 0.8400376424328521, 0.7980974986963011, 0.7679925434416451]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9380008751266237
finished with 13
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9380008751266237, 0.9369758980537424, 0.9359988731246216, 0.9299958641276008, 0.9260458062853273, 0.9169858481235726, 0.9010237782692873, 0.8990037942133751, 0.8860147572722422, 0.8719917522312732, 0.8400376424328521, 0.7980974986963011, 0.7679925434416451]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9380008751266237
finished with 14
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.37958929464276936] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37958929464276936, 0.2918402092173338] ***
*** starting iteration: 2; err: [Inf, 0.37958929464276936, 0.2918402092173338] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37958929464276936, 0.2918402092173338, 0.28768391105662416] ***
*** starting iteration: 3; err: [Inf, 0.37958929464276936, 0.2918402092173338, 0.28768391105662416] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37958929464276936, 0.2918402092173338, 0.28768391105662416, 0.28720666778863996] ***
*** finished computation of 3 references, err: [Inf, 0.37958929464276936, 0.2918402092173338, 0.28768391105662416, 0.28720666778863996] ***
*** center 1: selecting labels [1] (freq >= 2) [from [200, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [128, 110, 0]]
** centroid: 2, normalized-entropy: 0.9958699965528488, [(1, 128), (2, 110)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [72, 139, 17]]
** centroid: 3, normalized-entropy: 0.782144371358856, [(1, 72), (2, 139), (3, 17)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3272618943981748] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3272618943981748, 0.2875983690398967] ***
*** starting iteration: 2; err: [Inf, 0.3272618943981748, 0.2875983690398967] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3272618943981748, 0.2875983690398967, 0.28676279461656373] ***
*** finished computation of 3 references, err: [Inf, 0.3272618943981748, 0.2875983690398967, 0.28676279461656373] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [168, 54, 0]]
** centroid: 1, normalized-entropy: 0.8003922080453356, [(1, 168), (2, 54)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 186, 19]]
** centroid: 2, normalized-entropy: 0.4453622379370461, [(2, 186), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [231, 8, 0]]
** centroid: 3, normalized-entropy: 0.2115194081183665, [(1, 231), (2, 8)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36102459280342536] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36102459280342536, 0.2951318874851852] ***
*** starting iteration: 2; err: [Inf, 0.36102459280342536, 0.2951318874851852] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36102459280342536, 0.2951318874851852, 0.28937573807182787] ***
*** starting iteration: 3; err: [Inf, 0.36102459280342536, 0.2951318874851852, 0.28937573807182787] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36102459280342536, 0.2951318874851852, 0.28937573807182787, 0.2883949544171857] ***
*** finished computation of 3 references, err: [Inf, 0.36102459280342536, 0.2951318874851852, 0.28937573807182787, 0.2883949544171857] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [163, 54, 0]]
** centroid: 1, normalized-entropy: 0.8094470192809174, [(1, 163), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [236, 10, 0]]
** centroid: 2, normalized-entropy: 0.2452663728259548, [(1, 236), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 181, 22]]
** centroid: 3, normalized-entropy: 0.4949930542685224, [(2, 181), (3, 22)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9380008751266237, 0.9369758980537424, 0.9359988731246216, 0.9299958641276008, 0.9260458062853273, 0.9169858481235726, 0.9010237782692873, 0.8990037942133751, 0.8860147572722422, 0.8719917522312732, 0.8540486594378809, 0.8400376424328521, 0.7980974986963011, 0.7679925434416451]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9380008751266237
finished with 16
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.35366640708412045] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35366640708412045, 0.32799311984867396] ***
*** starting iteration: 2; err: [Inf, 0.35366640708412045, 0.32799311984867396] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35366640708412045, 0.32799311984867396, 0.3249575026160632] ***
*** starting iteration: 3; err: [Inf, 0.35366640708412045, 0.32799311984867396, 0.3249575026160632] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35366640708412045, 0.32799311984867396, 0.3249575026160632, 0.32319884834805496] ***
*** finished computation of 3 references, err: [Inf, 0.35366640708412045, 0.32799311984867396, 0.3249575026160632, 0.32319884834805496] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [208, 6, 0]]
** centroid: 1, normalized-entropy: 0.18445186314098744, [(1, 208), (2, 6)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [111, 113, 17]]
** centroid: 2, normalized-entropy: 0.8185307672865082, [(1, 111), (2, 113), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [81, 130, 0]]
** centroid: 3, normalized-entropy: 0.9607405824164096, [(1, 81), (2, 130)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6057312456273782] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6057312456273782, 0.34289269138970924] ***
*** starting iteration: 2; err: [Inf, 0.6057312456273782, 0.34289269138970924] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6057312456273782, 0.34289269138970924, 0.3018908064946465] ***
*** starting iteration: 3; err: [Inf, 0.6057312456273782, 0.34289269138970924, 0.3018908064946465] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6057312456273782, 0.34289269138970924, 0.3018908064946465, 0.29095373219758763] ***
*** finished computation of 3 references, err: [Inf, 0.6057312456273782, 0.34289269138970924, 0.3018908064946465, 0.29095373219758763] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [83, 176, 19]]
** centroid: 1, normalized-entropy: 0.7588558852103003, [(1, 83), (2, 176), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [126, 72, 0]]
** centroid: 2, normalized-entropy: 0.9456603046006401, [(1, 126), (2, 72)]
*** center 3: selecting labels [1] (freq >= 2) [from [191, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3354845713151024] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3354845713151024, 0.301192499836837] ***
*** starting iteration: 2; err: [Inf, 0.3354845713151024, 0.301192499836837] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3354845713151024, 0.301192499836837, 0.2989095257724512] ***
*** starting iteration: 3; err: [Inf, 0.3354845713151024, 0.301192499836837, 0.2989095257724512] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3354845713151024, 0.301192499836837, 0.2989095257724512, 0.297719888518267] ***
*** finished computation of 3 references, err: [Inf, 0.3354845713151024, 0.301192499836837, 0.2989095257724512, 0.297719888518267] ***
*** center 1: selecting labels [1] (freq >= 2) [from [197, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [116, 122, 0]]
** centroid: 2, normalized-entropy: 0.9995415002093281, [(1, 116), (2, 122)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [87, 123, 22]]
** centroid: 3, normalized-entropy: 0.844354597812857, [(1, 87), (2, 123), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2784729322709434] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2784729322709434, 0.23185636092245848] ***
*** starting iteration: 2; err: [Inf, 0.2784729322709434, 0.23185636092245848] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2784729322709434, 0.23185636092245848, 0.22775155546943526] ***
*** starting iteration: 3; err: [Inf, 0.2784729322709434, 0.23185636092245848, 0.22775155546943526] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2784729322709434, 0.23185636092245848, 0.22775155546943526, 0.22648031036607227] ***
*** finished computation of 3 references, err: [Inf, 0.2784729322709434, 0.23185636092245848, 0.22775155546943526, 0.22648031036607227] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 167, 17]]
** centroid: 1, normalized-entropy: 0.44440171070689066, [(2, 167), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [190, 31, 0]]
** centroid: 2, normalized-entropy: 0.5849493865187022, [(1, 190), (2, 31)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [210, 51, 0]]
** centroid: 3, normalized-entropy: 0.7126368350739763, [(1, 210), (2, 51)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3115012640548197] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3115012640548197, 0.24742625600126372] ***
*** starting iteration: 2; err: [Inf, 0.3115012640548197, 0.24742625600126372] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3115012640548197, 0.24742625600126372, 0.23272854948313026] ***
*** starting iteration: 3; err: [Inf, 0.3115012640548197, 0.24742625600126372, 0.23272854948313026] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3115012640548197, 0.24742625600126372, 0.23272854948313026, 0.22919868149500022] ***
*** finished computation of 3 references, err: [Inf, 0.3115012640548197, 0.24742625600126372, 0.23272854948313026, 0.22919868149500022] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [72, 146, 18]]
** centroid: 1, normalized-entropy: 0.7787601342505281, [(1, 72), (2, 146), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [128, 102, 1]]
** centroid: 2, normalized-entropy: 0.9907622905917989, [(1, 128), (2, 102)]
*** center 3: selecting labels [1] (freq >= 2) [from [200, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.25904976251092493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25904976251092493, 0.23740769771026862] ***
*** starting iteration: 2; err: [Inf, 0.25904976251092493, 0.23740769771026862] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25904976251092493, 0.23740769771026862, 0.2335763971336644] ***
*** starting iteration: 3; err: [Inf, 0.25904976251092493, 0.23740769771026862, 0.2335763971336644] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.25904976251092493, 0.23740769771026862, 0.2335763971336644, 0.23256896492205503] ***
*** finished computation of 3 references, err: [Inf, 0.25904976251092493, 0.23740769771026862, 0.2335763971336644, 0.23256896492205503] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [90, 125, 2]]
** centroid: 1, normalized-entropy: 0.6607805904626295, [(1, 90), (2, 125), (3, 2)]
*** center 2: selecting labels [1] (freq >= 2) [from [212, 1, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [98, 119, 20]]
** centroid: 3, normalized-entropy: 0.8371631451997883, [(1, 98), (2, 119), (3, 20)]
finished with 7 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 16)
[0.9380008751266237, 0.9369758980537424, 0.9359988731246216, 0.9299958641276008, 0.9260458062853273, 0.9249818680956405, 0.9169858481235726, 0.9010237782692873, 0.8990577403751057, 0.8990037942133751, 0.8860147572722422, 0.8719917522312732, 0.8540486594378809, 0.8400376424328521, 0.7980974986963011, 0.7679925434416451]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9380008751266237
finished with 16
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9380008751266237, 0.9369758980537424, 0.9359988731246216, 0.9299958641276008, 0.9260458062853273, 0.9249818680956405, 0.9169858481235726, 0.9010237782692873, 0.8990577403751057, 0.8990037942133751, 0.8860147572722422, 0.8719917522312732, 0.8540486594378809, 0.8400376424328521, 0.7980974986963011, 0.7679925434416451]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9380008751266237
finished with 16
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9380008751266237, 0.9369758980537424, 0.9359988731246216, 0.9299958641276008, 0.9260458062853273, 0.9249818680956405, 0.9169858481235726, 0.9010237782692873, 0.8990577403751057, 0.8990037942133751, 0.8860147572722422, 0.8719917522312732, 0.8540486594378809, 0.8400376424328521, 0.7980974986963011, 0.7679925434416451]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9380008751266237
finished with 16
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9380008751266237, 0.9369758980537424, 0.9359988731246216, 0.9299958641276008, 0.9260458062853273, 0.9249818680956405, 0.9169858481235726, 0.9010237782692873, 0.8990577403751057, 0.8990037942133751, 0.8860147572722422, 0.8719917522312732, 0.8540486594378809, 0.8400376424328521, 0.7980974986963011, 0.7679925434416451]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 2) => 0.9380008751266237
finished with 17
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.2443032285706182] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2443032285706182, 0.19380440569955398] ***
*** finished computation of 7 references, err: [Inf, 0.2443032285706182, 0.19380440569955398] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [18, 82, 0]]
** centroid: 1, normalized-entropy: 0.6800770457282798, [(1, 18), (2, 82)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [91, 7, 0]]
** centroid: 2, normalized-entropy: 0.3712323266408756, [(1, 91), (2, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 71, 17]]
** centroid: 4, normalized-entropy: 0.7080803256135676, [(2, 71), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 79, 0]]
** centroid: 5, normalized-entropy: 0.974360599239397, [(1, 54), (2, 79)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [50, 10, 0]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(1, 50), (2, 10)]
*** center 7: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23550515097176386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23550515097176386, 0.19661198807056474] ***
*** finished computation of 7 references, err: [Inf, 0.23550515097176386, 0.19661198807056474] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 116, 0]]
** centroid: 1, normalized-entropy: 0.24832244463628733, [(1, 5), (2, 116)]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 3, 0]]
** centroid: 3, normalized-entropy: 0.2974722489192896, [(1, 54), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [79, 15, 0]]
** centroid: 4, normalized-entropy: 0.6332905746550958, [(1, 79), (2, 15)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 61, 19]]
** centroid: 5, normalized-entropy: 0.79085809055281, [(2, 61), (3, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [76, 53, 0]]
** centroid: 7, normalized-entropy: 0.9769460529925406, [(1, 76), (2, 53)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2562410832002949] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2562410832002949, 0.19587836619271062] ***
*** finished computation of 7 references, err: [Inf, 0.2562410832002949, 0.19587836619271062] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [15, 101, 0]]
** centroid: 1, normalized-entropy: 0.5555437650236148, [(1, 15), (2, 101)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 16, 0]]
** centroid: 2, normalized-entropy: 0.7320666900931937, [(1, 62), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 49, 22]]
** centroid: 4, normalized-entropy: 0.893010810044601, [(2, 49), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [27, 75, 0]]
** centroid: 5, normalized-entropy: 0.8337649072106652, [(1, 27), (2, 75)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [96, 4, 0]]
** centroid: 6, normalized-entropy: 0.24229218908241482, [(1, 96), (2, 4)]
*** center 7: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 17)
[0.9390018761276245, 0.9380008751266237, 0.9369758980537424, 0.9359988731246216, 0.9299958641276008, 0.9260458062853273, 0.9249818680956405, 0.9169858481235726, 0.9010237782692873, 0.8990577403751057, 0.8990037942133751, 0.8860147572722422, 0.8719917522312732, 0.8540486594378809, 0.8400376424328521, 0.7980974986963011, 0.7679925434416451]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.3, 2) => 0.9390018761276245
finished with 17
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.2290212207408622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2290212207408622, 0.19344021283090115] ***
*** finished computation of 7 references, err: [Inf, 0.2290212207408622, 0.19344021283090115] ***
*** center 1: selecting labels [1] (freq >= 2) [from [187, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [106, 33, 0]]
** centroid: 2, normalized-entropy: 0.7907067265182696, [(1, 106), (2, 33)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 76, 29]]
** centroid: 3, normalized-entropy: 0.8502079949955315, [(2, 76), (3, 29)]
*** center 4: selecting labels [1] (freq >= 2) [from [173, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 139, 0]]
** centroid: 5, normalized-entropy: 0.6636611253545512, [(1, 29), (2, 139)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [24, 123, 0]]
** centroid: 6, normalized-entropy: 0.6420642892306891, [(1, 24), (2, 123)]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24955155493412168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24955155493412168, 0.19135646073962562] ***
*** finished computation of 7 references, err: [Inf, 0.24955155493412168, 0.19135646073962562] ***
*** center 1: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 22, 14]]
** centroid: 2, normalized-entropy: 0.9640787648082293, [(2, 22), (3, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [49, 35, 0]]
** centroid: 4, normalized-entropy: 0.9798687566511527, [(1, 49), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 61, 0]]
** centroid: 5, normalized-entropy: 0.43497348007474274, [(1, 6), (2, 61)]
*** center 6: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 73, 0]]
** centroid: 7, normalized-entropy: 0.34351974100740135, [(1, 5), (2, 73)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22471058258973062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22471058258973062, 0.18453070189990103] ***
*** finished computation of 7 references, err: [Inf, 0.22471058258973062, 0.18453070189990103] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 73, 12]]
** centroid: 1, normalized-entropy: 0.5873116089977589, [(2, 73), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 20, 0]]
** centroid: 3, normalized-entropy: 0.8577435372751958, [(1, 51), (2, 20)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [49, 2, 0]]
** centroid: 4, normalized-entropy: 0.23868451135100152, [(1, 49), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [89, 11, 0]]
** centroid: 5, normalized-entropy: 0.49991595816452816, [(1, 89), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [73, 2, 0]]
** centroid: 6, normalized-entropy: 0.1773894531859976, [(1, 73), (2, 2)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 70, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2314626214876771] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2314626214876771, 0.1919276047172025] ***
*** finished computation of 7 references, err: [Inf, 0.2314626214876771, 0.1919276047172025] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [85, 5, 0]]
** centroid: 1, normalized-entropy: 0.3095434291503252, [(1, 85), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 14, 0]]
** centroid: 2, normalized-entropy: 0.699772221773307, [(1, 60), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 35, 15]]
** centroid: 3, normalized-entropy: 0.8812908992306927, [(2, 35), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 91, 0]]
** centroid: 5, normalized-entropy: 0.5435644431995963, [(1, 13), (2, 91)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 50, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24874106522649528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24874106522649528, 0.19642622273229063] ***
*** finished computation of 7 references, err: [Inf, 0.24874106522649528, 0.19642622273229063] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [31, 58, 0]]
** centroid: 1, normalized-entropy: 0.9325538428833382, [(1, 31), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [39, 4, 0]]
** centroid: 2, normalized-entropy: 0.446481346896803, [(1, 39), (2, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 40, 13]]
** centroid: 4, normalized-entropy: 0.8037159237834126, [(2, 40), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [59, 11, 0]]
** centroid: 5, normalized-entropy: 0.6274303352684106, [(1, 59), (2, 11)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 80, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [72, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21805041125416755] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21805041125416755, 0.19264722701907158] ***
*** finished computation of 7 references, err: [Inf, 0.21805041125416755, 0.19264722701907158] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [56, 16, 0]]
** centroid: 2, normalized-entropy: 0.7642045065086204, [(1, 56), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 70, 12]]
** centroid: 4, normalized-entropy: 0.6006085754131871, [(2, 70), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [60, 11, 0]]
** centroid: 5, normalized-entropy: 0.6220403090607189, [(1, 60), (2, 11)]
*** center 6: selecting labels [1] (freq >= 2) [from [111, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24860696184635162] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24860696184635162, 0.19154115493036808] ***
*** finished computation of 7 references, err: [Inf, 0.24860696184635162, 0.19154115493036808] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 53, 10]]
** centroid: 2, normalized-entropy: 0.6312630180916119, [(2, 53), (3, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [67, 26, 0]]
** centroid: 4, normalized-entropy: 0.8548640967818041, [(1, 67), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 60, 0]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(1, 24), (2, 60)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 58, 0]]
** centroid: 6, normalized-entropy: 0.2108423003185322, [(1, 2), (2, 58)]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22214457473903895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22214457473903895, 0.1853074212539941] ***
*** finished computation of 7 references, err: [Inf, 0.22214457473903895, 0.1853074212539941] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 11, 0]]
** centroid: 2, normalized-entropy: 0.6167482598263911, [(1, 61), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 53, 13]]
** centroid: 4, normalized-entropy: 0.7158259310602146, [(2, 53), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [38, 42, 0]]
** centroid: 5, normalized-entropy: 0.99819587904281, [(1, 38), (2, 42)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [79, 5, 0]]
** centroid: 6, normalized-entropy: 0.3255517134879513, [(1, 79), (2, 5)]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2314524523001164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2314524523001164, 0.19172198099270463] ***
*** finished computation of 7 references, err: [Inf, 0.2314524523001164, 0.19172198099270463] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 39, 15]]
** centroid: 2, normalized-entropy: 0.8524051786494784, [(2, 39), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 9, 0]]
** centroid: 3, normalized-entropy: 0.6572729784684466, [(1, 44), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [39, 51, 0]]
** centroid: 4, normalized-entropy: 0.9871377743721862, [(1, 39), (2, 51)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 14, 0]]
** centroid: 5, normalized-entropy: 0.7706290693639406, [(1, 48), (2, 14)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 68, 0]]
** centroid: 6, normalized-entropy: 0.18717625687320805, [(1, 2), (2, 68)]
*** center 7: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24274269615858793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24274269615858793, 0.18888737930031493] ***
*** finished computation of 7 references, err: [Inf, 0.24274269615858793, 0.18888737930031493] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [48, 41, 0]]
** centroid: 1, normalized-entropy: 0.995533068899466, [(1, 48), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 5, 0]]
** centroid: 2, normalized-entropy: 0.3750514064240124, [(1, 64), (2, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 51, 13]]
** centroid: 4, normalized-entropy: 0.7281342378690551, [(2, 51), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 28, 0]]
** centroid: 5, normalized-entropy: 0.9262122127346664, [(1, 54), (2, 28)]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2343028165139258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2343028165139258, 0.18918564020982012] ***
*** finished computation of 7 references, err: [Inf, 0.2343028165139258, 0.18918564020982012] ***
*** center 1: selecting labels [1] (freq >= 2) [from [98, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 21, 19]]
** centroid: 2, normalized-entropy: 0.99819587904281, [(2, 21), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [73, 2, 0]]
** centroid: 3, normalized-entropy: 0.1773894531859976, [(1, 73), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [81, 7, 0]]
** centroid: 4, normalized-entropy: 0.40057554263664, [(1, 81), (2, 7)]
*** center 5: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 90, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 60, 0]]
** centroid: 7, normalized-entropy: 0.2055925081850832, [(1, 2), (2, 60)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22042185218445956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22042185218445956, 0.18418818618357183] ***
*** finished computation of 7 references, err: [Inf, 0.22042185218445956, 0.18418818618357183] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [60, 35, 0]]
** centroid: 1, normalized-entropy: 0.9494520153879484, [(1, 60), (2, 35)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 24, 0]]
** centroid: 2, normalized-entropy: 0.8858834790484443, [(1, 55), (2, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 24, 14]]
** centroid: 4, normalized-entropy: 0.9494520153879484, [(2, 24), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [82, 4, 0]]
** centroid: 5, normalized-entropy: 0.2713895875081112, [(1, 82), (2, 4)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 82, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2229059073217213] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2229059073217213, 0.19454053080826997] ***
*** finished computation of 7 references, err: [Inf, 0.2229059073217213, 0.19454053080826997] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [80, 2, 0]]
** centroid: 1, normalized-entropy: 0.16542703399626665, [(1, 80), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 25, 12]]
** centroid: 2, normalized-entropy: 0.9090221560878149, [(2, 25), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 16, 0]]
** centroid: 3, normalized-entropy: 0.7424875695421234, [(1, 60), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [49, 48, 0]]
** centroid: 4, normalized-entropy: 0.9999233329473267, [(1, 49), (2, 48)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 85, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [77, 2, 0]]
** centroid: 7, normalized-entropy: 0.17033057560105982, [(1, 77), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24329919598717242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24329919598717242, 0.19684496066905557] ***
*** finished computation of 7 references, err: [Inf, 0.24329919598717242, 0.19684496066905557] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 21, 0]]
** centroid: 2, normalized-entropy: 0.7927652363756529, [(1, 67), (2, 21)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 24, 14]]
** centroid: 3, normalized-entropy: 0.9494520153879484, [(2, 24), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 72, 0]]
** centroid: 5, normalized-entropy: 0.5349436990971067, [(1, 10), (2, 72)]
*** center 6: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 58, 0]]
** centroid: 7, normalized-entropy: 0.2108423003185322, [(1, 2), (2, 58)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2210947980126366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2210947980126366, 0.18939508432149887] ***
*** finished computation of 7 references, err: [Inf, 0.2210947980126366, 0.18939508432149887] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [90, 3, 0]]
** centroid: 1, normalized-entropy: 0.2055925081850832, [(1, 90), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 16, 0]]
** centroid: 2, normalized-entropy: 0.8175072881213616, [(1, 47), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 34, 20]]
** centroid: 3, normalized-entropy: 0.9509560484549724, [(2, 34), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [39, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 69, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 23), (2, 69)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 78, 0]]
** centroid: 6, normalized-entropy: 0.22853814395352806, [(1, 3), (2, 78)]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.215291872584261] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.215291872584261, 0.19029977838601916] ***
*** finished computation of 7 references, err: [Inf, 0.215291872584261, 0.19029977838601916] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 54, 0]]
** centroid: 1, normalized-entropy: 0.9957274520849256, [(1, 63), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 12, 0]]
** centroid: 2, normalized-entropy: 0.7568336324184036, [(1, 43), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 38, 13]]
** centroid: 4, normalized-entropy: 0.8189555018403103, [(2, 38), (3, 13)]
*** center 5: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 79, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23841811833530666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23841811833530666, 0.18821905525587498] ***
*** finished computation of 7 references, err: [Inf, 0.23841811833530666, 0.18821905525587498] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [32, 58, 0]]
** centroid: 1, normalized-entropy: 0.9389320105807949, [(1, 32), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [42, 11, 0]]
** centroid: 2, normalized-entropy: 0.7367680100024784, [(1, 42), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 30, 16]]
** centroid: 4, normalized-entropy: 0.9321115676166747, [(2, 30), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 5, 0]]
** centroid: 5, normalized-entropy: 0.44506485705083854, [(1, 49), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 81, 0]]
** centroid: 6, normalized-entropy: 0.2222848306856879, [(1, 3), (2, 81)]
*** center 7: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23354128017555922] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23354128017555922, 0.19222281502000987] ***
*** finished computation of 7 references, err: [Inf, 0.23354128017555922, 0.19222281502000987] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [99, 4, 0]]
** centroid: 1, normalized-entropy: 0.23692474671835093, [(1, 99), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 23, 14]]
** centroid: 2, normalized-entropy: 0.9568886656798214, [(2, 23), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 14, 0]]
** centroid: 3, normalized-entropy: 0.6454495903301855, [(1, 71), (2, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 75, 0]]
** centroid: 7, normalized-entropy: 0.42080948947668984, [(1, 7), (2, 75)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24336033986508845] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24336033986508845, 0.1900467329453677] ***
*** finished computation of 7 references, err: [Inf, 0.24336033986508845, 0.1900467329453677] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 88, 0]]
** centroid: 1, normalized-entropy: 0.3424637724817958, [(1, 6), (2, 88)]
*** center 2: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 7, 0]]
** centroid: 3, normalized-entropy: 0.5140912790181233, [(1, 54), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [86, 8, 0]]
** centroid: 4, normalized-entropy: 0.4199210973757179, [(1, 86), (2, 8)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 32, 14]]
** centroid: 5, normalized-entropy: 0.8865408928220899, [(2, 32), (3, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 65, 0]]
** centroid: 7, normalized-entropy: 0.260862909647207, [(1, 3), (2, 65)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2370517351925373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2370517351925373, 0.19840063039213418] ***
*** finished computation of 7 references, err: [Inf, 0.2370517351925373, 0.19840063039213418] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 74, 0]]
** centroid: 1, normalized-entropy: 0.340373285759646, [(1, 5), (2, 74)]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 42, 16]]
** centroid: 4, normalized-entropy: 0.8497511372532974, [(2, 42), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [52, 18, 0]]
** centroid: 5, normalized-entropy: 0.8224042259549892, [(1, 52), (2, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [36, 59, 0]]
** centroid: 6, normalized-entropy: 0.9572951876544017, [(1, 36), (2, 59)]
*** center 7: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.225123617535457] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.225123617535457, 0.19066398476436736] ***
*** finished computation of 7 references, err: [Inf, 0.225123617535457, 0.19066398476436736] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [55, 53, 0]]
** centroid: 1, normalized-entropy: 0.9997526101661924, [(1, 55), (2, 53)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 12, 0]]
** centroid: 2, normalized-entropy: 0.6394571324851642, [(1, 62), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 59, 13]]
** centroid: 4, normalized-entropy: 0.6812908868842175, [(2, 59), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 50, 0]]
** centroid: 5, normalized-entropy: 0.849054424254048, [(1, 19), (2, 50)]
*** center 6: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2376238543689251] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2376238543689251, 0.19344963905960322] ***
*** finished computation of 7 references, err: [Inf, 0.2376238543689251, 0.19344963905960322] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 84, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 27, 0]]
** centroid: 3, normalized-entropy: 0.9305861291319927, [(1, 51), (2, 27)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [31, 32, 0]]
** centroid: 4, normalized-entropy: 0.9998182469603427, [(1, 31), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [89, 10, 0]]
** centroid: 5, normalized-entropy: 0.47218938467675087, [(1, 89), (2, 10)]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 31, 19]]
** centroid: 7, normalized-entropy: 0.9580420222262997, [(2, 31), (3, 19)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2603561526834965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2603561526834965, 0.20040659564360977] ***
*** finished computation of 7 references, err: [Inf, 0.2603561526834965, 0.20040659564360977] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [59, 12, 0]]
** centroid: 1, normalized-entropy: 0.6554444445609846, [(1, 59), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 14, 0]]
** centroid: 2, normalized-entropy: 0.6944460704939805, [(1, 61), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 55, 11]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(2, 55), (3, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [41, 42, 0]]
** centroid: 5, normalized-entropy: 0.9998952874186191, [(1, 41), (2, 42)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 70, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24664405229687691] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24664405229687691, 0.20059288945794104] ***
*** finished computation of 7 references, err: [Inf, 0.24664405229687691, 0.20059288945794104] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [49, 37, 0]]
** centroid: 1, normalized-entropy: 0.985909442028652, [(1, 49), (2, 37)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 15, 0]]
** centroid: 2, normalized-entropy: 0.8246578332945033, [(1, 43), (2, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 64, 15]]
** centroid: 4, normalized-entropy: 0.7012065844539666, [(2, 64), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [15, 71, 0]]
** centroid: 5, normalized-entropy: 0.6677135405281421, [(1, 15), (2, 71)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [35, 19, 0]]
** centroid: 7, normalized-entropy: 0.9357110512652843, [(1, 35), (2, 19)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23677260358445346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23677260358445346, 0.19048622680455446] ***
*** finished computation of 7 references, err: [Inf, 0.23677260358445346, 0.19048622680455446] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 46, 16]]
** centroid: 1, normalized-entropy: 0.8238116333123173, [(2, 46), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [73, 7, 0]]
** centroid: 3, normalized-entropy: 0.4280696292293062, [(1, 73), (2, 7)]
*** center 4: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [88, 16, 0]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(1, 88), (2, 16)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 61, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [25, 45, 0]]
** centroid: 7, normalized-entropy: 0.940285958670631, [(1, 25), (2, 45)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2441355014182627] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2441355014182627, 0.1991429777480662] ***
*** finished computation of 7 references, err: [Inf, 0.2441355014182627, 0.1991429777480662] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 47, 0]]
** centroid: 1, normalized-entropy: 0.9965322634876737, [(1, 54), (2, 47)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 27, 0]]
** centroid: 2, normalized-entropy: 0.9426831892554921, [(1, 48), (2, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 52, 15]]
** centroid: 4, normalized-entropy: 0.7671903206448686, [(2, 52), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 67, 0]]
** centroid: 5, normalized-entropy: 0.7778108790853029, [(1, 20), (2, 67)]
*** center 6: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24202443152293562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24202443152293562, 0.1915643168957904] ***
*** finished computation of 7 references, err: [Inf, 0.24202443152293562, 0.1915643168957904] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [56, 51, 0]]
** centroid: 1, normalized-entropy: 0.9984242941042116, [(1, 56), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 12, 0]]
** centroid: 2, normalized-entropy: 0.6962122601251459, [(1, 52), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 73, 10]]
** centroid: 4, normalized-entropy: 0.530744566923854, [(2, 73), (3, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 60, 0]]
** centroid: 5, normalized-entropy: 0.6758635715876156, [(1, 13), (2, 60)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.253113915592432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.253113915592432, 0.1993127777837217] ***
*** finished computation of 7 references, err: [Inf, 0.253113915592432, 0.1993127777837217] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [81, 9, 0]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(1, 81), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [63, 6, 0]]
** centroid: 2, normalized-entropy: 0.42622865699814483, [(1, 63), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 61, 14]]
** centroid: 3, normalized-entropy: 0.6944460704939805, [(2, 61), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [35, 56, 0]]
** centroid: 5, normalized-entropy: 0.961236604722876, [(1, 35), (2, 56)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [28, 7, 0]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(1, 28), (2, 7)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24034271090570838] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24034271090570838, 0.19217455367930233] ***
*** finished computation of 7 references, err: [Inf, 0.24034271090570838, 0.19217455367930233] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [96, 2, 0]]
** centroid: 1, normalized-entropy: 0.14372616993938164, [(1, 96), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 20, 17]]
** centroid: 2, normalized-entropy: 0.9952525494396791, [(2, 20), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [78, 17, 0]]
** centroid: 3, normalized-entropy: 0.6777688570413568, [(1, 78), (2, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 68, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 65, 0]]
** centroid: 7, normalized-entropy: 0.3193373865339728, [(1, 4), (2, 65)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22778186013177038] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22778186013177038, 0.19569045160035603] ***
*** finished computation of 7 references, err: [Inf, 0.22778186013177038, 0.19569045160035603] ***
*** center 1: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 26, 16]]
** centroid: 2, normalized-entropy: 0.9587118829771317, [(2, 26), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [100, 27, 0]]
** centroid: 4, normalized-entropy: 0.7464202652297556, [(1, 100), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [86, 7, 0]]
** centroid: 5, normalized-entropy: 0.3852851190780996, [(1, 86), (2, 7)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 69, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 43, 0]]
** centroid: 7, normalized-entropy: 0.2623112196143368, [(1, 2), (2, 43)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2154965680409223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2154965680409223, 0.18929174776375293] ***
*** finished computation of 7 references, err: [Inf, 0.2154965680409223, 0.18929174776375293] ***
*** center 1: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [45, 16, 0]]
** centroid: 2, normalized-entropy: 0.8301899714180444, [(1, 45), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 20, 14]]
** centroid: 3, normalized-entropy: 0.9774178175281716, [(2, 20), (3, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [89, 2, 0]]
** centroid: 4, normalized-entropy: 0.15240699892386778, [(1, 89), (2, 2)]
*** center 5: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [22, 65, 0]]
** centroid: 6, normalized-entropy: 0.8158009273789572, [(1, 22), (2, 65)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 90, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 371,3 => 29,1 => 600), Dict(2 => 362,3 => 31,1 => 607))
[ Info: ===== scores for single classifier: {"micro_f1":0.936,"precision":0.936,"recall":0.936,"macro_recall":0.9171474287924472,"macro_f1":0.8758014532615038,"accuracy":0.936,"class_f1":{"2":0.9080459770114944,"3":0.7567567567567568,"1":0.9626016260162602},"class_precision":{"2":0.9461077844311377,"3":0.6511627906976745,"1":0.9502407704654896},"class_recall":{"2":0.8729281767955801,"3":0.9032258064516129,"1":0.9752883031301482}}
[ Info: ===== scores for 1: {"micro_f1":0.959,"precision":0.959,"recall":0.959,"macro_recall":0.9325824645654164,"macro_f1":0.9433408193293187,"accuracy":0.959,"class_f1":{"2":0.9448183041722745,"3":0.9152542372881356,"1":0.9699499165275459},"class_precision":{"2":0.9212598425196851,"3":0.9642857142857143,"1":0.9830795262267343},"class_recall":{"2":0.9696132596685083,"3":0.8709677419354839,"1":0.957166392092257}}
[ Info: ===== scores for 5: {"micro_f1":0.952,"precision":0.952,"recall":0.952,"macro_recall":0.9374553162078372,"macro_f1":0.9299630795012496,"accuracy":0.952,"class_f1":{"2":0.9353099730458221,"3":0.8888888888888888,"1":0.9656903765690377},"class_precision":{"2":0.9131578947368421,"3":0.875,"1":0.9812925170068028},"class_recall":{"2":0.9585635359116023,"3":0.9032258064516129,"1":0.9505766062602965}}
[ Info: ===== scores for 7: {"micro_f1":0.951,"precision":0.951,"recall":0.951,"macro_recall":0.9350478599197798,"macro_f1":0.9290522001426534,"accuracy":0.951,"class_f1":{"2":0.9331514324693042,"3":0.8888888888888888,"1":0.9651162790697673},"class_precision":{"2":0.921832884097035,"3":0.875,"1":0.9731993299832495},"class_recall":{"2":0.9447513812154696,"3":0.9032258064516129,"1":0.957166392092257}}
[ Info: ===== scores for 9: {"micro_f1":0.9469999999999998,"precision":0.947,"recall":0.947,"macro_recall":0.9313646186674777,"macro_f1":0.9174506280458004,"accuracy":0.947,"class_f1":{"2":0.9272976680384089,"3":0.8615384615384616,"1":0.9635157545605307},"class_precision":{"2":0.9209809264305178,"3":0.8235294117647058,"1":0.9699499165275459},"class_recall":{"2":0.9337016574585635,"3":0.9032258064516129,"1":0.957166392092257}}
[ Info: ===== scores for 11: {"micro_f1":0.944,"precision":0.944,"recall":0.944,"macro_recall":0.9286021877282513,"macro_f1":0.9033033933664472,"accuracy":0.944,"class_f1":{"2":0.9228650137741047,"3":0.823529411764706,"1":0.9635157545605307},"class_precision":{"2":0.9203296703296703,"3":0.7567567567567568,"1":0.9699499165275459},"class_recall":{"2":0.925414364640884,"3":0.9032258064516129,"1":0.957166392092257}}
(score = 0.959, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.959, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.964, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.964, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.959, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.959, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.952, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.952, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.951, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.951, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.953, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.953, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.964,"k":1,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.964,"precision":0.964,"recall":0.964,"macro_recall":0.9459034095085249,"macro_f1":0.9478430863902364,"accuracy":0.964,"class_f1":{"2":0.9513513513513513,"3":0.9180327868852459,"1":0.9741451209341119},"class_precision":{"2":0.9312169312169312,"3":0.9333333333333333,"1":0.9864864864864865},"class_recall":{"2":0.9723756906077348,"3":0.9032258064516129,"1":0.9621087314662273}}
Test Summary: | Pass  Total
AKNC          |    8      8
[159, 1, 1, 2, 2, 2, 2, 6, 8, 17, 1, 12, 7, 9, 5, 4, 4, 3, 13, 7, 4, 23, 7, 17, 35, 12, 24, 1, 3, 2, 9, 8, 2, 2, 33, 71, 4, 1, 19, 1, 14, 10, 2, 24, 22, 26, 8, 2, 19, 3, 2, 4, 10, 11, 10, 29, 3, 15, 23, 7, 18, 3, 23, 8, 4, 140, 14, 26, 17, 1, 52, 24, 65, 9, 10, 14, 14, 7, 19, 8, 7, 20, 53, 13, 8, 24, 14, 27, 5, 555, 13, 15, 10, 6, 21, 10, 5, 12, 7, 35, 3, 36, 18, 18, 7, 2, 3, 43, 7, 5, 12, 13, 14, 14, 11, 73, 9, 55, 16, 38, 5, 7, 21, 10, 130, 24, 15, 6, 24, 22, 31, 5, 2, 14, 3, 10, 27, 5, 40, 12, 7, 9, 6, 10, 5, 10, 28, 5, 4, 6, 35, 4, 14, 10, 19, 27, 92, 6, 1, 84, 30, 6, 59, 138, 11, 183, 17, 83, 69, 7, 69, 3, 6, 1, 970, 49, 11, 43, 6, 71, 30, 3, 1, 11, 46, 26, 13, 50, 26, 29, 1, 19, 92, 33, 12, 85, 19, 3, 35, 34, 16, 7, 21, 8, 34, 32, 21, 24, 1, 8, 1, 3, 14, 146, 9, 31, 16, 170, 31, 3, 10, 24, 6, 3, 94, 16, 49, 110, 35, 23, 244, 34, 14, 7, 15, 26, 22, 7, 183, 27, 88, 43, 17, 22, 234, 16, 2, 14, 2, 14, 23, 5, 34, 20, 70, 1, 6, 17, 22, 3, 88, 35, 4, 14, 6, 433, 15, 15, 9, 12, 44, 59, 48, 36, 15, 15, 5, 19, 9, 3, 3, 5, 98, 222, 3, 11, 24, 47, 151, 35, 36, 22, 26, 8, 21, 71, 80, 34, 294, 12]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6410000000000001, speedup = 0.280520691783872, eval_ratio = 0.079609)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3833984375000003,"recall":0.38194444444444475,"f1":null,"seconds":0.000653563067317009,"exhaustive_search_seconds":0.00031538307666778564,"evaluations":516.40625,"distances_sum":1708.856050846177}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5555555555555556,"recall":0.5555555555555556,"f1":0.5555555555555556,"seconds":0.000331241637468338,"exhaustive_search_seconds":0.00031538307666778564,"evaluations":723.859375,"distances_sum":1586.228717222939}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6753472222222222,"recall":0.6753472222222222,"f1":0.6753472222222222,"seconds":0.00044720619916915894,"exhaustive_search_seconds":0.00031538307666778564,"evaluations":855.78125,"distances_sum":1532.3298830439896}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7517361111111107,"recall":0.7517361111111107,"f1":0.7517361111111107,"seconds":0.0005488041788339615,"exhaustive_search_seconds":0.00031538307666778564,"evaluations":1014.1796875,"distances_sum":1503.5466905539365}
KCenters.DeloneInvIndex> reached performance {"precision":0.802083333333333,"recall":0.802083333333333,"f1":0.802083333333333,"seconds":0.0006670709699392319,"exhaustive_search_seconds":0.00031538307666778564,"evaluations":1157.359375,"distances_sum":1489.733826725755}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7659999999999998, speedup = 0.5655519464256128, eval_ratio = 0.10885)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
