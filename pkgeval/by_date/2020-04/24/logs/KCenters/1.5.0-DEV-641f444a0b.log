Julia Version 1.5.0-DEV.681
Commit 641f444a0b (2020-04-24 16:27 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Missings ──────────────────── v0.4.3
  Installed LearnBase ─────────────────── v0.2.2
  Installed Compat ────────────────────── v3.8.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataValueInterfaces ───────── v1.0.0
  Installed DataAPI ───────────────────── v1.2.0
  Installed DataStructures ────────────── v0.17.13
  Installed JSON ──────────────────────── v0.21.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed MLDataPattern ─────────────── v0.5.2
  Installed DataFrames ────────────────── v0.20.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed Reexport ──────────────────── v0.2.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed OrderedCollections ────────── v1.1.0
  Installed Tables ────────────────────── v1.0.4
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.8.0
  [9a962f9c] + DataAPI v1.2.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.13
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.2
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_tPT9w7/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_tPT9w7/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.8.0
  [9a962f9c] DataAPI v1.2.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.13
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9326678744951884
[ Info: 0.8302954188982645
[ Info: 0.5553481129308542
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32480694947143396
mean(cdnet.distances) = 0.37249116629362106
mean(crand.distances) = 0.3347923172761997
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8429034507159515,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.34375,"distances_sum":2260.8957347707333}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1650390625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1650390625,"f1":null,"seconds":3.164634108543396e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":5.0859375,"distances_sum":486.1227848825865}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.851712350149851,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.390625,"distances_sum":2296.3012835133536}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75390625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.75390625,"f1":0.851712350149851,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.390625,"distances_sum":2296.3012835133536}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.935616987179488,"seconds":7.655471563339233e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.671875,"distances_sum":2839.433171933351}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9381269771894777,"seconds":6.40377402305603e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.734375,"distances_sum":2851.501021381256}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.89453125,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.9381269771894777,"seconds":6.40377402305603e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.734375,"distances_sum":2851.501021381256}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9436870421245427,"seconds":7.465481758117676e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.703125,"distances_sum":2920.5097468570393}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9436870421245427,"seconds":7.465481758117676e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.703125,"distances_sum":2920.5097468570393}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.90234375,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9436870421245427,"seconds":7.465481758117676e-6,"exhaustive_search_seconds":1.4528632164001465e-6,"evaluations":8.703125,"distances_sum":2920.5097468570393}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2080078125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2080078125,"f1":null,"seconds":7.84359872341156e-6,"exhaustive_search_seconds":1.6968697309494019e-6,"evaluations":5.9453125,"distances_sum":563.3030219091104}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8531088702963712,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.6968697309494019e-6,"evaluations":8.234375,"distances_sum":2115.918728907195}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7578125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7578125,"f1":0.8531088702963712,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.6968697309494019e-6,"evaluations":8.234375,"distances_sum":2115.918728907195}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7578125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7578125,"f1":0.8531088702963712,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.6968697309494019e-6,"evaluations":8.234375,"distances_sum":2115.918728907195}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7578125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7578125,"f1":0.8531088702963712,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.6968697309494019e-6,"evaluations":8.234375,"distances_sum":2115.918728907195}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8492689602064608,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.59375,"distances_sum":2103.86186263139}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3310546875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3310546875,"f1":null,"seconds":4.032626748085022e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":5.3828125,"distances_sum":933.8197902966308}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8492689602064608,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.59375,"distances_sum":2103.86186263139}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9306089743589752,"seconds":6.623566150665283e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.7421875,"distances_sum":2585.1403505772746}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9424851190476192,"seconds":6.720423698425293e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.8046875,"distances_sum":2662.084970992265}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9122799075924083,"seconds":9.853392839431763e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.8671875,"distances_sum":2406.604816089633}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9424851190476192,"seconds":6.720423698425293e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.8046875,"distances_sum":2662.084970992265}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9807864010989013,"seconds":6.707385182380676e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.9296875,"distances_sum":2939.5876174496093}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9509901556776562,"seconds":6.299465894699097e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.7421875,"distances_sum":2750.0558587117785}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9567021520146525,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.796875,"distances_sum":2763.7094240350725}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9665750915750919,"seconds":6.599351763725281e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.8984375,"distances_sum":2818.680460110652}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9665579212454215,"seconds":6.685033440589905e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.9453125,"distances_sum":2801.9979227430754}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9807864010989013,"seconds":6.707385182380676e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.9296875,"distances_sum":2939.5876174496093}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9807864010989013,"seconds":6.707385182380676e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.9296875,"distances_sum":2939.5876174496093}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.234375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.234375,"f1":null,"seconds":3.915280103683472e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":6.0078125,"distances_sum":587.2006708243742}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.26171875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.26171875,"f1":null,"seconds":3.991648554801941e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":6.4296875,"distances_sum":662.8635322995773}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65234375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.65234375,"f1":0.7759572025197032,"seconds":5.204230546951294e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.5703125,"distances_sum":1728.4451006278591}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.65234375,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.65234375,"f1":0.7759572025197032,"seconds":5.204230546951294e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.5703125,"distances_sum":1728.4451006278591}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.867841013153514,"seconds":6.647780537605286e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.2890625,"distances_sum":2176.921390123965}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9501373626373631,"seconds":6.3478946685791016e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8984375,"distances_sum":2736.809918903813}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.804842553280054,"seconds":5.124136805534363e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.7109375,"distances_sum":1816.574688250176}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8555241633366641,"seconds":5.019828677177429e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.125,"distances_sum":2111.2100188916097}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8594868672993681,"seconds":5.012378096580505e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.125,"distances_sum":2115.8531788570735}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9501373626373631,"seconds":6.3478946685791016e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8984375,"distances_sum":2736.809918903813}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9745535714285716,"seconds":6.327405571937561e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9609375,"distances_sum":2900.049362903022}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9558092948717954,"seconds":6.01448118686676e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9375,"distances_sum":2763.6337727003292}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":9,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9726991758241761,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9296875,"distances_sum":2901.194780266999}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9649584790209796,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8984375,"distances_sum":2857.128519860736}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9563301282051285,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.90625,"distances_sum":2792.11885309603}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9592662545787547,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9296875,"distances_sum":2830.8169225217825}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9745535714285716,"seconds":6.327405571937561e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9609375,"distances_sum":2900.049362903022}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9745535714285716,"seconds":6.327405571937561e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9609375,"distances_sum":2900.049362903022}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3828125, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3828125,"f1":null,"seconds":3.471970558166504e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":5.9453125,"distances_sum":983.2489117290468}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.400390625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.400390625,"f1":null,"seconds":3.594905138015747e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":6.078125,"distances_sum":1036.3397083988475}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5498046875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5498046875,"f1":0.6949881715506723,"seconds":4.004687070846558e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":7.1796875,"distances_sum":1407.5679117520167}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5498046875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5498046875,"f1":0.6949881715506723,"seconds":4.004687070846558e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":7.1796875,"distances_sum":1407.5679117520167}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8555647477522486,"seconds":5.248934030532837e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.2578125,"distances_sum":2181.8118724059964}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":6,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8555647477522486,"seconds":5.248934030532837e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.2578125,"distances_sum":2181.8118724059964}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.862119651182152,"seconds":5.25452196598053e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.28125,"distances_sum":2173.9158020791774}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":10,"bsize":6}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9241414835164843,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.640625,"distances_sum":2632.916131226609}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8731341575091585,"seconds":5.237758159637451e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.4609375,"distances_sum":2280.3354373830916}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.869140625,"state":{"ssize":10,"bsize":6},"perf":{"precision":1.0,"recall":0.869140625,"f1":0.9241414835164843,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.640625,"distances_sum":2632.916131226609}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.869140625,"state":{"ssize":10,"bsize":6},"perf":{"precision":1.0,"recall":0.869140625,"f1":0.9241414835164843,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.640625,"distances_sum":2632.916131226609}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2294921875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2294921875,"f1":null,"seconds":3.388151526451111e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":6.2109375,"distances_sum":450.19851595487535}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2177734375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2177734375,"f1":null,"seconds":3.3043324947357178e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":5.8671875,"distances_sum":433.0366914837219}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6123046875, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.6123046875,"f1":null,"seconds":4.317611455917358e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":7.4140625,"distances_sum":1254.1992569509086}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6123046875,"state":{"ssize":4,"bsize":3},"perf":{"precision":null,"recall":0.6123046875,"f1":null,"seconds":4.317611455917358e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":7.4140625,"distances_sum":1254.1992569509086}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.928451756576757,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.6953125,"distances_sum":2093.7830842868498}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8504495504495515,"seconds":5.191192030906677e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.34375,"distances_sum":1609.8482941890397}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.87890625,"f1":0.928451756576757,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.6953125,"distances_sum":2093.7830842868498}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9587454212454216,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.8671875,"distances_sum":2274.3003221482486}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9417525183150188,"seconds":5.8710575103759766e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.765625,"distances_sum":2167.601453265372}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9524668040293045,"seconds":6.141141057014465e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.828125,"distances_sum":2241.0616561521333}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9587454212454216,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.8671875,"distances_sum":2274.3003221482486}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9587454212454216,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.8671875,"distances_sum":2274.3003221482486}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1416015625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1416015625,"f1":null,"seconds":2.8219074010849e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":3.90625,"distances_sum":364.99490419253146}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1416015625,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.1416015625,"f1":null,"seconds":2.8219074010849e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":3.90625,"distances_sum":364.99490419253146}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1416015625,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.1416015625,"f1":null,"seconds":2.8219074010849e-6,"exhaustive_search_seconds":1.6260892152786255e-6,"evaluations":3.90625,"distances_sum":364.99490419253146}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.544921875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.544921875,"f1":0.686093073593074,"seconds":4.345551133155823e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":6.359375,"distances_sum":1354.490715270675}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.544921875,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.544921875,"f1":0.686093073593074,"seconds":4.345551133155823e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":6.359375,"distances_sum":1354.490715270675}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7850243506493514,"seconds":4.7925859689712524e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":6.8984375,"distances_sum":1731.191202528701}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9244593947718955,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.390625,"distances_sum":2701.5286159211396}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8720703125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8720703125,"f1":0.9244593947718955,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.390625,"distances_sum":2701.5286159211396}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9712282509157513,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8828125,"distances_sum":3022.256950035477}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9551224816849821,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.78125,"distances_sum":2904.2003293989346}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9520375457875461,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.7265625,"distances_sum":2895.2695343138994}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9712282509157513,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8828125,"distances_sum":3022.256950035477}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9712282509157513,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.8828125,"distances_sum":3022.256950035477}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3232421875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.3232421875,"f1":null,"seconds":4.237517714500427e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.2265625,"distances_sum":909.7369361083378}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.845685044122545,"seconds":5.124136805534363e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.8828125,"distances_sum":2126.8447264044084}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.748046875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.748046875,"f1":0.845685044122545,"seconds":5.124136805534363e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.8828125,"distances_sum":2126.8447264044084}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8888226356976368,"seconds":6.332993507385254e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.046875,"distances_sum":2448.5745524049544}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9638450091575095,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.7890625,"distances_sum":3086.324075736332}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9638450091575095,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.7890625,"distances_sum":3086.324075736332}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9638450091575095,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.7890625,"distances_sum":3086.324075736332}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9638450091575095,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.7890625,"distances_sum":3086.324075736332}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5107421875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5107421875,"f1":0.6590728715728719,"seconds":4.176050424575806e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":6.40625,"distances_sum":1372.4741533460756}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8473849067599076,"seconds":5.114823579788208e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.0078125,"distances_sum":2139.081185811167}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.267578125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.267578125,"f1":null,"seconds":3.0081719160079956e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":5.375,"distances_sum":772.8213308012548}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.74609375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.74609375,"f1":0.8473849067599076,"seconds":5.114823579788208e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.0078125,"distances_sum":2139.081185811167}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9631524725274729,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.828125,"distances_sum":3071.305700175961}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9241217116217125,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.546875,"distances_sum":2769.319384173785}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8601710789210798,"seconds":5.694106221199036e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.2109375,"distances_sum":2206.184872049319}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8495343198468207,"seconds":5.25452196598053e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.03125,"distances_sum":2138.7027914458977}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9631524725274729,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.828125,"distances_sum":3071.305700175961}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9665750915750919,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.8671875,"distances_sum":3085.7696470964543}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9665750915750919,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.8671875,"distances_sum":3085.7696470964543}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9665750915750919,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.8671875,"distances_sum":3085.7696470964543}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5478515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5478515625,"f1":0.6893478049728055,"seconds":3.958120942115784e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.4921875,"distances_sum":1452.2393816847575}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7972385253635262,"seconds":4.647299647331238e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.25,"distances_sum":1830.4164792376916}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.677734375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.677734375,"f1":0.7972385253635262,"seconds":4.647299647331238e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.25,"distances_sum":1830.4164792376916}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9381009615384621,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6484375,"distances_sum":2827.669912415541}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8862928737928744,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.296875,"distances_sum":2455.6274533764363}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8499354811854821,"seconds":5.055218935012817e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.96875,"distances_sum":2152.4674638460906}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.89453125,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.9381009615384621,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6484375,"distances_sum":2827.669912415541}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9533711080586086,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8203125,"distances_sum":2933.942768456581}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9616701007326014,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.78125,"distances_sum":3030.766639746442}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9616701007326014,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.78125,"distances_sum":3030.766639746442}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9616701007326014,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.78125,"distances_sum":3030.766639746442}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3701171875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3701171875,"f1":null,"seconds":3.4440308809280396e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":5.625,"distances_sum":878.6262175767278}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.30078125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.30078125,"f1":null,"seconds":3.2670795917510986e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":6.09375,"distances_sum":808.0376795708404}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3701171875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3701171875,"f1":null,"seconds":3.4440308809280396e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":5.625,"distances_sum":878.6262175767278}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69921875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.69921875,"f1":0.8117491883116891,"seconds":4.822388291358948e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":7.34375,"distances_sum":1858.8410393570566}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8435189810189818,"seconds":4.986301064491272e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":7.5859375,"distances_sum":2036.7194827662843}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8482923326673334,"seconds":4.939734935760498e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":7.7265625,"distances_sum":2076.874231851399}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.75,"f1":0.8482923326673334,"seconds":4.939734935760498e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":7.7265625,"distances_sum":2076.874231851399}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.955955502830503,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.75,"distances_sum":2961.1985523965195}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9570913461538468,"seconds":5.545094609260559e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.7734375,"distances_sum":2931.452156022869}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9651842948717954,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.765625,"distances_sum":3060.4303582114135}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8572833416583425,"seconds":4.844740033149719e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":7.734375,"distances_sum":2116.9366216860635}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9330242673992681,"seconds":5.494803190231323e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.4765625,"distances_sum":2742.9433014370475}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9459935897435902,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.6171875,"distances_sum":2860.200736440176}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.9011961996337002,"seconds":5.019828677177429e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.0703125,"distances_sum":2491.8159199008765}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9651842948717954,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.765625,"distances_sum":3060.4303582114135}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9651842948717954,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.765625,"distances_sum":3060.4303582114135}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5556640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5556640625,"f1":0.6942888708513711,"seconds":4.1816383600234985e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":7.0234375,"distances_sum":1484.3956919319944}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5556640625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5556640625,"f1":0.6942888708513711,"seconds":4.1816383600234985e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":7.0234375,"distances_sum":1484.3956919319944}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9293243215118223,"seconds":5.204230546951294e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.515625,"distances_sum":2744.019985972711}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5751953125, conf: {"ssize":9,"bsize":3}, perf: {"precision":1.0,"recall":0.5751953125,"f1":0.7155861499611506,"seconds":4.019588232040405e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":7.078125,"distances_sum":1545.528961203298}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.876953125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.876953125,"f1":0.9293243215118223,"seconds":5.204230546951294e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.515625,"distances_sum":2744.019985972711}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9744448260073263,"seconds":5.971640348434448e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.890625,"distances_sum":3140.2852826779867}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9744448260073263,"seconds":5.971640348434448e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.890625,"distances_sum":3140.2852826779867}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9744448260073263,"seconds":5.971640348434448e-6,"exhaustive_search_seconds":1.7881393432617188e-6,"evaluations":8.890625,"distances_sum":3140.2852826779867}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8464473026973035,"seconds":7.355585694313049e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":7.890625,"distances_sum":2190.050647306333}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5546875,"f1":0.6938760891885897,"seconds":4.427507519721985e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":7.2734375,"distances_sum":1473.023322238739}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7490234375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7490234375,"f1":0.8464473026973035,"seconds":7.355585694313049e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":7.890625,"distances_sum":2190.050647306333}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8937879828504838,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.125,"distances_sum":2485.670841746282}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8975503663003671,"seconds":5.159527063369751e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.046875,"distances_sum":2554.6725210082595}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.82421875,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.82421875,"f1":0.8975503663003671,"seconds":5.159527063369751e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.046875,"distances_sum":2554.6725210082595}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9515109890109893,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.7578125,"distances_sum":3005.7864137467327}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9566678113553119,"seconds":5.563721060752869e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.765625,"distances_sum":3084.3087680260232}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9667239010989014,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.875,"distances_sum":3129.2907944878034}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9191168206793215,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.3671875,"distances_sum":2731.840807127146}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9667239010989014,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.875,"distances_sum":3129.2907944878034}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9667239010989014,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.344829797744751e-6,"evaluations":8.875,"distances_sum":3129.2907944878034}}, n: 9
mean(cfft.distances) = 0.32768637709660453
mean(cdnet.distances) = 1.284281625572629
mean(crand.distances) = 0.36568834670870015
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8844444444444445
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8911111111111111
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8266666666666667
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9066666666666666
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.88
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9266666666666666
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8644444444444445
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.88
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8933333333333332
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9199999999999999
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8822222222222221
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9155555555555556
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9199999999999999
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8955555555555555
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8755555555555556
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9199999999999999
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9133333333333334
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8822222222222221
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8866666666666667
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8955555555555555
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9199999999999999
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8799999999999999
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8911111111111111
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 2, 2, 1, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 2, 2, 1, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 2, 2, 1, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 2, 2, 1, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 2, 2, 1, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 2, 2, 1, 3, 2, 3, 1]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 1, 2, 3, 2, 2, 1, 3, 2, 3, 1]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.6181969254215558] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 17, 5]]
** centroid: 1, normalized-entropy: 0.7732266742876346, [(2, 17), (3, 5)]
*** center 2: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 12, 2]]
** centroid: 6, normalized-entropy: 0.5916727785823274, [(2, 12), (3, 2)]
*** center 7: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 14]]
** centroid: 8, normalized-entropy: 0.5435644431995963, [(2, 2), (3, 14)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.9533333333333334
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.24089503698624312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24089503698624312, 0.19684716640319955] ***
*** finished computation of 7 references, err: [Inf, 0.24089503698624312, 0.19684716640319955] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [99, 2, 0]]
** centroid: 1, normalized-entropy: 0.1403272709905931, [(1, 99), (2, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 122, 18]]
** centroid: 4, normalized-entropy: 0.5535072654547254, [(2, 122), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 24, 0]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(1, 60), (2, 24)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [7, 55, 0]]
** centroid: 6, normalized-entropy: 0.5086113313826895, [(1, 7), (2, 55)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [93, 31, 0]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(1, 93), (2, 31)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18693372006066614] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18693372006066614, 0.14979388197470042] ***
*** finished computation of 7 references, err: [Inf, 0.18693372006066614, 0.14979388197470042] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [139, 11, 0]]
** centroid: 1, normalized-entropy: 0.3782416444053622, [(1, 139), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [45, 14, 0]]
** centroid: 2, normalized-entropy: 0.7905013842153699, [(1, 45), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 42, 18]]
** centroid: 3, normalized-entropy: 0.8812908992306927, [(2, 42), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 83, 0]]
** centroid: 5, normalized-entropy: 0.8251252643746189, [(1, 29), (2, 83)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 84, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19084691226124942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19084691226124942, 0.1526651199991889] ***
*** finished computation of 7 references, err: [Inf, 0.19084691226124942, 0.1526651199991889] ***
*** center 1: selecting labels [1] (freq >= 2) [from [134, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 49, 21]]
** centroid: 2, normalized-entropy: 0.8812908992306927, [(2, 49), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 8, 0]]
** centroid: 3, normalized-entropy: 0.5328350630342235, [(1, 58), (2, 8)]
*** center 4: selecting labels [1] (freq >= 2) [from [82, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 102, 0]]
** centroid: 5, normalized-entropy: 0.7024665512903904, [(1, 24), (2, 102)]
*** center 6: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 78, 0]]
** centroid: 7, normalized-entropy: 0.446481346896803, [(1, 8), (2, 78)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20454268074891846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20454268074891846, 0.1500174328754621] ***
*** finished computation of 7 references, err: [Inf, 0.20454268074891846, 0.1500174328754621] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 89, 21]]
** centroid: 1, normalized-entropy: 0.7033693386668108, [(2, 89), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [73, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [81, 19, 0]]
** centroid: 4, normalized-entropy: 0.7014714598838974, [(1, 81), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [71, 44, 0]]
** centroid: 5, normalized-entropy: 0.9598636448150405, [(1, 71), (2, 44)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 81, 0]]
** centroid: 6, normalized-entropy: 0.46899559358928133, [(1, 9), (2, 81)]
*** center 7: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23374178907176754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23374178907176754, 0.19168102544628912] ***
*** finished computation of 7 references, err: [Inf, 0.23374178907176754, 0.19168102544628912] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [95, 30, 0]]
** centroid: 1, normalized-entropy: 0.7950402793845225, [(1, 95), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [47, 12, 0]]
** centroid: 2, normalized-entropy: 0.7286561673702678, [(1, 47), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 74, 18]]
** centroid: 3, normalized-entropy: 0.7131467486384921, [(2, 74), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [106, 3, 0]]
** centroid: 5, normalized-entropy: 0.18181317169561842, [(1, 106), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [63, 23, 0]]
** centroid: 6, normalized-entropy: 0.8377698690066789, [(1, 63), (2, 23)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 92, 0]]
** centroid: 7, normalized-entropy: 0.14854949043034832, [(1, 2), (2, 92)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.251731356237268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.251731356237268, 0.1907467435971405] ***
*** finished computation of 7 references, err: [Inf, 0.251731356237268, 0.1907467435971405] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [23, 98, 0]]
** centroid: 1, normalized-entropy: 0.7016443140299524, [(1, 23), (2, 98)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [67, 14, 0]]
** centroid: 2, normalized-entropy: 0.6641593279528072, [(1, 67), (2, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [28, 75, 0]]
** centroid: 4, normalized-entropy: 0.844099171796772, [(1, 28), (2, 75)]
*** center 5: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [74, 2, 0]]
** centroid: 6, normalized-entropy: 0.17556502585750275, [(1, 74), (2, 2)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 49, 21]]
** centroid: 7, normalized-entropy: 0.8812908992306927, [(2, 49), (3, 21)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2339676518657844] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2339676518657844, 0.19279083114946777] ***
*** finished computation of 7 references, err: [Inf, 0.2339676518657844, 0.19279083114946777] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 83, 1]]
** centroid: 1, normalized-entropy: 0.09317131799548928, [(2, 83), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [65, 30, 0]]
** centroid: 3, normalized-entropy: 0.8997437586982626, [(1, 65), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [103, 24, 0]]
** centroid: 4, normalized-entropy: 0.6993252039597307, [(1, 103), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [63, 7, 0]]
** centroid: 5, normalized-entropy: 0.46899559358928133, [(1, 63), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [97, 5, 0]]
** centroid: 6, normalized-entropy: 0.28221763445592507, [(1, 97), (2, 5)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 85, 20]]
** centroid: 7, normalized-entropy: 0.7024665512903904, [(2, 85), (3, 20)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19564558335303053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19564558335303053, 0.15303638002726141] ***
*** starting iteration: 2; err: [Inf, 0.19564558335303053, 0.15303638002726141] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19564558335303053, 0.15303638002726141, 0.14785697694179845] ***
*** starting iteration: 3; err: [Inf, 0.19564558335303053, 0.15303638002726141, 0.14785697694179845] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19564558335303053, 0.15303638002726141, 0.14785697694179845, 0.1463296178717155] ***
*** starting iteration: 4; err: [Inf, 0.19564558335303053, 0.15303638002726141, 0.14785697694179845, 0.1463296178717155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19564558335303053, 0.15303638002726141, 0.14785697694179845, 0.1463296178717155, 0.14560526336316723] ***
*** finished computation of 7 references, err: [Inf, 0.19564558335303053, 0.15303638002726141, 0.14785697694179845, 0.1463296178717155, 0.14560526336316723] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 91, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 32, 0]]
** centroid: 2, normalized-entropy: 0.9423094893103273, [(1, 57), (2, 32)]
*** center 3: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 74, 18]]
** centroid: 4, normalized-entropy: 0.7131467486384921, [(2, 74), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 36, 0]]
** centroid: 5, normalized-entropy: 0.9892452969285004, [(1, 46), (2, 36)]
*** center 6: selecting labels [1] (freq >= 2) [from [125, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19393233774645977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19393233774645977, 0.15360566022187316] ***
*** starting iteration: 2; err: [Inf, 0.19393233774645977, 0.15360566022187316] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19393233774645977, 0.15360566022187316, 0.1491301961737438] ***
*** starting iteration: 3; err: [Inf, 0.19393233774645977, 0.15360566022187316, 0.1491301961737438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19393233774645977, 0.15360566022187316, 0.1491301961737438, 0.14760236623466597] ***
*** starting iteration: 4; err: [Inf, 0.19393233774645977, 0.15360566022187316, 0.1491301961737438, 0.14760236623466597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19393233774645977, 0.15360566022187316, 0.1491301961737438, 0.14760236623466597, 0.14621934028289307] ***
*** starting iteration: 5; err: [Inf, 0.19393233774645977, 0.15360566022187316, 0.1491301961737438, 0.14760236623466597, 0.14621934028289307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19393233774645977, 0.15360566022187316, 0.1491301961737438, 0.14760236623466597, 0.14621934028289307, 0.145544008989965] ***
*** finished computation of 7 references, err: [Inf, 0.19393233774645977, 0.15360566022187316, 0.1491301961737438, 0.14760236623466597, 0.14621934028289307, 0.145544008989965] ***
*** center 1: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 7, 0]]
** centroid: 2, normalized-entropy: 0.47357292491745173, [(1, 62), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 65, 21]]
** centroid: 3, normalized-entropy: 0.8019325020834525, [(2, 65), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [125, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 85, 0]]
** centroid: 5, normalized-entropy: 0.6684725699243225, [(1, 18), (2, 85)]
*** center 6: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 81, 0]]
** centroid: 7, normalized-entropy: 0.49958440742366095, [(1, 10), (2, 81)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19722778777098995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19722778777098995, 0.1519830169818033] ***
*** starting iteration: 2; err: [Inf, 0.19722778777098995, 0.1519830169818033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19722778777098995, 0.1519830169818033, 0.1465789482920435] ***
*** starting iteration: 3; err: [Inf, 0.19722778777098995, 0.1519830169818033, 0.1465789482920435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19722778777098995, 0.1519830169818033, 0.1465789482920435, 0.14321665410992634] ***
*** starting iteration: 4; err: [Inf, 0.19722778777098995, 0.1519830169818033, 0.1465789482920435, 0.14321665410992634] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19722778777098995, 0.1519830169818033, 0.1465789482920435, 0.14321665410992634, 0.14201096868117352] ***
*** starting iteration: 5; err: [Inf, 0.19722778777098995, 0.1519830169818033, 0.1465789482920435, 0.14321665410992634, 0.14201096868117352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19722778777098995, 0.1519830169818033, 0.1465789482920435, 0.14321665410992634, 0.14201096868117352, 0.14121423871361133] ***
*** finished computation of 7 references, err: [Inf, 0.19722778777098995, 0.1519830169818033, 0.1465789482920435, 0.14321665410992634, 0.14201096868117352, 0.14121423871361133] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [19, 82, 0]]
** centroid: 1, normalized-entropy: 0.6975195309289136, [(1, 19), (2, 82)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [77, 7, 0]]
** centroid: 2, normalized-entropy: 0.4138168503036336, [(1, 77), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 56, 21]]
** centroid: 3, normalized-entropy: 0.8453509366224364, [(2, 56), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [100, 4, 0]]
** centroid: 5, normalized-entropy: 0.23519338181924157, [(1, 100), (2, 4)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 83, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [94, 2, 0]]
** centroid: 7, normalized-entropy: 0.14609425012013613, [(1, 94), (2, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23495263010654402] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23495263010654402, 0.20229765037256203] ***
*** finished computation of 7 references, err: [Inf, 0.23495263010654402, 0.20229765037256203] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [22, 46, 0]]
** centroid: 1, normalized-entropy: 0.9081783472997053, [(1, 22), (2, 46)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [19, 77, 0]]
** centroid: 2, normalized-entropy: 0.7177418091697444, [(1, 19), (2, 77)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [110, 23, 0]]
** centroid: 3, normalized-entropy: 0.6643689507115365, [(1, 110), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [65, 14, 0]]
** centroid: 4, normalized-entropy: 0.6739468651941155, [(1, 65), (2, 14)]
*** center 5: selecting labels [1] (freq >= 1) [from [145, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 78, 21]]
** centroid: 7, normalized-entropy: 0.7455178428108284, [(2, 78), (3, 21)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22372585136549494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22372585136549494, 0.18680825348345861] ***
*** finished computation of 7 references, err: [Inf, 0.22372585136549494, 0.18680825348345861] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [114, 7, 0]]
** centroid: 1, normalized-entropy: 0.3188554185210095, [(1, 114), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [45, 15, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 45), (2, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [3, 82, 0]]
** centroid: 3, normalized-entropy: 0.22028326695127437, [(1, 3), (2, 82)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [45, 52, 0]]
** centroid: 4, normalized-entropy: 0.9962401135461777, [(1, 45), (2, 52)]
*** center 5: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [133, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 78, 21]]
** centroid: 7, normalized-entropy: 0.7455178428108284, [(2, 78), (3, 21)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3739963567301116] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3739963567301116, 0.2505655210575665] ***
*** starting iteration: 2; err: [Inf, 0.3739963567301116, 0.2505655210575665] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3739963567301116, 0.2505655210575665, 0.23424781922267768] ***
*** starting iteration: 3; err: [Inf, 0.3739963567301116, 0.2505655210575665, 0.23424781922267768] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3739963567301116, 0.2505655210575665, 0.23424781922267768, 0.22968180504118516] ***
*** finished computation of 3 references, err: [Inf, 0.3739963567301116, 0.2505655210575665, 0.23424781922267768, 0.22968180504118516] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [188, 41, 0]]
** centroid: 1, normalized-entropy: 0.6779708784692704, [(1, 188), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [226, 26, 0]]
** centroid: 2, normalized-entropy: 0.4789788196209449, [(1, 226), (2, 26)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 167, 18]]
** centroid: 3, normalized-entropy: 0.4603692071696725, [(2, 167), (3, 18)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3295879770025633] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3295879770025633, 0.2458742241692105] ***
*** starting iteration: 2; err: [Inf, 0.3295879770025633, 0.2458742241692105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3295879770025633, 0.2458742241692105, 0.23129747814681756] ***
*** starting iteration: 3; err: [Inf, 0.3295879770025633, 0.2458742241692105, 0.23129747814681756] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3295879770025633, 0.2458742241692105, 0.23129747814681756, 0.22948565453115008] ***
*** finished computation of 3 references, err: [Inf, 0.3295879770025633, 0.2458742241692105, 0.23129747814681756, 0.22948565453115008] ***
*** center 1: selecting labels [1] (freq >= 1) [from [214, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [89, 135, 18]]
** centroid: 2, normalized-entropy: 0.8071621797651908, [(1, 89), (2, 135), (3, 18)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [105, 103, 3]]
** centroid: 3, normalized-entropy: 0.6898116695026199, [(1, 105), (2, 103), (3, 3)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2969493421179981] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2969493421179981, 0.24223371442669872] ***
*** starting iteration: 2; err: [Inf, 0.2969493421179981, 0.24223371442669872] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2969493421179981, 0.24223371442669872, 0.23413490588780955] ***
*** starting iteration: 3; err: [Inf, 0.2969493421179981, 0.24223371442669872, 0.23413490588780955] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2969493421179981, 0.24223371442669872, 0.23413490588780955, 0.23216507606057527] ***
*** finished computation of 3 references, err: [Inf, 0.2969493421179981, 0.24223371442669872, 0.23413490588780955, 0.23216507606057527] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [238, 11, 0]]
** centroid: 1, normalized-entropy: 0.26112492213916205, [(1, 238), (2, 11)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 167, 21]]
** centroid: 2, normalized-entropy: 0.5050288372014635, [(2, 167), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [174, 56, 0]]
** centroid: 3, normalized-entropy: 0.8007768165404425, [(1, 174), (2, 56)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3889617678910695] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3889617678910695, 0.2508504863460646] ***
*** finished computation of 3 references, err: [Inf, 0.3889617678910695, 0.2508504863460646] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [240, 13, 0]]
** centroid: 1, normalized-entropy: 0.2922447237777938, [(1, 240), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [97, 33, 0]]
** centroid: 2, normalized-entropy: 0.8173174158670672, [(1, 97), (2, 33)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [77, 188, 18]]
** centroid: 3, normalized-entropy: 0.7291906306546736, [(1, 77), (2, 188), (3, 18)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3783774859274736] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3783774859274736, 0.26157420656938424] ***
*** finished computation of 3 references, err: [Inf, 0.3783774859274736, 0.26157420656938424] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [184, 67, 0]]
** centroid: 1, normalized-entropy: 0.837028113013875, [(1, 184), (2, 67)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [190, 67, 0]]
** centroid: 2, normalized-entropy: 0.8278014311255869, [(1, 190), (2, 67)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [34, 104, 21]]
** centroid: 3, normalized-entropy: 0.7963613472844582, [(1, 34), (2, 104), (3, 21)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37408299867002326] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37408299867002326, 0.24793184125541837] ***
*** finished computation of 3 references, err: [Inf, 0.37408299867002326, 0.24793184125541837] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 111, 21]]
** centroid: 1, normalized-entropy: 0.6321302781219708, [(2, 111), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [183, 65, 0]]
** centroid: 2, normalized-entropy: 0.8298939787222409, [(1, 183), (2, 65)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [229, 58, 0]]
** centroid: 3, normalized-entropy: 0.7260896263565263, [(1, 229), (2, 58)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2871458568266249] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2871458568266249, 0.23217360982279833] ***
*** finished computation of 3 references, err: [Inf, 0.2871458568266249, 0.23217360982279833] ***
*** center 1: selecting labels [1] (freq >= 2) [from [199, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [104, 75, 0]]
** centroid: 2, normalized-entropy: 0.9809826349521635, [(1, 104), (2, 75)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [111, 159, 18]]
** centroid: 3, normalized-entropy: 0.7907460112754984, [(1, 111), (2, 159), (3, 18)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2732013787458493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2732013787458493, 0.24288819057970257] ***
*** finished computation of 3 references, err: [Inf, 0.2732013787458493, 0.24288819057970257] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [242, 61, 0]]
** centroid: 1, normalized-entropy: 0.7245605147871821, [(1, 242), (2, 61)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 152, 21]]
** centroid: 2, normalized-entropy: 0.5333354650830889, [(2, 152), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [165, 25, 0]]
** centroid: 3, normalized-entropy: 0.5617526078313283, [(1, 165), (2, 25)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3003254282320368] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3003254282320368, 0.28235870714940275] ***
*** finished computation of 3 references, err: [Inf, 0.3003254282320368, 0.28235870714940275] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [277, 48, 0]]
** centroid: 1, normalized-entropy: 0.6040350462843073, [(1, 277), (2, 48)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [74, 107, 2]]
** centroid: 2, normalized-entropy: 0.6638089641824052, [(1, 74), (2, 107), (3, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [61, 79, 19]]
** centroid: 3, normalized-entropy: 0.8819688077112205, [(1, 61), (2, 79), (3, 19)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2836405993830804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2836405993830804, 0.22373531312980988] ***
*** finished computation of 7 references, err: [Inf, 0.2836405993830804, 0.22373531312980988] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 91, 18]]
** centroid: 1, normalized-entropy: 0.6464599001526788, [(2, 91), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [111, 1, 0]]
** centroid: 2, normalized-entropy: 0.07360348308562395, [(1, 111), (2, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [107, 108, 0]]
** centroid: 3, normalized-entropy: 0.9999843948053797, [(1, 107), (2, 108)]
*** center 4: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [35, 34, 0]]
** centroid: 7, normalized-entropy: 0.9998484829291058, [(1, 35), (2, 34)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3326393656468932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3326393656468932, 0.2393566547645845] ***
*** finished computation of 7 references, err: [Inf, 0.3326393656468932, 0.2393566547645845] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [70, 151, 21]]
** centroid: 1, normalized-entropy: 0.7875601785568185, [(1, 70), (2, 151), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 4, 0]]
** centroid: 2, normalized-entropy: 0.3912435636292556, [(1, 48), (2, 4)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [16, 37, 0]]
** centroid: 3, normalized-entropy: 0.8835850861052531, [(1, 16), (2, 37)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [17, 42, 0]]
** centroid: 4, normalized-entropy: 0.8663006754980497, [(1, 17), (2, 42)]
*** center 5: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [88, 4, 0]]
** centroid: 6, normalized-entropy: 0.2580186686648155, [(1, 88), (2, 4)]
*** center 7: selecting labels [1] (freq >= 1) [from [138, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2639180468974811] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2639180468974811, 0.20961326666000388] ***
*** finished computation of 7 references, err: [Inf, 0.2639180468974811, 0.20961326666000388] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 126, 21]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(2, 126), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [47, 40, 0]]
** centroid: 2, normalized-entropy: 0.9953251070631713, [(1, 47), (2, 40)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [64, 60, 0]]
** centroid: 3, normalized-entropy: 0.9992492479956566, [(1, 64), (2, 60)]
*** center 4: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [132, 8, 0]]
** centroid: 7, normalized-entropy: 0.3159971329784246, [(1, 132), (2, 8)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3163138873212308] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3163138873212308, 0.27366016504659624] ***
*** starting iteration: 2; err: [Inf, 0.3163138873212308, 0.27366016504659624] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3163138873212308, 0.27366016504659624, 0.24537826282903552] ***
*** starting iteration: 3; err: [Inf, 0.3163138873212308, 0.27366016504659624, 0.24537826282903552] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3163138873212308, 0.27366016504659624, 0.24537826282903552, 0.23587621777673606] ***
*** finished computation of 3 references, err: [Inf, 0.3163138873212308, 0.27366016504659624, 0.24537826282903552, 0.23587621777673606] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [40, 136, 18]]
** centroid: 1, normalized-entropy: 0.7237882097328863, [(1, 40), (2, 136), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [248, 2, 0]]
** centroid: 2, normalized-entropy: 0.06722154475830684, [(1, 248), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [126, 96, 0]]
** centroid: 3, normalized-entropy: 0.9867867202680318, [(1, 126), (2, 96)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.33807034588124285] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33807034588124285, 0.24309864150977384] ***
*** starting iteration: 2; err: [Inf, 0.33807034588124285, 0.24309864150977384] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33807034588124285, 0.24309864150977384, 0.23064120799705184] ***
*** starting iteration: 3; err: [Inf, 0.33807034588124285, 0.24309864150977384, 0.23064120799705184] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33807034588124285, 0.24309864150977384, 0.23064120799705184, 0.22805887049851545] ***
*** finished computation of 3 references, err: [Inf, 0.33807034588124285, 0.24309864150977384, 0.23064120799705184, 0.22805887049851545] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [121, 80, 0]]
** centroid: 1, normalized-entropy: 0.9697745802276108, [(1, 121), (2, 80)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [232, 2, 0]]
** centroid: 2, normalized-entropy: 0.07099894663640989, [(1, 232), (2, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [55, 156, 21]]
** centroid: 3, normalized-entropy: 0.7514465682157511, [(1, 55), (2, 156), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30889931180119246] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30889931180119246, 0.2692673807765456] ***
*** starting iteration: 2; err: [Inf, 0.30889931180119246, 0.2692673807765456] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30889931180119246, 0.2692673807765456, 0.2650740900875601] ***
*** starting iteration: 3; err: [Inf, 0.30889931180119246, 0.2692673807765456, 0.2650740900875601] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30889931180119246, 0.2692673807765456, 0.2650740900875601, 0.2501825815998018] ***
*** finished computation of 3 references, err: [Inf, 0.30889931180119246, 0.2692673807765456, 0.2650740900875601, 0.2501825815998018] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [69, 127, 11]]
** centroid: 1, normalized-entropy: 0.7481147740405879, [(1, 69), (2, 127), (3, 11)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [113, 107, 10]]
** centroid: 2, normalized-entropy: 0.7659658395249266, [(1, 113), (2, 107), (3, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [230, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2401536528046268] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2401536528046268, 0.23146342355394373] ***
*** starting iteration: 2; err: [Inf, 0.2401536528046268, 0.23146342355394373] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2401536528046268, 0.23146342355394373, 0.22908276641271538] ***
*** starting iteration: 3; err: [Inf, 0.2401536528046268, 0.23146342355394373, 0.22908276641271538] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2401536528046268, 0.23146342355394373, 0.22908276641271538, 0.22866600446749824] ***
*** finished computation of 3 references, err: [Inf, 0.2401536528046268, 0.23146342355394373, 0.22908276641271538, 0.22866600446749824] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [204, 21, 0]]
** centroid: 1, normalized-entropy: 0.44749925503686355, [(1, 204), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [210, 32, 0]]
** centroid: 2, normalized-entropy: 0.5635262178122566, [(1, 210), (2, 32)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 181, 18]]
** centroid: 3, normalized-entropy: 0.4379776075385141, [(2, 181), (3, 18)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3162221822613987] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3162221822613987, 0.23957886435566234] ***
*** starting iteration: 2; err: [Inf, 0.3162221822613987, 0.23957886435566234] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3162221822613987, 0.23957886435566234, 0.2352297791591224] ***
*** starting iteration: 3; err: [Inf, 0.3162221822613987, 0.23957886435566234, 0.2352297791591224] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3162221822613987, 0.23957886435566234, 0.2352297791591224, 0.23422279994030004] ***
*** starting iteration: 4; err: [Inf, 0.3162221822613987, 0.23957886435566234, 0.2352297791591224, 0.23422279994030004] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3162221822613987, 0.23957886435566234, 0.2352297791591224, 0.23422279994030004, 0.23392616730599455] ***
*** finished computation of 3 references, err: [Inf, 0.3162221822613987, 0.23957886435566234, 0.2352297791591224, 0.23422279994030004, 0.23392616730599455] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [165, 51, 0]]
** centroid: 1, normalized-entropy: 0.7885131605379784, [(1, 165), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [243, 26, 0]]
** centroid: 2, normalized-entropy: 0.45829927315932617, [(1, 243), (2, 26)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 161, 21]]
** centroid: 3, normalized-entropy: 0.5159469300074472, [(2, 161), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.28465394459307375] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28465394459307375, 0.2423803404841371] ***
*** starting iteration: 2; err: [Inf, 0.28465394459307375, 0.2423803404841371] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28465394459307375, 0.2423803404841371, 0.23509129476447266] ***
*** starting iteration: 3; err: [Inf, 0.28465394459307375, 0.2423803404841371, 0.23509129476447266] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28465394459307375, 0.2423803404841371, 0.23509129476447266, 0.23265142978840636] ***
*** starting iteration: 4; err: [Inf, 0.28465394459307375, 0.2423803404841371, 0.23509129476447266, 0.23265142978840636] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28465394459307375, 0.2423803404841371, 0.23509129476447266, 0.23265142978840636, 0.23182642798468672] ***
*** finished computation of 3 references, err: [Inf, 0.28465394459307375, 0.2423803404841371, 0.23509129476447266, 0.23265142978840636, 0.23182642798468672] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [245, 7, 0]]
** centroid: 1, normalized-entropy: 0.18312206830137262, [(1, 245), (2, 7)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 176, 21]]
** centroid: 2, normalized-entropy: 0.3362217647001197, [(1, 1), (2, 176), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [166, 51, 0]]
** centroid: 3, normalized-entropy: 0.786665342840167, [(1, 166), (2, 51)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4160006612765829] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4160006612765829, 0.24982992044787058] ***
*** finished computation of 3 references, err: [Inf, 0.4160006612765829, 0.24982992044787058] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [275, 64, 0]]
** centroid: 1, normalized-entropy: 0.6989345389083026, [(1, 275), (2, 64)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 148, 18]]
** centroid: 2, normalized-entropy: 0.4951734787020683, [(2, 148), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [139, 22, 0]]
** centroid: 3, normalized-entropy: 0.5753870351420202, [(1, 139), (2, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38420352690910425] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38420352690910425, 0.27209412288674706] ***
*** finished computation of 3 references, err: [Inf, 0.38420352690910425, 0.27209412288674706] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [155, 157, 21]]
** centroid: 1, normalized-entropy: 0.8053156869471344, [(1, 155), (2, 157), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [214, 59, 0]]
** centroid: 2, normalized-entropy: 0.7530140090436838, [(1, 214), (2, 59)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [39, 22, 0]]
** centroid: 3, normalized-entropy: 0.9432261548473416, [(1, 39), (2, 22)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36997644291112736] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36997644291112736, 0.2665178251021292] ***
*** finished computation of 3 references, err: [Inf, 0.36997644291112736, 0.2665178251021292] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [66, 138, 21]]
** centroid: 1, normalized-entropy: 0.8018576397508865, [(1, 66), (2, 138), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [131, 72, 0]]
** centroid: 2, normalized-entropy: 0.9381782161740805, [(1, 131), (2, 72)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [215, 24, 0]]
** centroid: 3, normalized-entropy: 0.47032052062074153, [(1, 215), (2, 24)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2038898282780874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2038898282780874, 0.16222462840462187] ***
*** starting iteration: 2; err: [Inf, 0.2038898282780874, 0.16222462840462187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2038898282780874, 0.16222462840462187, 0.1513888621031567] ***
*** starting iteration: 3; err: [Inf, 0.2038898282780874, 0.16222462840462187, 0.1513888621031567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2038898282780874, 0.16222462840462187, 0.1513888621031567, 0.14763832373840682] ***
*** starting iteration: 4; err: [Inf, 0.2038898282780874, 0.16222462840462187, 0.1513888621031567, 0.14763832373840682] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2038898282780874, 0.16222462840462187, 0.1513888621031567, 0.14763832373840682, 0.14618757313715894] ***
*** starting iteration: 5; err: [Inf, 0.2038898282780874, 0.16222462840462187, 0.1513888621031567, 0.14763832373840682, 0.14618757313715894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2038898282780874, 0.16222462840462187, 0.1513888621031567, 0.14763832373840682, 0.14618757313715894, 0.14521487819397258] ***
*** finished computation of 7 references, err: [Inf, 0.2038898282780874, 0.16222462840462187, 0.1513888621031567, 0.14763832373840682, 0.14618757313715894, 0.14521487819397258] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [26, 67, 0]]
** centroid: 1, normalized-entropy: 0.8548640967818041, [(1, 26), (2, 67)]
*** center 2: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [61, 36, 0]]
** centroid: 3, normalized-entropy: 0.9515388458648668, [(1, 61), (2, 36)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 66, 18]]
** centroid: 4, normalized-entropy: 0.7495952572594798, [(2, 66), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [3, 64, 0]]
** centroid: 5, normalized-entropy: 0.26377743669413856, [(1, 3), (2, 64)]
*** center 6: selecting labels [1] (freq >= 2) [from [120, 1, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24354489837602797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24354489837602797, 0.17790164267490693] ***
*** starting iteration: 2; err: [Inf, 0.24354489837602797, 0.17790164267490693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24354489837602797, 0.17790164267490693, 0.16111389141197482] ***
*** starting iteration: 3; err: [Inf, 0.24354489837602797, 0.17790164267490693, 0.16111389141197482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24354489837602797, 0.17790164267490693, 0.16111389141197482, 0.15492684549754668] ***
*** starting iteration: 4; err: [Inf, 0.24354489837602797, 0.17790164267490693, 0.16111389141197482, 0.15492684549754668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24354489837602797, 0.17790164267490693, 0.16111389141197482, 0.15492684549754668, 0.15067340618361072] ***
*** starting iteration: 5; err: [Inf, 0.24354489837602797, 0.17790164267490693, 0.16111389141197482, 0.15492684549754668, 0.15067340618361072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24354489837602797, 0.17790164267490693, 0.16111389141197482, 0.15492684549754668, 0.15067340618361072, 0.14873428720732343] ***
*** starting iteration: 6; err: [Inf, 0.24354489837602797, 0.17790164267490693, 0.16111389141197482, 0.15492684549754668, 0.15067340618361072, 0.14873428720732343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24354489837602797, 0.17790164267490693, 0.16111389141197482, 0.15492684549754668, 0.15067340618361072, 0.14873428720732343, 0.14685156568256522] ***
*** starting iteration: 7; err: [Inf, 0.24354489837602797, 0.17790164267490693, 0.16111389141197482, 0.15492684549754668, 0.15067340618361072, 0.14873428720732343, 0.14685156568256522] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24354489837602797, 0.17790164267490693, 0.16111389141197482, 0.15492684549754668, 0.15067340618361072, 0.14873428720732343, 0.14685156568256522, 0.14555648529505555] ***
*** starting iteration: 8; err: [Inf, 0.24354489837602797, 0.17790164267490693, 0.16111389141197482, 0.15492684549754668, 0.15067340618361072, 0.14873428720732343, 0.14685156568256522, 0.14555648529505555] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24354489837602797, 0.17790164267490693, 0.16111389141197482, 0.15492684549754668, 0.15067340618361072, 0.14873428720732343, 0.14685156568256522, 0.14555648529505555, 0.14476236746251314] ***
*** finished computation of 7 references, err: [Inf, 0.24354489837602797, 0.17790164267490693, 0.16111389141197482, 0.15492684549754668, 0.15067340618361072, 0.14873428720732343, 0.14685156568256522, 0.14555648529505555, 0.14476236746251314] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 80, 0]]
** centroid: 1, normalized-entropy: 0.2243269603450881, [(1, 3), (2, 80)]
*** center 2: selecting labels [1] (freq >= 2) [from [122, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [21, 86, 0]]
** centroid: 3, normalized-entropy: 0.7143881566559658, [(1, 21), (2, 86)]
*** center 4: selecting labels [1] (freq >= 2) [from [98, 1, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [97, 19, 0]]
** centroid: 6, normalized-entropy: 0.6433071292001625, [(1, 97), (2, 19)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 52, 21]]
** centroid: 7, normalized-entropy: 0.8656939941993219, [(2, 52), (3, 21)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1786138762229833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1786138762229833, 0.1511262541237487] ***
*** starting iteration: 2; err: [Inf, 0.1786138762229833, 0.1511262541237487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1786138762229833, 0.1511262541237487, 0.14583293329561312] ***
*** starting iteration: 3; err: [Inf, 0.1786138762229833, 0.1511262541237487, 0.14583293329561312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1786138762229833, 0.1511262541237487, 0.14583293329561312, 0.14439143305518728] ***
*** starting iteration: 4; err: [Inf, 0.1786138762229833, 0.1511262541237487, 0.14583293329561312, 0.14439143305518728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1786138762229833, 0.1511262541237487, 0.14583293329561312, 0.14439143305518728, 0.1435404168316226] ***
*** finished computation of 7 references, err: [Inf, 0.1786138762229833, 0.1511262541237487, 0.14583293329561312, 0.14439143305518728, 0.1435404168316226] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [98, 22, 0]]
** centroid: 1, normalized-entropy: 0.6873150928309273, [(1, 98), (2, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [99, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 44, 0]]
** centroid: 3, normalized-entropy: 0.9999089303498087, [(1, 45), (2, 44)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 82, 21]]
** centroid: 5, normalized-entropy: 0.7296274178915987, [(2, 82), (3, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 85, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9489909070747394, 0.9259768750786715, 0.9219938501375626, 0.9199978421535308, 0.9150018281754809, 0.9100028171884459, 0.886071700442958, 0.8859997722273171, 0.8640137143131156, 0.8620237003470536, 0.8370256484028941, 0.7789735843628058, 0.7760185335035635, 0.7429914944885004]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9489909070747394
finished with 15
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.1956306240736722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1956306240736722, 0.15287697861004654] ***
*** finished computation of 7 references, err: [Inf, 0.1956306240736722, 0.15287697861004654] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [52, 57, 0]]
** centroid: 1, normalized-entropy: 0.9984816077977791, [(1, 52), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 21, 0]]
** centroid: 2, normalized-entropy: 0.8812908992306927, [(1, 49), (2, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 95, 18]]
** centroid: 4, normalized-entropy: 0.6326131852700402, [(2, 95), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [48, 61, 0]]
** centroid: 5, normalized-entropy: 0.9897148052727835, [(1, 48), (2, 61)]
*** center 6: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1882781387380753] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1882781387380753, 0.15268101715838825] ***
*** finished computation of 7 references, err: [Inf, 0.1882781387380753, 0.15268101715838825] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [138, 6, 0]]
** centroid: 1, normalized-entropy: 0.24988229283318547, [(1, 138), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 8, 0]]
** centroid: 2, normalized-entropy: 0.52764232609436, [(1, 59), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 48, 21]]
** centroid: 3, normalized-entropy: 0.8865408928220899, [(2, 48), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 102, 0]]
** centroid: 5, normalized-entropy: 0.6887498056988564, [(1, 23), (2, 102)]
*** center 6: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [8, 74, 0]]
** centroid: 7, normalized-entropy: 0.4612160405139095, [(1, 8), (2, 74)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2031641458824411] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2031641458824411, 0.14664603994720835] ***
*** finished computation of 7 references, err: [Inf, 0.2031641458824411, 0.14664603994720835] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [97, 1, 0]]
** centroid: 1, normalized-entropy: 0.08214305133815322, [(1, 97), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [89, 14, 0]]
** centroid: 2, normalized-entropy: 0.5734593207286953, [(1, 89), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 59, 21]]
** centroid: 3, normalized-entropy: 0.8304955225035798, [(2, 59), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [41, 74, 0]]
** centroid: 5, normalized-entropy: 0.9397580401106037, [(1, 41), (2, 74)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 86, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9489909070747394, 0.9280058501615388, 0.9259768750786715, 0.9219938501375626, 0.9199978421535308, 0.9150018281754809, 0.9100028171884459, 0.886071700442958, 0.8859997722273171, 0.8640137143131156, 0.8620237003470536, 0.8370256484028941, 0.7789735843628058, 0.7760185335035635, 0.7429914944885004]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9489909070747394
finished with 16
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.24059097460952136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24059097460952136, 0.19847234279492748] ***
*** starting iteration: 2; err: [Inf, 0.24059097460952136, 0.19847234279492748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24059097460952136, 0.19847234279492748, 0.1910656616497259] ***
*** starting iteration: 3; err: [Inf, 0.24059097460952136, 0.19847234279492748, 0.1910656616497259] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24059097460952136, 0.19847234279492748, 0.1910656616497259, 0.18724627480156966] ***
*** starting iteration: 4; err: [Inf, 0.24059097460952136, 0.19847234279492748, 0.1910656616497259, 0.18724627480156966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24059097460952136, 0.19847234279492748, 0.1910656616497259, 0.18724627480156966, 0.1860435694545597] ***
*** starting iteration: 5; err: [Inf, 0.24059097460952136, 0.19847234279492748, 0.1910656616497259, 0.18724627480156966, 0.1860435694545597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24059097460952136, 0.19847234279492748, 0.1910656616497259, 0.18724627480156966, 0.1860435694545597, 0.1854700106699523] ***
*** finished computation of 7 references, err: [Inf, 0.24059097460952136, 0.19847234279492748, 0.1910656616497259, 0.18724627480156966, 0.1860435694545597, 0.1854700106699523] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [91, 2, 0]]
** centroid: 1, normalized-entropy: 0.14981136747274781, [(1, 91), (2, 2)]
*** center 2: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [37, 53, 0]]
** centroid: 3, normalized-entropy: 0.9770802227727781, [(1, 37), (2, 53)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [27, 68, 0]]
** centroid: 4, normalized-entropy: 0.8611247055579295, [(1, 27), (2, 68)]
*** center 5: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [77, 24, 0]]
** centroid: 6, normalized-entropy: 0.7910662980902586, [(1, 77), (2, 24)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 87, 18]]
** centroid: 7, normalized-entropy: 0.6609623351442084, [(2, 87), (3, 18)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2152990313251035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2152990313251035, 0.19464168734038653] ***
*** starting iteration: 2; err: [Inf, 0.2152990313251035, 0.19464168734038653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2152990313251035, 0.19464168734038653, 0.19004330684806497] ***
*** starting iteration: 3; err: [Inf, 0.2152990313251035, 0.19464168734038653, 0.19004330684806497] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2152990313251035, 0.19464168734038653, 0.19004330684806497, 0.188036920127181] ***
*** starting iteration: 4; err: [Inf, 0.2152990313251035, 0.19464168734038653, 0.19004330684806497, 0.188036920127181] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2152990313251035, 0.19464168734038653, 0.19004330684806497, 0.188036920127181, 0.18751320825831064] ***
*** finished computation of 7 references, err: [Inf, 0.2152990313251035, 0.19464168734038653, 0.19004330684806497, 0.188036920127181, 0.18751320825831064] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [55, 70, 0]]
** centroid: 1, normalized-entropy: 0.9895875212220558, [(1, 55), (2, 70)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [6, 79, 0]]
** centroid: 2, normalized-entropy: 0.3681150054280774, [(1, 6), (2, 79)]
*** center 3: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 68, 21]]
** centroid: 4, normalized-entropy: 0.7882487221644084, [(2, 68), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [96, 10, 0]]
** centroid: 5, normalized-entropy: 0.4507913883546652, [(1, 96), (2, 10)]
*** center 6: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [74, 11, 0]]
** centroid: 7, normalized-entropy: 0.5558227377664954, [(1, 74), (2, 11)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2525938236443647] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2525938236443647, 0.19742617663414938] ***
*** starting iteration: 2; err: [Inf, 0.2525938236443647, 0.19742617663414938] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2525938236443647, 0.19742617663414938, 0.19190223100057607] ***
*** starting iteration: 3; err: [Inf, 0.2525938236443647, 0.19742617663414938, 0.19190223100057607] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2525938236443647, 0.19742617663414938, 0.19190223100057607, 0.18992164519069524] ***
*** starting iteration: 4; err: [Inf, 0.2525938236443647, 0.19742617663414938, 0.19190223100057607, 0.18992164519069524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2525938236443647, 0.19742617663414938, 0.19190223100057607, 0.18992164519069524, 0.18861449663450514] ***
*** starting iteration: 5; err: [Inf, 0.2525938236443647, 0.19742617663414938, 0.19190223100057607, 0.18992164519069524, 0.18861449663450514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2525938236443647, 0.19742617663414938, 0.19190223100057607, 0.18992164519069524, 0.18861449663450514, 0.18793498550861448] ***
*** finished computation of 7 references, err: [Inf, 0.2525938236443647, 0.19742617663414938, 0.19190223100057607, 0.18992164519069524, 0.18861449663450514, 0.18793498550861448] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [105, 39, 0]]
** centroid: 1, normalized-entropy: 0.842657877202239, [(1, 105), (2, 39)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 83, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [118, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 32, 0]]
** centroid: 5, normalized-entropy: 0.9967916319816367, [(1, 28), (2, 32)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 80, 21]]
** centroid: 7, normalized-entropy: 0.7374895672137457, [(2, 80), (3, 21)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 16)
[0.9489909070747394, 0.9280058501615388, 0.9259768750786715, 0.9219938501375626, 0.9199978421535308, 0.9150018281754809, 0.9110367852882822, 0.9100028171884459, 0.886071700442958, 0.8859997722273171, 0.8640137143131156, 0.8620237003470536, 0.8370256484028941, 0.7789735843628058, 0.7760185335035635, 0.7429914944885004]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9489909070747394
finished with 16
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9489909070747394, 0.9280058501615388, 0.9259768750786715, 0.9219938501375626, 0.9199978421535308, 0.9150018281754809, 0.9110367852882822, 0.9100028171884459, 0.886071700442958, 0.8859997722273171, 0.8640137143131156, 0.8620237003470536, 0.8370256484028941, 0.7789735843628058, 0.7760185335035635, 0.7429914944885004]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9489909070747394
finished with 17
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.1979215417781638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1979215417781638, 0.16604155856296532] ***
*** finished computation of 7 references, err: [Inf, 0.1979215417781638, 0.16604155856296532] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [150, 38, 0]]
** centroid: 1, normalized-entropy: 0.7261630586710504, [(1, 150), (2, 38)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 98, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [154, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 67, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [60, 7, 0]]
** centroid: 5, normalized-entropy: 0.4830306801456181, [(1, 60), (2, 7)]
*** center 6: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 24, 18]]
** centroid: 7, normalized-entropy: 0.9852281360342514, [(2, 24), (3, 18)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17640241788982272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17640241788982272, 0.153569090810522] ***
*** finished computation of 7 references, err: [Inf, 0.17640241788982272, 0.153569090810522] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [54, 26, 0]]
** centroid: 1, normalized-entropy: 0.9097361225311661, [(1, 54), (2, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [74, 22, 0]]
** centroid: 3, normalized-entropy: 0.7765557854444601, [(1, 74), (2, 22)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 110, 21]]
** centroid: 4, normalized-entropy: 0.6350395330941944, [(2, 110), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [16, 61, 0]]
** centroid: 5, normalized-entropy: 0.7372413771710565, [(1, 16), (2, 61)]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [78, 19, 0]]
** centroid: 7, normalized-entropy: 0.7136036068604937, [(1, 78), (2, 19)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1993794598926635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1993794598926635, 0.15763333769175858] ***
*** finished computation of 7 references, err: [Inf, 0.1993794598926635, 0.15763333769175858] ***
*** center 1: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 89, 0]]
** centroid: 2, normalized-entropy: 0.9385167921574836, [(1, 49), (2, 89)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 82, 21]]
** centroid: 3, normalized-entropy: 0.7296274178915987, [(2, 82), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [85, 61, 0]]
** centroid: 6, normalized-entropy: 0.9804190303660398, [(1, 85), (2, 61)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [80, 2, 0]]
** centroid: 7, normalized-entropy: 0.16542703399626665, [(1, 80), (2, 2)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 17)
[0.9489909070747394, 0.9280058501615388, 0.9259768750786715, 0.9229978481475488, 0.9219938501375626, 0.9199978421535308, 0.9150018281754809, 0.9110367852882822, 0.9100028171884459, 0.886071700442958, 0.8859997722273171, 0.8640137143131156, 0.8620237003470536, 0.8370256484028941, 0.7789735843628058, 0.7760185335035635, 0.7429914944885004]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9489909070747394
finished with 17
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9489909070747394, 0.9280058501615388, 0.9259768750786715, 0.9229978481475488, 0.9219938501375626, 0.9199978421535308, 0.9150018281754809, 0.9110367852882822, 0.9100028171884459, 0.886071700442958, 0.8859997722273171, 0.8640137143131156, 0.8620237003470536, 0.8370256484028941, 0.7789735843628058, 0.7760185335035635, 0.7429914944885004]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9489909070747394
finished with 19
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.38009062337244415] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38009062337244415, 0.2326087606972917] ***
*** finished computation of 3 references, err: [Inf, 0.38009062337244415, 0.2326087606972917] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [68, 185, 18]]
** centroid: 1, normalized-entropy: 0.7169566687520823, [(1, 68), (2, 185), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [230, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [116, 49, 0]]
** centroid: 3, normalized-entropy: 0.8775550760855518, [(1, 116), (2, 49)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30947738331693714] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30947738331693714, 0.2478818479405976] ***
*** finished computation of 3 references, err: [Inf, 0.30947738331693714, 0.2478818479405976] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [145, 182, 21]]
** centroid: 1, normalized-entropy: 0.7948268617421759, [(1, 145), (2, 182), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [105, 56, 0]]
** centroid: 2, normalized-entropy: 0.9321115676166747, [(1, 105), (2, 56)]
*** center 3: selecting labels [1] (freq >= 1) [from [158, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33345122092767904] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33345122092767904, 0.23884994128085058] ***
*** finished computation of 3 references, err: [Inf, 0.33345122092767904, 0.23884994128085058] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [293, 32, 0]]
** centroid: 1, normalized-entropy: 0.4640997283905289, [(1, 293), (2, 32)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 149, 21]]
** centroid: 2, normalized-entropy: 0.3710236086166324, [(1, 1), (2, 149), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [118, 53, 0]]
** centroid: 3, normalized-entropy: 0.8931059422745128, [(1, 118), (2, 53)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4324571314035683] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4324571314035683, 0.29160020501819905] ***
*** finished computation of 3 references, err: [Inf, 0.4324571314035683, 0.29160020501819905] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [100, 162, 18]]
** centroid: 1, normalized-entropy: 0.7834779216625101, [(1, 100), (2, 162), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [107, 72, 0]]
** centroid: 2, normalized-entropy: 0.9722427736398475, [(1, 107), (2, 72)]
*** center 3: selecting labels [1] (freq >= 1) [from [207, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3975348217186631] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3975348217186631, 0.3255787493473944] ***
*** finished computation of 3 references, err: [Inf, 0.3975348217186631, 0.3255787493473944] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [142, 178, 21]]
** centroid: 1, normalized-entropy: 0.7971988310891425, [(1, 142), (2, 178), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [108, 60, 0]]
** centroid: 2, normalized-entropy: 0.940285958670631, [(1, 108), (2, 60)]
*** center 3: selecting labels [1] (freq >= 1) [from [158, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3824340585211496] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3824340585211496, 0.31291956693559575] ***
*** finished computation of 3 references, err: [Inf, 0.3824340585211496, 0.31291956693559575] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [295, 61, 0]]
** centroid: 1, normalized-entropy: 0.6607798771887261, [(1, 295), (2, 61)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [117, 45, 0]]
** centroid: 2, normalized-entropy: 0.8524051786494784, [(1, 117), (2, 45)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 128, 21]]
** centroid: 3, normalized-entropy: 0.5866942528222021, [(2, 128), (3, 21)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 19)
[0.9489909070747394, 0.9280058501615388, 0.9259768750786715, 0.9229978481475488, 0.9219938501375626, 0.9199978421535308, 0.9150018281754809, 0.9110367852882822, 0.9100028171884459, 0.886071700442958, 0.8859997722273171, 0.8640137143131156, 0.8620237003470536, 0.8370256484028941, 0.8069926213638788, 0.7920285555016093, 0.7789735843628058, 0.7760185335035635, 0.7429914944885004]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9489909070747394
finished with 20
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.3201726046796362] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3201726046796362, 0.29318512821648346] ***
*** starting iteration: 2; err: [Inf, 0.3201726046796362, 0.29318512821648346] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3201726046796362, 0.29318512821648346, 0.2899342302859456] ***
*** starting iteration: 3; err: [Inf, 0.3201726046796362, 0.29318512821648346, 0.2899342302859456] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3201726046796362, 0.29318512821648346, 0.2899342302859456, 0.28964081479029524] ***
*** finished computation of 3 references, err: [Inf, 0.3201726046796362, 0.29318512821648346, 0.2899342302859456, 0.28964081479029524] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [109, 82, 0]]
** centroid: 1, normalized-entropy: 0.9855369129605244, [(1, 109), (2, 82)]
*** center 2: selecting labels [1] (freq >= 1) [from [220, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [85, 152, 18]]
** centroid: 3, normalized-entropy: 0.7843774731818193, [(1, 85), (2, 152), (3, 18)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4683337870571969] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4683337870571969, 0.30136342455857784] ***
*** starting iteration: 2; err: [Inf, 0.4683337870571969, 0.30136342455857784] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4683337870571969, 0.30136342455857784, 0.2921070259963644] ***
*** starting iteration: 3; err: [Inf, 0.4683337870571969, 0.30136342455857784, 0.2921070259963644] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4683337870571969, 0.30136342455857784, 0.2921070259963644, 0.2892450090257571] ***
*** finished computation of 3 references, err: [Inf, 0.4683337870571969, 0.30136342455857784, 0.2921070259963644, 0.2892450090257571] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [245, 6, 0]]
** centroid: 1, normalized-entropy: 0.16283411148082497, [(1, 245), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [156, 56, 0]]
** centroid: 2, normalized-entropy: 0.8329458235361399, [(1, 156), (2, 56)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [7, 176, 21]]
** centroid: 3, normalized-entropy: 0.43430437593198, [(1, 7), (2, 176), (3, 21)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3897790067383777] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3897790067383777, 0.3458837377231406] ***
*** starting iteration: 2; err: [Inf, 0.3897790067383777, 0.3458837377231406] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3897790067383777, 0.3458837377231406, 0.3282501125593727] ***
*** starting iteration: 3; err: [Inf, 0.3897790067383777, 0.3458837377231406, 0.3282501125593727] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3897790067383777, 0.3458837377231406, 0.3282501125593727, 0.3251784339247305] ***
*** finished computation of 3 references, err: [Inf, 0.3897790067383777, 0.3458837377231406, 0.3282501125593727, 0.3251784339247305] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [249, 38, 0]]
** centroid: 1, normalized-entropy: 0.5639949873174702, [(1, 249), (2, 38)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [129, 75, 0]]
** centroid: 2, normalized-entropy: 0.9488482942421287, [(1, 129), (2, 75)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [34, 121, 21]]
** centroid: 3, normalized-entropy: 0.7544812524002628, [(1, 34), (2, 121), (3, 21)]
finished with 7 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 20)
[0.9489909070747394, 0.9280058501615388, 0.9259768750786715, 0.9229978481475488, 0.9219938501375626, 0.9199978421535308, 0.9150018281754809, 0.9110367852882822, 0.9100028171884459, 0.886071700442958, 0.8859997722273171, 0.8749617881354409, 0.8640137143131156, 0.8620237003470536, 0.8370256484028941, 0.8069926213638788, 0.7920285555016093, 0.7789735843628058, 0.7760185335035635, 0.7429914944885004]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9489909070747394
finished with 20
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.193536717023002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.193536717023002, 0.151147464459762] ***
*** starting iteration: 2; err: [Inf, 0.193536717023002, 0.151147464459762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.193536717023002, 0.151147464459762, 0.1471055683158338] ***
*** starting iteration: 3; err: [Inf, 0.193536717023002, 0.151147464459762, 0.1471055683158338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.193536717023002, 0.151147464459762, 0.1471055683158338, 0.14610198016371578] ***
*** starting iteration: 4; err: [Inf, 0.193536717023002, 0.151147464459762, 0.1471055683158338, 0.14610198016371578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.193536717023002, 0.151147464459762, 0.1471055683158338, 0.14610198016371578, 0.14573112007882447] ***
*** finished computation of 7 references, err: [Inf, 0.193536717023002, 0.151147464459762, 0.1471055683158338, 0.14610198016371578, 0.14573112007882447] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [2, 126, 0]]
** centroid: 1, normalized-entropy: 0.11611507530476962, [(1, 2), (2, 126)]
*** center 2: selecting labels [1] (freq >= 2) [from [164, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [90, 49, 0]]
** centroid: 3, normalized-entropy: 0.9362967487572058, [(1, 90), (2, 49)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [192, 3, 0]]
** centroid: 4, normalized-entropy: 0.11467550533614682, [(1, 192), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 81, 0]]
** centroid: 5, normalized-entropy: 0.9624127354629922, [(1, 51), (2, 81)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 94, 30]]
** centroid: 6, normalized-entropy: 0.7982441335646697, [(2, 94), (3, 30)]
*** center 7: selecting labels [1] (freq >= 2) [from [118, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19596794009022414] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19596794009022414, 0.152423445655033] ***
*** starting iteration: 2; err: [Inf, 0.19596794009022414, 0.152423445655033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19596794009022414, 0.152423445655033, 0.147063047895208] ***
*** starting iteration: 3; err: [Inf, 0.19596794009022414, 0.152423445655033, 0.147063047895208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19596794009022414, 0.152423445655033, 0.147063047895208, 0.1452303096409887] ***
*** starting iteration: 4; err: [Inf, 0.19596794009022414, 0.152423445655033, 0.147063047895208, 0.1452303096409887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19596794009022414, 0.152423445655033, 0.147063047895208, 0.1452303096409887, 0.1446903918851167] ***
*** finished computation of 7 references, err: [Inf, 0.19596794009022414, 0.152423445655033, 0.147063047895208, 0.1452303096409887, 0.1446903918851167] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [17, 48, 0]]
** centroid: 1, normalized-entropy: 0.829059069399666, [(1, 17), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [74, 12, 0]]
** centroid: 2, normalized-entropy: 0.5830194167347007, [(1, 74), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 47, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [59, 17, 0]]
** centroid: 5, normalized-entropy: 0.7668379316856329, [(1, 59), (2, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 40, 14]]
** centroid: 7, normalized-entropy: 0.8256265261578954, [(2, 40), (3, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20668906354438513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20668906354438513, 0.15161923632398247] ***
*** starting iteration: 2; err: [Inf, 0.20668906354438513, 0.15161923632398247] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20668906354438513, 0.15161923632398247, 0.14700316491536797] ***
*** starting iteration: 3; err: [Inf, 0.20668906354438513, 0.15161923632398247, 0.14700316491536797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20668906354438513, 0.15161923632398247, 0.14700316491536797, 0.14639517250098288] ***
*** finished computation of 7 references, err: [Inf, 0.20668906354438513, 0.15161923632398247, 0.14700316491536797, 0.14639517250098288] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 60, 18]]
** centroid: 1, normalized-entropy: 0.7793498372920851, [(2, 60), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 2, 0]]
** centroid: 3, normalized-entropy: 0.21357981533827744, [(1, 57), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [77, 16, 0]]
** centroid: 4, normalized-entropy: 0.6623570516079519, [(1, 77), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 25, 0]]
** centroid: 5, normalized-entropy: 0.9488482942421287, [(1, 43), (2, 25)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 64, 0]]
** centroid: 6, normalized-entropy: 0.26377743669413856, [(1, 3), (2, 64)]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2017448318665847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2017448318665847, 0.15214477655570954] ***
*** starting iteration: 2; err: [Inf, 0.2017448318665847, 0.15214477655570954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2017448318665847, 0.15214477655570954, 0.1462945131585002] ***
*** starting iteration: 3; err: [Inf, 0.2017448318665847, 0.15214477655570954, 0.1462945131585002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2017448318665847, 0.15214477655570954, 0.1462945131585002, 0.14389110667817295] ***
*** starting iteration: 4; err: [Inf, 0.2017448318665847, 0.15214477655570954, 0.1462945131585002, 0.14389110667817295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2017448318665847, 0.15214477655570954, 0.1462945131585002, 0.14389110667817295, 0.1427757777310908] ***
*** starting iteration: 5; err: [Inf, 0.2017448318665847, 0.15214477655570954, 0.1462945131585002, 0.14389110667817295, 0.1427757777310908] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2017448318665847, 0.15214477655570954, 0.1462945131585002, 0.14389110667817295, 0.1427757777310908, 0.14242074613273142] ***
*** finished computation of 7 references, err: [Inf, 0.2017448318665847, 0.15214477655570954, 0.1462945131585002, 0.14389110667817295, 0.1427757777310908, 0.14242074613273142] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 65, 0]]
** centroid: 1, normalized-entropy: 0.260862909647207, [(1, 3), (2, 65)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 4, 0]]
** centroid: 2, normalized-entropy: 0.32275695889739825, [(1, 64), (2, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 43, 19]]
** centroid: 4, normalized-entropy: 0.8890349038123858, [(2, 43), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [12, 67, 0]]
** centroid: 5, normalized-entropy: 0.6145715612236268, [(1, 12), (2, 67)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [78, 2, 0]]
** centroid: 6, normalized-entropy: 0.1686609314966701, [(1, 78), (2, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19636599189043044] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19636599189043044, 0.1529905110700056] ***
*** starting iteration: 2; err: [Inf, 0.19636599189043044, 0.1529905110700056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19636599189043044, 0.1529905110700056, 0.14704762238264085] ***
*** starting iteration: 3; err: [Inf, 0.19636599189043044, 0.1529905110700056, 0.14704762238264085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19636599189043044, 0.1529905110700056, 0.14704762238264085, 0.14465958239417523] ***
*** starting iteration: 4; err: [Inf, 0.19636599189043044, 0.1529905110700056, 0.14704762238264085, 0.14465958239417523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19636599189043044, 0.1529905110700056, 0.14704762238264085, 0.14465958239417523, 0.14276860225596466] ***
*** starting iteration: 5; err: [Inf, 0.19636599189043044, 0.1529905110700056, 0.14704762238264085, 0.14465958239417523, 0.14276860225596466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19636599189043044, 0.1529905110700056, 0.14704762238264085, 0.14465958239417523, 0.14276860225596466, 0.141415553400293] ***
*** starting iteration: 6; err: [Inf, 0.19636599189043044, 0.1529905110700056, 0.14704762238264085, 0.14465958239417523, 0.14276860225596466, 0.141415553400293] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19636599189043044, 0.1529905110700056, 0.14704762238264085, 0.14465958239417523, 0.14276860225596466, 0.141415553400293, 0.14060228024143726] ***
*** finished computation of 7 references, err: [Inf, 0.19636599189043044, 0.1529905110700056, 0.14704762238264085, 0.14465958239417523, 0.14276860225596466, 0.141415553400293, 0.14060228024143726] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [60, 7, 0]]
** centroid: 1, normalized-entropy: 0.4830306801456181, [(1, 60), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [69, 16, 0]]
** centroid: 2, normalized-entropy: 0.6977652006354232, [(1, 69), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 53, 13]]
** centroid: 4, normalized-entropy: 0.7158259310602146, [(2, 53), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [27, 42, 0]]
** centroid: 5, normalized-entropy: 0.9656361333706099, [(1, 27), (2, 42)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 57, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18905381228402257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18905381228402257, 0.14969681917130948] ***
*** starting iteration: 2; err: [Inf, 0.18905381228402257, 0.14969681917130948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18905381228402257, 0.14969681917130948, 0.14415298570506274] ***
*** starting iteration: 3; err: [Inf, 0.18905381228402257, 0.14969681917130948, 0.14415298570506274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18905381228402257, 0.14969681917130948, 0.14415298570506274, 0.1425897082928568] ***
*** starting iteration: 4; err: [Inf, 0.18905381228402257, 0.14969681917130948, 0.14415298570506274, 0.1425897082928568] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18905381228402257, 0.14969681917130948, 0.14415298570506274, 0.1425897082928568, 0.14203074600361287] ***
*** finished computation of 7 references, err: [Inf, 0.18905381228402257, 0.14969681917130948, 0.14415298570506274, 0.1425897082928568, 0.14203074600361287] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 32, 0]]
** centroid: 1, normalized-entropy: 0.9252253278054431, [(1, 62), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 11, 0]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(1, 55), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 43, 12]]
** centroid: 4, normalized-entropy: 0.7568336324184036, [(2, 43), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [12, 75, 0]]
** centroid: 5, normalized-entropy: 0.5787946246321198, [(1, 12), (2, 75)]
*** center 6: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20130983233451843] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20130983233451843, 0.15536379233375192] ***
*** starting iteration: 2; err: [Inf, 0.20130983233451843, 0.15536379233375192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20130983233451843, 0.15536379233375192, 0.15080742994137109] ***
*** starting iteration: 3; err: [Inf, 0.20130983233451843, 0.15536379233375192, 0.15080742994137109] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20130983233451843, 0.15536379233375192, 0.15080742994137109, 0.14957855139765888] ***
*** starting iteration: 4; err: [Inf, 0.20130983233451843, 0.15536379233375192, 0.15080742994137109, 0.14957855139765888] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20130983233451843, 0.15536379233375192, 0.15080742994137109, 0.14957855139765888, 0.14858659690339118] ***
*** finished computation of 7 references, err: [Inf, 0.20130983233451843, 0.15536379233375192, 0.15080742994137109, 0.14957855139765888, 0.14858659690339118] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [4, 58, 0]]
** centroid: 1, normalized-entropy: 0.3451173149449528, [(1, 4), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 16, 0]]
** centroid: 2, normalized-entropy: 0.7586638628883696, [(1, 57), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 78, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [70, 2, 0]]
** centroid: 6, normalized-entropy: 0.18312206830137262, [(1, 70), (2, 2)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 37, 20]]
** centroid: 7, normalized-entropy: 0.9348490242345946, [(2, 37), (3, 20)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18850813615694642] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18850813615694642, 0.15007777773216366] ***
*** starting iteration: 2; err: [Inf, 0.18850813615694642, 0.15007777773216366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18850813615694642, 0.15007777773216366, 0.14549143834039568] ***
*** starting iteration: 3; err: [Inf, 0.18850813615694642, 0.15007777773216366, 0.14549143834039568] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18850813615694642, 0.15007777773216366, 0.14549143834039568, 0.14365201073884964] ***
*** starting iteration: 4; err: [Inf, 0.18850813615694642, 0.15007777773216366, 0.14549143834039568, 0.14365201073884964] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18850813615694642, 0.15007777773216366, 0.14549143834039568, 0.14365201073884964, 0.14326836930774153] ***
*** finished computation of 7 references, err: [Inf, 0.18850813615694642, 0.15007777773216366, 0.14549143834039568, 0.14365201073884964, 0.14326836930774153] ***
*** center 1: selecting labels [1] (freq >= 2) [from [75, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 5, 0]]
** centroid: 2, normalized-entropy: 0.3912435636292556, [(1, 60), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 35, 18]]
** centroid: 3, normalized-entropy: 0.9244571409964927, [(2, 35), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 63, 0]]
** centroid: 5, normalized-entropy: 0.6064481901491525, [(1, 11), (2, 63)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 71, 0]]
** centroid: 6, normalized-entropy: 0.4356133734874324, [(1, 7), (2, 71)]
*** center 7: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1840716514121741] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1840716514121741, 0.14988860889896752] ***
*** starting iteration: 2; err: [Inf, 0.1840716514121741, 0.14988860889896752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1840716514121741, 0.14988860889896752, 0.1477647899761796] ***
*** starting iteration: 3; err: [Inf, 0.1840716514121741, 0.14988860889896752, 0.1477647899761796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1840716514121741, 0.14988860889896752, 0.1477647899761796, 0.1469406848549843] ***
*** finished computation of 7 references, err: [Inf, 0.1840716514121741, 0.14988860889896752, 0.1477647899761796, 0.1469406848549843] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [83, 27, 0]]
** centroid: 1, normalized-entropy: 0.803993937522765, [(1, 83), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 6, 0]]
** centroid: 2, normalized-entropy: 0.4912373418243334, [(1, 50), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 30, 19]]
** centroid: 3, normalized-entropy: 0.9633355456726842, [(2, 30), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 59, 0]]
** centroid: 5, normalized-entropy: 0.48791799258948565, [(1, 7), (2, 59)]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1870786455757916] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1870786455757916, 0.15485097911395132] ***
*** starting iteration: 2; err: [Inf, 0.1870786455757916, 0.15485097911395132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1870786455757916, 0.15485097911395132, 0.1498913098615594] ***
*** starting iteration: 3; err: [Inf, 0.1870786455757916, 0.15485097911395132, 0.1498913098615594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1870786455757916, 0.15485097911395132, 0.1498913098615594, 0.14862984621711076] ***
*** starting iteration: 4; err: [Inf, 0.1870786455757916, 0.15485097911395132, 0.1498913098615594, 0.14862984621711076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1870786455757916, 0.15485097911395132, 0.1498913098615594, 0.14862984621711076, 0.14757980175316335] ***
*** starting iteration: 5; err: [Inf, 0.1870786455757916, 0.15485097911395132, 0.1498913098615594, 0.14862984621711076, 0.14757980175316335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1870786455757916, 0.15485097911395132, 0.1498913098615594, 0.14862984621711076, 0.14757980175316335, 0.14685163897648454] ***
*** finished computation of 7 references, err: [Inf, 0.1870786455757916, 0.15485097911395132, 0.1498913098615594, 0.14862984621711076, 0.14757980175316335, 0.14685163897648454] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [83, 11, 0]]
** centroid: 1, normalized-entropy: 0.5207375686265202, [(1, 83), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 9, 0]]
** centroid: 2, normalized-entropy: 0.5975977764379984, [(1, 53), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 57, 18]]
** centroid: 3, normalized-entropy: 0.7950402793845225, [(2, 57), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [3, 66, 0]]
** centroid: 5, normalized-entropy: 0.2580186686648155, [(1, 3), (2, 66)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [40, 31, 0]]
** centroid: 6, normalized-entropy: 0.9883779727795042, [(1, 40), (2, 31)]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1948166626347229] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1948166626347229, 0.15296681802440434] ***
*** starting iteration: 2; err: [Inf, 0.1948166626347229, 0.15296681802440434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1948166626347229, 0.15296681802440434, 0.1471128975264728] ***
*** starting iteration: 3; err: [Inf, 0.1948166626347229, 0.15296681802440434, 0.1471128975264728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1948166626347229, 0.15296681802440434, 0.1471128975264728, 0.14546568199060858] ***
*** starting iteration: 4; err: [Inf, 0.1948166626347229, 0.15296681802440434, 0.1471128975264728, 0.14546568199060858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1948166626347229, 0.15296681802440434, 0.1471128975264728, 0.14546568199060858, 0.1447324167471379] ***
*** finished computation of 7 references, err: [Inf, 0.1948166626347229, 0.15296681802440434, 0.1471128975264728, 0.14546568199060858, 0.1447324167471379] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 56, 0]]
** centroid: 1, normalized-entropy: 0.45868581620054033, [(1, 6), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 9, 0]]
** centroid: 2, normalized-entropy: 0.5387379148665815, [(1, 64), (2, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 60, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 12, 0]]
** centroid: 5, normalized-entropy: 0.634309554640566, [(1, 63), (2, 12)]
*** center 6: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 54, 13]]
** centroid: 7, normalized-entropy: 0.709825885194168, [(2, 54), (3, 13)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20080728568695486] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20080728568695486, 0.15278021553112195] ***
*** starting iteration: 2; err: [Inf, 0.20080728568695486, 0.15278021553112195] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20080728568695486, 0.15278021553112195, 0.14667362226359545] ***
*** starting iteration: 3; err: [Inf, 0.20080728568695486, 0.15278021553112195, 0.14667362226359545] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20080728568695486, 0.15278021553112195, 0.14667362226359545, 0.1450988055020571] ***
*** starting iteration: 4; err: [Inf, 0.20080728568695486, 0.15278021553112195, 0.14667362226359545, 0.1450988055020571] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20080728568695486, 0.15278021553112195, 0.14667362226359545, 0.1450988055020571, 0.14399221225176007] ***
*** starting iteration: 5; err: [Inf, 0.20080728568695486, 0.15278021553112195, 0.14667362226359545, 0.1450988055020571, 0.14399221225176007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20080728568695486, 0.15278021553112195, 0.14667362226359545, 0.1450988055020571, 0.14399221225176007, 0.1436415683068335] ***
*** finished computation of 7 references, err: [Inf, 0.20080728568695486, 0.15278021553112195, 0.14667362226359545, 0.1450988055020571, 0.14399221225176007, 0.1436415683068335] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [74, 21, 0]]
** centroid: 3, normalized-entropy: 0.762084924805724, [(1, 74), (2, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [35, 25, 0]]
** centroid: 5, normalized-entropy: 0.9798687566511527, [(1, 35), (2, 25)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 61, 17]]
** centroid: 6, normalized-entropy: 0.7564041945982506, [(2, 61), (3, 17)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [50, 5, 0]]
** centroid: 7, normalized-entropy: 0.43949698692151346, [(1, 50), (2, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1900966053120792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1900966053120792, 0.1533556006019935] ***
*** starting iteration: 2; err: [Inf, 0.1900966053120792, 0.1533556006019935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1900966053120792, 0.1533556006019935, 0.1491939583849162] ***
*** starting iteration: 3; err: [Inf, 0.1900966053120792, 0.1533556006019935, 0.1491939583849162] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1900966053120792, 0.1533556006019935, 0.1491939583849162, 0.14769504185393453] ***
*** starting iteration: 4; err: [Inf, 0.1900966053120792, 0.1533556006019935, 0.1491939583849162, 0.14769504185393453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1900966053120792, 0.1533556006019935, 0.1491939583849162, 0.14769504185393453, 0.14700402034446597] ***
*** finished computation of 7 references, err: [Inf, 0.1900966053120792, 0.1533556006019935, 0.1491939583849162, 0.14769504185393453, 0.14700402034446597] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [97, 4, 0]]
** centroid: 1, normalized-entropy: 0.24047340659188013, [(1, 97), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 11, 0]]
** centroid: 2, normalized-entropy: 0.6619760641115651, [(1, 53), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 28, 12]]
** centroid: 3, normalized-entropy: 0.8812908992306927, [(2, 28), (3, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 74, 0]]
** centroid: 5, normalized-entropy: 0.5266170655714281, [(1, 10), (2, 74)]
*** center 6: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 60, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18041240535117686] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18041240535117686, 0.14800072564650327] ***
*** starting iteration: 2; err: [Inf, 0.18041240535117686, 0.14800072564650327] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18041240535117686, 0.14800072564650327, 0.14517959251347928] ***
*** starting iteration: 3; err: [Inf, 0.18041240535117686, 0.14800072564650327, 0.14517959251347928] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18041240535117686, 0.14800072564650327, 0.14517959251347928, 0.1445095882155001] ***
*** finished computation of 7 references, err: [Inf, 0.18041240535117686, 0.14800072564650327, 0.14517959251347928, 0.1445095882155001] ***
*** center 1: selecting labels [1] (freq >= 2) [from [82, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 11, 0]]
** centroid: 2, normalized-entropy: 0.6385146263620961, [(1, 57), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 40, 20]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 40), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 71, 0]]
** centroid: 5, normalized-entropy: 0.7892712724536985, [(1, 22), (2, 71)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18825378111563623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18825378111563623, 0.14791046800930052] ***
*** starting iteration: 2; err: [Inf, 0.18825378111563623, 0.14791046800930052] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18825378111563623, 0.14791046800930052, 0.144581715724431] ***
*** starting iteration: 3; err: [Inf, 0.18825378111563623, 0.14791046800930052, 0.144581715724431] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18825378111563623, 0.14791046800930052, 0.144581715724431, 0.143907041978091] ***
*** finished computation of 7 references, err: [Inf, 0.18825378111563623, 0.14791046800930052, 0.144581715724431, 0.143907041978091] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 35, 15]]
** centroid: 2, normalized-entropy: 0.8812908992306927, [(2, 35), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 24, 0]]
** centroid: 3, normalized-entropy: 0.9366673818775627, [(1, 44), (2, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [90, 6, 0]]
** centroid: 4, normalized-entropy: 0.3372900666170139, [(1, 90), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 41, 0]]
** centroid: 5, normalized-entropy: 0.9333572600179806, [(1, 22), (2, 41)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 68, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1880316020157188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1880316020157188, 0.1467662488296628] ***
*** starting iteration: 2; err: [Inf, 0.1880316020157188, 0.1467662488296628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1880316020157188, 0.1467662488296628, 0.14405623445287347] ***
*** starting iteration: 3; err: [Inf, 0.1880316020157188, 0.1467662488296628, 0.14405623445287347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1880316020157188, 0.1467662488296628, 0.14405623445287347, 0.14324104560352863] ***
*** finished computation of 7 references, err: [Inf, 0.1880316020157188, 0.1467662488296628, 0.14405623445287347, 0.14324104560352863] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 68, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 16, 0]]
** centroid: 2, normalized-entropy: 0.7930490047779772, [(1, 51), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [34, 28, 0]]
** centroid: 4, normalized-entropy: 0.9932338197397066, [(1, 34), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [94, 6, 0]]
** centroid: 5, normalized-entropy: 0.3274449191544762, [(1, 94), (2, 6)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 57, 14]]
** centroid: 6, normalized-entropy: 0.7162583911075451, [(2, 57), (3, 14)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1886631164215505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1886631164215505, 0.14929162734374404] ***
*** starting iteration: 2; err: [Inf, 0.1886631164215505, 0.14929162734374404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1886631164215505, 0.14929162734374404, 0.14285596338659526] ***
*** starting iteration: 3; err: [Inf, 0.1886631164215505, 0.14929162734374404, 0.14285596338659526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1886631164215505, 0.14929162734374404, 0.14285596338659526, 0.14105830612033607] ***
*** starting iteration: 4; err: [Inf, 0.1886631164215505, 0.14929162734374404, 0.14285596338659526, 0.14105830612033607] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1886631164215505, 0.14929162734374404, 0.14285596338659526, 0.14105830612033607, 0.1407340940516442] ***
*** finished computation of 7 references, err: [Inf, 0.1886631164215505, 0.14929162734374404, 0.14285596338659526, 0.14105830612033607, 0.1407340940516442] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 69, 1]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 17, 0]]
** centroid: 2, normalized-entropy: 0.7412466905234424, [(1, 64), (2, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 60, 11]]
** centroid: 4, normalized-entropy: 0.6220403090607189, [(2, 60), (3, 11)]
*** center 5: selecting labels [1] (freq >= 2) [from [78, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [63, 12, 0]]
** centroid: 6, normalized-entropy: 0.634309554640566, [(1, 63), (2, 12)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [47, 7, 0]]
** centroid: 7, normalized-entropy: 0.5564215672884282, [(1, 47), (2, 7)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20291086768731476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20291086768731476, 0.15350289909914136] ***
*** starting iteration: 2; err: [Inf, 0.20291086768731476, 0.15350289909914136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20291086768731476, 0.15350289909914136, 0.14679041444137692] ***
*** starting iteration: 3; err: [Inf, 0.20291086768731476, 0.15350289909914136, 0.14679041444137692] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20291086768731476, 0.15350289909914136, 0.14679041444137692, 0.1456437072623521] ***
*** starting iteration: 4; err: [Inf, 0.20291086768731476, 0.15350289909914136, 0.14679041444137692, 0.1456437072623521] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20291086768731476, 0.15350289909914136, 0.14679041444137692, 0.1456437072623521, 0.14487475796230137] ***
*** finished computation of 7 references, err: [Inf, 0.20291086768731476, 0.15350289909914136, 0.14679041444137692, 0.1456437072623521, 0.14487475796230137] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [11, 58, 0]]
** centroid: 1, normalized-entropy: 0.6329208984823799, [(1, 11), (2, 58)]
*** center 2: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [41, 35, 0]]
** centroid: 3, normalized-entropy: 0.9954993847275952, [(1, 41), (2, 35)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [52, 25, 0]]
** centroid: 4, normalized-entropy: 0.9093934226727598, [(1, 52), (2, 25)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 63, 18]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(2, 63), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [58, 2, 0]]
** centroid: 6, normalized-entropy: 0.2108423003185322, [(1, 58), (2, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18563113803509623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18563113803509623, 0.14942180236103014] ***
*** starting iteration: 2; err: [Inf, 0.18563113803509623, 0.14942180236103014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18563113803509623, 0.14942180236103014, 0.14519954372104257] ***
*** starting iteration: 3; err: [Inf, 0.18563113803509623, 0.14942180236103014, 0.14519954372104257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18563113803509623, 0.14942180236103014, 0.14519954372104257, 0.1442094089630991] ***
*** finished computation of 7 references, err: [Inf, 0.18563113803509623, 0.14942180236103014, 0.14519954372104257, 0.1442094089630991] ***
*** center 1: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 44, 11]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 44), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [56, 13, 0]]
** centroid: 3, normalized-entropy: 0.698124573139618, [(1, 56), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [6, 64, 0]]
** centroid: 4, normalized-entropy: 0.4220005168831531, [(1, 6), (2, 64)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 61, 0]]
** centroid: 5, normalized-entropy: 0.43497348007474274, [(1, 6), (2, 61)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18542541611380875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18542541611380875, 0.14606463552173227] ***
*** starting iteration: 2; err: [Inf, 0.18542541611380875, 0.14606463552173227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18542541611380875, 0.14606463552173227, 0.14173052598163485] ***
*** starting iteration: 3; err: [Inf, 0.18542541611380875, 0.14606463552173227, 0.14173052598163485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18542541611380875, 0.14606463552173227, 0.14173052598163485, 0.14069723973423243] ***
*** starting iteration: 4; err: [Inf, 0.18542541611380875, 0.14606463552173227, 0.14173052598163485, 0.14069723973423243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18542541611380875, 0.14606463552173227, 0.14173052598163485, 0.14069723973423243, 0.14016482420638204] ***
*** finished computation of 7 references, err: [Inf, 0.18542541611380875, 0.14606463552173227, 0.14173052598163485, 0.14069723973423243, 0.14016482420638204] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [78, 11, 0]]
** centroid: 1, normalized-entropy: 0.5396084773004918, [(1, 78), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 7, 0]]
** centroid: 2, normalized-entropy: 0.460127886147135, [(1, 65), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 37, 14]]
** centroid: 3, normalized-entropy: 0.8478617451660525, [(2, 37), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 68, 0]]
** centroid: 5, normalized-entropy: 0.635489638182683, [(1, 13), (2, 68)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 58, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1967094532623887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1967094532623887, 0.1495604728637263] ***
*** starting iteration: 2; err: [Inf, 0.1967094532623887, 0.1495604728637263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1967094532623887, 0.1495604728637263, 0.14454236982762814] ***
*** starting iteration: 3; err: [Inf, 0.1967094532623887, 0.1495604728637263, 0.14454236982762814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1967094532623887, 0.1495604728637263, 0.14454236982762814, 0.14340612673386932] ***
*** starting iteration: 4; err: [Inf, 0.1967094532623887, 0.1495604728637263, 0.14454236982762814, 0.14340612673386932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1967094532623887, 0.1495604728637263, 0.14454236982762814, 0.14340612673386932, 0.14313166319392623] ***
*** finished computation of 7 references, err: [Inf, 0.1967094532623887, 0.1495604728637263, 0.14454236982762814, 0.14340612673386932, 0.14313166319392623] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [79, 5, 0]]
** centroid: 1, normalized-entropy: 0.3255517134879513, [(1, 79), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [45, 8, 0]]
** centroid: 2, normalized-entropy: 0.612196127490834, [(1, 45), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 60, 15]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 60), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 36, 0]]
** centroid: 5, normalized-entropy: 0.9830605548016024, [(1, 49), (2, 36)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 65, 0]]
** centroid: 6, normalized-entropy: 0.5340042729285396, [(1, 9), (2, 65)]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2023698664829135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2023698664829135, 0.1529813605491072] ***
*** starting iteration: 2; err: [Inf, 0.2023698664829135, 0.1529813605491072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2023698664829135, 0.1529813605491072, 0.14682993021048604] ***
*** starting iteration: 3; err: [Inf, 0.2023698664829135, 0.1529813605491072, 0.14682993021048604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2023698664829135, 0.1529813605491072, 0.14682993021048604, 0.14431387432967313] ***
*** starting iteration: 4; err: [Inf, 0.2023698664829135, 0.1529813605491072, 0.14682993021048604, 0.14431387432967313] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2023698664829135, 0.1529813605491072, 0.14682993021048604, 0.14431387432967313, 0.14260009278915822] ***
*** starting iteration: 5; err: [Inf, 0.2023698664829135, 0.1529813605491072, 0.14682993021048604, 0.14431387432967313, 0.14260009278915822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2023698664829135, 0.1529813605491072, 0.14682993021048604, 0.14431387432967313, 0.14260009278915822, 0.14184283238183706] ***
*** finished computation of 7 references, err: [Inf, 0.2023698664829135, 0.1529813605491072, 0.14682993021048604, 0.14431387432967313, 0.14260009278915822, 0.14184283238183706] ***
*** center 1: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 50, 15]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(2, 50), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [12, 70, 0]]
** centroid: 5, normalized-entropy: 0.6006085754131871, [(1, 12), (2, 70)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [15, 58, 0]]
** centroid: 6, normalized-entropy: 0.7327525499549903, [(1, 15), (2, 58)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [61, 5, 0]]
** centroid: 7, normalized-entropy: 0.38705142139219795, [(1, 61), (2, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20419528779760004] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20419528779760004, 0.15136720808036624] ***
*** starting iteration: 2; err: [Inf, 0.20419528779760004, 0.15136720808036624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20419528779760004, 0.15136720808036624, 0.14647751521319152] ***
*** starting iteration: 3; err: [Inf, 0.20419528779760004, 0.15136720808036624, 0.14647751521319152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20419528779760004, 0.15136720808036624, 0.14647751521319152, 0.14603146334271877] ***
*** finished computation of 7 references, err: [Inf, 0.20419528779760004, 0.15136720808036624, 0.14647751521319152, 0.14603146334271877] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [68, 11, 0]]
** centroid: 1, normalized-entropy: 0.5822463050121238, [(1, 68), (2, 11)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 28, 20]]
** centroid: 2, normalized-entropy: 0.9798687566511527, [(2, 28), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [88, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 2, 0]]
** centroid: 4, normalized-entropy: 0.1792560669283214, [(1, 72), (2, 2)]
*** center 5: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 67, 0]]
** centroid: 6, normalized-entropy: 0.3638469981769295, [(1, 5), (2, 67)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20262685504928232] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20262685504928232, 0.1496777404360473] ***
*** starting iteration: 2; err: [Inf, 0.20262685504928232, 0.1496777404360473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20262685504928232, 0.1496777404360473, 0.1460495465286076] ***
*** starting iteration: 3; err: [Inf, 0.20262685504928232, 0.1496777404360473, 0.1460495465286076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20262685504928232, 0.1496777404360473, 0.1460495465286076, 0.1452797034876421] ***
*** finished computation of 7 references, err: [Inf, 0.20262685504928232, 0.1496777404360473, 0.1460495465286076, 0.1452797034876421] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [95, 2, 0]]
** centroid: 1, normalized-entropy: 0.14489961753310668, [(1, 95), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 25, 0]]
** centroid: 2, normalized-entropy: 0.8960382325345574, [(1, 55), (2, 25)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 45, 15]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 45), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 52, 0]]
** centroid: 5, normalized-entropy: 0.9340680553754911, [(1, 28), (2, 52)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 49, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1868132563624531] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1868132563624531, 0.14552985620871187] ***
*** starting iteration: 2; err: [Inf, 0.1868132563624531, 0.14552985620871187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1868132563624531, 0.14552985620871187, 0.14246016892697663] ***
*** starting iteration: 3; err: [Inf, 0.1868132563624531, 0.14552985620871187, 0.14246016892697663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1868132563624531, 0.14552985620871187, 0.14246016892697663, 0.14182747425697745] ***
*** finished computation of 7 references, err: [Inf, 0.1868132563624531, 0.14552985620871187, 0.14246016892697663, 0.14182747425697745] ***
*** center 1: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 39, 16]]
** centroid: 2, normalized-entropy: 0.8698926856041562, [(2, 39), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [49, 34, 0]]
** centroid: 4, normalized-entropy: 0.9763102872004581, [(1, 49), (2, 34)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 47, 0]]
** centroid: 5, normalized-entropy: 0.9134601452569628, [(1, 23), (2, 47)]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19713516687974333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19713516687974333, 0.14638636936247348] ***
*** starting iteration: 2; err: [Inf, 0.19713516687974333, 0.14638636936247348] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19713516687974333, 0.14638636936247348, 0.1425861069627572] ***
*** starting iteration: 3; err: [Inf, 0.19713516687974333, 0.14638636936247348, 0.1425861069627572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19713516687974333, 0.14638636936247348, 0.1425861069627572, 0.14195423929579556] ***
*** finished computation of 7 references, err: [Inf, 0.19713516687974333, 0.14638636936247348, 0.1425861069627572, 0.14195423929579556] ***
*** center 1: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 39, 15]]
** centroid: 2, normalized-entropy: 0.8524051786494784, [(2, 39), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 8, 0]]
** centroid: 3, normalized-entropy: 0.52764232609436, [(1, 59), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 31, 0]]
** centroid: 4, normalized-entropy: 0.8824744521750667, [(1, 72), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 54, 0]]
** centroid: 5, normalized-entropy: 0.6559420757694151, [(1, 11), (2, 54)]
*** center 6: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 48, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1977424270696938] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1977424270696938, 0.1433400144621264] ***
*** starting iteration: 2; err: [Inf, 0.1977424270696938, 0.1433400144621264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1977424270696938, 0.1433400144621264, 0.13959342981502415] ***
*** starting iteration: 3; err: [Inf, 0.1977424270696938, 0.1433400144621264, 0.13959342981502415] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1977424270696938, 0.1433400144621264, 0.13959342981502415, 0.13932884703576565] ***
*** finished computation of 7 references, err: [Inf, 0.1977424270696938, 0.1433400144621264, 0.13959342981502415, 0.13932884703576565] ***
*** center 1: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 50, 12]]
** centroid: 2, normalized-entropy: 0.708835673332196, [(2, 50), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [72, 3, 0]]
** centroid: 3, normalized-entropy: 0.24229218908241482, [(1, 72), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [74, 13, 0]]
** centroid: 4, normalized-entropy: 0.6084002154765848, [(1, 74), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 53, 0]]
** centroid: 5, normalized-entropy: 0.9049382594235603, [(1, 25), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 49, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18338752794684843] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18338752794684843, 0.14892455584928393] ***
*** starting iteration: 2; err: [Inf, 0.18338752794684843, 0.14892455584928393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18338752794684843, 0.14892455584928393, 0.1448112840168178] ***
*** starting iteration: 3; err: [Inf, 0.18338752794684843, 0.14892455584928393, 0.1448112840168178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18338752794684843, 0.14892455584928393, 0.1448112840168178, 0.14379747599549592] ***
*** starting iteration: 4; err: [Inf, 0.18338752794684843, 0.14892455584928393, 0.1448112840168178, 0.14379747599549592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18338752794684843, 0.14892455584928393, 0.1448112840168178, 0.14379747599549592, 0.14327208179980516] ***
*** finished computation of 7 references, err: [Inf, 0.18338752794684843, 0.14892455584928393, 0.1448112840168178, 0.14379747599549592, 0.14327208179980516] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 55, 18]]
** centroid: 1, normalized-entropy: 0.8058049113482652, [(2, 55), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [63, 4, 0]]
** centroid: 3, normalized-entropy: 0.32625881462949274, [(1, 63), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [50, 20, 0]]
** centroid: 4, normalized-entropy: 0.8631205685666311, [(1, 50), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [79, 4, 0]]
** centroid: 5, normalized-entropy: 0.27866980356389914, [(1, 79), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [65, 8, 0]]
** centroid: 6, normalized-entropy: 0.4986751363204345, [(1, 65), (2, 8)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 64, 1]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18822904534637927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18822904534637927, 0.15058081471547485] ***
*** starting iteration: 2; err: [Inf, 0.18822904534637927, 0.15058081471547485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18822904534637927, 0.15058081471547485, 0.14633577251806856] ***
*** starting iteration: 3; err: [Inf, 0.18822904534637927, 0.15058081471547485, 0.14633577251806856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18822904534637927, 0.15058081471547485, 0.14633577251806856, 0.1453898805193603] ***
*** finished computation of 7 references, err: [Inf, 0.18822904534637927, 0.15058081471547485, 0.14633577251806856, 0.1453898805193603] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 76, 8]]
** centroid: 1, normalized-entropy: 0.45371633918694493, [(2, 76), (3, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [77, 4, 0]]
** centroid: 3, normalized-entropy: 0.2837689703721877, [(1, 77), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [69, 25, 0]]
** centroid: 4, normalized-entropy: 0.8356038276131503, [(1, 69), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [52, 22, 0]]
** centroid: 5, normalized-entropy: 0.8779620013943914, [(1, 52), (2, 22)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2115774349514395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2115774349514395, 0.14857190091209485] ***
*** starting iteration: 2; err: [Inf, 0.2115774349514395, 0.14857190091209485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2115774349514395, 0.14857190091209485, 0.1446078153788112] ***
*** starting iteration: 3; err: [Inf, 0.2115774349514395, 0.14857190091209485, 0.1446078153788112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2115774349514395, 0.14857190091209485, 0.1446078153788112, 0.14405922457203268] ***
*** finished computation of 7 references, err: [Inf, 0.2115774349514395, 0.14857190091209485, 0.1446078153788112, 0.14405922457203268] ***
*** center 1: selecting labels [1] (freq >= 2) [from [85, 1, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 32, 14]]
** centroid: 3, normalized-entropy: 0.8865408928220899, [(2, 32), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 12, 0]]
** centroid: 5, normalized-entropy: 0.6722948170756378, [(1, 56), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 64, 0]]
** centroid: 6, normalized-entropy: 0.19590927087360496, [(1, 2), (2, 64)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 60, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19440107584465294] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19440107584465294, 0.15079809547774495] ***
*** starting iteration: 2; err: [Inf, 0.19440107584465294, 0.15079809547774495] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19440107584465294, 0.15079809547774495, 0.14687092446535827] ***
*** starting iteration: 3; err: [Inf, 0.19440107584465294, 0.15079809547774495, 0.14687092446535827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19440107584465294, 0.15079809547774495, 0.14687092446535827, 0.14599872272554784] ***
*** finished computation of 7 references, err: [Inf, 0.19440107584465294, 0.15079809547774495, 0.14687092446535827, 0.14599872272554784] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 56, 15]]
** centroid: 2, normalized-entropy: 0.743898745288434, [(2, 56), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [74, 9, 0]]
** centroid: 3, normalized-entropy: 0.4951734787020683, [(1, 74), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [16, 42, 0]]
** centroid: 4, normalized-entropy: 0.8497511372532974, [(1, 16), (2, 42)]
*** center 5: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [20, 52, 0]]
** centroid: 6, normalized-entropy: 0.8524051786494784, [(1, 20), (2, 52)]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 353,3 => 30,1 => 617), Dict(2 => 394,3 => 38,1 => 568))
[ Info: ===== scores for single classifier: {"micro_f1":0.954,"precision":0.954,"recall":0.954,"macro_recall":0.9649704487500298,"macro_f1":0.8959064216066378,"accuracy":0.954,"class_f1":{"2":0.9404145077720208,"3":0.7676767676767677,"1":0.9796279893711248},"class_precision":{"2":0.9603174603174603,"3":0.6229508196721312,"1":0.9857397504456328},"class_recall":{"2":0.9213197969543148,"3":1.0,"1":0.9735915492957746}}
[ Info: ===== scores for 1: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9798711899144443,"macro_f1":0.9674685612253219,"accuracy":0.971,"class_f1":{"2":0.9634300126103404,"3":0.9620253164556963,"1":0.976950354609929},"class_precision":{"2":0.9573934837092731,"3":0.926829268292683,"1":0.9839285714285714},"class_recall":{"2":0.9695431472081218,"3":1.0,"1":0.9700704225352113}}
[ Info: ===== scores for 5: {"micro_f1":0.975,"precision":0.975,"recall":0.975,"macro_recall":0.9827369462119587,"macro_f1":0.9666135361431157,"accuracy":0.975,"class_f1":{"2":0.9684741488020177,"3":0.9500000000000001,"1":0.9813664596273293},"class_precision":{"2":0.9624060150375939,"3":0.9047619047619048,"1":0.9892665474060823},"class_recall":{"2":0.9746192893401016,"3":1.0,"1":0.9735915492957746}}
[ Info: ===== scores for 7: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9810448988346322,"macro_f1":0.9651646605952632,"accuracy":0.973,"class_f1":{"2":0.965865992414665,"3":0.9500000000000001,"1":0.9796279893711248},"class_precision":{"2":0.9622166246851386,"3":0.9047619047619048,"1":0.9857397504456328},"class_recall":{"2":0.9695431472081218,"3":1.0,"1":0.9735915492957746}}
[ Info: ===== scores for 9: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9764870951597912,"macro_f1":0.9502626367184348,"accuracy":0.967,"class_f1":{"2":0.9581749049429656,"3":0.9156626506024096,"1":0.976950354609929},"class_precision":{"2":0.9569620253164557,"3":0.8444444444444444,"1":0.9839285714285714},"class_recall":{"2":0.9593908629441624,"3":1.0,"1":0.9700704225352113}}
[ Info: ===== scores for 11: {"micro_f1":0.964,"precision":0.964,"recall":0.964,"macro_recall":0.9734306856366626,"macro_f1":0.9446782470368715,"accuracy":0.964,"class_f1":{"2":0.9539641943734015,"3":0.9047619047619047,"1":0.9753086419753086},"class_precision":{"2":0.961340206185567,"3":0.8260869565217391,"1":0.9770318021201413},"class_recall":{"2":0.9467005076142132,"3":1.0,"1":0.9735915492957746}}
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.975, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.981, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.981, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.975, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.981,"k":3,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.9810000000000001,"precision":0.981,"recall":0.981,"macro_recall":0.9867764114296609,"macro_f1":0.9746152656200824,"accuracy":0.981,"class_f1":{"2":0.9759797724399494,"3":0.9620253164556963,"1":0.9858407079646017},"class_precision":{"2":0.9722921914357683,"3":0.926829268292683,"1":0.9911032028469751},"class_recall":{"2":0.9796954314720813,"3":1.0,"1":0.9806338028169014}}
Test Summary: | Pass  Total
AKNC          |    8      8
[611, 2, 3, 2, 11, 9, 2, 2, 8, 3, 3, 3, 2, 9, 10, 8, 12, 5, 2, 17, 10, 7, 28, 10, 2, 5, 14, 12, 13, 7, 4, 25, 11, 3, 46, 11, 3, 4, 4, 1, 5, 4, 8, 9, 8, 4, 12, 11, 24, 5, 24, 4, 18, 15, 3, 24, 12, 22, 16, 54, 12, 22, 2, 25, 10, 10, 46, 24, 22, 10, 1, 2, 1, 12, 10, 25, 5, 28, 4, 5, 4, 2, 5, 13, 15, 19, 13, 2, 14, 78, 4, 5, 50, 14, 44, 2, 94, 22, 8, 27, 72, 25, 5, 146, 6, 40, 11, 132, 182, 16, 15, 49, 4, 3, 8, 4, 62, 5, 19, 2, 38, 20, 21, 14, 3, 5, 4, 47, 15, 11, 57, 40, 17, 21, 18, 4, 30, 5, 15, 71, 15, 2, 101, 205, 12, 26, 28, 50, 18, 10, 629, 28, 46, 16, 3, 28, 35, 26, 52, 6, 127, 8, 5, 6, 51, 42, 15, 20, 22, 194, 20, 3, 6, 9, 14, 1, 17, 5, 19, 23, 15, 115, 24, 78, 4, 11, 8, 61, 4, 23, 4, 30, 6, 59, 16, 4, 8, 130, 26, 4, 22, 19, 57, 5, 11, 62, 111, 12, 9, 107, 59, 60, 16, 24, 23, 11, 157, 8, 71, 15, 13, 67, 10, 67, 5, 17, 26, 12, 96, 94, 100, 7, 46, 21, 9, 12, 8, 10, 12, 60, 565, 32, 52, 29, 205, 21, 7, 1, 15, 62, 28, 51, 8, 74, 8, 294, 26, 14, 33, 6, 41, 51, 10, 26, 13, 5, 8, 6, 12, 15, 72, 78, 27, 5, 3, 36, 41, 36, 33, 7, 73, 20, 7, 12, 78, 4, 3, 44, 16, 29, 143, 48, 14, 4, 13, 23, 2, 54, 9, 25]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.599, speedup = 0.3371886731003274, eval_ratio = 0.073627)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4219370039682539,"recall":0.41406249999999994,"f1":null,"seconds":0.00017369911074638367,"exhaustive_search_seconds":0.00040250830352306366,"evaluations":500.3359375,"distances_sum":1734.064827594047}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5677083333333338,"recall":0.5677083333333338,"f1":null,"seconds":0.00026816315948963165,"exhaustive_search_seconds":0.00040250830352306366,"evaluations":636.7265625,"distances_sum":1651.0957471709066}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6623263888888888,"recall":0.6623263888888888,"f1":0.6623263888888888,"seconds":0.0003772582858800888,"exhaustive_search_seconds":0.00040250830352306366,"evaluations":782.65625,"distances_sum":1602.2417626552922}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7508680555555552,"recall":0.7508680555555552,"f1":0.7508680555555552,"seconds":0.0005465410649776459,"exhaustive_search_seconds":0.00040250830352306366,"evaluations":913.3125,"distances_sum":1573.9098568241525}
KCenters.DeloneInvIndex> reached performance {"precision":0.8237847222222214,"recall":0.8237847222222214,"f1":0.8237847222222214,"seconds":0.0005883369594812393,"exhaustive_search_seconds":0.00040250830352306366,"evaluations":1025.359375,"distances_sum":1554.0978157586828}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7170000000000002, speedup = 0.8082857377655421, eval_ratio = 0.091364)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
